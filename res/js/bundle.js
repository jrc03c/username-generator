(() => {
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };

  // node_modules/@vue/shared/dist/shared.cjs.js
  var require_shared_cjs = __commonJS({
    "node_modules/@vue/shared/dist/shared.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function makeMap(str, expectsLowerCase) {
        const map = /* @__PURE__ */ Object.create(null);
        const list = str.split(",");
        for (let i = 0; i < list.length; i++) {
          map[list[i]] = true;
        }
        return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
      }
      var EMPTY_OBJ = Object.freeze({});
      var EMPTY_ARR = Object.freeze([]);
      var NOOP = () => {
      };
      var NO = () => false;
      var onRE = /^on[^a-z]/;
      var isOn = (key) => onRE.test(key);
      var isModelListener = (key) => key.startsWith("onUpdate:");
      var extend = Object.assign;
      var remove = (arr, el) => {
        const i = arr.indexOf(el);
        if (i > -1) {
          arr.splice(i, 1);
        }
      };
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var hasOwn = (val, key) => hasOwnProperty.call(val, key);
      var isArray = Array.isArray;
      var isMap = (val) => toTypeString(val) === "[object Map]";
      var isSet = (val) => toTypeString(val) === "[object Set]";
      var isDate = (val) => toTypeString(val) === "[object Date]";
      var isRegExp = (val) => toTypeString(val) === "[object RegExp]";
      var isFunction = (val) => typeof val === "function";
      var isString = (val) => typeof val === "string";
      var isSymbol = (val) => typeof val === "symbol";
      var isObject = (val) => val !== null && typeof val === "object";
      var isPromise = (val) => {
        return isObject(val) && isFunction(val.then) && isFunction(val.catch);
      };
      var objectToString = Object.prototype.toString;
      var toTypeString = (value) => objectToString.call(value);
      var toRawType = (value) => {
        return toTypeString(value).slice(8, -1);
      };
      var isPlainObject = (val) => toTypeString(val) === "[object Object]";
      var isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
      var isReservedProp = /* @__PURE__ */ makeMap(
        // the leading comma is intentional so empty string "" is also included
        ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
      );
      var isBuiltInDirective = /* @__PURE__ */ makeMap(
        "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
      );
      var cacheStringFunction = (fn) => {
        const cache = /* @__PURE__ */ Object.create(null);
        return (str) => {
          const hit = cache[str];
          return hit || (cache[str] = fn(str));
        };
      };
      var camelizeRE = /-(\w)/g;
      var camelize = cacheStringFunction((str) => {
        return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
      });
      var hyphenateRE = /\B([A-Z])/g;
      var hyphenate = cacheStringFunction(
        (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
      );
      var capitalize = cacheStringFunction(
        (str) => str.charAt(0).toUpperCase() + str.slice(1)
      );
      var toHandlerKey = cacheStringFunction(
        (str) => str ? `on${capitalize(str)}` : ``
      );
      var hasChanged = (value, oldValue) => !Object.is(value, oldValue);
      var invokeArrayFns = (fns, arg) => {
        for (let i = 0; i < fns.length; i++) {
          fns[i](arg);
        }
      };
      var def = (obj, key, value) => {
        Object.defineProperty(obj, key, {
          configurable: true,
          enumerable: false,
          value
        });
      };
      var looseToNumber = (val) => {
        const n = parseFloat(val);
        return isNaN(n) ? val : n;
      };
      var toNumber = (val) => {
        const n = isString(val) ? Number(val) : NaN;
        return isNaN(n) ? val : n;
      };
      var _globalThis;
      var getGlobalThis = () => {
        return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
      };
      var identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
      function genPropsAccessExp(name) {
        return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;
      }
      var PatchFlagNames = {
        [1]: `TEXT`,
        [2]: `CLASS`,
        [4]: `STYLE`,
        [8]: `PROPS`,
        [16]: `FULL_PROPS`,
        [32]: `HYDRATE_EVENTS`,
        [64]: `STABLE_FRAGMENT`,
        [128]: `KEYED_FRAGMENT`,
        [256]: `UNKEYED_FRAGMENT`,
        [512]: `NEED_PATCH`,
        [1024]: `DYNAMIC_SLOTS`,
        [2048]: `DEV_ROOT_FRAGMENT`,
        [-1]: `HOISTED`,
        [-2]: `BAIL`
      };
      var slotFlagsText = {
        [1]: "STABLE",
        [2]: "DYNAMIC",
        [3]: "FORWARDED"
      };
      var GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console";
      var isGloballyWhitelisted = /* @__PURE__ */ makeMap(GLOBALS_WHITE_LISTED);
      var range = 2;
      function generateCodeFrame(source, start = 0, end = source.length) {
        let lines = source.split(/(\r?\n)/);
        const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
        lines = lines.filter((_, idx) => idx % 2 === 0);
        let count = 0;
        const res = [];
        for (let i = 0; i < lines.length; i++) {
          count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
          if (count >= start) {
            for (let j = i - range; j <= i + range || end > count; j++) {
              if (j < 0 || j >= lines.length)
                continue;
              const line = j + 1;
              res.push(
                `${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`
              );
              const lineLength = lines[j].length;
              const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
              if (j === i) {
                const pad = start - (count - (lineLength + newLineSeqLength));
                const length = Math.max(
                  1,
                  end > count ? lineLength - pad : end - start
                );
                res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
              } else if (j > i) {
                if (end > count) {
                  const length = Math.max(Math.min(end - count, lineLength), 1);
                  res.push(`   |  ` + "^".repeat(length));
                }
                count += lineLength + newLineSeqLength;
              }
            }
            break;
          }
        }
        return res.join("\n");
      }
      function normalizeStyle(value) {
        if (isArray(value)) {
          const res = {};
          for (let i = 0; i < value.length; i++) {
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) {
              for (const key in normalized) {
                res[key] = normalized[key];
              }
            }
          }
          return res;
        } else if (isString(value)) {
          return value;
        } else if (isObject(value)) {
          return value;
        }
      }
      var listDelimiterRE = /;(?![^(]*\))/g;
      var propertyDelimiterRE = /:([^]+)/;
      var styleCommentRE = /\/\*[^]*?\*\//g;
      function parseStringStyle(cssText) {
        const ret = {};
        cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
          if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
          }
        });
        return ret;
      }
      function stringifyStyle(styles) {
        let ret = "";
        if (!styles || isString(styles)) {
          return ret;
        }
        for (const key in styles) {
          const value = styles[key];
          const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
          if (isString(value) || typeof value === "number") {
            ret += `${normalizedKey}:${value};`;
          }
        }
        return ret;
      }
      function normalizeClass(value) {
        let res = "";
        if (isString(value)) {
          res = value;
        } else if (isArray(value)) {
          for (let i = 0; i < value.length; i++) {
            const normalized = normalizeClass(value[i]);
            if (normalized) {
              res += normalized + " ";
            }
          }
        } else if (isObject(value)) {
          for (const name in value) {
            if (value[name]) {
              res += name + " ";
            }
          }
        }
        return res.trim();
      }
      function normalizeProps(props) {
        if (!props)
          return null;
        let { class: klass, style } = props;
        if (klass && !isString(klass)) {
          props.class = normalizeClass(klass);
        }
        if (style) {
          props.style = normalizeStyle(style);
        }
        return props;
      }
      var HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
      var SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
      var VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
      var isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
      var isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
      var isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
      var specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
      var isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
      var isBooleanAttr = /* @__PURE__ */ makeMap(
        specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`
      );
      function includeBooleanAttr(value) {
        return !!value || value === "";
      }
      var unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
      var attrValidationCache = {};
      function isSSRSafeAttrName(name) {
        if (attrValidationCache.hasOwnProperty(name)) {
          return attrValidationCache[name];
        }
        const isUnsafe = unsafeAttrCharRE.test(name);
        if (isUnsafe) {
          console.error(`unsafe attribute name: ${name}`);
        }
        return attrValidationCache[name] = !isUnsafe;
      }
      var propsToAttrMap = {
        acceptCharset: "accept-charset",
        className: "class",
        htmlFor: "for",
        httpEquiv: "http-equiv"
      };
      var isKnownHtmlAttr = /* @__PURE__ */ makeMap(
        `accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`
      );
      var isKnownSvgAttr = /* @__PURE__ */ makeMap(
        `xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`
      );
      var escapeRE = /["'&<>]/;
      function escapeHtml(string) {
        const str = "" + string;
        const match = escapeRE.exec(str);
        if (!match) {
          return str;
        }
        let html = "";
        let escaped;
        let index;
        let lastIndex = 0;
        for (index = match.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escaped = "&quot;";
              break;
            case 38:
              escaped = "&amp;";
              break;
            case 39:
              escaped = "&#39;";
              break;
            case 60:
              escaped = "&lt;";
              break;
            case 62:
              escaped = "&gt;";
              break;
            default:
              continue;
          }
          if (lastIndex !== index) {
            html += str.slice(lastIndex, index);
          }
          lastIndex = index + 1;
          html += escaped;
        }
        return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
      }
      var commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
      function escapeHtmlComment(src) {
        return src.replace(commentStripRE, "");
      }
      function looseCompareArrays(a, b) {
        if (a.length !== b.length)
          return false;
        let equal = true;
        for (let i = 0; equal && i < a.length; i++) {
          equal = looseEqual(a[i], b[i]);
        }
        return equal;
      }
      function looseEqual(a, b) {
        if (a === b)
          return true;
        let aValidType = isDate(a);
        let bValidType = isDate(b);
        if (aValidType || bValidType) {
          return aValidType && bValidType ? a.getTime() === b.getTime() : false;
        }
        aValidType = isSymbol(a);
        bValidType = isSymbol(b);
        if (aValidType || bValidType) {
          return a === b;
        }
        aValidType = isArray(a);
        bValidType = isArray(b);
        if (aValidType || bValidType) {
          return aValidType && bValidType ? looseCompareArrays(a, b) : false;
        }
        aValidType = isObject(a);
        bValidType = isObject(b);
        if (aValidType || bValidType) {
          if (!aValidType || !bValidType) {
            return false;
          }
          const aKeysCount = Object.keys(a).length;
          const bKeysCount = Object.keys(b).length;
          if (aKeysCount !== bKeysCount) {
            return false;
          }
          for (const key in a) {
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
              return false;
            }
          }
        }
        return String(a) === String(b);
      }
      function looseIndexOf(arr, val) {
        return arr.findIndex((item) => looseEqual(item, val));
      }
      var toDisplayString = (val) => {
        return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
      };
      var replacer = (_key, val) => {
        if (val && val.__v_isRef) {
          return replacer(_key, val.value);
        } else if (isMap(val)) {
          return {
            [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
              entries[`${key} =>`] = val2;
              return entries;
            }, {})
          };
        } else if (isSet(val)) {
          return {
            [`Set(${val.size})`]: [...val.values()]
          };
        } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
          return String(val);
        }
        return val;
      };
      exports.EMPTY_ARR = EMPTY_ARR;
      exports.EMPTY_OBJ = EMPTY_OBJ;
      exports.NO = NO;
      exports.NOOP = NOOP;
      exports.PatchFlagNames = PatchFlagNames;
      exports.camelize = camelize;
      exports.capitalize = capitalize;
      exports.def = def;
      exports.escapeHtml = escapeHtml;
      exports.escapeHtmlComment = escapeHtmlComment;
      exports.extend = extend;
      exports.genPropsAccessExp = genPropsAccessExp;
      exports.generateCodeFrame = generateCodeFrame;
      exports.getGlobalThis = getGlobalThis;
      exports.hasChanged = hasChanged;
      exports.hasOwn = hasOwn;
      exports.hyphenate = hyphenate;
      exports.includeBooleanAttr = includeBooleanAttr;
      exports.invokeArrayFns = invokeArrayFns;
      exports.isArray = isArray;
      exports.isBooleanAttr = isBooleanAttr;
      exports.isBuiltInDirective = isBuiltInDirective;
      exports.isDate = isDate;
      exports.isFunction = isFunction;
      exports.isGloballyWhitelisted = isGloballyWhitelisted;
      exports.isHTMLTag = isHTMLTag;
      exports.isIntegerKey = isIntegerKey;
      exports.isKnownHtmlAttr = isKnownHtmlAttr;
      exports.isKnownSvgAttr = isKnownSvgAttr;
      exports.isMap = isMap;
      exports.isModelListener = isModelListener;
      exports.isObject = isObject;
      exports.isOn = isOn;
      exports.isPlainObject = isPlainObject;
      exports.isPromise = isPromise;
      exports.isRegExp = isRegExp;
      exports.isReservedProp = isReservedProp;
      exports.isSSRSafeAttrName = isSSRSafeAttrName;
      exports.isSVGTag = isSVGTag;
      exports.isSet = isSet;
      exports.isSpecialBooleanAttr = isSpecialBooleanAttr;
      exports.isString = isString;
      exports.isSymbol = isSymbol;
      exports.isVoidTag = isVoidTag;
      exports.looseEqual = looseEqual;
      exports.looseIndexOf = looseIndexOf;
      exports.looseToNumber = looseToNumber;
      exports.makeMap = makeMap;
      exports.normalizeClass = normalizeClass;
      exports.normalizeProps = normalizeProps;
      exports.normalizeStyle = normalizeStyle;
      exports.objectToString = objectToString;
      exports.parseStringStyle = parseStringStyle;
      exports.propsToAttrMap = propsToAttrMap;
      exports.remove = remove;
      exports.slotFlagsText = slotFlagsText;
      exports.stringifyStyle = stringifyStyle;
      exports.toDisplayString = toDisplayString;
      exports.toHandlerKey = toHandlerKey;
      exports.toNumber = toNumber;
      exports.toRawType = toRawType;
      exports.toTypeString = toTypeString;
    }
  });

  // node_modules/@vue/shared/index.js
  var require_shared = __commonJS({
    "node_modules/@vue/shared/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_shared_cjs();
      }
    }
  });

  // node_modules/@babel/parser/lib/index.js
  var require_lib = __commonJS({
    "node_modules/@babel/parser/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      var Position = class {
        constructor(line, col, index) {
          this.line = void 0;
          this.column = void 0;
          this.index = void 0;
          this.line = line;
          this.column = col;
          this.index = index;
        }
      };
      var SourceLocation = class {
        constructor(start, end) {
          this.start = void 0;
          this.end = void 0;
          this.filename = void 0;
          this.identifierName = void 0;
          this.start = start;
          this.end = end;
        }
      };
      function createPositionWithColumnOffset(position, columnOffset) {
        const {
          line,
          column,
          index
        } = position;
        return new Position(line, column + columnOffset, index + columnOffset);
      }
      var ParseErrorCode = {
        SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
        SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
      };
      var reflect = (keys, last = keys.length - 1) => ({
        get() {
          return keys.reduce((object, key) => object[key], this);
        },
        set(value) {
          keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);
        }
      });
      var instantiate = (constructor, properties, descriptors) => Object.keys(descriptors).map((key) => [key, descriptors[key]]).filter(([, descriptor]) => !!descriptor).map(([key, descriptor]) => [key, typeof descriptor === "function" ? {
        value: descriptor,
        enumerable: false
      } : typeof descriptor.reflect === "string" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split("."))) : descriptor]).reduce((instance, [key, descriptor]) => Object.defineProperty(instance, key, Object.assign({
        configurable: true
      }, descriptor)), Object.assign(new constructor(), properties));
      var ModuleErrors = {
        ImportMetaOutsideModule: {
          message: `import.meta may appear only with 'sourceType: "module"'`,
          code: ParseErrorCode.SourceTypeModuleError
        },
        ImportOutsideModule: {
          message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
          code: ParseErrorCode.SourceTypeModuleError
        }
      };
      var NodeDescriptions = {
        ArrayPattern: "array destructuring pattern",
        AssignmentExpression: "assignment expression",
        AssignmentPattern: "assignment expression",
        ArrowFunctionExpression: "arrow function expression",
        ConditionalExpression: "conditional expression",
        CatchClause: "catch clause",
        ForOfStatement: "for-of statement",
        ForInStatement: "for-in statement",
        ForStatement: "for-loop",
        FormalParameters: "function parameter list",
        Identifier: "identifier",
        ImportSpecifier: "import specifier",
        ImportDefaultSpecifier: "import default specifier",
        ImportNamespaceSpecifier: "import namespace specifier",
        ObjectPattern: "object destructuring pattern",
        ParenthesizedExpression: "parenthesized expression",
        RestElement: "rest element",
        UpdateExpression: {
          true: "prefix operation",
          false: "postfix operation"
        },
        VariableDeclarator: "variable declaration",
        YieldExpression: "yield expression"
      };
      var toNodeDescription = ({
        type,
        prefix: prefix2
      }) => type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[String(prefix2)] : NodeDescriptions[type];
      var StandardErrors = {
        AccessorIsGenerator: ({
          kind
        }) => `A ${kind}ter cannot be a generator.`,
        ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
        AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
        AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
        AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
        AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
        AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
        AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
        AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
        BadGetterArity: "A 'get' accessor must not have any formal parameters.",
        BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
        BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
        ConstructorClassField: "Classes may not have a field named 'constructor'.",
        ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
        ConstructorIsAccessor: "Class constructor may not be an accessor.",
        ConstructorIsAsync: "Constructor can't be an async function.",
        ConstructorIsGenerator: "Constructor can't be a generator.",
        DeclarationMissingInitializer: ({
          kind
        }) => `Missing initializer in ${kind} declaration.`,
        DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
        DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
        DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
        DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
        DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
        DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
        DecoratorStaticBlock: "Decorators can't be used with a static block.",
        DeletePrivateField: "Deleting a private field is not allowed.",
        DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
        DuplicateConstructor: "Duplicate constructor in the same class.",
        DuplicateDefaultExport: "Only one default export allowed per module.",
        DuplicateExport: ({
          exportName
        }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
        DuplicateProto: "Redefinition of __proto__ property.",
        DuplicateRegExpFlags: "Duplicate regular expression flag.",
        ElementAfterRest: "Rest element must be last element.",
        EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
        ExportBindingIsString: ({
          localName,
          exportName
        }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
        ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
        ForInOfLoopInitializer: ({
          type
        }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
        ForInUsing: "For-in loop may not start with 'using' declaration.",
        ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
        ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
        GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
        IllegalBreakContinue: ({
          type
        }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
        IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
        IllegalReturn: "'return' outside of function.",
        ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.",
        ImportBindingIsString: ({
          importName
        }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName}" as foo }\`?`,
        ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
        ImportCallArity: ({
          maxArgumentCount
        }) => `\`import()\` requires exactly ${maxArgumentCount === 1 ? "one argument" : "one or two arguments"}.`,
        ImportCallNotNewExpression: "Cannot use new with import(...).",
        ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
        ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
        ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
        ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
        IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
        InvalidBigIntLiteral: "Invalid BigIntLiteral.",
        InvalidCodePoint: "Code point out of bounds.",
        InvalidCoverInitializedName: "Invalid shorthand property initializer.",
        InvalidDecimal: "Invalid decimal.",
        InvalidDigit: ({
          radix
        }) => `Expected number in radix ${radix}.`,
        InvalidEscapeSequence: "Bad character escape sequence.",
        InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
        InvalidEscapedReservedWord: ({
          reservedWord
        }) => `Escape sequence in keyword ${reservedWord}.`,
        InvalidIdentifier: ({
          identifierName
        }) => `Invalid identifier ${identifierName}.`,
        InvalidLhs: ({
          ancestor
        }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
        InvalidLhsBinding: ({
          ancestor
        }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
        InvalidNumber: "Invalid number.",
        InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
        InvalidOrUnexpectedToken: ({
          unexpected
        }) => `Unexpected character '${unexpected}'.`,
        InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
        InvalidPrivateFieldResolution: ({
          identifierName
        }) => `Private name #${identifierName} is not defined.`,
        InvalidPropertyBindingPattern: "Binding member expression.",
        InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
        InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
        LabelRedeclaration: ({
          labelName
        }) => `Label '${labelName}' is already declared.`,
        LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
        LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
        MalformedRegExpFlags: "Invalid regular expression flag.",
        MissingClassName: "A class name is required.",
        MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
        MissingSemicolon: "Missing semicolon.",
        MissingPlugin: ({
          missingPlugin
        }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
        MissingOneOfPlugins: ({
          missingPlugin
        }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
        MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
        MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
        ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
        ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
        ModuleAttributesWithDuplicateKeys: ({
          key
        }) => `Duplicate key "${key}" is not allowed in module attributes.`,
        ModuleExportNameHasLoneSurrogate: ({
          surrogateCharCode
        }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
        ModuleExportUndefined: ({
          localName
        }) => `Export '${localName}' is not defined.`,
        MultipleDefaultsInSwitch: "Multiple default clauses.",
        NewlineAfterThrow: "Illegal newline after throw.",
        NoCatchOrFinally: "Missing catch or finally clause.",
        NumberIdentifier: "Identifier directly after number.",
        NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
        ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
        OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
        OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
        OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
        ParamDupe: "Argument name clash.",
        PatternHasAccessor: "Object pattern can't contain getter or setter.",
        PatternHasMethod: "Object pattern can't contain methods.",
        PrivateInExpectedIn: ({
          identifierName
        }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
        PrivateNameRedeclaration: ({
          identifierName
        }) => `Duplicate private name #${identifierName}.`,
        RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
        RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
        RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
        RecordNoProto: "'__proto__' is not allowed in Record expressions.",
        RestTrailingComma: "Unexpected trailing comma after rest element.",
        SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
        SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
        StaticPrototype: "Classes may not have static property named prototype.",
        SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
        SuperPrivateField: "Private fields can't be accessed on super.",
        TrailingDecorator: "Decorators must be attached to a class element.",
        TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
        TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
        TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
        UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
        UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
        UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
        UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
        UnexpectedKeyword: ({
          keyword
        }) => `Unexpected keyword '${keyword}'.`,
        UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
        UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
        UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
        UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
        UnexpectedPrivateField: "Unexpected private name.",
        UnexpectedReservedWord: ({
          reservedWord
        }) => `Unexpected reserved word '${reservedWord}'.`,
        UnexpectedSuper: "'super' is only allowed in object methods and classes.",
        UnexpectedToken: ({
          expected,
          unexpected
        }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
        UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
        UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
        UnsupportedBind: "Binding should be performed on object property.",
        UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
        UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
        UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
        UnsupportedMetaProperty: ({
          target,
          onlyValidPropertyName
        }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
        UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
        UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
        UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
        UnterminatedComment: "Unterminated comment.",
        UnterminatedRegExp: "Unterminated regular expression.",
        UnterminatedString: "Unterminated string constant.",
        UnterminatedTemplate: "Unterminated template.",
        UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
        VarRedeclaration: ({
          identifierName
        }) => `Identifier '${identifierName}' has already been declared.`,
        YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
        YieldInParameter: "Yield expression is not allowed in formal parameters.",
        ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
      };
      var StrictModeErrors = {
        StrictDelete: "Deleting local variable in strict mode.",
        StrictEvalArguments: ({
          referenceName
        }) => `Assigning to '${referenceName}' in strict mode.`,
        StrictEvalArgumentsBinding: ({
          bindingName
        }) => `Binding '${bindingName}' in strict mode.`,
        StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
        StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
        StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
        StrictWith: "'with' in strict mode."
      };
      var UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
      var PipelineOperatorErrors = {
        PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
        PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
        PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
        PipeTopicUnconfiguredToken: ({
          token
        }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,
        PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
        PipeUnparenthesizedBody: ({
          type
        }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
          type
        })}; please wrap it in parentheses.`,
        PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
        PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
        PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
        PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
        PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
        PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
      };
      var _excluded$1 = ["toMessage"];
      var _excluded2$1 = ["message"];
      function toParseErrorConstructor(_ref) {
        let {
          toMessage
        } = _ref, properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);
        return function constructor({
          loc,
          details
        }) {
          return instantiate(SyntaxError, Object.assign({}, properties, {
            loc
          }), {
            clone(overrides = {}) {
              const loc2 = overrides.loc || {};
              return constructor({
                loc: new Position("line" in loc2 ? loc2.line : this.loc.line, "column" in loc2 ? loc2.column : this.loc.column, "index" in loc2 ? loc2.index : this.loc.index),
                details: Object.assign({}, this.details, overrides.details)
              });
            },
            details: {
              value: details,
              enumerable: false
            },
            message: {
              get() {
                return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;
              },
              set(value) {
                Object.defineProperty(this, "message", {
                  value
                });
              }
            },
            pos: {
              reflect: "loc.index",
              enumerable: true
            },
            missingPlugin: "missingPlugin" in details && {
              reflect: "details.missingPlugin",
              enumerable: true
            }
          });
        };
      }
      function ParseErrorEnum(argument, syntaxPlugin) {
        if (Array.isArray(argument)) {
          return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
        }
        const ParseErrorConstructors = {};
        for (const reasonCode of Object.keys(argument)) {
          const template2 = argument[reasonCode];
          const _ref2 = typeof template2 === "string" ? {
            message: () => template2
          } : typeof template2 === "function" ? {
            message: template2
          } : template2, {
            message
          } = _ref2, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);
          const toMessage = typeof message === "string" ? () => message : message;
          ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
            code: ParseErrorCode.SyntaxError,
            reasonCode,
            toMessage
          }, syntaxPlugin ? {
            syntaxPlugin
          } : {}, rest));
        }
        return ParseErrorConstructors;
      }
      var Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
      var {
        defineProperty
      } = Object;
      var toUnenumerable = (object, key) => defineProperty(object, key, {
        enumerable: false,
        value: object[key]
      });
      function toESTreeLocation(node) {
        node.loc.start && toUnenumerable(node.loc.start, "index");
        node.loc.end && toUnenumerable(node.loc.end, "index");
        return node;
      }
      var estree = (superClass) => class ESTreeParserMixin extends superClass {
        parse() {
          const file = toESTreeLocation(super.parse());
          if (this.options.tokens) {
            file.tokens = file.tokens.map(toESTreeLocation);
          }
          return file;
        }
        parseRegExpLiteral({
          pattern,
          flags
        }) {
          let regex = null;
          try {
            regex = new RegExp(pattern, flags);
          } catch (e) {
          }
          const node = this.estreeParseLiteral(regex);
          node.regex = {
            pattern,
            flags
          };
          return node;
        }
        parseBigIntLiteral(value) {
          let bigInt;
          try {
            bigInt = BigInt(value);
          } catch (_unused) {
            bigInt = null;
          }
          const node = this.estreeParseLiteral(bigInt);
          node.bigint = String(node.value || value);
          return node;
        }
        parseDecimalLiteral(value) {
          const decimal = null;
          const node = this.estreeParseLiteral(decimal);
          node.decimal = String(node.value || value);
          return node;
        }
        estreeParseLiteral(value) {
          return this.parseLiteral(value, "Literal");
        }
        parseStringLiteral(value) {
          return this.estreeParseLiteral(value);
        }
        parseNumericLiteral(value) {
          return this.estreeParseLiteral(value);
        }
        parseNullLiteral() {
          return this.estreeParseLiteral(null);
        }
        parseBooleanLiteral(value) {
          return this.estreeParseLiteral(value);
        }
        directiveToStmt(directive) {
          const expression = directive.value;
          delete directive.value;
          expression.type = "Literal";
          expression.raw = expression.extra.raw;
          expression.value = expression.extra.expressionValue;
          const stmt = directive;
          stmt.type = "ExpressionStatement";
          stmt.expression = expression;
          stmt.directive = expression.extra.rawValue;
          delete expression.extra;
          return stmt;
        }
        initFunction(node, isAsync) {
          super.initFunction(node, isAsync);
          node.expression = false;
        }
        checkDeclaration(node) {
          if (node != null && this.isObjectProperty(node)) {
            this.checkDeclaration(node.value);
          } else {
            super.checkDeclaration(node);
          }
        }
        getObjectOrClassMethodParams(method) {
          return method.value.params;
        }
        isValidDirective(stmt) {
          var _stmt$expression$extr;
          return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
        }
        parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
          super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
          const directiveStatements = node.directives.map((d) => this.directiveToStmt(d));
          node.body = directiveStatements.concat(node.body);
          delete node.directives;
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
          if (method.typeParameters) {
            method.value.typeParameters = method.typeParameters;
            delete method.typeParameters;
          }
          classBody.body.push(method);
        }
        parsePrivateName() {
          const node = super.parsePrivateName();
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return node;
            }
          }
          return this.convertPrivateNameToPrivateIdentifier(node);
        }
        convertPrivateNameToPrivateIdentifier(node) {
          const name = super.getPrivateNameSV(node);
          node = node;
          delete node.id;
          node.name = name;
          node.type = "PrivateIdentifier";
          return node;
        }
        isPrivateName(node) {
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return super.isPrivateName(node);
            }
          }
          return node.type === "PrivateIdentifier";
        }
        getPrivateNameSV(node) {
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return super.getPrivateNameSV(node);
            }
          }
          return node.name;
        }
        parseLiteral(value, type) {
          const node = super.parseLiteral(value, type);
          node.raw = node.extra.raw;
          delete node.extra;
          return node;
        }
        parseFunctionBody(node, allowExpression, isMethod = false) {
          super.parseFunctionBody(node, allowExpression, isMethod);
          node.expression = node.body.type !== "BlockStatement";
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
          let funcNode = this.startNode();
          funcNode.kind = node.kind;
          funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
          funcNode.type = "FunctionExpression";
          delete funcNode.kind;
          node.value = funcNode;
          if (type === "ClassPrivateMethod") {
            node.computed = false;
          }
          return this.finishNode(node, "MethodDefinition");
        }
        parseClassProperty(...args) {
          const propertyNode = super.parseClassProperty(...args);
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return propertyNode;
            }
          }
          propertyNode.type = "PropertyDefinition";
          return propertyNode;
        }
        parseClassPrivateProperty(...args) {
          const propertyNode = super.parseClassPrivateProperty(...args);
          {
            if (!this.getPluginOption("estree", "classFeatures")) {
              return propertyNode;
            }
          }
          propertyNode.type = "PropertyDefinition";
          propertyNode.computed = false;
          return propertyNode;
        }
        parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
          const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
          if (node) {
            node.type = "Property";
            if (node.kind === "method") {
              node.kind = "init";
            }
            node.shorthand = false;
          }
          return node;
        }
        parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
          const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
          if (node) {
            node.kind = "init";
            node.type = "Property";
          }
          return node;
        }
        isValidLVal(type, isUnparenthesizedInAssign, binding) {
          return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
        }
        isAssignable(node, isBinding) {
          if (node != null && this.isObjectProperty(node)) {
            return this.isAssignable(node.value, isBinding);
          }
          return super.isAssignable(node, isBinding);
        }
        toAssignable(node, isLHS = false) {
          if (node != null && this.isObjectProperty(node)) {
            const {
              key,
              value
            } = node;
            if (this.isPrivateName(key)) {
              this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
            }
            this.toAssignable(value, isLHS);
          } else {
            super.toAssignable(node, isLHS);
          }
        }
        toAssignableObjectExpressionProp(prop, isLast, isLHS) {
          if (prop.kind === "get" || prop.kind === "set") {
            this.raise(Errors.PatternHasAccessor, {
              at: prop.key
            });
          } else if (prop.method) {
            this.raise(Errors.PatternHasMethod, {
              at: prop.key
            });
          } else {
            super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
          }
        }
        finishCallExpression(unfinished, optional) {
          const node = super.finishCallExpression(unfinished, optional);
          if (node.callee.type === "Import") {
            node.type = "ImportExpression";
            node.source = node.arguments[0];
            if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
              var _node$arguments$;
              node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
            }
            delete node.arguments;
            delete node.callee;
          }
          return node;
        }
        toReferencedArguments(node) {
          if (node.type === "ImportExpression") {
            return;
          }
          super.toReferencedArguments(node);
        }
        parseExport(unfinished, decorators) {
          const exportStartLoc = this.state.lastTokStartLoc;
          const node = super.parseExport(unfinished, decorators);
          switch (node.type) {
            case "ExportAllDeclaration":
              node.exported = null;
              break;
            case "ExportNamedDeclaration":
              if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
                node.type = "ExportAllDeclaration";
                node.exported = node.specifiers[0].exported;
                delete node.specifiers;
              }
            case "ExportDefaultDeclaration":
              {
                var _declaration$decorato;
                const {
                  declaration
                } = node;
                if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {
                  this.resetStartLocation(node, exportStartLoc);
                }
              }
              break;
          }
          return node;
        }
        parseSubscript(base, startLoc, noCalls, state) {
          const node = super.parseSubscript(base, startLoc, noCalls, state);
          if (state.optionalChainMember) {
            if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
              node.type = node.type.substring(8);
            }
            if (state.stop) {
              const chain = this.startNodeAtNode(node);
              chain.expression = node;
              return this.finishNode(chain, "ChainExpression");
            }
          } else if (node.type === "MemberExpression" || node.type === "CallExpression") {
            node.optional = false;
          }
          return node;
        }
        hasPropertyAsPrivateName(node) {
          if (node.type === "ChainExpression") {
            node = node.expression;
          }
          return super.hasPropertyAsPrivateName(node);
        }
        isObjectProperty(node) {
          return node.type === "Property" && node.kind === "init" && !node.method;
        }
        isObjectMethod(node) {
          return node.method || node.kind === "get" || node.kind === "set";
        }
        finishNodeAt(node, type, endLoc) {
          return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
        }
        resetStartLocation(node, startLoc) {
          super.resetStartLocation(node, startLoc);
          toESTreeLocation(node);
        }
        resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
          super.resetEndLocation(node, endLoc);
          toESTreeLocation(node);
        }
      };
      var TokContext = class {
        constructor(token, preserveSpace) {
          this.token = void 0;
          this.preserveSpace = void 0;
          this.token = token;
          this.preserveSpace = !!preserveSpace;
        }
      };
      var types = {
        brace: new TokContext("{"),
        j_oTag: new TokContext("<tag"),
        j_cTag: new TokContext("</tag"),
        j_expr: new TokContext("<tag>...</tag>", true)
      };
      {
        types.template = new TokContext("`", true);
      }
      var beforeExpr = true;
      var startsExpr = true;
      var isLoop = true;
      var isAssign = true;
      var prefix = true;
      var postfix = true;
      var ExportedTokenType = class {
        constructor(label, conf = {}) {
          this.label = void 0;
          this.keyword = void 0;
          this.beforeExpr = void 0;
          this.startsExpr = void 0;
          this.rightAssociative = void 0;
          this.isLoop = void 0;
          this.isAssign = void 0;
          this.prefix = void 0;
          this.postfix = void 0;
          this.binop = void 0;
          this.label = label;
          this.keyword = conf.keyword;
          this.beforeExpr = !!conf.beforeExpr;
          this.startsExpr = !!conf.startsExpr;
          this.rightAssociative = !!conf.rightAssociative;
          this.isLoop = !!conf.isLoop;
          this.isAssign = !!conf.isAssign;
          this.prefix = !!conf.prefix;
          this.postfix = !!conf.postfix;
          this.binop = conf.binop != null ? conf.binop : null;
          {
            this.updateContext = null;
          }
        }
      };
      var keywords$1 = /* @__PURE__ */ new Map();
      function createKeyword(name, options = {}) {
        options.keyword = name;
        const token = createToken(name, options);
        keywords$1.set(name, token);
        return token;
      }
      function createBinop(name, binop) {
        return createToken(name, {
          beforeExpr,
          binop
        });
      }
      var tokenTypeCounter = -1;
      var tokenTypes = [];
      var tokenLabels = [];
      var tokenBinops = [];
      var tokenBeforeExprs = [];
      var tokenStartsExprs = [];
      var tokenPrefixes = [];
      function createToken(name, options = {}) {
        var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
        ++tokenTypeCounter;
        tokenLabels.push(name);
        tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
        tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
        tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
        tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
        tokenTypes.push(new ExportedTokenType(name, options));
        return tokenTypeCounter;
      }
      function createKeywordLike(name, options = {}) {
        var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
        ++tokenTypeCounter;
        keywords$1.set(name, tokenTypeCounter);
        tokenLabels.push(name);
        tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
        tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
        tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
        tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
        tokenTypes.push(new ExportedTokenType("name", options));
        return tokenTypeCounter;
      }
      var tt = {
        bracketL: createToken("[", {
          beforeExpr,
          startsExpr
        }),
        bracketHashL: createToken("#[", {
          beforeExpr,
          startsExpr
        }),
        bracketBarL: createToken("[|", {
          beforeExpr,
          startsExpr
        }),
        bracketR: createToken("]"),
        bracketBarR: createToken("|]"),
        braceL: createToken("{", {
          beforeExpr,
          startsExpr
        }),
        braceBarL: createToken("{|", {
          beforeExpr,
          startsExpr
        }),
        braceHashL: createToken("#{", {
          beforeExpr,
          startsExpr
        }),
        braceR: createToken("}"),
        braceBarR: createToken("|}"),
        parenL: createToken("(", {
          beforeExpr,
          startsExpr
        }),
        parenR: createToken(")"),
        comma: createToken(",", {
          beforeExpr
        }),
        semi: createToken(";", {
          beforeExpr
        }),
        colon: createToken(":", {
          beforeExpr
        }),
        doubleColon: createToken("::", {
          beforeExpr
        }),
        dot: createToken("."),
        question: createToken("?", {
          beforeExpr
        }),
        questionDot: createToken("?."),
        arrow: createToken("=>", {
          beforeExpr
        }),
        template: createToken("template"),
        ellipsis: createToken("...", {
          beforeExpr
        }),
        backQuote: createToken("`", {
          startsExpr
        }),
        dollarBraceL: createToken("${", {
          beforeExpr,
          startsExpr
        }),
        templateTail: createToken("...`", {
          startsExpr
        }),
        templateNonTail: createToken("...${", {
          beforeExpr,
          startsExpr
        }),
        at: createToken("@"),
        hash: createToken("#", {
          startsExpr
        }),
        interpreterDirective: createToken("#!..."),
        eq: createToken("=", {
          beforeExpr,
          isAssign
        }),
        assign: createToken("_=", {
          beforeExpr,
          isAssign
        }),
        slashAssign: createToken("_=", {
          beforeExpr,
          isAssign
        }),
        xorAssign: createToken("_=", {
          beforeExpr,
          isAssign
        }),
        moduloAssign: createToken("_=", {
          beforeExpr,
          isAssign
        }),
        incDec: createToken("++/--", {
          prefix,
          postfix,
          startsExpr
        }),
        bang: createToken("!", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        tilde: createToken("~", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        doubleCaret: createToken("^^", {
          startsExpr
        }),
        doubleAt: createToken("@@", {
          startsExpr
        }),
        pipeline: createBinop("|>", 0),
        nullishCoalescing: createBinop("??", 1),
        logicalOR: createBinop("||", 1),
        logicalAND: createBinop("&&", 2),
        bitwiseOR: createBinop("|", 3),
        bitwiseXOR: createBinop("^", 4),
        bitwiseAND: createBinop("&", 5),
        equality: createBinop("==/!=/===/!==", 6),
        lt: createBinop("</>/<=/>=", 7),
        gt: createBinop("</>/<=/>=", 7),
        relational: createBinop("</>/<=/>=", 7),
        bitShift: createBinop("<</>>/>>>", 8),
        bitShiftL: createBinop("<</>>/>>>", 8),
        bitShiftR: createBinop("<</>>/>>>", 8),
        plusMin: createToken("+/-", {
          beforeExpr,
          binop: 9,
          prefix,
          startsExpr
        }),
        modulo: createToken("%", {
          binop: 10,
          startsExpr
        }),
        star: createToken("*", {
          binop: 10
        }),
        slash: createBinop("/", 10),
        exponent: createToken("**", {
          beforeExpr,
          binop: 11,
          rightAssociative: true
        }),
        _in: createKeyword("in", {
          beforeExpr,
          binop: 7
        }),
        _instanceof: createKeyword("instanceof", {
          beforeExpr,
          binop: 7
        }),
        _break: createKeyword("break"),
        _case: createKeyword("case", {
          beforeExpr
        }),
        _catch: createKeyword("catch"),
        _continue: createKeyword("continue"),
        _debugger: createKeyword("debugger"),
        _default: createKeyword("default", {
          beforeExpr
        }),
        _else: createKeyword("else", {
          beforeExpr
        }),
        _finally: createKeyword("finally"),
        _function: createKeyword("function", {
          startsExpr
        }),
        _if: createKeyword("if"),
        _return: createKeyword("return", {
          beforeExpr
        }),
        _switch: createKeyword("switch"),
        _throw: createKeyword("throw", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        _try: createKeyword("try"),
        _var: createKeyword("var"),
        _const: createKeyword("const"),
        _with: createKeyword("with"),
        _new: createKeyword("new", {
          beforeExpr,
          startsExpr
        }),
        _this: createKeyword("this", {
          startsExpr
        }),
        _super: createKeyword("super", {
          startsExpr
        }),
        _class: createKeyword("class", {
          startsExpr
        }),
        _extends: createKeyword("extends", {
          beforeExpr
        }),
        _export: createKeyword("export"),
        _import: createKeyword("import", {
          startsExpr
        }),
        _null: createKeyword("null", {
          startsExpr
        }),
        _true: createKeyword("true", {
          startsExpr
        }),
        _false: createKeyword("false", {
          startsExpr
        }),
        _typeof: createKeyword("typeof", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        _void: createKeyword("void", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        _delete: createKeyword("delete", {
          beforeExpr,
          prefix,
          startsExpr
        }),
        _do: createKeyword("do", {
          isLoop,
          beforeExpr
        }),
        _for: createKeyword("for", {
          isLoop
        }),
        _while: createKeyword("while", {
          isLoop
        }),
        _as: createKeywordLike("as", {
          startsExpr
        }),
        _assert: createKeywordLike("assert", {
          startsExpr
        }),
        _async: createKeywordLike("async", {
          startsExpr
        }),
        _await: createKeywordLike("await", {
          startsExpr
        }),
        _from: createKeywordLike("from", {
          startsExpr
        }),
        _get: createKeywordLike("get", {
          startsExpr
        }),
        _let: createKeywordLike("let", {
          startsExpr
        }),
        _meta: createKeywordLike("meta", {
          startsExpr
        }),
        _of: createKeywordLike("of", {
          startsExpr
        }),
        _sent: createKeywordLike("sent", {
          startsExpr
        }),
        _set: createKeywordLike("set", {
          startsExpr
        }),
        _static: createKeywordLike("static", {
          startsExpr
        }),
        _using: createKeywordLike("using", {
          startsExpr
        }),
        _yield: createKeywordLike("yield", {
          startsExpr
        }),
        _asserts: createKeywordLike("asserts", {
          startsExpr
        }),
        _checks: createKeywordLike("checks", {
          startsExpr
        }),
        _exports: createKeywordLike("exports", {
          startsExpr
        }),
        _global: createKeywordLike("global", {
          startsExpr
        }),
        _implements: createKeywordLike("implements", {
          startsExpr
        }),
        _intrinsic: createKeywordLike("intrinsic", {
          startsExpr
        }),
        _infer: createKeywordLike("infer", {
          startsExpr
        }),
        _is: createKeywordLike("is", {
          startsExpr
        }),
        _mixins: createKeywordLike("mixins", {
          startsExpr
        }),
        _proto: createKeywordLike("proto", {
          startsExpr
        }),
        _require: createKeywordLike("require", {
          startsExpr
        }),
        _satisfies: createKeywordLike("satisfies", {
          startsExpr
        }),
        _keyof: createKeywordLike("keyof", {
          startsExpr
        }),
        _readonly: createKeywordLike("readonly", {
          startsExpr
        }),
        _unique: createKeywordLike("unique", {
          startsExpr
        }),
        _abstract: createKeywordLike("abstract", {
          startsExpr
        }),
        _declare: createKeywordLike("declare", {
          startsExpr
        }),
        _enum: createKeywordLike("enum", {
          startsExpr
        }),
        _module: createKeywordLike("module", {
          startsExpr
        }),
        _namespace: createKeywordLike("namespace", {
          startsExpr
        }),
        _interface: createKeywordLike("interface", {
          startsExpr
        }),
        _type: createKeywordLike("type", {
          startsExpr
        }),
        _opaque: createKeywordLike("opaque", {
          startsExpr
        }),
        name: createToken("name", {
          startsExpr
        }),
        string: createToken("string", {
          startsExpr
        }),
        num: createToken("num", {
          startsExpr
        }),
        bigint: createToken("bigint", {
          startsExpr
        }),
        decimal: createToken("decimal", {
          startsExpr
        }),
        regexp: createToken("regexp", {
          startsExpr
        }),
        privateName: createToken("#name", {
          startsExpr
        }),
        eof: createToken("eof"),
        jsxName: createToken("jsxName"),
        jsxText: createToken("jsxText", {
          beforeExpr: true
        }),
        jsxTagStart: createToken("jsxTagStart", {
          startsExpr: true
        }),
        jsxTagEnd: createToken("jsxTagEnd"),
        placeholder: createToken("%%", {
          startsExpr: true
        })
      };
      function tokenIsIdentifier(token) {
        return token >= 93 && token <= 130;
      }
      function tokenKeywordOrIdentifierIsKeyword(token) {
        return token <= 92;
      }
      function tokenIsKeywordOrIdentifier(token) {
        return token >= 58 && token <= 130;
      }
      function tokenIsLiteralPropertyName(token) {
        return token >= 58 && token <= 134;
      }
      function tokenComesBeforeExpression(token) {
        return tokenBeforeExprs[token];
      }
      function tokenCanStartExpression(token) {
        return tokenStartsExprs[token];
      }
      function tokenIsAssignment(token) {
        return token >= 29 && token <= 33;
      }
      function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
        return token >= 127 && token <= 129;
      }
      function tokenIsLoop(token) {
        return token >= 90 && token <= 92;
      }
      function tokenIsKeyword(token) {
        return token >= 58 && token <= 92;
      }
      function tokenIsOperator(token) {
        return token >= 39 && token <= 59;
      }
      function tokenIsPostfix(token) {
        return token === 34;
      }
      function tokenIsPrefix(token) {
        return tokenPrefixes[token];
      }
      function tokenIsTSTypeOperator(token) {
        return token >= 119 && token <= 121;
      }
      function tokenIsTSDeclarationStart(token) {
        return token >= 122 && token <= 128;
      }
      function tokenLabelName(token) {
        return tokenLabels[token];
      }
      function tokenOperatorPrecedence(token) {
        return tokenBinops[token];
      }
      function tokenIsRightAssociative(token) {
        return token === 57;
      }
      function tokenIsTemplate(token) {
        return token >= 24 && token <= 25;
      }
      function getExportedToken(token) {
        return tokenTypes[token];
      }
      {
        tokenTypes[8].updateContext = (context) => {
          context.pop();
        };
        tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
          context.push(types.brace);
        };
        tokenTypes[22].updateContext = (context) => {
          if (context[context.length - 1] === types.template) {
            context.pop();
          } else {
            context.push(types.template);
          }
        };
        tokenTypes[140].updateContext = (context) => {
          context.push(types.j_expr, types.j_oTag);
        };
      }
      var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
      var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
      var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      function isInAstralSet(code, set) {
        let pos = 65536;
        for (let i = 0, length = set.length; i < length; i += 2) {
          pos += set[i];
          if (pos > code)
            return false;
          pos += set[i + 1];
          if (pos >= code)
            return true;
        }
        return false;
      }
      function isIdentifierStart(code) {
        if (code < 65)
          return code === 36;
        if (code <= 90)
          return true;
        if (code < 97)
          return code === 95;
        if (code <= 122)
          return true;
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
        }
        return isInAstralSet(code, astralIdentifierStartCodes);
      }
      function isIdentifierChar(code) {
        if (code < 48)
          return code === 36;
        if (code < 58)
          return true;
        if (code < 65)
          return false;
        if (code <= 90)
          return true;
        if (code < 97)
          return code === 95;
        if (code <= 122)
          return true;
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
        }
        return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
      }
      var reservedWords = {
        keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
        strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
        strictBind: ["eval", "arguments"]
      };
      var keywords = new Set(reservedWords.keyword);
      var reservedWordsStrictSet = new Set(reservedWords.strict);
      var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
      function isReservedWord(word, inModule) {
        return inModule && word === "await" || word === "enum";
      }
      function isStrictReservedWord(word, inModule) {
        return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
      }
      function isStrictBindOnlyReservedWord(word) {
        return reservedWordsStrictBindSet.has(word);
      }
      function isStrictBindReservedWord(word, inModule) {
        return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
      }
      function isKeyword(word) {
        return keywords.has(word);
      }
      function isIteratorStart(current, next, next2) {
        return current === 64 && next === 64 && isIdentifierStart(next2);
      }
      var reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
      function canBeReservedWord(word) {
        return reservedWordLikeSet.has(word);
      }
      var SCOPE_OTHER = 0;
      var SCOPE_PROGRAM = 1;
      var SCOPE_FUNCTION = 2;
      var SCOPE_ARROW = 4;
      var SCOPE_SIMPLE_CATCH = 8;
      var SCOPE_SUPER = 16;
      var SCOPE_DIRECT_SUPER = 32;
      var SCOPE_CLASS = 64;
      var SCOPE_STATIC_BLOCK = 128;
      var SCOPE_TS_MODULE = 256;
      var SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;
      var BIND_KIND_VALUE = 1;
      var BIND_KIND_TYPE = 2;
      var BIND_SCOPE_VAR = 4;
      var BIND_SCOPE_LEXICAL = 8;
      var BIND_SCOPE_FUNCTION = 16;
      var BIND_FLAGS_NONE = 64;
      var BIND_FLAGS_CLASS = 128;
      var BIND_FLAGS_TS_ENUM = 256;
      var BIND_FLAGS_TS_CONST_ENUM = 512;
      var BIND_FLAGS_TS_EXPORT_ONLY = 1024;
      var BIND_FLAGS_FLOW_DECLARE_FN = 2048;
      var BIND_FLAGS_TS_IMPORT = 4096;
      var BIND_FLAGS_NO_LET_IN_LEXICAL = 8192;
      var BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS | BIND_FLAGS_NO_LET_IN_LEXICAL;
      var BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | BIND_FLAGS_NO_LET_IN_LEXICAL;
      var BIND_CATCH_PARAM = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0;
      var BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0;
      var BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0;
      var BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS;
      var BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0;
      var BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM | BIND_FLAGS_NO_LET_IN_LEXICAL;
      var BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;
      var BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE;
      var BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE;
      var BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM;
      var BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;
      var BIND_TS_TYPE_IMPORT = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_TS_IMPORT;
      var BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;
      var CLASS_ELEMENT_FLAG_STATIC = 4;
      var CLASS_ELEMENT_KIND_GETTER = 2;
      var CLASS_ELEMENT_KIND_SETTER = 1;
      var CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;
      var CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC;
      var CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC;
      var CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER;
      var CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER;
      var CLASS_ELEMENT_OTHER = 0;
      var Scope = class {
        constructor(flags) {
          this.var = /* @__PURE__ */ new Set();
          this.lexical = /* @__PURE__ */ new Set();
          this.functions = /* @__PURE__ */ new Set();
          this.flags = flags;
        }
      };
      var ScopeHandler = class {
        constructor(parser, inModule) {
          this.parser = void 0;
          this.scopeStack = [];
          this.inModule = void 0;
          this.undefinedExports = /* @__PURE__ */ new Map();
          this.parser = parser;
          this.inModule = inModule;
        }
        get inTopLevel() {
          return (this.currentScope().flags & SCOPE_PROGRAM) > 0;
        }
        get inFunction() {
          return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;
        }
        get allowSuper() {
          return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;
        }
        get allowDirectSuper() {
          return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;
        }
        get inClass() {
          return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;
        }
        get inClassAndNotInNonArrowFunction() {
          const flags = this.currentThisScopeFlags();
          return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;
        }
        get inStaticBlock() {
          for (let i = this.scopeStack.length - 1; ; i--) {
            const {
              flags
            } = this.scopeStack[i];
            if (flags & SCOPE_STATIC_BLOCK) {
              return true;
            }
            if (flags & (SCOPE_VAR | SCOPE_CLASS)) {
              return false;
            }
          }
        }
        get inNonArrowFunction() {
          return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;
        }
        get treatFunctionsAsVar() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        }
        createScope(flags) {
          return new Scope(flags);
        }
        enter(flags) {
          this.scopeStack.push(this.createScope(flags));
        }
        exit() {
          const scope = this.scopeStack.pop();
          return scope.flags;
        }
        treatFunctionsAsVarInScope(scope) {
          return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);
        }
        declareName(name, bindingType, loc) {
          let scope = this.currentScope();
          if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            if (bindingType & BIND_SCOPE_FUNCTION) {
              scope.functions.add(name);
            } else {
              scope.lexical.add(name);
            }
            if (bindingType & BIND_SCOPE_LEXICAL) {
              this.maybeExportDefined(scope, name);
            }
          } else if (bindingType & BIND_SCOPE_VAR) {
            for (let i = this.scopeStack.length - 1; i >= 0; --i) {
              scope = this.scopeStack[i];
              this.checkRedeclarationInScope(scope, name, bindingType, loc);
              scope.var.add(name);
              this.maybeExportDefined(scope, name);
              if (scope.flags & SCOPE_VAR)
                break;
            }
          }
          if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {
            this.undefinedExports.delete(name);
          }
        }
        maybeExportDefined(scope, name) {
          if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {
            this.undefinedExports.delete(name);
          }
        }
        checkRedeclarationInScope(scope, name, bindingType, loc) {
          if (this.isRedeclaredInScope(scope, name, bindingType)) {
            this.parser.raise(Errors.VarRedeclaration, {
              at: loc,
              identifierName: name
            });
          }
        }
        isRedeclaredInScope(scope, name, bindingType) {
          if (!(bindingType & BIND_KIND_VALUE))
            return false;
          if (bindingType & BIND_SCOPE_LEXICAL) {
            return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
          }
          if (bindingType & BIND_SCOPE_FUNCTION) {
            return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
          }
          return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
        }
        checkLocalExport(id) {
          const {
            name
          } = id;
          const topLevelScope = this.scopeStack[0];
          if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
            this.undefinedExports.set(name, id.loc.start);
          }
        }
        currentScope() {
          return this.scopeStack[this.scopeStack.length - 1];
        }
        currentVarScopeFlags() {
          for (let i = this.scopeStack.length - 1; ; i--) {
            const {
              flags
            } = this.scopeStack[i];
            if (flags & SCOPE_VAR) {
              return flags;
            }
          }
        }
        currentThisScopeFlags() {
          for (let i = this.scopeStack.length - 1; ; i--) {
            const {
              flags
            } = this.scopeStack[i];
            if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {
              return flags;
            }
          }
        }
      };
      var FlowScope = class extends Scope {
        constructor(...args) {
          super(...args);
          this.declareFunctions = /* @__PURE__ */ new Set();
        }
      };
      var FlowScopeHandler = class extends ScopeHandler {
        createScope(flags) {
          return new FlowScope(flags);
        }
        declareName(name, bindingType, loc) {
          const scope = this.currentScope();
          if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            this.maybeExportDefined(scope, name);
            scope.declareFunctions.add(name);
            return;
          }
          super.declareName(name, bindingType, loc);
        }
        isRedeclaredInScope(scope, name, bindingType) {
          if (super.isRedeclaredInScope(scope, name, bindingType))
            return true;
          if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
            return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
          }
          return false;
        }
        checkLocalExport(id) {
          if (!this.scopeStack[0].declareFunctions.has(id.name)) {
            super.checkLocalExport(id);
          }
        }
      };
      var BaseParser = class {
        constructor() {
          this.sawUnambiguousESM = false;
          this.ambiguousScriptDifferentAst = false;
        }
        hasPlugin(pluginConfig) {
          if (typeof pluginConfig === "string") {
            return this.plugins.has(pluginConfig);
          } else {
            const [pluginName, pluginOptions] = pluginConfig;
            if (!this.hasPlugin(pluginName)) {
              return false;
            }
            const actualOptions = this.plugins.get(pluginName);
            for (const key of Object.keys(pluginOptions)) {
              if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
                return false;
              }
            }
            return true;
          }
        }
        getPluginOption(plugin, name) {
          var _this$plugins$get;
          return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];
        }
      };
      function setTrailingComments(node, comments) {
        if (node.trailingComments === void 0) {
          node.trailingComments = comments;
        } else {
          node.trailingComments.unshift(...comments);
        }
      }
      function setLeadingComments(node, comments) {
        if (node.leadingComments === void 0) {
          node.leadingComments = comments;
        } else {
          node.leadingComments.unshift(...comments);
        }
      }
      function setInnerComments(node, comments) {
        if (node.innerComments === void 0) {
          node.innerComments = comments;
        } else {
          node.innerComments.unshift(...comments);
        }
      }
      function adjustInnerComments(node, elements, commentWS) {
        let lastElement = null;
        let i = elements.length;
        while (lastElement === null && i > 0) {
          lastElement = elements[--i];
        }
        if (lastElement === null || lastElement.start > commentWS.start) {
          setInnerComments(node, commentWS.comments);
        } else {
          setTrailingComments(lastElement, commentWS.comments);
        }
      }
      var CommentsParser = class extends BaseParser {
        addComment(comment) {
          if (this.filename)
            comment.loc.filename = this.filename;
          this.state.comments.push(comment);
        }
        processComment(node) {
          const {
            commentStack
          } = this.state;
          const commentStackLength = commentStack.length;
          if (commentStackLength === 0)
            return;
          let i = commentStackLength - 1;
          const lastCommentWS = commentStack[i];
          if (lastCommentWS.start === node.end) {
            lastCommentWS.leadingNode = node;
            i--;
          }
          const {
            start: nodeStart
          } = node;
          for (; i >= 0; i--) {
            const commentWS = commentStack[i];
            const commentEnd = commentWS.end;
            if (commentEnd > nodeStart) {
              commentWS.containingNode = node;
              this.finalizeComment(commentWS);
              commentStack.splice(i, 1);
            } else {
              if (commentEnd === nodeStart) {
                commentWS.trailingNode = node;
              }
              break;
            }
          }
        }
        finalizeComment(commentWS) {
          const {
            comments
          } = commentWS;
          if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
            if (commentWS.leadingNode !== null) {
              setTrailingComments(commentWS.leadingNode, comments);
            }
            if (commentWS.trailingNode !== null) {
              setLeadingComments(commentWS.trailingNode, comments);
            }
          } else {
            const {
              containingNode: node,
              start: commentStart
            } = commentWS;
            if (this.input.charCodeAt(commentStart - 1) === 44) {
              switch (node.type) {
                case "ObjectExpression":
                case "ObjectPattern":
                case "RecordExpression":
                  adjustInnerComments(node, node.properties, commentWS);
                  break;
                case "CallExpression":
                case "OptionalCallExpression":
                  adjustInnerComments(node, node.arguments, commentWS);
                  break;
                case "FunctionDeclaration":
                case "FunctionExpression":
                case "ArrowFunctionExpression":
                case "ObjectMethod":
                case "ClassMethod":
                case "ClassPrivateMethod":
                  adjustInnerComments(node, node.params, commentWS);
                  break;
                case "ArrayExpression":
                case "ArrayPattern":
                case "TupleExpression":
                  adjustInnerComments(node, node.elements, commentWS);
                  break;
                case "ExportNamedDeclaration":
                case "ImportDeclaration":
                  adjustInnerComments(node, node.specifiers, commentWS);
                  break;
                default: {
                  setInnerComments(node, comments);
                }
              }
            } else {
              setInnerComments(node, comments);
            }
          }
        }
        finalizeRemainingComments() {
          const {
            commentStack
          } = this.state;
          for (let i = commentStack.length - 1; i >= 0; i--) {
            this.finalizeComment(commentStack[i]);
          }
          this.state.commentStack = [];
        }
        resetPreviousNodeTrailingComments(node) {
          const {
            commentStack
          } = this.state;
          const {
            length
          } = commentStack;
          if (length === 0)
            return;
          const commentWS = commentStack[length - 1];
          if (commentWS.leadingNode === node) {
            commentWS.leadingNode = null;
          }
        }
        resetPreviousIdentifierLeadingComments(node) {
          const {
            commentStack
          } = this.state;
          const {
            length
          } = commentStack;
          if (length === 0)
            return;
          if (commentStack[length - 1].trailingNode === node) {
            commentStack[length - 1].trailingNode = null;
          } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {
            commentStack[length - 2].trailingNode = null;
          }
        }
        takeSurroundingComments(node, start, end) {
          const {
            commentStack
          } = this.state;
          const commentStackLength = commentStack.length;
          if (commentStackLength === 0)
            return;
          let i = commentStackLength - 1;
          for (; i >= 0; i--) {
            const commentWS = commentStack[i];
            const commentEnd = commentWS.end;
            const commentStart = commentWS.start;
            if (commentStart === end) {
              commentWS.leadingNode = node;
            } else if (commentEnd === start) {
              commentWS.trailingNode = node;
            } else if (commentEnd < start) {
              break;
            }
          }
        }
      };
      var lineBreak = /\r\n?|[\n\u2028\u2029]/;
      var lineBreakG = new RegExp(lineBreak.source, "g");
      function isNewLine(code) {
        switch (code) {
          case 10:
          case 13:
          case 8232:
          case 8233:
            return true;
          default:
            return false;
        }
      }
      var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
      var skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
      var skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
      function isWhitespace(code) {
        switch (code) {
          case 9:
          case 11:
          case 12:
          case 32:
          case 160:
          case 5760:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }
      var State = class {
        constructor() {
          this.strict = void 0;
          this.curLine = void 0;
          this.lineStart = void 0;
          this.startLoc = void 0;
          this.endLoc = void 0;
          this.errors = [];
          this.potentialArrowAt = -1;
          this.noArrowAt = [];
          this.noArrowParamsConversionAt = [];
          this.maybeInArrowParameters = false;
          this.inType = false;
          this.noAnonFunctionType = false;
          this.hasFlowComment = false;
          this.isAmbientContext = false;
          this.inAbstractClass = false;
          this.inDisallowConditionalTypesContext = false;
          this.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
          };
          this.soloAwait = false;
          this.inFSharpPipelineDirectBody = false;
          this.labels = [];
          this.comments = [];
          this.commentStack = [];
          this.pos = 0;
          this.type = 137;
          this.value = null;
          this.start = 0;
          this.end = 0;
          this.lastTokEndLoc = null;
          this.lastTokStartLoc = null;
          this.lastTokStart = 0;
          this.context = [types.brace];
          this.canStartJSXElement = true;
          this.containsEsc = false;
          this.firstInvalidTemplateEscapePos = null;
          this.strictErrors = /* @__PURE__ */ new Map();
          this.tokensLength = 0;
        }
        init({
          strictMode,
          sourceType,
          startLine,
          startColumn
        }) {
          this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
          this.curLine = startLine;
          this.lineStart = -startColumn;
          this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
        }
        curPosition() {
          return new Position(this.curLine, this.pos - this.lineStart, this.pos);
        }
        clone(skipArrays) {
          const state = new State();
          const keys = Object.keys(this);
          for (let i = 0, length = keys.length; i < length; i++) {
            const key = keys[i];
            let val = this[key];
            if (!skipArrays && Array.isArray(val)) {
              val = val.slice();
            }
            state[key] = val;
          }
          return state;
        }
      };
      var _isDigit = function isDigit(code) {
        return code >= 48 && code <= 57;
      };
      var forbiddenNumericSeparatorSiblings = {
        decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]),
        hex: /* @__PURE__ */ new Set([46, 88, 95, 120])
      };
      var isAllowedNumericSeparatorSibling = {
        bin: (ch) => ch === 48 || ch === 49,
        oct: (ch) => ch >= 48 && ch <= 55,
        dec: (ch) => ch >= 48 && ch <= 57,
        hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
      };
      function readStringContents(type, input, pos, lineStart, curLine, errors) {
        const initialPos = pos;
        const initialLineStart = lineStart;
        const initialCurLine = curLine;
        let out = "";
        let firstInvalidLoc = null;
        let chunkStart = pos;
        const {
          length
        } = input;
        for (; ; ) {
          if (pos >= length) {
            errors.unterminated(initialPos, initialLineStart, initialCurLine);
            out += input.slice(chunkStart, pos);
            break;
          }
          const ch = input.charCodeAt(pos);
          if (isStringEnd(type, ch, input, pos)) {
            out += input.slice(chunkStart, pos);
            break;
          }
          if (ch === 92) {
            out += input.slice(chunkStart, pos);
            const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
            if (res.ch === null && !firstInvalidLoc) {
              firstInvalidLoc = {
                pos,
                lineStart,
                curLine
              };
            } else {
              out += res.ch;
            }
            ({
              pos,
              lineStart,
              curLine
            } = res);
            chunkStart = pos;
          } else if (ch === 8232 || ch === 8233) {
            ++pos;
            ++curLine;
            lineStart = pos;
          } else if (ch === 10 || ch === 13) {
            if (type === "template") {
              out += input.slice(chunkStart, pos) + "\n";
              ++pos;
              if (ch === 13 && input.charCodeAt(pos) === 10) {
                ++pos;
              }
              ++curLine;
              chunkStart = lineStart = pos;
            } else {
              errors.unterminated(initialPos, initialLineStart, initialCurLine);
            }
          } else {
            ++pos;
          }
        }
        return {
          pos,
          str: out,
          firstInvalidLoc,
          lineStart,
          curLine,
          containsInvalid: !!firstInvalidLoc
        };
      }
      function isStringEnd(type, ch, input, pos) {
        if (type === "template") {
          return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
        }
        return ch === (type === "double" ? 34 : 39);
      }
      function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
        const throwOnInvalid = !inTemplate;
        pos++;
        const res = (ch2) => ({
          pos,
          ch: ch2,
          lineStart,
          curLine
        });
        const ch = input.charCodeAt(pos++);
        switch (ch) {
          case 110:
            return res("\n");
          case 114:
            return res("\r");
          case 120: {
            let code;
            ({
              code,
              pos
            } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
            return res(code === null ? null : String.fromCharCode(code));
          }
          case 117: {
            let code;
            ({
              code,
              pos
            } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
            return res(code === null ? null : String.fromCodePoint(code));
          }
          case 116:
            return res("	");
          case 98:
            return res("\b");
          case 118:
            return res("\v");
          case 102:
            return res("\f");
          case 13:
            if (input.charCodeAt(pos) === 10) {
              ++pos;
            }
          case 10:
            lineStart = pos;
            ++curLine;
          case 8232:
          case 8233:
            return res("");
          case 56:
          case 57:
            if (inTemplate) {
              return res(null);
            } else {
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            }
          default:
            if (ch >= 48 && ch <= 55) {
              const startPos = pos - 1;
              const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);
              let octalStr = match[0];
              let octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              pos += octalStr.length - 1;
              const next = input.charCodeAt(pos);
              if (octalStr !== "0" || next === 56 || next === 57) {
                if (inTemplate) {
                  return res(null);
                } else {
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
              }
              return res(String.fromCharCode(octal));
            }
            return res(String.fromCharCode(ch));
        }
      }
      function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
        const initialPos = pos;
        let n;
        ({
          n,
          pos
        } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
        if (n === null) {
          if (throwOnInvalid) {
            errors.invalidEscapeSequence(initialPos, lineStart, curLine);
          } else {
            pos = initialPos - 1;
          }
        }
        return {
          code: n,
          pos
        };
      }
      function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
        const start = pos;
        const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
        const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
        let invalid = false;
        let total = 0;
        for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
          const code = input.charCodeAt(pos);
          let val;
          if (code === 95 && allowNumSeparator !== "bail") {
            const prev = input.charCodeAt(pos - 1);
            const next = input.charCodeAt(pos + 1);
            if (!allowNumSeparator) {
              if (bailOnError)
                return {
                  n: null,
                  pos
                };
              errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
            } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
              if (bailOnError)
                return {
                  n: null,
                  pos
                };
              errors.unexpectedNumericSeparator(pos, lineStart, curLine);
            }
            ++pos;
            continue;
          }
          if (code >= 97) {
            val = code - 97 + 10;
          } else if (code >= 65) {
            val = code - 65 + 10;
          } else if (_isDigit(code)) {
            val = code - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            if (val <= 9 && bailOnError) {
              return {
                n: null,
                pos
              };
            } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
              val = 0;
            } else if (forceLen) {
              val = 0;
              invalid = true;
            } else {
              break;
            }
          }
          ++pos;
          total = total * radix + val;
        }
        if (pos === start || len != null && pos - start !== len || invalid) {
          return {
            n: null,
            pos
          };
        }
        return {
          n: total,
          pos
        };
      }
      function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
        const ch = input.charCodeAt(pos);
        let code;
        if (ch === 123) {
          ++pos;
          ({
            code,
            pos
          } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
          ++pos;
          if (code !== null && code > 1114111) {
            if (throwOnInvalid) {
              errors.invalidCodePoint(pos, lineStart, curLine);
            } else {
              return {
                code: null,
                pos
              };
            }
          }
        } else {
          ({
            code,
            pos
          } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
        }
        return {
          code,
          pos
        };
      }
      var _excluded = ["at"];
      var _excluded2 = ["at"];
      function buildPosition(pos, lineStart, curLine) {
        return new Position(curLine, pos - lineStart, pos);
      }
      var VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
      var Token = class {
        constructor(state) {
          this.type = state.type;
          this.value = state.value;
          this.start = state.start;
          this.end = state.end;
          this.loc = new SourceLocation(state.startLoc, state.endLoc);
        }
      };
      var Tokenizer = class extends CommentsParser {
        constructor(options, input) {
          super();
          this.isLookahead = void 0;
          this.tokens = [];
          this.errorHandlers_readInt = {
            invalidDigit: (pos, lineStart, curLine, radix) => {
              if (!this.options.errorRecovery)
                return false;
              this.raise(Errors.InvalidDigit, {
                at: buildPosition(pos, lineStart, curLine),
                radix
              });
              return true;
            },
            numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
            unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
          };
          this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
            invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
            invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
          });
          this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
            strictNumericEscape: (pos, lineStart, curLine) => {
              this.recordStrictModeErrors(Errors.StrictNumericEscape, {
                at: buildPosition(pos, lineStart, curLine)
              });
            },
            unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedString, {
                at: buildPosition(pos - 1, lineStart, curLine)
              });
            }
          });
          this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
            strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
            unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedTemplate, {
                at: buildPosition(pos, lineStart, curLine)
              });
            }
          });
          this.state = new State();
          this.state.init(options);
          this.input = input;
          this.length = input.length;
          this.isLookahead = false;
        }
        pushToken(token) {
          this.tokens.length = this.state.tokensLength;
          this.tokens.push(token);
          ++this.state.tokensLength;
        }
        next() {
          this.checkKeywordEscapes();
          if (this.options.tokens) {
            this.pushToken(new Token(this.state));
          }
          this.state.lastTokStart = this.state.start;
          this.state.lastTokEndLoc = this.state.endLoc;
          this.state.lastTokStartLoc = this.state.startLoc;
          this.nextToken();
        }
        eat(type) {
          if (this.match(type)) {
            this.next();
            return true;
          } else {
            return false;
          }
        }
        match(type) {
          return this.state.type === type;
        }
        createLookaheadState(state) {
          return {
            pos: state.pos,
            value: null,
            type: state.type,
            start: state.start,
            end: state.end,
            context: [this.curContext()],
            inType: state.inType,
            startLoc: state.startLoc,
            lastTokEndLoc: state.lastTokEndLoc,
            curLine: state.curLine,
            lineStart: state.lineStart,
            curPosition: state.curPosition
          };
        }
        lookahead() {
          const old = this.state;
          this.state = this.createLookaheadState(old);
          this.isLookahead = true;
          this.nextToken();
          this.isLookahead = false;
          const curr = this.state;
          this.state = old;
          return curr;
        }
        nextTokenStart() {
          return this.nextTokenStartSince(this.state.pos);
        }
        nextTokenStartSince(pos) {
          skipWhiteSpace.lastIndex = pos;
          return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
        }
        lookaheadCharCode() {
          return this.input.charCodeAt(this.nextTokenStart());
        }
        nextTokenInLineStart() {
          return this.nextTokenInLineStartSince(this.state.pos);
        }
        nextTokenInLineStartSince(pos) {
          skipWhiteSpaceInLine.lastIndex = pos;
          return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
        }
        lookaheadInLineCharCode() {
          return this.input.charCodeAt(this.nextTokenInLineStart());
        }
        codePointAtPos(pos) {
          let cp = this.input.charCodeAt(pos);
          if ((cp & 64512) === 55296 && ++pos < this.input.length) {
            const trail = this.input.charCodeAt(pos);
            if ((trail & 64512) === 56320) {
              cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
            }
          }
          return cp;
        }
        setStrict(strict) {
          this.state.strict = strict;
          if (strict) {
            this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, {
              at
            }));
            this.state.strictErrors.clear();
          }
        }
        curContext() {
          return this.state.context[this.state.context.length - 1];
        }
        nextToken() {
          this.skipSpace();
          this.state.start = this.state.pos;
          if (!this.isLookahead)
            this.state.startLoc = this.state.curPosition();
          if (this.state.pos >= this.length) {
            this.finishToken(137);
            return;
          }
          this.getTokenFromCode(this.codePointAtPos(this.state.pos));
        }
        skipBlockComment(commentEnd) {
          let startLoc;
          if (!this.isLookahead)
            startLoc = this.state.curPosition();
          const start = this.state.pos;
          const end = this.input.indexOf(commentEnd, start + 2);
          if (end === -1) {
            throw this.raise(Errors.UnterminatedComment, {
              at: this.state.curPosition()
            });
          }
          this.state.pos = end + commentEnd.length;
          lineBreakG.lastIndex = start + 2;
          while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
            ++this.state.curLine;
            this.state.lineStart = lineBreakG.lastIndex;
          }
          if (this.isLookahead)
            return;
          const comment = {
            type: "CommentBlock",
            value: this.input.slice(start + 2, end),
            start,
            end: end + commentEnd.length,
            loc: new SourceLocation(startLoc, this.state.curPosition())
          };
          if (this.options.tokens)
            this.pushToken(comment);
          return comment;
        }
        skipLineComment(startSkip) {
          const start = this.state.pos;
          let startLoc;
          if (!this.isLookahead)
            startLoc = this.state.curPosition();
          let ch = this.input.charCodeAt(this.state.pos += startSkip);
          if (this.state.pos < this.length) {
            while (!isNewLine(ch) && ++this.state.pos < this.length) {
              ch = this.input.charCodeAt(this.state.pos);
            }
          }
          if (this.isLookahead)
            return;
          const end = this.state.pos;
          const value = this.input.slice(start + startSkip, end);
          const comment = {
            type: "CommentLine",
            value,
            start,
            end,
            loc: new SourceLocation(startLoc, this.state.curPosition())
          };
          if (this.options.tokens)
            this.pushToken(comment);
          return comment;
        }
        skipSpace() {
          const spaceStart = this.state.pos;
          const comments = [];
          loop:
            while (this.state.pos < this.length) {
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 32:
                case 160:
                case 9:
                  ++this.state.pos;
                  break;
                case 13:
                  if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                    ++this.state.pos;
                  }
                case 10:
                case 8232:
                case 8233:
                  ++this.state.pos;
                  ++this.state.curLine;
                  this.state.lineStart = this.state.pos;
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.state.pos + 1)) {
                    case 42: {
                      const comment = this.skipBlockComment("*/");
                      if (comment !== void 0) {
                        this.addComment(comment);
                        if (this.options.attachComment)
                          comments.push(comment);
                      }
                      break;
                    }
                    case 47: {
                      const comment = this.skipLineComment(2);
                      if (comment !== void 0) {
                        this.addComment(comment);
                        if (this.options.attachComment)
                          comments.push(comment);
                      }
                      break;
                    }
                    default:
                      break loop;
                  }
                  break;
                default:
                  if (isWhitespace(ch)) {
                    ++this.state.pos;
                  } else if (ch === 45 && !this.inModule && this.options.annexB) {
                    const pos = this.state.pos;
                    if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                      const comment = this.skipLineComment(3);
                      if (comment !== void 0) {
                        this.addComment(comment);
                        if (this.options.attachComment)
                          comments.push(comment);
                      }
                    } else {
                      break loop;
                    }
                  } else if (ch === 60 && !this.inModule && this.options.annexB) {
                    const pos = this.state.pos;
                    if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
                      const comment = this.skipLineComment(4);
                      if (comment !== void 0) {
                        this.addComment(comment);
                        if (this.options.attachComment)
                          comments.push(comment);
                      }
                    } else {
                      break loop;
                    }
                  } else {
                    break loop;
                  }
              }
            }
          if (comments.length > 0) {
            const end = this.state.pos;
            const commentWhitespace = {
              start: spaceStart,
              end,
              comments,
              leadingNode: null,
              trailingNode: null,
              containingNode: null
            };
            this.state.commentStack.push(commentWhitespace);
          }
        }
        finishToken(type, val) {
          this.state.end = this.state.pos;
          this.state.endLoc = this.state.curPosition();
          const prevType = this.state.type;
          this.state.type = type;
          this.state.value = val;
          if (!this.isLookahead) {
            this.updateContext(prevType);
          }
        }
        replaceToken(type) {
          this.state.type = type;
          this.updateContext();
        }
        readToken_numberSign() {
          if (this.state.pos === 0 && this.readToken_interpreter()) {
            return;
          }
          const nextPos = this.state.pos + 1;
          const next = this.codePointAtPos(nextPos);
          if (next >= 48 && next <= 57) {
            throw this.raise(Errors.UnexpectedDigitAfterHash, {
              at: this.state.curPosition()
            });
          }
          if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
            this.expectPlugin("recordAndTuple");
            if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {
              throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {
                at: this.state.curPosition()
              });
            }
            this.state.pos += 2;
            if (next === 123) {
              this.finishToken(7);
            } else {
              this.finishToken(1);
            }
          } else if (isIdentifierStart(next)) {
            ++this.state.pos;
            this.finishToken(136, this.readWord1(next));
          } else if (next === 92) {
            ++this.state.pos;
            this.finishToken(136, this.readWord1());
          } else {
            this.finishOp(27, 1);
          }
        }
        readToken_dot() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next >= 48 && next <= 57) {
            this.readNumber(true);
            return;
          }
          if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
            this.state.pos += 3;
            this.finishToken(21);
          } else {
            ++this.state.pos;
            this.finishToken(16);
          }
        }
        readToken_slash() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 61) {
            this.finishOp(31, 2);
          } else {
            this.finishOp(56, 1);
          }
        }
        readToken_interpreter() {
          if (this.state.pos !== 0 || this.length < 2)
            return false;
          let ch = this.input.charCodeAt(this.state.pos + 1);
          if (ch !== 33)
            return false;
          const start = this.state.pos;
          this.state.pos += 1;
          while (!isNewLine(ch) && ++this.state.pos < this.length) {
            ch = this.input.charCodeAt(this.state.pos);
          }
          const value = this.input.slice(start + 2, this.state.pos);
          this.finishToken(28, value);
          return true;
        }
        readToken_mult_modulo(code) {
          let type = code === 42 ? 55 : 54;
          let width = 1;
          let next = this.input.charCodeAt(this.state.pos + 1);
          if (code === 42 && next === 42) {
            width++;
            next = this.input.charCodeAt(this.state.pos + 2);
            type = 57;
          }
          if (next === 61 && !this.state.inType) {
            width++;
            type = code === 37 ? 33 : 30;
          }
          this.finishOp(type, width);
        }
        readToken_pipe_amp(code) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === code) {
            if (this.input.charCodeAt(this.state.pos + 2) === 61) {
              this.finishOp(30, 3);
            } else {
              this.finishOp(code === 124 ? 41 : 42, 2);
            }
            return;
          }
          if (code === 124) {
            if (next === 62) {
              this.finishOp(39, 2);
              return;
            }
            if (this.hasPlugin("recordAndTuple") && next === 125) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {
                  at: this.state.curPosition()
                });
              }
              this.state.pos += 2;
              this.finishToken(9);
              return;
            }
            if (this.hasPlugin("recordAndTuple") && next === 93) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {
                  at: this.state.curPosition()
                });
              }
              this.state.pos += 2;
              this.finishToken(4);
              return;
            }
          }
          if (next === 61) {
            this.finishOp(30, 2);
            return;
          }
          this.finishOp(code === 124 ? 43 : 45, 1);
        }
        readToken_caret() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 61 && !this.state.inType) {
            this.finishOp(32, 2);
          } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
            proposal: "hack",
            topicToken: "^^"
          }])) {
            this.finishOp(37, 2);
            const lookaheadCh = this.input.codePointAt(this.state.pos);
            if (lookaheadCh === 94) {
              this.unexpected();
            }
          } else {
            this.finishOp(44, 1);
          }
        }
        readToken_atSign() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 64 && this.hasPlugin(["pipelineOperator", {
            proposal: "hack",
            topicToken: "@@"
          }])) {
            this.finishOp(38, 2);
          } else {
            this.finishOp(26, 1);
          }
        }
        readToken_plus_min(code) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === code) {
            this.finishOp(34, 2);
            return;
          }
          if (next === 61) {
            this.finishOp(30, 2);
          } else {
            this.finishOp(53, 1);
          }
        }
        readToken_lt() {
          const {
            pos
          } = this.state;
          const next = this.input.charCodeAt(pos + 1);
          if (next === 60) {
            if (this.input.charCodeAt(pos + 2) === 61) {
              this.finishOp(30, 3);
              return;
            }
            this.finishOp(51, 2);
            return;
          }
          if (next === 61) {
            this.finishOp(49, 2);
            return;
          }
          this.finishOp(47, 1);
        }
        readToken_gt() {
          const {
            pos
          } = this.state;
          const next = this.input.charCodeAt(pos + 1);
          if (next === 62) {
            const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
            if (this.input.charCodeAt(pos + size) === 61) {
              this.finishOp(30, size + 1);
              return;
            }
            this.finishOp(52, size);
            return;
          }
          if (next === 61) {
            this.finishOp(49, 2);
            return;
          }
          this.finishOp(48, 1);
        }
        readToken_eq_excl(code) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next === 61) {
            this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
            return;
          }
          if (code === 61 && next === 62) {
            this.state.pos += 2;
            this.finishToken(19);
            return;
          }
          this.finishOp(code === 61 ? 29 : 35, 1);
        }
        readToken_question() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          const next2 = this.input.charCodeAt(this.state.pos + 2);
          if (next === 63) {
            if (next2 === 61) {
              this.finishOp(30, 3);
            } else {
              this.finishOp(40, 2);
            }
          } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
            this.state.pos += 2;
            this.finishToken(18);
          } else {
            ++this.state.pos;
            this.finishToken(17);
          }
        }
        getTokenFromCode(code) {
          switch (code) {
            case 46:
              this.readToken_dot();
              return;
            case 40:
              ++this.state.pos;
              this.finishToken(10);
              return;
            case 41:
              ++this.state.pos;
              this.finishToken(11);
              return;
            case 59:
              ++this.state.pos;
              this.finishToken(13);
              return;
            case 44:
              ++this.state.pos;
              this.finishToken(12);
              return;
            case 91:
              if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                  throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {
                    at: this.state.curPosition()
                  });
                }
                this.state.pos += 2;
                this.finishToken(2);
              } else {
                ++this.state.pos;
                this.finishToken(0);
              }
              return;
            case 93:
              ++this.state.pos;
              this.finishToken(3);
              return;
            case 123:
              if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                  throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {
                    at: this.state.curPosition()
                  });
                }
                this.state.pos += 2;
                this.finishToken(6);
              } else {
                ++this.state.pos;
                this.finishToken(5);
              }
              return;
            case 125:
              ++this.state.pos;
              this.finishToken(8);
              return;
            case 58:
              if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
                this.finishOp(15, 2);
              } else {
                ++this.state.pos;
                this.finishToken(14);
              }
              return;
            case 63:
              this.readToken_question();
              return;
            case 96:
              this.readTemplateToken();
              return;
            case 48: {
              const next = this.input.charCodeAt(this.state.pos + 1);
              if (next === 120 || next === 88) {
                this.readRadixNumber(16);
                return;
              }
              if (next === 111 || next === 79) {
                this.readRadixNumber(8);
                return;
              }
              if (next === 98 || next === 66) {
                this.readRadixNumber(2);
                return;
              }
            }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              this.readNumber(false);
              return;
            case 34:
            case 39:
              this.readString(code);
              return;
            case 47:
              this.readToken_slash();
              return;
            case 37:
            case 42:
              this.readToken_mult_modulo(code);
              return;
            case 124:
            case 38:
              this.readToken_pipe_amp(code);
              return;
            case 94:
              this.readToken_caret();
              return;
            case 43:
            case 45:
              this.readToken_plus_min(code);
              return;
            case 60:
              this.readToken_lt();
              return;
            case 62:
              this.readToken_gt();
              return;
            case 61:
            case 33:
              this.readToken_eq_excl(code);
              return;
            case 126:
              this.finishOp(36, 1);
              return;
            case 64:
              this.readToken_atSign();
              return;
            case 35:
              this.readToken_numberSign();
              return;
            case 92:
              this.readWord();
              return;
            default:
              if (isIdentifierStart(code)) {
                this.readWord(code);
                return;
              }
          }
          throw this.raise(Errors.InvalidOrUnexpectedToken, {
            at: this.state.curPosition(),
            unexpected: String.fromCodePoint(code)
          });
        }
        finishOp(type, size) {
          const str = this.input.slice(this.state.pos, this.state.pos + size);
          this.state.pos += size;
          this.finishToken(type, str);
        }
        readRegexp() {
          const startLoc = this.state.startLoc;
          const start = this.state.start + 1;
          let escaped, inClass;
          let {
            pos
          } = this.state;
          for (; ; ++pos) {
            if (pos >= this.length) {
              throw this.raise(Errors.UnterminatedRegExp, {
                at: createPositionWithColumnOffset(startLoc, 1)
              });
            }
            const ch = this.input.charCodeAt(pos);
            if (isNewLine(ch)) {
              throw this.raise(Errors.UnterminatedRegExp, {
                at: createPositionWithColumnOffset(startLoc, 1)
              });
            }
            if (escaped) {
              escaped = false;
            } else {
              if (ch === 91) {
                inClass = true;
              } else if (ch === 93 && inClass) {
                inClass = false;
              } else if (ch === 47 && !inClass) {
                break;
              }
              escaped = ch === 92;
            }
          }
          const content = this.input.slice(start, pos);
          ++pos;
          let mods = "";
          const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
          while (pos < this.length) {
            const cp = this.codePointAtPos(pos);
            const char = String.fromCharCode(cp);
            if (VALID_REGEX_FLAGS.has(cp)) {
              if (cp === 118) {
                if (mods.includes("u")) {
                  this.raise(Errors.IncompatibleRegExpUVFlags, {
                    at: nextPos()
                  });
                }
              } else if (cp === 117) {
                if (mods.includes("v")) {
                  this.raise(Errors.IncompatibleRegExpUVFlags, {
                    at: nextPos()
                  });
                }
              }
              if (mods.includes(char)) {
                this.raise(Errors.DuplicateRegExpFlags, {
                  at: nextPos()
                });
              }
            } else if (isIdentifierChar(cp) || cp === 92) {
              this.raise(Errors.MalformedRegExpFlags, {
                at: nextPos()
              });
            } else {
              break;
            }
            ++pos;
            mods += char;
          }
          this.state.pos = pos;
          this.finishToken(135, {
            pattern: content,
            flags: mods
          });
        }
        readInt(radix, len, forceLen = false, allowNumSeparator = true) {
          const {
            n,
            pos
          } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
          this.state.pos = pos;
          return n;
        }
        readRadixNumber(radix) {
          const startLoc = this.state.curPosition();
          let isBigInt = false;
          this.state.pos += 2;
          const val = this.readInt(radix);
          if (val == null) {
            this.raise(Errors.InvalidDigit, {
              at: createPositionWithColumnOffset(startLoc, 2),
              radix
            });
          }
          const next = this.input.charCodeAt(this.state.pos);
          if (next === 110) {
            ++this.state.pos;
            isBigInt = true;
          } else if (next === 109) {
            throw this.raise(Errors.InvalidDecimal, {
              at: startLoc
            });
          }
          if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
            throw this.raise(Errors.NumberIdentifier, {
              at: this.state.curPosition()
            });
          }
          if (isBigInt) {
            const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
            this.finishToken(133, str);
            return;
          }
          this.finishToken(132, val);
        }
        readNumber(startsWithDot) {
          const start = this.state.pos;
          const startLoc = this.state.curPosition();
          let isFloat = false;
          let isBigInt = false;
          let isDecimal = false;
          let hasExponent = false;
          let isOctal = false;
          if (!startsWithDot && this.readInt(10) === null) {
            this.raise(Errors.InvalidNumber, {
              at: this.state.curPosition()
            });
          }
          const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
          if (hasLeadingZero) {
            const integer = this.input.slice(start, this.state.pos);
            this.recordStrictModeErrors(Errors.StrictOctalLiteral, {
              at: startLoc
            });
            if (!this.state.strict) {
              const underscorePos = integer.indexOf("_");
              if (underscorePos > 0) {
                this.raise(Errors.ZeroDigitNumericSeparator, {
                  at: createPositionWithColumnOffset(startLoc, underscorePos)
                });
              }
            }
            isOctal = hasLeadingZero && !/[89]/.test(integer);
          }
          let next = this.input.charCodeAt(this.state.pos);
          if (next === 46 && !isOctal) {
            ++this.state.pos;
            this.readInt(10);
            isFloat = true;
            next = this.input.charCodeAt(this.state.pos);
          }
          if ((next === 69 || next === 101) && !isOctal) {
            next = this.input.charCodeAt(++this.state.pos);
            if (next === 43 || next === 45) {
              ++this.state.pos;
            }
            if (this.readInt(10) === null) {
              this.raise(Errors.InvalidOrMissingExponent, {
                at: startLoc
              });
            }
            isFloat = true;
            hasExponent = true;
            next = this.input.charCodeAt(this.state.pos);
          }
          if (next === 110) {
            if (isFloat || hasLeadingZero) {
              this.raise(Errors.InvalidBigIntLiteral, {
                at: startLoc
              });
            }
            ++this.state.pos;
            isBigInt = true;
          }
          if (next === 109) {
            this.expectPlugin("decimal", this.state.curPosition());
            if (hasExponent || hasLeadingZero) {
              this.raise(Errors.InvalidDecimal, {
                at: startLoc
              });
            }
            ++this.state.pos;
            isDecimal = true;
          }
          if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
            throw this.raise(Errors.NumberIdentifier, {
              at: this.state.curPosition()
            });
          }
          const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
          if (isBigInt) {
            this.finishToken(133, str);
            return;
          }
          if (isDecimal) {
            this.finishToken(134, str);
            return;
          }
          const val = isOctal ? parseInt(str, 8) : parseFloat(str);
          this.finishToken(132, val);
        }
        readCodePoint(throwOnInvalid) {
          const {
            code,
            pos
          } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
          this.state.pos = pos;
          return code;
        }
        readString(quote) {
          const {
            str,
            pos,
            curLine,
            lineStart
          } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
          this.state.pos = pos + 1;
          this.state.lineStart = lineStart;
          this.state.curLine = curLine;
          this.finishToken(131, str);
        }
        readTemplateContinuation() {
          if (!this.match(8)) {
            this.unexpected(null, 8);
          }
          this.state.pos--;
          this.readTemplateToken();
        }
        readTemplateToken() {
          const opening = this.input[this.state.pos];
          const {
            str,
            firstInvalidLoc,
            pos,
            curLine,
            lineStart
          } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
          this.state.pos = pos + 1;
          this.state.lineStart = lineStart;
          this.state.curLine = curLine;
          if (firstInvalidLoc) {
            this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);
          }
          if (this.input.codePointAt(pos) === 96) {
            this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");
          } else {
            this.state.pos++;
            this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");
          }
        }
        recordStrictModeErrors(toParseError, {
          at
        }) {
          const index = at.index;
          if (this.state.strict && !this.state.strictErrors.has(index)) {
            this.raise(toParseError, {
              at
            });
          } else {
            this.state.strictErrors.set(index, [toParseError, at]);
          }
        }
        readWord1(firstCode) {
          this.state.containsEsc = false;
          let word = "";
          const start = this.state.pos;
          let chunkStart = this.state.pos;
          if (firstCode !== void 0) {
            this.state.pos += firstCode <= 65535 ? 1 : 2;
          }
          while (this.state.pos < this.length) {
            const ch = this.codePointAtPos(this.state.pos);
            if (isIdentifierChar(ch)) {
              this.state.pos += ch <= 65535 ? 1 : 2;
            } else if (ch === 92) {
              this.state.containsEsc = true;
              word += this.input.slice(chunkStart, this.state.pos);
              const escStart = this.state.curPosition();
              const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
              if (this.input.charCodeAt(++this.state.pos) !== 117) {
                this.raise(Errors.MissingUnicodeEscape, {
                  at: this.state.curPosition()
                });
                chunkStart = this.state.pos - 1;
                continue;
              }
              ++this.state.pos;
              const esc = this.readCodePoint(true);
              if (esc !== null) {
                if (!identifierCheck(esc)) {
                  this.raise(Errors.EscapedCharNotAnIdentifier, {
                    at: escStart
                  });
                }
                word += String.fromCodePoint(esc);
              }
              chunkStart = this.state.pos;
            } else {
              break;
            }
          }
          return word + this.input.slice(chunkStart, this.state.pos);
        }
        readWord(firstCode) {
          const word = this.readWord1(firstCode);
          const type = keywords$1.get(word);
          if (type !== void 0) {
            this.finishToken(type, tokenLabelName(type));
          } else {
            this.finishToken(130, word);
          }
        }
        checkKeywordEscapes() {
          const {
            type
          } = this.state;
          if (tokenIsKeyword(type) && this.state.containsEsc) {
            this.raise(Errors.InvalidEscapedReservedWord, {
              at: this.state.startLoc,
              reservedWord: tokenLabelName(type)
            });
          }
        }
        raise(toParseError, raiseProperties) {
          const {
            at
          } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);
          const loc = at instanceof Position ? at : at.loc.start;
          const error = toParseError({
            loc,
            details
          });
          if (!this.options.errorRecovery)
            throw error;
          if (!this.isLookahead)
            this.state.errors.push(error);
          return error;
        }
        raiseOverwrite(toParseError, raiseProperties) {
          const {
            at
          } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);
          const loc = at instanceof Position ? at : at.loc.start;
          const pos = loc.index;
          const errors = this.state.errors;
          for (let i = errors.length - 1; i >= 0; i--) {
            const error = errors[i];
            if (error.loc.index === pos) {
              return errors[i] = toParseError({
                loc,
                details
              });
            }
            if (error.loc.index < pos)
              break;
          }
          return this.raise(toParseError, raiseProperties);
        }
        updateContext(prevType) {
        }
        unexpected(loc, type) {
          throw this.raise(Errors.UnexpectedToken, {
            expected: type ? tokenLabelName(type) : null,
            at: loc != null ? loc : this.state.startLoc
          });
        }
        expectPlugin(pluginName, loc) {
          if (this.hasPlugin(pluginName)) {
            return true;
          }
          throw this.raise(Errors.MissingPlugin, {
            at: loc != null ? loc : this.state.startLoc,
            missingPlugin: [pluginName]
          });
        }
        expectOnePlugin(pluginNames) {
          if (!pluginNames.some((name) => this.hasPlugin(name))) {
            throw this.raise(Errors.MissingOneOfPlugins, {
              at: this.state.startLoc,
              missingPlugin: pluginNames
            });
          }
        }
        errorBuilder(error) {
          return (pos, lineStart, curLine) => {
            this.raise(error, {
              at: buildPosition(pos, lineStart, curLine)
            });
          };
        }
      };
      var ClassScope = class {
        constructor() {
          this.privateNames = /* @__PURE__ */ new Set();
          this.loneAccessors = /* @__PURE__ */ new Map();
          this.undefinedPrivateNames = /* @__PURE__ */ new Map();
        }
      };
      var ClassScopeHandler = class {
        constructor(parser) {
          this.parser = void 0;
          this.stack = [];
          this.undefinedPrivateNames = /* @__PURE__ */ new Map();
          this.parser = parser;
        }
        current() {
          return this.stack[this.stack.length - 1];
        }
        enter() {
          this.stack.push(new ClassScope());
        }
        exit() {
          const oldClassScope = this.stack.pop();
          const current = this.current();
          for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
            if (current) {
              if (!current.undefinedPrivateNames.has(name)) {
                current.undefinedPrivateNames.set(name, loc);
              }
            } else {
              this.parser.raise(Errors.InvalidPrivateFieldResolution, {
                at: loc,
                identifierName: name
              });
            }
          }
        }
        declarePrivateName(name, elementType, loc) {
          const {
            privateNames,
            loneAccessors,
            undefinedPrivateNames
          } = this.current();
          let redefined = privateNames.has(name);
          if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {
            const accessor = redefined && loneAccessors.get(name);
            if (accessor) {
              const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;
              const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;
              const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;
              const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;
              redefined = oldKind === newKind || oldStatic !== newStatic;
              if (!redefined)
                loneAccessors.delete(name);
            } else if (!redefined) {
              loneAccessors.set(name, elementType);
            }
          }
          if (redefined) {
            this.parser.raise(Errors.PrivateNameRedeclaration, {
              at: loc,
              identifierName: name
            });
          }
          privateNames.add(name);
          undefinedPrivateNames.delete(name);
        }
        usePrivateName(name, loc) {
          let classScope;
          for (classScope of this.stack) {
            if (classScope.privateNames.has(name))
              return;
          }
          if (classScope) {
            classScope.undefinedPrivateNames.set(name, loc);
          } else {
            this.parser.raise(Errors.InvalidPrivateFieldResolution, {
              at: loc,
              identifierName: name
            });
          }
        }
      };
      var kExpression = 0;
      var kMaybeArrowParameterDeclaration = 1;
      var kMaybeAsyncArrowParameterDeclaration = 2;
      var kParameterDeclaration = 3;
      var ExpressionScope = class {
        constructor(type = kExpression) {
          this.type = void 0;
          this.type = type;
        }
        canBeArrowParameterDeclaration() {
          return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;
        }
        isCertainlyParameterDeclaration() {
          return this.type === kParameterDeclaration;
        }
      };
      var ArrowHeadParsingScope = class extends ExpressionScope {
        constructor(type) {
          super(type);
          this.declarationErrors = /* @__PURE__ */ new Map();
        }
        recordDeclarationError(ParsingErrorClass, {
          at
        }) {
          const index = at.index;
          this.declarationErrors.set(index, [ParsingErrorClass, at]);
        }
        clearDeclarationError(index) {
          this.declarationErrors.delete(index);
        }
        iterateErrors(iterator) {
          this.declarationErrors.forEach(iterator);
        }
      };
      var ExpressionScopeHandler = class {
        constructor(parser) {
          this.parser = void 0;
          this.stack = [new ExpressionScope()];
          this.parser = parser;
        }
        enter(scope) {
          this.stack.push(scope);
        }
        exit() {
          this.stack.pop();
        }
        recordParameterInitializerError(toParseError, {
          at: node
        }) {
          const origin = {
            at: node.loc.start
          };
          const {
            stack
          } = this;
          let i = stack.length - 1;
          let scope = stack[i];
          while (!scope.isCertainlyParameterDeclaration()) {
            if (scope.canBeArrowParameterDeclaration()) {
              scope.recordDeclarationError(toParseError, origin);
            } else {
              return;
            }
            scope = stack[--i];
          }
          this.parser.raise(toParseError, origin);
        }
        recordArrowParameterBindingError(error, {
          at: node
        }) {
          const {
            stack
          } = this;
          const scope = stack[stack.length - 1];
          const origin = {
            at: node.loc.start
          };
          if (scope.isCertainlyParameterDeclaration()) {
            this.parser.raise(error, origin);
          } else if (scope.canBeArrowParameterDeclaration()) {
            scope.recordDeclarationError(error, origin);
          } else {
            return;
          }
        }
        recordAsyncArrowParametersError({
          at
        }) {
          const {
            stack
          } = this;
          let i = stack.length - 1;
          let scope = stack[i];
          while (scope.canBeArrowParameterDeclaration()) {
            if (scope.type === kMaybeAsyncArrowParameterDeclaration) {
              scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {
                at
              });
            }
            scope = stack[--i];
          }
        }
        validateAsPattern() {
          const {
            stack
          } = this;
          const currentScope = stack[stack.length - 1];
          if (!currentScope.canBeArrowParameterDeclaration())
            return;
          currentScope.iterateErrors(([toParseError, loc]) => {
            this.parser.raise(toParseError, {
              at: loc
            });
            let i = stack.length - 2;
            let scope = stack[i];
            while (scope.canBeArrowParameterDeclaration()) {
              scope.clearDeclarationError(loc.index);
              scope = stack[--i];
            }
          });
        }
      };
      function newParameterDeclarationScope() {
        return new ExpressionScope(kParameterDeclaration);
      }
      function newArrowHeadScope() {
        return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);
      }
      function newAsyncArrowScope() {
        return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);
      }
      function newExpressionScope() {
        return new ExpressionScope();
      }
      var PARAM = 0;
      var PARAM_YIELD = 1;
      var PARAM_AWAIT = 2;
      var PARAM_RETURN = 4;
      var PARAM_IN = 8;
      var ProductionParameterHandler = class {
        constructor() {
          this.stacks = [];
        }
        enter(flags) {
          this.stacks.push(flags);
        }
        exit() {
          this.stacks.pop();
        }
        currentFlags() {
          return this.stacks[this.stacks.length - 1];
        }
        get hasAwait() {
          return (this.currentFlags() & PARAM_AWAIT) > 0;
        }
        get hasYield() {
          return (this.currentFlags() & PARAM_YIELD) > 0;
        }
        get hasReturn() {
          return (this.currentFlags() & PARAM_RETURN) > 0;
        }
        get hasIn() {
          return (this.currentFlags() & PARAM_IN) > 0;
        }
      };
      function functionFlags(isAsync, isGenerator) {
        return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
      }
      var UtilParser = class extends Tokenizer {
        addExtra(node, key, value, enumerable = true) {
          if (!node)
            return;
          const extra = node.extra = node.extra || {};
          if (enumerable) {
            extra[key] = value;
          } else {
            Object.defineProperty(extra, key, {
              enumerable,
              value
            });
          }
        }
        isContextual(token) {
          return this.state.type === token && !this.state.containsEsc;
        }
        isUnparsedContextual(nameStart, name) {
          const nameEnd = nameStart + name.length;
          if (this.input.slice(nameStart, nameEnd) === name) {
            const nextCh = this.input.charCodeAt(nameEnd);
            return !(isIdentifierChar(nextCh) || (nextCh & 64512) === 55296);
          }
          return false;
        }
        isLookaheadContextual(name) {
          const next = this.nextTokenStart();
          return this.isUnparsedContextual(next, name);
        }
        eatContextual(token) {
          if (this.isContextual(token)) {
            this.next();
            return true;
          }
          return false;
        }
        expectContextual(token, toParseError) {
          if (!this.eatContextual(token)) {
            if (toParseError != null) {
              throw this.raise(toParseError, {
                at: this.state.startLoc
              });
            }
            this.unexpected(null, token);
          }
        }
        canInsertSemicolon() {
          return this.match(137) || this.match(8) || this.hasPrecedingLineBreak();
        }
        hasPrecedingLineBreak() {
          return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
        }
        hasFollowingLineBreak() {
          skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
          return skipWhiteSpaceToLineBreak.test(this.input);
        }
        isLineTerminator() {
          return this.eat(13) || this.canInsertSemicolon();
        }
        semicolon(allowAsi = true) {
          if (allowAsi ? this.isLineTerminator() : this.eat(13))
            return;
          this.raise(Errors.MissingSemicolon, {
            at: this.state.lastTokEndLoc
          });
        }
        expect(type, loc) {
          this.eat(type) || this.unexpected(loc, type);
        }
        tryParse(fn, oldState = this.state.clone()) {
          const abortSignal = {
            node: null
          };
          try {
            const node = fn((node2 = null) => {
              abortSignal.node = node2;
              throw abortSignal;
            });
            if (this.state.errors.length > oldState.errors.length) {
              const failState = this.state;
              this.state = oldState;
              this.state.tokensLength = failState.tokensLength;
              return {
                node,
                error: failState.errors[oldState.errors.length],
                thrown: false,
                aborted: false,
                failState
              };
            }
            return {
              node,
              error: null,
              thrown: false,
              aborted: false,
              failState: null
            };
          } catch (error) {
            const failState = this.state;
            this.state = oldState;
            if (error instanceof SyntaxError) {
              return {
                node: null,
                error,
                thrown: true,
                aborted: false,
                failState
              };
            }
            if (error === abortSignal) {
              return {
                node: abortSignal.node,
                error: null,
                thrown: false,
                aborted: true,
                failState
              };
            }
            throw error;
          }
        }
        checkExpressionErrors(refExpressionErrors, andThrow) {
          if (!refExpressionErrors)
            return false;
          const {
            shorthandAssignLoc,
            doubleProtoLoc,
            privateKeyLoc,
            optionalParametersLoc
          } = refExpressionErrors;
          const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
          if (!andThrow) {
            return hasErrors;
          }
          if (shorthandAssignLoc != null) {
            this.raise(Errors.InvalidCoverInitializedName, {
              at: shorthandAssignLoc
            });
          }
          if (doubleProtoLoc != null) {
            this.raise(Errors.DuplicateProto, {
              at: doubleProtoLoc
            });
          }
          if (privateKeyLoc != null) {
            this.raise(Errors.UnexpectedPrivateField, {
              at: privateKeyLoc
            });
          }
          if (optionalParametersLoc != null) {
            this.unexpected(optionalParametersLoc);
          }
        }
        isLiteralPropertyName() {
          return tokenIsLiteralPropertyName(this.state.type);
        }
        isPrivateName(node) {
          return node.type === "PrivateName";
        }
        getPrivateNameSV(node) {
          return node.id.name;
        }
        hasPropertyAsPrivateName(node) {
          return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
        }
        isObjectProperty(node) {
          return node.type === "ObjectProperty";
        }
        isObjectMethod(node) {
          return node.type === "ObjectMethod";
        }
        initializeScopes(inModule = this.options.sourceType === "module") {
          const oldLabels = this.state.labels;
          this.state.labels = [];
          const oldExportedIdentifiers = this.exportedIdentifiers;
          this.exportedIdentifiers = /* @__PURE__ */ new Set();
          const oldInModule = this.inModule;
          this.inModule = inModule;
          const oldScope = this.scope;
          const ScopeHandler2 = this.getScopeHandler();
          this.scope = new ScopeHandler2(this, inModule);
          const oldProdParam = this.prodParam;
          this.prodParam = new ProductionParameterHandler();
          const oldClassScope = this.classScope;
          this.classScope = new ClassScopeHandler(this);
          const oldExpressionScope = this.expressionScope;
          this.expressionScope = new ExpressionScopeHandler(this);
          return () => {
            this.state.labels = oldLabels;
            this.exportedIdentifiers = oldExportedIdentifiers;
            this.inModule = oldInModule;
            this.scope = oldScope;
            this.prodParam = oldProdParam;
            this.classScope = oldClassScope;
            this.expressionScope = oldExpressionScope;
          };
        }
        enterInitialScopes() {
          let paramFlags = PARAM;
          if (this.inModule) {
            paramFlags |= PARAM_AWAIT;
          }
          this.scope.enter(SCOPE_PROGRAM);
          this.prodParam.enter(paramFlags);
        }
        checkDestructuringPrivate(refExpressionErrors) {
          const {
            privateKeyLoc
          } = refExpressionErrors;
          if (privateKeyLoc !== null) {
            this.expectPlugin("destructuringPrivate", privateKeyLoc);
          }
        }
      };
      var ExpressionErrors = class {
        constructor() {
          this.shorthandAssignLoc = null;
          this.doubleProtoLoc = null;
          this.privateKeyLoc = null;
          this.optionalParametersLoc = null;
        }
      };
      var Node = class {
        constructor(parser, pos, loc) {
          this.type = "";
          this.start = pos;
          this.end = 0;
          this.loc = new SourceLocation(loc);
          if (parser != null && parser.options.ranges)
            this.range = [pos, 0];
          if (parser != null && parser.filename)
            this.loc.filename = parser.filename;
        }
      };
      var NodePrototype = Node.prototype;
      {
        NodePrototype.__clone = function() {
          const newNode = new Node(void 0, this.start, this.loc.start);
          const keys = Object.keys(this);
          for (let i = 0, length = keys.length; i < length; i++) {
            const key = keys[i];
            if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
              newNode[key] = this[key];
            }
          }
          return newNode;
        };
      }
      function clonePlaceholder(node) {
        return cloneIdentifier(node);
      }
      function cloneIdentifier(node) {
        const {
          type,
          start,
          end,
          loc,
          range,
          extra,
          name
        } = node;
        const cloned = Object.create(NodePrototype);
        cloned.type = type;
        cloned.start = start;
        cloned.end = end;
        cloned.loc = loc;
        cloned.range = range;
        cloned.extra = extra;
        cloned.name = name;
        if (type === "Placeholder") {
          cloned.expectedNode = node.expectedNode;
        }
        return cloned;
      }
      function cloneStringLiteral(node) {
        const {
          type,
          start,
          end,
          loc,
          range,
          extra
        } = node;
        if (type === "Placeholder") {
          return clonePlaceholder(node);
        }
        const cloned = Object.create(NodePrototype);
        cloned.type = type;
        cloned.start = start;
        cloned.end = end;
        cloned.loc = loc;
        cloned.range = range;
        if (node.raw !== void 0) {
          cloned.raw = node.raw;
        } else {
          cloned.extra = extra;
        }
        cloned.value = node.value;
        return cloned;
      }
      var NodeUtils = class extends UtilParser {
        startNode() {
          return new Node(this, this.state.start, this.state.startLoc);
        }
        startNodeAt(loc) {
          return new Node(this, loc.index, loc);
        }
        startNodeAtNode(type) {
          return this.startNodeAt(type.loc.start);
        }
        finishNode(node, type) {
          return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
        }
        finishNodeAt(node, type, endLoc) {
          node.type = type;
          node.end = endLoc.index;
          node.loc.end = endLoc;
          if (this.options.ranges)
            node.range[1] = endLoc.index;
          if (this.options.attachComment)
            this.processComment(node);
          return node;
        }
        resetStartLocation(node, startLoc) {
          node.start = startLoc.index;
          node.loc.start = startLoc;
          if (this.options.ranges)
            node.range[0] = startLoc.index;
        }
        resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
          node.end = endLoc.index;
          node.loc.end = endLoc;
          if (this.options.ranges)
            node.range[1] = endLoc.index;
        }
        resetStartLocationFromNode(node, locationNode) {
          this.resetStartLocation(node, locationNode.loc.start);
        }
      };
      var reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
      var FlowErrors = ParseErrorEnum`flow`({
        AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
        AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
        AssignReservedType: ({
          reservedType
        }) => `Cannot overwrite reserved type ${reservedType}.`,
        DeclareClassElement: "The `declare` modifier can only appear on class fields.",
        DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
        DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
        EnumBooleanMemberNotInitialized: ({
          memberName,
          enumName
        }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
        EnumDuplicateMemberName: ({
          memberName,
          enumName
        }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
        EnumInconsistentMemberValues: ({
          enumName
        }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
        EnumInvalidExplicitType: ({
          invalidEnumType,
          enumName
        }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
        EnumInvalidExplicitTypeUnknownSupplied: ({
          enumName
        }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
        EnumInvalidMemberInitializerPrimaryType: ({
          enumName,
          memberName,
          explicitType
        }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
        EnumInvalidMemberInitializerSymbolType: ({
          enumName,
          memberName
        }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
        EnumInvalidMemberInitializerUnknownType: ({
          enumName,
          memberName
        }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
        EnumInvalidMemberName: ({
          enumName,
          memberName,
          suggestion
        }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
        EnumNumberMemberNotInitialized: ({
          enumName,
          memberName
        }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
        EnumStringMemberInconsistentlyInitailized: ({
          enumName
        }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
        GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
        ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
        ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
        InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
        InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
        InexactVariance: "Explicit inexact syntax cannot have variance.",
        InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
        MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
        NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
        NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
        PatternIsOptional: Object.assign({
          message: "A binding pattern parameter cannot be optional in an implementation signature."
        }, {
          reasonCode: "OptionalBindingPattern"
        }),
        SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
        SpreadVariance: "Spread properties cannot have variance.",
        ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
        ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
        ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
        ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
        ThisParamNoDefault: "The `this` parameter may not have a default value.",
        TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
        TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
        UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
        UnexpectedReservedType: ({
          reservedType
        }) => `Unexpected reserved type ${reservedType}.`,
        UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
        UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
        UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
        UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
        UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
        UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
        UnsupportedDeclareExportKind: ({
          unsupportedExportKind,
          suggestion
        }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
        UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
        UnterminatedFlowComment: "Unterminated flow-comment."
      });
      function isEsModuleType(bodyElement) {
        return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
      }
      function hasTypeImportKind(node) {
        return node.importKind === "type" || node.importKind === "typeof";
      }
      var exportSuggestions = {
        const: "declare export var",
        let: "declare export var",
        type: "export type",
        interface: "export interface"
      };
      function partition(list, test) {
        const list1 = [];
        const list2 = [];
        for (let i = 0; i < list.length; i++) {
          (test(list[i], i, list) ? list1 : list2).push(list[i]);
        }
        return [list1, list2];
      }
      var FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
      var flow = (superClass) => class FlowParserMixin extends superClass {
        constructor(...args) {
          super(...args);
          this.flowPragma = void 0;
        }
        getScopeHandler() {
          return FlowScopeHandler;
        }
        shouldParseTypes() {
          return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
        }
        shouldParseEnums() {
          return !!this.getPluginOption("flow", "enums");
        }
        finishToken(type, val) {
          if (type !== 131 && type !== 13 && type !== 28) {
            if (this.flowPragma === void 0) {
              this.flowPragma = null;
            }
          }
          super.finishToken(type, val);
        }
        addComment(comment) {
          if (this.flowPragma === void 0) {
            const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
            if (!matches)
              ;
            else if (matches[1] === "flow") {
              this.flowPragma = "flow";
            } else if (matches[1] === "noflow") {
              this.flowPragma = "noflow";
            } else {
              throw new Error("Unexpected flow pragma");
            }
          }
          super.addComment(comment);
        }
        flowParseTypeInitialiser(tok) {
          const oldInType = this.state.inType;
          this.state.inType = true;
          this.expect(tok || 14);
          const type = this.flowParseType();
          this.state.inType = oldInType;
          return type;
        }
        flowParsePredicate() {
          const node = this.startNode();
          const moduloLoc = this.state.startLoc;
          this.next();
          this.expectContextual(108);
          if (this.state.lastTokStart > moduloLoc.index + 1) {
            this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {
              at: moduloLoc
            });
          }
          if (this.eat(10)) {
            node.value = super.parseExpression();
            this.expect(11);
            return this.finishNode(node, "DeclaredPredicate");
          } else {
            return this.finishNode(node, "InferredPredicate");
          }
        }
        flowParseTypeAndPredicateInitialiser() {
          const oldInType = this.state.inType;
          this.state.inType = true;
          this.expect(14);
          let type = null;
          let predicate = null;
          if (this.match(54)) {
            this.state.inType = oldInType;
            predicate = this.flowParsePredicate();
          } else {
            type = this.flowParseType();
            this.state.inType = oldInType;
            if (this.match(54)) {
              predicate = this.flowParsePredicate();
            }
          }
          return [type, predicate];
        }
        flowParseDeclareClass(node) {
          this.next();
          this.flowParseInterfaceish(node, true);
          return this.finishNode(node, "DeclareClass");
        }
        flowParseDeclareFunction(node) {
          this.next();
          const id = node.id = this.parseIdentifier();
          const typeNode = this.startNode();
          const typeContainer = this.startNode();
          if (this.match(47)) {
            typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
          } else {
            typeNode.typeParameters = null;
          }
          this.expect(10);
          const tmp = this.flowParseFunctionTypeParams();
          typeNode.params = tmp.params;
          typeNode.rest = tmp.rest;
          typeNode.this = tmp._this;
          this.expect(11);
          [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
          typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
          id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
          this.resetEndLocation(id);
          this.semicolon();
          this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);
          return this.finishNode(node, "DeclareFunction");
        }
        flowParseDeclare(node, insideModule) {
          if (this.match(80)) {
            return this.flowParseDeclareClass(node);
          } else if (this.match(68)) {
            return this.flowParseDeclareFunction(node);
          } else if (this.match(74)) {
            return this.flowParseDeclareVariable(node);
          } else if (this.eatContextual(125)) {
            if (this.match(16)) {
              return this.flowParseDeclareModuleExports(node);
            } else {
              if (insideModule) {
                this.raise(FlowErrors.NestedDeclareModule, {
                  at: this.state.lastTokStartLoc
                });
              }
              return this.flowParseDeclareModule(node);
            }
          } else if (this.isContextual(128)) {
            return this.flowParseDeclareTypeAlias(node);
          } else if (this.isContextual(129)) {
            return this.flowParseDeclareOpaqueType(node);
          } else if (this.isContextual(127)) {
            return this.flowParseDeclareInterface(node);
          } else if (this.match(82)) {
            return this.flowParseDeclareExportDeclaration(node, insideModule);
          } else {
            this.unexpected();
          }
        }
        flowParseDeclareVariable(node) {
          this.next();
          node.id = this.flowParseTypeAnnotatableIdentifier(true);
          this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);
          this.semicolon();
          return this.finishNode(node, "DeclareVariable");
        }
        flowParseDeclareModule(node) {
          this.scope.enter(SCOPE_OTHER);
          if (this.match(131)) {
            node.id = super.parseExprAtom();
          } else {
            node.id = this.parseIdentifier();
          }
          const bodyNode = node.body = this.startNode();
          const body = bodyNode.body = [];
          this.expect(5);
          while (!this.match(8)) {
            let bodyNode2 = this.startNode();
            if (this.match(83)) {
              this.next();
              if (!this.isContextual(128) && !this.match(87)) {
                this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {
                  at: this.state.lastTokStartLoc
                });
              }
              super.parseImport(bodyNode2);
            } else {
              this.expectContextual(123, FlowErrors.UnsupportedStatementInDeclareModule);
              bodyNode2 = this.flowParseDeclare(bodyNode2, true);
            }
            body.push(bodyNode2);
          }
          this.scope.exit();
          this.expect(8);
          this.finishNode(bodyNode, "BlockStatement");
          let kind = null;
          let hasModuleExport = false;
          body.forEach((bodyElement) => {
            if (isEsModuleType(bodyElement)) {
              if (kind === "CommonJS") {
                this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
                  at: bodyElement
                });
              }
              kind = "ES";
            } else if (bodyElement.type === "DeclareModuleExports") {
              if (hasModuleExport) {
                this.raise(FlowErrors.DuplicateDeclareModuleExports, {
                  at: bodyElement
                });
              }
              if (kind === "ES") {
                this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
                  at: bodyElement
                });
              }
              kind = "CommonJS";
              hasModuleExport = true;
            }
          });
          node.kind = kind || "CommonJS";
          return this.finishNode(node, "DeclareModule");
        }
        flowParseDeclareExportDeclaration(node, insideModule) {
          this.expect(82);
          if (this.eat(65)) {
            if (this.match(68) || this.match(80)) {
              node.declaration = this.flowParseDeclare(this.startNode());
            } else {
              node.declaration = this.flowParseType();
              this.semicolon();
            }
            node.default = true;
            return this.finishNode(node, "DeclareExportDeclaration");
          } else {
            if (this.match(75) || this.isLet() || (this.isContextual(128) || this.isContextual(127)) && !insideModule) {
              const label = this.state.value;
              throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {
                at: this.state.startLoc,
                unsupportedExportKind: label,
                suggestion: exportSuggestions[label]
              });
            }
            if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(129)) {
              node.declaration = this.flowParseDeclare(this.startNode());
              node.default = false;
              return this.finishNode(node, "DeclareExportDeclaration");
            } else if (this.match(55) || this.match(5) || this.isContextual(127) || this.isContextual(128) || this.isContextual(129)) {
              node = this.parseExport(node, null);
              if (node.type === "ExportNamedDeclaration") {
                node.type = "ExportDeclaration";
                node.default = false;
                delete node.exportKind;
              }
              node.type = "Declare" + node.type;
              return node;
            }
          }
          this.unexpected();
        }
        flowParseDeclareModuleExports(node) {
          this.next();
          this.expectContextual(109);
          node.typeAnnotation = this.flowParseTypeAnnotation();
          this.semicolon();
          return this.finishNode(node, "DeclareModuleExports");
        }
        flowParseDeclareTypeAlias(node) {
          this.next();
          const finished = this.flowParseTypeAlias(node);
          finished.type = "DeclareTypeAlias";
          return finished;
        }
        flowParseDeclareOpaqueType(node) {
          this.next();
          const finished = this.flowParseOpaqueType(node, true);
          finished.type = "DeclareOpaqueType";
          return finished;
        }
        flowParseDeclareInterface(node) {
          this.next();
          this.flowParseInterfaceish(node, false);
          return this.finishNode(node, "DeclareInterface");
        }
        flowParseInterfaceish(node, isClass) {
          node.id = this.flowParseRestrictedIdentifier(!isClass, true);
          this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          } else {
            node.typeParameters = null;
          }
          node.extends = [];
          if (this.eat(81)) {
            do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (!isClass && this.eat(12));
          }
          if (isClass) {
            node.implements = [];
            node.mixins = [];
            if (this.eatContextual(115)) {
              do {
                node.mixins.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
            if (this.eatContextual(111)) {
              do {
                node.implements.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
          }
          node.body = this.flowParseObjectType({
            allowStatic: isClass,
            allowExact: false,
            allowSpread: false,
            allowProto: isClass,
            allowInexact: false
          });
        }
        flowParseInterfaceExtends() {
          const node = this.startNode();
          node.id = this.flowParseQualifiedTypeIdentifier();
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterInstantiation();
          } else {
            node.typeParameters = null;
          }
          return this.finishNode(node, "InterfaceExtends");
        }
        flowParseInterface(node) {
          this.flowParseInterfaceish(node, false);
          return this.finishNode(node, "InterfaceDeclaration");
        }
        checkNotUnderscore(word) {
          if (word === "_") {
            this.raise(FlowErrors.UnexpectedReservedUnderscore, {
              at: this.state.startLoc
            });
          }
        }
        checkReservedType(word, startLoc, declaration) {
          if (!reservedTypes.has(word))
            return;
          this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {
            at: startLoc,
            reservedType: word
          });
        }
        flowParseRestrictedIdentifier(liberal, declaration) {
          this.checkReservedType(this.state.value, this.state.startLoc, declaration);
          return this.parseIdentifier(liberal);
        }
        flowParseTypeAlias(node) {
          node.id = this.flowParseRestrictedIdentifier(false, true);
          this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          } else {
            node.typeParameters = null;
          }
          node.right = this.flowParseTypeInitialiser(29);
          this.semicolon();
          return this.finishNode(node, "TypeAlias");
        }
        flowParseOpaqueType(node, declare) {
          this.expectContextual(128);
          node.id = this.flowParseRestrictedIdentifier(true, true);
          this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          } else {
            node.typeParameters = null;
          }
          node.supertype = null;
          if (this.match(14)) {
            node.supertype = this.flowParseTypeInitialiser(14);
          }
          node.impltype = null;
          if (!declare) {
            node.impltype = this.flowParseTypeInitialiser(29);
          }
          this.semicolon();
          return this.finishNode(node, "OpaqueType");
        }
        flowParseTypeParameter(requireDefault = false) {
          const nodeStartLoc = this.state.startLoc;
          const node = this.startNode();
          const variance = this.flowParseVariance();
          const ident = this.flowParseTypeAnnotatableIdentifier();
          node.name = ident.name;
          node.variance = variance;
          node.bound = ident.typeAnnotation;
          if (this.match(29)) {
            this.eat(29);
            node.default = this.flowParseType();
          } else {
            if (requireDefault) {
              this.raise(FlowErrors.MissingTypeParamDefault, {
                at: nodeStartLoc
              });
            }
          }
          return this.finishNode(node, "TypeParameter");
        }
        flowParseTypeParameterDeclaration() {
          const oldInType = this.state.inType;
          const node = this.startNode();
          node.params = [];
          this.state.inType = true;
          if (this.match(47) || this.match(140)) {
            this.next();
          } else {
            this.unexpected();
          }
          let defaultRequired = false;
          do {
            const typeParameter = this.flowParseTypeParameter(defaultRequired);
            node.params.push(typeParameter);
            if (typeParameter.default) {
              defaultRequired = true;
            }
            if (!this.match(48)) {
              this.expect(12);
            }
          } while (!this.match(48));
          this.expect(48);
          this.state.inType = oldInType;
          return this.finishNode(node, "TypeParameterDeclaration");
        }
        flowParseTypeParameterInstantiation() {
          const node = this.startNode();
          const oldInType = this.state.inType;
          node.params = [];
          this.state.inType = true;
          this.expect(47);
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = false;
          while (!this.match(48)) {
            node.params.push(this.flowParseType());
            if (!this.match(48)) {
              this.expect(12);
            }
          }
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
          this.expect(48);
          this.state.inType = oldInType;
          return this.finishNode(node, "TypeParameterInstantiation");
        }
        flowParseTypeParameterInstantiationCallOrNew() {
          const node = this.startNode();
          const oldInType = this.state.inType;
          node.params = [];
          this.state.inType = true;
          this.expect(47);
          while (!this.match(48)) {
            node.params.push(this.flowParseTypeOrImplicitInstantiation());
            if (!this.match(48)) {
              this.expect(12);
            }
          }
          this.expect(48);
          this.state.inType = oldInType;
          return this.finishNode(node, "TypeParameterInstantiation");
        }
        flowParseInterfaceType() {
          const node = this.startNode();
          this.expectContextual(127);
          node.extends = [];
          if (this.eat(81)) {
            do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (this.eat(12));
          }
          node.body = this.flowParseObjectType({
            allowStatic: false,
            allowExact: false,
            allowSpread: false,
            allowProto: false,
            allowInexact: false
          });
          return this.finishNode(node, "InterfaceTypeAnnotation");
        }
        flowParseObjectPropertyKey() {
          return this.match(132) || this.match(131) ? super.parseExprAtom() : this.parseIdentifier(true);
        }
        flowParseObjectTypeIndexer(node, isStatic, variance) {
          node.static = isStatic;
          if (this.lookahead().type === 14) {
            node.id = this.flowParseObjectPropertyKey();
            node.key = this.flowParseTypeInitialiser();
          } else {
            node.id = null;
            node.key = this.flowParseType();
          }
          this.expect(3);
          node.value = this.flowParseTypeInitialiser();
          node.variance = variance;
          return this.finishNode(node, "ObjectTypeIndexer");
        }
        flowParseObjectTypeInternalSlot(node, isStatic) {
          node.static = isStatic;
          node.id = this.flowParseObjectPropertyKey();
          this.expect(3);
          this.expect(3);
          if (this.match(47) || this.match(10)) {
            node.method = true;
            node.optional = false;
            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
          } else {
            node.method = false;
            if (this.eat(17)) {
              node.optional = true;
            }
            node.value = this.flowParseTypeInitialiser();
          }
          return this.finishNode(node, "ObjectTypeInternalSlot");
        }
        flowParseObjectTypeMethodish(node) {
          node.params = [];
          node.rest = null;
          node.typeParameters = null;
          node.this = null;
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          }
          this.expect(10);
          if (this.match(78)) {
            node.this = this.flowParseFunctionTypeParam(true);
            node.this.name = null;
            if (!this.match(11)) {
              this.expect(12);
            }
          }
          while (!this.match(11) && !this.match(21)) {
            node.params.push(this.flowParseFunctionTypeParam(false));
            if (!this.match(11)) {
              this.expect(12);
            }
          }
          if (this.eat(21)) {
            node.rest = this.flowParseFunctionTypeParam(false);
          }
          this.expect(11);
          node.returnType = this.flowParseTypeInitialiser();
          return this.finishNode(node, "FunctionTypeAnnotation");
        }
        flowParseObjectTypeCallProperty(node, isStatic) {
          const valueNode = this.startNode();
          node.static = isStatic;
          node.value = this.flowParseObjectTypeMethodish(valueNode);
          return this.finishNode(node, "ObjectTypeCallProperty");
        }
        flowParseObjectType({
          allowStatic,
          allowExact,
          allowSpread,
          allowProto,
          allowInexact
        }) {
          const oldInType = this.state.inType;
          this.state.inType = true;
          const nodeStart = this.startNode();
          nodeStart.callProperties = [];
          nodeStart.properties = [];
          nodeStart.indexers = [];
          nodeStart.internalSlots = [];
          let endDelim;
          let exact;
          let inexact = false;
          if (allowExact && this.match(6)) {
            this.expect(6);
            endDelim = 9;
            exact = true;
          } else {
            this.expect(5);
            endDelim = 8;
            exact = false;
          }
          nodeStart.exact = exact;
          while (!this.match(endDelim)) {
            let isStatic = false;
            let protoStartLoc = null;
            let inexactStartLoc = null;
            const node = this.startNode();
            if (allowProto && this.isContextual(116)) {
              const lookahead = this.lookahead();
              if (lookahead.type !== 14 && lookahead.type !== 17) {
                this.next();
                protoStartLoc = this.state.startLoc;
                allowStatic = false;
              }
            }
            if (allowStatic && this.isContextual(104)) {
              const lookahead = this.lookahead();
              if (lookahead.type !== 14 && lookahead.type !== 17) {
                this.next();
                isStatic = true;
              }
            }
            const variance = this.flowParseVariance();
            if (this.eat(0)) {
              if (protoStartLoc != null) {
                this.unexpected(protoStartLoc);
              }
              if (this.eat(0)) {
                if (variance) {
                  this.unexpected(variance.loc.start);
                }
                nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
              } else {
                nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
              }
            } else if (this.match(10) || this.match(47)) {
              if (protoStartLoc != null) {
                this.unexpected(protoStartLoc);
              }
              if (variance) {
                this.unexpected(variance.loc.start);
              }
              nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
            } else {
              let kind = "init";
              if (this.isContextual(98) || this.isContextual(103)) {
                const lookahead = this.lookahead();
                if (tokenIsLiteralPropertyName(lookahead.type)) {
                  kind = this.state.value;
                  this.next();
                }
              }
              const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
              if (propOrInexact === null) {
                inexact = true;
                inexactStartLoc = this.state.lastTokStartLoc;
              } else {
                nodeStart.properties.push(propOrInexact);
              }
            }
            this.flowObjectTypeSemicolon();
            if (inexactStartLoc && !this.match(8) && !this.match(9)) {
              this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {
                at: inexactStartLoc
              });
            }
          }
          this.expect(endDelim);
          if (allowSpread) {
            nodeStart.inexact = inexact;
          }
          const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
          this.state.inType = oldInType;
          return out;
        }
        flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
          if (this.eat(21)) {
            const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
            if (isInexactToken) {
              if (!allowSpread) {
                this.raise(FlowErrors.InexactInsideNonObject, {
                  at: this.state.lastTokStartLoc
                });
              } else if (!allowInexact) {
                this.raise(FlowErrors.InexactInsideExact, {
                  at: this.state.lastTokStartLoc
                });
              }
              if (variance) {
                this.raise(FlowErrors.InexactVariance, {
                  at: variance
                });
              }
              return null;
            }
            if (!allowSpread) {
              this.raise(FlowErrors.UnexpectedSpreadType, {
                at: this.state.lastTokStartLoc
              });
            }
            if (protoStartLoc != null) {
              this.unexpected(protoStartLoc);
            }
            if (variance) {
              this.raise(FlowErrors.SpreadVariance, {
                at: variance
              });
            }
            node.argument = this.flowParseType();
            return this.finishNode(node, "ObjectTypeSpreadProperty");
          } else {
            node.key = this.flowParseObjectPropertyKey();
            node.static = isStatic;
            node.proto = protoStartLoc != null;
            node.kind = kind;
            let optional = false;
            if (this.match(47) || this.match(10)) {
              node.method = true;
              if (protoStartLoc != null) {
                this.unexpected(protoStartLoc);
              }
              if (variance) {
                this.unexpected(variance.loc.start);
              }
              node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
              if (kind === "get" || kind === "set") {
                this.flowCheckGetterSetterParams(node);
              }
              if (!allowSpread && node.key.name === "constructor" && node.value.this) {
                this.raise(FlowErrors.ThisParamBannedInConstructor, {
                  at: node.value.this
                });
              }
            } else {
              if (kind !== "init")
                this.unexpected();
              node.method = false;
              if (this.eat(17)) {
                optional = true;
              }
              node.value = this.flowParseTypeInitialiser();
              node.variance = variance;
            }
            node.optional = optional;
            return this.finishNode(node, "ObjectTypeProperty");
          }
        }
        flowCheckGetterSetterParams(property) {
          const paramCount = property.kind === "get" ? 0 : 1;
          const length = property.value.params.length + (property.value.rest ? 1 : 0);
          if (property.value.this) {
            this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {
              at: property.value.this
            });
          }
          if (length !== paramCount) {
            this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
              at: property
            });
          }
          if (property.kind === "set" && property.value.rest) {
            this.raise(Errors.BadSetterRestParameter, {
              at: property
            });
          }
        }
        flowObjectTypeSemicolon() {
          if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
            this.unexpected();
          }
        }
        flowParseQualifiedTypeIdentifier(startLoc, id) {
          var _startLoc;
          (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
          let node = id || this.flowParseRestrictedIdentifier(true);
          while (this.eat(16)) {
            const node2 = this.startNodeAt(startLoc);
            node2.qualification = node;
            node2.id = this.flowParseRestrictedIdentifier(true);
            node = this.finishNode(node2, "QualifiedTypeIdentifier");
          }
          return node;
        }
        flowParseGenericType(startLoc, id) {
          const node = this.startNodeAt(startLoc);
          node.typeParameters = null;
          node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterInstantiation();
          }
          return this.finishNode(node, "GenericTypeAnnotation");
        }
        flowParseTypeofType() {
          const node = this.startNode();
          this.expect(87);
          node.argument = this.flowParsePrimaryType();
          return this.finishNode(node, "TypeofTypeAnnotation");
        }
        flowParseTupleType() {
          const node = this.startNode();
          node.types = [];
          this.expect(0);
          while (this.state.pos < this.length && !this.match(3)) {
            node.types.push(this.flowParseType());
            if (this.match(3))
              break;
            this.expect(12);
          }
          this.expect(3);
          return this.finishNode(node, "TupleTypeAnnotation");
        }
        flowParseFunctionTypeParam(first) {
          let name = null;
          let optional = false;
          let typeAnnotation = null;
          const node = this.startNode();
          const lh = this.lookahead();
          const isThis = this.state.type === 78;
          if (lh.type === 14 || lh.type === 17) {
            if (isThis && !first) {
              this.raise(FlowErrors.ThisParamMustBeFirst, {
                at: node
              });
            }
            name = this.parseIdentifier(isThis);
            if (this.eat(17)) {
              optional = true;
              if (isThis) {
                this.raise(FlowErrors.ThisParamMayNotBeOptional, {
                  at: node
                });
              }
            }
            typeAnnotation = this.flowParseTypeInitialiser();
          } else {
            typeAnnotation = this.flowParseType();
          }
          node.name = name;
          node.optional = optional;
          node.typeAnnotation = typeAnnotation;
          return this.finishNode(node, "FunctionTypeParam");
        }
        reinterpretTypeAsFunctionTypeParam(type) {
          const node = this.startNodeAt(type.loc.start);
          node.name = null;
          node.optional = false;
          node.typeAnnotation = type;
          return this.finishNode(node, "FunctionTypeParam");
        }
        flowParseFunctionTypeParams(params = []) {
          let rest = null;
          let _this = null;
          if (this.match(78)) {
            _this = this.flowParseFunctionTypeParam(true);
            _this.name = null;
            if (!this.match(11)) {
              this.expect(12);
            }
          }
          while (!this.match(11) && !this.match(21)) {
            params.push(this.flowParseFunctionTypeParam(false));
            if (!this.match(11)) {
              this.expect(12);
            }
          }
          if (this.eat(21)) {
            rest = this.flowParseFunctionTypeParam(false);
          }
          return {
            params,
            rest,
            _this
          };
        }
        flowIdentToTypeAnnotation(startLoc, node, id) {
          switch (id.name) {
            case "any":
              return this.finishNode(node, "AnyTypeAnnotation");
            case "bool":
            case "boolean":
              return this.finishNode(node, "BooleanTypeAnnotation");
            case "mixed":
              return this.finishNode(node, "MixedTypeAnnotation");
            case "empty":
              return this.finishNode(node, "EmptyTypeAnnotation");
            case "number":
              return this.finishNode(node, "NumberTypeAnnotation");
            case "string":
              return this.finishNode(node, "StringTypeAnnotation");
            case "symbol":
              return this.finishNode(node, "SymbolTypeAnnotation");
            default:
              this.checkNotUnderscore(id.name);
              return this.flowParseGenericType(startLoc, id);
          }
        }
        flowParsePrimaryType() {
          const startLoc = this.state.startLoc;
          const node = this.startNode();
          let tmp;
          let type;
          let isGroupedType = false;
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          switch (this.state.type) {
            case 5:
              return this.flowParseObjectType({
                allowStatic: false,
                allowExact: false,
                allowSpread: true,
                allowProto: false,
                allowInexact: true
              });
            case 6:
              return this.flowParseObjectType({
                allowStatic: false,
                allowExact: true,
                allowSpread: true,
                allowProto: false,
                allowInexact: false
              });
            case 0:
              this.state.noAnonFunctionType = false;
              type = this.flowParseTupleType();
              this.state.noAnonFunctionType = oldNoAnonFunctionType;
              return type;
            case 47:
              node.typeParameters = this.flowParseTypeParameterDeclaration();
              this.expect(10);
              tmp = this.flowParseFunctionTypeParams();
              node.params = tmp.params;
              node.rest = tmp.rest;
              node.this = tmp._this;
              this.expect(11);
              this.expect(19);
              node.returnType = this.flowParseType();
              return this.finishNode(node, "FunctionTypeAnnotation");
            case 10:
              this.next();
              if (!this.match(11) && !this.match(21)) {
                if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                  const token = this.lookahead().type;
                  isGroupedType = token !== 17 && token !== 14;
                } else {
                  isGroupedType = true;
                }
              }
              if (isGroupedType) {
                this.state.noAnonFunctionType = false;
                type = this.flowParseType();
                this.state.noAnonFunctionType = oldNoAnonFunctionType;
                if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
                  this.expect(11);
                  return type;
                } else {
                  this.eat(12);
                }
              }
              if (type) {
                tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
              } else {
                tmp = this.flowParseFunctionTypeParams();
              }
              node.params = tmp.params;
              node.rest = tmp.rest;
              node.this = tmp._this;
              this.expect(11);
              this.expect(19);
              node.returnType = this.flowParseType();
              node.typeParameters = null;
              return this.finishNode(node, "FunctionTypeAnnotation");
            case 131:
              return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
            case 85:
            case 86:
              node.value = this.match(85);
              this.next();
              return this.finishNode(node, "BooleanLiteralTypeAnnotation");
            case 53:
              if (this.state.value === "-") {
                this.next();
                if (this.match(132)) {
                  return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                }
                if (this.match(133)) {
                  return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                }
                throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {
                  at: this.state.startLoc
                });
              }
              this.unexpected();
              return;
            case 132:
              return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
            case 133:
              return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
            case 88:
              this.next();
              return this.finishNode(node, "VoidTypeAnnotation");
            case 84:
              this.next();
              return this.finishNode(node, "NullLiteralTypeAnnotation");
            case 78:
              this.next();
              return this.finishNode(node, "ThisTypeAnnotation");
            case 55:
              this.next();
              return this.finishNode(node, "ExistsTypeAnnotation");
            case 87:
              return this.flowParseTypeofType();
            default:
              if (tokenIsKeyword(this.state.type)) {
                const label = tokenLabelName(this.state.type);
                this.next();
                return super.createIdentifier(node, label);
              } else if (tokenIsIdentifier(this.state.type)) {
                if (this.isContextual(127)) {
                  return this.flowParseInterfaceType();
                }
                return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
              }
          }
          this.unexpected();
        }
        flowParsePostfixType() {
          const startLoc = this.state.startLoc;
          let type = this.flowParsePrimaryType();
          let seenOptionalIndexedAccess = false;
          while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
            const node = this.startNodeAt(startLoc);
            const optional = this.eat(18);
            seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
            this.expect(0);
            if (!optional && this.match(3)) {
              node.elementType = type;
              this.next();
              type = this.finishNode(node, "ArrayTypeAnnotation");
            } else {
              node.objectType = type;
              node.indexType = this.flowParseType();
              this.expect(3);
              if (seenOptionalIndexedAccess) {
                node.optional = optional;
                type = this.finishNode(node, "OptionalIndexedAccessType");
              } else {
                type = this.finishNode(node, "IndexedAccessType");
              }
            }
          }
          return type;
        }
        flowParsePrefixType() {
          const node = this.startNode();
          if (this.eat(17)) {
            node.typeAnnotation = this.flowParsePrefixType();
            return this.finishNode(node, "NullableTypeAnnotation");
          } else {
            return this.flowParsePostfixType();
          }
        }
        flowParseAnonFunctionWithoutParens() {
          const param = this.flowParsePrefixType();
          if (!this.state.noAnonFunctionType && this.eat(19)) {
            const node = this.startNodeAt(param.loc.start);
            node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
            node.rest = null;
            node.this = null;
            node.returnType = this.flowParseType();
            node.typeParameters = null;
            return this.finishNode(node, "FunctionTypeAnnotation");
          }
          return param;
        }
        flowParseIntersectionType() {
          const node = this.startNode();
          this.eat(45);
          const type = this.flowParseAnonFunctionWithoutParens();
          node.types = [type];
          while (this.eat(45)) {
            node.types.push(this.flowParseAnonFunctionWithoutParens());
          }
          return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
        }
        flowParseUnionType() {
          const node = this.startNode();
          this.eat(43);
          const type = this.flowParseIntersectionType();
          node.types = [type];
          while (this.eat(43)) {
            node.types.push(this.flowParseIntersectionType());
          }
          return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
        }
        flowParseType() {
          const oldInType = this.state.inType;
          this.state.inType = true;
          const type = this.flowParseUnionType();
          this.state.inType = oldInType;
          return type;
        }
        flowParseTypeOrImplicitInstantiation() {
          if (this.state.type === 130 && this.state.value === "_") {
            const startLoc = this.state.startLoc;
            const node = this.parseIdentifier();
            return this.flowParseGenericType(startLoc, node);
          } else {
            return this.flowParseType();
          }
        }
        flowParseTypeAnnotation() {
          const node = this.startNode();
          node.typeAnnotation = this.flowParseTypeInitialiser();
          return this.finishNode(node, "TypeAnnotation");
        }
        flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
          const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
          if (this.match(14)) {
            ident.typeAnnotation = this.flowParseTypeAnnotation();
            this.resetEndLocation(ident);
          }
          return ident;
        }
        typeCastToParameter(node) {
          node.expression.typeAnnotation = node.typeAnnotation;
          this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
          return node.expression;
        }
        flowParseVariance() {
          let variance = null;
          if (this.match(53)) {
            variance = this.startNode();
            if (this.state.value === "+") {
              variance.kind = "plus";
            } else {
              variance.kind = "minus";
            }
            this.next();
            return this.finishNode(variance, "Variance");
          }
          return variance;
        }
        parseFunctionBody(node, allowExpressionBody, isMethod = false) {
          if (allowExpressionBody) {
            this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
            return;
          }
          super.parseFunctionBody(node, false, isMethod);
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
          if (this.match(14)) {
            const typeNode = this.startNode();
            [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
            node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
          }
          return super.parseFunctionBodyAndFinish(node, type, isMethod);
        }
        parseStatementLike(flags) {
          if (this.state.strict && this.isContextual(127)) {
            const lookahead = this.lookahead();
            if (tokenIsKeywordOrIdentifier(lookahead.type)) {
              const node = this.startNode();
              this.next();
              return this.flowParseInterface(node);
            }
          } else if (this.shouldParseEnums() && this.isContextual(124)) {
            const node = this.startNode();
            this.next();
            return this.flowParseEnumDeclaration(node);
          }
          const stmt = super.parseStatementLike(flags);
          if (this.flowPragma === void 0 && !this.isValidDirective(stmt)) {
            this.flowPragma = null;
          }
          return stmt;
        }
        parseExpressionStatement(node, expr, decorators) {
          if (expr.type === "Identifier") {
            if (expr.name === "declare") {
              if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
                return this.flowParseDeclare(node);
              }
            } else if (tokenIsIdentifier(this.state.type)) {
              if (expr.name === "interface") {
                return this.flowParseInterface(node);
              } else if (expr.name === "type") {
                return this.flowParseTypeAlias(node);
              } else if (expr.name === "opaque") {
                return this.flowParseOpaqueType(node, false);
              }
            }
          }
          return super.parseExpressionStatement(node, expr, decorators);
        }
        shouldParseExportDeclaration() {
          const {
            type
          } = this.state;
          if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {
            return !this.state.containsEsc;
          }
          return super.shouldParseExportDeclaration();
        }
        isExportDefaultSpecifier() {
          const {
            type
          } = this.state;
          if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {
            return this.state.containsEsc;
          }
          return super.isExportDefaultSpecifier();
        }
        parseExportDefaultExpression() {
          if (this.shouldParseEnums() && this.isContextual(124)) {
            const node = this.startNode();
            this.next();
            return this.flowParseEnumDeclaration(node);
          }
          return super.parseExportDefaultExpression();
        }
        parseConditional(expr, startLoc, refExpressionErrors) {
          if (!this.match(17))
            return expr;
          if (this.state.maybeInArrowParameters) {
            const nextCh = this.lookaheadCharCode();
            if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
              this.setOptionalParametersError(refExpressionErrors);
              return expr;
            }
          }
          this.expect(17);
          const state = this.state.clone();
          const originalNoArrowAt = this.state.noArrowAt;
          const node = this.startNodeAt(startLoc);
          let {
            consequent,
            failed
          } = this.tryParseConditionalConsequent();
          let [valid, invalid] = this.getArrowLikeExpressions(consequent);
          if (failed || invalid.length > 0) {
            const noArrowAt = [...originalNoArrowAt];
            if (invalid.length > 0) {
              this.state = state;
              this.state.noArrowAt = noArrowAt;
              for (let i = 0; i < invalid.length; i++) {
                noArrowAt.push(invalid[i].start);
              }
              ({
                consequent,
                failed
              } = this.tryParseConditionalConsequent());
              [valid, invalid] = this.getArrowLikeExpressions(consequent);
            }
            if (failed && valid.length > 1) {
              this.raise(FlowErrors.AmbiguousConditionalArrow, {
                at: state.startLoc
              });
            }
            if (failed && valid.length === 1) {
              this.state = state;
              noArrowAt.push(valid[0].start);
              this.state.noArrowAt = noArrowAt;
              ({
                consequent,
                failed
              } = this.tryParseConditionalConsequent());
            }
          }
          this.getArrowLikeExpressions(consequent, true);
          this.state.noArrowAt = originalNoArrowAt;
          this.expect(14);
          node.test = expr;
          node.consequent = consequent;
          node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0));
          return this.finishNode(node, "ConditionalExpression");
        }
        tryParseConditionalConsequent() {
          this.state.noArrowParamsConversionAt.push(this.state.start);
          const consequent = this.parseMaybeAssignAllowIn();
          const failed = !this.match(14);
          this.state.noArrowParamsConversionAt.pop();
          return {
            consequent,
            failed
          };
        }
        getArrowLikeExpressions(node, disallowInvalid) {
          const stack = [node];
          const arrows = [];
          while (stack.length !== 0) {
            const node2 = stack.pop();
            if (node2.type === "ArrowFunctionExpression") {
              if (node2.typeParameters || !node2.returnType) {
                this.finishArrowValidation(node2);
              } else {
                arrows.push(node2);
              }
              stack.push(node2.body);
            } else if (node2.type === "ConditionalExpression") {
              stack.push(node2.consequent);
              stack.push(node2.alternate);
            }
          }
          if (disallowInvalid) {
            arrows.forEach((node2) => this.finishArrowValidation(node2));
            return [arrows, []];
          }
          return partition(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
        }
        finishArrowValidation(node) {
          var _node$extra;
          this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
          this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
          super.checkParams(node, false, true);
          this.scope.exit();
        }
        forwardNoArrowParamsConversionAt(node, parse2) {
          let result;
          if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            result = parse2();
            this.state.noArrowParamsConversionAt.pop();
          } else {
            result = parse2();
          }
          return result;
        }
        parseParenItem(node, startLoc) {
          node = super.parseParenItem(node, startLoc);
          if (this.eat(17)) {
            node.optional = true;
            this.resetEndLocation(node);
          }
          if (this.match(14)) {
            const typeCastNode = this.startNodeAt(startLoc);
            typeCastNode.expression = node;
            typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
            return this.finishNode(typeCastNode, "TypeCastExpression");
          }
          return node;
        }
        assertModuleNodeAllowed(node) {
          if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
            return;
          }
          super.assertModuleNodeAllowed(node);
        }
        parseExportDeclaration(node) {
          if (this.isContextual(128)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            this.next();
            if (this.match(5)) {
              node.specifiers = this.parseExportSpecifiers(true);
              super.parseExportFrom(node);
              return null;
            } else {
              return this.flowParseTypeAlias(declarationNode);
            }
          } else if (this.isContextual(129)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            this.next();
            return this.flowParseOpaqueType(declarationNode, false);
          } else if (this.isContextual(127)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            this.next();
            return this.flowParseInterface(declarationNode);
          } else if (this.shouldParseEnums() && this.isContextual(124)) {
            node.exportKind = "value";
            const declarationNode = this.startNode();
            this.next();
            return this.flowParseEnumDeclaration(declarationNode);
          } else {
            return super.parseExportDeclaration(node);
          }
        }
        eatExportStar(node) {
          if (super.eatExportStar(node))
            return true;
          if (this.isContextual(128) && this.lookahead().type === 55) {
            node.exportKind = "type";
            this.next();
            this.next();
            return true;
          }
          return false;
        }
        maybeParseExportNamespaceSpecifier(node) {
          const {
            startLoc
          } = this.state;
          const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
          if (hasNamespace && node.exportKind === "type") {
            this.unexpected(startLoc);
          }
          return hasNamespace;
        }
        parseClassId(node, isStatement, optionalId) {
          super.parseClassId(node, isStatement, optionalId);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          }
        }
        parseClassMember(classBody, member, state) {
          const {
            startLoc
          } = this.state;
          if (this.isContextual(123)) {
            if (super.parseClassMemberFromModifier(classBody, member)) {
              return;
            }
            member.declare = true;
          }
          super.parseClassMember(classBody, member, state);
          if (member.declare) {
            if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
              this.raise(FlowErrors.DeclareClassElement, {
                at: startLoc
              });
            } else if (member.value) {
              this.raise(FlowErrors.DeclareClassFieldInitializer, {
                at: member.value
              });
            }
          }
        }
        isIterator(word) {
          return word === "iterator" || word === "asyncIterator";
        }
        readIterator() {
          const word = super.readWord1();
          const fullWord = "@@" + word;
          if (!this.isIterator(word) || !this.state.inType) {
            this.raise(Errors.InvalidIdentifier, {
              at: this.state.curPosition(),
              identifierName: fullWord
            });
          }
          this.finishToken(130, fullWord);
        }
        getTokenFromCode(code) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (code === 123 && next === 124) {
            this.finishOp(6, 2);
          } else if (this.state.inType && (code === 62 || code === 60)) {
            this.finishOp(code === 62 ? 48 : 47, 1);
          } else if (this.state.inType && code === 63) {
            if (next === 46) {
              this.finishOp(18, 2);
            } else {
              this.finishOp(17, 1);
            }
          } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {
            this.state.pos += 2;
            this.readIterator();
          } else {
            super.getTokenFromCode(code);
          }
        }
        isAssignable(node, isBinding) {
          if (node.type === "TypeCastExpression") {
            return this.isAssignable(node.expression, isBinding);
          } else {
            return super.isAssignable(node, isBinding);
          }
        }
        toAssignable(node, isLHS = false) {
          if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") {
            node.left = this.typeCastToParameter(node.left);
          }
          super.toAssignable(node, isLHS);
        }
        toAssignableList(exprList, trailingCommaLoc, isLHS) {
          for (let i = 0; i < exprList.length; i++) {
            const expr = exprList[i];
            if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
              exprList[i] = this.typeCastToParameter(expr);
            }
          }
          super.toAssignableList(exprList, trailingCommaLoc, isLHS);
        }
        toReferencedList(exprList, isParenthesizedExpr) {
          for (let i = 0; i < exprList.length; i++) {
            var _expr$extra;
            const expr = exprList[i];
            if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
              this.raise(FlowErrors.TypeCastInPattern, {
                at: expr.typeAnnotation
              });
            }
          }
          return exprList;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
          const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
          if (canBePattern && !this.state.maybeInArrowParameters) {
            this.toReferencedList(node.elements);
          }
          return node;
        }
        isValidLVal(type, isParenthesized, binding) {
          return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);
        }
        parseClassProperty(node) {
          if (this.match(14)) {
            node.typeAnnotation = this.flowParseTypeAnnotation();
          }
          return super.parseClassProperty(node);
        }
        parseClassPrivateProperty(node) {
          if (this.match(14)) {
            node.typeAnnotation = this.flowParseTypeAnnotation();
          }
          return super.parseClassPrivateProperty(node);
        }
        isClassMethod() {
          return this.match(47) || super.isClassMethod();
        }
        isClassProperty() {
          return this.match(14) || super.isClassProperty();
        }
        isNonstaticConstructor(method) {
          return !this.match(14) && super.isNonstaticConstructor(method);
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          if (method.variance) {
            this.unexpected(method.variance.loc.start);
          }
          delete method.variance;
          if (this.match(47)) {
            method.typeParameters = this.flowParseTypeParameterDeclaration();
          }
          super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
          if (method.params && isConstructor) {
            const params = method.params;
            if (params.length > 0 && this.isThisParam(params[0])) {
              this.raise(FlowErrors.ThisParamBannedInConstructor, {
                at: method
              });
            }
          } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
            const params = method.value.params;
            if (params.length > 0 && this.isThisParam(params[0])) {
              this.raise(FlowErrors.ThisParamBannedInConstructor, {
                at: method
              });
            }
          }
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
          if (method.variance) {
            this.unexpected(method.variance.loc.start);
          }
          delete method.variance;
          if (this.match(47)) {
            method.typeParameters = this.flowParseTypeParameterDeclaration();
          }
          super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
        }
        parseClassSuper(node) {
          super.parseClassSuper(node);
          if (node.superClass && this.match(47)) {
            node.superTypeParameters = this.flowParseTypeParameterInstantiation();
          }
          if (this.isContextual(111)) {
            this.next();
            const implemented = node.implements = [];
            do {
              const node2 = this.startNode();
              node2.id = this.flowParseRestrictedIdentifier(true);
              if (this.match(47)) {
                node2.typeParameters = this.flowParseTypeParameterInstantiation();
              } else {
                node2.typeParameters = null;
              }
              implemented.push(this.finishNode(node2, "ClassImplements"));
            } while (this.eat(12));
          }
        }
        checkGetterSetterParams(method) {
          super.checkGetterSetterParams(method);
          const params = this.getObjectOrClassMethodParams(method);
          if (params.length > 0) {
            const param = params[0];
            if (this.isThisParam(param) && method.kind === "get") {
              this.raise(FlowErrors.GetterMayNotHaveThisParam, {
                at: param
              });
            } else if (this.isThisParam(param)) {
              this.raise(FlowErrors.SetterMayNotHaveThisParam, {
                at: param
              });
            }
          }
        }
        parsePropertyNamePrefixOperator(node) {
          node.variance = this.flowParseVariance();
        }
        parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
          if (prop.variance) {
            this.unexpected(prop.variance.loc.start);
          }
          delete prop.variance;
          let typeParameters;
          if (this.match(47) && !isAccessor) {
            typeParameters = this.flowParseTypeParameterDeclaration();
            if (!this.match(10))
              this.unexpected();
          }
          const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
          if (typeParameters) {
            (result.value || result).typeParameters = typeParameters;
          }
          return result;
        }
        parseAssignableListItemTypes(param) {
          if (this.eat(17)) {
            if (param.type !== "Identifier") {
              this.raise(FlowErrors.PatternIsOptional, {
                at: param
              });
            }
            if (this.isThisParam(param)) {
              this.raise(FlowErrors.ThisParamMayNotBeOptional, {
                at: param
              });
            }
            param.optional = true;
          }
          if (this.match(14)) {
            param.typeAnnotation = this.flowParseTypeAnnotation();
          } else if (this.isThisParam(param)) {
            this.raise(FlowErrors.ThisParamAnnotationRequired, {
              at: param
            });
          }
          if (this.match(29) && this.isThisParam(param)) {
            this.raise(FlowErrors.ThisParamNoDefault, {
              at: param
            });
          }
          this.resetEndLocation(param);
          return param;
        }
        parseMaybeDefault(startLoc, left) {
          const node = super.parseMaybeDefault(startLoc, left);
          if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
            this.raise(FlowErrors.TypeBeforeInitializer, {
              at: node.typeAnnotation
            });
          }
          return node;
        }
        checkImportReflection(node) {
          super.checkImportReflection(node);
          if (node.module && node.importKind !== "value") {
            this.raise(FlowErrors.ImportReflectionHasImportType, {
              at: node.specifiers[0].loc.start
            });
          }
        }
        parseImportSpecifierLocal(node, specifier, type) {
          specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
          node.specifiers.push(this.finishImportSpecifier(specifier, type));
        }
        isPotentialImportPhase(isExport) {
          if (super.isPotentialImportPhase(isExport))
            return true;
          if (this.isContextual(128)) {
            if (!isExport)
              return true;
            const ch = this.lookaheadCharCode();
            return ch === 123 || ch === 42;
          }
          return !isExport && this.isContextual(87);
        }
        applyImportPhase(node, isExport, phase, loc) {
          super.applyImportPhase(node, isExport, phase, loc);
          if (isExport) {
            if (!phase && this.match(65)) {
              return;
            }
            node.exportKind = phase === "type" ? phase : "value";
          } else {
            if (phase === "type" && this.match(55))
              this.unexpected();
            node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
          }
        }
        parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
          const firstIdent = specifier.imported;
          let specifierTypeKind = null;
          if (firstIdent.type === "Identifier") {
            if (firstIdent.name === "type") {
              specifierTypeKind = "type";
            } else if (firstIdent.name === "typeof") {
              specifierTypeKind = "typeof";
            }
          }
          let isBinding = false;
          if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
            const as_ident = this.parseIdentifier(true);
            if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
              specifier.imported = as_ident;
              specifier.importKind = specifierTypeKind;
              specifier.local = cloneIdentifier(as_ident);
            } else {
              specifier.imported = firstIdent;
              specifier.importKind = null;
              specifier.local = this.parseIdentifier();
            }
          } else {
            if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
              specifier.imported = this.parseIdentifier(true);
              specifier.importKind = specifierTypeKind;
            } else {
              if (importedIsString) {
                throw this.raise(Errors.ImportBindingIsString, {
                  at: specifier,
                  importName: firstIdent.value
                });
              }
              specifier.imported = firstIdent;
              specifier.importKind = null;
            }
            if (this.eatContextual(93)) {
              specifier.local = this.parseIdentifier();
            } else {
              isBinding = true;
              specifier.local = cloneIdentifier(specifier.imported);
            }
          }
          const specifierIsTypeImport = hasTypeImportKind(specifier);
          if (isInTypeOnlyImport && specifierIsTypeImport) {
            this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {
              at: specifier
            });
          }
          if (isInTypeOnlyImport || specifierIsTypeImport) {
            this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
          }
          if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
            this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
          }
          return this.finishImportSpecifier(specifier, "ImportSpecifier");
        }
        parseBindingAtom() {
          switch (this.state.type) {
            case 78:
              return this.parseIdentifier(true);
            default:
              return super.parseBindingAtom();
          }
        }
        parseFunctionParams(node, isConstructor) {
          const kind = node.kind;
          if (kind !== "get" && kind !== "set" && this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
          }
          super.parseFunctionParams(node, isConstructor);
        }
        parseVarId(decl, kind) {
          super.parseVarId(decl, kind);
          if (this.match(14)) {
            decl.id.typeAnnotation = this.flowParseTypeAnnotation();
            this.resetEndLocation(decl.id);
          }
        }
        parseAsyncArrowFromCallExpression(node, call) {
          if (this.match(14)) {
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = true;
            node.returnType = this.flowParseTypeAnnotation();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
          }
          return super.parseAsyncArrowFromCallExpression(node, call);
        }
        shouldParseAsyncArrow() {
          return this.match(14) || super.shouldParseAsyncArrow();
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse) {
          var _jsx;
          let state = null;
          let jsx2;
          if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
            state = this.state.clone();
            jsx2 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
            if (!jsx2.error)
              return jsx2.node;
            const {
              context
            } = this.state;
            const currentContext = context[context.length - 1];
            if (currentContext === types.j_oTag || currentContext === types.j_expr) {
              context.pop();
            }
          }
          if ((_jsx = jsx2) != null && _jsx.error || this.match(47)) {
            var _jsx2, _jsx3;
            state = state || this.state.clone();
            let typeParameters;
            const arrow = this.tryParse((abort) => {
              var _arrowExpression$extr;
              typeParameters = this.flowParseTypeParameterDeclaration();
              const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                this.resetStartLocationFromNode(result, typeParameters);
                return result;
              });
              if ((_arrowExpression$extr = arrowExpression2.extra) != null && _arrowExpression$extr.parenthesized)
                abort();
              const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
              if (expr.type !== "ArrowFunctionExpression")
                abort();
              expr.typeParameters = typeParameters;
              this.resetStartLocationFromNode(expr, typeParameters);
              return arrowExpression2;
            }, state);
            let arrowExpression = null;
            if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
              if (!arrow.error && !arrow.aborted) {
                if (arrow.node.async) {
                  this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {
                    at: typeParameters
                  });
                }
                return arrow.node;
              }
              arrowExpression = arrow.node;
            }
            if ((_jsx2 = jsx2) != null && _jsx2.node) {
              this.state = jsx2.failState;
              return jsx2.node;
            }
            if (arrowExpression) {
              this.state = arrow.failState;
              return arrowExpression;
            }
            if ((_jsx3 = jsx2) != null && _jsx3.thrown)
              throw jsx2.error;
            if (arrow.thrown)
              throw arrow.error;
            throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {
              at: typeParameters
            });
          }
          return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
        }
        parseArrow(node) {
          if (this.match(14)) {
            const result = this.tryParse(() => {
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true;
              const typeNode = this.startNode();
              [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
              this.state.noAnonFunctionType = oldNoAnonFunctionType;
              if (this.canInsertSemicolon())
                this.unexpected();
              if (!this.match(19))
                this.unexpected();
              return typeNode;
            });
            if (result.thrown)
              return null;
            if (result.error)
              this.state = result.failState;
            node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
          }
          return super.parseArrow(node);
        }
        shouldParseArrow(params) {
          return this.match(14) || super.shouldParseArrow(params);
        }
        setArrowFunctionParameters(node, params) {
          if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
            node.params = params;
          } else {
            super.setArrowFunctionParameters(node, params);
          }
        }
        checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
          if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
            return;
          }
          for (let i = 0; i < node.params.length; i++) {
            if (this.isThisParam(node.params[i]) && i > 0) {
              this.raise(FlowErrors.ThisParamMustBeFirst, {
                at: node.params[i]
              });
            }
          }
          super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
        }
        parseParenAndDistinguishExpression(canBeArrow) {
          return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
        }
        parseSubscripts(base, startLoc, noCalls) {
          if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {
            this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            node.arguments = super.parseCallExpressionArguments(11, false);
            base = this.finishNode(node, "CallExpression");
          } else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {
            const state = this.state.clone();
            const arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
            if (!arrow.error && !arrow.aborted)
              return arrow.node;
            const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
            if (result.node && !result.error)
              return result.node;
            if (arrow.node) {
              this.state = arrow.failState;
              return arrow.node;
            }
            if (result.node) {
              this.state = result.failState;
              return result.node;
            }
            throw arrow.error || result.error;
          }
          return super.parseSubscripts(base, startLoc, noCalls);
        }
        parseSubscript(base, startLoc, noCalls, subscriptState) {
          if (this.match(18) && this.isLookaheadToken_lt()) {
            subscriptState.optionalChainMember = true;
            if (noCalls) {
              subscriptState.stop = true;
              return base;
            }
            this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            node.typeArguments = this.flowParseTypeParameterInstantiation();
            this.expect(10);
            node.arguments = this.parseCallExpressionArguments(11, false);
            node.optional = true;
            return this.finishCallExpression(node, true);
          } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            const result = this.tryParse(() => {
              node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
              this.expect(10);
              node.arguments = super.parseCallExpressionArguments(11, false);
              if (subscriptState.optionalChainMember) {
                node.optional = false;
              }
              return this.finishCallExpression(node, subscriptState.optionalChainMember);
            });
            if (result.node) {
              if (result.error)
                this.state = result.failState;
              return result.node;
            }
          }
          return super.parseSubscript(base, startLoc, noCalls, subscriptState);
        }
        parseNewCallee(node) {
          super.parseNewCallee(node);
          let targs = null;
          if (this.shouldParseTypes() && this.match(47)) {
            targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
          }
          node.typeArguments = targs;
        }
        parseAsyncArrowWithTypeParameters(startLoc) {
          const node = this.startNodeAt(startLoc);
          this.parseFunctionParams(node, false);
          if (!this.parseArrow(node))
            return;
          return super.parseArrowExpression(node, void 0, true);
        }
        readToken_mult_modulo(code) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (code === 42 && next === 47 && this.state.hasFlowComment) {
            this.state.hasFlowComment = false;
            this.state.pos += 2;
            this.nextToken();
            return;
          }
          super.readToken_mult_modulo(code);
        }
        readToken_pipe_amp(code) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (code === 124 && next === 125) {
            this.finishOp(9, 2);
            return;
          }
          super.readToken_pipe_amp(code);
        }
        parseTopLevel(file, program) {
          const fileNode = super.parseTopLevel(file, program);
          if (this.state.hasFlowComment) {
            this.raise(FlowErrors.UnterminatedFlowComment, {
              at: this.state.curPosition()
            });
          }
          return fileNode;
        }
        skipBlockComment() {
          if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
            if (this.state.hasFlowComment) {
              throw this.raise(FlowErrors.NestedFlowComment, {
                at: this.state.startLoc
              });
            }
            this.hasFlowCommentCompletion();
            const commentSkip = this.skipFlowComment();
            if (commentSkip) {
              this.state.pos += commentSkip;
              this.state.hasFlowComment = true;
            }
            return;
          }
          return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
        }
        skipFlowComment() {
          const {
            pos
          } = this.state;
          let shiftToFirstNonWhiteSpace = 2;
          while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
            shiftToFirstNonWhiteSpace++;
          }
          const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
          const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
          if (ch2 === 58 && ch3 === 58) {
            return shiftToFirstNonWhiteSpace + 2;
          }
          if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
            return shiftToFirstNonWhiteSpace + 12;
          }
          if (ch2 === 58 && ch3 !== 58) {
            return shiftToFirstNonWhiteSpace;
          }
          return false;
        }
        hasFlowCommentCompletion() {
          const end = this.input.indexOf("*/", this.state.pos);
          if (end === -1) {
            throw this.raise(Errors.UnterminatedComment, {
              at: this.state.curPosition()
            });
          }
        }
        flowEnumErrorBooleanMemberNotInitialized(loc, {
          enumName,
          memberName
        }) {
          this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {
            at: loc,
            memberName,
            enumName
          });
        }
        flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
          return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({
            at: loc
          }, enumContext));
        }
        flowEnumErrorNumberMemberNotInitialized(loc, {
          enumName,
          memberName
        }) {
          this.raise(FlowErrors.EnumNumberMemberNotInitialized, {
            at: loc,
            enumName,
            memberName
          });
        }
        flowEnumErrorStringMemberInconsistentlyInitailized(node, {
          enumName
        }) {
          this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {
            at: node,
            enumName
          });
        }
        flowEnumMemberInit() {
          const startLoc = this.state.startLoc;
          const endOfInit = () => this.match(12) || this.match(8);
          switch (this.state.type) {
            case 132: {
              const literal = this.parseNumericLiteral(this.state.value);
              if (endOfInit()) {
                return {
                  type: "number",
                  loc: literal.loc.start,
                  value: literal
                };
              }
              return {
                type: "invalid",
                loc: startLoc
              };
            }
            case 131: {
              const literal = this.parseStringLiteral(this.state.value);
              if (endOfInit()) {
                return {
                  type: "string",
                  loc: literal.loc.start,
                  value: literal
                };
              }
              return {
                type: "invalid",
                loc: startLoc
              };
            }
            case 85:
            case 86: {
              const literal = this.parseBooleanLiteral(this.match(85));
              if (endOfInit()) {
                return {
                  type: "boolean",
                  loc: literal.loc.start,
                  value: literal
                };
              }
              return {
                type: "invalid",
                loc: startLoc
              };
            }
            default:
              return {
                type: "invalid",
                loc: startLoc
              };
          }
        }
        flowEnumMemberRaw() {
          const loc = this.state.startLoc;
          const id = this.parseIdentifier(true);
          const init = this.eat(29) ? this.flowEnumMemberInit() : {
            type: "none",
            loc
          };
          return {
            id,
            init
          };
        }
        flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
          const {
            explicitType
          } = context;
          if (explicitType === null) {
            return;
          }
          if (explicitType !== expectedType) {
            this.flowEnumErrorInvalidMemberInitializer(loc, context);
          }
        }
        flowEnumMembers({
          enumName,
          explicitType
        }) {
          const seenNames = /* @__PURE__ */ new Set();
          const members = {
            booleanMembers: [],
            numberMembers: [],
            stringMembers: [],
            defaultedMembers: []
          };
          let hasUnknownMembers = false;
          while (!this.match(8)) {
            if (this.eat(21)) {
              hasUnknownMembers = true;
              break;
            }
            const memberNode = this.startNode();
            const {
              id,
              init
            } = this.flowEnumMemberRaw();
            const memberName = id.name;
            if (memberName === "") {
              continue;
            }
            if (/^[a-z]/.test(memberName)) {
              this.raise(FlowErrors.EnumInvalidMemberName, {
                at: id,
                memberName,
                suggestion: memberName[0].toUpperCase() + memberName.slice(1),
                enumName
              });
            }
            if (seenNames.has(memberName)) {
              this.raise(FlowErrors.EnumDuplicateMemberName, {
                at: id,
                memberName,
                enumName
              });
            }
            seenNames.add(memberName);
            const context = {
              enumName,
              explicitType,
              memberName
            };
            memberNode.id = id;
            switch (init.type) {
              case "boolean": {
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean");
                memberNode.init = init.value;
                members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                break;
              }
              case "number": {
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number");
                memberNode.init = init.value;
                members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                break;
              }
              case "string": {
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string");
                memberNode.init = init.value;
                members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                break;
              }
              case "invalid": {
                throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
              }
              case "none": {
                switch (explicitType) {
                  case "boolean":
                    this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                    break;
                  case "number":
                    this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                    break;
                  default:
                    members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                }
              }
            }
            if (!this.match(8)) {
              this.expect(12);
            }
          }
          return {
            members,
            hasUnknownMembers
          };
        }
        flowEnumStringMembers(initializedMembers, defaultedMembers, {
          enumName
        }) {
          if (initializedMembers.length === 0) {
            return defaultedMembers;
          } else if (defaultedMembers.length === 0) {
            return initializedMembers;
          } else if (defaultedMembers.length > initializedMembers.length) {
            for (const member of initializedMembers) {
              this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
                enumName
              });
            }
            return defaultedMembers;
          } else {
            for (const member of defaultedMembers) {
              this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
                enumName
              });
            }
            return initializedMembers;
          }
        }
        flowEnumParseExplicitType({
          enumName
        }) {
          if (!this.eatContextual(101))
            return null;
          if (!tokenIsIdentifier(this.state.type)) {
            throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {
              at: this.state.startLoc,
              enumName
            });
          }
          const {
            value
          } = this.state;
          this.next();
          if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
            this.raise(FlowErrors.EnumInvalidExplicitType, {
              at: this.state.startLoc,
              enumName,
              invalidEnumType: value
            });
          }
          return value;
        }
        flowEnumBody(node, id) {
          const enumName = id.name;
          const nameLoc = id.loc.start;
          const explicitType = this.flowEnumParseExplicitType({
            enumName
          });
          this.expect(5);
          const {
            members,
            hasUnknownMembers
          } = this.flowEnumMembers({
            enumName,
            explicitType
          });
          node.hasUnknownMembers = hasUnknownMembers;
          switch (explicitType) {
            case "boolean":
              node.explicitType = true;
              node.members = members.booleanMembers;
              this.expect(8);
              return this.finishNode(node, "EnumBooleanBody");
            case "number":
              node.explicitType = true;
              node.members = members.numberMembers;
              this.expect(8);
              return this.finishNode(node, "EnumNumberBody");
            case "string":
              node.explicitType = true;
              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                enumName
              });
              this.expect(8);
              return this.finishNode(node, "EnumStringBody");
            case "symbol":
              node.members = members.defaultedMembers;
              this.expect(8);
              return this.finishNode(node, "EnumSymbolBody");
            default: {
              const empty = () => {
                node.members = [];
                this.expect(8);
                return this.finishNode(node, "EnumStringBody");
              };
              node.explicitType = false;
              const boolsLen = members.booleanMembers.length;
              const numsLen = members.numberMembers.length;
              const strsLen = members.stringMembers.length;
              const defaultedLen = members.defaultedMembers.length;
              if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
                return empty();
              } else if (!boolsLen && !numsLen) {
                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                  enumName
                });
                this.expect(8);
                return this.finishNode(node, "EnumStringBody");
              } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                for (const member of members.defaultedMembers) {
                  this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                    enumName,
                    memberName: member.id.name
                  });
                }
                node.members = members.booleanMembers;
                this.expect(8);
                return this.finishNode(node, "EnumBooleanBody");
              } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                for (const member of members.defaultedMembers) {
                  this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                    enumName,
                    memberName: member.id.name
                  });
                }
                node.members = members.numberMembers;
                this.expect(8);
                return this.finishNode(node, "EnumNumberBody");
              } else {
                this.raise(FlowErrors.EnumInconsistentMemberValues, {
                  at: nameLoc,
                  enumName
                });
                return empty();
              }
            }
          }
        }
        flowParseEnumDeclaration(node) {
          const id = this.parseIdentifier();
          node.id = id;
          node.body = this.flowEnumBody(this.startNode(), id);
          return this.finishNode(node, "EnumDeclaration");
        }
        isLookaheadToken_lt() {
          const next = this.nextTokenStart();
          if (this.input.charCodeAt(next) === 60) {
            const afterNext = this.input.charCodeAt(next + 1);
            return afterNext !== 60 && afterNext !== 61;
          }
          return false;
        }
        maybeUnwrapTypeCastExpression(node) {
          return node.type === "TypeCastExpression" ? node.expression : node;
        }
      };
      var entities = {
        __proto__: null,
        quot: '"',
        amp: "&",
        apos: "'",
        lt: "<",
        gt: ">",
        nbsp: "\xA0",
        iexcl: "\xA1",
        cent: "\xA2",
        pound: "\xA3",
        curren: "\xA4",
        yen: "\xA5",
        brvbar: "\xA6",
        sect: "\xA7",
        uml: "\xA8",
        copy: "\xA9",
        ordf: "\xAA",
        laquo: "\xAB",
        not: "\xAC",
        shy: "\xAD",
        reg: "\xAE",
        macr: "\xAF",
        deg: "\xB0",
        plusmn: "\xB1",
        sup2: "\xB2",
        sup3: "\xB3",
        acute: "\xB4",
        micro: "\xB5",
        para: "\xB6",
        middot: "\xB7",
        cedil: "\xB8",
        sup1: "\xB9",
        ordm: "\xBA",
        raquo: "\xBB",
        frac14: "\xBC",
        frac12: "\xBD",
        frac34: "\xBE",
        iquest: "\xBF",
        Agrave: "\xC0",
        Aacute: "\xC1",
        Acirc: "\xC2",
        Atilde: "\xC3",
        Auml: "\xC4",
        Aring: "\xC5",
        AElig: "\xC6",
        Ccedil: "\xC7",
        Egrave: "\xC8",
        Eacute: "\xC9",
        Ecirc: "\xCA",
        Euml: "\xCB",
        Igrave: "\xCC",
        Iacute: "\xCD",
        Icirc: "\xCE",
        Iuml: "\xCF",
        ETH: "\xD0",
        Ntilde: "\xD1",
        Ograve: "\xD2",
        Oacute: "\xD3",
        Ocirc: "\xD4",
        Otilde: "\xD5",
        Ouml: "\xD6",
        times: "\xD7",
        Oslash: "\xD8",
        Ugrave: "\xD9",
        Uacute: "\xDA",
        Ucirc: "\xDB",
        Uuml: "\xDC",
        Yacute: "\xDD",
        THORN: "\xDE",
        szlig: "\xDF",
        agrave: "\xE0",
        aacute: "\xE1",
        acirc: "\xE2",
        atilde: "\xE3",
        auml: "\xE4",
        aring: "\xE5",
        aelig: "\xE6",
        ccedil: "\xE7",
        egrave: "\xE8",
        eacute: "\xE9",
        ecirc: "\xEA",
        euml: "\xEB",
        igrave: "\xEC",
        iacute: "\xED",
        icirc: "\xEE",
        iuml: "\xEF",
        eth: "\xF0",
        ntilde: "\xF1",
        ograve: "\xF2",
        oacute: "\xF3",
        ocirc: "\xF4",
        otilde: "\xF5",
        ouml: "\xF6",
        divide: "\xF7",
        oslash: "\xF8",
        ugrave: "\xF9",
        uacute: "\xFA",
        ucirc: "\xFB",
        uuml: "\xFC",
        yacute: "\xFD",
        thorn: "\xFE",
        yuml: "\xFF",
        OElig: "\u0152",
        oelig: "\u0153",
        Scaron: "\u0160",
        scaron: "\u0161",
        Yuml: "\u0178",
        fnof: "\u0192",
        circ: "\u02C6",
        tilde: "\u02DC",
        Alpha: "\u0391",
        Beta: "\u0392",
        Gamma: "\u0393",
        Delta: "\u0394",
        Epsilon: "\u0395",
        Zeta: "\u0396",
        Eta: "\u0397",
        Theta: "\u0398",
        Iota: "\u0399",
        Kappa: "\u039A",
        Lambda: "\u039B",
        Mu: "\u039C",
        Nu: "\u039D",
        Xi: "\u039E",
        Omicron: "\u039F",
        Pi: "\u03A0",
        Rho: "\u03A1",
        Sigma: "\u03A3",
        Tau: "\u03A4",
        Upsilon: "\u03A5",
        Phi: "\u03A6",
        Chi: "\u03A7",
        Psi: "\u03A8",
        Omega: "\u03A9",
        alpha: "\u03B1",
        beta: "\u03B2",
        gamma: "\u03B3",
        delta: "\u03B4",
        epsilon: "\u03B5",
        zeta: "\u03B6",
        eta: "\u03B7",
        theta: "\u03B8",
        iota: "\u03B9",
        kappa: "\u03BA",
        lambda: "\u03BB",
        mu: "\u03BC",
        nu: "\u03BD",
        xi: "\u03BE",
        omicron: "\u03BF",
        pi: "\u03C0",
        rho: "\u03C1",
        sigmaf: "\u03C2",
        sigma: "\u03C3",
        tau: "\u03C4",
        upsilon: "\u03C5",
        phi: "\u03C6",
        chi: "\u03C7",
        psi: "\u03C8",
        omega: "\u03C9",
        thetasym: "\u03D1",
        upsih: "\u03D2",
        piv: "\u03D6",
        ensp: "\u2002",
        emsp: "\u2003",
        thinsp: "\u2009",
        zwnj: "\u200C",
        zwj: "\u200D",
        lrm: "\u200E",
        rlm: "\u200F",
        ndash: "\u2013",
        mdash: "\u2014",
        lsquo: "\u2018",
        rsquo: "\u2019",
        sbquo: "\u201A",
        ldquo: "\u201C",
        rdquo: "\u201D",
        bdquo: "\u201E",
        dagger: "\u2020",
        Dagger: "\u2021",
        bull: "\u2022",
        hellip: "\u2026",
        permil: "\u2030",
        prime: "\u2032",
        Prime: "\u2033",
        lsaquo: "\u2039",
        rsaquo: "\u203A",
        oline: "\u203E",
        frasl: "\u2044",
        euro: "\u20AC",
        image: "\u2111",
        weierp: "\u2118",
        real: "\u211C",
        trade: "\u2122",
        alefsym: "\u2135",
        larr: "\u2190",
        uarr: "\u2191",
        rarr: "\u2192",
        darr: "\u2193",
        harr: "\u2194",
        crarr: "\u21B5",
        lArr: "\u21D0",
        uArr: "\u21D1",
        rArr: "\u21D2",
        dArr: "\u21D3",
        hArr: "\u21D4",
        forall: "\u2200",
        part: "\u2202",
        exist: "\u2203",
        empty: "\u2205",
        nabla: "\u2207",
        isin: "\u2208",
        notin: "\u2209",
        ni: "\u220B",
        prod: "\u220F",
        sum: "\u2211",
        minus: "\u2212",
        lowast: "\u2217",
        radic: "\u221A",
        prop: "\u221D",
        infin: "\u221E",
        ang: "\u2220",
        and: "\u2227",
        or: "\u2228",
        cap: "\u2229",
        cup: "\u222A",
        int: "\u222B",
        there4: "\u2234",
        sim: "\u223C",
        cong: "\u2245",
        asymp: "\u2248",
        ne: "\u2260",
        equiv: "\u2261",
        le: "\u2264",
        ge: "\u2265",
        sub: "\u2282",
        sup: "\u2283",
        nsub: "\u2284",
        sube: "\u2286",
        supe: "\u2287",
        oplus: "\u2295",
        otimes: "\u2297",
        perp: "\u22A5",
        sdot: "\u22C5",
        lceil: "\u2308",
        rceil: "\u2309",
        lfloor: "\u230A",
        rfloor: "\u230B",
        lang: "\u2329",
        rang: "\u232A",
        loz: "\u25CA",
        spades: "\u2660",
        clubs: "\u2663",
        hearts: "\u2665",
        diams: "\u2666"
      };
      var JsxErrors = ParseErrorEnum`jsx`({
        AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
        MissingClosingTagElement: ({
          openingTagName
        }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
        MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
        UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
        UnexpectedToken: ({
          unexpected,
          HTMLEntity
        }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
        UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
        UnterminatedJsxContent: "Unterminated JSX contents.",
        UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
      });
      function isFragment(object) {
        return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
      }
      function getQualifiedJSXName(object) {
        if (object.type === "JSXIdentifier") {
          return object.name;
        }
        if (object.type === "JSXNamespacedName") {
          return object.namespace.name + ":" + object.name.name;
        }
        if (object.type === "JSXMemberExpression") {
          return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
        }
        throw new Error("Node had unexpected type: " + object.type);
      }
      var jsx = (superClass) => class JSXParserMixin extends superClass {
        jsxReadToken() {
          let out = "";
          let chunkStart = this.state.pos;
          for (; ; ) {
            if (this.state.pos >= this.length) {
              throw this.raise(JsxErrors.UnterminatedJsxContent, {
                at: this.state.startLoc
              });
            }
            const ch = this.input.charCodeAt(this.state.pos);
            switch (ch) {
              case 60:
              case 123:
                if (this.state.pos === this.state.start) {
                  if (ch === 60 && this.state.canStartJSXElement) {
                    ++this.state.pos;
                    this.finishToken(140);
                  } else {
                    super.getTokenFromCode(ch);
                  }
                  return;
                }
                out += this.input.slice(chunkStart, this.state.pos);
                this.finishToken(139, out);
                return;
              case 38:
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadEntity();
                chunkStart = this.state.pos;
                break;
              case 62:
              case 125:
              default:
                if (isNewLine(ch)) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.jsxReadNewLine(true);
                  chunkStart = this.state.pos;
                } else {
                  ++this.state.pos;
                }
            }
          }
        }
        jsxReadNewLine(normalizeCRLF) {
          const ch = this.input.charCodeAt(this.state.pos);
          let out;
          ++this.state.pos;
          if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
            ++this.state.pos;
            out = normalizeCRLF ? "\n" : "\r\n";
          } else {
            out = String.fromCharCode(ch);
          }
          ++this.state.curLine;
          this.state.lineStart = this.state.pos;
          return out;
        }
        jsxReadString(quote) {
          let out = "";
          let chunkStart = ++this.state.pos;
          for (; ; ) {
            if (this.state.pos >= this.length) {
              throw this.raise(Errors.UnterminatedString, {
                at: this.state.startLoc
              });
            }
            const ch = this.input.charCodeAt(this.state.pos);
            if (ch === quote)
              break;
            if (ch === 38) {
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadEntity();
              chunkStart = this.state.pos;
            } else if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadNewLine(false);
              chunkStart = this.state.pos;
            } else {
              ++this.state.pos;
            }
          }
          out += this.input.slice(chunkStart, this.state.pos++);
          this.finishToken(131, out);
        }
        jsxReadEntity() {
          const startPos = ++this.state.pos;
          if (this.codePointAtPos(this.state.pos) === 35) {
            ++this.state.pos;
            let radix = 10;
            if (this.codePointAtPos(this.state.pos) === 120) {
              radix = 16;
              ++this.state.pos;
            }
            const codePoint = this.readInt(radix, void 0, false, "bail");
            if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
              ++this.state.pos;
              return String.fromCodePoint(codePoint);
            }
          } else {
            let count = 0;
            let semi = false;
            while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {
              ++this.state.pos;
            }
            if (semi) {
              const desc = this.input.slice(startPos, this.state.pos);
              const entity = entities[desc];
              ++this.state.pos;
              if (entity) {
                return entity;
              }
            }
          }
          this.state.pos = startPos;
          return "&";
        }
        jsxReadWord() {
          let ch;
          const start = this.state.pos;
          do {
            ch = this.input.charCodeAt(++this.state.pos);
          } while (isIdentifierChar(ch) || ch === 45);
          this.finishToken(138, this.input.slice(start, this.state.pos));
        }
        jsxParseIdentifier() {
          const node = this.startNode();
          if (this.match(138)) {
            node.name = this.state.value;
          } else if (tokenIsKeyword(this.state.type)) {
            node.name = tokenLabelName(this.state.type);
          } else {
            this.unexpected();
          }
          this.next();
          return this.finishNode(node, "JSXIdentifier");
        }
        jsxParseNamespacedName() {
          const startLoc = this.state.startLoc;
          const name = this.jsxParseIdentifier();
          if (!this.eat(14))
            return name;
          const node = this.startNodeAt(startLoc);
          node.namespace = name;
          node.name = this.jsxParseIdentifier();
          return this.finishNode(node, "JSXNamespacedName");
        }
        jsxParseElementName() {
          const startLoc = this.state.startLoc;
          let node = this.jsxParseNamespacedName();
          if (node.type === "JSXNamespacedName") {
            return node;
          }
          while (this.eat(16)) {
            const newNode = this.startNodeAt(startLoc);
            newNode.object = node;
            newNode.property = this.jsxParseIdentifier();
            node = this.finishNode(newNode, "JSXMemberExpression");
          }
          return node;
        }
        jsxParseAttributeValue() {
          let node;
          switch (this.state.type) {
            case 5:
              node = this.startNode();
              this.setContext(types.brace);
              this.next();
              node = this.jsxParseExpressionContainer(node, types.j_oTag);
              if (node.expression.type === "JSXEmptyExpression") {
                this.raise(JsxErrors.AttributeIsEmpty, {
                  at: node
                });
              }
              return node;
            case 140:
            case 131:
              return this.parseExprAtom();
            default:
              throw this.raise(JsxErrors.UnsupportedJsxValue, {
                at: this.state.startLoc
              });
          }
        }
        jsxParseEmptyExpression() {
          const node = this.startNodeAt(this.state.lastTokEndLoc);
          return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
        }
        jsxParseSpreadChild(node) {
          this.next();
          node.expression = this.parseExpression();
          this.setContext(types.j_expr);
          this.state.canStartJSXElement = true;
          this.expect(8);
          return this.finishNode(node, "JSXSpreadChild");
        }
        jsxParseExpressionContainer(node, previousContext) {
          if (this.match(8)) {
            node.expression = this.jsxParseEmptyExpression();
          } else {
            const expression = this.parseExpression();
            node.expression = expression;
          }
          this.setContext(previousContext);
          this.state.canStartJSXElement = true;
          this.expect(8);
          return this.finishNode(node, "JSXExpressionContainer");
        }
        jsxParseAttribute() {
          const node = this.startNode();
          if (this.match(5)) {
            this.setContext(types.brace);
            this.next();
            this.expect(21);
            node.argument = this.parseMaybeAssignAllowIn();
            this.setContext(types.j_oTag);
            this.state.canStartJSXElement = true;
            this.expect(8);
            return this.finishNode(node, "JSXSpreadAttribute");
          }
          node.name = this.jsxParseNamespacedName();
          node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
          return this.finishNode(node, "JSXAttribute");
        }
        jsxParseOpeningElementAt(startLoc) {
          const node = this.startNodeAt(startLoc);
          if (this.eat(141)) {
            return this.finishNode(node, "JSXOpeningFragment");
          }
          node.name = this.jsxParseElementName();
          return this.jsxParseOpeningElementAfterName(node);
        }
        jsxParseOpeningElementAfterName(node) {
          const attributes = [];
          while (!this.match(56) && !this.match(141)) {
            attributes.push(this.jsxParseAttribute());
          }
          node.attributes = attributes;
          node.selfClosing = this.eat(56);
          this.expect(141);
          return this.finishNode(node, "JSXOpeningElement");
        }
        jsxParseClosingElementAt(startLoc) {
          const node = this.startNodeAt(startLoc);
          if (this.eat(141)) {
            return this.finishNode(node, "JSXClosingFragment");
          }
          node.name = this.jsxParseElementName();
          this.expect(141);
          return this.finishNode(node, "JSXClosingElement");
        }
        jsxParseElementAt(startLoc) {
          const node = this.startNodeAt(startLoc);
          const children = [];
          const openingElement = this.jsxParseOpeningElementAt(startLoc);
          let closingElement = null;
          if (!openingElement.selfClosing) {
            contents:
              for (; ; ) {
                switch (this.state.type) {
                  case 140:
                    startLoc = this.state.startLoc;
                    this.next();
                    if (this.eat(56)) {
                      closingElement = this.jsxParseClosingElementAt(startLoc);
                      break contents;
                    }
                    children.push(this.jsxParseElementAt(startLoc));
                    break;
                  case 139:
                    children.push(this.parseExprAtom());
                    break;
                  case 5: {
                    const node2 = this.startNode();
                    this.setContext(types.brace);
                    this.next();
                    if (this.match(21)) {
                      children.push(this.jsxParseSpreadChild(node2));
                    } else {
                      children.push(this.jsxParseExpressionContainer(node2, types.j_expr));
                    }
                    break;
                  }
                  default:
                    this.unexpected();
                }
              }
            if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
              this.raise(JsxErrors.MissingClosingTagFragment, {
                at: closingElement
              });
            } else if (!isFragment(openingElement) && isFragment(closingElement)) {
              this.raise(JsxErrors.MissingClosingTagElement, {
                at: closingElement,
                openingTagName: getQualifiedJSXName(openingElement.name)
              });
            } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
              if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
                this.raise(JsxErrors.MissingClosingTagElement, {
                  at: closingElement,
                  openingTagName: getQualifiedJSXName(openingElement.name)
                });
              }
            }
          }
          if (isFragment(openingElement)) {
            node.openingFragment = openingElement;
            node.closingFragment = closingElement;
          } else {
            node.openingElement = openingElement;
            node.closingElement = closingElement;
          }
          node.children = children;
          if (this.match(47)) {
            throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {
              at: this.state.startLoc
            });
          }
          return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
        }
        jsxParseElement() {
          const startLoc = this.state.startLoc;
          this.next();
          return this.jsxParseElementAt(startLoc);
        }
        setContext(newContext) {
          const {
            context
          } = this.state;
          context[context.length - 1] = newContext;
        }
        parseExprAtom(refExpressionErrors) {
          if (this.match(139)) {
            return this.parseLiteral(this.state.value, "JSXText");
          } else if (this.match(140)) {
            return this.jsxParseElement();
          } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
            this.replaceToken(140);
            return this.jsxParseElement();
          } else {
            return super.parseExprAtom(refExpressionErrors);
          }
        }
        skipSpace() {
          const curContext = this.curContext();
          if (!curContext.preserveSpace)
            super.skipSpace();
        }
        getTokenFromCode(code) {
          const context = this.curContext();
          if (context === types.j_expr) {
            this.jsxReadToken();
            return;
          }
          if (context === types.j_oTag || context === types.j_cTag) {
            if (isIdentifierStart(code)) {
              this.jsxReadWord();
              return;
            }
            if (code === 62) {
              ++this.state.pos;
              this.finishToken(141);
              return;
            }
            if ((code === 34 || code === 39) && context === types.j_oTag) {
              this.jsxReadString(code);
              return;
            }
          }
          if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
            ++this.state.pos;
            this.finishToken(140);
            return;
          }
          super.getTokenFromCode(code);
        }
        updateContext(prevType) {
          const {
            context,
            type
          } = this.state;
          if (type === 56 && prevType === 140) {
            context.splice(-2, 2, types.j_cTag);
            this.state.canStartJSXElement = false;
          } else if (type === 140) {
            context.push(types.j_oTag);
          } else if (type === 141) {
            const out = context[context.length - 1];
            if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {
              context.pop();
              this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
            } else {
              this.setContext(types.j_expr);
              this.state.canStartJSXElement = true;
            }
          } else {
            this.state.canStartJSXElement = tokenComesBeforeExpression(type);
          }
        }
      };
      var TypeScriptScope = class extends Scope {
        constructor(...args) {
          super(...args);
          this.types = /* @__PURE__ */ new Set();
          this.enums = /* @__PURE__ */ new Set();
          this.constEnums = /* @__PURE__ */ new Set();
          this.classes = /* @__PURE__ */ new Set();
          this.exportOnlyBindings = /* @__PURE__ */ new Set();
        }
      };
      var TypeScriptScopeHandler = class extends ScopeHandler {
        constructor(...args) {
          super(...args);
          this.importsStack = [];
        }
        createScope(flags) {
          this.importsStack.push(/* @__PURE__ */ new Set());
          return new TypeScriptScope(flags);
        }
        enter(flags) {
          if (flags == SCOPE_TS_MODULE) {
            this.importsStack.push(/* @__PURE__ */ new Set());
          }
          super.enter(flags);
        }
        exit() {
          const flags = super.exit();
          if (flags == SCOPE_TS_MODULE) {
            this.importsStack.pop();
          }
          return flags;
        }
        hasImport(name, allowShadow) {
          const len = this.importsStack.length;
          if (this.importsStack[len - 1].has(name)) {
            return true;
          }
          if (!allowShadow && len > 1) {
            for (let i = 0; i < len - 1; i++) {
              if (this.importsStack[i].has(name))
                return true;
            }
          }
          return false;
        }
        declareName(name, bindingType, loc) {
          if (bindingType & BIND_FLAGS_TS_IMPORT) {
            if (this.hasImport(name, true)) {
              this.parser.raise(Errors.VarRedeclaration, {
                at: loc,
                identifierName: name
              });
            }
            this.importsStack[this.importsStack.length - 1].add(name);
            return;
          }
          const scope = this.currentScope();
          if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {
            this.maybeExportDefined(scope, name);
            scope.exportOnlyBindings.add(name);
            return;
          }
          super.declareName(name, bindingType, loc);
          if (bindingType & BIND_KIND_TYPE) {
            if (!(bindingType & BIND_KIND_VALUE)) {
              this.checkRedeclarationInScope(scope, name, bindingType, loc);
              this.maybeExportDefined(scope, name);
            }
            scope.types.add(name);
          }
          if (bindingType & BIND_FLAGS_TS_ENUM)
            scope.enums.add(name);
          if (bindingType & BIND_FLAGS_TS_CONST_ENUM)
            scope.constEnums.add(name);
          if (bindingType & BIND_FLAGS_CLASS)
            scope.classes.add(name);
        }
        isRedeclaredInScope(scope, name, bindingType) {
          if (scope.enums.has(name)) {
            if (bindingType & BIND_FLAGS_TS_ENUM) {
              const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);
              const wasConst = scope.constEnums.has(name);
              return isConst !== wasConst;
            }
            return true;
          }
          if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {
            if (scope.lexical.has(name)) {
              return !!(bindingType & BIND_KIND_VALUE);
            } else {
              return false;
            }
          }
          if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {
            return true;
          }
          return super.isRedeclaredInScope(scope, name, bindingType);
        }
        checkLocalExport(id) {
          const {
            name
          } = id;
          if (this.hasImport(name))
            return;
          const len = this.scopeStack.length;
          for (let i = len - 1; i >= 0; i--) {
            const scope = this.scopeStack[i];
            if (scope.types.has(name) || scope.exportOnlyBindings.has(name))
              return;
          }
          super.checkLocalExport(id);
        }
      };
      var getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];
      var unwrapParenthesizedExpression = (node) => {
        return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
      };
      var LValParser = class extends NodeUtils {
        toAssignable(node, isLHS = false) {
          var _node$extra, _node$extra3;
          let parenthesized = void 0;
          if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
            parenthesized = unwrapParenthesizedExpression(node);
            if (isLHS) {
              if (parenthesized.type === "Identifier") {
                this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, {
                  at: node
                });
              } else if (parenthesized.type !== "MemberExpression") {
                this.raise(Errors.InvalidParenthesizedAssignment, {
                  at: node
                });
              }
            } else {
              this.raise(Errors.InvalidParenthesizedAssignment, {
                at: node
              });
            }
          }
          switch (node.type) {
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern";
              for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
                var _node$extra2;
                const prop = node.properties[i];
                const isLast = i === last;
                this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
                if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {
                  this.raise(Errors.RestTrailingComma, {
                    at: node.extra.trailingCommaLoc
                  });
                }
              }
              break;
            case "ObjectProperty": {
              const {
                key,
                value
              } = node;
              if (this.isPrivateName(key)) {
                this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
              }
              this.toAssignable(value, isLHS);
              break;
            }
            case "SpreadElement": {
              throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
            }
            case "ArrayExpression":
              node.type = "ArrayPattern";
              this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
              break;
            case "AssignmentExpression":
              if (node.operator !== "=") {
                this.raise(Errors.MissingEqInAssignment, {
                  at: node.left.loc.end
                });
              }
              node.type = "AssignmentPattern";
              delete node.operator;
              this.toAssignable(node.left, isLHS);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(parenthesized, isLHS);
              break;
          }
        }
        toAssignableObjectExpressionProp(prop, isLast, isLHS) {
          if (prop.type === "ObjectMethod") {
            this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {
              at: prop.key
            });
          } else if (prop.type === "SpreadElement") {
            prop.type = "RestElement";
            const arg = prop.argument;
            this.checkToRestConversion(arg, false);
            this.toAssignable(arg, isLHS);
            if (!isLast) {
              this.raise(Errors.RestTrailingComma, {
                at: prop
              });
            }
          } else {
            this.toAssignable(prop, isLHS);
          }
        }
        toAssignableList(exprList, trailingCommaLoc, isLHS) {
          const end = exprList.length - 1;
          for (let i = 0; i <= end; i++) {
            const elt = exprList[i];
            if (!elt)
              continue;
            if (elt.type === "SpreadElement") {
              elt.type = "RestElement";
              const arg = elt.argument;
              this.checkToRestConversion(arg, true);
              this.toAssignable(arg, isLHS);
            } else {
              this.toAssignable(elt, isLHS);
            }
            if (elt.type === "RestElement") {
              if (i < end) {
                this.raise(Errors.RestTrailingComma, {
                  at: elt
                });
              } else if (trailingCommaLoc) {
                this.raise(Errors.RestTrailingComma, {
                  at: trailingCommaLoc
                });
              }
            }
          }
        }
        isAssignable(node, isBinding) {
          switch (node.type) {
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              return true;
            case "ObjectExpression": {
              const last = node.properties.length - 1;
              return node.properties.every((prop, i) => {
                return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
              });
            }
            case "ObjectProperty":
              return this.isAssignable(node.value);
            case "SpreadElement":
              return this.isAssignable(node.argument);
            case "ArrayExpression":
              return node.elements.every((element) => element === null || this.isAssignable(element));
            case "AssignmentExpression":
              return node.operator === "=";
            case "ParenthesizedExpression":
              return this.isAssignable(node.expression);
            case "MemberExpression":
            case "OptionalMemberExpression":
              return !isBinding;
            default:
              return false;
          }
        }
        toReferencedList(exprList, isParenthesizedExpr) {
          return exprList;
        }
        toReferencedListDeep(exprList, isParenthesizedExpr) {
          this.toReferencedList(exprList, isParenthesizedExpr);
          for (const expr of exprList) {
            if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
              this.toReferencedListDeep(expr.elements);
            }
          }
        }
        parseSpread(refExpressionErrors) {
          const node = this.startNode();
          this.next();
          node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0);
          return this.finishNode(node, "SpreadElement");
        }
        parseRestBinding() {
          const node = this.startNode();
          this.next();
          node.argument = this.parseBindingAtom();
          return this.finishNode(node, "RestElement");
        }
        parseBindingAtom() {
          switch (this.state.type) {
            case 0: {
              const node = this.startNode();
              this.next();
              node.elements = this.parseBindingList(3, 93, 1);
              return this.finishNode(node, "ArrayPattern");
            }
            case 5:
              return this.parseObjectLike(8, true);
          }
          return this.parseIdentifier();
        }
        parseBindingList(close, closeCharCode, flags) {
          const allowEmpty = flags & 1;
          const elts = [];
          let first = true;
          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
            }
            if (allowEmpty && this.match(12)) {
              elts.push(null);
            } else if (this.eat(close)) {
              break;
            } else if (this.match(21)) {
              elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));
              if (!this.checkCommaAfterRest(closeCharCode)) {
                this.expect(close);
                break;
              }
            } else {
              const decorators = [];
              if (this.match(26) && this.hasPlugin("decorators")) {
                this.raise(Errors.UnsupportedParameterDecorator, {
                  at: this.state.startLoc
                });
              }
              while (this.match(26)) {
                decorators.push(this.parseDecorator());
              }
              elts.push(this.parseAssignableListItem(flags, decorators));
            }
          }
          return elts;
        }
        parseBindingRestProperty(prop) {
          this.next();
          prop.argument = this.parseIdentifier();
          this.checkCommaAfterRest(125);
          return this.finishNode(prop, "RestElement");
        }
        parseBindingProperty() {
          const prop = this.startNode();
          const {
            type,
            startLoc
          } = this.state;
          if (type === 21) {
            return this.parseBindingRestProperty(prop);
          } else if (type === 136) {
            this.expectPlugin("destructuringPrivate", startLoc);
            this.classScope.usePrivateName(this.state.value, startLoc);
            prop.key = this.parsePrivateName();
          } else {
            this.parsePropertyName(prop);
          }
          prop.method = false;
          return this.parseObjPropValue(prop, startLoc, false, false, true, false);
        }
        parseAssignableListItem(flags, decorators) {
          const left = this.parseMaybeDefault();
          this.parseAssignableListItemTypes(left, flags);
          const elt = this.parseMaybeDefault(left.loc.start, left);
          if (decorators.length) {
            left.decorators = decorators;
          }
          return elt;
        }
        parseAssignableListItemTypes(param, flags) {
          return param;
        }
        parseMaybeDefault(startLoc, left) {
          var _startLoc, _left;
          (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
          left = (_left = left) != null ? _left : this.parseBindingAtom();
          if (!this.eat(29))
            return left;
          const node = this.startNodeAt(startLoc);
          node.left = left;
          node.right = this.parseMaybeAssignAllowIn();
          return this.finishNode(node, "AssignmentPattern");
        }
        isValidLVal(type, isUnparenthesizedInAssign, binding) {
          return getOwn$1({
            AssignmentPattern: "left",
            RestElement: "argument",
            ObjectProperty: "value",
            ParenthesizedExpression: "expression",
            ArrayPattern: "elements",
            ObjectPattern: "properties"
          }, type);
        }
        checkLVal(expression, {
          in: ancestor,
          binding = BIND_NONE,
          checkClashes = false,
          strictModeChanged = false,
          hasParenthesizedAncestor = false
        }) {
          var _expression$extra;
          const type = expression.type;
          if (this.isObjectMethod(expression))
            return;
          if (type === "MemberExpression") {
            if (binding !== BIND_NONE) {
              this.raise(Errors.InvalidPropertyBindingPattern, {
                at: expression
              });
            }
            return;
          }
          if (type === "Identifier") {
            this.checkIdentifier(expression, binding, strictModeChanged);
            const {
              name
            } = expression;
            if (checkClashes) {
              if (checkClashes.has(name)) {
                this.raise(Errors.ParamDupe, {
                  at: expression
                });
              } else {
                checkClashes.add(name);
              }
            }
            return;
          }
          const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
          if (validity === true)
            return;
          if (validity === false) {
            const ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
            this.raise(ParseErrorClass, {
              at: expression,
              ancestor
            });
            return;
          }
          const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === "ParenthesizedExpression"];
          const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" || type === "ParenthesizedExpression" ? {
            type
          } : ancestor;
          for (const child of [].concat(expression[key])) {
            if (child) {
              this.checkLVal(child, {
                in: nextAncestor,
                binding,
                checkClashes,
                strictModeChanged,
                hasParenthesizedAncestor: isParenthesizedExpression
              });
            }
          }
        }
        checkIdentifier(at, bindingType, strictModeChanged = false) {
          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {
            if (bindingType === BIND_NONE) {
              this.raise(Errors.StrictEvalArguments, {
                at,
                referenceName: at.name
              });
            } else {
              this.raise(Errors.StrictEvalArgumentsBinding, {
                at,
                bindingName: at.name
              });
            }
          }
          if (bindingType & BIND_FLAGS_NO_LET_IN_LEXICAL && at.name === "let") {
            this.raise(Errors.LetInLexicalBinding, {
              at
            });
          }
          if (!(bindingType & BIND_NONE)) {
            this.declareNameFromIdentifier(at, bindingType);
          }
        }
        declareNameFromIdentifier(identifier, binding) {
          this.scope.declareName(identifier.name, binding, identifier.loc.start);
        }
        checkToRestConversion(node, allowPattern) {
          switch (node.type) {
            case "ParenthesizedExpression":
              this.checkToRestConversion(node.expression, allowPattern);
              break;
            case "Identifier":
            case "MemberExpression":
              break;
            case "ArrayExpression":
            case "ObjectExpression":
              if (allowPattern)
                break;
            default:
              this.raise(Errors.InvalidRestAssignmentPattern, {
                at: node
              });
          }
        }
        checkCommaAfterRest(close) {
          if (!this.match(12)) {
            return false;
          }
          this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {
            at: this.state.startLoc
          });
          return true;
        }
      };
      var getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];
      function nonNull(x) {
        if (x == null) {
          throw new Error(`Unexpected ${x} value.`);
        }
        return x;
      }
      function assert(x) {
        if (!x) {
          throw new Error("Assert fail");
        }
      }
      var TSErrors = ParseErrorEnum`typescript`({
        AbstractMethodHasImplementation: ({
          methodName
        }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
        AbstractPropertyHasInitializer: ({
          propertyName
        }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
        AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
        AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
        AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
        ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
        ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
        ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
        ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
        DeclareAccessor: ({
          kind
        }) => `'declare' is not allowed in ${kind}ters.`,
        DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
        DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
        DuplicateAccessibilityModifier: ({
          modifier
        }) => `Accessibility modifier already seen.`,
        DuplicateModifier: ({
          modifier
        }) => `Duplicate modifier: '${modifier}'.`,
        EmptyHeritageClauseType: ({
          token
        }) => `'${token}' list cannot be empty.`,
        EmptyTypeArguments: "Type argument list cannot be empty.",
        EmptyTypeParameters: "Type parameter list cannot be empty.",
        ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
        ImportAliasHasImportType: "An import alias can not use 'import type'.",
        ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
        IncompatibleModifiers: ({
          modifiers
        }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
        IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
        IndexSignatureHasAccessibility: ({
          modifier
        }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
        IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
        IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
        IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
        InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
        InvalidModifierOnTypeMember: ({
          modifier
        }) => `'${modifier}' modifier cannot appear on a type member.`,
        InvalidModifierOnTypeParameter: ({
          modifier
        }) => `'${modifier}' modifier cannot appear on a type parameter.`,
        InvalidModifierOnTypeParameterPositions: ({
          modifier
        }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
        InvalidModifiersOrder: ({
          orderedModifiers
        }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
        InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
        InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
        MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
        MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.",
        NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
        NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
        OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
        OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
        PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
        PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
        PrivateElementHasAccessibility: ({
          modifier
        }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
        ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
        ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
        ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
        SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
        SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
        SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
        SingleTypeParameterWithoutTrailingComma: ({
          typeParameterName
        }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
        StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
        TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
        TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
        TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
        TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
        TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
        UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
        UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
        UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
        UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
        UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
        UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
        UnsupportedSignatureParameterKind: ({
          type
        }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
      });
      function keywordTypeFromName(value) {
        switch (value) {
          case "any":
            return "TSAnyKeyword";
          case "boolean":
            return "TSBooleanKeyword";
          case "bigint":
            return "TSBigIntKeyword";
          case "never":
            return "TSNeverKeyword";
          case "number":
            return "TSNumberKeyword";
          case "object":
            return "TSObjectKeyword";
          case "string":
            return "TSStringKeyword";
          case "symbol":
            return "TSSymbolKeyword";
          case "undefined":
            return "TSUndefinedKeyword";
          case "unknown":
            return "TSUnknownKeyword";
          default:
            return void 0;
        }
      }
      function tsIsAccessModifier(modifier) {
        return modifier === "private" || modifier === "public" || modifier === "protected";
      }
      function tsIsVarianceAnnotations(modifier) {
        return modifier === "in" || modifier === "out";
      }
      var typescript = (superClass) => class TypeScriptParserMixin extends superClass {
        constructor(...args) {
          super(...args);
          this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
            allowedModifiers: ["in", "out"],
            disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
            errorTemplate: TSErrors.InvalidModifierOnTypeParameter
          });
          this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
            allowedModifiers: ["const"],
            disallowedModifiers: ["in", "out"],
            errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
          });
          this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
            allowedModifiers: ["in", "out", "const"],
            disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
            errorTemplate: TSErrors.InvalidModifierOnTypeParameter
          });
        }
        getScopeHandler() {
          return TypeScriptScopeHandler;
        }
        tsIsIdentifier() {
          return tokenIsIdentifier(this.state.type);
        }
        tsTokenCanFollowModifier() {
          return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(136) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
        }
        tsNextTokenCanFollowModifier() {
          this.next();
          return this.tsTokenCanFollowModifier();
        }
        tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
          if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {
            return void 0;
          }
          const modifier = this.state.value;
          if (allowedModifiers.indexOf(modifier) !== -1) {
            if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
              return void 0;
            }
            if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
              return modifier;
            }
          }
          return void 0;
        }
        tsParseModifiers({
          allowedModifiers,
          disallowedModifiers,
          stopOnStartOfClassStaticBlock,
          errorTemplate = TSErrors.InvalidModifierOnTypeMember
        }, modified) {
          const enforceOrder = (loc, modifier, before, after) => {
            if (modifier === before && modified[after]) {
              this.raise(TSErrors.InvalidModifiersOrder, {
                at: loc,
                orderedModifiers: [before, after]
              });
            }
          };
          const incompatible = (loc, modifier, mod1, mod2) => {
            if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
              this.raise(TSErrors.IncompatibleModifiers, {
                at: loc,
                modifiers: [mod1, mod2]
              });
            }
          };
          for (; ; ) {
            const {
              startLoc
            } = this.state;
            const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
            if (!modifier)
              break;
            if (tsIsAccessModifier(modifier)) {
              if (modified.accessibility) {
                this.raise(TSErrors.DuplicateAccessibilityModifier, {
                  at: startLoc,
                  modifier
                });
              } else {
                enforceOrder(startLoc, modifier, modifier, "override");
                enforceOrder(startLoc, modifier, modifier, "static");
                enforceOrder(startLoc, modifier, modifier, "readonly");
                modified.accessibility = modifier;
              }
            } else if (tsIsVarianceAnnotations(modifier)) {
              if (modified[modifier]) {
                this.raise(TSErrors.DuplicateModifier, {
                  at: startLoc,
                  modifier
                });
              }
              modified[modifier] = true;
              enforceOrder(startLoc, modifier, "in", "out");
            } else {
              if (Object.hasOwnProperty.call(modified, modifier)) {
                this.raise(TSErrors.DuplicateModifier, {
                  at: startLoc,
                  modifier
                });
              } else {
                enforceOrder(startLoc, modifier, "static", "readonly");
                enforceOrder(startLoc, modifier, "static", "override");
                enforceOrder(startLoc, modifier, "override", "readonly");
                enforceOrder(startLoc, modifier, "abstract", "override");
                incompatible(startLoc, modifier, "declare", "override");
                incompatible(startLoc, modifier, "static", "abstract");
              }
              modified[modifier] = true;
            }
            if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
              this.raise(errorTemplate, {
                at: startLoc,
                modifier
              });
            }
          }
        }
        tsIsListTerminator(kind) {
          switch (kind) {
            case "EnumMembers":
            case "TypeMembers":
              return this.match(8);
            case "HeritageClauseElement":
              return this.match(5);
            case "TupleElementTypes":
              return this.match(3);
            case "TypeParametersOrArguments":
              return this.match(48);
          }
        }
        tsParseList(kind, parseElement) {
          const result = [];
          while (!this.tsIsListTerminator(kind)) {
            result.push(parseElement());
          }
          return result;
        }
        tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
          return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
        }
        tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
          const result = [];
          let trailingCommaPos = -1;
          for (; ; ) {
            if (this.tsIsListTerminator(kind)) {
              break;
            }
            trailingCommaPos = -1;
            const element = parseElement();
            if (element == null) {
              return void 0;
            }
            result.push(element);
            if (this.eat(12)) {
              trailingCommaPos = this.state.lastTokStart;
              continue;
            }
            if (this.tsIsListTerminator(kind)) {
              break;
            }
            if (expectSuccess) {
              this.expect(12);
            }
            return void 0;
          }
          if (refTrailingCommaPos) {
            refTrailingCommaPos.value = trailingCommaPos;
          }
          return result;
        }
        tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
          if (!skipFirstToken) {
            if (bracket) {
              this.expect(0);
            } else {
              this.expect(47);
            }
          }
          const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
          if (bracket) {
            this.expect(3);
          } else {
            this.expect(48);
          }
          return result;
        }
        tsParseImportType() {
          const node = this.startNode();
          this.expect(83);
          this.expect(10);
          if (!this.match(131)) {
            this.raise(TSErrors.UnsupportedImportTypeArgument, {
              at: this.state.startLoc
            });
          }
          node.argument = super.parseExprAtom();
          this.expect(11);
          if (this.eat(16)) {
            node.qualifier = this.tsParseEntityName();
          }
          if (this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
          }
          return this.finishNode(node, "TSImportType");
        }
        tsParseEntityName(allowReservedWords = true) {
          let entity = this.parseIdentifier(allowReservedWords);
          while (this.eat(16)) {
            const node = this.startNodeAtNode(entity);
            node.left = entity;
            node.right = this.parseIdentifier(allowReservedWords);
            entity = this.finishNode(node, "TSQualifiedName");
          }
          return entity;
        }
        tsParseTypeReference() {
          const node = this.startNode();
          node.typeName = this.tsParseEntityName();
          if (!this.hasPrecedingLineBreak() && this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
          }
          return this.finishNode(node, "TSTypeReference");
        }
        tsParseThisTypePredicate(lhs) {
          this.next();
          const node = this.startNodeAtNode(lhs);
          node.parameterName = lhs;
          node.typeAnnotation = this.tsParseTypeAnnotation(false);
          node.asserts = false;
          return this.finishNode(node, "TSTypePredicate");
        }
        tsParseThisTypeNode() {
          const node = this.startNode();
          this.next();
          return this.finishNode(node, "TSThisType");
        }
        tsParseTypeQuery() {
          const node = this.startNode();
          this.expect(87);
          if (this.match(83)) {
            node.exprName = this.tsParseImportType();
          } else {
            node.exprName = this.tsParseEntityName();
          }
          if (!this.hasPrecedingLineBreak() && this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
          }
          return this.finishNode(node, "TSTypeQuery");
        }
        tsParseTypeParameter(parseModifiers) {
          const node = this.startNode();
          parseModifiers(node);
          node.name = this.tsParseTypeParameterName();
          node.constraint = this.tsEatThenParseType(81);
          node.default = this.tsEatThenParseType(29);
          return this.finishNode(node, "TSTypeParameter");
        }
        tsTryParseTypeParameters(parseModifiers) {
          if (this.match(47)) {
            return this.tsParseTypeParameters(parseModifiers);
          }
        }
        tsParseTypeParameters(parseModifiers) {
          const node = this.startNode();
          if (this.match(47) || this.match(140)) {
            this.next();
          } else {
            this.unexpected();
          }
          const refTrailingCommaPos = {
            value: -1
          };
          node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);
          if (node.params.length === 0) {
            this.raise(TSErrors.EmptyTypeParameters, {
              at: node
            });
          }
          if (refTrailingCommaPos.value !== -1) {
            this.addExtra(node, "trailingComma", refTrailingCommaPos.value);
          }
          return this.finishNode(node, "TSTypeParameterDeclaration");
        }
        tsFillSignature(returnToken, signature) {
          const returnTokenRequired = returnToken === 19;
          const paramsKey = "parameters";
          const returnTypeKey = "typeAnnotation";
          signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          this.expect(10);
          signature[paramsKey] = this.tsParseBindingListForSignature();
          if (returnTokenRequired) {
            signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
          } else if (this.match(returnToken)) {
            signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
          }
        }
        tsParseBindingListForSignature() {
          const list = super.parseBindingList(11, 41, 2);
          for (const pattern of list) {
            const {
              type
            } = pattern;
            if (type === "AssignmentPattern" || type === "TSParameterProperty") {
              this.raise(TSErrors.UnsupportedSignatureParameterKind, {
                at: pattern,
                type
              });
            }
          }
          return list;
        }
        tsParseTypeMemberSemicolon() {
          if (!this.eat(12) && !this.isLineTerminator()) {
            this.expect(13);
          }
        }
        tsParseSignatureMember(kind, node) {
          this.tsFillSignature(14, node);
          this.tsParseTypeMemberSemicolon();
          return this.finishNode(node, kind);
        }
        tsIsUnambiguouslyIndexSignature() {
          this.next();
          if (tokenIsIdentifier(this.state.type)) {
            this.next();
            return this.match(14);
          }
          return false;
        }
        tsTryParseIndexSignature(node) {
          if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
            return;
          }
          this.expect(0);
          const id = this.parseIdentifier();
          id.typeAnnotation = this.tsParseTypeAnnotation();
          this.resetEndLocation(id);
          this.expect(3);
          node.parameters = [id];
          const type = this.tsTryParseTypeAnnotation();
          if (type)
            node.typeAnnotation = type;
          this.tsParseTypeMemberSemicolon();
          return this.finishNode(node, "TSIndexSignature");
        }
        tsParsePropertyOrMethodSignature(node, readonly) {
          if (this.eat(17))
            node.optional = true;
          const nodeAny = node;
          if (this.match(10) || this.match(47)) {
            if (readonly) {
              this.raise(TSErrors.ReadonlyForMethodSignature, {
                at: node
              });
            }
            const method = nodeAny;
            if (method.kind && this.match(47)) {
              this.raise(TSErrors.AccesorCannotHaveTypeParameters, {
                at: this.state.curPosition()
              });
            }
            this.tsFillSignature(14, method);
            this.tsParseTypeMemberSemicolon();
            const paramsKey = "parameters";
            const returnTypeKey = "typeAnnotation";
            if (method.kind === "get") {
              if (method[paramsKey].length > 0) {
                this.raise(Errors.BadGetterArity, {
                  at: this.state.curPosition()
                });
                if (this.isThisParam(method[paramsKey][0])) {
                  this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
                    at: this.state.curPosition()
                  });
                }
              }
            } else if (method.kind === "set") {
              if (method[paramsKey].length !== 1) {
                this.raise(Errors.BadSetterArity, {
                  at: this.state.curPosition()
                });
              } else {
                const firstParameter = method[paramsKey][0];
                if (this.isThisParam(firstParameter)) {
                  this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
                    at: this.state.curPosition()
                  });
                }
                if (firstParameter.type === "Identifier" && firstParameter.optional) {
                  this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {
                    at: this.state.curPosition()
                  });
                }
                if (firstParameter.type === "RestElement") {
                  this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {
                    at: this.state.curPosition()
                  });
                }
              }
              if (method[returnTypeKey]) {
                this.raise(TSErrors.SetAccesorCannotHaveReturnType, {
                  at: method[returnTypeKey]
                });
              }
            } else {
              method.kind = "method";
            }
            return this.finishNode(method, "TSMethodSignature");
          } else {
            const property = nodeAny;
            if (readonly)
              property.readonly = true;
            const type = this.tsTryParseTypeAnnotation();
            if (type)
              property.typeAnnotation = type;
            this.tsParseTypeMemberSemicolon();
            return this.finishNode(property, "TSPropertySignature");
          }
        }
        tsParseTypeMember() {
          const node = this.startNode();
          if (this.match(10) || this.match(47)) {
            return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
          }
          if (this.match(77)) {
            const id = this.startNode();
            this.next();
            if (this.match(10) || this.match(47)) {
              return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
            } else {
              node.key = this.createIdentifier(id, "new");
              return this.tsParsePropertyOrMethodSignature(node, false);
            }
          }
          this.tsParseModifiers({
            allowedModifiers: ["readonly"],
            disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
          }, node);
          const idx = this.tsTryParseIndexSignature(node);
          if (idx) {
            return idx;
          }
          super.parsePropertyName(node);
          if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
            node.kind = node.key.name;
            super.parsePropertyName(node);
          }
          return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
        }
        tsParseTypeLiteral() {
          const node = this.startNode();
          node.members = this.tsParseObjectTypeMembers();
          return this.finishNode(node, "TSTypeLiteral");
        }
        tsParseObjectTypeMembers() {
          this.expect(5);
          const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
          this.expect(8);
          return members;
        }
        tsIsStartOfMappedType() {
          this.next();
          if (this.eat(53)) {
            return this.isContextual(120);
          }
          if (this.isContextual(120)) {
            this.next();
          }
          if (!this.match(0)) {
            return false;
          }
          this.next();
          if (!this.tsIsIdentifier()) {
            return false;
          }
          this.next();
          return this.match(58);
        }
        tsParseMappedTypeParameter() {
          const node = this.startNode();
          node.name = this.tsParseTypeParameterName();
          node.constraint = this.tsExpectThenParseType(58);
          return this.finishNode(node, "TSTypeParameter");
        }
        tsParseMappedType() {
          const node = this.startNode();
          this.expect(5);
          if (this.match(53)) {
            node.readonly = this.state.value;
            this.next();
            this.expectContextual(120);
          } else if (this.eatContextual(120)) {
            node.readonly = true;
          }
          this.expect(0);
          node.typeParameter = this.tsParseMappedTypeParameter();
          node.nameType = this.eatContextual(93) ? this.tsParseType() : null;
          this.expect(3);
          if (this.match(53)) {
            node.optional = this.state.value;
            this.next();
            this.expect(17);
          } else if (this.eat(17)) {
            node.optional = true;
          }
          node.typeAnnotation = this.tsTryParseType();
          this.semicolon();
          this.expect(8);
          return this.finishNode(node, "TSMappedType");
        }
        tsParseTupleType() {
          const node = this.startNode();
          node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
          let seenOptionalElement = false;
          let labeledElements = null;
          node.elementTypes.forEach((elementNode) => {
            var _labeledElements;
            const {
              type
            } = elementNode;
            if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
              this.raise(TSErrors.OptionalTypeBeforeRequired, {
                at: elementNode
              });
            }
            seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
            let checkType = type;
            if (type === "TSRestType") {
              elementNode = elementNode.typeAnnotation;
              checkType = elementNode.type;
            }
            const isLabeled = checkType === "TSNamedTupleMember";
            (_labeledElements = labeledElements) != null ? _labeledElements : labeledElements = isLabeled;
            if (labeledElements !== isLabeled) {
              this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {
                at: elementNode
              });
            }
          });
          return this.finishNode(node, "TSTupleType");
        }
        tsParseTupleElementType() {
          const {
            startLoc
          } = this.state;
          const rest = this.eat(21);
          let labeled;
          let label;
          let optional;
          let type;
          const isWord = tokenIsKeywordOrIdentifier(this.state.type);
          const chAfterWord = isWord ? this.lookaheadCharCode() : null;
          if (chAfterWord === 58) {
            labeled = true;
            optional = false;
            label = this.parseIdentifier(true);
            this.expect(14);
            type = this.tsParseType();
          } else if (chAfterWord === 63) {
            optional = true;
            const startLoc2 = this.state.startLoc;
            const wordName = this.state.value;
            const typeOrLabel = this.tsParseNonArrayType();
            if (this.lookaheadCharCode() === 58) {
              labeled = true;
              label = this.createIdentifier(this.startNodeAt(startLoc2), wordName);
              this.expect(17);
              this.expect(14);
              type = this.tsParseType();
            } else {
              labeled = false;
              type = typeOrLabel;
              this.expect(17);
            }
          } else {
            type = this.tsParseType();
            optional = this.eat(17);
            labeled = this.eat(14);
          }
          if (labeled) {
            let labeledNode;
            if (label) {
              labeledNode = this.startNodeAtNode(label);
              labeledNode.optional = optional;
              labeledNode.label = label;
              labeledNode.elementType = type;
              if (this.eat(17)) {
                labeledNode.optional = true;
                this.raise(TSErrors.TupleOptionalAfterType, {
                  at: this.state.lastTokStartLoc
                });
              }
            } else {
              labeledNode = this.startNodeAtNode(type);
              labeledNode.optional = optional;
              this.raise(TSErrors.InvalidTupleMemberLabel, {
                at: type
              });
              labeledNode.label = type;
              labeledNode.elementType = this.tsParseType();
            }
            type = this.finishNode(labeledNode, "TSNamedTupleMember");
          } else if (optional) {
            const optionalTypeNode = this.startNodeAtNode(type);
            optionalTypeNode.typeAnnotation = type;
            type = this.finishNode(optionalTypeNode, "TSOptionalType");
          }
          if (rest) {
            const restNode = this.startNodeAt(startLoc);
            restNode.typeAnnotation = type;
            type = this.finishNode(restNode, "TSRestType");
          }
          return type;
        }
        tsParseParenthesizedType() {
          const node = this.startNode();
          this.expect(10);
          node.typeAnnotation = this.tsParseType();
          this.expect(11);
          return this.finishNode(node, "TSParenthesizedType");
        }
        tsParseFunctionOrConstructorType(type, abstract) {
          const node = this.startNode();
          if (type === "TSConstructorType") {
            node.abstract = !!abstract;
            if (abstract)
              this.next();
            this.next();
          }
          this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));
          return this.finishNode(node, type);
        }
        tsParseLiteralTypeNode() {
          const node = this.startNode();
          switch (this.state.type) {
            case 132:
            case 133:
            case 131:
            case 85:
            case 86:
              node.literal = super.parseExprAtom();
              break;
            default:
              this.unexpected();
          }
          return this.finishNode(node, "TSLiteralType");
        }
        tsParseTemplateLiteralType() {
          const node = this.startNode();
          node.literal = super.parseTemplate(false);
          return this.finishNode(node, "TSLiteralType");
        }
        parseTemplateSubstitution() {
          if (this.state.inType)
            return this.tsParseType();
          return super.parseTemplateSubstitution();
        }
        tsParseThisTypeOrThisTypePredicate() {
          const thisKeyword = this.tsParseThisTypeNode();
          if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {
            return this.tsParseThisTypePredicate(thisKeyword);
          } else {
            return thisKeyword;
          }
        }
        tsParseNonArrayType() {
          switch (this.state.type) {
            case 131:
            case 132:
            case 133:
            case 85:
            case 86:
              return this.tsParseLiteralTypeNode();
            case 53:
              if (this.state.value === "-") {
                const node = this.startNode();
                const nextToken = this.lookahead();
                if (nextToken.type !== 132 && nextToken.type !== 133) {
                  this.unexpected();
                }
                node.literal = this.parseMaybeUnary();
                return this.finishNode(node, "TSLiteralType");
              }
              break;
            case 78:
              return this.tsParseThisTypeOrThisTypePredicate();
            case 87:
              return this.tsParseTypeQuery();
            case 83:
              return this.tsParseImportType();
            case 5:
              return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
            case 0:
              return this.tsParseTupleType();
            case 10:
              return this.tsParseParenthesizedType();
            case 25:
            case 24:
              return this.tsParseTemplateLiteralType();
            default: {
              const {
                type
              } = this.state;
              if (tokenIsIdentifier(type) || type === 88 || type === 84) {
                const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
                if (nodeType !== void 0 && this.lookaheadCharCode() !== 46) {
                  const node = this.startNode();
                  this.next();
                  return this.finishNode(node, nodeType);
                }
                return this.tsParseTypeReference();
              }
            }
          }
          this.unexpected();
        }
        tsParseArrayTypeOrHigher() {
          let type = this.tsParseNonArrayType();
          while (!this.hasPrecedingLineBreak() && this.eat(0)) {
            if (this.match(3)) {
              const node = this.startNodeAtNode(type);
              node.elementType = type;
              this.expect(3);
              type = this.finishNode(node, "TSArrayType");
            } else {
              const node = this.startNodeAtNode(type);
              node.objectType = type;
              node.indexType = this.tsParseType();
              this.expect(3);
              type = this.finishNode(node, "TSIndexedAccessType");
            }
          }
          return type;
        }
        tsParseTypeOperator() {
          const node = this.startNode();
          const operator = this.state.value;
          this.next();
          node.operator = operator;
          node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
          if (operator === "readonly") {
            this.tsCheckTypeAnnotationForReadOnly(node);
          }
          return this.finishNode(node, "TSTypeOperator");
        }
        tsCheckTypeAnnotationForReadOnly(node) {
          switch (node.typeAnnotation.type) {
            case "TSTupleType":
            case "TSArrayType":
              return;
            default:
              this.raise(TSErrors.UnexpectedReadonly, {
                at: node
              });
          }
        }
        tsParseInferType() {
          const node = this.startNode();
          this.expectContextual(113);
          const typeParameter = this.startNode();
          typeParameter.name = this.tsParseTypeParameterName();
          typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
          node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
          return this.finishNode(node, "TSInferType");
        }
        tsParseConstraintForInferType() {
          if (this.eat(81)) {
            const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
            if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
              return constraint;
            }
          }
        }
        tsParseTypeOperatorOrHigher() {
          const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
          return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(113) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
        }
        tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
          const node = this.startNode();
          const hasLeadingOperator = this.eat(operator);
          const types2 = [];
          do {
            types2.push(parseConstituentType());
          } while (this.eat(operator));
          if (types2.length === 1 && !hasLeadingOperator) {
            return types2[0];
          }
          node.types = types2;
          return this.finishNode(node, kind);
        }
        tsParseIntersectionTypeOrHigher() {
          return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
        }
        tsParseUnionTypeOrHigher() {
          return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
        }
        tsIsStartOfFunctionType() {
          if (this.match(47)) {
            return true;
          }
          return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
        }
        tsSkipParameterStart() {
          if (tokenIsIdentifier(this.state.type) || this.match(78)) {
            this.next();
            return true;
          }
          if (this.match(5)) {
            const {
              errors
            } = this.state;
            const previousErrorCount = errors.length;
            try {
              this.parseObjectLike(8, true);
              return errors.length === previousErrorCount;
            } catch (_unused) {
              return false;
            }
          }
          if (this.match(0)) {
            this.next();
            const {
              errors
            } = this.state;
            const previousErrorCount = errors.length;
            try {
              super.parseBindingList(3, 93, 1);
              return errors.length === previousErrorCount;
            } catch (_unused2) {
              return false;
            }
          }
          return false;
        }
        tsIsUnambiguouslyStartOfFunctionType() {
          this.next();
          if (this.match(11) || this.match(21)) {
            return true;
          }
          if (this.tsSkipParameterStart()) {
            if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
              return true;
            }
            if (this.match(11)) {
              this.next();
              if (this.match(19)) {
                return true;
              }
            }
          }
          return false;
        }
        tsParseTypeOrTypePredicateAnnotation(returnToken) {
          return this.tsInType(() => {
            const t = this.startNode();
            this.expect(returnToken);
            const node = this.startNode();
            const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
            if (asserts && this.match(78)) {
              let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
              if (thisTypePredicate.type === "TSThisType") {
                node.parameterName = thisTypePredicate;
                node.asserts = true;
                node.typeAnnotation = null;
                thisTypePredicate = this.finishNode(node, "TSTypePredicate");
              } else {
                this.resetStartLocationFromNode(thisTypePredicate, node);
                thisTypePredicate.asserts = true;
              }
              t.typeAnnotation = thisTypePredicate;
              return this.finishNode(t, "TSTypeAnnotation");
            }
            const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
            if (!typePredicateVariable) {
              if (!asserts) {
                return this.tsParseTypeAnnotation(false, t);
              }
              node.parameterName = this.parseIdentifier();
              node.asserts = asserts;
              node.typeAnnotation = null;
              t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
              return this.finishNode(t, "TSTypeAnnotation");
            }
            const type = this.tsParseTypeAnnotation(false);
            node.parameterName = typePredicateVariable;
            node.typeAnnotation = type;
            node.asserts = asserts;
            t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
            return this.finishNode(t, "TSTypeAnnotation");
          });
        }
        tsTryParseTypeOrTypePredicateAnnotation() {
          if (this.match(14)) {
            return this.tsParseTypeOrTypePredicateAnnotation(14);
          }
        }
        tsTryParseTypeAnnotation() {
          if (this.match(14)) {
            return this.tsParseTypeAnnotation();
          }
        }
        tsTryParseType() {
          return this.tsEatThenParseType(14);
        }
        tsParseTypePredicatePrefix() {
          const id = this.parseIdentifier();
          if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {
            this.next();
            return id;
          }
        }
        tsParseTypePredicateAsserts() {
          if (this.state.type !== 107) {
            return false;
          }
          const containsEsc = this.state.containsEsc;
          this.next();
          if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
            return false;
          }
          if (containsEsc) {
            this.raise(Errors.InvalidEscapedReservedWord, {
              at: this.state.lastTokStartLoc,
              reservedWord: "asserts"
            });
          }
          return true;
        }
        tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
          this.tsInType(() => {
            if (eatColon)
              this.expect(14);
            t.typeAnnotation = this.tsParseType();
          });
          return this.finishNode(t, "TSTypeAnnotation");
        }
        tsParseType() {
          assert(this.state.inType);
          const type = this.tsParseNonConditionalType();
          if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
            return type;
          }
          const node = this.startNodeAtNode(type);
          node.checkType = type;
          node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
          this.expect(17);
          node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
          this.expect(14);
          node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
          return this.finishNode(node, "TSConditionalType");
        }
        isAbstractConstructorSignature() {
          return this.isContextual(122) && this.lookahead().type === 77;
        }
        tsParseNonConditionalType() {
          if (this.tsIsStartOfFunctionType()) {
            return this.tsParseFunctionOrConstructorType("TSFunctionType");
          }
          if (this.match(77)) {
            return this.tsParseFunctionOrConstructorType("TSConstructorType");
          } else if (this.isAbstractConstructorSignature()) {
            return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
          }
          return this.tsParseUnionTypeOrHigher();
        }
        tsParseTypeAssertion() {
          if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
            this.raise(TSErrors.ReservedTypeAssertion, {
              at: this.state.startLoc
            });
          }
          const node = this.startNode();
          node.typeAnnotation = this.tsInType(() => {
            this.next();
            return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
          });
          this.expect(48);
          node.expression = this.parseMaybeUnary();
          return this.finishNode(node, "TSTypeAssertion");
        }
        tsParseHeritageClause(token) {
          const originalStartLoc = this.state.startLoc;
          const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
            const node = this.startNode();
            node.expression = this.tsParseEntityName();
            if (this.match(47)) {
              node.typeParameters = this.tsParseTypeArguments();
            }
            return this.finishNode(node, "TSExpressionWithTypeArguments");
          });
          if (!delimitedList.length) {
            this.raise(TSErrors.EmptyHeritageClauseType, {
              at: originalStartLoc,
              token
            });
          }
          return delimitedList;
        }
        tsParseInterfaceDeclaration(node, properties = {}) {
          if (this.hasFollowingLineBreak())
            return null;
          this.expectContextual(127);
          if (properties.declare)
            node.declare = true;
          if (tokenIsIdentifier(this.state.type)) {
            node.id = this.parseIdentifier();
            this.checkIdentifier(node.id, BIND_TS_INTERFACE);
          } else {
            node.id = null;
            this.raise(TSErrors.MissingInterfaceName, {
              at: this.state.startLoc
            });
          }
          node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
          if (this.eat(81)) {
            node.extends = this.tsParseHeritageClause("extends");
          }
          const body = this.startNode();
          body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
          node.body = this.finishNode(body, "TSInterfaceBody");
          return this.finishNode(node, "TSInterfaceDeclaration");
        }
        tsParseTypeAliasDeclaration(node) {
          node.id = this.parseIdentifier();
          this.checkIdentifier(node.id, BIND_TS_TYPE);
          node.typeAnnotation = this.tsInType(() => {
            node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);
            this.expect(29);
            if (this.isContextual(112) && this.lookahead().type !== 16) {
              const node2 = this.startNode();
              this.next();
              return this.finishNode(node2, "TSIntrinsicKeyword");
            }
            return this.tsParseType();
          });
          this.semicolon();
          return this.finishNode(node, "TSTypeAliasDeclaration");
        }
        tsInNoContext(cb) {
          const oldContext = this.state.context;
          this.state.context = [oldContext[0]];
          try {
            return cb();
          } finally {
            this.state.context = oldContext;
          }
        }
        tsInType(cb) {
          const oldInType = this.state.inType;
          this.state.inType = true;
          try {
            return cb();
          } finally {
            this.state.inType = oldInType;
          }
        }
        tsInDisallowConditionalTypesContext(cb) {
          const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
          this.state.inDisallowConditionalTypesContext = true;
          try {
            return cb();
          } finally {
            this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
          }
        }
        tsInAllowConditionalTypesContext(cb) {
          const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
          this.state.inDisallowConditionalTypesContext = false;
          try {
            return cb();
          } finally {
            this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
          }
        }
        tsEatThenParseType(token) {
          if (this.match(token)) {
            return this.tsNextThenParseType();
          }
        }
        tsExpectThenParseType(token) {
          return this.tsInType(() => {
            this.expect(token);
            return this.tsParseType();
          });
        }
        tsNextThenParseType() {
          return this.tsInType(() => {
            this.next();
            return this.tsParseType();
          });
        }
        tsParseEnumMember() {
          const node = this.startNode();
          node.id = this.match(131) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);
          if (this.eat(29)) {
            node.initializer = super.parseMaybeAssignAllowIn();
          }
          return this.finishNode(node, "TSEnumMember");
        }
        tsParseEnumDeclaration(node, properties = {}) {
          if (properties.const)
            node.const = true;
          if (properties.declare)
            node.declare = true;
          this.expectContextual(124);
          node.id = this.parseIdentifier();
          this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);
          this.expect(5);
          node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
          this.expect(8);
          return this.finishNode(node, "TSEnumDeclaration");
        }
        tsParseModuleBlock() {
          const node = this.startNode();
          this.scope.enter(SCOPE_OTHER);
          this.expect(5);
          super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8);
          this.scope.exit();
          return this.finishNode(node, "TSModuleBlock");
        }
        tsParseModuleOrNamespaceDeclaration(node, nested = false) {
          node.id = this.parseIdentifier();
          if (!nested) {
            this.checkIdentifier(node.id, BIND_TS_NAMESPACE);
          }
          if (this.eat(16)) {
            const inner = this.startNode();
            this.tsParseModuleOrNamespaceDeclaration(inner, true);
            node.body = inner;
          } else {
            this.scope.enter(SCOPE_TS_MODULE);
            this.prodParam.enter(PARAM);
            node.body = this.tsParseModuleBlock();
            this.prodParam.exit();
            this.scope.exit();
          }
          return this.finishNode(node, "TSModuleDeclaration");
        }
        tsParseAmbientExternalModuleDeclaration(node) {
          if (this.isContextual(110)) {
            node.global = true;
            node.id = this.parseIdentifier();
          } else if (this.match(131)) {
            node.id = super.parseStringLiteral(this.state.value);
          } else {
            this.unexpected();
          }
          if (this.match(5)) {
            this.scope.enter(SCOPE_TS_MODULE);
            this.prodParam.enter(PARAM);
            node.body = this.tsParseModuleBlock();
            this.prodParam.exit();
            this.scope.exit();
          } else {
            this.semicolon();
          }
          return this.finishNode(node, "TSModuleDeclaration");
        }
        tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
          node.isExport = isExport || false;
          node.id = maybeDefaultIdentifier || this.parseIdentifier();
          this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);
          this.expect(29);
          const moduleReference = this.tsParseModuleReference();
          if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
            this.raise(TSErrors.ImportAliasHasImportType, {
              at: moduleReference
            });
          }
          node.moduleReference = moduleReference;
          this.semicolon();
          return this.finishNode(node, "TSImportEqualsDeclaration");
        }
        tsIsExternalModuleReference() {
          return this.isContextual(117) && this.lookaheadCharCode() === 40;
        }
        tsParseModuleReference() {
          return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
        }
        tsParseExternalModuleReference() {
          const node = this.startNode();
          this.expectContextual(117);
          this.expect(10);
          if (!this.match(131)) {
            this.unexpected();
          }
          node.expression = super.parseExprAtom();
          this.expect(11);
          this.sawUnambiguousESM = true;
          return this.finishNode(node, "TSExternalModuleReference");
        }
        tsLookAhead(f) {
          const state = this.state.clone();
          const res = f();
          this.state = state;
          return res;
        }
        tsTryParseAndCatch(f) {
          const result = this.tryParse((abort) => f() || abort());
          if (result.aborted || !result.node)
            return;
          if (result.error)
            this.state = result.failState;
          return result.node;
        }
        tsTryParse(f) {
          const state = this.state.clone();
          const result = f();
          if (result !== void 0 && result !== false) {
            return result;
          }
          this.state = state;
        }
        tsTryParseDeclare(nany) {
          if (this.isLineTerminator()) {
            return;
          }
          let startType = this.state.type;
          let kind;
          if (this.isContextual(99)) {
            startType = 74;
            kind = "let";
          }
          return this.tsInAmbientContext(() => {
            switch (startType) {
              case 68:
                nany.declare = true;
                return super.parseFunctionStatement(nany, false, false);
              case 80:
                nany.declare = true;
                return this.parseClass(nany, true, false);
              case 124:
                return this.tsParseEnumDeclaration(nany, {
                  declare: true
                });
              case 110:
                return this.tsParseAmbientExternalModuleDeclaration(nany);
              case 75:
              case 74:
                if (!this.match(75) || !this.isLookaheadContextual("enum")) {
                  nany.declare = true;
                  return this.parseVarStatement(nany, kind || this.state.value, true);
                }
                this.expect(75);
                return this.tsParseEnumDeclaration(nany, {
                  const: true,
                  declare: true
                });
              case 127: {
                const result = this.tsParseInterfaceDeclaration(nany, {
                  declare: true
                });
                if (result)
                  return result;
              }
              default:
                if (tokenIsIdentifier(startType)) {
                  return this.tsParseDeclaration(nany, this.state.value, true, null);
                }
            }
          });
        }
        tsTryParseExportDeclaration() {
          return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
        }
        tsParseExpressionStatement(node, expr, decorators) {
          switch (expr.name) {
            case "declare": {
              const declaration = this.tsTryParseDeclare(node);
              if (declaration) {
                declaration.declare = true;
              }
              return declaration;
            }
            case "global":
              if (this.match(5)) {
                this.scope.enter(SCOPE_TS_MODULE);
                this.prodParam.enter(PARAM);
                const mod = node;
                mod.global = true;
                mod.id = expr;
                mod.body = this.tsParseModuleBlock();
                this.scope.exit();
                this.prodParam.exit();
                return this.finishNode(mod, "TSModuleDeclaration");
              }
              break;
            default:
              return this.tsParseDeclaration(node, expr.name, false, decorators);
          }
        }
        tsParseDeclaration(node, value, next, decorators) {
          switch (value) {
            case "abstract":
              if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
                return this.tsParseAbstractDeclaration(node, decorators);
              }
              break;
            case "module":
              if (this.tsCheckLineTerminator(next)) {
                if (this.match(131)) {
                  return this.tsParseAmbientExternalModuleDeclaration(node);
                } else if (tokenIsIdentifier(this.state.type)) {
                  return this.tsParseModuleOrNamespaceDeclaration(node);
                }
              }
              break;
            case "namespace":
              if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
                return this.tsParseModuleOrNamespaceDeclaration(node);
              }
              break;
            case "type":
              if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
                return this.tsParseTypeAliasDeclaration(node);
              }
              break;
          }
        }
        tsCheckLineTerminator(next) {
          if (next) {
            if (this.hasFollowingLineBreak())
              return false;
            this.next();
            return true;
          }
          return !this.isLineTerminator();
        }
        tsTryParseGenericAsyncArrowFunction(startLoc) {
          if (!this.match(47))
            return;
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          this.state.maybeInArrowParameters = true;
          const res = this.tsTryParseAndCatch(() => {
            const node = this.startNodeAt(startLoc);
            node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
            super.parseFunctionParams(node);
            node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
            this.expect(19);
            return node;
          });
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          if (!res)
            return;
          return super.parseArrowExpression(res, null, true);
        }
        tsParseTypeArgumentsInExpression() {
          if (this.reScan_lt() !== 47)
            return;
          return this.tsParseTypeArguments();
        }
        tsParseTypeArguments() {
          const node = this.startNode();
          node.params = this.tsInType(() => this.tsInNoContext(() => {
            this.expect(47);
            return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
          }));
          if (node.params.length === 0) {
            this.raise(TSErrors.EmptyTypeArguments, {
              at: node
            });
          } else if (!this.state.inType && this.curContext() === types.brace) {
            this.reScan_lt_gt();
          }
          this.expect(48);
          return this.finishNode(node, "TSTypeParameterInstantiation");
        }
        tsIsDeclarationStart() {
          return tokenIsTSDeclarationStart(this.state.type);
        }
        isExportDefaultSpecifier() {
          if (this.tsIsDeclarationStart())
            return false;
          return super.isExportDefaultSpecifier();
        }
        parseAssignableListItem(flags, decorators) {
          const startLoc = this.state.startLoc;
          const modified = {};
          this.tsParseModifiers({
            allowedModifiers: ["public", "private", "protected", "override", "readonly"]
          }, modified);
          const accessibility = modified.accessibility;
          const override = modified.override;
          const readonly = modified.readonly;
          if (!(flags & 4) && (accessibility || readonly || override)) {
            this.raise(TSErrors.UnexpectedParameterModifier, {
              at: startLoc
            });
          }
          const left = this.parseMaybeDefault();
          this.parseAssignableListItemTypes(left, flags);
          const elt = this.parseMaybeDefault(left.loc.start, left);
          if (accessibility || readonly || override) {
            const pp = this.startNodeAt(startLoc);
            if (decorators.length) {
              pp.decorators = decorators;
            }
            if (accessibility)
              pp.accessibility = accessibility;
            if (readonly)
              pp.readonly = readonly;
            if (override)
              pp.override = override;
            if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
              this.raise(TSErrors.UnsupportedParameterPropertyKind, {
                at: pp
              });
            }
            pp.parameter = elt;
            return this.finishNode(pp, "TSParameterProperty");
          }
          if (decorators.length) {
            left.decorators = decorators;
          }
          return elt;
        }
        isSimpleParameter(node) {
          return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
        }
        tsDisallowOptionalPattern(node) {
          for (const param of node.params) {
            if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) {
              this.raise(TSErrors.PatternIsOptional, {
                at: param
              });
            }
          }
        }
        setArrowFunctionParameters(node, params, trailingCommaLoc) {
          super.setArrowFunctionParameters(node, params, trailingCommaLoc);
          this.tsDisallowOptionalPattern(node);
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
          if (this.match(14)) {
            node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
          }
          const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
          if (bodilessType && !this.match(5) && this.isLineTerminator()) {
            return this.finishNode(node, bodilessType);
          }
          if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
            this.raise(TSErrors.DeclareFunctionHasImplementation, {
              at: node
            });
            if (node.declare) {
              return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
            }
          }
          this.tsDisallowOptionalPattern(node);
          return super.parseFunctionBodyAndFinish(node, type, isMethod);
        }
        registerFunctionStatementId(node) {
          if (!node.body && node.id) {
            this.checkIdentifier(node.id, BIND_TS_AMBIENT);
          } else {
            super.registerFunctionStatementId(node);
          }
        }
        tsCheckForInvalidTypeCasts(items) {
          items.forEach((node) => {
            if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
              this.raise(TSErrors.UnexpectedTypeAnnotation, {
                at: node.typeAnnotation
              });
            }
          });
        }
        toReferencedList(exprList, isInParens) {
          this.tsCheckForInvalidTypeCasts(exprList);
          return exprList;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
          const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
          if (node.type === "ArrayExpression") {
            this.tsCheckForInvalidTypeCasts(node.elements);
          }
          return node;
        }
        parseSubscript(base, startLoc, noCalls, state) {
          if (!this.hasPrecedingLineBreak() && this.match(35)) {
            this.state.canStartJSXElement = false;
            this.next();
            const nonNullExpression = this.startNodeAt(startLoc);
            nonNullExpression.expression = base;
            return this.finishNode(nonNullExpression, "TSNonNullExpression");
          }
          let isOptionalCall = false;
          if (this.match(18) && this.lookaheadCharCode() === 60) {
            if (noCalls) {
              state.stop = true;
              return base;
            }
            state.optionalChainMember = isOptionalCall = true;
            this.next();
          }
          if (this.match(47) || this.match(51)) {
            let missingParenErrorLoc;
            const result = this.tsTryParseAndCatch(() => {
              if (!noCalls && this.atPossibleAsyncArrow(base)) {
                const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
                if (asyncArrowFn) {
                  return asyncArrowFn;
                }
              }
              const typeArguments = this.tsParseTypeArgumentsInExpression();
              if (!typeArguments)
                return;
              if (isOptionalCall && !this.match(10)) {
                missingParenErrorLoc = this.state.curPosition();
                return;
              }
              if (tokenIsTemplate(this.state.type)) {
                const result2 = super.parseTaggedTemplateExpression(base, startLoc, state);
                result2.typeParameters = typeArguments;
                return result2;
              }
              if (!noCalls && this.eat(10)) {
                const node2 = this.startNodeAt(startLoc);
                node2.callee = base;
                node2.arguments = this.parseCallExpressionArguments(11, false);
                this.tsCheckForInvalidTypeCasts(node2.arguments);
                node2.typeParameters = typeArguments;
                if (state.optionalChainMember) {
                  node2.optional = isOptionalCall;
                }
                return this.finishCallExpression(node2, state.optionalChainMember);
              }
              const tokenType = this.state.type;
              if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {
                return;
              }
              const node = this.startNodeAt(startLoc);
              node.expression = base;
              node.typeParameters = typeArguments;
              return this.finishNode(node, "TSInstantiationExpression");
            });
            if (missingParenErrorLoc) {
              this.unexpected(missingParenErrorLoc, 10);
            }
            if (result) {
              if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {
                this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, {
                  at: this.state.startLoc
                });
              }
              return result;
            }
          }
          return super.parseSubscript(base, startLoc, noCalls, state);
        }
        parseNewCallee(node) {
          var _callee$extra;
          super.parseNewCallee(node);
          const {
            callee
          } = node;
          if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
            node.typeParameters = callee.typeParameters;
            node.callee = callee.expression;
          }
        }
        parseExprOp(left, leftStartLoc, minPrec) {
          let isSatisfies;
          if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(118)))) {
            const node = this.startNodeAt(leftStartLoc);
            node.expression = left;
            node.typeAnnotation = this.tsInType(() => {
              this.next();
              if (this.match(75)) {
                if (isSatisfies) {
                  this.raise(Errors.UnexpectedKeyword, {
                    at: this.state.startLoc,
                    keyword: "const"
                  });
                }
                return this.tsParseTypeReference();
              }
              return this.tsParseType();
            });
            this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
            this.reScan_lt_gt();
            return this.parseExprOp(node, leftStartLoc, minPrec);
          }
          return super.parseExprOp(left, leftStartLoc, minPrec);
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
          if (!this.state.isAmbientContext) {
            super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
        }
        checkImportReflection(node) {
          super.checkImportReflection(node);
          if (node.module && node.importKind !== "value") {
            this.raise(TSErrors.ImportReflectionHasImportType, {
              at: node.specifiers[0].loc.start
            });
          }
        }
        checkDuplicateExports() {
        }
        isPotentialImportPhase(isExport) {
          if (super.isPotentialImportPhase(isExport))
            return true;
          if (this.isContextual(128)) {
            const ch = this.lookaheadCharCode();
            return isExport ? ch === 123 || ch === 42 : ch !== 61;
          }
          return !isExport && this.isContextual(87);
        }
        applyImportPhase(node, isExport, phase, loc) {
          super.applyImportPhase(node, isExport, phase, loc);
          if (isExport) {
            node.exportKind = phase === "type" ? "type" : "value";
          } else {
            node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
          }
        }
        parseImport(node) {
          if (this.match(131)) {
            node.importKind = "value";
            return super.parseImport(node);
          }
          let importNode;
          if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {
            node.importKind = "value";
            return this.tsParseImportEqualsDeclaration(node);
          } else if (this.isContextual(128)) {
            const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
            if (this.lookaheadCharCode() === 61) {
              return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
            } else {
              importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
            }
          } else {
            importNode = super.parseImport(node);
          }
          if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
            this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {
              at: importNode
            });
          }
          return importNode;
        }
        parseExport(node, decorators) {
          if (this.match(83)) {
            this.next();
            let maybeDefaultIdentifier = null;
            if (this.isContextual(128) && this.isPotentialImportPhase(false)) {
              maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
            } else {
              node.importKind = "value";
            }
            return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, true);
          } else if (this.eat(29)) {
            const assign = node;
            assign.expression = super.parseExpression();
            this.semicolon();
            this.sawUnambiguousESM = true;
            return this.finishNode(assign, "TSExportAssignment");
          } else if (this.eatContextual(93)) {
            const decl = node;
            this.expectContextual(126);
            decl.id = this.parseIdentifier();
            this.semicolon();
            return this.finishNode(decl, "TSNamespaceExportDeclaration");
          } else {
            return super.parseExport(node, decorators);
          }
        }
        isAbstractClass() {
          return this.isContextual(122) && this.lookahead().type === 80;
        }
        parseExportDefaultExpression() {
          if (this.isAbstractClass()) {
            const cls = this.startNode();
            this.next();
            cls.abstract = true;
            return this.parseClass(cls, true, true);
          }
          if (this.match(127)) {
            const result = this.tsParseInterfaceDeclaration(this.startNode());
            if (result)
              return result;
          }
          return super.parseExportDefaultExpression();
        }
        parseVarStatement(node, kind, allowMissingInitializer = false) {
          const {
            isAmbientContext
          } = this.state;
          const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
          if (!isAmbientContext)
            return declaration;
          for (const {
            id,
            init
          } of declaration.declarations) {
            if (!init)
              continue;
            if (kind !== "const" || !!id.typeAnnotation) {
              this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {
                at: init
              });
            } else if (!isValidAmbientConstInitializer(init, this.hasPlugin("estree"))) {
              this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {
                at: init
              });
            }
          }
          return declaration;
        }
        parseStatementContent(flags, decorators) {
          if (this.match(75) && this.isLookaheadContextual("enum")) {
            const node = this.startNode();
            this.expect(75);
            return this.tsParseEnumDeclaration(node, {
              const: true
            });
          }
          if (this.isContextual(124)) {
            return this.tsParseEnumDeclaration(this.startNode());
          }
          if (this.isContextual(127)) {
            const result = this.tsParseInterfaceDeclaration(this.startNode());
            if (result)
              return result;
          }
          return super.parseStatementContent(flags, decorators);
        }
        parseAccessModifier() {
          return this.tsParseModifier(["public", "protected", "private"]);
        }
        tsHasSomeModifiers(member, modifiers) {
          return modifiers.some((modifier) => {
            if (tsIsAccessModifier(modifier)) {
              return member.accessibility === modifier;
            }
            return !!member[modifier];
          });
        }
        tsIsStartOfStaticBlocks() {
          return this.isContextual(104) && this.lookaheadCharCode() === 123;
        }
        parseClassMember(classBody, member, state) {
          const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
          this.tsParseModifiers({
            allowedModifiers: modifiers,
            disallowedModifiers: ["in", "out"],
            stopOnStartOfClassStaticBlock: true,
            errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
          }, member);
          const callParseClassMemberWithIsStatic = () => {
            if (this.tsIsStartOfStaticBlocks()) {
              this.next();
              this.next();
              if (this.tsHasSomeModifiers(member, modifiers)) {
                this.raise(TSErrors.StaticBlockCannotHaveModifier, {
                  at: this.state.curPosition()
                });
              }
              super.parseClassStaticBlock(classBody, member);
            } else {
              this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
            }
          };
          if (member.declare) {
            this.tsInAmbientContext(callParseClassMemberWithIsStatic);
          } else {
            callParseClassMemberWithIsStatic();
          }
        }
        parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
          const idx = this.tsTryParseIndexSignature(member);
          if (idx) {
            classBody.body.push(idx);
            if (member.abstract) {
              this.raise(TSErrors.IndexSignatureHasAbstract, {
                at: member
              });
            }
            if (member.accessibility) {
              this.raise(TSErrors.IndexSignatureHasAccessibility, {
                at: member,
                modifier: member.accessibility
              });
            }
            if (member.declare) {
              this.raise(TSErrors.IndexSignatureHasDeclare, {
                at: member
              });
            }
            if (member.override) {
              this.raise(TSErrors.IndexSignatureHasOverride, {
                at: member
              });
            }
            return;
          }
          if (!this.state.inAbstractClass && member.abstract) {
            this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {
              at: member
            });
          }
          if (member.override) {
            if (!state.hadSuperClass) {
              this.raise(TSErrors.OverrideNotInSubClass, {
                at: member
              });
            }
          }
          super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
        }
        parsePostMemberNameModifiers(methodOrProp) {
          const optional = this.eat(17);
          if (optional)
            methodOrProp.optional = true;
          if (methodOrProp.readonly && this.match(10)) {
            this.raise(TSErrors.ClassMethodHasReadonly, {
              at: methodOrProp
            });
          }
          if (methodOrProp.declare && this.match(10)) {
            this.raise(TSErrors.ClassMethodHasDeclare, {
              at: methodOrProp
            });
          }
        }
        parseExpressionStatement(node, expr, decorators) {
          const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : void 0;
          return decl || super.parseExpressionStatement(node, expr, decorators);
        }
        shouldParseExportDeclaration() {
          if (this.tsIsDeclarationStart())
            return true;
          return super.shouldParseExportDeclaration();
        }
        parseConditional(expr, startLoc, refExpressionErrors) {
          if (!this.state.maybeInArrowParameters || !this.match(17)) {
            return super.parseConditional(expr, startLoc, refExpressionErrors);
          }
          const result = this.tryParse(() => super.parseConditional(expr, startLoc));
          if (!result.node) {
            if (result.error) {
              super.setOptionalParametersError(refExpressionErrors, result.error);
            }
            return expr;
          }
          if (result.error)
            this.state = result.failState;
          return result.node;
        }
        parseParenItem(node, startLoc) {
          node = super.parseParenItem(node, startLoc);
          if (this.eat(17)) {
            node.optional = true;
            this.resetEndLocation(node);
          }
          if (this.match(14)) {
            const typeCastNode = this.startNodeAt(startLoc);
            typeCastNode.expression = node;
            typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
            return this.finishNode(typeCastNode, "TSTypeCastExpression");
          }
          return node;
        }
        parseExportDeclaration(node) {
          if (!this.state.isAmbientContext && this.isContextual(123)) {
            return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
          }
          const startLoc = this.state.startLoc;
          const isDeclare = this.eatContextual(123);
          if (isDeclare && (this.isContextual(123) || !this.shouldParseExportDeclaration())) {
            throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {
              at: this.state.startLoc
            });
          }
          const isIdentifier = tokenIsIdentifier(this.state.type);
          const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
          if (!declaration)
            return null;
          if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
            node.exportKind = "type";
          }
          if (isDeclare) {
            this.resetStartLocation(declaration, startLoc);
            declaration.declare = true;
          }
          return declaration;
        }
        parseClassId(node, isStatement, optionalId, bindingType) {
          if ((!isStatement || optionalId) && this.isContextual(111)) {
            return;
          }
          super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
          if (typeParameters)
            node.typeParameters = typeParameters;
        }
        parseClassPropertyAnnotation(node) {
          if (!node.optional) {
            if (this.eat(35)) {
              node.definite = true;
            } else if (this.eat(17)) {
              node.optional = true;
            }
          }
          const type = this.tsTryParseTypeAnnotation();
          if (type)
            node.typeAnnotation = type;
        }
        parseClassProperty(node) {
          this.parseClassPropertyAnnotation(node);
          if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {
            this.raise(TSErrors.DeclareClassFieldHasInitializer, {
              at: this.state.startLoc
            });
          }
          if (node.abstract && this.match(29)) {
            const {
              key
            } = node;
            this.raise(TSErrors.AbstractPropertyHasInitializer, {
              at: this.state.startLoc,
              propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
            });
          }
          return super.parseClassProperty(node);
        }
        parseClassPrivateProperty(node) {
          if (node.abstract) {
            this.raise(TSErrors.PrivateElementHasAbstract, {
              at: node
            });
          }
          if (node.accessibility) {
            this.raise(TSErrors.PrivateElementHasAccessibility, {
              at: node,
              modifier: node.accessibility
            });
          }
          this.parseClassPropertyAnnotation(node);
          return super.parseClassPrivateProperty(node);
        }
        parseClassAccessorProperty(node) {
          this.parseClassPropertyAnnotation(node);
          if (node.optional) {
            this.raise(TSErrors.AccessorCannotBeOptional, {
              at: node
            });
          }
          return super.parseClassAccessorProperty(node);
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          if (typeParameters && isConstructor) {
            this.raise(TSErrors.ConstructorHasTypeParameters, {
              at: typeParameters
            });
          }
          const {
            declare = false,
            kind
          } = method;
          if (declare && (kind === "get" || kind === "set")) {
            this.raise(TSErrors.DeclareAccessor, {
              at: method,
              kind
            });
          }
          if (typeParameters)
            method.typeParameters = typeParameters;
          super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          if (typeParameters)
            method.typeParameters = typeParameters;
          super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
        }
        declareClassPrivateMethodInScope(node, kind) {
          if (node.type === "TSDeclareMethod")
            return;
          if (node.type === "MethodDefinition" && !node.value.body)
            return;
          super.declareClassPrivateMethodInScope(node, kind);
        }
        parseClassSuper(node) {
          super.parseClassSuper(node);
          if (node.superClass && (this.match(47) || this.match(51))) {
            node.superTypeParameters = this.tsParseTypeArgumentsInExpression();
          }
          if (this.eatContextual(111)) {
            node.implements = this.tsParseHeritageClause("implements");
          }
        }
        parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          if (typeParameters)
            prop.typeParameters = typeParameters;
          return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
        }
        parseFunctionParams(node, isConstructor) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          if (typeParameters)
            node.typeParameters = typeParameters;
          super.parseFunctionParams(node, isConstructor);
        }
        parseVarId(decl, kind) {
          super.parseVarId(decl, kind);
          if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
            decl.definite = true;
          }
          const type = this.tsTryParseTypeAnnotation();
          if (type) {
            decl.id.typeAnnotation = type;
            this.resetEndLocation(decl.id);
          }
        }
        parseAsyncArrowFromCallExpression(node, call) {
          if (this.match(14)) {
            node.returnType = this.tsParseTypeAnnotation();
          }
          return super.parseAsyncArrowFromCallExpression(node, call);
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse) {
          var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
          let state;
          let jsx2;
          let typeCast;
          if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
            state = this.state.clone();
            jsx2 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
            if (!jsx2.error)
              return jsx2.node;
            const {
              context
            } = this.state;
            const currentContext = context[context.length - 1];
            if (currentContext === types.j_oTag || currentContext === types.j_expr) {
              context.pop();
            }
          }
          if (!((_jsx = jsx2) != null && _jsx.error) && !this.match(47)) {
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          }
          if (!state || state === this.state)
            state = this.state.clone();
          let typeParameters;
          const arrow = this.tryParse((abort) => {
            var _expr$extra, _typeParameters;
            typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
            const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
              abort();
            }
            if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
              this.resetStartLocationFromNode(expr, typeParameters);
            }
            expr.typeParameters = typeParameters;
            return expr;
          }, state);
          if (!arrow.error && !arrow.aborted) {
            if (typeParameters)
              this.reportReservedArrowTypeParam(typeParameters);
            return arrow.node;
          }
          if (!jsx2) {
            assert(!this.hasPlugin("jsx"));
            typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
            if (!typeCast.error)
              return typeCast.node;
          }
          if ((_jsx2 = jsx2) != null && _jsx2.node) {
            this.state = jsx2.failState;
            return jsx2.node;
          }
          if (arrow.node) {
            this.state = arrow.failState;
            if (typeParameters)
              this.reportReservedArrowTypeParam(typeParameters);
            return arrow.node;
          }
          if ((_typeCast = typeCast) != null && _typeCast.node) {
            this.state = typeCast.failState;
            return typeCast.node;
          }
          throw ((_jsx3 = jsx2) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);
        }
        reportReservedArrowTypeParam(node) {
          var _node$extra;
          if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
            this.raise(TSErrors.ReservedArrowTypeParam, {
              at: node
            });
          }
        }
        parseMaybeUnary(refExpressionErrors, sawUnary) {
          if (!this.hasPlugin("jsx") && this.match(47)) {
            return this.tsParseTypeAssertion();
          }
          return super.parseMaybeUnary(refExpressionErrors, sawUnary);
        }
        parseArrow(node) {
          if (this.match(14)) {
            const result = this.tryParse((abort) => {
              const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
              if (this.canInsertSemicolon() || !this.match(19))
                abort();
              return returnType;
            });
            if (result.aborted)
              return;
            if (!result.thrown) {
              if (result.error)
                this.state = result.failState;
              node.returnType = result.node;
            }
          }
          return super.parseArrow(node);
        }
        parseAssignableListItemTypes(param, flags) {
          if (!(flags & 2))
            return param;
          if (this.eat(17)) {
            param.optional = true;
          }
          const type = this.tsTryParseTypeAnnotation();
          if (type)
            param.typeAnnotation = type;
          this.resetEndLocation(param);
          return param;
        }
        isAssignable(node, isBinding) {
          switch (node.type) {
            case "TSTypeCastExpression":
              return this.isAssignable(node.expression, isBinding);
            case "TSParameterProperty":
              return true;
            default:
              return super.isAssignable(node, isBinding);
          }
        }
        toAssignable(node, isLHS = false) {
          switch (node.type) {
            case "ParenthesizedExpression":
              this.toAssignableParenthesizedExpression(node, isLHS);
              break;
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSNonNullExpression":
            case "TSTypeAssertion":
              if (isLHS) {
                this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, {
                  at: node
                });
              } else {
                this.raise(TSErrors.UnexpectedTypeCastInParameter, {
                  at: node
                });
              }
              this.toAssignable(node.expression, isLHS);
              break;
            case "AssignmentExpression":
              if (!isLHS && node.left.type === "TSTypeCastExpression") {
                node.left = this.typeCastToParameter(node.left);
              }
            default:
              super.toAssignable(node, isLHS);
          }
        }
        toAssignableParenthesizedExpression(node, isLHS) {
          switch (node.expression.type) {
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSNonNullExpression":
            case "TSTypeAssertion":
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isLHS);
              break;
            default:
              super.toAssignable(node, isLHS);
          }
        }
        checkToRestConversion(node, allowPattern) {
          switch (node.type) {
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              this.checkToRestConversion(node.expression, false);
              break;
            default:
              super.checkToRestConversion(node, allowPattern);
          }
        }
        isValidLVal(type, isUnparenthesizedInAssign, binding) {
          return getOwn({
            TSTypeCastExpression: true,
            TSParameterProperty: "parameter",
            TSNonNullExpression: "expression",
            TSAsExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && ["expression", true],
            TSSatisfiesExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && ["expression", true],
            TSTypeAssertion: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && ["expression", true]
          }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
        }
        parseBindingAtom() {
          if (this.state.type === 78) {
            return this.parseIdentifier(true);
          }
          return super.parseBindingAtom();
        }
        parseMaybeDecoratorArguments(expr) {
          if (this.match(47) || this.match(51)) {
            const typeArguments = this.tsParseTypeArgumentsInExpression();
            if (this.match(10)) {
              const call = super.parseMaybeDecoratorArguments(expr);
              call.typeParameters = typeArguments;
              return call;
            }
            this.unexpected(null, 10);
          }
          return super.parseMaybeDecoratorArguments(expr);
        }
        checkCommaAfterRest(close) {
          if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
            this.next();
            return false;
          }
          return super.checkCommaAfterRest(close);
        }
        isClassMethod() {
          return this.match(47) || super.isClassMethod();
        }
        isClassProperty() {
          return this.match(35) || this.match(14) || super.isClassProperty();
        }
        parseMaybeDefault(startLoc, left) {
          const node = super.parseMaybeDefault(startLoc, left);
          if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
            this.raise(TSErrors.TypeAnnotationAfterAssign, {
              at: node.typeAnnotation
            });
          }
          return node;
        }
        getTokenFromCode(code) {
          if (this.state.inType) {
            if (code === 62) {
              this.finishOp(48, 1);
              return;
            }
            if (code === 60) {
              this.finishOp(47, 1);
              return;
            }
          }
          super.getTokenFromCode(code);
        }
        reScan_lt_gt() {
          const {
            type
          } = this.state;
          if (type === 47) {
            this.state.pos -= 1;
            this.readToken_lt();
          } else if (type === 48) {
            this.state.pos -= 1;
            this.readToken_gt();
          }
        }
        reScan_lt() {
          const {
            type
          } = this.state;
          if (type === 51) {
            this.state.pos -= 2;
            this.finishOp(47, 1);
            return 47;
          }
          return type;
        }
        toAssignableList(exprList, trailingCommaLoc, isLHS) {
          for (let i = 0; i < exprList.length; i++) {
            const expr = exprList[i];
            if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {
              exprList[i] = this.typeCastToParameter(expr);
            }
          }
          super.toAssignableList(exprList, trailingCommaLoc, isLHS);
        }
        typeCastToParameter(node) {
          node.expression.typeAnnotation = node.typeAnnotation;
          this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
          return node.expression;
        }
        shouldParseArrow(params) {
          if (this.match(14)) {
            return params.every((expr) => this.isAssignable(expr, true));
          }
          return super.shouldParseArrow(params);
        }
        shouldParseAsyncArrow() {
          return this.match(14) || super.shouldParseAsyncArrow();
        }
        canHaveLeadingDecorator() {
          return super.canHaveLeadingDecorator() || this.isAbstractClass();
        }
        jsxParseOpeningElementAfterName(node) {
          if (this.match(47) || this.match(51)) {
            const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
            if (typeArguments)
              node.typeParameters = typeArguments;
          }
          return super.jsxParseOpeningElementAfterName(node);
        }
        getGetterSetterExpectedParamCount(method) {
          const baseCount = super.getGetterSetterExpectedParamCount(method);
          const params = this.getObjectOrClassMethodParams(method);
          const firstParam = params[0];
          const hasContextParam = firstParam && this.isThisParam(firstParam);
          return hasContextParam ? baseCount + 1 : baseCount;
        }
        parseCatchClauseParam() {
          const param = super.parseCatchClauseParam();
          const type = this.tsTryParseTypeAnnotation();
          if (type) {
            param.typeAnnotation = type;
            this.resetEndLocation(param);
          }
          return param;
        }
        tsInAmbientContext(cb) {
          const oldIsAmbientContext = this.state.isAmbientContext;
          this.state.isAmbientContext = true;
          try {
            return cb();
          } finally {
            this.state.isAmbientContext = oldIsAmbientContext;
          }
        }
        parseClass(node, isStatement, optionalId) {
          const oldInAbstractClass = this.state.inAbstractClass;
          this.state.inAbstractClass = !!node.abstract;
          try {
            return super.parseClass(node, isStatement, optionalId);
          } finally {
            this.state.inAbstractClass = oldInAbstractClass;
          }
        }
        tsParseAbstractDeclaration(node, decorators) {
          if (this.match(80)) {
            node.abstract = true;
            return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
          } else if (this.isContextual(127)) {
            if (!this.hasFollowingLineBreak()) {
              node.abstract = true;
              this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {
                at: node
              });
              return this.tsParseInterfaceDeclaration(node);
            }
          } else {
            this.unexpected(null, 80);
          }
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
          const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
          if (method.abstract) {
            const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
            if (hasBody) {
              const {
                key
              } = method;
              this.raise(TSErrors.AbstractMethodHasImplementation, {
                at: method,
                methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
              });
            }
          }
          return method;
        }
        tsParseTypeParameterName() {
          const typeName = this.parseIdentifier();
          return typeName.name;
        }
        shouldParseAsAmbientContext() {
          return !!this.getPluginOption("typescript", "dts");
        }
        parse() {
          if (this.shouldParseAsAmbientContext()) {
            this.state.isAmbientContext = true;
          }
          return super.parse();
        }
        getExpression() {
          if (this.shouldParseAsAmbientContext()) {
            this.state.isAmbientContext = true;
          }
          return super.getExpression();
        }
        parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
          if (!isString && isMaybeTypeOnly) {
            this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
            return this.finishNode(node, "ExportSpecifier");
          }
          node.exportKind = "value";
          return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);
        }
        parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
          if (!importedIsString && isMaybeTypeOnly) {
            this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
            return this.finishNode(specifier, "ImportSpecifier");
          }
          specifier.importKind = "value";
          return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);
        }
        parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
          const leftOfAsKey = isImport ? "imported" : "local";
          const rightOfAsKey = isImport ? "local" : "exported";
          let leftOfAs = node[leftOfAsKey];
          let rightOfAs;
          let hasTypeSpecifier = false;
          let canParseAsKeyword = true;
          const loc = leftOfAs.loc.start;
          if (this.isContextual(93)) {
            const firstAs = this.parseIdentifier();
            if (this.isContextual(93)) {
              const secondAs = this.parseIdentifier();
              if (tokenIsKeywordOrIdentifier(this.state.type)) {
                hasTypeSpecifier = true;
                leftOfAs = firstAs;
                rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
                canParseAsKeyword = false;
              } else {
                rightOfAs = secondAs;
                canParseAsKeyword = false;
              }
            } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
              canParseAsKeyword = false;
              rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
            } else {
              hasTypeSpecifier = true;
              leftOfAs = firstAs;
            }
          } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
            hasTypeSpecifier = true;
            if (isImport) {
              leftOfAs = this.parseIdentifier(true);
              if (!this.isContextual(93)) {
                this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
              }
            } else {
              leftOfAs = this.parseModuleExportName();
            }
          }
          if (hasTypeSpecifier && isInTypeOnlyImportExport) {
            this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {
              at: loc
            });
          }
          node[leftOfAsKey] = leftOfAs;
          node[rightOfAsKey] = rightOfAs;
          const kindKey = isImport ? "importKind" : "exportKind";
          node[kindKey] = hasTypeSpecifier ? "type" : "value";
          if (canParseAsKeyword && this.eatContextual(93)) {
            node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
          }
          if (!node[rightOfAsKey]) {
            node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
          }
          if (isImport) {
            this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);
          }
        }
      };
      function isPossiblyLiteralEnum(expression) {
        if (expression.type !== "MemberExpression")
          return false;
        const {
          computed,
          property
        } = expression;
        if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
          return false;
        }
        return isUncomputedMemberExpressionChain(expression.object);
      }
      function isValidAmbientConstInitializer(expression, estree2) {
        var _expression$extra;
        const {
          type
        } = expression;
        if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {
          return false;
        }
        if (estree2) {
          if (type === "Literal") {
            const {
              value
            } = expression;
            if (typeof value === "string" || typeof value === "boolean") {
              return true;
            }
          }
        } else {
          if (type === "StringLiteral" || type === "BooleanLiteral") {
            return true;
          }
        }
        if (isNumber(expression, estree2) || isNegativeNumber(expression, estree2)) {
          return true;
        }
        if (type === "TemplateLiteral" && expression.expressions.length === 0) {
          return true;
        }
        if (isPossiblyLiteralEnum(expression)) {
          return true;
        }
        return false;
      }
      function isNumber(expression, estree2) {
        if (estree2) {
          return expression.type === "Literal" && (typeof expression.value === "number" || "bigint" in expression);
        }
        return expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";
      }
      function isNegativeNumber(expression, estree2) {
        if (expression.type === "UnaryExpression") {
          const {
            operator,
            argument
          } = expression;
          if (operator === "-" && isNumber(argument, estree2)) {
            return true;
          }
        }
        return false;
      }
      function isUncomputedMemberExpressionChain(expression) {
        if (expression.type === "Identifier")
          return true;
        if (expression.type !== "MemberExpression" || expression.computed) {
          return false;
        }
        return isUncomputedMemberExpressionChain(expression.object);
      }
      var PlaceholderErrors = ParseErrorEnum`placeholders`({
        ClassNameIsRequired: "A class name is required.",
        UnexpectedSpace: "Unexpected space in placeholder."
      });
      var placeholders = (superClass) => class PlaceholdersParserMixin extends superClass {
        parsePlaceholder(expectedNode) {
          if (this.match(142)) {
            const node = this.startNode();
            this.next();
            this.assertNoSpace();
            node.name = super.parseIdentifier(true);
            this.assertNoSpace();
            this.expect(142);
            return this.finishPlaceholder(node, expectedNode);
          }
        }
        finishPlaceholder(node, expectedNode) {
          const isFinished = !!(node.expectedNode && node.type === "Placeholder");
          node.expectedNode = expectedNode;
          return isFinished ? node : this.finishNode(node, "Placeholder");
        }
        getTokenFromCode(code) {
          if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
            this.finishOp(142, 2);
          } else {
            super.getTokenFromCode(code);
          }
        }
        parseExprAtom(refExpressionErrors) {
          return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
        }
        parseIdentifier(liberal) {
          return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
          if (word !== void 0) {
            super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
        }
        parseBindingAtom() {
          return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
        }
        isValidLVal(type, isParenthesized, binding) {
          return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);
        }
        toAssignable(node, isLHS) {
          if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
            node.expectedNode = "Pattern";
          } else {
            super.toAssignable(node, isLHS);
          }
        }
        chStartsBindingIdentifier(ch, pos) {
          if (super.chStartsBindingIdentifier(ch, pos)) {
            return true;
          }
          const nextToken = this.lookahead();
          if (nextToken.type === 142) {
            return true;
          }
          return false;
        }
        verifyBreakContinue(node, isBreak) {
          if (node.label && node.label.type === "Placeholder")
            return;
          super.verifyBreakContinue(node, isBreak);
        }
        parseExpressionStatement(node, expr) {
          if (expr.type !== "Placeholder" || expr.extra && expr.extra.parenthesized) {
            return super.parseExpressionStatement(node, expr);
          }
          if (this.match(14)) {
            const stmt = node;
            stmt.label = this.finishPlaceholder(expr, "Identifier");
            this.next();
            stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();
            return this.finishNode(stmt, "LabeledStatement");
          }
          this.semicolon();
          node.name = expr.name;
          return this.finishPlaceholder(node, "Statement");
        }
        parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
          return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
        }
        parseFunctionId(requireId) {
          return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
        }
        parseClass(node, isStatement, optionalId) {
          const type = isStatement ? "ClassDeclaration" : "ClassExpression";
          this.next();
          const oldStrict = this.state.strict;
          const placeholder = this.parsePlaceholder("Identifier");
          if (placeholder) {
            if (this.match(81) || this.match(142) || this.match(5)) {
              node.id = placeholder;
            } else if (optionalId || !isStatement) {
              node.id = null;
              node.body = this.finishPlaceholder(placeholder, "ClassBody");
              return this.finishNode(node, type);
            } else {
              throw this.raise(PlaceholderErrors.ClassNameIsRequired, {
                at: this.state.startLoc
              });
            }
          } else {
            this.parseClassId(node, isStatement, optionalId);
          }
          super.parseClassSuper(node);
          node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict);
          return this.finishNode(node, type);
        }
        parseExport(node, decorators) {
          const placeholder = this.parsePlaceholder("Identifier");
          if (!placeholder)
            return super.parseExport(node, decorators);
          if (!this.isContextual(97) && !this.match(12)) {
            node.specifiers = [];
            node.source = null;
            node.declaration = this.finishPlaceholder(placeholder, "Declaration");
            return this.finishNode(node, "ExportNamedDeclaration");
          }
          this.expectPlugin("exportDefaultFrom");
          const specifier = this.startNode();
          specifier.exported = placeholder;
          node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
          return super.parseExport(node, decorators);
        }
        isExportDefaultSpecifier() {
          if (this.match(65)) {
            const next = this.nextTokenStart();
            if (this.isUnparsedContextual(next, "from")) {
              if (this.input.startsWith(tokenLabelName(142), this.nextTokenStartSince(next + 4))) {
                return true;
              }
            }
          }
          return super.isExportDefaultSpecifier();
        }
        maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
          var _specifiers;
          if ((_specifiers = node.specifiers) != null && _specifiers.length) {
            return true;
          }
          return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
        }
        checkExport(node) {
          const {
            specifiers
          } = node;
          if (specifiers != null && specifiers.length) {
            node.specifiers = specifiers.filter((node2) => node2.exported.type === "Placeholder");
          }
          super.checkExport(node);
          node.specifiers = specifiers;
        }
        parseImport(node) {
          const placeholder = this.parsePlaceholder("Identifier");
          if (!placeholder)
            return super.parseImport(node);
          node.specifiers = [];
          if (!this.isContextual(97) && !this.match(12)) {
            node.source = this.finishPlaceholder(placeholder, "StringLiteral");
            this.semicolon();
            return this.finishNode(node, "ImportDeclaration");
          }
          const specifier = this.startNodeAtNode(placeholder);
          specifier.local = placeholder;
          node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));
          if (this.eat(12)) {
            const hasStarImport = this.maybeParseStarImportSpecifier(node);
            if (!hasStarImport)
              this.parseNamedImportSpecifiers(node);
          }
          this.expectContextual(97);
          node.source = this.parseImportSource();
          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        }
        parseImportSource() {
          return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
        }
        assertNoSpace() {
          if (this.state.start > this.state.lastTokEndLoc.index) {
            this.raise(PlaceholderErrors.UnexpectedSpace, {
              at: this.state.lastTokEndLoc
            });
          }
        }
      };
      var v8intrinsic = (superClass) => class V8IntrinsicMixin extends superClass {
        parseV8Intrinsic() {
          if (this.match(54)) {
            const v8IntrinsicStartLoc = this.state.startLoc;
            const node = this.startNode();
            this.next();
            if (tokenIsIdentifier(this.state.type)) {
              const name = this.parseIdentifierName();
              const identifier = this.createIdentifier(node, name);
              identifier.type = "V8IntrinsicIdentifier";
              if (this.match(10)) {
                return identifier;
              }
            }
            this.unexpected(v8IntrinsicStartLoc);
          }
        }
        parseExprAtom(refExpressionErrors) {
          return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
        }
      };
      function hasPlugin(plugins, expectedConfig) {
        const [expectedName, expectedOptions] = typeof expectedConfig === "string" ? [expectedConfig, {}] : expectedConfig;
        const expectedKeys = Object.keys(expectedOptions);
        const expectedOptionsIsEmpty = expectedKeys.length === 0;
        return plugins.some((p) => {
          if (typeof p === "string") {
            return expectedOptionsIsEmpty && p === expectedName;
          } else {
            const [pluginName, pluginOptions] = p;
            if (pluginName !== expectedName) {
              return false;
            }
            for (const key of expectedKeys) {
              if (pluginOptions[key] !== expectedOptions[key]) {
                return false;
              }
            }
            return true;
          }
        });
      }
      function getPluginOption(plugins, name, option) {
        const plugin = plugins.find((plugin2) => {
          if (Array.isArray(plugin2)) {
            return plugin2[0] === name;
          } else {
            return plugin2 === name;
          }
        });
        if (plugin && Array.isArray(plugin) && plugin.length > 1) {
          return plugin[1][option];
        }
        return null;
      }
      var PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
      var TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
      var RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
      function validatePlugins(plugins) {
        if (hasPlugin(plugins, "decorators")) {
          if (hasPlugin(plugins, "decorators-legacy")) {
            throw new Error("Cannot use the decorators and decorators-legacy plugin together");
          }
          const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
          if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {
            throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
          }
          const allowCallParenthesized = getPluginOption(plugins, "decorators", "allowCallParenthesized");
          if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {
            throw new Error("'allowCallParenthesized' must be a boolean.");
          }
        }
        if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
          throw new Error("Cannot combine flow and typescript plugins.");
        }
        if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
          throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
        }
        if (hasPlugin(plugins, "pipelineOperator")) {
          const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
          if (!PIPELINE_PROPOSALS.includes(proposal)) {
            const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
            throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
          }
          const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", {
            syntaxType: "hash"
          }]);
          if (proposal === "hack") {
            if (hasPlugin(plugins, "placeholders")) {
              throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
            }
            if (hasPlugin(plugins, "v8intrinsic")) {
              throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
            }
            const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
            if (!TOPIC_TOKENS.includes(topicToken)) {
              const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
              throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
            }
            if (topicToken === "#" && tupleSyntaxIsHash) {
              throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
            }
          } else if (proposal === "smart" && tupleSyntaxIsHash) {
            throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
          }
        }
        if (hasPlugin(plugins, "moduleAttributes")) {
          {
            if (hasPlugin(plugins, "importAssertions") || hasPlugin(plugins, "importAttributes")) {
              throw new Error("Cannot combine importAssertions, importAttributes and moduleAttributes plugins.");
            }
            const moduleAttributesVersionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");
            if (moduleAttributesVersionPluginOption !== "may-2020") {
              throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
            }
          }
        }
        if (hasPlugin(plugins, "importAssertions") && hasPlugin(plugins, "importAttributes")) {
          throw new Error("Cannot combine importAssertions and importAttributes plugins.");
        }
        if (hasPlugin(plugins, "recordAndTuple") && getPluginOption(plugins, "recordAndTuple", "syntaxType") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) {
          throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
        }
        if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
          const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
          error.missingPlugins = "doExpressions";
          throw error;
        }
      }
      var mixinPlugins = {
        estree,
        jsx,
        flow,
        typescript,
        v8intrinsic,
        placeholders
      };
      var mixinPluginNames = Object.keys(mixinPlugins);
      var defaultOptions = {
        sourceType: "script",
        sourceFilename: void 0,
        startColumn: 0,
        startLine: 1,
        allowAwaitOutsideFunction: false,
        allowReturnOutsideFunction: false,
        allowNewTargetOutsideFunction: false,
        allowImportExportEverywhere: false,
        allowSuperOutsideMethod: false,
        allowUndeclaredExports: false,
        plugins: [],
        strictMode: null,
        ranges: false,
        tokens: false,
        createParenthesizedExpressions: false,
        errorRecovery: false,
        attachComment: true,
        annexB: true
      };
      function getOptions(opts) {
        if (opts && opts.annexB != null && opts.annexB !== false) {
          throw new Error("The `annexB` option can only be set to `false`.");
        }
        const options = {};
        for (const key of Object.keys(defaultOptions)) {
          options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];
        }
        return options;
      }
      var ExpressionParser = class extends LValParser {
        checkProto(prop, isRecord, protoRef, refExpressionErrors) {
          if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
            return;
          }
          const key = prop.key;
          const name = key.type === "Identifier" ? key.name : key.value;
          if (name === "__proto__") {
            if (isRecord) {
              this.raise(Errors.RecordNoProto, {
                at: key
              });
              return;
            }
            if (protoRef.used) {
              if (refExpressionErrors) {
                if (refExpressionErrors.doubleProtoLoc === null) {
                  refExpressionErrors.doubleProtoLoc = key.loc.start;
                }
              } else {
                this.raise(Errors.DuplicateProto, {
                  at: key
                });
              }
            }
            protoRef.used = true;
          }
        }
        shouldExitDescending(expr, potentialArrowAt) {
          return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
        }
        getExpression() {
          this.enterInitialScopes();
          this.nextToken();
          const expr = this.parseExpression();
          if (!this.match(137)) {
            this.unexpected();
          }
          this.finalizeRemainingComments();
          expr.comments = this.state.comments;
          expr.errors = this.state.errors;
          if (this.options.tokens) {
            expr.tokens = this.tokens;
          }
          return expr;
        }
        parseExpression(disallowIn, refExpressionErrors) {
          if (disallowIn) {
            return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
          }
          return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
        }
        parseExpressionBase(refExpressionErrors) {
          const startLoc = this.state.startLoc;
          const expr = this.parseMaybeAssign(refExpressionErrors);
          if (this.match(12)) {
            const node = this.startNodeAt(startLoc);
            node.expressions = [expr];
            while (this.eat(12)) {
              node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
            }
            this.toReferencedList(node.expressions);
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        }
        parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
          return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
        }
        parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
          return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
        }
        setOptionalParametersError(refExpressionErrors, resultError) {
          var _resultError$loc;
          refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse) {
          const startLoc = this.state.startLoc;
          if (this.isContextual(106)) {
            if (this.prodParam.hasYield) {
              let left2 = this.parseYield();
              if (afterLeftParse) {
                left2 = afterLeftParse.call(this, left2, startLoc);
              }
              return left2;
            }
          }
          let ownExpressionErrors;
          if (refExpressionErrors) {
            ownExpressionErrors = false;
          } else {
            refExpressionErrors = new ExpressionErrors();
            ownExpressionErrors = true;
          }
          const {
            type
          } = this.state;
          if (type === 10 || tokenIsIdentifier(type)) {
            this.state.potentialArrowAt = this.state.start;
          }
          let left = this.parseMaybeConditional(refExpressionErrors);
          if (afterLeftParse) {
            left = afterLeftParse.call(this, left, startLoc);
          }
          if (tokenIsAssignment(this.state.type)) {
            const node = this.startNodeAt(startLoc);
            const operator = this.state.value;
            node.operator = operator;
            if (this.match(29)) {
              this.toAssignable(left, true);
              node.left = left;
              const startIndex = startLoc.index;
              if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {
                refExpressionErrors.doubleProtoLoc = null;
              }
              if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {
                refExpressionErrors.shorthandAssignLoc = null;
              }
              if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
                this.checkDestructuringPrivate(refExpressionErrors);
                refExpressionErrors.privateKeyLoc = null;
              }
            } else {
              node.left = left;
            }
            this.next();
            node.right = this.parseMaybeAssign();
            this.checkLVal(left, {
              in: this.finishNode(node, "AssignmentExpression")
            });
            return node;
          } else if (ownExpressionErrors) {
            this.checkExpressionErrors(refExpressionErrors, true);
          }
          return left;
        }
        parseMaybeConditional(refExpressionErrors) {
          const startLoc = this.state.startLoc;
          const potentialArrowAt = this.state.potentialArrowAt;
          const expr = this.parseExprOps(refExpressionErrors);
          if (this.shouldExitDescending(expr, potentialArrowAt)) {
            return expr;
          }
          return this.parseConditional(expr, startLoc, refExpressionErrors);
        }
        parseConditional(expr, startLoc, refExpressionErrors) {
          if (this.eat(17)) {
            const node = this.startNodeAt(startLoc);
            node.test = expr;
            node.consequent = this.parseMaybeAssignAllowIn();
            this.expect(14);
            node.alternate = this.parseMaybeAssign();
            return this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        }
        parseMaybeUnaryOrPrivate(refExpressionErrors) {
          return this.match(136) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
        }
        parseExprOps(refExpressionErrors) {
          const startLoc = this.state.startLoc;
          const potentialArrowAt = this.state.potentialArrowAt;
          const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
          if (this.shouldExitDescending(expr, potentialArrowAt)) {
            return expr;
          }
          return this.parseExprOp(expr, startLoc, -1);
        }
        parseExprOp(left, leftStartLoc, minPrec) {
          if (this.isPrivateName(left)) {
            const value = this.getPrivateNameSV(left);
            if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
              this.raise(Errors.PrivateInExpectedIn, {
                at: left,
                identifierName: value
              });
            }
            this.classScope.usePrivateName(value, left.loc.start);
          }
          const op = this.state.type;
          if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
            let prec = tokenOperatorPrecedence(op);
            if (prec > minPrec) {
              if (op === 39) {
                this.expectPlugin("pipelineOperator");
                if (this.state.inFSharpPipelineDirectBody) {
                  return left;
                }
                this.checkPipelineAtInfixOperator(left, leftStartLoc);
              }
              const node = this.startNodeAt(leftStartLoc);
              node.left = left;
              node.operator = this.state.value;
              const logical = op === 41 || op === 42;
              const coalesce = op === 40;
              if (coalesce) {
                prec = tokenOperatorPrecedence(42);
              }
              this.next();
              if (op === 39 && this.hasPlugin(["pipelineOperator", {
                proposal: "minimal"
              }])) {
                if (this.state.type === 96 && this.prodParam.hasAwait) {
                  throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {
                    at: this.state.startLoc
                  });
                }
              }
              node.right = this.parseExprOpRightExpr(op, prec);
              const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
              const nextOp = this.state.type;
              if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
                throw this.raise(Errors.MixingCoalesceWithLogical, {
                  at: this.state.startLoc
                });
              }
              return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
            }
          }
          return left;
        }
        parseExprOpRightExpr(op, prec) {
          const startLoc = this.state.startLoc;
          switch (op) {
            case 39:
              switch (this.getPluginOption("pipelineOperator", "proposal")) {
                case "hack":
                  return this.withTopicBindingContext(() => {
                    return this.parseHackPipeBody();
                  });
                case "smart":
                  return this.withTopicBindingContext(() => {
                    if (this.prodParam.hasYield && this.isContextual(106)) {
                      throw this.raise(Errors.PipeBodyIsTighter, {
                        at: this.state.startLoc
                      });
                    }
                    return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
                  });
                case "fsharp":
                  return this.withSoloAwaitPermittingContext(() => {
                    return this.parseFSharpPipelineBody(prec);
                  });
              }
            default:
              return this.parseExprOpBaseRightExpr(op, prec);
          }
        }
        parseExprOpBaseRightExpr(op, prec) {
          const startLoc = this.state.startLoc;
          return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
        }
        parseHackPipeBody() {
          var _body$extra;
          const {
            startLoc
          } = this.state;
          const body = this.parseMaybeAssign();
          const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);
          if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
            this.raise(Errors.PipeUnparenthesizedBody, {
              at: startLoc,
              type: body.type
            });
          }
          if (!this.topicReferenceWasUsedInCurrentContext()) {
            this.raise(Errors.PipeTopicUnused, {
              at: startLoc
            });
          }
          return body;
        }
        checkExponentialAfterUnary(node) {
          if (this.match(57)) {
            this.raise(Errors.UnexpectedTokenUnaryExponentiation, {
              at: node.argument
            });
          }
        }
        parseMaybeUnary(refExpressionErrors, sawUnary) {
          const startLoc = this.state.startLoc;
          const isAwait = this.isContextual(96);
          if (isAwait && this.isAwaitAllowed()) {
            this.next();
            const expr2 = this.parseAwait(startLoc);
            if (!sawUnary)
              this.checkExponentialAfterUnary(expr2);
            return expr2;
          }
          const update = this.match(34);
          const node = this.startNode();
          if (tokenIsPrefix(this.state.type)) {
            node.operator = this.state.value;
            node.prefix = true;
            if (this.match(72)) {
              this.expectPlugin("throwExpressions");
            }
            const isDelete = this.match(89);
            this.next();
            node.argument = this.parseMaybeUnary(null, true);
            this.checkExpressionErrors(refExpressionErrors, true);
            if (this.state.strict && isDelete) {
              const arg = node.argument;
              if (arg.type === "Identifier") {
                this.raise(Errors.StrictDelete, {
                  at: node
                });
              } else if (this.hasPropertyAsPrivateName(arg)) {
                this.raise(Errors.DeletePrivateField, {
                  at: node
                });
              }
            }
            if (!update) {
              if (!sawUnary) {
                this.checkExponentialAfterUnary(node);
              }
              return this.finishNode(node, "UnaryExpression");
            }
          }
          const expr = this.parseUpdate(node, update, refExpressionErrors);
          if (isAwait) {
            const {
              type
            } = this.state;
            const startsExpr2 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);
            if (startsExpr2 && !this.isAmbiguousAwait()) {
              this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {
                at: startLoc
              });
              return this.parseAwait(startLoc);
            }
          }
          return expr;
        }
        parseUpdate(node, update, refExpressionErrors) {
          if (update) {
            const updateExpressionNode = node;
            this.checkLVal(updateExpressionNode.argument, {
              in: this.finishNode(updateExpressionNode, "UpdateExpression")
            });
            return node;
          }
          const startLoc = this.state.startLoc;
          let expr = this.parseExprSubscripts(refExpressionErrors);
          if (this.checkExpressionErrors(refExpressionErrors, false))
            return expr;
          while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
            const node2 = this.startNodeAt(startLoc);
            node2.operator = this.state.value;
            node2.prefix = false;
            node2.argument = expr;
            this.next();
            this.checkLVal(expr, {
              in: expr = this.finishNode(node2, "UpdateExpression")
            });
          }
          return expr;
        }
        parseExprSubscripts(refExpressionErrors) {
          const startLoc = this.state.startLoc;
          const potentialArrowAt = this.state.potentialArrowAt;
          const expr = this.parseExprAtom(refExpressionErrors);
          if (this.shouldExitDescending(expr, potentialArrowAt)) {
            return expr;
          }
          return this.parseSubscripts(expr, startLoc);
        }
        parseSubscripts(base, startLoc, noCalls) {
          const state = {
            optionalChainMember: false,
            maybeAsyncArrow: this.atPossibleAsyncArrow(base),
            stop: false
          };
          do {
            base = this.parseSubscript(base, startLoc, noCalls, state);
            state.maybeAsyncArrow = false;
          } while (!state.stop);
          return base;
        }
        parseSubscript(base, startLoc, noCalls, state) {
          const {
            type
          } = this.state;
          if (!noCalls && type === 15) {
            return this.parseBind(base, startLoc, noCalls, state);
          } else if (tokenIsTemplate(type)) {
            return this.parseTaggedTemplateExpression(base, startLoc, state);
          }
          let optional = false;
          if (type === 18) {
            if (noCalls) {
              this.raise(Errors.OptionalChainingNoNew, {
                at: this.state.startLoc
              });
              if (this.lookaheadCharCode() === 40) {
                state.stop = true;
                return base;
              }
            }
            state.optionalChainMember = optional = true;
            this.next();
          }
          if (!noCalls && this.match(10)) {
            return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
          } else {
            const computed = this.eat(0);
            if (computed || optional || this.eat(16)) {
              return this.parseMember(base, startLoc, state, computed, optional);
            } else {
              state.stop = true;
              return base;
            }
          }
        }
        parseMember(base, startLoc, state, computed, optional) {
          const node = this.startNodeAt(startLoc);
          node.object = base;
          node.computed = computed;
          if (computed) {
            node.property = this.parseExpression();
            this.expect(3);
          } else if (this.match(136)) {
            if (base.type === "Super") {
              this.raise(Errors.SuperPrivateField, {
                at: startLoc
              });
            }
            this.classScope.usePrivateName(this.state.value, this.state.startLoc);
            node.property = this.parsePrivateName();
          } else {
            node.property = this.parseIdentifier(true);
          }
          if (state.optionalChainMember) {
            node.optional = optional;
            return this.finishNode(node, "OptionalMemberExpression");
          } else {
            return this.finishNode(node, "MemberExpression");
          }
        }
        parseBind(base, startLoc, noCalls, state) {
          const node = this.startNodeAt(startLoc);
          node.object = base;
          this.next();
          node.callee = this.parseNoCallExpr();
          state.stop = true;
          return this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
        }
        parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          let refExpressionErrors = null;
          this.state.maybeInArrowParameters = true;
          this.next();
          const node = this.startNodeAt(startLoc);
          node.callee = base;
          const {
            maybeAsyncArrow,
            optionalChainMember
          } = state;
          if (maybeAsyncArrow) {
            this.expressionScope.enter(newAsyncArrowScope());
            refExpressionErrors = new ExpressionErrors();
          }
          if (optionalChainMember) {
            node.optional = optional;
          }
          if (optional) {
            node.arguments = this.parseCallExpressionArguments(11);
          } else {
            node.arguments = this.parseCallExpressionArguments(11, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
          }
          let finishedNode = this.finishCallExpression(node, optionalChainMember);
          if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
            state.stop = true;
            this.checkDestructuringPrivate(refExpressionErrors);
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
          } else {
            if (maybeAsyncArrow) {
              this.checkExpressionErrors(refExpressionErrors, true);
              this.expressionScope.exit();
            }
            this.toReferencedArguments(finishedNode);
          }
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          return finishedNode;
        }
        toReferencedArguments(node, isParenthesizedExpr) {
          this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
        }
        parseTaggedTemplateExpression(base, startLoc, state) {
          const node = this.startNodeAt(startLoc);
          node.tag = base;
          node.quasi = this.parseTemplate(true);
          if (state.optionalChainMember) {
            this.raise(Errors.OptionalChainingNoTemplate, {
              at: startLoc
            });
          }
          return this.finishNode(node, "TaggedTemplateExpression");
        }
        atPossibleAsyncArrow(base) {
          return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
        }
        expectImportAttributesPlugin() {
          if (!this.hasPlugin("importAssertions")) {
            this.expectPlugin("importAttributes");
          }
        }
        finishCallExpression(node, optional) {
          if (node.callee.type === "Import") {
            if (node.arguments.length === 2) {
              {
                if (!this.hasPlugin("moduleAttributes")) {
                  this.expectImportAttributesPlugin();
                }
              }
            }
            if (node.arguments.length === 0 || node.arguments.length > 2) {
              this.raise(Errors.ImportCallArity, {
                at: node,
                maxArgumentCount: this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
              });
            } else {
              for (const arg of node.arguments) {
                if (arg.type === "SpreadElement") {
                  this.raise(Errors.ImportCallSpreadArgument, {
                    at: arg
                  });
                }
              }
            }
          }
          return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
        }
        parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
          const elts = [];
          let first = true;
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = false;
          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
              if (this.match(close)) {
                if (dynamicImport && !this.hasPlugin("importAttributes") && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
                  this.raise(Errors.ImportCallArgumentTrailingComma, {
                    at: this.state.lastTokStartLoc
                  });
                }
                if (nodeForExtra) {
                  this.addTrailingCommaExtraToNode(nodeForExtra);
                }
                this.next();
                break;
              }
            }
            elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
          }
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          return elts;
        }
        shouldParseAsyncArrow() {
          return this.match(19) && !this.canInsertSemicolon();
        }
        parseAsyncArrowFromCallExpression(node, call) {
          var _call$extra;
          this.resetPreviousNodeTrailingComments(call);
          this.expect(19);
          this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
          if (call.innerComments) {
            setInnerComments(node, call.innerComments);
          }
          if (call.callee.trailingComments) {
            setInnerComments(node, call.callee.trailingComments);
          }
          return node;
        }
        parseNoCallExpr() {
          const startLoc = this.state.startLoc;
          return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
        }
        parseExprAtom(refExpressionErrors) {
          let node;
          let decorators = null;
          const {
            type
          } = this.state;
          switch (type) {
            case 79:
              return this.parseSuper();
            case 83:
              node = this.startNode();
              this.next();
              if (this.match(16)) {
                return this.parseImportMetaProperty(node);
              }
              if (!this.match(10)) {
                this.raise(Errors.UnsupportedImport, {
                  at: this.state.lastTokStartLoc
                });
              }
              return this.finishNode(node, "Import");
            case 78:
              node = this.startNode();
              this.next();
              return this.finishNode(node, "ThisExpression");
            case 90: {
              return this.parseDo(this.startNode(), false);
            }
            case 56:
            case 31: {
              this.readRegexp();
              return this.parseRegExpLiteral(this.state.value);
            }
            case 132:
              return this.parseNumericLiteral(this.state.value);
            case 133:
              return this.parseBigIntLiteral(this.state.value);
            case 134:
              return this.parseDecimalLiteral(this.state.value);
            case 131:
              return this.parseStringLiteral(this.state.value);
            case 84:
              return this.parseNullLiteral();
            case 85:
              return this.parseBooleanLiteral(true);
            case 86:
              return this.parseBooleanLiteral(false);
            case 10: {
              const canBeArrow = this.state.potentialArrowAt === this.state.start;
              return this.parseParenAndDistinguishExpression(canBeArrow);
            }
            case 2:
            case 1: {
              return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
            }
            case 0: {
              return this.parseArrayLike(3, true, false, refExpressionErrors);
            }
            case 6:
            case 7: {
              return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
            }
            case 5: {
              return this.parseObjectLike(8, false, false, refExpressionErrors);
            }
            case 68:
              return this.parseFunctionOrFunctionSent();
            case 26:
              decorators = this.parseDecorators();
            case 80:
              return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
            case 77:
              return this.parseNewOrNewTarget();
            case 25:
            case 24:
              return this.parseTemplate(false);
            case 15: {
              node = this.startNode();
              this.next();
              node.object = null;
              const callee = node.callee = this.parseNoCallExpr();
              if (callee.type === "MemberExpression") {
                return this.finishNode(node, "BindExpression");
              } else {
                throw this.raise(Errors.UnsupportedBind, {
                  at: callee
                });
              }
            }
            case 136: {
              this.raise(Errors.PrivateInExpectedIn, {
                at: this.state.startLoc,
                identifierName: this.state.value
              });
              return this.parsePrivateName();
            }
            case 33: {
              return this.parseTopicReferenceThenEqualsSign(54, "%");
            }
            case 32: {
              return this.parseTopicReferenceThenEqualsSign(44, "^");
            }
            case 37:
            case 38: {
              return this.parseTopicReference("hack");
            }
            case 44:
            case 54:
            case 27: {
              const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
              if (pipeProposal) {
                return this.parseTopicReference(pipeProposal);
              }
              this.unexpected();
              break;
            }
            case 47: {
              const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
              if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
                this.expectOnePlugin(["jsx", "flow", "typescript"]);
              } else {
                this.unexpected();
              }
              break;
            }
            default:
              if (tokenIsIdentifier(type)) {
                if (this.isContextual(125) && this.lookaheadInLineCharCode() === 123) {
                  return this.parseModuleExpression();
                }
                const canBeArrow = this.state.potentialArrowAt === this.state.start;
                const containsEsc = this.state.containsEsc;
                const id = this.parseIdentifier();
                if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
                  const {
                    type: type2
                  } = this.state;
                  if (type2 === 68) {
                    this.resetPreviousNodeTrailingComments(id);
                    this.next();
                    return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
                  } else if (tokenIsIdentifier(type2)) {
                    if (this.lookaheadCharCode() === 61) {
                      return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
                    } else {
                      return id;
                    }
                  } else if (type2 === 90) {
                    this.resetPreviousNodeTrailingComments(id);
                    return this.parseDo(this.startNodeAtNode(id), true);
                  }
                }
                if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
                  this.next();
                  return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
                }
                return id;
              } else {
                this.unexpected();
              }
          }
        }
        parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
          if (pipeProposal) {
            this.state.type = topicTokenType;
            this.state.value = topicTokenValue;
            this.state.pos--;
            this.state.end--;
            this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
            return this.parseTopicReference(pipeProposal);
          } else {
            this.unexpected();
          }
        }
        parseTopicReference(pipeProposal) {
          const node = this.startNode();
          const startLoc = this.state.startLoc;
          const tokenType = this.state.type;
          this.next();
          return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
        }
        finishTopicReference(node, startLoc, pipeProposal, tokenType) {
          if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
            const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
            if (!this.topicReferenceIsAllowedInCurrentContext()) {
              this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {
                at: startLoc
              });
            }
            this.registerTopicReference();
            return this.finishNode(node, nodeType);
          } else {
            throw this.raise(Errors.PipeTopicUnconfiguredToken, {
              at: startLoc,
              token: tokenLabelName(tokenType)
            });
          }
        }
        testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
          switch (pipeProposal) {
            case "hack": {
              return this.hasPlugin(["pipelineOperator", {
                topicToken: tokenLabelName(tokenType)
              }]);
            }
            case "smart":
              return tokenType === 27;
            default:
              throw this.raise(Errors.PipeTopicRequiresHackPipes, {
                at: startLoc
              });
          }
        }
        parseAsyncArrowUnaryFunction(node) {
          this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
          const params = [this.parseIdentifier()];
          this.prodParam.exit();
          if (this.hasPrecedingLineBreak()) {
            this.raise(Errors.LineTerminatorBeforeArrow, {
              at: this.state.curPosition()
            });
          }
          this.expect(19);
          return this.parseArrowExpression(node, params, true);
        }
        parseDo(node, isAsync) {
          this.expectPlugin("doExpressions");
          if (isAsync) {
            this.expectPlugin("asyncDoExpressions");
          }
          node.async = isAsync;
          this.next();
          const oldLabels = this.state.labels;
          this.state.labels = [];
          if (isAsync) {
            this.prodParam.enter(PARAM_AWAIT);
            node.body = this.parseBlock();
            this.prodParam.exit();
          } else {
            node.body = this.parseBlock();
          }
          this.state.labels = oldLabels;
          return this.finishNode(node, "DoExpression");
        }
        parseSuper() {
          const node = this.startNode();
          this.next();
          if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
            this.raise(Errors.SuperNotAllowed, {
              at: node
            });
          } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
            this.raise(Errors.UnexpectedSuper, {
              at: node
            });
          }
          if (!this.match(10) && !this.match(0) && !this.match(16)) {
            this.raise(Errors.UnsupportedSuper, {
              at: node
            });
          }
          return this.finishNode(node, "Super");
        }
        parsePrivateName() {
          const node = this.startNode();
          const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
          const name = this.state.value;
          this.next();
          node.id = this.createIdentifier(id, name);
          return this.finishNode(node, "PrivateName");
        }
        parseFunctionOrFunctionSent() {
          const node = this.startNode();
          this.next();
          if (this.prodParam.hasYield && this.match(16)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
            this.next();
            if (this.match(102)) {
              this.expectPlugin("functionSent");
            } else if (!this.hasPlugin("functionSent")) {
              this.unexpected();
            }
            return this.parseMetaProperty(node, meta, "sent");
          }
          return this.parseFunction(node);
        }
        parseMetaProperty(node, meta, propertyName) {
          node.meta = meta;
          const containsEsc = this.state.containsEsc;
          node.property = this.parseIdentifier(true);
          if (node.property.name !== propertyName || containsEsc) {
            this.raise(Errors.UnsupportedMetaProperty, {
              at: node.property,
              target: meta.name,
              onlyValidPropertyName: propertyName
            });
          }
          return this.finishNode(node, "MetaProperty");
        }
        parseImportMetaProperty(node) {
          const id = this.createIdentifier(this.startNodeAtNode(node), "import");
          this.next();
          if (this.isContextual(100)) {
            if (!this.inModule) {
              this.raise(Errors.ImportMetaOutsideModule, {
                at: id
              });
            }
            this.sawUnambiguousESM = true;
          }
          return this.parseMetaProperty(node, id, "meta");
        }
        parseLiteralAtNode(value, type, node) {
          this.addExtra(node, "rawValue", value);
          this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
          node.value = value;
          this.next();
          return this.finishNode(node, type);
        }
        parseLiteral(value, type) {
          const node = this.startNode();
          return this.parseLiteralAtNode(value, type, node);
        }
        parseStringLiteral(value) {
          return this.parseLiteral(value, "StringLiteral");
        }
        parseNumericLiteral(value) {
          return this.parseLiteral(value, "NumericLiteral");
        }
        parseBigIntLiteral(value) {
          return this.parseLiteral(value, "BigIntLiteral");
        }
        parseDecimalLiteral(value) {
          return this.parseLiteral(value, "DecimalLiteral");
        }
        parseRegExpLiteral(value) {
          const node = this.parseLiteral(value.value, "RegExpLiteral");
          node.pattern = value.pattern;
          node.flags = value.flags;
          return node;
        }
        parseBooleanLiteral(value) {
          const node = this.startNode();
          node.value = value;
          this.next();
          return this.finishNode(node, "BooleanLiteral");
        }
        parseNullLiteral() {
          const node = this.startNode();
          this.next();
          return this.finishNode(node, "NullLiteral");
        }
        parseParenAndDistinguishExpression(canBeArrow) {
          const startLoc = this.state.startLoc;
          let val;
          this.next();
          this.expressionScope.enter(newArrowHeadScope());
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.maybeInArrowParameters = true;
          this.state.inFSharpPipelineDirectBody = false;
          const innerStartLoc = this.state.startLoc;
          const exprList = [];
          const refExpressionErrors = new ExpressionErrors();
          let first = true;
          let spreadStartLoc;
          let optionalCommaStartLoc;
          while (!this.match(11)) {
            if (first) {
              first = false;
            } else {
              this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
              if (this.match(11)) {
                optionalCommaStartLoc = this.state.startLoc;
                break;
              }
            }
            if (this.match(21)) {
              const spreadNodeStartLoc = this.state.startLoc;
              spreadStartLoc = this.state.startLoc;
              exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));
              if (!this.checkCommaAfterRest(41)) {
                break;
              }
            } else {
              exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
            }
          }
          const innerEndLoc = this.state.lastTokEndLoc;
          this.expect(11);
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          let arrowNode = this.startNodeAt(startLoc);
          if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
            this.checkDestructuringPrivate(refExpressionErrors);
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            this.parseArrowExpression(arrowNode, exprList, false);
            return arrowNode;
          }
          this.expressionScope.exit();
          if (!exprList.length) {
            this.unexpected(this.state.lastTokStartLoc);
          }
          if (optionalCommaStartLoc)
            this.unexpected(optionalCommaStartLoc);
          if (spreadStartLoc)
            this.unexpected(spreadStartLoc);
          this.checkExpressionErrors(refExpressionErrors, true);
          this.toReferencedListDeep(exprList, true);
          if (exprList.length > 1) {
            val = this.startNodeAt(innerStartLoc);
            val.expressions = exprList;
            this.finishNode(val, "SequenceExpression");
            this.resetEndLocation(val, innerEndLoc);
          } else {
            val = exprList[0];
          }
          return this.wrapParenthesis(startLoc, val);
        }
        wrapParenthesis(startLoc, expression) {
          if (!this.options.createParenthesizedExpressions) {
            this.addExtra(expression, "parenthesized", true);
            this.addExtra(expression, "parenStart", startLoc.index);
            this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);
            return expression;
          }
          const parenExpression = this.startNodeAt(startLoc);
          parenExpression.expression = expression;
          return this.finishNode(parenExpression, "ParenthesizedExpression");
        }
        shouldParseArrow(params) {
          return !this.canInsertSemicolon();
        }
        parseArrow(node) {
          if (this.eat(19)) {
            return node;
          }
        }
        parseParenItem(node, startLoc) {
          return node;
        }
        parseNewOrNewTarget() {
          const node = this.startNode();
          this.next();
          if (this.match(16)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
            this.next();
            const metaProp = this.parseMetaProperty(node, meta, "target");
            if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {
              this.raise(Errors.UnexpectedNewTarget, {
                at: metaProp
              });
            }
            return metaProp;
          }
          return this.parseNew(node);
        }
        parseNew(node) {
          this.parseNewCallee(node);
          if (this.eat(10)) {
            const args = this.parseExprList(11);
            this.toReferencedList(args);
            node.arguments = args;
          } else {
            node.arguments = [];
          }
          return this.finishNode(node, "NewExpression");
        }
        parseNewCallee(node) {
          node.callee = this.parseNoCallExpr();
          if (node.callee.type === "Import") {
            this.raise(Errors.ImportCallNotNewExpression, {
              at: node.callee
            });
          }
        }
        parseTemplateElement(isTagged) {
          const {
            start,
            startLoc,
            end,
            value
          } = this.state;
          const elemStart = start + 1;
          const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
          if (value === null) {
            if (!isTagged) {
              this.raise(Errors.InvalidEscapeSequenceTemplate, {
                at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)
              });
            }
          }
          const isTail = this.match(24);
          const endOffset = isTail ? -1 : -2;
          const elemEnd = end + endOffset;
          elem.value = {
            raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
            cooked: value === null ? null : value.slice(1, endOffset)
          };
          elem.tail = isTail;
          this.next();
          const finishedNode = this.finishNode(elem, "TemplateElement");
          this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
          return finishedNode;
        }
        parseTemplate(isTagged) {
          const node = this.startNode();
          node.expressions = [];
          let curElt = this.parseTemplateElement(isTagged);
          node.quasis = [curElt];
          while (!curElt.tail) {
            node.expressions.push(this.parseTemplateSubstitution());
            this.readTemplateContinuation();
            node.quasis.push(curElt = this.parseTemplateElement(isTagged));
          }
          return this.finishNode(node, "TemplateLiteral");
        }
        parseTemplateSubstitution() {
          return this.parseExpression();
        }
        parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
          if (isRecord) {
            this.expectPlugin("recordAndTuple");
          }
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = false;
          const propHash = /* @__PURE__ */ Object.create(null);
          let first = true;
          const node = this.startNode();
          node.properties = [];
          this.next();
          while (!this.match(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
              if (this.match(close)) {
                this.addTrailingCommaExtraToNode(node);
                break;
              }
            }
            let prop;
            if (isPattern) {
              prop = this.parseBindingProperty();
            } else {
              prop = this.parsePropertyDefinition(refExpressionErrors);
              this.checkProto(prop, isRecord, propHash, refExpressionErrors);
            }
            if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
              this.raise(Errors.InvalidRecordProperty, {
                at: prop
              });
            }
            if (prop.shorthand) {
              this.addExtra(prop, "shorthand", true);
            }
            node.properties.push(prop);
          }
          this.next();
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          let type = "ObjectExpression";
          if (isPattern) {
            type = "ObjectPattern";
          } else if (isRecord) {
            type = "RecordExpression";
          }
          return this.finishNode(node, type);
        }
        addTrailingCommaExtraToNode(node) {
          this.addExtra(node, "trailingComma", this.state.lastTokStart);
          this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
        }
        maybeAsyncOrAccessorProp(prop) {
          return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
        }
        parsePropertyDefinition(refExpressionErrors) {
          let decorators = [];
          if (this.match(26)) {
            if (this.hasPlugin("decorators")) {
              this.raise(Errors.UnsupportedPropertyDecorator, {
                at: this.state.startLoc
              });
            }
            while (this.match(26)) {
              decorators.push(this.parseDecorator());
            }
          }
          const prop = this.startNode();
          let isAsync = false;
          let isAccessor = false;
          let startLoc;
          if (this.match(21)) {
            if (decorators.length)
              this.unexpected();
            return this.parseSpread();
          }
          if (decorators.length) {
            prop.decorators = decorators;
            decorators = [];
          }
          prop.method = false;
          if (refExpressionErrors) {
            startLoc = this.state.startLoc;
          }
          let isGenerator = this.eat(55);
          this.parsePropertyNamePrefixOperator(prop);
          const containsEsc = this.state.containsEsc;
          const key = this.parsePropertyName(prop, refExpressionErrors);
          if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
            const keyName = key.name;
            if (keyName === "async" && !this.hasPrecedingLineBreak()) {
              isAsync = true;
              this.resetPreviousNodeTrailingComments(key);
              isGenerator = this.eat(55);
              this.parsePropertyName(prop);
            }
            if (keyName === "get" || keyName === "set") {
              isAccessor = true;
              this.resetPreviousNodeTrailingComments(key);
              prop.kind = keyName;
              if (this.match(55)) {
                isGenerator = true;
                this.raise(Errors.AccessorIsGenerator, {
                  at: this.state.curPosition(),
                  kind: keyName
                });
                this.next();
              }
              this.parsePropertyName(prop);
            }
          }
          return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
        }
        getGetterSetterExpectedParamCount(method) {
          return method.kind === "get" ? 0 : 1;
        }
        getObjectOrClassMethodParams(method) {
          return method.params;
        }
        checkGetterSetterParams(method) {
          var _params;
          const paramCount = this.getGetterSetterExpectedParamCount(method);
          const params = this.getObjectOrClassMethodParams(method);
          if (params.length !== paramCount) {
            this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
              at: method
            });
          }
          if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
            this.raise(Errors.BadSetterRestParameter, {
              at: method
            });
          }
        }
        parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
          if (isAccessor) {
            const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
            this.checkGetterSetterParams(finishedProp);
            return finishedProp;
          }
          if (isAsync || isGenerator || this.match(10)) {
            if (isPattern)
              this.unexpected();
            prop.kind = "method";
            prop.method = true;
            return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
          }
        }
        parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
          prop.shorthand = false;
          if (this.eat(14)) {
            prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
            return this.finishNode(prop, "ObjectProperty");
          }
          if (!prop.computed && prop.key.type === "Identifier") {
            this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
            if (isPattern) {
              prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
            } else if (this.match(29)) {
              const shorthandAssignLoc = this.state.startLoc;
              if (refExpressionErrors != null) {
                if (refExpressionErrors.shorthandAssignLoc === null) {
                  refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
                }
              } else {
                this.raise(Errors.InvalidCoverInitializedName, {
                  at: shorthandAssignLoc
                });
              }
              prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
            } else {
              prop.value = cloneIdentifier(prop.key);
            }
            prop.shorthand = true;
            return this.finishNode(prop, "ObjectProperty");
          }
        }
        parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
          const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
          if (!node)
            this.unexpected();
          return node;
        }
        parsePropertyName(prop, refExpressionErrors) {
          if (this.eat(0)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssignAllowIn();
            this.expect(3);
          } else {
            const {
              type,
              value
            } = this.state;
            let key;
            if (tokenIsKeywordOrIdentifier(type)) {
              key = this.parseIdentifier(true);
            } else {
              switch (type) {
                case 132:
                  key = this.parseNumericLiteral(value);
                  break;
                case 131:
                  key = this.parseStringLiteral(value);
                  break;
                case 133:
                  key = this.parseBigIntLiteral(value);
                  break;
                case 134:
                  key = this.parseDecimalLiteral(value);
                  break;
                case 136: {
                  const privateKeyLoc = this.state.startLoc;
                  if (refExpressionErrors != null) {
                    if (refExpressionErrors.privateKeyLoc === null) {
                      refExpressionErrors.privateKeyLoc = privateKeyLoc;
                    }
                  } else {
                    this.raise(Errors.UnexpectedPrivateField, {
                      at: privateKeyLoc
                    });
                  }
                  key = this.parsePrivateName();
                  break;
                }
                default:
                  this.unexpected();
              }
            }
            prop.key = key;
            if (type !== 136) {
              prop.computed = false;
            }
          }
          return prop.key;
        }
        initFunction(node, isAsync) {
          node.id = null;
          node.generator = false;
          node.async = isAsync;
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
          this.initFunction(node, isAsync);
          node.generator = isGenerator;
          this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
          this.prodParam.enter(functionFlags(isAsync, node.generator));
          this.parseFunctionParams(node, isConstructor);
          const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
          this.prodParam.exit();
          this.scope.exit();
          return finishedNode;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
          if (isTuple) {
            this.expectPlugin("recordAndTuple");
          }
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = false;
          const node = this.startNode();
          this.next();
          node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
        }
        parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
          this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
          let flags = functionFlags(isAsync, false);
          if (!this.match(5) && this.prodParam.hasIn) {
            flags |= PARAM_IN;
          }
          this.prodParam.enter(flags);
          this.initFunction(node, isAsync);
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          if (params) {
            this.state.maybeInArrowParameters = true;
            this.setArrowFunctionParameters(node, params, trailingCommaLoc);
          }
          this.state.maybeInArrowParameters = false;
          this.parseFunctionBody(node, true);
          this.prodParam.exit();
          this.scope.exit();
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          return this.finishNode(node, "ArrowFunctionExpression");
        }
        setArrowFunctionParameters(node, params, trailingCommaLoc) {
          this.toAssignableList(params, trailingCommaLoc, false);
          node.params = params;
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
          this.parseFunctionBody(node, false, isMethod);
          return this.finishNode(node, type);
        }
        parseFunctionBody(node, allowExpression, isMethod = false) {
          const isExpression = allowExpression && !this.match(5);
          this.expressionScope.enter(newExpressionScope());
          if (isExpression) {
            node.body = this.parseMaybeAssign();
            this.checkParams(node, false, allowExpression, false);
          } else {
            const oldStrict = this.state.strict;
            const oldLabels = this.state.labels;
            this.state.labels = [];
            this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);
            node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
              const nonSimple = !this.isSimpleParamList(node.params);
              if (hasStrictModeDirective && nonSimple) {
                this.raise(Errors.IllegalLanguageModeDirective, {
                  at: (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node
                });
              }
              const strictModeChanged = !oldStrict && this.state.strict;
              this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
              if (this.state.strict && node.id) {
                this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);
              }
            });
            this.prodParam.exit();
            this.state.labels = oldLabels;
          }
          this.expressionScope.exit();
        }
        isSimpleParameter(node) {
          return node.type === "Identifier";
        }
        isSimpleParamList(params) {
          for (let i = 0, len = params.length; i < len; i++) {
            if (!this.isSimpleParameter(params[i]))
              return false;
          }
          return true;
        }
        checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
          const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set();
          const formalParameters = {
            type: "FormalParameters"
          };
          for (const param of node.params) {
            this.checkLVal(param, {
              in: formalParameters,
              binding: BIND_VAR,
              checkClashes,
              strictModeChanged
            });
          }
        }
        parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
          const elts = [];
          let first = true;
          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
              if (this.match(close)) {
                if (nodeForExtra) {
                  this.addTrailingCommaExtraToNode(nodeForExtra);
                }
                this.next();
                break;
              }
            }
            elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
          }
          return elts;
        }
        parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
          let elt;
          if (this.match(12)) {
            if (!allowEmpty) {
              this.raise(Errors.UnexpectedToken, {
                at: this.state.curPosition(),
                unexpected: ","
              });
            }
            elt = null;
          } else if (this.match(21)) {
            const spreadNodeStartLoc = this.state.startLoc;
            elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
          } else if (this.match(17)) {
            this.expectPlugin("partialApplication");
            if (!allowPlaceholder) {
              this.raise(Errors.UnexpectedArgumentPlaceholder, {
                at: this.state.startLoc
              });
            }
            const node = this.startNode();
            this.next();
            elt = this.finishNode(node, "ArgumentPlaceholder");
          } else {
            elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
          }
          return elt;
        }
        parseIdentifier(liberal) {
          const node = this.startNode();
          const name = this.parseIdentifierName(liberal);
          return this.createIdentifier(node, name);
        }
        createIdentifier(node, name) {
          node.name = name;
          node.loc.identifierName = name;
          return this.finishNode(node, "Identifier");
        }
        parseIdentifierName(liberal) {
          let name;
          const {
            startLoc,
            type
          } = this.state;
          if (tokenIsKeywordOrIdentifier(type)) {
            name = this.state.value;
          } else {
            this.unexpected();
          }
          const tokenIsKeyword2 = tokenKeywordOrIdentifierIsKeyword(type);
          if (liberal) {
            if (tokenIsKeyword2) {
              this.replaceToken(130);
            }
          } else {
            this.checkReservedWord(name, startLoc, tokenIsKeyword2, false);
          }
          this.next();
          return name;
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
          if (word.length > 10) {
            return;
          }
          if (!canBeReservedWord(word)) {
            return;
          }
          if (checkKeywords && isKeyword(word)) {
            this.raise(Errors.UnexpectedKeyword, {
              at: startLoc,
              keyword: word
            });
            return;
          }
          const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;
          if (reservedTest(word, this.inModule)) {
            this.raise(Errors.UnexpectedReservedWord, {
              at: startLoc,
              reservedWord: word
            });
            return;
          } else if (word === "yield") {
            if (this.prodParam.hasYield) {
              this.raise(Errors.YieldBindingIdentifier, {
                at: startLoc
              });
              return;
            }
          } else if (word === "await") {
            if (this.prodParam.hasAwait) {
              this.raise(Errors.AwaitBindingIdentifier, {
                at: startLoc
              });
              return;
            }
            if (this.scope.inStaticBlock) {
              this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {
                at: startLoc
              });
              return;
            }
            this.expressionScope.recordAsyncArrowParametersError({
              at: startLoc
            });
          } else if (word === "arguments") {
            if (this.scope.inClassAndNotInNonArrowFunction) {
              this.raise(Errors.ArgumentsInClass, {
                at: startLoc
              });
              return;
            }
          }
        }
        isAwaitAllowed() {
          if (this.prodParam.hasAwait)
            return true;
          if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
            return true;
          }
          return false;
        }
        parseAwait(startLoc) {
          const node = this.startNodeAt(startLoc);
          this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {
            at: node
          });
          if (this.eat(55)) {
            this.raise(Errors.ObsoleteAwaitStar, {
              at: node
            });
          }
          if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
            if (this.isAmbiguousAwait()) {
              this.ambiguousScriptDifferentAst = true;
            } else {
              this.sawUnambiguousESM = true;
            }
          }
          if (!this.state.soloAwait) {
            node.argument = this.parseMaybeUnary(null, true);
          }
          return this.finishNode(node, "AwaitExpression");
        }
        isAmbiguousAwait() {
          if (this.hasPrecedingLineBreak())
            return true;
          const {
            type
          } = this.state;
          return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 101 && !this.state.containsEsc || type === 135 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
        }
        parseYield() {
          const node = this.startNode();
          this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {
            at: node
          });
          this.next();
          let delegating = false;
          let argument = null;
          if (!this.hasPrecedingLineBreak()) {
            delegating = this.eat(55);
            switch (this.state.type) {
              case 13:
              case 137:
              case 8:
              case 11:
              case 3:
              case 9:
              case 14:
              case 12:
                if (!delegating)
                  break;
              default:
                argument = this.parseMaybeAssign();
            }
          }
          node.delegate = delegating;
          node.argument = argument;
          return this.finishNode(node, "YieldExpression");
        }
        checkPipelineAtInfixOperator(left, leftStartLoc) {
          if (this.hasPlugin(["pipelineOperator", {
            proposal: "smart"
          }])) {
            if (left.type === "SequenceExpression") {
              this.raise(Errors.PipelineHeadSequenceExpression, {
                at: leftStartLoc
              });
            }
          }
        }
        parseSmartPipelineBodyInStyle(childExpr, startLoc) {
          if (this.isSimpleReference(childExpr)) {
            const bodyNode = this.startNodeAt(startLoc);
            bodyNode.callee = childExpr;
            return this.finishNode(bodyNode, "PipelineBareFunction");
          } else {
            const bodyNode = this.startNodeAt(startLoc);
            this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
            bodyNode.expression = childExpr;
            return this.finishNode(bodyNode, "PipelineTopicExpression");
          }
        }
        isSimpleReference(expression) {
          switch (expression.type) {
            case "MemberExpression":
              return !expression.computed && this.isSimpleReference(expression.object);
            case "Identifier":
              return true;
            default:
              return false;
          }
        }
        checkSmartPipeTopicBodyEarlyErrors(startLoc) {
          if (this.match(19)) {
            throw this.raise(Errors.PipelineBodyNoArrow, {
              at: this.state.startLoc
            });
          }
          if (!this.topicReferenceWasUsedInCurrentContext()) {
            this.raise(Errors.PipelineTopicUnused, {
              at: startLoc
            });
          }
        }
        withTopicBindingContext(callback) {
          const outerContextTopicState = this.state.topicContext;
          this.state.topicContext = {
            maxNumOfResolvableTopics: 1,
            maxTopicIndex: null
          };
          try {
            return callback();
          } finally {
            this.state.topicContext = outerContextTopicState;
          }
        }
        withSmartMixTopicForbiddingContext(callback) {
          if (this.hasPlugin(["pipelineOperator", {
            proposal: "smart"
          }])) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = {
              maxNumOfResolvableTopics: 0,
              maxTopicIndex: null
            };
            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          } else {
            return callback();
          }
        }
        withSoloAwaitPermittingContext(callback) {
          const outerContextSoloAwaitState = this.state.soloAwait;
          this.state.soloAwait = true;
          try {
            return callback();
          } finally {
            this.state.soloAwait = outerContextSoloAwaitState;
          }
        }
        allowInAnd(callback) {
          const flags = this.prodParam.currentFlags();
          const prodParamToSet = PARAM_IN & ~flags;
          if (prodParamToSet) {
            this.prodParam.enter(flags | PARAM_IN);
            try {
              return callback();
            } finally {
              this.prodParam.exit();
            }
          }
          return callback();
        }
        disallowInAnd(callback) {
          const flags = this.prodParam.currentFlags();
          const prodParamToClear = PARAM_IN & flags;
          if (prodParamToClear) {
            this.prodParam.enter(flags & ~PARAM_IN);
            try {
              return callback();
            } finally {
              this.prodParam.exit();
            }
          }
          return callback();
        }
        registerTopicReference() {
          this.state.topicContext.maxTopicIndex = 0;
        }
        topicReferenceIsAllowedInCurrentContext() {
          return this.state.topicContext.maxNumOfResolvableTopics >= 1;
        }
        topicReferenceWasUsedInCurrentContext() {
          return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
        }
        parseFSharpPipelineBody(prec) {
          const startLoc = this.state.startLoc;
          this.state.potentialArrowAt = this.state.start;
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = true;
          const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          return ret;
        }
        parseModuleExpression() {
          this.expectPlugin("moduleBlocks");
          const node = this.startNode();
          this.next();
          if (!this.match(5)) {
            this.unexpected(null, 5);
          }
          const program = this.startNodeAt(this.state.endLoc);
          this.next();
          const revertScopes = this.initializeScopes(true);
          this.enterInitialScopes();
          try {
            node.body = this.parseProgram(program, 8, "module");
          } finally {
            revertScopes();
          }
          return this.finishNode(node, "ModuleExpression");
        }
        parsePropertyNamePrefixOperator(prop) {
        }
      };
      var loopLabel = {
        kind: "loop"
      };
      var switchLabel = {
        kind: "switch"
      };
      var loneSurrogate = /[\uD800-\uDFFF]/u;
      var keywordRelationalOperator = /in(?:stanceof)?/y;
      function babel7CompatTokens(tokens, input) {
        for (let i = 0; i < tokens.length; i++) {
          const token = tokens[i];
          const {
            type
          } = token;
          if (typeof type === "number") {
            {
              if (type === 136) {
                const {
                  loc,
                  start,
                  value,
                  end
                } = token;
                const hashEndPos = start + 1;
                const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                tokens.splice(i, 1, new Token({
                  type: getExportedToken(27),
                  value: "#",
                  start,
                  end: hashEndPos,
                  startLoc: loc.start,
                  endLoc: hashEndLoc
                }), new Token({
                  type: getExportedToken(130),
                  value,
                  start: hashEndPos,
                  end,
                  startLoc: hashEndLoc,
                  endLoc: loc.end
                }));
                i++;
                continue;
              }
              if (tokenIsTemplate(type)) {
                const {
                  loc,
                  start,
                  value,
                  end
                } = token;
                const backquoteEnd = start + 1;
                const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                let startToken;
                if (input.charCodeAt(start) === 96) {
                  startToken = new Token({
                    type: getExportedToken(22),
                    value: "`",
                    start,
                    end: backquoteEnd,
                    startLoc: loc.start,
                    endLoc: backquoteEndLoc
                  });
                } else {
                  startToken = new Token({
                    type: getExportedToken(8),
                    value: "}",
                    start,
                    end: backquoteEnd,
                    startLoc: loc.start,
                    endLoc: backquoteEndLoc
                  });
                }
                let templateValue, templateElementEnd, templateElementEndLoc, endToken;
                if (type === 24) {
                  templateElementEnd = end - 1;
                  templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
                  templateValue = value === null ? null : value.slice(1, -1);
                  endToken = new Token({
                    type: getExportedToken(22),
                    value: "`",
                    start: templateElementEnd,
                    end,
                    startLoc: templateElementEndLoc,
                    endLoc: loc.end
                  });
                } else {
                  templateElementEnd = end - 2;
                  templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
                  templateValue = value === null ? null : value.slice(1, -2);
                  endToken = new Token({
                    type: getExportedToken(23),
                    value: "${",
                    start: templateElementEnd,
                    end,
                    startLoc: templateElementEndLoc,
                    endLoc: loc.end
                  });
                }
                tokens.splice(i, 1, startToken, new Token({
                  type: getExportedToken(20),
                  value: templateValue,
                  start: backquoteEnd,
                  end: templateElementEnd,
                  startLoc: backquoteEndLoc,
                  endLoc: templateElementEndLoc
                }), endToken);
                i += 2;
                continue;
              }
            }
            token.type = getExportedToken(type);
          }
        }
        return tokens;
      }
      var StatementParser = class extends ExpressionParser {
        parseTopLevel(file, program) {
          file.program = this.parseProgram(program);
          file.comments = this.state.comments;
          if (this.options.tokens) {
            file.tokens = babel7CompatTokens(this.tokens, this.input);
          }
          return this.finishNode(file, "File");
        }
        parseProgram(program, end = 137, sourceType = this.options.sourceType) {
          program.sourceType = sourceType;
          program.interpreter = this.parseInterpreterDirective();
          this.parseBlockBody(program, true, true, end);
          if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
            for (const [localName, at] of Array.from(this.scope.undefinedExports)) {
              this.raise(Errors.ModuleExportUndefined, {
                at,
                localName
              });
            }
          }
          let finishedProgram;
          if (end === 137) {
            finishedProgram = this.finishNode(program, "Program");
          } else {
            finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
          }
          return finishedProgram;
        }
        stmtToDirective(stmt) {
          const directive = stmt;
          directive.type = "Directive";
          directive.value = directive.expression;
          delete directive.expression;
          const directiveLiteral = directive.value;
          const expressionValue = directiveLiteral.value;
          const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
          const val = directiveLiteral.value = raw.slice(1, -1);
          this.addExtra(directiveLiteral, "raw", raw);
          this.addExtra(directiveLiteral, "rawValue", val);
          this.addExtra(directiveLiteral, "expressionValue", expressionValue);
          directiveLiteral.type = "DirectiveLiteral";
          return directive;
        }
        parseInterpreterDirective() {
          if (!this.match(28)) {
            return null;
          }
          const node = this.startNode();
          node.value = this.state.value;
          this.next();
          return this.finishNode(node, "InterpreterDirective");
        }
        isLet() {
          if (!this.isContextual(99)) {
            return false;
          }
          return this.hasFollowingBindingAtom();
        }
        chStartsBindingIdentifier(ch, pos) {
          if (isIdentifierStart(ch)) {
            keywordRelationalOperator.lastIndex = pos;
            if (keywordRelationalOperator.test(this.input)) {
              const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
              if (!isIdentifierChar(endCh) && endCh !== 92) {
                return false;
              }
            }
            return true;
          } else if (ch === 92) {
            return true;
          } else {
            return false;
          }
        }
        chStartsBindingPattern(ch) {
          return ch === 91 || ch === 123;
        }
        hasFollowingBindingAtom() {
          const next = this.nextTokenStart();
          const nextCh = this.codePointAtPos(next);
          return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
        }
        hasInLineFollowingBindingIdentifier() {
          const next = this.nextTokenInLineStart();
          const nextCh = this.codePointAtPos(next);
          return this.chStartsBindingIdentifier(nextCh, next);
        }
        startsUsingForOf() {
          const {
            type,
            containsEsc
          } = this.lookahead();
          if (type === 101 && !containsEsc) {
            return false;
          } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {
            this.expectPlugin("explicitResourceManagement");
            return true;
          }
        }
        startsAwaitUsing() {
          let next = this.nextTokenInLineStart();
          if (this.isUnparsedContextual(next, "using")) {
            next = this.nextTokenInLineStartSince(next + 5);
            const nextCh = this.codePointAtPos(next);
            if (this.chStartsBindingIdentifier(nextCh, next)) {
              this.expectPlugin("explicitResourceManagement");
              return true;
            }
          }
          return false;
        }
        parseModuleItem() {
          return this.parseStatementLike(1 | 2 | 4 | 8);
        }
        parseStatementListItem() {
          return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));
        }
        parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
          let flags = 0;
          if (this.options.annexB && !this.state.strict) {
            flags |= 4;
            if (allowLabeledFunction) {
              flags |= 8;
            }
          }
          return this.parseStatementLike(flags);
        }
        parseStatement() {
          return this.parseStatementLike(0);
        }
        parseStatementLike(flags) {
          let decorators = null;
          if (this.match(26)) {
            decorators = this.parseDecorators(true);
          }
          return this.parseStatementContent(flags, decorators);
        }
        parseStatementContent(flags, decorators) {
          const starttype = this.state.type;
          const node = this.startNode();
          const allowDeclaration = !!(flags & 2);
          const allowFunctionDeclaration = !!(flags & 4);
          const topLevel = flags & 1;
          switch (starttype) {
            case 60:
              return this.parseBreakContinueStatement(node, true);
            case 63:
              return this.parseBreakContinueStatement(node, false);
            case 64:
              return this.parseDebuggerStatement(node);
            case 90:
              return this.parseDoWhileStatement(node);
            case 91:
              return this.parseForStatement(node);
            case 68:
              if (this.lookaheadCharCode() === 46)
                break;
              if (!allowFunctionDeclaration) {
                this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, {
                  at: this.state.startLoc
                });
              }
              return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
            case 80:
              if (!allowDeclaration)
                this.unexpected();
              return this.parseClass(this.maybeTakeDecorators(decorators, node), true);
            case 69:
              return this.parseIfStatement(node);
            case 70:
              return this.parseReturnStatement(node);
            case 71:
              return this.parseSwitchStatement(node);
            case 72:
              return this.parseThrowStatement(node);
            case 73:
              return this.parseTryStatement(node);
            case 96:
              if (!this.state.containsEsc && this.startsAwaitUsing()) {
                if (!this.isAwaitAllowed()) {
                  this.raise(Errors.AwaitUsingNotInAsyncContext, {
                    at: node
                  });
                } else if (!allowDeclaration) {
                  this.raise(Errors.UnexpectedLexicalDeclaration, {
                    at: node
                  });
                }
                this.next();
                return this.parseVarStatement(node, "await using");
              }
              break;
            case 105:
              if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) {
                break;
              }
              this.expectPlugin("explicitResourceManagement");
              if (!this.scope.inModule && this.scope.inTopLevel) {
                this.raise(Errors.UnexpectedUsingDeclaration, {
                  at: this.state.startLoc
                });
              } else if (!allowDeclaration) {
                this.raise(Errors.UnexpectedLexicalDeclaration, {
                  at: this.state.startLoc
                });
              }
              return this.parseVarStatement(node, "using");
            case 99: {
              if (this.state.containsEsc) {
                break;
              }
              const next = this.nextTokenStart();
              const nextCh = this.codePointAtPos(next);
              if (nextCh !== 91) {
                if (!allowDeclaration && this.hasFollowingLineBreak())
                  break;
                if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {
                  break;
                }
              }
            }
            case 75: {
              if (!allowDeclaration) {
                this.raise(Errors.UnexpectedLexicalDeclaration, {
                  at: this.state.startLoc
                });
              }
            }
            case 74: {
              const kind = this.state.value;
              return this.parseVarStatement(node, kind);
            }
            case 92:
              return this.parseWhileStatement(node);
            case 76:
              return this.parseWithStatement(node);
            case 5:
              return this.parseBlock();
            case 13:
              return this.parseEmptyStatement(node);
            case 83: {
              const nextTokenCharCode = this.lookaheadCharCode();
              if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
                break;
              }
            }
            case 82: {
              if (!this.options.allowImportExportEverywhere && !topLevel) {
                this.raise(Errors.UnexpectedImportExport, {
                  at: this.state.startLoc
                });
              }
              this.next();
              let result;
              if (starttype === 83) {
                result = this.parseImport(node);
                if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
                  this.sawUnambiguousESM = true;
                }
              } else {
                result = this.parseExport(node, decorators);
                if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
                  this.sawUnambiguousESM = true;
                }
              }
              this.assertModuleNodeAllowed(result);
              return result;
            }
            default: {
              if (this.isAsyncFunction()) {
                if (!allowDeclaration) {
                  this.raise(Errors.AsyncFunctionInSingleStatementContext, {
                    at: this.state.startLoc
                  });
                }
                this.next();
                return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
              }
            }
          }
          const maybeName = this.state.value;
          const expr = this.parseExpression();
          if (tokenIsIdentifier(starttype) && expr.type === "Identifier" && this.eat(14)) {
            return this.parseLabeledStatement(node, maybeName, expr, flags);
          } else {
            return this.parseExpressionStatement(node, expr, decorators);
          }
        }
        assertModuleNodeAllowed(node) {
          if (!this.options.allowImportExportEverywhere && !this.inModule) {
            this.raise(Errors.ImportOutsideModule, {
              at: node
            });
          }
        }
        decoratorsEnabledBeforeExport() {
          if (this.hasPlugin("decorators-legacy"))
            return true;
          return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
        }
        maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
          if (maybeDecorators) {
            if (classNode.decorators && classNode.decorators.length > 0) {
              if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") {
                this.raise(Errors.DecoratorsBeforeAfterExport, {
                  at: classNode.decorators[0]
                });
              }
              classNode.decorators.unshift(...maybeDecorators);
            } else {
              classNode.decorators = maybeDecorators;
            }
            this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
            if (exportNode)
              this.resetStartLocationFromNode(exportNode, classNode);
          }
          return classNode;
        }
        canHaveLeadingDecorator() {
          return this.match(80);
        }
        parseDecorators(allowExport) {
          const decorators = [];
          do {
            decorators.push(this.parseDecorator());
          } while (this.match(26));
          if (this.match(82)) {
            if (!allowExport) {
              this.unexpected();
            }
            if (!this.decoratorsEnabledBeforeExport()) {
              this.raise(Errors.DecoratorExportClass, {
                at: this.state.startLoc
              });
            }
          } else if (!this.canHaveLeadingDecorator()) {
            throw this.raise(Errors.UnexpectedLeadingDecorator, {
              at: this.state.startLoc
            });
          }
          return decorators;
        }
        parseDecorator() {
          this.expectOnePlugin(["decorators", "decorators-legacy"]);
          const node = this.startNode();
          this.next();
          if (this.hasPlugin("decorators")) {
            const startLoc = this.state.startLoc;
            let expr;
            if (this.match(10)) {
              const startLoc2 = this.state.startLoc;
              this.next();
              expr = this.parseExpression();
              this.expect(11);
              expr = this.wrapParenthesis(startLoc2, expr);
              const paramsStartLoc = this.state.startLoc;
              node.expression = this.parseMaybeDecoratorArguments(expr);
              if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr) {
                this.raise(Errors.DecoratorArgumentsOutsideParentheses, {
                  at: paramsStartLoc
                });
              }
            } else {
              expr = this.parseIdentifier(false);
              while (this.eat(16)) {
                const node2 = this.startNodeAt(startLoc);
                node2.object = expr;
                if (this.match(136)) {
                  this.classScope.usePrivateName(this.state.value, this.state.startLoc);
                  node2.property = this.parsePrivateName();
                } else {
                  node2.property = this.parseIdentifier(true);
                }
                node2.computed = false;
                expr = this.finishNode(node2, "MemberExpression");
              }
              node.expression = this.parseMaybeDecoratorArguments(expr);
            }
          } else {
            node.expression = this.parseExprSubscripts();
          }
          return this.finishNode(node, "Decorator");
        }
        parseMaybeDecoratorArguments(expr) {
          if (this.eat(10)) {
            const node = this.startNodeAtNode(expr);
            node.callee = expr;
            node.arguments = this.parseCallExpressionArguments(11, false);
            this.toReferencedList(node.arguments);
            return this.finishNode(node, "CallExpression");
          }
          return expr;
        }
        parseBreakContinueStatement(node, isBreak) {
          this.next();
          if (this.isLineTerminator()) {
            node.label = null;
          } else {
            node.label = this.parseIdentifier();
            this.semicolon();
          }
          this.verifyBreakContinue(node, isBreak);
          return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        }
        verifyBreakContinue(node, isBreak) {
          let i;
          for (i = 0; i < this.state.labels.length; ++i) {
            const lab = this.state.labels[i];
            if (node.label == null || lab.name === node.label.name) {
              if (lab.kind != null && (isBreak || lab.kind === "loop"))
                break;
              if (node.label && isBreak)
                break;
            }
          }
          if (i === this.state.labels.length) {
            const type = isBreak ? "BreakStatement" : "ContinueStatement";
            this.raise(Errors.IllegalBreakContinue, {
              at: node,
              type
            });
          }
        }
        parseDebuggerStatement(node) {
          this.next();
          this.semicolon();
          return this.finishNode(node, "DebuggerStatement");
        }
        parseHeaderExpression() {
          this.expect(10);
          const val = this.parseExpression();
          this.expect(11);
          return val;
        }
        parseDoWhileStatement(node) {
          this.next();
          this.state.labels.push(loopLabel);
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          this.state.labels.pop();
          this.expect(92);
          node.test = this.parseHeaderExpression();
          this.eat(13);
          return this.finishNode(node, "DoWhileStatement");
        }
        parseForStatement(node) {
          this.next();
          this.state.labels.push(loopLabel);
          let awaitAt = null;
          if (this.isAwaitAllowed() && this.eatContextual(96)) {
            awaitAt = this.state.lastTokStartLoc;
          }
          this.scope.enter(SCOPE_OTHER);
          this.expect(10);
          if (this.match(13)) {
            if (awaitAt !== null) {
              this.unexpected(awaitAt);
            }
            return this.parseFor(node, null);
          }
          const startsWithLet = this.isContextual(99);
          {
            const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();
            const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(105) && this.startsUsingForOf();
            const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
            if (this.match(74) || this.match(75) || isLetOrUsing) {
              const initNode = this.startNode();
              let kind;
              if (startsWithAwaitUsing) {
                kind = "await using";
                if (!this.isAwaitAllowed()) {
                  this.raise(Errors.AwaitUsingNotInAsyncContext, {
                    at: this.state.startLoc
                  });
                }
                this.next();
              } else {
                kind = this.state.value;
              }
              this.next();
              this.parseVar(initNode, true, kind);
              const init2 = this.finishNode(initNode, "VariableDeclaration");
              const isForIn = this.match(58);
              if (isForIn && starsWithUsingDeclaration) {
                this.raise(Errors.ForInUsing, {
                  at: init2
                });
              }
              if ((isForIn || this.isContextual(101)) && init2.declarations.length === 1) {
                return this.parseForIn(node, init2, awaitAt);
              }
              if (awaitAt !== null) {
                this.unexpected(awaitAt);
              }
              return this.parseFor(node, init2);
            }
          }
          const startsWithAsync = this.isContextual(95);
          const refExpressionErrors = new ExpressionErrors();
          const init = this.parseExpression(true, refExpressionErrors);
          const isForOf = this.isContextual(101);
          if (isForOf) {
            if (startsWithLet) {
              this.raise(Errors.ForOfLet, {
                at: init
              });
            }
            if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
              this.raise(Errors.ForOfAsync, {
                at: init
              });
            }
          }
          if (isForOf || this.match(58)) {
            this.checkDestructuringPrivate(refExpressionErrors);
            this.toAssignable(init, true);
            const type = isForOf ? "ForOfStatement" : "ForInStatement";
            this.checkLVal(init, {
              in: {
                type
              }
            });
            return this.parseForIn(node, init, awaitAt);
          } else {
            this.checkExpressionErrors(refExpressionErrors, true);
          }
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, init);
        }
        parseFunctionStatement(node, isAsync, isHangingDeclaration) {
          this.next();
          return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
        }
        parseIfStatement(node) {
          this.next();
          node.test = this.parseHeaderExpression();
          node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();
          node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;
          return this.finishNode(node, "IfStatement");
        }
        parseReturnStatement(node) {
          if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
            this.raise(Errors.IllegalReturn, {
              at: this.state.startLoc
            });
          }
          this.next();
          if (this.isLineTerminator()) {
            node.argument = null;
          } else {
            node.argument = this.parseExpression();
            this.semicolon();
          }
          return this.finishNode(node, "ReturnStatement");
        }
        parseSwitchStatement(node) {
          this.next();
          node.discriminant = this.parseHeaderExpression();
          const cases = node.cases = [];
          this.expect(5);
          this.state.labels.push(switchLabel);
          this.scope.enter(SCOPE_OTHER);
          let cur;
          for (let sawDefault; !this.match(8); ) {
            if (this.match(61) || this.match(65)) {
              const isCase = this.match(61);
              if (cur)
                this.finishNode(cur, "SwitchCase");
              cases.push(cur = this.startNode());
              cur.consequent = [];
              this.next();
              if (isCase) {
                cur.test = this.parseExpression();
              } else {
                if (sawDefault) {
                  this.raise(Errors.MultipleDefaultsInSwitch, {
                    at: this.state.lastTokStartLoc
                  });
                }
                sawDefault = true;
                cur.test = null;
              }
              this.expect(14);
            } else {
              if (cur) {
                cur.consequent.push(this.parseStatementListItem());
              } else {
                this.unexpected();
              }
            }
          }
          this.scope.exit();
          if (cur)
            this.finishNode(cur, "SwitchCase");
          this.next();
          this.state.labels.pop();
          return this.finishNode(node, "SwitchStatement");
        }
        parseThrowStatement(node) {
          this.next();
          if (this.hasPrecedingLineBreak()) {
            this.raise(Errors.NewlineAfterThrow, {
              at: this.state.lastTokEndLoc
            });
          }
          node.argument = this.parseExpression();
          this.semicolon();
          return this.finishNode(node, "ThrowStatement");
        }
        parseCatchClauseParam() {
          const param = this.parseBindingAtom();
          this.scope.enter(this.options.annexB && param.type === "Identifier" ? SCOPE_SIMPLE_CATCH : 0);
          this.checkLVal(param, {
            in: {
              type: "CatchClause"
            },
            binding: BIND_CATCH_PARAM
          });
          return param;
        }
        parseTryStatement(node) {
          this.next();
          node.block = this.parseBlock();
          node.handler = null;
          if (this.match(62)) {
            const clause = this.startNode();
            this.next();
            if (this.match(10)) {
              this.expect(10);
              clause.param = this.parseCatchClauseParam();
              this.expect(11);
            } else {
              clause.param = null;
              this.scope.enter(SCOPE_OTHER);
            }
            clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
            this.scope.exit();
            node.handler = this.finishNode(clause, "CatchClause");
          }
          node.finalizer = this.eat(67) ? this.parseBlock() : null;
          if (!node.handler && !node.finalizer) {
            this.raise(Errors.NoCatchOrFinally, {
              at: node
            });
          }
          return this.finishNode(node, "TryStatement");
        }
        parseVarStatement(node, kind, allowMissingInitializer = false) {
          this.next();
          this.parseVar(node, false, kind, allowMissingInitializer);
          this.semicolon();
          return this.finishNode(node, "VariableDeclaration");
        }
        parseWhileStatement(node) {
          this.next();
          node.test = this.parseHeaderExpression();
          this.state.labels.push(loopLabel);
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          this.state.labels.pop();
          return this.finishNode(node, "WhileStatement");
        }
        parseWithStatement(node) {
          if (this.state.strict) {
            this.raise(Errors.StrictWith, {
              at: this.state.startLoc
            });
          }
          this.next();
          node.object = this.parseHeaderExpression();
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          return this.finishNode(node, "WithStatement");
        }
        parseEmptyStatement(node) {
          this.next();
          return this.finishNode(node, "EmptyStatement");
        }
        parseLabeledStatement(node, maybeName, expr, flags) {
          for (const label of this.state.labels) {
            if (label.name === maybeName) {
              this.raise(Errors.LabelRedeclaration, {
                at: expr,
                labelName: maybeName
              });
            }
          }
          const kind = tokenIsLoop(this.state.type) ? "loop" : this.match(71) ? "switch" : null;
          for (let i = this.state.labels.length - 1; i >= 0; i--) {
            const label = this.state.labels[i];
            if (label.statementStart === node.start) {
              label.statementStart = this.state.start;
              label.kind = kind;
            } else {
              break;
            }
          }
          this.state.labels.push({
            name: maybeName,
            kind,
            statementStart: this.state.start
          });
          node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();
          this.state.labels.pop();
          node.label = expr;
          return this.finishNode(node, "LabeledStatement");
        }
        parseExpressionStatement(node, expr, decorators) {
          node.expression = expr;
          this.semicolon();
          return this.finishNode(node, "ExpressionStatement");
        }
        parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
          const node = this.startNode();
          if (allowDirectives) {
            this.state.strictErrors.clear();
          }
          this.expect(5);
          if (createNewLexicalScope) {
            this.scope.enter(SCOPE_OTHER);
          }
          this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);
          if (createNewLexicalScope) {
            this.scope.exit();
          }
          return this.finishNode(node, "BlockStatement");
        }
        isValidDirective(stmt) {
          return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
        }
        parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
          const body = node.body = [];
          const directives = node.directives = [];
          this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
        }
        parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
          const oldStrict = this.state.strict;
          let hasStrictModeDirective = false;
          let parsedNonDirective = false;
          while (!this.match(end)) {
            const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
            if (directives && !parsedNonDirective) {
              if (this.isValidDirective(stmt)) {
                const directive = this.stmtToDirective(stmt);
                directives.push(directive);
                if (!hasStrictModeDirective && directive.value.value === "use strict") {
                  hasStrictModeDirective = true;
                  this.setStrict(true);
                }
                continue;
              }
              parsedNonDirective = true;
              this.state.strictErrors.clear();
            }
            body.push(stmt);
          }
          if (afterBlockParse) {
            afterBlockParse.call(this, hasStrictModeDirective);
          }
          if (!oldStrict) {
            this.setStrict(false);
          }
          this.next();
        }
        parseFor(node, init) {
          node.init = init;
          this.semicolon(false);
          node.test = this.match(13) ? null : this.parseExpression();
          this.semicolon(false);
          node.update = this.match(11) ? null : this.parseExpression();
          this.expect(11);
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          this.scope.exit();
          this.state.labels.pop();
          return this.finishNode(node, "ForStatement");
        }
        parseForIn(node, init, awaitAt) {
          const isForIn = this.match(58);
          this.next();
          if (isForIn) {
            if (awaitAt !== null)
              this.unexpected(awaitAt);
          } else {
            node.await = awaitAt !== null;
          }
          if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
            this.raise(Errors.ForInOfLoopInitializer, {
              at: init,
              type: isForIn ? "ForInStatement" : "ForOfStatement"
            });
          }
          if (init.type === "AssignmentPattern") {
            this.raise(Errors.InvalidLhs, {
              at: init,
              ancestor: {
                type: "ForStatement"
              }
            });
          }
          node.left = init;
          node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
          this.expect(11);
          node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
          this.scope.exit();
          this.state.labels.pop();
          return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        }
        parseVar(node, isFor, kind, allowMissingInitializer = false) {
          const declarations = node.declarations = [];
          node.kind = kind;
          for (; ; ) {
            const decl = this.startNode();
            this.parseVarId(decl, kind);
            decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
            if (decl.init === null && !allowMissingInitializer) {
              if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(101)))) {
                this.raise(Errors.DeclarationMissingInitializer, {
                  at: this.state.lastTokEndLoc,
                  kind: "destructuring"
                });
              } else if (kind === "const" && !(this.match(58) || this.isContextual(101))) {
                this.raise(Errors.DeclarationMissingInitializer, {
                  at: this.state.lastTokEndLoc,
                  kind: "const"
                });
              }
            }
            declarations.push(this.finishNode(decl, "VariableDeclarator"));
            if (!this.eat(12))
              break;
          }
          return node;
        }
        parseVarId(decl, kind) {
          const id = this.parseBindingAtom();
          this.checkLVal(id, {
            in: {
              type: "VariableDeclarator"
            },
            binding: kind === "var" ? BIND_VAR : BIND_LEXICAL
          });
          decl.id = id;
        }
        parseAsyncFunctionExpression(node) {
          return this.parseFunction(node, 8);
        }
        parseFunction(node, flags = 0) {
          const hangingDeclaration = flags & 2;
          const isDeclaration = !!(flags & 1);
          const requireId = isDeclaration && !(flags & 4);
          const isAsync = !!(flags & 8);
          this.initFunction(node, isAsync);
          if (this.match(55)) {
            if (hangingDeclaration) {
              this.raise(Errors.GeneratorInSingleStatementContext, {
                at: this.state.startLoc
              });
            }
            this.next();
            node.generator = true;
          }
          if (isDeclaration) {
            node.id = this.parseFunctionId(requireId);
          }
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          this.state.maybeInArrowParameters = false;
          this.scope.enter(SCOPE_FUNCTION);
          this.prodParam.enter(functionFlags(isAsync, node.generator));
          if (!isDeclaration) {
            node.id = this.parseFunctionId();
          }
          this.parseFunctionParams(node, false);
          this.withSmartMixTopicForbiddingContext(() => {
            this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
          });
          this.prodParam.exit();
          this.scope.exit();
          if (isDeclaration && !hangingDeclaration) {
            this.registerFunctionStatementId(node);
          }
          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
          return node;
        }
        parseFunctionId(requireId) {
          return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
        }
        parseFunctionParams(node, isConstructor) {
          this.expect(10);
          this.expressionScope.enter(newParameterDeclarationScope());
          node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));
          this.expressionScope.exit();
        }
        registerFunctionStatementId(node) {
          if (!node.id)
            return;
          this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);
        }
        parseClass(node, isStatement, optionalId) {
          this.next();
          const oldStrict = this.state.strict;
          this.state.strict = true;
          this.parseClassId(node, isStatement, optionalId);
          this.parseClassSuper(node);
          node.body = this.parseClassBody(!!node.superClass, oldStrict);
          return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        }
        isClassProperty() {
          return this.match(29) || this.match(13) || this.match(8);
        }
        isClassMethod() {
          return this.match(10);
        }
        isNonstaticConstructor(method) {
          return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
        }
        parseClassBody(hadSuperClass, oldStrict) {
          this.classScope.enter();
          const state = {
            hadConstructor: false,
            hadSuperClass
          };
          let decorators = [];
          const classBody = this.startNode();
          classBody.body = [];
          this.expect(5);
          this.withSmartMixTopicForbiddingContext(() => {
            while (!this.match(8)) {
              if (this.eat(13)) {
                if (decorators.length > 0) {
                  throw this.raise(Errors.DecoratorSemicolon, {
                    at: this.state.lastTokEndLoc
                  });
                }
                continue;
              }
              if (this.match(26)) {
                decorators.push(this.parseDecorator());
                continue;
              }
              const member = this.startNode();
              if (decorators.length) {
                member.decorators = decorators;
                this.resetStartLocationFromNode(member, decorators[0]);
                decorators = [];
              }
              this.parseClassMember(classBody, member, state);
              if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
                this.raise(Errors.DecoratorConstructor, {
                  at: member
                });
              }
            }
          });
          this.state.strict = oldStrict;
          this.next();
          if (decorators.length) {
            throw this.raise(Errors.TrailingDecorator, {
              at: this.state.startLoc
            });
          }
          this.classScope.exit();
          return this.finishNode(classBody, "ClassBody");
        }
        parseClassMemberFromModifier(classBody, member) {
          const key = this.parseIdentifier(true);
          if (this.isClassMethod()) {
            const method = member;
            method.kind = "method";
            method.computed = false;
            method.key = key;
            method.static = false;
            this.pushClassMethod(classBody, method, false, false, false, false);
            return true;
          } else if (this.isClassProperty()) {
            const prop = member;
            prop.computed = false;
            prop.key = key;
            prop.static = false;
            classBody.body.push(this.parseClassProperty(prop));
            return true;
          }
          this.resetPreviousNodeTrailingComments(key);
          return false;
        }
        parseClassMember(classBody, member, state) {
          const isStatic = this.isContextual(104);
          if (isStatic) {
            if (this.parseClassMemberFromModifier(classBody, member)) {
              return;
            }
            if (this.eat(5)) {
              this.parseClassStaticBlock(classBody, member);
              return;
            }
          }
          this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
        }
        parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
          const publicMethod = member;
          const privateMethod = member;
          const publicProp = member;
          const privateProp = member;
          const accessorProp = member;
          const method = publicMethod;
          const publicMember = publicMethod;
          member.static = isStatic;
          this.parsePropertyNamePrefixOperator(member);
          if (this.eat(55)) {
            method.kind = "method";
            const isPrivateName = this.match(136);
            this.parseClassElementName(method);
            if (isPrivateName) {
              this.pushClassPrivateMethod(classBody, privateMethod, true, false);
              return;
            }
            if (this.isNonstaticConstructor(publicMethod)) {
              this.raise(Errors.ConstructorIsGenerator, {
                at: publicMethod.key
              });
            }
            this.pushClassMethod(classBody, publicMethod, true, false, false, false);
            return;
          }
          const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
          const isPrivate = this.match(136);
          const key = this.parseClassElementName(member);
          const maybeQuestionTokenStartLoc = this.state.startLoc;
          this.parsePostMemberNameModifiers(publicMember);
          if (this.isClassMethod()) {
            method.kind = "method";
            if (isPrivate) {
              this.pushClassPrivateMethod(classBody, privateMethod, false, false);
              return;
            }
            const isConstructor = this.isNonstaticConstructor(publicMethod);
            let allowsDirectSuper = false;
            if (isConstructor) {
              publicMethod.kind = "constructor";
              if (state.hadConstructor && !this.hasPlugin("typescript")) {
                this.raise(Errors.DuplicateConstructor, {
                  at: key
                });
              }
              if (isConstructor && this.hasPlugin("typescript") && member.override) {
                this.raise(Errors.OverrideOnConstructor, {
                  at: key
                });
              }
              state.hadConstructor = true;
              allowsDirectSuper = state.hadSuperClass;
            }
            this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
          } else if (this.isClassProperty()) {
            if (isPrivate) {
              this.pushClassPrivateProperty(classBody, privateProp);
            } else {
              this.pushClassProperty(classBody, publicProp);
            }
          } else if (isContextual && key.name === "async" && !this.isLineTerminator()) {
            this.resetPreviousNodeTrailingComments(key);
            const isGenerator = this.eat(55);
            if (publicMember.optional) {
              this.unexpected(maybeQuestionTokenStartLoc);
            }
            method.kind = "method";
            const isPrivate2 = this.match(136);
            this.parseClassElementName(method);
            this.parsePostMemberNameModifiers(publicMember);
            if (isPrivate2) {
              this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
            } else {
              if (this.isNonstaticConstructor(publicMethod)) {
                this.raise(Errors.ConstructorIsAsync, {
                  at: publicMethod.key
                });
              }
              this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
            }
          } else if (isContextual && (key.name === "get" || key.name === "set") && !(this.match(55) && this.isLineTerminator())) {
            this.resetPreviousNodeTrailingComments(key);
            method.kind = key.name;
            const isPrivate2 = this.match(136);
            this.parseClassElementName(publicMethod);
            if (isPrivate2) {
              this.pushClassPrivateMethod(classBody, privateMethod, false, false);
            } else {
              if (this.isNonstaticConstructor(publicMethod)) {
                this.raise(Errors.ConstructorIsAccessor, {
                  at: publicMethod.key
                });
              }
              this.pushClassMethod(classBody, publicMethod, false, false, false, false);
            }
            this.checkGetterSetterParams(publicMethod);
          } else if (isContextual && key.name === "accessor" && !this.isLineTerminator()) {
            this.expectPlugin("decoratorAutoAccessors");
            this.resetPreviousNodeTrailingComments(key);
            const isPrivate2 = this.match(136);
            this.parseClassElementName(publicProp);
            this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
          } else if (this.isLineTerminator()) {
            if (isPrivate) {
              this.pushClassPrivateProperty(classBody, privateProp);
            } else {
              this.pushClassProperty(classBody, publicProp);
            }
          } else {
            this.unexpected();
          }
        }
        parseClassElementName(member) {
          const {
            type,
            value
          } = this.state;
          if ((type === 130 || type === 131) && member.static && value === "prototype") {
            this.raise(Errors.StaticPrototype, {
              at: this.state.startLoc
            });
          }
          if (type === 136) {
            if (value === "constructor") {
              this.raise(Errors.ConstructorClassPrivateField, {
                at: this.state.startLoc
              });
            }
            const key = this.parsePrivateName();
            member.key = key;
            return key;
          }
          return this.parsePropertyName(member);
        }
        parseClassStaticBlock(classBody, member) {
          var _member$decorators;
          this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);
          const oldLabels = this.state.labels;
          this.state.labels = [];
          this.prodParam.enter(PARAM);
          const body = member.body = [];
          this.parseBlockOrModuleBlockBody(body, void 0, false, 8);
          this.prodParam.exit();
          this.scope.exit();
          this.state.labels = oldLabels;
          classBody.body.push(this.finishNode(member, "StaticBlock"));
          if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
            this.raise(Errors.DecoratorStaticBlock, {
              at: member
            });
          }
        }
        pushClassProperty(classBody, prop) {
          if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
            this.raise(Errors.ConstructorClassField, {
              at: prop.key
            });
          }
          classBody.body.push(this.parseClassProperty(prop));
        }
        pushClassPrivateProperty(classBody, prop) {
          const node = this.parseClassPrivateProperty(prop);
          classBody.body.push(node);
          this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);
        }
        pushClassAccessorProperty(classBody, prop, isPrivate) {
          if (!isPrivate && !prop.computed) {
            const key = prop.key;
            if (key.name === "constructor" || key.value === "constructor") {
              this.raise(Errors.ConstructorClassField, {
                at: key
              });
            }
          }
          const node = this.parseClassAccessorProperty(prop);
          classBody.body.push(node);
          if (isPrivate) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);
          }
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
          const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
          classBody.body.push(node);
          const kind = node.kind === "get" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === "set" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;
          this.declareClassPrivateMethodInScope(node, kind);
        }
        declareClassPrivateMethodInScope(node, kind) {
          this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
        }
        parsePostMemberNameModifiers(methodOrProp) {
        }
        parseClassPrivateProperty(node) {
          this.parseInitializer(node);
          this.semicolon();
          return this.finishNode(node, "ClassPrivateProperty");
        }
        parseClassProperty(node) {
          this.parseInitializer(node);
          this.semicolon();
          return this.finishNode(node, "ClassProperty");
        }
        parseClassAccessorProperty(node) {
          this.parseInitializer(node);
          this.semicolon();
          return this.finishNode(node, "ClassAccessorProperty");
        }
        parseInitializer(node) {
          this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);
          this.expressionScope.enter(newExpressionScope());
          this.prodParam.enter(PARAM);
          node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
          this.expressionScope.exit();
          this.prodParam.exit();
          this.scope.exit();
        }
        parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {
          if (tokenIsIdentifier(this.state.type)) {
            node.id = this.parseIdentifier();
            if (isStatement) {
              this.declareNameFromIdentifier(node.id, bindingType);
            }
          } else {
            if (optionalId || !isStatement) {
              node.id = null;
            } else {
              throw this.raise(Errors.MissingClassName, {
                at: this.state.startLoc
              });
            }
          }
        }
        parseClassSuper(node) {
          node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
        }
        parseExport(node, decorators) {
          const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);
          const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
          const parseAfterDefault = !hasDefault || this.eat(12);
          const hasStar = parseAfterDefault && this.eatExportStar(node);
          const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
          const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
          const isFromRequired = hasDefault || hasStar;
          if (hasStar && !hasNamespace) {
            if (hasDefault)
              this.unexpected();
            if (decorators) {
              throw this.raise(Errors.UnsupportedDecoratorExport, {
                at: node
              });
            }
            this.parseExportFrom(node, true);
            return this.finishNode(node, "ExportAllDeclaration");
          }
          const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
          if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {
            this.unexpected(null, 5);
          }
          if (hasNamespace && parseAfterNamespace) {
            this.unexpected(null, 97);
          }
          let hasDeclaration;
          if (isFromRequired || hasSpecifiers) {
            hasDeclaration = false;
            if (decorators) {
              throw this.raise(Errors.UnsupportedDecoratorExport, {
                at: node
              });
            }
            this.parseExportFrom(node, isFromRequired);
          } else {
            hasDeclaration = this.maybeParseExportDeclaration(node);
          }
          if (isFromRequired || hasSpecifiers || hasDeclaration) {
            var _node2$declaration;
            const node2 = node;
            this.checkExport(node2, true, false, !!node2.source);
            if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {
              this.maybeTakeDecorators(decorators, node2.declaration, node2);
            } else if (decorators) {
              throw this.raise(Errors.UnsupportedDecoratorExport, {
                at: node
              });
            }
            return this.finishNode(node2, "ExportNamedDeclaration");
          }
          if (this.eat(65)) {
            const node2 = node;
            const decl = this.parseExportDefaultExpression();
            node2.declaration = decl;
            if (decl.type === "ClassDeclaration") {
              this.maybeTakeDecorators(decorators, decl, node2);
            } else if (decorators) {
              throw this.raise(Errors.UnsupportedDecoratorExport, {
                at: node
              });
            }
            this.checkExport(node2, true, true);
            return this.finishNode(node2, "ExportDefaultDeclaration");
          }
          this.unexpected(null, 5);
        }
        eatExportStar(node) {
          return this.eat(55);
        }
        maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
          if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
            this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);
            const id = maybeDefaultIdentifier || this.parseIdentifier(true);
            const specifier = this.startNodeAtNode(id);
            specifier.exported = id;
            node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
            return true;
          }
          return false;
        }
        maybeParseExportNamespaceSpecifier(node) {
          if (this.isContextual(93)) {
            if (!node.specifiers)
              node.specifiers = [];
            const specifier = this.startNodeAt(this.state.lastTokStartLoc);
            this.next();
            specifier.exported = this.parseModuleExportName();
            node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
            return true;
          }
          return false;
        }
        maybeParseExportNamedSpecifiers(node) {
          if (this.match(5)) {
            if (!node.specifiers)
              node.specifiers = [];
            const isTypeExport = node.exportKind === "type";
            node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
            node.source = null;
            node.declaration = null;
            if (this.hasPlugin("importAssertions")) {
              node.assertions = [];
            }
            return true;
          }
          return false;
        }
        maybeParseExportDeclaration(node) {
          if (this.shouldParseExportDeclaration()) {
            node.specifiers = [];
            node.source = null;
            if (this.hasPlugin("importAssertions")) {
              node.assertions = [];
            }
            node.declaration = this.parseExportDeclaration(node);
            return true;
          }
          return false;
        }
        isAsyncFunction() {
          if (!this.isContextual(95))
            return false;
          const next = this.nextTokenInLineStart();
          return this.isUnparsedContextual(next, "function");
        }
        parseExportDefaultExpression() {
          const expr = this.startNode();
          if (this.match(68)) {
            this.next();
            return this.parseFunction(expr, 1 | 4);
          } else if (this.isAsyncFunction()) {
            this.next();
            this.next();
            return this.parseFunction(expr, 1 | 4 | 8);
          }
          if (this.match(80)) {
            return this.parseClass(expr, true, true);
          }
          if (this.match(26)) {
            if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
              this.raise(Errors.DecoratorBeforeExport, {
                at: this.state.startLoc
              });
            }
            return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
          }
          if (this.match(75) || this.match(74) || this.isLet()) {
            throw this.raise(Errors.UnsupportedDefaultExport, {
              at: this.state.startLoc
            });
          }
          const res = this.parseMaybeAssignAllowIn();
          this.semicolon();
          return res;
        }
        parseExportDeclaration(node) {
          if (this.match(80)) {
            const node2 = this.parseClass(this.startNode(), true, false);
            return node2;
          }
          return this.parseStatementListItem();
        }
        isExportDefaultSpecifier() {
          const {
            type
          } = this.state;
          if (tokenIsIdentifier(type)) {
            if (type === 95 && !this.state.containsEsc || type === 99) {
              return false;
            }
            if ((type === 128 || type === 127) && !this.state.containsEsc) {
              const {
                type: nextType
              } = this.lookahead();
              if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {
                this.expectOnePlugin(["flow", "typescript"]);
                return false;
              }
            }
          } else if (!this.match(65)) {
            return false;
          }
          const next = this.nextTokenStart();
          const hasFrom = this.isUnparsedContextual(next, "from");
          if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
            return true;
          }
          if (this.match(65) && hasFrom) {
            const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
            return nextAfterFrom === 34 || nextAfterFrom === 39;
          }
          return false;
        }
        parseExportFrom(node, expect) {
          if (this.eatContextual(97)) {
            node.source = this.parseImportSource();
            this.checkExport(node);
            this.maybeParseImportAttributes(node);
            this.checkJSONModuleImport(node);
          } else if (expect) {
            this.unexpected();
          }
          this.semicolon();
        }
        shouldParseExportDeclaration() {
          const {
            type
          } = this.state;
          if (type === 26) {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            if (this.hasPlugin("decorators")) {
              if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
                this.raise(Errors.DecoratorBeforeExport, {
                  at: this.state.startLoc
                });
              }
              return true;
            }
          }
          return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
        }
        checkExport(node, checkNames, isDefault, isFrom) {
          if (checkNames) {
            if (isDefault) {
              this.checkDuplicateExports(node, "default");
              if (this.hasPlugin("exportDefaultFrom")) {
                var _declaration$extra;
                const declaration = node.declaration;
                if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
                  this.raise(Errors.ExportDefaultFromAsIdentifier, {
                    at: declaration
                  });
                }
              }
            } else if (node.specifiers && node.specifiers.length) {
              for (const specifier of node.specifiers) {
                const {
                  exported
                } = specifier;
                const exportName = exported.type === "Identifier" ? exported.name : exported.value;
                this.checkDuplicateExports(specifier, exportName);
                if (!isFrom && specifier.local) {
                  const {
                    local
                  } = specifier;
                  if (local.type !== "Identifier") {
                    this.raise(Errors.ExportBindingIsString, {
                      at: specifier,
                      localName: local.value,
                      exportName
                    });
                  } else {
                    this.checkReservedWord(local.name, local.loc.start, true, false);
                    this.scope.checkLocalExport(local);
                  }
                }
              }
            } else if (node.declaration) {
              if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
                const id = node.declaration.id;
                if (!id)
                  throw new Error("Assertion failure");
                this.checkDuplicateExports(node, id.name);
              } else if (node.declaration.type === "VariableDeclaration") {
                for (const declaration of node.declaration.declarations) {
                  this.checkDeclaration(declaration.id);
                }
              }
            }
          }
        }
        checkDeclaration(node) {
          if (node.type === "Identifier") {
            this.checkDuplicateExports(node, node.name);
          } else if (node.type === "ObjectPattern") {
            for (const prop of node.properties) {
              this.checkDeclaration(prop);
            }
          } else if (node.type === "ArrayPattern") {
            for (const elem of node.elements) {
              if (elem) {
                this.checkDeclaration(elem);
              }
            }
          } else if (node.type === "ObjectProperty") {
            this.checkDeclaration(node.value);
          } else if (node.type === "RestElement") {
            this.checkDeclaration(node.argument);
          } else if (node.type === "AssignmentPattern") {
            this.checkDeclaration(node.left);
          }
        }
        checkDuplicateExports(node, exportName) {
          if (this.exportedIdentifiers.has(exportName)) {
            if (exportName === "default") {
              this.raise(Errors.DuplicateDefaultExport, {
                at: node
              });
            } else {
              this.raise(Errors.DuplicateExport, {
                at: node,
                exportName
              });
            }
          }
          this.exportedIdentifiers.add(exportName);
        }
        parseExportSpecifiers(isInTypeExport) {
          const nodes = [];
          let first = true;
          this.expect(5);
          while (!this.eat(8)) {
            if (first) {
              first = false;
            } else {
              this.expect(12);
              if (this.eat(8))
                break;
            }
            const isMaybeTypeOnly = this.isContextual(128);
            const isString = this.match(131);
            const node = this.startNode();
            node.local = this.parseModuleExportName();
            nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
          }
          return nodes;
        }
        parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
          if (this.eatContextual(93)) {
            node.exported = this.parseModuleExportName();
          } else if (isString) {
            node.exported = cloneStringLiteral(node.local);
          } else if (!node.exported) {
            node.exported = cloneIdentifier(node.local);
          }
          return this.finishNode(node, "ExportSpecifier");
        }
        parseModuleExportName() {
          if (this.match(131)) {
            const result = this.parseStringLiteral(this.state.value);
            const surrogate = result.value.match(loneSurrogate);
            if (surrogate) {
              this.raise(Errors.ModuleExportNameHasLoneSurrogate, {
                at: result,
                surrogateCharCode: surrogate[0].charCodeAt(0)
              });
            }
            return result;
          }
          return this.parseIdentifier(true);
        }
        isJSONModuleImport(node) {
          if (node.assertions != null) {
            return node.assertions.some(({
              key,
              value
            }) => {
              return value.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");
            });
          }
          return false;
        }
        checkImportReflection(node) {
          if (node.module) {
            var _node$assertions;
            if (node.specifiers.length !== 1 || node.specifiers[0].type !== "ImportDefaultSpecifier") {
              this.raise(Errors.ImportReflectionNotBinding, {
                at: node.specifiers[0].loc.start
              });
            }
            if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {
              this.raise(Errors.ImportReflectionHasAssertion, {
                at: node.specifiers[0].loc.start
              });
            }
          }
        }
        checkJSONModuleImport(node) {
          if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {
            const {
              specifiers
            } = node;
            if (specifiers != null) {
              const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
                let imported;
                if (specifier.type === "ExportSpecifier") {
                  imported = specifier.local;
                } else if (specifier.type === "ImportSpecifier") {
                  imported = specifier.imported;
                }
                if (imported !== void 0) {
                  return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
                }
              });
              if (nonDefaultNamedSpecifier !== void 0) {
                this.raise(Errors.ImportJSONBindingNotDefault, {
                  at: nonDefaultNamedSpecifier.loc.start
                });
              }
            }
          }
        }
        isPotentialImportPhase(isExport) {
          return !isExport && this.isContextual(125);
        }
        applyImportPhase(node, isExport, phase, loc) {
          if (isExport) {
            return;
          }
          if (phase === "module") {
            this.expectPlugin("importReflection", loc);
            node.module = true;
          } else if (this.hasPlugin("importReflection")) {
            node.module = false;
          }
        }
        parseMaybeImportPhase(node, isExport) {
          if (!this.isPotentialImportPhase(isExport)) {
            this.applyImportPhase(node, isExport, null);
            return null;
          }
          const phaseIdentifier = this.parseIdentifier(true);
          const {
            type
          } = this.state;
          const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 97 || this.lookaheadCharCode() === 102 : type !== 12;
          if (isImportPhase) {
            this.resetPreviousIdentifierLeadingComments(phaseIdentifier);
            this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);
            return null;
          } else {
            this.applyImportPhase(node, isExport, null);
            return phaseIdentifier;
          }
        }
        isPrecedingIdImportPhase(phase) {
          const {
            type
          } = this.state;
          return tokenIsIdentifier(type) ? type !== 97 || this.lookaheadCharCode() === 102 : type !== 12;
        }
        parseImport(node) {
          if (this.match(131)) {
            return this.parseImportSourceAndAttributes(node);
          }
          return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
        }
        parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
          node.specifiers = [];
          const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);
          const parseNext = !hasDefault || this.eat(12);
          const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
          if (parseNext && !hasStar)
            this.parseNamedImportSpecifiers(node);
          this.expectContextual(97);
          return this.parseImportSourceAndAttributes(node);
        }
        parseImportSourceAndAttributes(node) {
          var _node$specifiers;
          (_node$specifiers = node.specifiers) != null ? _node$specifiers : node.specifiers = [];
          node.source = this.parseImportSource();
          this.maybeParseImportAttributes(node);
          this.checkImportReflection(node);
          this.checkJSONModuleImport(node);
          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        }
        parseImportSource() {
          if (!this.match(131))
            this.unexpected();
          return this.parseExprAtom();
        }
        parseImportSpecifierLocal(node, specifier, type) {
          specifier.local = this.parseIdentifier();
          node.specifiers.push(this.finishImportSpecifier(specifier, type));
        }
        finishImportSpecifier(specifier, type, bindingType = BIND_LEXICAL) {
          this.checkLVal(specifier.local, {
            in: {
              type
            },
            binding: bindingType
          });
          return this.finishNode(specifier, type);
        }
        parseImportAttributes() {
          this.expect(5);
          const attrs = [];
          const attrNames = /* @__PURE__ */ new Set();
          do {
            if (this.match(8)) {
              break;
            }
            const node = this.startNode();
            const keyName = this.state.value;
            if (attrNames.has(keyName)) {
              this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
                at: this.state.startLoc,
                key: keyName
              });
            }
            attrNames.add(keyName);
            if (this.match(131)) {
              node.key = this.parseStringLiteral(keyName);
            } else {
              node.key = this.parseIdentifier(true);
            }
            this.expect(14);
            if (!this.match(131)) {
              throw this.raise(Errors.ModuleAttributeInvalidValue, {
                at: this.state.startLoc
              });
            }
            node.value = this.parseStringLiteral(this.state.value);
            attrs.push(this.finishNode(node, "ImportAttribute"));
          } while (this.eat(12));
          this.expect(8);
          return attrs;
        }
        parseModuleAttributes() {
          const attrs = [];
          const attributes = /* @__PURE__ */ new Set();
          do {
            const node = this.startNode();
            node.key = this.parseIdentifier(true);
            if (node.key.name !== "type") {
              this.raise(Errors.ModuleAttributeDifferentFromType, {
                at: node.key
              });
            }
            if (attributes.has(node.key.name)) {
              this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
                at: node.key,
                key: node.key.name
              });
            }
            attributes.add(node.key.name);
            this.expect(14);
            if (!this.match(131)) {
              throw this.raise(Errors.ModuleAttributeInvalidValue, {
                at: this.state.startLoc
              });
            }
            node.value = this.parseStringLiteral(this.state.value);
            attrs.push(this.finishNode(node, "ImportAttribute"));
          } while (this.eat(12));
          return attrs;
        }
        maybeParseImportAttributes(node) {
          let attributes;
          let useWith = false;
          if (this.match(76)) {
            if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {
              return;
            }
            this.next();
            {
              if (this.hasPlugin("moduleAttributes")) {
                attributes = this.parseModuleAttributes();
              } else {
                this.expectImportAttributesPlugin();
                attributes = this.parseImportAttributes();
              }
            }
            useWith = true;
          } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
            if (this.hasPlugin("importAttributes")) {
              if (this.getPluginOption("importAttributes", "deprecatedAssertSyntax") !== true) {
                this.raise(Errors.ImportAttributesUseAssert, {
                  at: this.state.startLoc
                });
              }
              this.addExtra(node, "deprecatedAssertSyntax", true);
            } else {
              this.expectOnePlugin(["importAttributes", "importAssertions"]);
            }
            this.next();
            attributes = this.parseImportAttributes();
          } else if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
            attributes = [];
          } else {
            if (this.hasPlugin("moduleAttributes")) {
              attributes = [];
            } else
              return;
          }
          if (!useWith && this.hasPlugin("importAssertions")) {
            node.assertions = attributes;
          } else {
            node.attributes = attributes;
          }
        }
        maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
          if (maybeDefaultIdentifier) {
            const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
            specifier.local = maybeDefaultIdentifier;
            node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));
            return true;
          } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
            this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");
            return true;
          }
          return false;
        }
        maybeParseStarImportSpecifier(node) {
          if (this.match(55)) {
            const specifier = this.startNode();
            this.next();
            this.expectContextual(93);
            this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");
            return true;
          }
          return false;
        }
        parseNamedImportSpecifiers(node) {
          let first = true;
          this.expect(5);
          while (!this.eat(8)) {
            if (first) {
              first = false;
            } else {
              if (this.eat(14)) {
                throw this.raise(Errors.DestructureNamedImport, {
                  at: this.state.startLoc
                });
              }
              this.expect(12);
              if (this.eat(8))
                break;
            }
            const specifier = this.startNode();
            const importedIsString = this.match(131);
            const isMaybeTypeOnly = this.isContextual(128);
            specifier.imported = this.parseModuleExportName();
            const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, void 0);
            node.specifiers.push(importSpecifier);
          }
        }
        parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
          if (this.eatContextual(93)) {
            specifier.local = this.parseIdentifier();
          } else {
            const {
              imported
            } = specifier;
            if (importedIsString) {
              throw this.raise(Errors.ImportBindingIsString, {
                at: specifier,
                importName: imported.value
              });
            }
            this.checkReservedWord(imported.name, specifier.loc.start, true, true);
            if (!specifier.local) {
              specifier.local = cloneIdentifier(imported);
            }
          }
          return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
        }
        isThisParam(param) {
          return param.type === "Identifier" && param.name === "this";
        }
      };
      var Parser = class extends StatementParser {
        constructor(options, input) {
          options = getOptions(options);
          super(options, input);
          this.options = options;
          this.initializeScopes();
          this.plugins = pluginsMap(this.options.plugins);
          this.filename = options.sourceFilename;
        }
        getScopeHandler() {
          return ScopeHandler;
        }
        parse() {
          this.enterInitialScopes();
          const file = this.startNode();
          const program = this.startNode();
          this.nextToken();
          file.errors = null;
          this.parseTopLevel(file, program);
          file.errors = this.state.errors;
          return file;
        }
      };
      function pluginsMap(plugins) {
        const pluginMap = /* @__PURE__ */ new Map();
        for (const plugin of plugins) {
          const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
          if (!pluginMap.has(name))
            pluginMap.set(name, options || {});
        }
        return pluginMap;
      }
      function parse(input, options) {
        var _options;
        if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
          options = Object.assign({}, options);
          try {
            options.sourceType = "module";
            const parser = getParser(options, input);
            const ast = parser.parse();
            if (parser.sawUnambiguousESM) {
              return ast;
            }
            if (parser.ambiguousScriptDifferentAst) {
              try {
                options.sourceType = "script";
                return getParser(options, input).parse();
              } catch (_unused) {
              }
            } else {
              ast.program.sourceType = "script";
            }
            return ast;
          } catch (moduleError) {
            try {
              options.sourceType = "script";
              return getParser(options, input).parse();
            } catch (_unused2) {
            }
            throw moduleError;
          }
        } else {
          return getParser(options, input).parse();
        }
      }
      function parseExpression(input, options) {
        const parser = getParser(options, input);
        if (parser.options.strictMode) {
          parser.state.strict = true;
        }
        return parser.getExpression();
      }
      function generateExportedTokenTypes(internalTokenTypes) {
        const tokenTypes2 = {};
        for (const typeName of Object.keys(internalTokenTypes)) {
          tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
        }
        return tokenTypes2;
      }
      var tokTypes = generateExportedTokenTypes(tt);
      function getParser(options, input) {
        let cls = Parser;
        if (options != null && options.plugins) {
          validatePlugins(options.plugins);
          cls = getParserClass(options.plugins);
        }
        return new cls(options, input);
      }
      var parserClassCache = {};
      function getParserClass(pluginsFromOptions) {
        const pluginList = mixinPluginNames.filter((name) => hasPlugin(pluginsFromOptions, name));
        const key = pluginList.join("/");
        let cls = parserClassCache[key];
        if (!cls) {
          cls = Parser;
          for (const plugin of pluginList) {
            cls = mixinPlugins[plugin](cls);
          }
          parserClassCache[key] = cls;
        }
        return cls;
      }
      exports.parse = parse;
      exports.parseExpression = parseExpression;
      exports.tokTypes = tokTypes;
    }
  });

  // node_modules/source-map-js/lib/base64.js
  var require_base64 = __commonJS({
    "node_modules/source-map-js/lib/base64.js"(exports) {
      var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      exports.encode = function(number) {
        if (0 <= number && number < intToCharMap.length) {
          return intToCharMap[number];
        }
        throw new TypeError("Must be between 0 and 63: " + number);
      };
      exports.decode = function(charCode) {
        var bigA = 65;
        var bigZ = 90;
        var littleA = 97;
        var littleZ = 122;
        var zero = 48;
        var nine = 57;
        var plus = 43;
        var slash = 47;
        var littleOffset = 26;
        var numberOffset = 52;
        if (bigA <= charCode && charCode <= bigZ) {
          return charCode - bigA;
        }
        if (littleA <= charCode && charCode <= littleZ) {
          return charCode - littleA + littleOffset;
        }
        if (zero <= charCode && charCode <= nine) {
          return charCode - zero + numberOffset;
        }
        if (charCode == plus) {
          return 62;
        }
        if (charCode == slash) {
          return 63;
        }
        return -1;
      };
    }
  });

  // node_modules/source-map-js/lib/base64-vlq.js
  var require_base64_vlq = __commonJS({
    "node_modules/source-map-js/lib/base64-vlq.js"(exports) {
      var base64 = require_base64();
      var VLQ_BASE_SHIFT = 5;
      var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
      var VLQ_BASE_MASK = VLQ_BASE - 1;
      var VLQ_CONTINUATION_BIT = VLQ_BASE;
      function toVLQSigned(aValue) {
        return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
      }
      function fromVLQSigned(aValue) {
        var isNegative = (aValue & 1) === 1;
        var shifted = aValue >> 1;
        return isNegative ? -shifted : shifted;
      }
      exports.encode = function base64VLQ_encode(aValue) {
        var encoded = "";
        var digit;
        var vlq = toVLQSigned(aValue);
        do {
          digit = vlq & VLQ_BASE_MASK;
          vlq >>>= VLQ_BASE_SHIFT;
          if (vlq > 0) {
            digit |= VLQ_CONTINUATION_BIT;
          }
          encoded += base64.encode(digit);
        } while (vlq > 0);
        return encoded;
      };
      exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
        var strLen = aStr.length;
        var result = 0;
        var shift = 0;
        var continuation, digit;
        do {
          if (aIndex >= strLen) {
            throw new Error("Expected more digits in base 64 VLQ value.");
          }
          digit = base64.decode(aStr.charCodeAt(aIndex++));
          if (digit === -1) {
            throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
          }
          continuation = !!(digit & VLQ_CONTINUATION_BIT);
          digit &= VLQ_BASE_MASK;
          result = result + (digit << shift);
          shift += VLQ_BASE_SHIFT;
        } while (continuation);
        aOutParam.value = fromVLQSigned(result);
        aOutParam.rest = aIndex;
      };
    }
  });

  // node_modules/source-map-js/lib/util.js
  var require_util = __commonJS({
    "node_modules/source-map-js/lib/util.js"(exports) {
      function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
          return aArgs[aName];
        } else if (arguments.length === 3) {
          return aDefaultValue;
        } else {
          throw new Error('"' + aName + '" is a required argument.');
        }
      }
      exports.getArg = getArg;
      var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
      var dataUrlRegexp = /^data:.+\,.+$/;
      function urlParse(aUrl) {
        var match = aUrl.match(urlRegexp);
        if (!match) {
          return null;
        }
        return {
          scheme: match[1],
          auth: match[2],
          host: match[3],
          port: match[4],
          path: match[5]
        };
      }
      exports.urlParse = urlParse;
      function urlGenerate(aParsedUrl) {
        var url = "";
        if (aParsedUrl.scheme) {
          url += aParsedUrl.scheme + ":";
        }
        url += "//";
        if (aParsedUrl.auth) {
          url += aParsedUrl.auth + "@";
        }
        if (aParsedUrl.host) {
          url += aParsedUrl.host;
        }
        if (aParsedUrl.port) {
          url += ":" + aParsedUrl.port;
        }
        if (aParsedUrl.path) {
          url += aParsedUrl.path;
        }
        return url;
      }
      exports.urlGenerate = urlGenerate;
      var MAX_CACHED_INPUTS = 32;
      function lruMemoize(f) {
        var cache = [];
        return function(input) {
          for (var i = 0; i < cache.length; i++) {
            if (cache[i].input === input) {
              var temp = cache[0];
              cache[0] = cache[i];
              cache[i] = temp;
              return cache[0].result;
            }
          }
          var result = f(input);
          cache.unshift({
            input,
            result
          });
          if (cache.length > MAX_CACHED_INPUTS) {
            cache.pop();
          }
          return result;
        };
      }
      var normalize = lruMemoize(function normalize2(aPath) {
        var path = aPath;
        var url = urlParse(aPath);
        if (url) {
          if (!url.path) {
            return aPath;
          }
          path = url.path;
        }
        var isAbsolute = exports.isAbsolute(path);
        var parts = [];
        var start = 0;
        var i = 0;
        while (true) {
          start = i;
          i = path.indexOf("/", start);
          if (i === -1) {
            parts.push(path.slice(start));
            break;
          } else {
            parts.push(path.slice(start, i));
            while (i < path.length && path[i] === "/") {
              i++;
            }
          }
        }
        for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
          part = parts[i];
          if (part === ".") {
            parts.splice(i, 1);
          } else if (part === "..") {
            up++;
          } else if (up > 0) {
            if (part === "") {
              parts.splice(i + 1, up);
              up = 0;
            } else {
              parts.splice(i, 2);
              up--;
            }
          }
        }
        path = parts.join("/");
        if (path === "") {
          path = isAbsolute ? "/" : ".";
        }
        if (url) {
          url.path = path;
          return urlGenerate(url);
        }
        return path;
      });
      exports.normalize = normalize;
      function join(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        if (aPath === "") {
          aPath = ".";
        }
        var aPathUrl = urlParse(aPath);
        var aRootUrl = urlParse(aRoot);
        if (aRootUrl) {
          aRoot = aRootUrl.path || "/";
        }
        if (aPathUrl && !aPathUrl.scheme) {
          if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
          }
          return urlGenerate(aPathUrl);
        }
        if (aPathUrl || aPath.match(dataUrlRegexp)) {
          return aPath;
        }
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
          aRootUrl.host = aPath;
          return urlGenerate(aRootUrl);
        }
        var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
        if (aRootUrl) {
          aRootUrl.path = joined;
          return urlGenerate(aRootUrl);
        }
        return joined;
      }
      exports.join = join;
      exports.isAbsolute = function(aPath) {
        return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
      };
      function relative(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        aRoot = aRoot.replace(/\/$/, "");
        var level = 0;
        while (aPath.indexOf(aRoot + "/") !== 0) {
          var index = aRoot.lastIndexOf("/");
          if (index < 0) {
            return aPath;
          }
          aRoot = aRoot.slice(0, index);
          if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath;
          }
          ++level;
        }
        return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
      }
      exports.relative = relative;
      var supportsNullProto = function() {
        var obj = /* @__PURE__ */ Object.create(null);
        return !("__proto__" in obj);
      }();
      function identity(s) {
        return s;
      }
      function toSetString(aStr) {
        if (isProtoString(aStr)) {
          return "$" + aStr;
        }
        return aStr;
      }
      exports.toSetString = supportsNullProto ? identity : toSetString;
      function fromSetString(aStr) {
        if (isProtoString(aStr)) {
          return aStr.slice(1);
        }
        return aStr;
      }
      exports.fromSetString = supportsNullProto ? identity : fromSetString;
      function isProtoString(s) {
        if (!s) {
          return false;
        }
        var length = s.length;
        if (length < 9) {
          return false;
        }
        if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
          return false;
        }
        for (var i = length - 10; i >= 0; i--) {
          if (s.charCodeAt(i) !== 36) {
            return false;
          }
        }
        return true;
      }
      function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        var cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByOriginalPositions = compareByOriginalPositions;
      function compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {
        var cmp;
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;
      function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
      function compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;
      function strcmp(aStr1, aStr2) {
        if (aStr1 === aStr2) {
          return 0;
        }
        if (aStr1 === null) {
          return 1;
        }
        if (aStr2 === null) {
          return -1;
        }
        if (aStr1 > aStr2) {
          return 1;
        }
        return -1;
      }
      function compareByGeneratedPositionsInflated(mappingA, mappingB) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
      function parseSourceMapInput(str) {
        return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
      }
      exports.parseSourceMapInput = parseSourceMapInput;
      function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
        sourceURL = sourceURL || "";
        if (sourceRoot) {
          if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
            sourceRoot += "/";
          }
          sourceURL = sourceRoot + sourceURL;
        }
        if (sourceMapURL) {
          var parsed = urlParse(sourceMapURL);
          if (!parsed) {
            throw new Error("sourceMapURL could not be parsed");
          }
          if (parsed.path) {
            var index = parsed.path.lastIndexOf("/");
            if (index >= 0) {
              parsed.path = parsed.path.substring(0, index + 1);
            }
          }
          sourceURL = join(urlGenerate(parsed), sourceURL);
        }
        return normalize(sourceURL);
      }
      exports.computeSourceURL = computeSourceURL;
    }
  });

  // node_modules/source-map-js/lib/array-set.js
  var require_array_set = __commonJS({
    "node_modules/source-map-js/lib/array-set.js"(exports) {
      var util = require_util();
      var has = Object.prototype.hasOwnProperty;
      var hasNativeMap = typeof Map !== "undefined";
      function ArraySet() {
        this._array = [];
        this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
      }
      ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
        var set = new ArraySet();
        for (var i = 0, len = aArray.length; i < len; i++) {
          set.add(aArray[i], aAllowDuplicates);
        }
        return set;
      };
      ArraySet.prototype.size = function ArraySet_size() {
        return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
      };
      ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
        var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
        var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
        var idx = this._array.length;
        if (!isDuplicate || aAllowDuplicates) {
          this._array.push(aStr);
        }
        if (!isDuplicate) {
          if (hasNativeMap) {
            this._set.set(aStr, idx);
          } else {
            this._set[sStr] = idx;
          }
        }
      };
      ArraySet.prototype.has = function ArraySet_has(aStr) {
        if (hasNativeMap) {
          return this._set.has(aStr);
        } else {
          var sStr = util.toSetString(aStr);
          return has.call(this._set, sStr);
        }
      };
      ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
        if (hasNativeMap) {
          var idx = this._set.get(aStr);
          if (idx >= 0) {
            return idx;
          }
        } else {
          var sStr = util.toSetString(aStr);
          if (has.call(this._set, sStr)) {
            return this._set[sStr];
          }
        }
        throw new Error('"' + aStr + '" is not in the set.');
      };
      ArraySet.prototype.at = function ArraySet_at(aIdx) {
        if (aIdx >= 0 && aIdx < this._array.length) {
          return this._array[aIdx];
        }
        throw new Error("No element indexed by " + aIdx);
      };
      ArraySet.prototype.toArray = function ArraySet_toArray() {
        return this._array.slice();
      };
      exports.ArraySet = ArraySet;
    }
  });

  // node_modules/source-map-js/lib/mapping-list.js
  var require_mapping_list = __commonJS({
    "node_modules/source-map-js/lib/mapping-list.js"(exports) {
      var util = require_util();
      function generatedPositionAfter(mappingA, mappingB) {
        var lineA = mappingA.generatedLine;
        var lineB = mappingB.generatedLine;
        var columnA = mappingA.generatedColumn;
        var columnB = mappingB.generatedColumn;
        return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
      }
      function MappingList() {
        this._array = [];
        this._sorted = true;
        this._last = { generatedLine: -1, generatedColumn: 0 };
      }
      MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
        this._array.forEach(aCallback, aThisArg);
      };
      MappingList.prototype.add = function MappingList_add(aMapping) {
        if (generatedPositionAfter(this._last, aMapping)) {
          this._last = aMapping;
          this._array.push(aMapping);
        } else {
          this._sorted = false;
          this._array.push(aMapping);
        }
      };
      MappingList.prototype.toArray = function MappingList_toArray() {
        if (!this._sorted) {
          this._array.sort(util.compareByGeneratedPositionsInflated);
          this._sorted = true;
        }
        return this._array;
      };
      exports.MappingList = MappingList;
    }
  });

  // node_modules/source-map-js/lib/source-map-generator.js
  var require_source_map_generator = __commonJS({
    "node_modules/source-map-js/lib/source-map-generator.js"(exports) {
      var base64VLQ = require_base64_vlq();
      var util = require_util();
      var ArraySet = require_array_set().ArraySet;
      var MappingList = require_mapping_list().MappingList;
      function SourceMapGenerator(aArgs) {
        if (!aArgs) {
          aArgs = {};
        }
        this._file = util.getArg(aArgs, "file", null);
        this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
        this._skipValidation = util.getArg(aArgs, "skipValidation", false);
        this._sources = new ArraySet();
        this._names = new ArraySet();
        this._mappings = new MappingList();
        this._sourcesContents = null;
      }
      SourceMapGenerator.prototype._version = 3;
      SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
        var sourceRoot = aSourceMapConsumer.sourceRoot;
        var generator = new SourceMapGenerator({
          file: aSourceMapConsumer.file,
          sourceRoot
        });
        aSourceMapConsumer.eachMapping(function(mapping) {
          var newMapping = {
            generated: {
              line: mapping.generatedLine,
              column: mapping.generatedColumn
            }
          };
          if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
              newMapping.source = util.relative(sourceRoot, newMapping.source);
            }
            newMapping.original = {
              line: mapping.originalLine,
              column: mapping.originalColumn
            };
            if (mapping.name != null) {
              newMapping.name = mapping.name;
            }
          }
          generator.addMapping(newMapping);
        });
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          var sourceRelative = sourceFile;
          if (sourceRoot !== null) {
            sourceRelative = util.relative(sourceRoot, sourceFile);
          }
          if (!generator._sources.has(sourceRelative)) {
            generator._sources.add(sourceRelative);
          }
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            generator.setSourceContent(sourceFile, content);
          }
        });
        return generator;
      };
      SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
        var generated = util.getArg(aArgs, "generated");
        var original = util.getArg(aArgs, "original", null);
        var source = util.getArg(aArgs, "source", null);
        var name = util.getArg(aArgs, "name", null);
        if (!this._skipValidation) {
          this._validateMapping(generated, original, source, name);
        }
        if (source != null) {
          source = String(source);
          if (!this._sources.has(source)) {
            this._sources.add(source);
          }
        }
        if (name != null) {
          name = String(name);
          if (!this._names.has(name)) {
            this._names.add(name);
          }
        }
        this._mappings.add({
          generatedLine: generated.line,
          generatedColumn: generated.column,
          originalLine: original != null && original.line,
          originalColumn: original != null && original.column,
          source,
          name
        });
      };
      SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
        var source = aSourceFile;
        if (this._sourceRoot != null) {
          source = util.relative(this._sourceRoot, source);
        }
        if (aSourceContent != null) {
          if (!this._sourcesContents) {
            this._sourcesContents = /* @__PURE__ */ Object.create(null);
          }
          this._sourcesContents[util.toSetString(source)] = aSourceContent;
        } else if (this._sourcesContents) {
          delete this._sourcesContents[util.toSetString(source)];
          if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
          }
        }
      };
      SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
        var sourceFile = aSourceFile;
        if (aSourceFile == null) {
          if (aSourceMapConsumer.file == null) {
            throw new Error(
              `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
            );
          }
          sourceFile = aSourceMapConsumer.file;
        }
        var sourceRoot = this._sourceRoot;
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        var newSources = new ArraySet();
        var newNames = new ArraySet();
        this._mappings.unsortedForEach(function(mapping) {
          if (mapping.source === sourceFile && mapping.originalLine != null) {
            var original = aSourceMapConsumer.originalPositionFor({
              line: mapping.originalLine,
              column: mapping.originalColumn
            });
            if (original.source != null) {
              mapping.source = original.source;
              if (aSourceMapPath != null) {
                mapping.source = util.join(aSourceMapPath, mapping.source);
              }
              if (sourceRoot != null) {
                mapping.source = util.relative(sourceRoot, mapping.source);
              }
              mapping.originalLine = original.line;
              mapping.originalColumn = original.column;
              if (original.name != null) {
                mapping.name = original.name;
              }
            }
          }
          var source = mapping.source;
          if (source != null && !newSources.has(source)) {
            newSources.add(source);
          }
          var name = mapping.name;
          if (name != null && !newNames.has(name)) {
            newNames.add(name);
          }
        }, this);
        this._sources = newSources;
        this._names = newNames;
        aSourceMapConsumer.sources.forEach(function(sourceFile2) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
          if (content != null) {
            if (aSourceMapPath != null) {
              sourceFile2 = util.join(aSourceMapPath, sourceFile2);
            }
            if (sourceRoot != null) {
              sourceFile2 = util.relative(sourceRoot, sourceFile2);
            }
            this.setSourceContent(sourceFile2, content);
          }
        }, this);
      };
      SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
        if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
          throw new Error(
            "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
          );
        }
        if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
          return;
        } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
          return;
        } else {
          throw new Error("Invalid mapping: " + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
          }));
        }
      };
      SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
        var previousGeneratedColumn = 0;
        var previousGeneratedLine = 1;
        var previousOriginalColumn = 0;
        var previousOriginalLine = 0;
        var previousName = 0;
        var previousSource = 0;
        var result = "";
        var next;
        var mapping;
        var nameIdx;
        var sourceIdx;
        var mappings = this._mappings.toArray();
        for (var i = 0, len = mappings.length; i < len; i++) {
          mapping = mappings[i];
          next = "";
          if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while (mapping.generatedLine !== previousGeneratedLine) {
              next += ";";
              previousGeneratedLine++;
            }
          } else {
            if (i > 0) {
              if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                continue;
              }
              next += ",";
            }
          }
          next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
          previousGeneratedColumn = mapping.generatedColumn;
          if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next += base64VLQ.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;
            next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;
            next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;
            if (mapping.name != null) {
              nameIdx = this._names.indexOf(mapping.name);
              next += base64VLQ.encode(nameIdx - previousName);
              previousName = nameIdx;
            }
          }
          result += next;
        }
        return result;
      };
      SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
        return aSources.map(function(source) {
          if (!this._sourcesContents) {
            return null;
          }
          if (aSourceRoot != null) {
            source = util.relative(aSourceRoot, source);
          }
          var key = util.toSetString(source);
          return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
        }, this);
      };
      SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
        var map = {
          version: this._version,
          sources: this._sources.toArray(),
          names: this._names.toArray(),
          mappings: this._serializeMappings()
        };
        if (this._file != null) {
          map.file = this._file;
        }
        if (this._sourceRoot != null) {
          map.sourceRoot = this._sourceRoot;
        }
        if (this._sourcesContents) {
          map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
        }
        return map;
      };
      SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
        return JSON.stringify(this.toJSON());
      };
      exports.SourceMapGenerator = SourceMapGenerator;
    }
  });

  // node_modules/source-map-js/lib/binary-search.js
  var require_binary_search = __commonJS({
    "node_modules/source-map-js/lib/binary-search.js"(exports) {
      exports.GREATEST_LOWER_BOUND = 1;
      exports.LEAST_UPPER_BOUND = 2;
      function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
        var cmp = aCompare(aNeedle, aHaystack[mid], true);
        if (cmp === 0) {
          return mid;
        } else if (cmp > 0) {
          if (aHigh - mid > 1) {
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return aHigh < aHaystack.length ? aHigh : -1;
          } else {
            return mid;
          }
        } else {
          if (mid - aLow > 1) {
            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return mid;
          } else {
            return aLow < 0 ? -1 : aLow;
          }
        }
      }
      exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
        if (aHaystack.length === 0) {
          return -1;
        }
        var index = recursiveSearch(
          -1,
          aHaystack.length,
          aNeedle,
          aHaystack,
          aCompare,
          aBias || exports.GREATEST_LOWER_BOUND
        );
        if (index < 0) {
          return -1;
        }
        while (index - 1 >= 0) {
          if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
            break;
          }
          --index;
        }
        return index;
      };
    }
  });

  // node_modules/source-map-js/lib/quick-sort.js
  var require_quick_sort = __commonJS({
    "node_modules/source-map-js/lib/quick-sort.js"(exports) {
      function SortTemplate(comparator) {
        function swap(ary, x, y) {
          var temp = ary[x];
          ary[x] = ary[y];
          ary[y] = temp;
        }
        function randomIntInRange(low, high) {
          return Math.round(low + Math.random() * (high - low));
        }
        function doQuickSort(ary, comparator2, p, r) {
          if (p < r) {
            var pivotIndex = randomIntInRange(p, r);
            var i = p - 1;
            swap(ary, pivotIndex, r);
            var pivot = ary[r];
            for (var j = p; j < r; j++) {
              if (comparator2(ary[j], pivot, false) <= 0) {
                i += 1;
                swap(ary, i, j);
              }
            }
            swap(ary, i + 1, j);
            var q = i + 1;
            doQuickSort(ary, comparator2, p, q - 1);
            doQuickSort(ary, comparator2, q + 1, r);
          }
        }
        return doQuickSort;
      }
      function cloneSort(comparator) {
        let template2 = SortTemplate.toString();
        let templateFn = new Function(`return ${template2}`)();
        return templateFn(comparator);
      }
      var sortCache = /* @__PURE__ */ new WeakMap();
      exports.quickSort = function(ary, comparator, start = 0) {
        let doQuickSort = sortCache.get(comparator);
        if (doQuickSort === void 0) {
          doQuickSort = cloneSort(comparator);
          sortCache.set(comparator, doQuickSort);
        }
        doQuickSort(ary, comparator, start, ary.length - 1);
      };
    }
  });

  // node_modules/source-map-js/lib/source-map-consumer.js
  var require_source_map_consumer = __commonJS({
    "node_modules/source-map-js/lib/source-map-consumer.js"(exports) {
      var util = require_util();
      var binarySearch = require_binary_search();
      var ArraySet = require_array_set().ArraySet;
      var base64VLQ = require_base64_vlq();
      var quickSort = require_quick_sort().quickSort;
      function SourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
      }
      SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
        return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
      };
      SourceMapConsumer.prototype._version = 3;
      SourceMapConsumer.prototype.__generatedMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
        configurable: true,
        enumerable: true,
        get: function() {
          if (!this.__generatedMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__generatedMappings;
        }
      });
      SourceMapConsumer.prototype.__originalMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
        configurable: true,
        enumerable: true,
        get: function() {
          if (!this.__originalMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__originalMappings;
        }
      });
      SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
        var c = aStr.charAt(index);
        return c === ";" || c === ",";
      };
      SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        throw new Error("Subclasses must implement _parseMappings");
      };
      SourceMapConsumer.GENERATED_ORDER = 1;
      SourceMapConsumer.ORIGINAL_ORDER = 2;
      SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
      SourceMapConsumer.LEAST_UPPER_BOUND = 2;
      SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
        var context = aContext || null;
        var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
        var mappings;
        switch (order) {
          case SourceMapConsumer.GENERATED_ORDER:
            mappings = this._generatedMappings;
            break;
          case SourceMapConsumer.ORIGINAL_ORDER:
            mappings = this._originalMappings;
            break;
          default:
            throw new Error("Unknown order of iteration.");
        }
        var sourceRoot = this.sourceRoot;
        var boundCallback = aCallback.bind(context);
        var names = this._names;
        var sources = this._sources;
        var sourceMapURL = this._sourceMapURL;
        for (var i = 0, n = mappings.length; i < n; i++) {
          var mapping = mappings[i];
          var source = mapping.source === null ? null : sources.at(mapping.source);
          source = util.computeSourceURL(sourceRoot, source, sourceMapURL);
          boundCallback({
            source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name === null ? null : names.at(mapping.name)
          });
        }
      };
      SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
        var line = util.getArg(aArgs, "line");
        var needle = {
          source: util.getArg(aArgs, "source"),
          originalLine: line,
          originalColumn: util.getArg(aArgs, "column", 0)
        };
        needle.source = this._findSourceIndex(needle.source);
        if (needle.source < 0) {
          return [];
        }
        var mappings = [];
        var index = this._findMapping(
          needle,
          this._originalMappings,
          "originalLine",
          "originalColumn",
          util.compareByOriginalPositions,
          binarySearch.LEAST_UPPER_BOUND
        );
        if (index >= 0) {
          var mapping = this._originalMappings[index];
          if (aArgs.column === void 0) {
            var originalLine = mapping.originalLine;
            while (mapping && mapping.originalLine === originalLine) {
              mappings.push({
                line: util.getArg(mapping, "generatedLine", null),
                column: util.getArg(mapping, "generatedColumn", null),
                lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
              });
              mapping = this._originalMappings[++index];
            }
          } else {
            var originalColumn = mapping.originalColumn;
            while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
              mappings.push({
                line: util.getArg(mapping, "generatedLine", null),
                column: util.getArg(mapping, "generatedColumn", null),
                lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
              });
              mapping = this._originalMappings[++index];
            }
          }
        }
        return mappings;
      };
      exports.SourceMapConsumer = SourceMapConsumer;
      function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        var version = util.getArg(sourceMap, "version");
        var sources = util.getArg(sourceMap, "sources");
        var names = util.getArg(sourceMap, "names", []);
        var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
        var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
        var mappings = util.getArg(sourceMap, "mappings");
        var file = util.getArg(sourceMap, "file", null);
        if (version != this._version) {
          throw new Error("Unsupported version: " + version);
        }
        if (sourceRoot) {
          sourceRoot = util.normalize(sourceRoot);
        }
        sources = sources.map(String).map(util.normalize).map(function(source) {
          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
        });
        this._names = ArraySet.fromArray(names.map(String), true);
        this._sources = ArraySet.fromArray(sources, true);
        this._absoluteSources = this._sources.toArray().map(function(s) {
          return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
        });
        this.sourceRoot = sourceRoot;
        this.sourcesContent = sourcesContent;
        this._mappings = mappings;
        this._sourceMapURL = aSourceMapURL;
        this.file = file;
      }
      BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
      BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
        var relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util.relative(this.sourceRoot, relativeSource);
        }
        if (this._sources.has(relativeSource)) {
          return this._sources.indexOf(relativeSource);
        }
        var i;
        for (i = 0; i < this._absoluteSources.length; ++i) {
          if (this._absoluteSources[i] == aSource) {
            return i;
          }
        }
        return -1;
      };
      BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
        var smc = Object.create(BasicSourceMapConsumer.prototype);
        var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
        var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
        smc.sourceRoot = aSourceMap._sourceRoot;
        smc.sourcesContent = aSourceMap._generateSourcesContent(
          smc._sources.toArray(),
          smc.sourceRoot
        );
        smc.file = aSourceMap._file;
        smc._sourceMapURL = aSourceMapURL;
        smc._absoluteSources = smc._sources.toArray().map(function(s) {
          return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
        });
        var generatedMappings = aSourceMap._mappings.toArray().slice();
        var destGeneratedMappings = smc.__generatedMappings = [];
        var destOriginalMappings = smc.__originalMappings = [];
        for (var i = 0, length = generatedMappings.length; i < length; i++) {
          var srcMapping = generatedMappings[i];
          var destMapping = new Mapping();
          destMapping.generatedLine = srcMapping.generatedLine;
          destMapping.generatedColumn = srcMapping.generatedColumn;
          if (srcMapping.source) {
            destMapping.source = sources.indexOf(srcMapping.source);
            destMapping.originalLine = srcMapping.originalLine;
            destMapping.originalColumn = srcMapping.originalColumn;
            if (srcMapping.name) {
              destMapping.name = names.indexOf(srcMapping.name);
            }
            destOriginalMappings.push(destMapping);
          }
          destGeneratedMappings.push(destMapping);
        }
        quickSort(smc.__originalMappings, util.compareByOriginalPositions);
        return smc;
      };
      BasicSourceMapConsumer.prototype._version = 3;
      Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
        get: function() {
          return this._absoluteSources.slice();
        }
      });
      function Mapping() {
        this.generatedLine = 0;
        this.generatedColumn = 0;
        this.source = null;
        this.originalLine = null;
        this.originalColumn = null;
        this.name = null;
      }
      var compareGenerated = util.compareByGeneratedPositionsDeflatedNoLine;
      function sortGenerated(array, start) {
        let l = array.length;
        let n = array.length - start;
        if (n <= 1) {
          return;
        } else if (n == 2) {
          let a = array[start];
          let b = array[start + 1];
          if (compareGenerated(a, b) > 0) {
            array[start] = b;
            array[start + 1] = a;
          }
        } else if (n < 20) {
          for (let i = start; i < l; i++) {
            for (let j = i; j > start; j--) {
              let a = array[j - 1];
              let b = array[j];
              if (compareGenerated(a, b) <= 0) {
                break;
              }
              array[j - 1] = b;
              array[j] = a;
            }
          }
        } else {
          quickSort(array, compareGenerated, start);
        }
      }
      BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        var generatedLine = 1;
        var previousGeneratedColumn = 0;
        var previousOriginalLine = 0;
        var previousOriginalColumn = 0;
        var previousSource = 0;
        var previousName = 0;
        var length = aStr.length;
        var index = 0;
        var cachedSegments = {};
        var temp = {};
        var originalMappings = [];
        var generatedMappings = [];
        var mapping, str, segment, end, value;
        let subarrayStart = 0;
        while (index < length) {
          if (aStr.charAt(index) === ";") {
            generatedLine++;
            index++;
            previousGeneratedColumn = 0;
            sortGenerated(generatedMappings, subarrayStart);
            subarrayStart = generatedMappings.length;
          } else if (aStr.charAt(index) === ",") {
            index++;
          } else {
            mapping = new Mapping();
            mapping.generatedLine = generatedLine;
            for (end = index; end < length; end++) {
              if (this._charIsMappingSeparator(aStr, end)) {
                break;
              }
            }
            str = aStr.slice(index, end);
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error("Found a source, but no line and column");
            }
            if (segment.length === 3) {
              throw new Error("Found a source and line, but no column");
            }
            mapping.generatedColumn = previousGeneratedColumn + segment[0];
            previousGeneratedColumn = mapping.generatedColumn;
            if (segment.length > 1) {
              mapping.source = previousSource + segment[1];
              previousSource += segment[1];
              mapping.originalLine = previousOriginalLine + segment[2];
              previousOriginalLine = mapping.originalLine;
              mapping.originalLine += 1;
              mapping.originalColumn = previousOriginalColumn + segment[3];
              previousOriginalColumn = mapping.originalColumn;
              if (segment.length > 4) {
                mapping.name = previousName + segment[4];
                previousName += segment[4];
              }
            }
            generatedMappings.push(mapping);
            if (typeof mapping.originalLine === "number") {
              let currentSource = mapping.source;
              while (originalMappings.length <= currentSource) {
                originalMappings.push(null);
              }
              if (originalMappings[currentSource] === null) {
                originalMappings[currentSource] = [];
              }
              originalMappings[currentSource].push(mapping);
            }
          }
        }
        sortGenerated(generatedMappings, subarrayStart);
        this.__generatedMappings = generatedMappings;
        for (var i = 0; i < originalMappings.length; i++) {
          if (originalMappings[i] != null) {
            quickSort(originalMappings[i], util.compareByOriginalPositionsNoSource);
          }
        }
        this.__originalMappings = [].concat(...originalMappings);
      };
      BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
        if (aNeedle[aLineName] <= 0) {
          throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
        }
        if (aNeedle[aColumnName] < 0) {
          throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
        }
        return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
      };
      BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
        for (var index = 0; index < this._generatedMappings.length; ++index) {
          var mapping = this._generatedMappings[index];
          if (index + 1 < this._generatedMappings.length) {
            var nextMapping = this._generatedMappings[index + 1];
            if (mapping.generatedLine === nextMapping.generatedLine) {
              mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
              continue;
            }
          }
          mapping.lastGeneratedColumn = Infinity;
        }
      };
      BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, "line"),
          generatedColumn: util.getArg(aArgs, "column")
        };
        var index = this._findMapping(
          needle,
          this._generatedMappings,
          "generatedLine",
          "generatedColumn",
          util.compareByGeneratedPositionsDeflated,
          util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
        );
        if (index >= 0) {
          var mapping = this._generatedMappings[index];
          if (mapping.generatedLine === needle.generatedLine) {
            var source = util.getArg(mapping, "source", null);
            if (source !== null) {
              source = this._sources.at(source);
              source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
            }
            var name = util.getArg(mapping, "name", null);
            if (name !== null) {
              name = this._names.at(name);
            }
            return {
              source,
              line: util.getArg(mapping, "originalLine", null),
              column: util.getArg(mapping, "originalColumn", null),
              name
            };
          }
        }
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      };
      BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
        if (!this.sourcesContent) {
          return false;
        }
        return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
          return sc == null;
        });
      };
      BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        if (!this.sourcesContent) {
          return null;
        }
        var index = this._findSourceIndex(aSource);
        if (index >= 0) {
          return this.sourcesContent[index];
        }
        var relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util.relative(this.sourceRoot, relativeSource);
        }
        var url;
        if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
          var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
          if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
          }
          if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
            return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
          }
        }
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + relativeSource + '" is not in the SourceMap.');
        }
      };
      BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
        var source = util.getArg(aArgs, "source");
        source = this._findSourceIndex(source);
        if (source < 0) {
          return {
            line: null,
            column: null,
            lastColumn: null
          };
        }
        var needle = {
          source,
          originalLine: util.getArg(aArgs, "line"),
          originalColumn: util.getArg(aArgs, "column")
        };
        var index = this._findMapping(
          needle,
          this._originalMappings,
          "originalLine",
          "originalColumn",
          util.compareByOriginalPositions,
          util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
        );
        if (index >= 0) {
          var mapping = this._originalMappings[index];
          if (mapping.source === needle.source) {
            return {
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            };
          }
        }
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      };
      exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
      function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        var version = util.getArg(sourceMap, "version");
        var sections = util.getArg(sourceMap, "sections");
        if (version != this._version) {
          throw new Error("Unsupported version: " + version);
        }
        this._sources = new ArraySet();
        this._names = new ArraySet();
        var lastOffset = {
          line: -1,
          column: 0
        };
        this._sections = sections.map(function(s) {
          if (s.url) {
            throw new Error("Support for url field in sections not implemented.");
          }
          var offset = util.getArg(s, "offset");
          var offsetLine = util.getArg(offset, "line");
          var offsetColumn = util.getArg(offset, "column");
          if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
            throw new Error("Section offsets must be ordered and non-overlapping.");
          }
          lastOffset = offset;
          return {
            generatedOffset: {
              // The offset fields are 0-based, but we use 1-based indices when
              // encoding/decoding from VLQ.
              generatedLine: offsetLine + 1,
              generatedColumn: offsetColumn + 1
            },
            consumer: new SourceMapConsumer(util.getArg(s, "map"), aSourceMapURL)
          };
        });
      }
      IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
      IndexedSourceMapConsumer.prototype._version = 3;
      Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
        get: function() {
          var sources = [];
          for (var i = 0; i < this._sections.length; i++) {
            for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
              sources.push(this._sections[i].consumer.sources[j]);
            }
          }
          return sources;
        }
      });
      IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, "line"),
          generatedColumn: util.getArg(aArgs, "column")
        };
        var sectionIndex = binarySearch.search(
          needle,
          this._sections,
          function(needle2, section2) {
            var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
            if (cmp) {
              return cmp;
            }
            return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
          }
        );
        var section = this._sections[sectionIndex];
        if (!section) {
          return {
            source: null,
            line: null,
            column: null,
            name: null
          };
        }
        return section.consumer.originalPositionFor({
          line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
          column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
          bias: aArgs.bias
        });
      };
      IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
        return this._sections.every(function(s) {
          return s.consumer.hasContentsOfAllSources();
        });
      };
      IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        for (var i = 0; i < this._sections.length; i++) {
          var section = this._sections[i];
          var content = section.consumer.sourceContentFor(aSource, true);
          if (content) {
            return content;
          }
        }
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + aSource + '" is not in the SourceMap.');
        }
      };
      IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
        for (var i = 0; i < this._sections.length; i++) {
          var section = this._sections[i];
          if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
            continue;
          }
          var generatedPosition = section.consumer.generatedPositionFor(aArgs);
          if (generatedPosition) {
            var ret = {
              line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
              column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
            };
            return ret;
          }
        }
        return {
          line: null,
          column: null
        };
      };
      IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        for (var i = 0; i < this._sections.length; i++) {
          var section = this._sections[i];
          var sectionMappings = section.consumer._generatedMappings;
          for (var j = 0; j < sectionMappings.length; j++) {
            var mapping = sectionMappings[j];
            var source = section.consumer._sources.at(mapping.source);
            source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
            this._sources.add(source);
            source = this._sources.indexOf(source);
            var name = null;
            if (mapping.name) {
              name = section.consumer._names.at(mapping.name);
              this._names.add(name);
              name = this._names.indexOf(name);
            }
            var adjustedMapping = {
              source,
              generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
              generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
              originalLine: mapping.originalLine,
              originalColumn: mapping.originalColumn,
              name
            };
            this.__generatedMappings.push(adjustedMapping);
            if (typeof adjustedMapping.originalLine === "number") {
              this.__originalMappings.push(adjustedMapping);
            }
          }
        }
        quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
        quickSort(this.__originalMappings, util.compareByOriginalPositions);
      };
      exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
    }
  });

  // node_modules/source-map-js/lib/source-node.js
  var require_source_node = __commonJS({
    "node_modules/source-map-js/lib/source-node.js"(exports) {
      var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
      var util = require_util();
      var REGEX_NEWLINE = /(\r?\n)/;
      var NEWLINE_CODE = 10;
      var isSourceNode = "$$$isSourceNode$$$";
      function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
        this.children = [];
        this.sourceContents = {};
        this.line = aLine == null ? null : aLine;
        this.column = aColumn == null ? null : aColumn;
        this.source = aSource == null ? null : aSource;
        this.name = aName == null ? null : aName;
        this[isSourceNode] = true;
        if (aChunks != null)
          this.add(aChunks);
      }
      SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
        var node = new SourceNode();
        var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
        var remainingLinesIndex = 0;
        var shiftNextLine = function() {
          var lineContents = getNextLine();
          var newLine = getNextLine() || "";
          return lineContents + newLine;
          function getNextLine() {
            return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
          }
        };
        var lastGeneratedLine = 1, lastGeneratedColumn = 0;
        var lastMapping = null;
        aSourceMapConsumer.eachMapping(function(mapping) {
          if (lastMapping !== null) {
            if (lastGeneratedLine < mapping.generatedLine) {
              addMappingWithCode(lastMapping, shiftNextLine());
              lastGeneratedLine++;
              lastGeneratedColumn = 0;
            } else {
              var nextLine = remainingLines[remainingLinesIndex] || "";
              var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
              remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
              lastGeneratedColumn = mapping.generatedColumn;
              addMappingWithCode(lastMapping, code);
              lastMapping = mapping;
              return;
            }
          }
          while (lastGeneratedLine < mapping.generatedLine) {
            node.add(shiftNextLine());
            lastGeneratedLine++;
          }
          if (lastGeneratedColumn < mapping.generatedColumn) {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            node.add(nextLine.substr(0, mapping.generatedColumn));
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
          }
          lastMapping = mapping;
        }, this);
        if (remainingLinesIndex < remainingLines.length) {
          if (lastMapping) {
            addMappingWithCode(lastMapping, shiftNextLine());
          }
          node.add(remainingLines.splice(remainingLinesIndex).join(""));
        }
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            if (aRelativePath != null) {
              sourceFile = util.join(aRelativePath, sourceFile);
            }
            node.setSourceContent(sourceFile, content);
          }
        });
        return node;
        function addMappingWithCode(mapping, code) {
          if (mapping === null || mapping.source === void 0) {
            node.add(code);
          } else {
            var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
            node.add(new SourceNode(
              mapping.originalLine,
              mapping.originalColumn,
              source,
              code,
              mapping.name
            ));
          }
        }
      };
      SourceNode.prototype.add = function SourceNode_add(aChunk) {
        if (Array.isArray(aChunk)) {
          aChunk.forEach(function(chunk) {
            this.add(chunk);
          }, this);
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          if (aChunk) {
            this.children.push(aChunk);
          }
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      };
      SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
        if (Array.isArray(aChunk)) {
          for (var i = aChunk.length - 1; i >= 0; i--) {
            this.prepend(aChunk[i]);
          }
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          this.children.unshift(aChunk);
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      };
      SourceNode.prototype.walk = function SourceNode_walk(aFn) {
        var chunk;
        for (var i = 0, len = this.children.length; i < len; i++) {
          chunk = this.children[i];
          if (chunk[isSourceNode]) {
            chunk.walk(aFn);
          } else {
            if (chunk !== "") {
              aFn(chunk, {
                source: this.source,
                line: this.line,
                column: this.column,
                name: this.name
              });
            }
          }
        }
      };
      SourceNode.prototype.join = function SourceNode_join(aSep) {
        var newChildren;
        var i;
        var len = this.children.length;
        if (len > 0) {
          newChildren = [];
          for (i = 0; i < len - 1; i++) {
            newChildren.push(this.children[i]);
            newChildren.push(aSep);
          }
          newChildren.push(this.children[i]);
          this.children = newChildren;
        }
        return this;
      };
      SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
        var lastChild = this.children[this.children.length - 1];
        if (lastChild[isSourceNode]) {
          lastChild.replaceRight(aPattern, aReplacement);
        } else if (typeof lastChild === "string") {
          this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
        } else {
          this.children.push("".replace(aPattern, aReplacement));
        }
        return this;
      };
      SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
        this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
      };
      SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
        for (var i = 0, len = this.children.length; i < len; i++) {
          if (this.children[i][isSourceNode]) {
            this.children[i].walkSourceContents(aFn);
          }
        }
        var sources = Object.keys(this.sourceContents);
        for (var i = 0, len = sources.length; i < len; i++) {
          aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
        }
      };
      SourceNode.prototype.toString = function SourceNode_toString() {
        var str = "";
        this.walk(function(chunk) {
          str += chunk;
        });
        return str;
      };
      SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
        var generated = {
          code: "",
          line: 1,
          column: 0
        };
        var map = new SourceMapGenerator(aArgs);
        var sourceMappingActive = false;
        var lastOriginalSource = null;
        var lastOriginalLine = null;
        var lastOriginalColumn = null;
        var lastOriginalName = null;
        this.walk(function(chunk, original) {
          generated.code += chunk;
          if (original.source !== null && original.line !== null && original.column !== null) {
            if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
            lastOriginalSource = original.source;
            lastOriginalLine = original.line;
            lastOriginalColumn = original.column;
            lastOriginalName = original.name;
            sourceMappingActive = true;
          } else if (sourceMappingActive) {
            map.addMapping({
              generated: {
                line: generated.line,
                column: generated.column
              }
            });
            lastOriginalSource = null;
            sourceMappingActive = false;
          }
          for (var idx = 0, length = chunk.length; idx < length; idx++) {
            if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
              generated.line++;
              generated.column = 0;
              if (idx + 1 === length) {
                lastOriginalSource = null;
                sourceMappingActive = false;
              } else if (sourceMappingActive) {
                map.addMapping({
                  source: original.source,
                  original: {
                    line: original.line,
                    column: original.column
                  },
                  generated: {
                    line: generated.line,
                    column: generated.column
                  },
                  name: original.name
                });
              }
            } else {
              generated.column++;
            }
          }
        });
        this.walkSourceContents(function(sourceFile, sourceContent) {
          map.setSourceContent(sourceFile, sourceContent);
        });
        return { code: generated.code, map };
      };
      exports.SourceNode = SourceNode;
    }
  });

  // node_modules/source-map-js/source-map.js
  var require_source_map = __commonJS({
    "node_modules/source-map-js/source-map.js"(exports) {
      exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
      exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
      exports.SourceNode = require_source_node().SourceNode;
    }
  });

  // node_modules/estree-walker/dist/umd/estree-walker.js
  var require_estree_walker = __commonJS({
    "node_modules/estree-walker/dist/umd/estree-walker.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.estreeWalker = {}));
      })(exports, function(exports2) {
        "use strict";
        class WalkerBase {
          constructor() {
            this.should_skip = false;
            this.should_remove = false;
            this.replacement = null;
            this.context = {
              skip: () => this.should_skip = true,
              remove: () => this.should_remove = true,
              replace: (node) => this.replacement = node
            };
          }
          /**
           *
           * @param {any} parent
           * @param {string} prop
           * @param {number} index
           * @param {BaseNode} node
           */
          replace(parent, prop, index, node) {
            if (parent) {
              if (index !== null) {
                parent[prop][index] = node;
              } else {
                parent[prop] = node;
              }
            }
          }
          /**
           *
           * @param {any} parent
           * @param {string} prop
           * @param {number} index
           */
          remove(parent, prop, index) {
            if (parent) {
              if (index !== null) {
                parent[prop].splice(index, 1);
              } else {
                delete parent[prop];
              }
            }
          }
        }
        class SyncWalker extends WalkerBase {
          /**
           *
           * @param {SyncHandler} enter
           * @param {SyncHandler} leave
           */
          constructor(enter, leave) {
            super();
            this.enter = enter;
            this.leave = leave;
          }
          /**
           *
           * @param {BaseNode} node
           * @param {BaseNode} parent
           * @param {string} [prop]
           * @param {number} [index]
           * @returns {BaseNode}
           */
          visit(node, parent, prop, index) {
            if (node) {
              if (this.enter) {
                const _should_skip = this.should_skip;
                const _should_remove = this.should_remove;
                const _replacement = this.replacement;
                this.should_skip = false;
                this.should_remove = false;
                this.replacement = null;
                this.enter.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                  node = this.replacement;
                  this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                  this.remove(parent, prop, index);
                }
                const skipped = this.should_skip;
                const removed = this.should_remove;
                this.should_skip = _should_skip;
                this.should_remove = _should_remove;
                this.replacement = _replacement;
                if (skipped)
                  return node;
                if (removed)
                  return null;
              }
              for (const key in node) {
                const value = node[key];
                if (typeof value !== "object") {
                  continue;
                } else if (Array.isArray(value)) {
                  for (let i = 0; i < value.length; i += 1) {
                    if (value[i] !== null && typeof value[i].type === "string") {
                      if (!this.visit(value[i], node, key, i)) {
                        i--;
                      }
                    }
                  }
                } else if (value !== null && typeof value.type === "string") {
                  this.visit(value, node, key, null);
                }
              }
              if (this.leave) {
                const _replacement = this.replacement;
                const _should_remove = this.should_remove;
                this.replacement = null;
                this.should_remove = false;
                this.leave.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                  node = this.replacement;
                  this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                  this.remove(parent, prop, index);
                }
                const removed = this.should_remove;
                this.replacement = _replacement;
                this.should_remove = _should_remove;
                if (removed)
                  return null;
              }
            }
            return node;
          }
        }
        class AsyncWalker extends WalkerBase {
          /**
           *
           * @param {AsyncHandler} enter
           * @param {AsyncHandler} leave
           */
          constructor(enter, leave) {
            super();
            this.enter = enter;
            this.leave = leave;
          }
          /**
           *
           * @param {BaseNode} node
           * @param {BaseNode} parent
           * @param {string} [prop]
           * @param {number} [index]
           * @returns {Promise<BaseNode>}
           */
          async visit(node, parent, prop, index) {
            if (node) {
              if (this.enter) {
                const _should_skip = this.should_skip;
                const _should_remove = this.should_remove;
                const _replacement = this.replacement;
                this.should_skip = false;
                this.should_remove = false;
                this.replacement = null;
                await this.enter.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                  node = this.replacement;
                  this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                  this.remove(parent, prop, index);
                }
                const skipped = this.should_skip;
                const removed = this.should_remove;
                this.should_skip = _should_skip;
                this.should_remove = _should_remove;
                this.replacement = _replacement;
                if (skipped)
                  return node;
                if (removed)
                  return null;
              }
              for (const key in node) {
                const value = node[key];
                if (typeof value !== "object") {
                  continue;
                } else if (Array.isArray(value)) {
                  for (let i = 0; i < value.length; i += 1) {
                    if (value[i] !== null && typeof value[i].type === "string") {
                      if (!await this.visit(value[i], node, key, i)) {
                        i--;
                      }
                    }
                  }
                } else if (value !== null && typeof value.type === "string") {
                  await this.visit(value, node, key, null);
                }
              }
              if (this.leave) {
                const _replacement = this.replacement;
                const _should_remove = this.should_remove;
                this.replacement = null;
                this.should_remove = false;
                await this.leave.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                  node = this.replacement;
                  this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                  this.remove(parent, prop, index);
                }
                const removed = this.should_remove;
                this.replacement = _replacement;
                this.should_remove = _should_remove;
                if (removed)
                  return null;
              }
            }
            return node;
          }
        }
        function walk(ast, { enter, leave }) {
          const instance = new SyncWalker(enter, leave);
          return instance.visit(ast, null);
        }
        async function asyncWalk(ast, { enter, leave }) {
          const instance = new AsyncWalker(enter, leave);
          return await instance.visit(ast, null);
        }
        exports2.asyncWalk = asyncWalk;
        exports2.walk = walk;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/@vue/compiler-core/dist/compiler-core.cjs.js
  var require_compiler_core_cjs = __commonJS({
    "node_modules/@vue/compiler-core/dist/compiler-core.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var shared = require_shared();
      var parser = require_lib();
      var sourceMapJs = require_source_map();
      var estreeWalker = require_estree_walker();
      function defaultOnError(error) {
        throw error;
      }
      function defaultOnWarn(msg) {
        console.warn(`[Vue warn] ${msg.message}`);
      }
      function createCompilerError(code, loc, messages, additionalMessage) {
        const msg = (messages || errorMessages)[code] + (additionalMessage || ``);
        const error = new SyntaxError(String(msg));
        error.code = code;
        error.loc = loc;
        return error;
      }
      var errorMessages = {
        // parse errors
        [0]: "Illegal comment.",
        [1]: "CDATA section is allowed only in XML context.",
        [2]: "Duplicate attribute.",
        [3]: "End tag cannot have attributes.",
        [4]: "Illegal '/' in tags.",
        [5]: "Unexpected EOF in tag.",
        [6]: "Unexpected EOF in CDATA section.",
        [7]: "Unexpected EOF in comment.",
        [8]: "Unexpected EOF in script.",
        [9]: "Unexpected EOF in tag.",
        [10]: "Incorrectly closed comment.",
        [11]: "Incorrectly opened comment.",
        [12]: "Illegal tag name. Use '&lt;' to print '<'.",
        [13]: "Attribute value was expected.",
        [14]: "End tag name was expected.",
        [15]: "Whitespace was expected.",
        [16]: "Unexpected '<!--' in comment.",
        [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
        [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
        [19]: "Attribute name cannot start with '='.",
        [21]: "'<?' is allowed only in XML context.",
        [20]: `Unexpected null character.`,
        [22]: "Illegal '/' in tags.",
        // Vue-specific parse errors
        [23]: "Invalid end tag.",
        [24]: "Element is missing end tag.",
        [25]: "Interpolation end sign was not found.",
        [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
        [26]: "Legal directive name was expected.",
        // transform errors
        [28]: `v-if/v-else-if is missing expression.`,
        [29]: `v-if/else branches must use unique keys.`,
        [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
        [31]: `v-for is missing expression.`,
        [32]: `v-for has invalid expression.`,
        [33]: `<template v-for> key should be placed on the <template> tag.`,
        [34]: `v-bind is missing expression.`,
        [35]: `v-on is missing expression.`,
        [36]: `Unexpected custom directive on <slot> outlet.`,
        [37]: `Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
        [38]: `Duplicate slot names found. `,
        [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
        [40]: `v-slot can only be used on components or <template> tags.`,
        [41]: `v-model is missing expression.`,
        [42]: `v-model value must be a valid JavaScript member expression.`,
        [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
        [44]: `v-model cannot be used on a prop, because local prop bindings are not writable.
Use a v-bind binding combined with a v-on listener that emits update:x event instead.`,
        [45]: `Error parsing JavaScript expression: `,
        [46]: `<KeepAlive> expects exactly one child component.`,
        // generic errors
        [47]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
        [48]: `ES module mode is not supported in this build of compiler.`,
        [49]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
        [50]: `"scopeId" option is only supported in module mode.`,
        // deprecations
        [51]: `@vnode-* hooks in templates are deprecated. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support will be removed in 3.4.`,
        [52]: `v-is="component-name" has been deprecated. Use is="vue:component-name" instead. v-is support will be removed in 3.4.`,
        // just to fulfill types
        [53]: ``
      };
      var FRAGMENT = Symbol(`Fragment`);
      var TELEPORT = Symbol(`Teleport`);
      var SUSPENSE = Symbol(`Suspense`);
      var KEEP_ALIVE = Symbol(`KeepAlive`);
      var BASE_TRANSITION = Symbol(`BaseTransition`);
      var OPEN_BLOCK = Symbol(`openBlock`);
      var CREATE_BLOCK = Symbol(`createBlock`);
      var CREATE_ELEMENT_BLOCK = Symbol(`createElementBlock`);
      var CREATE_VNODE = Symbol(`createVNode`);
      var CREATE_ELEMENT_VNODE = Symbol(`createElementVNode`);
      var CREATE_COMMENT = Symbol(`createCommentVNode`);
      var CREATE_TEXT = Symbol(`createTextVNode`);
      var CREATE_STATIC = Symbol(`createStaticVNode`);
      var RESOLVE_COMPONENT = Symbol(`resolveComponent`);
      var RESOLVE_DYNAMIC_COMPONENT = Symbol(
        `resolveDynamicComponent`
      );
      var RESOLVE_DIRECTIVE = Symbol(`resolveDirective`);
      var RESOLVE_FILTER = Symbol(`resolveFilter`);
      var WITH_DIRECTIVES = Symbol(`withDirectives`);
      var RENDER_LIST = Symbol(`renderList`);
      var RENDER_SLOT = Symbol(`renderSlot`);
      var CREATE_SLOTS = Symbol(`createSlots`);
      var TO_DISPLAY_STRING = Symbol(`toDisplayString`);
      var MERGE_PROPS = Symbol(`mergeProps`);
      var NORMALIZE_CLASS = Symbol(`normalizeClass`);
      var NORMALIZE_STYLE = Symbol(`normalizeStyle`);
      var NORMALIZE_PROPS = Symbol(`normalizeProps`);
      var GUARD_REACTIVE_PROPS = Symbol(`guardReactiveProps`);
      var TO_HANDLERS = Symbol(`toHandlers`);
      var CAMELIZE = Symbol(`camelize`);
      var CAPITALIZE = Symbol(`capitalize`);
      var TO_HANDLER_KEY = Symbol(`toHandlerKey`);
      var SET_BLOCK_TRACKING = Symbol(`setBlockTracking`);
      var PUSH_SCOPE_ID = Symbol(`pushScopeId`);
      var POP_SCOPE_ID = Symbol(`popScopeId`);
      var WITH_CTX = Symbol(`withCtx`);
      var UNREF = Symbol(`unref`);
      var IS_REF = Symbol(`isRef`);
      var WITH_MEMO = Symbol(`withMemo`);
      var IS_MEMO_SAME = Symbol(`isMemoSame`);
      var helperNameMap = {
        [FRAGMENT]: `Fragment`,
        [TELEPORT]: `Teleport`,
        [SUSPENSE]: `Suspense`,
        [KEEP_ALIVE]: `KeepAlive`,
        [BASE_TRANSITION]: `BaseTransition`,
        [OPEN_BLOCK]: `openBlock`,
        [CREATE_BLOCK]: `createBlock`,
        [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
        [CREATE_VNODE]: `createVNode`,
        [CREATE_ELEMENT_VNODE]: `createElementVNode`,
        [CREATE_COMMENT]: `createCommentVNode`,
        [CREATE_TEXT]: `createTextVNode`,
        [CREATE_STATIC]: `createStaticVNode`,
        [RESOLVE_COMPONENT]: `resolveComponent`,
        [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
        [RESOLVE_DIRECTIVE]: `resolveDirective`,
        [RESOLVE_FILTER]: `resolveFilter`,
        [WITH_DIRECTIVES]: `withDirectives`,
        [RENDER_LIST]: `renderList`,
        [RENDER_SLOT]: `renderSlot`,
        [CREATE_SLOTS]: `createSlots`,
        [TO_DISPLAY_STRING]: `toDisplayString`,
        [MERGE_PROPS]: `mergeProps`,
        [NORMALIZE_CLASS]: `normalizeClass`,
        [NORMALIZE_STYLE]: `normalizeStyle`,
        [NORMALIZE_PROPS]: `normalizeProps`,
        [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
        [TO_HANDLERS]: `toHandlers`,
        [CAMELIZE]: `camelize`,
        [CAPITALIZE]: `capitalize`,
        [TO_HANDLER_KEY]: `toHandlerKey`,
        [SET_BLOCK_TRACKING]: `setBlockTracking`,
        [PUSH_SCOPE_ID]: `pushScopeId`,
        [POP_SCOPE_ID]: `popScopeId`,
        [WITH_CTX]: `withCtx`,
        [UNREF]: `unref`,
        [IS_REF]: `isRef`,
        [WITH_MEMO]: `withMemo`,
        [IS_MEMO_SAME]: `isMemoSame`
      };
      function registerRuntimeHelpers(helpers) {
        Object.getOwnPropertySymbols(helpers).forEach((s) => {
          helperNameMap[s] = helpers[s];
        });
      }
      var locStub = {
        source: "",
        start: { line: 1, column: 1, offset: 0 },
        end: { line: 1, column: 1, offset: 0 }
      };
      function createRoot(children, loc = locStub) {
        return {
          type: 0,
          children,
          helpers: /* @__PURE__ */ new Set(),
          components: [],
          directives: [],
          hoists: [],
          imports: [],
          cached: 0,
          temps: 0,
          codegenNode: void 0,
          loc
        };
      }
      function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent2 = false, loc = locStub) {
        if (context) {
          if (isBlock) {
            context.helper(OPEN_BLOCK);
            context.helper(getVNodeBlockHelper(context.inSSR, isComponent2));
          } else {
            context.helper(getVNodeHelper(context.inSSR, isComponent2));
          }
          if (directives) {
            context.helper(WITH_DIRECTIVES);
          }
        }
        return {
          type: 13,
          tag,
          props,
          children,
          patchFlag,
          dynamicProps,
          directives,
          isBlock,
          disableTracking,
          isComponent: isComponent2,
          loc
        };
      }
      function createArrayExpression(elements, loc = locStub) {
        return {
          type: 17,
          loc,
          elements
        };
      }
      function createObjectExpression(properties, loc = locStub) {
        return {
          type: 15,
          loc,
          properties
        };
      }
      function createObjectProperty(key, value) {
        return {
          type: 16,
          loc: locStub,
          key: shared.isString(key) ? createSimpleExpression(key, true) : key,
          value
        };
      }
      function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
        return {
          type: 4,
          loc,
          content,
          isStatic,
          constType: isStatic ? 3 : constType
        };
      }
      function createInterpolation(content, loc) {
        return {
          type: 5,
          loc,
          content: shared.isString(content) ? createSimpleExpression(content, false, loc) : content
        };
      }
      function createCompoundExpression(children, loc = locStub) {
        return {
          type: 8,
          loc,
          children
        };
      }
      function createCallExpression(callee, args = [], loc = locStub) {
        return {
          type: 14,
          loc,
          callee,
          arguments: args
        };
      }
      function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
        return {
          type: 18,
          params,
          returns,
          newline,
          isSlot,
          loc
        };
      }
      function createConditionalExpression(test, consequent, alternate, newline = true) {
        return {
          type: 19,
          test,
          consequent,
          alternate,
          newline,
          loc: locStub
        };
      }
      function createCacheExpression(index, value, isVNode = false) {
        return {
          type: 20,
          index,
          value,
          isVNode,
          loc: locStub
        };
      }
      function createBlockStatement(body) {
        return {
          type: 21,
          body,
          loc: locStub
        };
      }
      function createTemplateLiteral(elements) {
        return {
          type: 22,
          elements,
          loc: locStub
        };
      }
      function createIfStatement(test, consequent, alternate) {
        return {
          type: 23,
          test,
          consequent,
          alternate,
          loc: locStub
        };
      }
      function createAssignmentExpression(left, right) {
        return {
          type: 24,
          left,
          right,
          loc: locStub
        };
      }
      function createSequenceExpression(expressions) {
        return {
          type: 25,
          expressions,
          loc: locStub
        };
      }
      function createReturnStatement(returns) {
        return {
          type: 26,
          returns,
          loc: locStub
        };
      }
      function getVNodeHelper(ssr, isComponent2) {
        return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
      }
      function getVNodeBlockHelper(ssr, isComponent2) {
        return ssr || isComponent2 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
      }
      function convertToBlock(node, { helper, removeHelper, inSSR }) {
        if (!node.isBlock) {
          node.isBlock = true;
          removeHelper(getVNodeHelper(inSSR, node.isComponent));
          helper(OPEN_BLOCK);
          helper(getVNodeBlockHelper(inSSR, node.isComponent));
        }
      }
      var isStaticExp = (p) => p.type === 4 && p.isStatic;
      var isBuiltInType = (tag, expected) => tag === expected || tag === shared.hyphenate(expected);
      function isCoreComponent(tag) {
        if (isBuiltInType(tag, "Teleport")) {
          return TELEPORT;
        } else if (isBuiltInType(tag, "Suspense")) {
          return SUSPENSE;
        } else if (isBuiltInType(tag, "KeepAlive")) {
          return KEEP_ALIVE;
        } else if (isBuiltInType(tag, "BaseTransition")) {
          return BASE_TRANSITION;
        }
      }
      var nonIdentifierRE = /^\d|[^\$\w]/;
      var isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
      var validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
      var validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
      var whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
      var isMemberExpressionBrowser = (path) => {
        path = path.trim().replace(whitespaceRE, (s) => s.trim());
        let state = 0;
        let stateStack = [];
        let currentOpenBracketCount = 0;
        let currentOpenParensCount = 0;
        let currentStringType = null;
        for (let i = 0; i < path.length; i++) {
          const char = path.charAt(i);
          switch (state) {
            case 0:
              if (char === "[") {
                stateStack.push(state);
                state = 1;
                currentOpenBracketCount++;
              } else if (char === "(") {
                stateStack.push(state);
                state = 2;
                currentOpenParensCount++;
              } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
                return false;
              }
              break;
            case 1:
              if (char === `'` || char === `"` || char === "`") {
                stateStack.push(state);
                state = 3;
                currentStringType = char;
              } else if (char === `[`) {
                currentOpenBracketCount++;
              } else if (char === `]`) {
                if (!--currentOpenBracketCount) {
                  state = stateStack.pop();
                }
              }
              break;
            case 2:
              if (char === `'` || char === `"` || char === "`") {
                stateStack.push(state);
                state = 3;
                currentStringType = char;
              } else if (char === `(`) {
                currentOpenParensCount++;
              } else if (char === `)`) {
                if (i === path.length - 1) {
                  return false;
                }
                if (!--currentOpenParensCount) {
                  state = stateStack.pop();
                }
              }
              break;
            case 3:
              if (char === currentStringType) {
                state = stateStack.pop();
                currentStringType = null;
              }
              break;
          }
        }
        return !currentOpenBracketCount && !currentOpenParensCount;
      };
      var isMemberExpressionNode = (path, context) => {
        try {
          let ret = parser.parseExpression(path, {
            plugins: context.expressionPlugins
          });
          if (ret.type === "TSAsExpression" || ret.type === "TSTypeAssertion") {
            ret = ret.expression;
          }
          return ret.type === "MemberExpression" || ret.type === "OptionalMemberExpression" || ret.type === "Identifier";
        } catch (e) {
          return false;
        }
      };
      var isMemberExpression = isMemberExpressionNode;
      function getInnerRange(loc, offset, length) {
        const source = loc.source.slice(offset, offset + length);
        const newLoc = {
          source,
          start: advancePositionWithClone(loc.start, loc.source, offset),
          end: loc.end
        };
        if (length != null) {
          newLoc.end = advancePositionWithClone(
            loc.start,
            loc.source,
            offset + length
          );
        }
        return newLoc;
      }
      function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
        return advancePositionWithMutation(
          shared.extend({}, pos),
          source,
          numberOfCharacters
        );
      }
      function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
        let linesCount = 0;
        let lastNewLinePos = -1;
        for (let i = 0; i < numberOfCharacters; i++) {
          if (source.charCodeAt(i) === 10) {
            linesCount++;
            lastNewLinePos = i;
          }
        }
        pos.offset += numberOfCharacters;
        pos.line += linesCount;
        pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
        return pos;
      }
      function assert(condition, msg) {
        if (!condition) {
          throw new Error(msg || `unexpected compiler condition`);
        }
      }
      function findDir(node, name, allowEmpty = false) {
        for (let i = 0; i < node.props.length; i++) {
          const p = node.props[i];
          if (p.type === 7 && (allowEmpty || p.exp) && (shared.isString(name) ? p.name === name : name.test(p.name))) {
            return p;
          }
        }
      }
      function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
        for (let i = 0; i < node.props.length; i++) {
          const p = node.props[i];
          if (p.type === 6) {
            if (dynamicOnly)
              continue;
            if (p.name === name && (p.value || allowEmpty)) {
              return p;
            }
          } else if (p.name === "bind" && (p.exp || allowEmpty) && isStaticArgOf(p.arg, name)) {
            return p;
          }
        }
      }
      function isStaticArgOf(arg, name) {
        return !!(arg && isStaticExp(arg) && arg.content === name);
      }
      function hasDynamicKeyVBind(node) {
        return node.props.some(
          (p) => p.type === 7 && p.name === "bind" && (!p.arg || // v-bind="obj"
          p.arg.type !== 4 || // v-bind:[_ctx.foo]
          !p.arg.isStatic)
          // v-bind:[foo]
        );
      }
      function isText$1(node) {
        return node.type === 5 || node.type === 2;
      }
      function isVSlot(p) {
        return p.type === 7 && p.name === "slot";
      }
      function isTemplateNode(node) {
        return node.type === 1 && node.tagType === 3;
      }
      function isSlotOutlet(node) {
        return node.type === 1 && node.tagType === 2;
      }
      var propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
      function getUnnormalizedProps(props, callPath = []) {
        if (props && !shared.isString(props) && props.type === 14) {
          const callee = props.callee;
          if (!shared.isString(callee) && propsHelperSet.has(callee)) {
            return getUnnormalizedProps(
              props.arguments[0],
              callPath.concat(props)
            );
          }
        }
        return [props, callPath];
      }
      function injectProp(node, prop, context) {
        let propsWithInjection;
        let props = node.type === 13 ? node.props : node.arguments[2];
        let callPath = [];
        let parentCall;
        if (props && !shared.isString(props) && props.type === 14) {
          const ret = getUnnormalizedProps(props);
          props = ret[0];
          callPath = ret[1];
          parentCall = callPath[callPath.length - 1];
        }
        if (props == null || shared.isString(props)) {
          propsWithInjection = createObjectExpression([prop]);
        } else if (props.type === 14) {
          const first = props.arguments[0];
          if (!shared.isString(first) && first.type === 15) {
            if (!hasProp(prop, first)) {
              first.properties.unshift(prop);
            }
          } else {
            if (props.callee === TO_HANDLERS) {
              propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
                createObjectExpression([prop]),
                props
              ]);
            } else {
              props.arguments.unshift(createObjectExpression([prop]));
            }
          }
          !propsWithInjection && (propsWithInjection = props);
        } else if (props.type === 15) {
          if (!hasProp(prop, props)) {
            props.properties.unshift(prop);
          }
          propsWithInjection = props;
        } else {
          propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
            createObjectExpression([prop]),
            props
          ]);
          if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
            parentCall = callPath[callPath.length - 2];
          }
        }
        if (node.type === 13) {
          if (parentCall) {
            parentCall.arguments[0] = propsWithInjection;
          } else {
            node.props = propsWithInjection;
          }
        } else {
          if (parentCall) {
            parentCall.arguments[0] = propsWithInjection;
          } else {
            node.arguments[2] = propsWithInjection;
          }
        }
      }
      function hasProp(prop, props) {
        let result = false;
        if (prop.key.type === 4) {
          const propKeyName = prop.key.content;
          result = props.properties.some(
            (p) => p.key.type === 4 && p.key.content === propKeyName
          );
        }
        return result;
      }
      function toValidAssetId(name, type) {
        return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
          return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
        })}`;
      }
      function hasScopeRef(node, ids) {
        if (!node || Object.keys(ids).length === 0) {
          return false;
        }
        switch (node.type) {
          case 1:
            for (let i = 0; i < node.props.length; i++) {
              const p = node.props[i];
              if (p.type === 7 && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {
                return true;
              }
            }
            return node.children.some((c) => hasScopeRef(c, ids));
          case 11:
            if (hasScopeRef(node.source, ids)) {
              return true;
            }
            return node.children.some((c) => hasScopeRef(c, ids));
          case 9:
            return node.branches.some((b) => hasScopeRef(b, ids));
          case 10:
            if (hasScopeRef(node.condition, ids)) {
              return true;
            }
            return node.children.some((c) => hasScopeRef(c, ids));
          case 4:
            return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];
          case 8:
            return node.children.some((c) => shared.isObject(c) && hasScopeRef(c, ids));
          case 5:
          case 12:
            return hasScopeRef(node.content, ids);
          case 2:
          case 3:
            return false;
          default:
            return false;
        }
      }
      function getMemoedVNodeCall(node) {
        if (node.type === 14 && node.callee === WITH_MEMO) {
          return node.arguments[1].returns;
        } else {
          return node;
        }
      }
      var deprecationData = {
        ["COMPILER_IS_ON_ELEMENT"]: {
          message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
          link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
        },
        ["COMPILER_V_BIND_SYNC"]: {
          message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
          link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
        },
        ["COMPILER_V_BIND_PROP"]: {
          message: `.prop modifier for v-bind has been removed and no longer necessary. Vue 3 will automatically set a binding as DOM property when appropriate.`
        },
        ["COMPILER_V_BIND_OBJECT_ORDER"]: {
          message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
          link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
        },
        ["COMPILER_V_ON_NATIVE"]: {
          message: `.native modifier for v-on has been removed as is no longer necessary.`,
          link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
        },
        ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
          message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
          link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
        },
        ["COMPILER_NATIVE_TEMPLATE"]: {
          message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
        },
        ["COMPILER_INLINE_TEMPLATE"]: {
          message: `"inline-template" has been removed in Vue 3.`,
          link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
        },
        ["COMPILER_FILTER"]: {
          message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
          link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
        }
      };
      function getCompatValue(key, context) {
        const config = context.options ? context.options.compatConfig : context.compatConfig;
        const value = config && config[key];
        if (key === "MODE") {
          return value || 3;
        } else {
          return value;
        }
      }
      function isCompatEnabled(key, context) {
        const mode = getCompatValue("MODE", context);
        const value = getCompatValue(key, context);
        return mode === 3 ? value === true : value !== false;
      }
      function checkCompatEnabled(key, context, loc, ...args) {
        const enabled = isCompatEnabled(key, context);
        if (enabled) {
          warnDeprecation(key, context, loc, ...args);
        }
        return enabled;
      }
      function warnDeprecation(key, context, loc, ...args) {
        const val = getCompatValue(key, context);
        if (val === "suppress-warning") {
          return;
        }
        const { message, link } = deprecationData[key];
        const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
        const err = new SyntaxError(msg);
        err.code = key;
        if (loc)
          err.loc = loc;
        context.onWarn(err);
      }
      var decodeRE = /&(gt|lt|amp|apos|quot);/g;
      var decodeMap = {
        gt: ">",
        lt: "<",
        amp: "&",
        apos: "'",
        quot: '"'
      };
      var defaultParserOptions = {
        delimiters: [`{{`, `}}`],
        getNamespace: () => 0,
        getTextMode: () => 0,
        isVoidTag: shared.NO,
        isPreTag: shared.NO,
        isCustomElement: shared.NO,
        decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),
        onError: defaultOnError,
        onWarn: defaultOnWarn,
        comments: true
      };
      function baseParse(content, options = {}) {
        const context = createParserContext(content, options);
        const start = getCursor(context);
        return createRoot(
          parseChildren(context, 0, []),
          getSelection(context, start)
        );
      }
      function createParserContext(content, rawOptions) {
        const options = shared.extend({}, defaultParserOptions);
        let key;
        for (key in rawOptions) {
          options[key] = rawOptions[key] === void 0 ? defaultParserOptions[key] : rawOptions[key];
        }
        return {
          options,
          column: 1,
          line: 1,
          offset: 0,
          originalSource: content,
          source: content,
          inPre: false,
          inVPre: false,
          onWarn: options.onWarn
        };
      }
      function parseChildren(context, mode, ancestors) {
        const parent = last(ancestors);
        const ns = parent ? parent.ns : 0;
        const nodes = [];
        while (!isEnd(context, mode, ancestors)) {
          const s = context.source;
          let node = void 0;
          if (mode === 0 || mode === 1) {
            if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {
              node = parseInterpolation(context, mode);
            } else if (mode === 0 && s[0] === "<") {
              if (s.length === 1) {
                emitError(context, 5, 1);
              } else if (s[1] === "!") {
                if (startsWith(s, "<!--")) {
                  node = parseComment(context);
                } else if (startsWith(s, "<!DOCTYPE")) {
                  node = parseBogusComment(context);
                } else if (startsWith(s, "<![CDATA[")) {
                  if (ns !== 0) {
                    node = parseCDATA(context, ancestors);
                  } else {
                    emitError(context, 1);
                    node = parseBogusComment(context);
                  }
                } else {
                  emitError(context, 11);
                  node = parseBogusComment(context);
                }
              } else if (s[1] === "/") {
                if (s.length === 2) {
                  emitError(context, 5, 2);
                } else if (s[2] === ">") {
                  emitError(context, 14, 2);
                  advanceBy(context, 3);
                  continue;
                } else if (/[a-z]/i.test(s[2])) {
                  emitError(context, 23);
                  parseTag(context, TagType.End, parent);
                  continue;
                } else {
                  emitError(
                    context,
                    12,
                    2
                  );
                  node = parseBogusComment(context);
                }
              } else if (/[a-z]/i.test(s[1])) {
                node = parseElement(context, ancestors);
                if (isCompatEnabled(
                  "COMPILER_NATIVE_TEMPLATE",
                  context
                ) && node && node.tag === "template" && !node.props.some(
                  (p) => p.type === 7 && isSpecialTemplateDirective(p.name)
                )) {
                  warnDeprecation(
                    "COMPILER_NATIVE_TEMPLATE",
                    context,
                    node.loc
                  );
                  node = node.children;
                }
              } else if (s[1] === "?") {
                emitError(
                  context,
                  21,
                  1
                );
                node = parseBogusComment(context);
              } else {
                emitError(context, 12, 1);
              }
            }
          }
          if (!node) {
            node = parseText(context, mode);
          }
          if (shared.isArray(node)) {
            for (let i = 0; i < node.length; i++) {
              pushNode(nodes, node[i]);
            }
          } else {
            pushNode(nodes, node);
          }
        }
        let removedWhitespace = false;
        if (mode !== 2 && mode !== 1) {
          const shouldCondense = context.options.whitespace !== "preserve";
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (node.type === 2) {
              if (!context.inPre) {
                if (!/[^\t\r\n\f ]/.test(node.content)) {
                  const prev = nodes[i - 1];
                  const next = nodes[i + 1];
                  if (!prev || !next || shouldCondense && (prev.type === 3 && next.type === 3 || prev.type === 3 && next.type === 1 || prev.type === 1 && next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node.content))) {
                    removedWhitespace = true;
                    nodes[i] = null;
                  } else {
                    node.content = " ";
                  }
                } else if (shouldCondense) {
                  node.content = node.content.replace(/[\t\r\n\f ]+/g, " ");
                }
              } else {
                node.content = node.content.replace(/\r\n/g, "\n");
              }
            } else if (node.type === 3 && !context.options.comments) {
              removedWhitespace = true;
              nodes[i] = null;
            }
          }
          if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
            const first = nodes[0];
            if (first && first.type === 2) {
              first.content = first.content.replace(/^\r?\n/, "");
            }
          }
        }
        return removedWhitespace ? nodes.filter(Boolean) : nodes;
      }
      function pushNode(nodes, node) {
        if (node.type === 2) {
          const prev = last(nodes);
          if (prev && prev.type === 2 && prev.loc.end.offset === node.loc.start.offset) {
            prev.content += node.content;
            prev.loc.end = node.loc.end;
            prev.loc.source += node.loc.source;
            return;
          }
        }
        nodes.push(node);
      }
      function parseCDATA(context, ancestors) {
        advanceBy(context, 9);
        const nodes = parseChildren(context, 3, ancestors);
        if (context.source.length === 0) {
          emitError(context, 6);
        } else {
          advanceBy(context, 3);
        }
        return nodes;
      }
      function parseComment(context) {
        const start = getCursor(context);
        let content;
        const match = /--(\!)?>/.exec(context.source);
        if (!match) {
          content = context.source.slice(4);
          advanceBy(context, context.source.length);
          emitError(context, 7);
        } else {
          if (match.index <= 3) {
            emitError(context, 0);
          }
          if (match[1]) {
            emitError(context, 10);
          }
          content = context.source.slice(4, match.index);
          const s = context.source.slice(0, match.index);
          let prevIndex = 1, nestedIndex = 0;
          while ((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1) {
            advanceBy(context, nestedIndex - prevIndex + 1);
            if (nestedIndex + 4 < s.length) {
              emitError(context, 16);
            }
            prevIndex = nestedIndex + 1;
          }
          advanceBy(context, match.index + match[0].length - prevIndex + 1);
        }
        return {
          type: 3,
          content,
          loc: getSelection(context, start)
        };
      }
      function parseBogusComment(context) {
        const start = getCursor(context);
        const contentStart = context.source[1] === "?" ? 1 : 2;
        let content;
        const closeIndex = context.source.indexOf(">");
        if (closeIndex === -1) {
          content = context.source.slice(contentStart);
          advanceBy(context, context.source.length);
        } else {
          content = context.source.slice(contentStart, closeIndex);
          advanceBy(context, closeIndex + 1);
        }
        return {
          type: 3,
          content,
          loc: getSelection(context, start)
        };
      }
      function parseElement(context, ancestors) {
        const wasInPre = context.inPre;
        const wasInVPre = context.inVPre;
        const parent = last(ancestors);
        const element = parseTag(context, TagType.Start, parent);
        const isPreBoundary = context.inPre && !wasInPre;
        const isVPreBoundary = context.inVPre && !wasInVPre;
        if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
          if (isPreBoundary) {
            context.inPre = false;
          }
          if (isVPreBoundary) {
            context.inVPre = false;
          }
          return element;
        }
        ancestors.push(element);
        const mode = context.options.getTextMode(element, parent);
        const children = parseChildren(context, mode, ancestors);
        ancestors.pop();
        {
          const inlineTemplateProp = element.props.find(
            (p) => p.type === 6 && p.name === "inline-template"
          );
          if (inlineTemplateProp && checkCompatEnabled(
            "COMPILER_INLINE_TEMPLATE",
            context,
            inlineTemplateProp.loc
          )) {
            const loc = getSelection(context, element.loc.end);
            inlineTemplateProp.value = {
              type: 2,
              content: loc.source,
              loc
            };
          }
        }
        element.children = children;
        if (startsWithEndTagOpen(context.source, element.tag)) {
          parseTag(context, TagType.End, parent);
        } else {
          emitError(context, 24, 0, element.loc.start);
          if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
            const first = children[0];
            if (first && startsWith(first.loc.source, "<!--")) {
              emitError(context, 8);
            }
          }
        }
        element.loc = getSelection(context, element.loc.start);
        if (isPreBoundary) {
          context.inPre = false;
        }
        if (isVPreBoundary) {
          context.inVPre = false;
        }
        return element;
      }
      var TagType = /* @__PURE__ */ ((TagType2) => {
        TagType2[TagType2["Start"] = 0] = "Start";
        TagType2[TagType2["End"] = 1] = "End";
        return TagType2;
      })(TagType || {});
      var isSpecialTemplateDirective = /* @__PURE__ */ shared.makeMap(
        `if,else,else-if,for,slot`
      );
      function parseTag(context, type, parent) {
        const start = getCursor(context);
        const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
        const tag = match[1];
        const ns = context.options.getNamespace(tag, parent);
        advanceBy(context, match[0].length);
        advanceSpaces(context);
        const cursor = getCursor(context);
        const currentSource = context.source;
        if (context.options.isPreTag(tag)) {
          context.inPre = true;
        }
        let props = parseAttributes(context, type);
        if (type === 0 && !context.inVPre && props.some((p) => p.type === 7 && p.name === "pre")) {
          context.inVPre = true;
          shared.extend(context, cursor);
          context.source = currentSource;
          props = parseAttributes(context, type).filter((p) => p.name !== "v-pre");
        }
        let isSelfClosing = false;
        if (context.source.length === 0) {
          emitError(context, 9);
        } else {
          isSelfClosing = startsWith(context.source, "/>");
          if (type === 1 && isSelfClosing) {
            emitError(context, 4);
          }
          advanceBy(context, isSelfClosing ? 2 : 1);
        }
        if (type === 1) {
          return;
        }
        if (isCompatEnabled(
          "COMPILER_V_IF_V_FOR_PRECEDENCE",
          context
        )) {
          let hasIf = false;
          let hasFor = false;
          for (let i = 0; i < props.length; i++) {
            const p = props[i];
            if (p.type === 7) {
              if (p.name === "if") {
                hasIf = true;
              } else if (p.name === "for") {
                hasFor = true;
              }
            }
            if (hasIf && hasFor) {
              warnDeprecation(
                "COMPILER_V_IF_V_FOR_PRECEDENCE",
                context,
                getSelection(context, start)
              );
              break;
            }
          }
        }
        let tagType = 0;
        if (!context.inVPre) {
          if (tag === "slot") {
            tagType = 2;
          } else if (tag === "template") {
            if (props.some(
              (p) => p.type === 7 && isSpecialTemplateDirective(p.name)
            )) {
              tagType = 3;
            }
          } else if (isComponent(tag, props, context)) {
            tagType = 1;
          }
        }
        return {
          type: 1,
          ns,
          tag,
          tagType,
          props,
          isSelfClosing,
          children: [],
          loc: getSelection(context, start),
          codegenNode: void 0
          // to be created during transform phase
        };
      }
      function isComponent(tag, props, context) {
        const options = context.options;
        if (options.isCustomElement(tag)) {
          return false;
        }
        if (tag === "component" || /^[A-Z]/.test(tag) || isCoreComponent(tag) || options.isBuiltInComponent && options.isBuiltInComponent(tag) || options.isNativeTag && !options.isNativeTag(tag)) {
          return true;
        }
        for (let i = 0; i < props.length; i++) {
          const p = props[i];
          if (p.type === 6) {
            if (p.name === "is" && p.value) {
              if (p.value.content.startsWith("vue:")) {
                return true;
              } else if (checkCompatEnabled(
                "COMPILER_IS_ON_ELEMENT",
                context,
                p.loc
              )) {
                return true;
              }
            }
          } else {
            if (p.name === "is") {
              return true;
            } else if (
              // :is on plain element - only treat as component in compat mode
              p.name === "bind" && isStaticArgOf(p.arg, "is") && true && checkCompatEnabled(
                "COMPILER_IS_ON_ELEMENT",
                context,
                p.loc
              )
            ) {
              return true;
            }
          }
        }
      }
      function parseAttributes(context, type) {
        const props = [];
        const attributeNames = /* @__PURE__ */ new Set();
        while (context.source.length > 0 && !startsWith(context.source, ">") && !startsWith(context.source, "/>")) {
          if (startsWith(context.source, "/")) {
            emitError(context, 22);
            advanceBy(context, 1);
            advanceSpaces(context);
            continue;
          }
          if (type === 1) {
            emitError(context, 3);
          }
          const attr = parseAttribute(context, attributeNames);
          if (attr.type === 6 && attr.value && attr.name === "class") {
            attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
          }
          if (type === 0) {
            props.push(attr);
          }
          if (/^[^\t\r\n\f />]/.test(context.source)) {
            emitError(context, 15);
          }
          advanceSpaces(context);
        }
        return props;
      }
      function parseAttribute(context, nameSet) {
        var _a;
        const start = getCursor(context);
        const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
        const name = match[0];
        if (nameSet.has(name)) {
          emitError(context, 2);
        }
        nameSet.add(name);
        if (name[0] === "=") {
          emitError(context, 19);
        }
        {
          const pattern = /["'<]/g;
          let m;
          while (m = pattern.exec(name)) {
            emitError(
              context,
              17,
              m.index
            );
          }
        }
        advanceBy(context, name.length);
        let value = void 0;
        if (/^[\t\r\n\f ]*=/.test(context.source)) {
          advanceSpaces(context);
          advanceBy(context, 1);
          advanceSpaces(context);
          value = parseAttributeValue(context);
          if (!value) {
            emitError(context, 13);
          }
        }
        const loc = getSelection(context, start);
        if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
          const match2 = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(
            name
          );
          let isPropShorthand = startsWith(name, ".");
          let dirName = match2[1] || (isPropShorthand || startsWith(name, ":") ? "bind" : startsWith(name, "@") ? "on" : "slot");
          let arg;
          if (match2[2]) {
            const isSlot = dirName === "slot";
            const startOffset = name.lastIndexOf(
              match2[2],
              name.length - (((_a = match2[3]) == null ? void 0 : _a.length) || 0)
            );
            const loc2 = getSelection(
              context,
              getNewPosition(context, start, startOffset),
              getNewPosition(
                context,
                start,
                startOffset + match2[2].length + (isSlot && match2[3] || "").length
              )
            );
            let content = match2[2];
            let isStatic = true;
            if (content.startsWith("[")) {
              isStatic = false;
              if (!content.endsWith("]")) {
                emitError(
                  context,
                  27
                );
                content = content.slice(1);
              } else {
                content = content.slice(1, content.length - 1);
              }
            } else if (isSlot) {
              content += match2[3] || "";
            }
            arg = {
              type: 4,
              content,
              isStatic,
              constType: isStatic ? 3 : 0,
              loc: loc2
            };
          }
          if (value && value.isQuoted) {
            const valueLoc = value.loc;
            valueLoc.start.offset++;
            valueLoc.start.column++;
            valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
            valueLoc.source = valueLoc.source.slice(1, -1);
          }
          const modifiers = match2[3] ? match2[3].slice(1).split(".") : [];
          if (isPropShorthand)
            modifiers.push("prop");
          if (dirName === "bind" && arg) {
            if (modifiers.includes("sync") && checkCompatEnabled(
              "COMPILER_V_BIND_SYNC",
              context,
              loc,
              arg.loc.source
            )) {
              dirName = "model";
              modifiers.splice(modifiers.indexOf("sync"), 1);
            }
            if (modifiers.includes("prop")) {
              checkCompatEnabled(
                "COMPILER_V_BIND_PROP",
                context,
                loc
              );
            }
          }
          return {
            type: 7,
            name: dirName,
            exp: value && {
              type: 4,
              content: value.content,
              isStatic: false,
              // Treat as non-constant by default. This can be potentially set to
              // other values by `transformExpression` to make it eligible for hoisting.
              constType: 0,
              loc: value.loc
            },
            arg,
            modifiers,
            loc
          };
        }
        if (!context.inVPre && startsWith(name, "v-")) {
          emitError(context, 26);
        }
        return {
          type: 6,
          name,
          value: value && {
            type: 2,
            content: value.content,
            loc: value.loc
          },
          loc
        };
      }
      function parseAttributeValue(context) {
        const start = getCursor(context);
        let content;
        const quote = context.source[0];
        const isQuoted = quote === `"` || quote === `'`;
        if (isQuoted) {
          advanceBy(context, 1);
          const endIndex = context.source.indexOf(quote);
          if (endIndex === -1) {
            content = parseTextData(
              context,
              context.source.length,
              4
            );
          } else {
            content = parseTextData(context, endIndex, 4);
            advanceBy(context, 1);
          }
        } else {
          const match = /^[^\t\r\n\f >]+/.exec(context.source);
          if (!match) {
            return void 0;
          }
          const unexpectedChars = /["'<=`]/g;
          let m;
          while (m = unexpectedChars.exec(match[0])) {
            emitError(
              context,
              18,
              m.index
            );
          }
          content = parseTextData(context, match[0].length, 4);
        }
        return { content, isQuoted, loc: getSelection(context, start) };
      }
      function parseInterpolation(context, mode) {
        const [open, close] = context.options.delimiters;
        const closeIndex = context.source.indexOf(close, open.length);
        if (closeIndex === -1) {
          emitError(context, 25);
          return void 0;
        }
        const start = getCursor(context);
        advanceBy(context, open.length);
        const innerStart = getCursor(context);
        const innerEnd = getCursor(context);
        const rawContentLength = closeIndex - open.length;
        const rawContent = context.source.slice(0, rawContentLength);
        const preTrimContent = parseTextData(context, rawContentLength, mode);
        const content = preTrimContent.trim();
        const startOffset = preTrimContent.indexOf(content);
        if (startOffset > 0) {
          advancePositionWithMutation(innerStart, rawContent, startOffset);
        }
        const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
        advancePositionWithMutation(innerEnd, rawContent, endOffset);
        advanceBy(context, close.length);
        return {
          type: 5,
          content: {
            type: 4,
            isStatic: false,
            // Set `isConstant` to false by default and will decide in transformExpression
            constType: 0,
            content,
            loc: getSelection(context, innerStart, innerEnd)
          },
          loc: getSelection(context, start)
        };
      }
      function parseText(context, mode) {
        const endTokens = mode === 3 ? ["]]>"] : ["<", context.options.delimiters[0]];
        let endIndex = context.source.length;
        for (let i = 0; i < endTokens.length; i++) {
          const index = context.source.indexOf(endTokens[i], 1);
          if (index !== -1 && endIndex > index) {
            endIndex = index;
          }
        }
        const start = getCursor(context);
        const content = parseTextData(context, endIndex, mode);
        return {
          type: 2,
          content,
          loc: getSelection(context, start)
        };
      }
      function parseTextData(context, length, mode) {
        const rawText = context.source.slice(0, length);
        advanceBy(context, length);
        if (mode === 2 || mode === 3 || !rawText.includes("&")) {
          return rawText;
        } else {
          return context.options.decodeEntities(
            rawText,
            mode === 4
          );
        }
      }
      function getCursor(context) {
        const { column, line, offset } = context;
        return { column, line, offset };
      }
      function getSelection(context, start, end) {
        end = end || getCursor(context);
        return {
          start,
          end,
          source: context.originalSource.slice(start.offset, end.offset)
        };
      }
      function last(xs) {
        return xs[xs.length - 1];
      }
      function startsWith(source, searchString) {
        return source.startsWith(searchString);
      }
      function advanceBy(context, numberOfCharacters) {
        const { source } = context;
        advancePositionWithMutation(context, source, numberOfCharacters);
        context.source = source.slice(numberOfCharacters);
      }
      function advanceSpaces(context) {
        const match = /^[\t\r\n\f ]+/.exec(context.source);
        if (match) {
          advanceBy(context, match[0].length);
        }
      }
      function getNewPosition(context, start, numberOfCharacters) {
        return advancePositionWithClone(
          start,
          context.originalSource.slice(start.offset, numberOfCharacters),
          numberOfCharacters
        );
      }
      function emitError(context, code, offset, loc = getCursor(context)) {
        if (offset) {
          loc.offset += offset;
          loc.column += offset;
        }
        context.options.onError(
          createCompilerError(code, {
            start: loc,
            end: loc,
            source: ""
          })
        );
      }
      function isEnd(context, mode, ancestors) {
        const s = context.source;
        switch (mode) {
          case 0:
            if (startsWith(s, "</")) {
              for (let i = ancestors.length - 1; i >= 0; --i) {
                if (startsWithEndTagOpen(s, ancestors[i].tag)) {
                  return true;
                }
              }
            }
            break;
          case 1:
          case 2: {
            const parent = last(ancestors);
            if (parent && startsWithEndTagOpen(s, parent.tag)) {
              return true;
            }
            break;
          }
          case 3:
            if (startsWith(s, "]]>")) {
              return true;
            }
            break;
        }
        return !s;
      }
      function startsWithEndTagOpen(source, tag) {
        return startsWith(source, "</") && source.slice(2, 2 + tag.length).toLowerCase() === tag.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag.length] || ">");
      }
      function hoistStatic(root, context) {
        walk(
          root,
          context,
          // Root node is unfortunately non-hoistable due to potential parent
          // fallthrough attributes.
          isSingleElementRoot(root, root.children[0])
        );
      }
      function isSingleElementRoot(root, child) {
        const { children } = root;
        return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
      }
      function walk(node, context, doNotHoistNode = false) {
        const { children } = node;
        const originalCount = children.length;
        let hoistedCount = 0;
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          if (child.type === 1 && child.tagType === 0) {
            const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
            if (constantType > 0) {
              if (constantType >= 2) {
                child.codegenNode.patchFlag = `-1 /* HOISTED */`;
                child.codegenNode = context.hoist(child.codegenNode);
                hoistedCount++;
                continue;
              }
            } else {
              const codegenNode = child.codegenNode;
              if (codegenNode.type === 13) {
                const flag = getPatchFlag(codegenNode);
                if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
                  const props = getNodeProps(child);
                  if (props) {
                    codegenNode.props = context.hoist(props);
                  }
                }
                if (codegenNode.dynamicProps) {
                  codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
                }
              }
            }
          }
          if (child.type === 1) {
            const isComponent2 = child.tagType === 1;
            if (isComponent2) {
              context.scopes.vSlot++;
            }
            walk(child, context);
            if (isComponent2) {
              context.scopes.vSlot--;
            }
          } else if (child.type === 11) {
            walk(child, context, child.children.length === 1);
          } else if (child.type === 9) {
            for (let i2 = 0; i2 < child.branches.length; i2++) {
              walk(
                child.branches[i2],
                context,
                child.branches[i2].children.length === 1
              );
            }
          }
        }
        if (hoistedCount && context.transformHoist) {
          context.transformHoist(children, context, node);
        }
        if (hoistedCount && hoistedCount === originalCount && node.type === 1 && node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && shared.isArray(node.codegenNode.children)) {
          node.codegenNode.children = context.hoist(
            createArrayExpression(node.codegenNode.children)
          );
        }
      }
      function getConstantType(node, context) {
        const { constantCache } = context;
        switch (node.type) {
          case 1:
            if (node.tagType !== 0) {
              return 0;
            }
            const cached = constantCache.get(node);
            if (cached !== void 0) {
              return cached;
            }
            const codegenNode = node.codegenNode;
            if (codegenNode.type !== 13) {
              return 0;
            }
            if (codegenNode.isBlock && node.tag !== "svg" && node.tag !== "foreignObject") {
              return 0;
            }
            const flag = getPatchFlag(codegenNode);
            if (!flag) {
              let returnType2 = 3;
              const generatedPropsType = getGeneratedPropsConstantType(node, context);
              if (generatedPropsType === 0) {
                constantCache.set(node, 0);
                return 0;
              }
              if (generatedPropsType < returnType2) {
                returnType2 = generatedPropsType;
              }
              for (let i = 0; i < node.children.length; i++) {
                const childType = getConstantType(node.children[i], context);
                if (childType === 0) {
                  constantCache.set(node, 0);
                  return 0;
                }
                if (childType < returnType2) {
                  returnType2 = childType;
                }
              }
              if (returnType2 > 1) {
                for (let i = 0; i < node.props.length; i++) {
                  const p = node.props[i];
                  if (p.type === 7 && p.name === "bind" && p.exp) {
                    const expType = getConstantType(p.exp, context);
                    if (expType === 0) {
                      constantCache.set(node, 0);
                      return 0;
                    }
                    if (expType < returnType2) {
                      returnType2 = expType;
                    }
                  }
                }
              }
              if (codegenNode.isBlock) {
                for (let i = 0; i < node.props.length; i++) {
                  const p = node.props[i];
                  if (p.type === 7) {
                    constantCache.set(node, 0);
                    return 0;
                  }
                }
                context.removeHelper(OPEN_BLOCK);
                context.removeHelper(
                  getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)
                );
                codegenNode.isBlock = false;
                context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
              }
              constantCache.set(node, returnType2);
              return returnType2;
            } else {
              constantCache.set(node, 0);
              return 0;
            }
          case 2:
          case 3:
            return 3;
          case 9:
          case 11:
          case 10:
            return 0;
          case 5:
          case 12:
            return getConstantType(node.content, context);
          case 4:
            return node.constType;
          case 8:
            let returnType = 3;
            for (let i = 0; i < node.children.length; i++) {
              const child = node.children[i];
              if (shared.isString(child) || shared.isSymbol(child)) {
                continue;
              }
              const childType = getConstantType(child, context);
              if (childType === 0) {
                return 0;
              } else if (childType < returnType) {
                returnType = childType;
              }
            }
            return returnType;
          default:
            return 0;
        }
      }
      var allowHoistedHelperSet = /* @__PURE__ */ new Set([
        NORMALIZE_CLASS,
        NORMALIZE_STYLE,
        NORMALIZE_PROPS,
        GUARD_REACTIVE_PROPS
      ]);
      function getConstantTypeOfHelperCall(value, context) {
        if (value.type === 14 && !shared.isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {
          const arg = value.arguments[0];
          if (arg.type === 4) {
            return getConstantType(arg, context);
          } else if (arg.type === 14) {
            return getConstantTypeOfHelperCall(arg, context);
          }
        }
        return 0;
      }
      function getGeneratedPropsConstantType(node, context) {
        let returnType = 3;
        const props = getNodeProps(node);
        if (props && props.type === 15) {
          const { properties } = props;
          for (let i = 0; i < properties.length; i++) {
            const { key, value } = properties[i];
            const keyType = getConstantType(key, context);
            if (keyType === 0) {
              return keyType;
            }
            if (keyType < returnType) {
              returnType = keyType;
            }
            let valueType;
            if (value.type === 4) {
              valueType = getConstantType(value, context);
            } else if (value.type === 14) {
              valueType = getConstantTypeOfHelperCall(value, context);
            } else {
              valueType = 0;
            }
            if (valueType === 0) {
              return valueType;
            }
            if (valueType < returnType) {
              returnType = valueType;
            }
          }
        }
        return returnType;
      }
      function getNodeProps(node) {
        const codegenNode = node.codegenNode;
        if (codegenNode.type === 13) {
          return codegenNode.props;
        }
      }
      function getPatchFlag(node) {
        const flag = node.patchFlag;
        return flag ? parseInt(flag, 10) : void 0;
      }
      function createTransformContext(root, {
        filename = "",
        prefixIdentifiers = false,
        hoistStatic: hoistStatic2 = false,
        cacheHandlers = false,
        nodeTransforms = [],
        directiveTransforms = {},
        transformHoist = null,
        isBuiltInComponent = shared.NOOP,
        isCustomElement = shared.NOOP,
        expressionPlugins = [],
        scopeId = null,
        slotted = true,
        ssr = false,
        inSSR = false,
        ssrCssVars = ``,
        bindingMetadata = shared.EMPTY_OBJ,
        inline = false,
        isTS = false,
        onError = defaultOnError,
        onWarn = defaultOnWarn,
        compatConfig
      }) {
        const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
        const context = {
          // options
          selfName: nameMatch && shared.capitalize(shared.camelize(nameMatch[1])),
          prefixIdentifiers,
          hoistStatic: hoistStatic2,
          cacheHandlers,
          nodeTransforms,
          directiveTransforms,
          transformHoist,
          isBuiltInComponent,
          isCustomElement,
          expressionPlugins,
          scopeId,
          slotted,
          ssr,
          inSSR,
          ssrCssVars,
          bindingMetadata,
          inline,
          isTS,
          onError,
          onWarn,
          compatConfig,
          // state
          root,
          helpers: /* @__PURE__ */ new Map(),
          components: /* @__PURE__ */ new Set(),
          directives: /* @__PURE__ */ new Set(),
          hoists: [],
          imports: [],
          constantCache: /* @__PURE__ */ new Map(),
          temps: 0,
          cached: 0,
          identifiers: /* @__PURE__ */ Object.create(null),
          scopes: {
            vFor: 0,
            vSlot: 0,
            vPre: 0,
            vOnce: 0
          },
          parent: null,
          currentNode: root,
          childIndex: 0,
          inVOnce: false,
          // methods
          helper(name) {
            const count = context.helpers.get(name) || 0;
            context.helpers.set(name, count + 1);
            return name;
          },
          removeHelper(name) {
            const count = context.helpers.get(name);
            if (count) {
              const currentCount = count - 1;
              if (!currentCount) {
                context.helpers.delete(name);
              } else {
                context.helpers.set(name, currentCount);
              }
            }
          },
          helperString(name) {
            return `_${helperNameMap[context.helper(name)]}`;
          },
          replaceNode(node) {
            {
              if (!context.currentNode) {
                throw new Error(`Node being replaced is already removed.`);
              }
              if (!context.parent) {
                throw new Error(`Cannot replace root node.`);
              }
            }
            context.parent.children[context.childIndex] = context.currentNode = node;
          },
          removeNode(node) {
            if (!context.parent) {
              throw new Error(`Cannot remove root node.`);
            }
            const list = context.parent.children;
            const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
            if (removalIndex < 0) {
              throw new Error(`node being removed is not a child of current parent`);
            }
            if (!node || node === context.currentNode) {
              context.currentNode = null;
              context.onNodeRemoved();
            } else {
              if (context.childIndex > removalIndex) {
                context.childIndex--;
                context.onNodeRemoved();
              }
            }
            context.parent.children.splice(removalIndex, 1);
          },
          onNodeRemoved: () => {
          },
          addIdentifiers(exp) {
            {
              if (shared.isString(exp)) {
                addId(exp);
              } else if (exp.identifiers) {
                exp.identifiers.forEach(addId);
              } else if (exp.type === 4) {
                addId(exp.content);
              }
            }
          },
          removeIdentifiers(exp) {
            {
              if (shared.isString(exp)) {
                removeId(exp);
              } else if (exp.identifiers) {
                exp.identifiers.forEach(removeId);
              } else if (exp.type === 4) {
                removeId(exp.content);
              }
            }
          },
          hoist(exp) {
            if (shared.isString(exp))
              exp = createSimpleExpression(exp);
            context.hoists.push(exp);
            const identifier = createSimpleExpression(
              `_hoisted_${context.hoists.length}`,
              false,
              exp.loc,
              2
            );
            identifier.hoisted = exp;
            return identifier;
          },
          cache(exp, isVNode = false) {
            return createCacheExpression(context.cached++, exp, isVNode);
          }
        };
        {
          context.filters = /* @__PURE__ */ new Set();
        }
        function addId(id) {
          const { identifiers } = context;
          if (identifiers[id] === void 0) {
            identifiers[id] = 0;
          }
          identifiers[id]++;
        }
        function removeId(id) {
          context.identifiers[id]--;
        }
        return context;
      }
      function transform(root, options) {
        const context = createTransformContext(root, options);
        traverseNode(root, context);
        if (options.hoistStatic) {
          hoistStatic(root, context);
        }
        if (!options.ssr) {
          createRootCodegen(root, context);
        }
        root.helpers = /* @__PURE__ */ new Set([...context.helpers.keys()]);
        root.components = [...context.components];
        root.directives = [...context.directives];
        root.imports = context.imports;
        root.hoists = context.hoists;
        root.temps = context.temps;
        root.cached = context.cached;
        {
          root.filters = [...context.filters];
        }
      }
      function createRootCodegen(root, context) {
        const { helper } = context;
        const { children } = root;
        if (children.length === 1) {
          const child = children[0];
          if (isSingleElementRoot(root, child) && child.codegenNode) {
            const codegenNode = child.codegenNode;
            if (codegenNode.type === 13) {
              convertToBlock(codegenNode, context);
            }
            root.codegenNode = codegenNode;
          } else {
            root.codegenNode = child;
          }
        } else if (children.length > 1) {
          let patchFlag = 64;
          let patchFlagText = shared.PatchFlagNames[64];
          if (children.filter((c) => c.type !== 3).length === 1) {
            patchFlag |= 2048;
            patchFlagText += `, ${shared.PatchFlagNames[2048]}`;
          }
          root.codegenNode = createVNodeCall(
            context,
            helper(FRAGMENT),
            void 0,
            root.children,
            patchFlag + ` /* ${patchFlagText} */`,
            void 0,
            void 0,
            true,
            void 0,
            false
            /* isComponent */
          );
        } else
          ;
      }
      function traverseChildren(parent, context) {
        let i = 0;
        const nodeRemoved = () => {
          i--;
        };
        for (; i < parent.children.length; i++) {
          const child = parent.children[i];
          if (shared.isString(child))
            continue;
          context.parent = parent;
          context.childIndex = i;
          context.onNodeRemoved = nodeRemoved;
          traverseNode(child, context);
        }
      }
      function traverseNode(node, context) {
        context.currentNode = node;
        const { nodeTransforms } = context;
        const exitFns = [];
        for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
          const onExit = nodeTransforms[i2](node, context);
          if (onExit) {
            if (shared.isArray(onExit)) {
              exitFns.push(...onExit);
            } else {
              exitFns.push(onExit);
            }
          }
          if (!context.currentNode) {
            return;
          } else {
            node = context.currentNode;
          }
        }
        switch (node.type) {
          case 3:
            if (!context.ssr) {
              context.helper(CREATE_COMMENT);
            }
            break;
          case 5:
            if (!context.ssr) {
              context.helper(TO_DISPLAY_STRING);
            }
            break;
          case 9:
            for (let i2 = 0; i2 < node.branches.length; i2++) {
              traverseNode(node.branches[i2], context);
            }
            break;
          case 10:
          case 11:
          case 1:
          case 0:
            traverseChildren(node, context);
            break;
        }
        context.currentNode = node;
        let i = exitFns.length;
        while (i--) {
          exitFns[i]();
        }
      }
      function createStructuralDirectiveTransform(name, fn) {
        const matches = shared.isString(name) ? (n) => n === name : (n) => name.test(n);
        return (node, context) => {
          if (node.type === 1) {
            const { props } = node;
            if (node.tagType === 3 && props.some(isVSlot)) {
              return;
            }
            const exitFns = [];
            for (let i = 0; i < props.length; i++) {
              const prop = props[i];
              if (prop.type === 7 && matches(prop.name)) {
                props.splice(i, 1);
                i--;
                const onExit = fn(node, prop, context);
                if (onExit)
                  exitFns.push(onExit);
              }
            }
            return exitFns;
          }
        };
      }
      var PURE_ANNOTATION = `/*#__PURE__*/`;
      var aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
      function createCodegenContext(ast, {
        mode = "function",
        prefixIdentifiers = mode === "module",
        sourceMap = false,
        filename = `template.vue.html`,
        scopeId = null,
        optimizeImports = false,
        runtimeGlobalName = `Vue`,
        runtimeModuleName = `vue`,
        ssrRuntimeModuleName = "vue/server-renderer",
        ssr = false,
        isTS = false,
        inSSR = false
      }) {
        const context = {
          mode,
          prefixIdentifiers,
          sourceMap,
          filename,
          scopeId,
          optimizeImports,
          runtimeGlobalName,
          runtimeModuleName,
          ssrRuntimeModuleName,
          ssr,
          isTS,
          inSSR,
          source: ast.loc.source,
          code: ``,
          column: 1,
          line: 1,
          offset: 0,
          indentLevel: 0,
          pure: false,
          map: void 0,
          helper(key) {
            return `_${helperNameMap[key]}`;
          },
          push(code, node) {
            context.code += code;
            if (context.map) {
              if (node) {
                let name;
                if (node.type === 4 && !node.isStatic) {
                  const content = node.content.replace(/^_ctx\./, "");
                  if (content !== node.content && isSimpleIdentifier(content)) {
                    name = content;
                  }
                }
                addMapping(node.loc.start, name);
              }
              advancePositionWithMutation(context, code);
              if (node && node.loc !== locStub) {
                addMapping(node.loc.end);
              }
            }
          },
          indent() {
            newline(++context.indentLevel);
          },
          deindent(withoutNewLine = false) {
            if (withoutNewLine) {
              --context.indentLevel;
            } else {
              newline(--context.indentLevel);
            }
          },
          newline() {
            newline(context.indentLevel);
          }
        };
        function newline(n) {
          context.push("\n" + `  `.repeat(n));
        }
        function addMapping(loc, name) {
          context.map.addMapping({
            name,
            source: context.filename,
            original: {
              line: loc.line,
              column: loc.column - 1
              // source-map column is 0 based
            },
            generated: {
              line: context.line,
              column: context.column - 1
            }
          });
        }
        if (sourceMap) {
          context.map = new sourceMapJs.SourceMapGenerator();
          context.map.setSourceContent(filename, context.source);
        }
        return context;
      }
      function generate(ast, options = {}) {
        const context = createCodegenContext(ast, options);
        if (options.onContextCreated)
          options.onContextCreated(context);
        const {
          mode,
          push,
          prefixIdentifiers,
          indent,
          deindent,
          newline,
          scopeId,
          ssr
        } = context;
        const helpers = Array.from(ast.helpers);
        const hasHelpers = helpers.length > 0;
        const useWithBlock = !prefixIdentifiers && mode !== "module";
        const genScopeId = scopeId != null && mode === "module";
        const isSetupInlined = !!options.inline;
        const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;
        if (mode === "module") {
          genModulePreamble(ast, preambleContext, genScopeId, isSetupInlined);
        } else {
          genFunctionPreamble(ast, preambleContext);
        }
        const functionName = ssr ? `ssrRender` : `render`;
        const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
        if (options.bindingMetadata && !options.inline) {
          args.push("$props", "$setup", "$data", "$options");
        }
        const signature = options.isTS ? args.map((arg) => `${arg}: any`).join(",") : args.join(", ");
        if (isSetupInlined) {
          push(`(${signature}) => {`);
        } else {
          push(`function ${functionName}(${signature}) {`);
        }
        indent();
        if (useWithBlock) {
          push(`with (_ctx) {`);
          indent();
          if (hasHelpers) {
            push(`const { ${helpers.map(aliasHelper).join(", ")} } = _Vue`);
            push(`
`);
            newline();
          }
        }
        if (ast.components.length) {
          genAssets(ast.components, "component", context);
          if (ast.directives.length || ast.temps > 0) {
            newline();
          }
        }
        if (ast.directives.length) {
          genAssets(ast.directives, "directive", context);
          if (ast.temps > 0) {
            newline();
          }
        }
        if (ast.filters && ast.filters.length) {
          newline();
          genAssets(ast.filters, "filter", context);
          newline();
        }
        if (ast.temps > 0) {
          push(`let `);
          for (let i = 0; i < ast.temps; i++) {
            push(`${i > 0 ? `, ` : ``}_temp${i}`);
          }
        }
        if (ast.components.length || ast.directives.length || ast.temps) {
          push(`
`);
          newline();
        }
        if (!ssr) {
          push(`return `);
        }
        if (ast.codegenNode) {
          genNode(ast.codegenNode, context);
        } else {
          push(`null`);
        }
        if (useWithBlock) {
          deindent();
          push(`}`);
        }
        deindent();
        push(`}`);
        return {
          ast,
          code: context.code,
          preamble: isSetupInlined ? preambleContext.code : ``,
          // SourceMapGenerator does have toJSON() method but it's not in the types
          map: context.map ? context.map.toJSON() : void 0
        };
      }
      function genFunctionPreamble(ast, context) {
        const {
          ssr,
          prefixIdentifiers,
          push,
          newline,
          runtimeModuleName,
          runtimeGlobalName,
          ssrRuntimeModuleName
        } = context;
        const VueBinding = ssr ? `require(${JSON.stringify(runtimeModuleName)})` : runtimeGlobalName;
        const helpers = Array.from(ast.helpers);
        if (helpers.length > 0) {
          if (prefixIdentifiers) {
            push(`const { ${helpers.map(aliasHelper).join(", ")} } = ${VueBinding}
`);
          } else {
            push(`const _Vue = ${VueBinding}
`);
            if (ast.hoists.length) {
              const staticHelpers = [
                CREATE_VNODE,
                CREATE_ELEMENT_VNODE,
                CREATE_COMMENT,
                CREATE_TEXT,
                CREATE_STATIC
              ].filter((helper) => helpers.includes(helper)).map(aliasHelper).join(", ");
              push(`const { ${staticHelpers} } = _Vue
`);
            }
          }
        }
        if (ast.ssrHelpers && ast.ssrHelpers.length) {
          push(
            `const { ${ast.ssrHelpers.map(aliasHelper).join(", ")} } = require("${ssrRuntimeModuleName}")
`
          );
        }
        genHoists(ast.hoists, context);
        newline();
        push(`return `);
      }
      function genModulePreamble(ast, context, genScopeId, inline) {
        const {
          push,
          newline,
          optimizeImports,
          runtimeModuleName,
          ssrRuntimeModuleName
        } = context;
        if (genScopeId && ast.hoists.length) {
          ast.helpers.add(PUSH_SCOPE_ID);
          ast.helpers.add(POP_SCOPE_ID);
        }
        if (ast.helpers.size) {
          const helpers = Array.from(ast.helpers);
          if (optimizeImports) {
            push(
              `import { ${helpers.map((s) => helperNameMap[s]).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`
            );
            push(
              `
// Binding optimization for webpack code-split
const ${helpers.map((s) => `_${helperNameMap[s]} = ${helperNameMap[s]}`).join(", ")}
`
            );
          } else {
            push(
              `import { ${helpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(", ")} } from ${JSON.stringify(runtimeModuleName)}
`
            );
          }
        }
        if (ast.ssrHelpers && ast.ssrHelpers.length) {
          push(
            `import { ${ast.ssrHelpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(", ")} } from "${ssrRuntimeModuleName}"
`
          );
        }
        if (ast.imports.length) {
          genImports(ast.imports, context);
          newline();
        }
        genHoists(ast.hoists, context);
        newline();
        if (!inline) {
          push(`export `);
        }
      }
      function genAssets(assets, type, { helper, push, newline, isTS }) {
        const resolver = helper(
          type === "filter" ? RESOLVE_FILTER : type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE
        );
        for (let i = 0; i < assets.length; i++) {
          let id = assets[i];
          const maybeSelfReference = id.endsWith("__self");
          if (maybeSelfReference) {
            id = id.slice(0, -6);
          }
          push(
            `const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`
          );
          if (i < assets.length - 1) {
            newline();
          }
        }
      }
      function genHoists(hoists, context) {
        if (!hoists.length) {
          return;
        }
        context.pure = true;
        const { push, newline, helper, scopeId, mode } = context;
        const genScopeId = scopeId != null && mode !== "function";
        newline();
        if (genScopeId) {
          push(
            `const _withScopeId = n => (${helper(
              PUSH_SCOPE_ID
            )}("${scopeId}"),n=n(),${helper(POP_SCOPE_ID)}(),n)`
          );
          newline();
        }
        for (let i = 0; i < hoists.length; i++) {
          const exp = hoists[i];
          if (exp) {
            const needScopeIdWrapper = genScopeId && exp.type === 13;
            push(
              `const _hoisted_${i + 1} = ${needScopeIdWrapper ? `${PURE_ANNOTATION} _withScopeId(() => ` : ``}`
            );
            genNode(exp, context);
            if (needScopeIdWrapper) {
              push(`)`);
            }
            newline();
          }
        }
        context.pure = false;
      }
      function genImports(importsOptions, context) {
        if (!importsOptions.length) {
          return;
        }
        importsOptions.forEach((imports) => {
          context.push(`import `);
          genNode(imports.exp, context);
          context.push(` from '${imports.path}'`);
          context.newline();
        });
      }
      function isText(n) {
        return shared.isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;
      }
      function genNodeListAsArray(nodes, context) {
        const multilines = nodes.length > 3 || nodes.some((n) => shared.isArray(n) || !isText(n));
        context.push(`[`);
        multilines && context.indent();
        genNodeList(nodes, context, multilines);
        multilines && context.deindent();
        context.push(`]`);
      }
      function genNodeList(nodes, context, multilines = false, comma = true) {
        const { push, newline } = context;
        for (let i = 0; i < nodes.length; i++) {
          const node = nodes[i];
          if (shared.isString(node)) {
            push(node);
          } else if (shared.isArray(node)) {
            genNodeListAsArray(node, context);
          } else {
            genNode(node, context);
          }
          if (i < nodes.length - 1) {
            if (multilines) {
              comma && push(",");
              newline();
            } else {
              comma && push(", ");
            }
          }
        }
      }
      function genNode(node, context) {
        if (shared.isString(node)) {
          context.push(node);
          return;
        }
        if (shared.isSymbol(node)) {
          context.push(context.helper(node));
          return;
        }
        switch (node.type) {
          case 1:
          case 9:
          case 11:
            assert(
              node.codegenNode != null,
              `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`
            );
            genNode(node.codegenNode, context);
            break;
          case 2:
            genText(node, context);
            break;
          case 4:
            genExpression(node, context);
            break;
          case 5:
            genInterpolation(node, context);
            break;
          case 12:
            genNode(node.codegenNode, context);
            break;
          case 8:
            genCompoundExpression(node, context);
            break;
          case 3:
            genComment(node, context);
            break;
          case 13:
            genVNodeCall(node, context);
            break;
          case 14:
            genCallExpression(node, context);
            break;
          case 15:
            genObjectExpression(node, context);
            break;
          case 17:
            genArrayExpression(node, context);
            break;
          case 18:
            genFunctionExpression(node, context);
            break;
          case 19:
            genConditionalExpression(node, context);
            break;
          case 20:
            genCacheExpression(node, context);
            break;
          case 21:
            genNodeList(node.body, context, true, false);
            break;
          case 22:
            genTemplateLiteral(node, context);
            break;
          case 23:
            genIfStatement(node, context);
            break;
          case 24:
            genAssignmentExpression(node, context);
            break;
          case 25:
            genSequenceExpression(node, context);
            break;
          case 26:
            genReturnStatement(node, context);
            break;
          case 10:
            break;
          default: {
            assert(false, `unhandled codegen node type: ${node.type}`);
            const exhaustiveCheck = node;
            return exhaustiveCheck;
          }
        }
      }
      function genText(node, context) {
        context.push(JSON.stringify(node.content), node);
      }
      function genExpression(node, context) {
        const { content, isStatic } = node;
        context.push(isStatic ? JSON.stringify(content) : content, node);
      }
      function genInterpolation(node, context) {
        const { push, helper, pure } = context;
        if (pure)
          push(PURE_ANNOTATION);
        push(`${helper(TO_DISPLAY_STRING)}(`);
        genNode(node.content, context);
        push(`)`);
      }
      function genCompoundExpression(node, context) {
        for (let i = 0; i < node.children.length; i++) {
          const child = node.children[i];
          if (shared.isString(child)) {
            context.push(child);
          } else {
            genNode(child, context);
          }
        }
      }
      function genExpressionAsPropertyKey(node, context) {
        const { push } = context;
        if (node.type === 8) {
          push(`[`);
          genCompoundExpression(node, context);
          push(`]`);
        } else if (node.isStatic) {
          const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
          push(text, node);
        } else {
          push(`[${node.content}]`, node);
        }
      }
      function genComment(node, context) {
        const { push, helper, pure } = context;
        if (pure) {
          push(PURE_ANNOTATION);
        }
        push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);
      }
      function genVNodeCall(node, context) {
        const { push, helper, pure } = context;
        const {
          tag,
          props,
          children,
          patchFlag,
          dynamicProps,
          directives,
          isBlock,
          disableTracking,
          isComponent: isComponent2
        } = node;
        if (directives) {
          push(helper(WITH_DIRECTIVES) + `(`);
        }
        if (isBlock) {
          push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
        }
        if (pure) {
          push(PURE_ANNOTATION);
        }
        const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent2) : getVNodeHelper(context.inSSR, isComponent2);
        push(helper(callHelper) + `(`, node);
        genNodeList(
          genNullableArgs([tag, props, children, patchFlag, dynamicProps]),
          context
        );
        push(`)`);
        if (isBlock) {
          push(`)`);
        }
        if (directives) {
          push(`, `);
          genNode(directives, context);
          push(`)`);
        }
      }
      function genNullableArgs(args) {
        let i = args.length;
        while (i--) {
          if (args[i] != null)
            break;
        }
        return args.slice(0, i + 1).map((arg) => arg || `null`);
      }
      function genCallExpression(node, context) {
        const { push, helper, pure } = context;
        const callee = shared.isString(node.callee) ? node.callee : helper(node.callee);
        if (pure) {
          push(PURE_ANNOTATION);
        }
        push(callee + `(`, node);
        genNodeList(node.arguments, context);
        push(`)`);
      }
      function genObjectExpression(node, context) {
        const { push, indent, deindent, newline } = context;
        const { properties } = node;
        if (!properties.length) {
          push(`{}`, node);
          return;
        }
        const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);
        push(multilines ? `{` : `{ `);
        multilines && indent();
        for (let i = 0; i < properties.length; i++) {
          const { key, value } = properties[i];
          genExpressionAsPropertyKey(key, context);
          push(`: `);
          genNode(value, context);
          if (i < properties.length - 1) {
            push(`,`);
            newline();
          }
        }
        multilines && deindent();
        push(multilines ? `}` : ` }`);
      }
      function genArrayExpression(node, context) {
        genNodeListAsArray(node.elements, context);
      }
      function genFunctionExpression(node, context) {
        const { push, indent, deindent } = context;
        const { params, returns, body, newline, isSlot } = node;
        if (isSlot) {
          push(`_${helperNameMap[WITH_CTX]}(`);
        }
        push(`(`, node);
        if (shared.isArray(params)) {
          genNodeList(params, context);
        } else if (params) {
          genNode(params, context);
        }
        push(`) => `);
        if (newline || body) {
          push(`{`);
          indent();
        }
        if (returns) {
          if (newline) {
            push(`return `);
          }
          if (shared.isArray(returns)) {
            genNodeListAsArray(returns, context);
          } else {
            genNode(returns, context);
          }
        } else if (body) {
          genNode(body, context);
        }
        if (newline || body) {
          deindent();
          push(`}`);
        }
        if (isSlot) {
          if (node.isNonScopedSlot) {
            push(`, undefined, true`);
          }
          push(`)`);
        }
      }
      function genConditionalExpression(node, context) {
        const { test, consequent, alternate, newline: needNewline } = node;
        const { push, indent, deindent, newline } = context;
        if (test.type === 4) {
          const needsParens = !isSimpleIdentifier(test.content);
          needsParens && push(`(`);
          genExpression(test, context);
          needsParens && push(`)`);
        } else {
          push(`(`);
          genNode(test, context);
          push(`)`);
        }
        needNewline && indent();
        context.indentLevel++;
        needNewline || push(` `);
        push(`? `);
        genNode(consequent, context);
        context.indentLevel--;
        needNewline && newline();
        needNewline || push(` `);
        push(`: `);
        const isNested = alternate.type === 19;
        if (!isNested) {
          context.indentLevel++;
        }
        genNode(alternate, context);
        if (!isNested) {
          context.indentLevel--;
        }
        needNewline && deindent(
          true
          /* without newline */
        );
      }
      function genCacheExpression(node, context) {
        const { push, helper, indent, deindent, newline } = context;
        push(`_cache[${node.index}] || (`);
        if (node.isVNode) {
          indent();
          push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
          newline();
        }
        push(`_cache[${node.index}] = `);
        genNode(node.value, context);
        if (node.isVNode) {
          push(`,`);
          newline();
          push(`${helper(SET_BLOCK_TRACKING)}(1),`);
          newline();
          push(`_cache[${node.index}]`);
          deindent();
        }
        push(`)`);
      }
      function genTemplateLiteral(node, context) {
        const { push, indent, deindent } = context;
        push("`");
        const l = node.elements.length;
        const multilines = l > 3;
        for (let i = 0; i < l; i++) {
          const e = node.elements[i];
          if (shared.isString(e)) {
            push(e.replace(/(`|\$|\\)/g, "\\$1"));
          } else {
            push("${");
            if (multilines)
              indent();
            genNode(e, context);
            if (multilines)
              deindent();
            push("}");
          }
        }
        push("`");
      }
      function genIfStatement(node, context) {
        const { push, indent, deindent } = context;
        const { test, consequent, alternate } = node;
        push(`if (`);
        genNode(test, context);
        push(`) {`);
        indent();
        genNode(consequent, context);
        deindent();
        push(`}`);
        if (alternate) {
          push(` else `);
          if (alternate.type === 23) {
            genIfStatement(alternate, context);
          } else {
            push(`{`);
            indent();
            genNode(alternate, context);
            deindent();
            push(`}`);
          }
        }
      }
      function genAssignmentExpression(node, context) {
        genNode(node.left, context);
        context.push(` = `);
        genNode(node.right, context);
      }
      function genSequenceExpression(node, context) {
        context.push(`(`);
        genNodeList(node.expressions, context);
        context.push(`)`);
      }
      function genReturnStatement({ returns }, context) {
        context.push(`return `);
        if (shared.isArray(returns)) {
          genNodeListAsArray(returns, context);
        } else {
          genNode(returns, context);
        }
      }
      function walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds = /* @__PURE__ */ Object.create(null)) {
        const rootExp = root.type === "Program" && root.body[0].type === "ExpressionStatement" && root.body[0].expression;
        estreeWalker.walk(root, {
          enter(node, parent) {
            parent && parentStack.push(parent);
            if (parent && parent.type.startsWith("TS") && !TS_NODE_TYPES.includes(parent.type)) {
              return this.skip();
            }
            if (node.type === "Identifier") {
              const isLocal = !!knownIds[node.name];
              const isRefed = isReferencedIdentifier(node, parent, parentStack);
              if (includeAll || isRefed && !isLocal) {
                onIdentifier(node, parent, parentStack, isRefed, isLocal);
              }
            } else if (node.type === "ObjectProperty" && parent.type === "ObjectPattern") {
              node.inPattern = true;
            } else if (isFunctionType(node)) {
              walkFunctionParams(node, (id) => markScopeIdentifier(node, id, knownIds));
            } else if (node.type === "BlockStatement") {
              walkBlockDeclarations(
                node,
                (id) => markScopeIdentifier(node, id, knownIds)
              );
            }
          },
          leave(node, parent) {
            parent && parentStack.pop();
            if (node !== rootExp && node.scopeIds) {
              for (const id of node.scopeIds) {
                knownIds[id]--;
                if (knownIds[id] === 0) {
                  delete knownIds[id];
                }
              }
            }
          }
        });
      }
      function isReferencedIdentifier(id, parent, parentStack) {
        if (!parent) {
          return true;
        }
        if (id.name === "arguments") {
          return false;
        }
        if (isReferenced(id, parent)) {
          return true;
        }
        switch (parent.type) {
          case "AssignmentExpression":
          case "AssignmentPattern":
            return true;
          case "ObjectPattern":
          case "ArrayPattern":
            return isInDestructureAssignment(parent, parentStack);
        }
        return false;
      }
      function isInDestructureAssignment(parent, parentStack) {
        if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
          let i = parentStack.length;
          while (i--) {
            const p = parentStack[i];
            if (p.type === "AssignmentExpression") {
              return true;
            } else if (p.type !== "ObjectProperty" && !p.type.endsWith("Pattern")) {
              break;
            }
          }
        }
        return false;
      }
      function walkFunctionParams(node, onIdent) {
        for (const p of node.params) {
          for (const id of extractIdentifiers(p)) {
            onIdent(id);
          }
        }
      }
      function walkBlockDeclarations(block, onIdent) {
        for (const stmt of block.body) {
          if (stmt.type === "VariableDeclaration") {
            if (stmt.declare)
              continue;
            for (const decl of stmt.declarations) {
              for (const id of extractIdentifiers(decl.id)) {
                onIdent(id);
              }
            }
          } else if (stmt.type === "FunctionDeclaration" || stmt.type === "ClassDeclaration") {
            if (stmt.declare || !stmt.id)
              continue;
            onIdent(stmt.id);
          }
        }
      }
      function extractIdentifiers(param, nodes = []) {
        switch (param.type) {
          case "Identifier":
            nodes.push(param);
            break;
          case "MemberExpression":
            let object = param;
            while (object.type === "MemberExpression") {
              object = object.object;
            }
            nodes.push(object);
            break;
          case "ObjectPattern":
            for (const prop of param.properties) {
              if (prop.type === "RestElement") {
                extractIdentifiers(prop.argument, nodes);
              } else {
                extractIdentifiers(prop.value, nodes);
              }
            }
            break;
          case "ArrayPattern":
            param.elements.forEach((element) => {
              if (element)
                extractIdentifiers(element, nodes);
            });
            break;
          case "RestElement":
            extractIdentifiers(param.argument, nodes);
            break;
          case "AssignmentPattern":
            extractIdentifiers(param.left, nodes);
            break;
        }
        return nodes;
      }
      function markScopeIdentifier(node, child, knownIds) {
        const { name } = child;
        if (node.scopeIds && node.scopeIds.has(name)) {
          return;
        }
        if (name in knownIds) {
          knownIds[name]++;
        } else {
          knownIds[name] = 1;
        }
        (node.scopeIds || (node.scopeIds = /* @__PURE__ */ new Set())).add(name);
      }
      var isFunctionType = (node) => {
        return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
      };
      var isStaticProperty = (node) => node && (node.type === "ObjectProperty" || node.type === "ObjectMethod") && !node.computed;
      var isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;
      function isReferenced(node, parent, grandparent) {
        switch (parent.type) {
          case "MemberExpression":
          case "OptionalMemberExpression":
            if (parent.property === node) {
              return !!parent.computed;
            }
            return parent.object === node;
          case "JSXMemberExpression":
            return parent.object === node;
          case "VariableDeclarator":
            return parent.init === node;
          case "ArrowFunctionExpression":
            return parent.body === node;
          case "PrivateName":
            return false;
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "ObjectMethod":
            if (parent.key === node) {
              return !!parent.computed;
            }
            return false;
          case "ObjectProperty":
            if (parent.key === node) {
              return !!parent.computed;
            }
            return !grandparent || grandparent.type !== "ObjectPattern";
          case "ClassProperty":
            if (parent.key === node) {
              return !!parent.computed;
            }
            return true;
          case "ClassPrivateProperty":
            return parent.key !== node;
          case "ClassDeclaration":
          case "ClassExpression":
            return parent.superClass === node;
          case "AssignmentExpression":
            return parent.right === node;
          case "AssignmentPattern":
            return parent.right === node;
          case "LabeledStatement":
            return false;
          case "CatchClause":
            return false;
          case "RestElement":
            return false;
          case "BreakStatement":
          case "ContinueStatement":
            return false;
          case "FunctionDeclaration":
          case "FunctionExpression":
            return false;
          case "ExportNamespaceSpecifier":
          case "ExportDefaultSpecifier":
            return false;
          case "ExportSpecifier":
            if (grandparent == null ? void 0 : grandparent.source) {
              return false;
            }
            return parent.local === node;
          case "ImportDefaultSpecifier":
          case "ImportNamespaceSpecifier":
          case "ImportSpecifier":
            return false;
          case "ImportAttribute":
            return false;
          case "JSXAttribute":
            return false;
          case "ObjectPattern":
          case "ArrayPattern":
            return false;
          case "MetaProperty":
            return false;
          case "ObjectTypeProperty":
            return parent.key !== node;
          case "TSEnumMember":
            return parent.id !== node;
          case "TSPropertySignature":
            if (parent.key === node) {
              return !!parent.computed;
            }
            return true;
        }
        return true;
      }
      var TS_NODE_TYPES = [
        "TSAsExpression",
        // foo as number
        "TSTypeAssertion",
        // (<number>foo)
        "TSNonNullExpression",
        // foo!
        "TSInstantiationExpression",
        // foo<string>
        "TSSatisfiesExpression"
        // foo satisfies T
      ];
      var isLiteralWhitelisted = /* @__PURE__ */ shared.makeMap("true,false,null,this");
      var constantBailRE = /\w\s*\(|\.[^\d]/;
      var transformExpression = (node, context) => {
        if (node.type === 5) {
          node.content = processExpression(
            node.content,
            context
          );
        } else if (node.type === 1) {
          for (let i = 0; i < node.props.length; i++) {
            const dir = node.props[i];
            if (dir.type === 7 && dir.name !== "for") {
              const exp = dir.exp;
              const arg = dir.arg;
              if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
                dir.exp = processExpression(
                  exp,
                  context,
                  // slot args must be processed as function params
                  dir.name === "slot"
                );
              }
              if (arg && arg.type === 4 && !arg.isStatic) {
                dir.arg = processExpression(arg, context);
              }
            }
          }
        }
      };
      function processExpression(node, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
        if (!context.prefixIdentifiers || !node.content.trim()) {
          return node;
        }
        const { inline, bindingMetadata } = context;
        const rewriteIdentifier = (raw, parent, id) => {
          const type = shared.hasOwn(bindingMetadata, raw) && bindingMetadata[raw];
          if (inline) {
            const isAssignmentLVal = parent && parent.type === "AssignmentExpression" && parent.left === id;
            const isUpdateArg = parent && parent.type === "UpdateExpression" && parent.argument === id;
            const isDestructureAssignment = parent && isInDestructureAssignment(parent, parentStack);
            if (isConst(type) || type === "setup-reactive-const" || localVars[raw]) {
              return raw;
            } else if (type === "setup-ref") {
              return `${raw}.value`;
            } else if (type === "setup-maybe-ref") {
              return isAssignmentLVal || isUpdateArg || isDestructureAssignment ? `${raw}.value` : `${context.helperString(UNREF)}(${raw})`;
            } else if (type === "setup-let") {
              if (isAssignmentLVal) {
                const { right: rVal, operator } = parent;
                const rExp = rawExp.slice(rVal.start - 1, rVal.end - 1);
                const rExpString = stringifyExpression(
                  processExpression(
                    createSimpleExpression(rExp, false),
                    context,
                    false,
                    false,
                    knownIds
                  )
                );
                return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${raw}.value ${operator} ${rExpString} : ${raw}`;
              } else if (isUpdateArg) {
                id.start = parent.start;
                id.end = parent.end;
                const { prefix: isPrefix, operator } = parent;
                const prefix = isPrefix ? operator : ``;
                const postfix = isPrefix ? `` : operator;
                return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore
` : ``} ? ${prefix}${raw}.value${postfix} : ${prefix}${raw}${postfix}`;
              } else if (isDestructureAssignment) {
                return raw;
              } else {
                return `${context.helperString(UNREF)}(${raw})`;
              }
            } else if (type === "props") {
              return shared.genPropsAccessExp(raw);
            } else if (type === "props-aliased") {
              return shared.genPropsAccessExp(bindingMetadata.__propsAliases[raw]);
            }
          } else {
            if (type && type.startsWith("setup") || type === "literal-const") {
              return `$setup.${raw}`;
            } else if (type === "props-aliased") {
              return `$props['${bindingMetadata.__propsAliases[raw]}']`;
            } else if (type) {
              return `$${type}.${raw}`;
            }
          }
          return `_ctx.${raw}`;
        };
        const rawExp = node.content;
        const bailConstant = constantBailRE.test(rawExp);
        if (isSimpleIdentifier(rawExp)) {
          const isScopeVarReference = context.identifiers[rawExp];
          const isAllowedGlobal = shared.isGloballyWhitelisted(rawExp);
          const isLiteral = isLiteralWhitelisted(rawExp);
          if (!asParams && !isScopeVarReference && !isAllowedGlobal && !isLiteral) {
            if (isConst(bindingMetadata[node.content])) {
              node.constType = 1;
            }
            node.content = rewriteIdentifier(rawExp);
          } else if (!isScopeVarReference) {
            if (isLiteral) {
              node.constType = 3;
            } else {
              node.constType = 2;
            }
          }
          return node;
        }
        let ast;
        const source = asRawStatements ? ` ${rawExp} ` : `(${rawExp})${asParams ? `=>{}` : ``}`;
        try {
          ast = parser.parse(source, {
            plugins: context.expressionPlugins
          }).program;
        } catch (e) {
          context.onError(
            createCompilerError(
              45,
              node.loc,
              void 0,
              e.message
            )
          );
          return node;
        }
        const ids = [];
        const parentStack = [];
        const knownIds = Object.create(context.identifiers);
        walkIdentifiers(
          ast,
          (node2, parent, _, isReferenced2, isLocal) => {
            if (isStaticPropertyKey(node2, parent)) {
              return;
            }
            if (node2.name.startsWith("_filter_")) {
              return;
            }
            const needPrefix = isReferenced2 && canPrefix(node2);
            if (needPrefix && !isLocal) {
              if (isStaticProperty(parent) && parent.shorthand) {
                node2.prefix = `${node2.name}: `;
              }
              node2.name = rewriteIdentifier(node2.name, parent, node2);
              ids.push(node2);
            } else {
              if (!(needPrefix && isLocal) && !bailConstant) {
                node2.isConstant = true;
              }
              ids.push(node2);
            }
          },
          true,
          // invoke on ALL identifiers
          parentStack,
          knownIds
        );
        const children = [];
        ids.sort((a, b) => a.start - b.start);
        ids.forEach((id, i) => {
          const start = id.start - 1;
          const end = id.end - 1;
          const last2 = ids[i - 1];
          const leadingText = rawExp.slice(last2 ? last2.end - 1 : 0, start);
          if (leadingText.length || id.prefix) {
            children.push(leadingText + (id.prefix || ``));
          }
          const source2 = rawExp.slice(start, end);
          children.push(
            createSimpleExpression(
              id.name,
              false,
              {
                source: source2,
                start: advancePositionWithClone(node.loc.start, source2, start),
                end: advancePositionWithClone(node.loc.start, source2, end)
              },
              id.isConstant ? 3 : 0
            )
          );
          if (i === ids.length - 1 && end < rawExp.length) {
            children.push(rawExp.slice(end));
          }
        });
        let ret;
        if (children.length) {
          ret = createCompoundExpression(children, node.loc);
        } else {
          ret = node;
          ret.constType = bailConstant ? 0 : 3;
        }
        ret.identifiers = Object.keys(knownIds);
        return ret;
      }
      function canPrefix(id) {
        if (shared.isGloballyWhitelisted(id.name)) {
          return false;
        }
        if (id.name === "require") {
          return false;
        }
        return true;
      }
      function stringifyExpression(exp) {
        if (shared.isString(exp)) {
          return exp;
        } else if (exp.type === 4) {
          return exp.content;
        } else {
          return exp.children.map(stringifyExpression).join("");
        }
      }
      function isConst(type) {
        return type === "setup-const" || type === "literal-const";
      }
      var transformIf = createStructuralDirectiveTransform(
        /^(if|else|else-if)$/,
        (node, dir, context) => {
          return processIf(node, dir, context, (ifNode, branch, isRoot) => {
            const siblings = context.parent.children;
            let i = siblings.indexOf(ifNode);
            let key = 0;
            while (i-- >= 0) {
              const sibling = siblings[i];
              if (sibling && sibling.type === 9) {
                key += sibling.branches.length;
              }
            }
            return () => {
              if (isRoot) {
                ifNode.codegenNode = createCodegenNodeForBranch(
                  branch,
                  key,
                  context
                );
              } else {
                const parentCondition = getParentCondition(ifNode.codegenNode);
                parentCondition.alternate = createCodegenNodeForBranch(
                  branch,
                  key + ifNode.branches.length - 1,
                  context
                );
              }
            };
          });
        }
      );
      function processIf(node, dir, context, processCodegen) {
        if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
          const loc = dir.exp ? dir.exp.loc : node.loc;
          context.onError(
            createCompilerError(28, dir.loc)
          );
          dir.exp = createSimpleExpression(`true`, false, loc);
        }
        if (context.prefixIdentifiers && dir.exp) {
          dir.exp = processExpression(dir.exp, context);
        }
        if (dir.name === "if") {
          const branch = createIfBranch(node, dir);
          const ifNode = {
            type: 9,
            loc: node.loc,
            branches: [branch]
          };
          context.replaceNode(ifNode);
          if (processCodegen) {
            return processCodegen(ifNode, branch, true);
          }
        } else {
          const siblings = context.parent.children;
          const comments = [];
          let i = siblings.indexOf(node);
          while (i-- >= -1) {
            const sibling = siblings[i];
            if (sibling && sibling.type === 3) {
              context.removeNode(sibling);
              comments.unshift(sibling);
              continue;
            }
            if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
              context.removeNode(sibling);
              continue;
            }
            if (sibling && sibling.type === 9) {
              if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
                context.onError(
                  createCompilerError(30, node.loc)
                );
              }
              context.removeNode();
              const branch = createIfBranch(node, dir);
              if (comments.length && // #3619 ignore comments if the v-if is direct child of <transition>
              !(context.parent && context.parent.type === 1 && isBuiltInType(context.parent.tag, "transition"))) {
                branch.children = [...comments, ...branch.children];
              }
              {
                const key = branch.userKey;
                if (key) {
                  sibling.branches.forEach(({ userKey }) => {
                    if (isSameKey(userKey, key)) {
                      context.onError(
                        createCompilerError(
                          29,
                          branch.userKey.loc
                        )
                      );
                    }
                  });
                }
              }
              sibling.branches.push(branch);
              const onExit = processCodegen && processCodegen(sibling, branch, false);
              traverseNode(branch, context);
              if (onExit)
                onExit();
              context.currentNode = null;
            } else {
              context.onError(
                createCompilerError(30, node.loc)
              );
            }
            break;
          }
        }
      }
      function createIfBranch(node, dir) {
        const isTemplateIf = node.tagType === 3;
        return {
          type: 10,
          loc: node.loc,
          condition: dir.name === "else" ? void 0 : dir.exp,
          children: isTemplateIf && !findDir(node, "for") ? node.children : [node],
          userKey: findProp(node, `key`),
          isTemplateIf
        };
      }
      function createCodegenNodeForBranch(branch, keyIndex, context) {
        if (branch.condition) {
          return createConditionalExpression(
            branch.condition,
            createChildrenCodegenNode(branch, keyIndex, context),
            // make sure to pass in asBlock: true so that the comment node call
            // closes the current block.
            createCallExpression(context.helper(CREATE_COMMENT), [
              '"v-if"',
              "true"
            ])
          );
        } else {
          return createChildrenCodegenNode(branch, keyIndex, context);
        }
      }
      function createChildrenCodegenNode(branch, keyIndex, context) {
        const { helper } = context;
        const keyProperty = createObjectProperty(
          `key`,
          createSimpleExpression(
            `${keyIndex}`,
            false,
            locStub,
            2
          )
        );
        const { children } = branch;
        const firstChild = children[0];
        const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
        if (needFragmentWrapper) {
          if (children.length === 1 && firstChild.type === 11) {
            const vnodeCall = firstChild.codegenNode;
            injectProp(vnodeCall, keyProperty, context);
            return vnodeCall;
          } else {
            let patchFlag = 64;
            let patchFlagText = shared.PatchFlagNames[64];
            if (!branch.isTemplateIf && children.filter((c) => c.type !== 3).length === 1) {
              patchFlag |= 2048;
              patchFlagText += `, ${shared.PatchFlagNames[2048]}`;
            }
            return createVNodeCall(
              context,
              helper(FRAGMENT),
              createObjectExpression([keyProperty]),
              children,
              patchFlag + ` /* ${patchFlagText} */`,
              void 0,
              void 0,
              true,
              false,
              false,
              branch.loc
            );
          }
        } else {
          const ret = firstChild.codegenNode;
          const vnodeCall = getMemoedVNodeCall(ret);
          if (vnodeCall.type === 13) {
            convertToBlock(vnodeCall, context);
          }
          injectProp(vnodeCall, keyProperty, context);
          return ret;
        }
      }
      function isSameKey(a, b) {
        if (!a || a.type !== b.type) {
          return false;
        }
        if (a.type === 6) {
          if (a.value.content !== b.value.content) {
            return false;
          }
        } else {
          const exp = a.exp;
          const branchExp = b.exp;
          if (exp.type !== branchExp.type) {
            return false;
          }
          if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
            return false;
          }
        }
        return true;
      }
      function getParentCondition(node) {
        while (true) {
          if (node.type === 19) {
            if (node.alternate.type === 19) {
              node = node.alternate;
            } else {
              return node;
            }
          } else if (node.type === 20) {
            node = node.value;
          }
        }
      }
      var transformFor = createStructuralDirectiveTransform(
        "for",
        (node, dir, context) => {
          const { helper, removeHelper } = context;
          return processFor(node, dir, context, (forNode) => {
            const renderExp = createCallExpression(helper(RENDER_LIST), [
              forNode.source
            ]);
            const isTemplate = isTemplateNode(node);
            const memo = findDir(node, "memo");
            const keyProp = findProp(node, `key`);
            const keyExp = keyProp && (keyProp.type === 6 ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp);
            const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;
            if (isTemplate) {
              if (memo) {
                memo.exp = processExpression(
                  memo.exp,
                  context
                );
              }
              if (keyProperty && keyProp.type !== 6) {
                keyProperty.value = processExpression(
                  keyProperty.value,
                  context
                );
              }
            }
            const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
            const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
            forNode.codegenNode = createVNodeCall(
              context,
              helper(FRAGMENT),
              void 0,
              renderExp,
              fragmentFlag + ` /* ${shared.PatchFlagNames[fragmentFlag]} */`,
              void 0,
              void 0,
              true,
              !isStableFragment,
              false,
              node.loc
            );
            return () => {
              let childBlock;
              const { children } = forNode;
              if (isTemplate) {
                node.children.some((c) => {
                  if (c.type === 1) {
                    const key = findProp(c, "key");
                    if (key) {
                      context.onError(
                        createCompilerError(
                          33,
                          key.loc
                        )
                      );
                      return true;
                    }
                  }
                });
              }
              const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
              const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
              if (slotOutlet) {
                childBlock = slotOutlet.codegenNode;
                if (isTemplate && keyProperty) {
                  injectProp(childBlock, keyProperty, context);
                }
              } else if (needFragmentWrapper) {
                childBlock = createVNodeCall(
                  context,
                  helper(FRAGMENT),
                  keyProperty ? createObjectExpression([keyProperty]) : void 0,
                  node.children,
                  `64 /* ${shared.PatchFlagNames[64]} */`,
                  void 0,
                  void 0,
                  true,
                  void 0,
                  false
                  /* isComponent */
                );
              } else {
                childBlock = children[0].codegenNode;
                if (isTemplate && keyProperty) {
                  injectProp(childBlock, keyProperty, context);
                }
                if (childBlock.isBlock !== !isStableFragment) {
                  if (childBlock.isBlock) {
                    removeHelper(OPEN_BLOCK);
                    removeHelper(
                      getVNodeBlockHelper(context.inSSR, childBlock.isComponent)
                    );
                  } else {
                    removeHelper(
                      getVNodeHelper(context.inSSR, childBlock.isComponent)
                    );
                  }
                }
                childBlock.isBlock = !isStableFragment;
                if (childBlock.isBlock) {
                  helper(OPEN_BLOCK);
                  helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
                } else {
                  helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
                }
              }
              if (memo) {
                const loop = createFunctionExpression(
                  createForLoopParams(forNode.parseResult, [
                    createSimpleExpression(`_cached`)
                  ])
                );
                loop.body = createBlockStatement([
                  createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
                  createCompoundExpression([
                    `if (_cached`,
                    ...keyExp ? [` && _cached.key === `, keyExp] : [],
                    ` && ${context.helperString(
                      IS_MEMO_SAME
                    )}(_cached, _memo)) return _cached`
                  ]),
                  createCompoundExpression([`const _item = `, childBlock]),
                  createSimpleExpression(`_item.memo = _memo`),
                  createSimpleExpression(`return _item`)
                ]);
                renderExp.arguments.push(
                  loop,
                  createSimpleExpression(`_cache`),
                  createSimpleExpression(String(context.cached++))
                );
              } else {
                renderExp.arguments.push(
                  createFunctionExpression(
                    createForLoopParams(forNode.parseResult),
                    childBlock,
                    true
                    /* force newline */
                  )
                );
              }
            };
          });
        }
      );
      function processFor(node, dir, context, processCodegen) {
        if (!dir.exp) {
          context.onError(
            createCompilerError(31, dir.loc)
          );
          return;
        }
        const parseResult = parseForExpression(
          // can only be simple expression because vFor transform is applied
          // before expression transform.
          dir.exp,
          context
        );
        if (!parseResult) {
          context.onError(
            createCompilerError(32, dir.loc)
          );
          return;
        }
        const { addIdentifiers, removeIdentifiers, scopes } = context;
        const { source, value, key, index } = parseResult;
        const forNode = {
          type: 11,
          loc: dir.loc,
          source,
          valueAlias: value,
          keyAlias: key,
          objectIndexAlias: index,
          parseResult,
          children: isTemplateNode(node) ? node.children : [node]
        };
        context.replaceNode(forNode);
        scopes.vFor++;
        if (context.prefixIdentifiers) {
          value && addIdentifiers(value);
          key && addIdentifiers(key);
          index && addIdentifiers(index);
        }
        const onExit = processCodegen && processCodegen(forNode);
        return () => {
          scopes.vFor--;
          if (context.prefixIdentifiers) {
            value && removeIdentifiers(value);
            key && removeIdentifiers(key);
            index && removeIdentifiers(index);
          }
          if (onExit)
            onExit();
        };
      }
      var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
      var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
      var stripParensRE = /^\(|\)$/g;
      function parseForExpression(input, context) {
        const loc = input.loc;
        const exp = input.content;
        const inMatch = exp.match(forAliasRE);
        if (!inMatch)
          return;
        const [, LHS, RHS] = inMatch;
        const result = {
          source: createAliasExpression(
            loc,
            RHS.trim(),
            exp.indexOf(RHS, LHS.length)
          ),
          value: void 0,
          key: void 0,
          index: void 0
        };
        if (context.prefixIdentifiers) {
          result.source = processExpression(
            result.source,
            context
          );
        }
        let valueContent = LHS.trim().replace(stripParensRE, "").trim();
        const trimmedOffset = LHS.indexOf(valueContent);
        const iteratorMatch = valueContent.match(forIteratorRE);
        if (iteratorMatch) {
          valueContent = valueContent.replace(forIteratorRE, "").trim();
          const keyContent = iteratorMatch[1].trim();
          let keyOffset;
          if (keyContent) {
            keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
            result.key = createAliasExpression(loc, keyContent, keyOffset);
            if (context.prefixIdentifiers) {
              result.key = processExpression(result.key, context, true);
            }
          }
          if (iteratorMatch[2]) {
            const indexContent = iteratorMatch[2].trim();
            if (indexContent) {
              result.index = createAliasExpression(
                loc,
                indexContent,
                exp.indexOf(
                  indexContent,
                  result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length
                )
              );
              if (context.prefixIdentifiers) {
                result.index = processExpression(result.index, context, true);
              }
            }
          }
        }
        if (valueContent) {
          result.value = createAliasExpression(loc, valueContent, trimmedOffset);
          if (context.prefixIdentifiers) {
            result.value = processExpression(result.value, context, true);
          }
        }
        return result;
      }
      function createAliasExpression(range, content, offset) {
        return createSimpleExpression(
          content,
          false,
          getInnerRange(range, offset, content.length)
        );
      }
      function createForLoopParams({ value, key, index }, memoArgs = []) {
        return createParamsList([value, key, index, ...memoArgs]);
      }
      function createParamsList(args) {
        let i = args.length;
        while (i--) {
          if (args[i])
            break;
        }
        return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));
      }
      var defaultFallback = createSimpleExpression(`undefined`, false);
      var trackSlotScopes = (node, context) => {
        if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
          const vSlot = findDir(node, "slot");
          if (vSlot) {
            const slotProps = vSlot.exp;
            if (context.prefixIdentifiers) {
              slotProps && context.addIdentifiers(slotProps);
            }
            context.scopes.vSlot++;
            return () => {
              if (context.prefixIdentifiers) {
                slotProps && context.removeIdentifiers(slotProps);
              }
              context.scopes.vSlot--;
            };
          }
        }
      };
      var trackVForSlotScopes = (node, context) => {
        let vFor;
        if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, "for"))) {
          const result = vFor.parseResult = parseForExpression(
            vFor.exp,
            context
          );
          if (result) {
            const { value, key, index } = result;
            const { addIdentifiers, removeIdentifiers } = context;
            value && addIdentifiers(value);
            key && addIdentifiers(key);
            index && addIdentifiers(index);
            return () => {
              value && removeIdentifiers(value);
              key && removeIdentifiers(key);
              index && removeIdentifiers(index);
            };
          }
        }
      };
      var buildClientSlotFn = (props, children, loc) => createFunctionExpression(
        props,
        children,
        false,
        true,
        children.length ? children[0].loc : loc
      );
      function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
        context.helper(WITH_CTX);
        const { children, loc } = node;
        const slotsProperties = [];
        const dynamicSlots = [];
        let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
        if (!context.ssr && context.prefixIdentifiers) {
          hasDynamicSlots = hasScopeRef(node, context.identifiers);
        }
        const onComponentSlot = findDir(node, "slot", true);
        if (onComponentSlot) {
          const { arg, exp } = onComponentSlot;
          if (arg && !isStaticExp(arg)) {
            hasDynamicSlots = true;
          }
          slotsProperties.push(
            createObjectProperty(
              arg || createSimpleExpression("default", true),
              buildSlotFn(exp, children, loc)
            )
          );
        }
        let hasTemplateSlots = false;
        let hasNamedDefaultSlot = false;
        const implicitDefaultChildren = [];
        const seenSlotNames = /* @__PURE__ */ new Set();
        let conditionalBranchIndex = 0;
        for (let i = 0; i < children.length; i++) {
          const slotElement = children[i];
          let slotDir;
          if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
            if (slotElement.type !== 3) {
              implicitDefaultChildren.push(slotElement);
            }
            continue;
          }
          if (onComponentSlot) {
            context.onError(
              createCompilerError(37, slotDir.loc)
            );
            break;
          }
          hasTemplateSlots = true;
          const { children: slotChildren, loc: slotLoc } = slotElement;
          const {
            arg: slotName = createSimpleExpression(`default`, true),
            exp: slotProps,
            loc: dirLoc
          } = slotDir;
          let staticSlotName;
          if (isStaticExp(slotName)) {
            staticSlotName = slotName ? slotName.content : `default`;
          } else {
            hasDynamicSlots = true;
          }
          const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
          let vIf;
          let vElse;
          let vFor;
          if (vIf = findDir(slotElement, "if")) {
            hasDynamicSlots = true;
            dynamicSlots.push(
              createConditionalExpression(
                vIf.exp,
                buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++),
                defaultFallback
              )
            );
          } else if (vElse = findDir(
            slotElement,
            /^else(-if)?$/,
            true
            /* allowEmpty */
          )) {
            let j = i;
            let prev;
            while (j--) {
              prev = children[j];
              if (prev.type !== 3) {
                break;
              }
            }
            if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
              children.splice(i, 1);
              i--;
              let conditional = dynamicSlots[dynamicSlots.length - 1];
              while (conditional.alternate.type === 19) {
                conditional = conditional.alternate;
              }
              conditional.alternate = vElse.exp ? createConditionalExpression(
                vElse.exp,
                buildDynamicSlot(
                  slotName,
                  slotFunction,
                  conditionalBranchIndex++
                ),
                defaultFallback
              ) : buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++);
            } else {
              context.onError(
                createCompilerError(30, vElse.loc)
              );
            }
          } else if (vFor = findDir(slotElement, "for")) {
            hasDynamicSlots = true;
            const parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);
            if (parseResult) {
              dynamicSlots.push(
                createCallExpression(context.helper(RENDER_LIST), [
                  parseResult.source,
                  createFunctionExpression(
                    createForLoopParams(parseResult),
                    buildDynamicSlot(slotName, slotFunction),
                    true
                    /* force newline */
                  )
                ])
              );
            } else {
              context.onError(
                createCompilerError(32, vFor.loc)
              );
            }
          } else {
            if (staticSlotName) {
              if (seenSlotNames.has(staticSlotName)) {
                context.onError(
                  createCompilerError(
                    38,
                    dirLoc
                  )
                );
                continue;
              }
              seenSlotNames.add(staticSlotName);
              if (staticSlotName === "default") {
                hasNamedDefaultSlot = true;
              }
            }
            slotsProperties.push(createObjectProperty(slotName, slotFunction));
          }
        }
        if (!onComponentSlot) {
          const buildDefaultSlotProperty = (props, children2) => {
            const fn = buildSlotFn(props, children2, loc);
            if (context.compatConfig) {
              fn.isNonScopedSlot = true;
            }
            return createObjectProperty(`default`, fn);
          };
          if (!hasTemplateSlots) {
            slotsProperties.push(buildDefaultSlotProperty(void 0, children));
          } else if (implicitDefaultChildren.length && // #3766
          // with whitespace: 'preserve', whitespaces between slots will end up in
          // implicitDefaultChildren. Ignore if all implicit children are whitespaces.
          implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {
            if (hasNamedDefaultSlot) {
              context.onError(
                createCompilerError(
                  39,
                  implicitDefaultChildren[0].loc
                )
              );
            } else {
              slotsProperties.push(
                buildDefaultSlotProperty(void 0, implicitDefaultChildren)
              );
            }
          }
        }
        const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;
        let slots = createObjectExpression(
          slotsProperties.concat(
            createObjectProperty(
              `_`,
              // 2 = compiled but dynamic = can skip normalization, but must run diff
              // 1 = compiled and static = can skip normalization AND diff as optimized
              createSimpleExpression(
                slotFlag + ` /* ${shared.slotFlagsText[slotFlag]} */`,
                false
              )
            )
          ),
          loc
        );
        if (dynamicSlots.length) {
          slots = createCallExpression(context.helper(CREATE_SLOTS), [
            slots,
            createArrayExpression(dynamicSlots)
          ]);
        }
        return {
          slots,
          hasDynamicSlots
        };
      }
      function buildDynamicSlot(name, fn, index) {
        const props = [
          createObjectProperty(`name`, name),
          createObjectProperty(`fn`, fn)
        ];
        if (index != null) {
          props.push(
            createObjectProperty(`key`, createSimpleExpression(String(index), true))
          );
        }
        return createObjectExpression(props);
      }
      function hasForwardedSlots(children) {
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          switch (child.type) {
            case 1:
              if (child.tagType === 2 || hasForwardedSlots(child.children)) {
                return true;
              }
              break;
            case 9:
              if (hasForwardedSlots(child.branches))
                return true;
              break;
            case 10:
            case 11:
              if (hasForwardedSlots(child.children))
                return true;
              break;
          }
        }
        return false;
      }
      function isNonWhitespaceContent(node) {
        if (node.type !== 2 && node.type !== 12)
          return true;
        return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);
      }
      var directiveImportMap = /* @__PURE__ */ new WeakMap();
      var transformElement = (node, context) => {
        return function postTransformElement() {
          node = context.currentNode;
          if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {
            return;
          }
          const { tag, props } = node;
          const isComponent2 = node.tagType === 1;
          let vnodeTag = isComponent2 ? resolveComponentType(node, context) : `"${tag}"`;
          const isDynamicComponent = shared.isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
          let vnodeProps;
          let vnodeChildren;
          let vnodePatchFlag;
          let patchFlag = 0;
          let vnodeDynamicProps;
          let dynamicPropNames;
          let vnodeDirectives;
          let shouldUseBlock = (
            // dynamic component may resolve to plain elements
            isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent2 && // <svg> and <foreignObject> must be forced into blocks so that block
            // updates inside get proper isSVG flag at runtime. (#639, #643)
            // This is technically web-specific, but splitting the logic out of core
            // leads to too much unnecessary complexity.
            (tag === "svg" || tag === "foreignObject")
          );
          if (props.length > 0) {
            const propsBuildResult = buildProps(
              node,
              context,
              void 0,
              isComponent2,
              isDynamicComponent
            );
            vnodeProps = propsBuildResult.props;
            patchFlag = propsBuildResult.patchFlag;
            dynamicPropNames = propsBuildResult.dynamicPropNames;
            const directives = propsBuildResult.directives;
            vnodeDirectives = directives && directives.length ? createArrayExpression(
              directives.map((dir) => buildDirectiveArgs(dir, context))
            ) : void 0;
            if (propsBuildResult.shouldUseBlock) {
              shouldUseBlock = true;
            }
          }
          if (node.children.length > 0) {
            if (vnodeTag === KEEP_ALIVE) {
              shouldUseBlock = true;
              patchFlag |= 1024;
              if (node.children.length > 1) {
                context.onError(
                  createCompilerError(46, {
                    start: node.children[0].loc.start,
                    end: node.children[node.children.length - 1].loc.end,
                    source: ""
                  })
                );
              }
            }
            const shouldBuildAsSlots = isComponent2 && // Teleport is not a real component and has dedicated runtime handling
            vnodeTag !== TELEPORT && // explained above.
            vnodeTag !== KEEP_ALIVE;
            if (shouldBuildAsSlots) {
              const { slots, hasDynamicSlots } = buildSlots(node, context);
              vnodeChildren = slots;
              if (hasDynamicSlots) {
                patchFlag |= 1024;
              }
            } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
              const child = node.children[0];
              const type = child.type;
              const hasDynamicTextChild = type === 5 || type === 8;
              if (hasDynamicTextChild && getConstantType(child, context) === 0) {
                patchFlag |= 1;
              }
              if (hasDynamicTextChild || type === 2) {
                vnodeChildren = child;
              } else {
                vnodeChildren = node.children;
              }
            } else {
              vnodeChildren = node.children;
            }
          }
          if (patchFlag !== 0) {
            {
              if (patchFlag < 0) {
                vnodePatchFlag = patchFlag + ` /* ${shared.PatchFlagNames[patchFlag]} */`;
              } else {
                const flagNames = Object.keys(shared.PatchFlagNames).map(Number).filter((n) => n > 0 && patchFlag & n).map((n) => shared.PatchFlagNames[n]).join(`, `);
                vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
              }
            }
            if (dynamicPropNames && dynamicPropNames.length) {
              vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
            }
          }
          node.codegenNode = createVNodeCall(
            context,
            vnodeTag,
            vnodeProps,
            vnodeChildren,
            vnodePatchFlag,
            vnodeDynamicProps,
            vnodeDirectives,
            !!shouldUseBlock,
            false,
            isComponent2,
            node.loc
          );
        };
      };
      function resolveComponentType(node, context, ssr = false) {
        let { tag } = node;
        const isExplicitDynamic = isComponentTag(tag);
        const isProp = findProp(node, "is");
        if (isProp) {
          if (isExplicitDynamic || isCompatEnabled(
            "COMPILER_IS_ON_ELEMENT",
            context
          )) {
            const exp = isProp.type === 6 ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
            if (exp) {
              return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
                exp
              ]);
            }
          } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
            tag = isProp.value.content.slice(4);
          }
        }
        const isDir = !isExplicitDynamic && findDir(node, "is");
        if (isDir && isDir.exp) {
          {
            context.onWarn(
              createCompilerError(52, isDir.loc)
            );
          }
          return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
            isDir.exp
          ]);
        }
        const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
        if (builtIn) {
          if (!ssr)
            context.helper(builtIn);
          return builtIn;
        }
        {
          const fromSetup = resolveSetupReference(tag, context);
          if (fromSetup) {
            return fromSetup;
          }
          const dotIndex = tag.indexOf(".");
          if (dotIndex > 0) {
            const ns = resolveSetupReference(tag.slice(0, dotIndex), context);
            if (ns) {
              return ns + tag.slice(dotIndex);
            }
          }
        }
        if (context.selfName && shared.capitalize(shared.camelize(tag)) === context.selfName) {
          context.helper(RESOLVE_COMPONENT);
          context.components.add(tag + `__self`);
          return toValidAssetId(tag, `component`);
        }
        context.helper(RESOLVE_COMPONENT);
        context.components.add(tag);
        return toValidAssetId(tag, `component`);
      }
      function resolveSetupReference(name, context) {
        const bindings = context.bindingMetadata;
        if (!bindings || bindings.__isScriptSetup === false) {
          return;
        }
        const camelName = shared.camelize(name);
        const PascalName = shared.capitalize(camelName);
        const checkType = (type) => {
          if (bindings[name] === type) {
            return name;
          }
          if (bindings[camelName] === type) {
            return camelName;
          }
          if (bindings[PascalName] === type) {
            return PascalName;
          }
        };
        const fromConst = checkType("setup-const") || checkType("setup-reactive-const") || checkType("literal-const");
        if (fromConst) {
          return context.inline ? (
            // in inline mode, const setup bindings (e.g. imports) can be used as-is
            fromConst
          ) : `$setup[${JSON.stringify(fromConst)}]`;
        }
        const fromMaybeRef = checkType("setup-let") || checkType("setup-ref") || checkType("setup-maybe-ref");
        if (fromMaybeRef) {
          return context.inline ? (
            // setup scope bindings that may be refs need to be unrefed
            `${context.helperString(UNREF)}(${fromMaybeRef})`
          ) : `$setup[${JSON.stringify(fromMaybeRef)}]`;
        }
      }
      function buildProps(node, context, props = node.props, isComponent2, isDynamicComponent, ssr = false) {
        const { tag, loc: elementLoc, children } = node;
        let properties = [];
        const mergeArgs = [];
        const runtimeDirectives = [];
        const hasChildren = children.length > 0;
        let shouldUseBlock = false;
        let patchFlag = 0;
        let hasRef = false;
        let hasClassBinding = false;
        let hasStyleBinding = false;
        let hasHydrationEventBinding = false;
        let hasDynamicKeys = false;
        let hasVnodeHook = false;
        const dynamicPropNames = [];
        const pushMergeArg = (arg) => {
          if (properties.length) {
            mergeArgs.push(
              createObjectExpression(dedupeProperties(properties), elementLoc)
            );
            properties = [];
          }
          if (arg)
            mergeArgs.push(arg);
        };
        const analyzePatchFlag = ({ key, value }) => {
          if (isStaticExp(key)) {
            const name = key.content;
            const isEventHandler = shared.isOn(name);
            if (isEventHandler && (!isComponent2 || isDynamicComponent) && // omit the flag for click handlers because hydration gives click
            // dedicated fast path.
            name.toLowerCase() !== "onclick" && // omit v-model handlers
            name !== "onUpdate:modelValue" && // omit onVnodeXXX hooks
            !shared.isReservedProp(name)) {
              hasHydrationEventBinding = true;
            }
            if (isEventHandler && shared.isReservedProp(name)) {
              hasVnodeHook = true;
            }
            if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {
              return;
            }
            if (name === "ref") {
              hasRef = true;
            } else if (name === "class") {
              hasClassBinding = true;
            } else if (name === "style") {
              hasStyleBinding = true;
            } else if (name !== "key" && !dynamicPropNames.includes(name)) {
              dynamicPropNames.push(name);
            }
            if (isComponent2 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
              dynamicPropNames.push(name);
            }
          } else {
            hasDynamicKeys = true;
          }
        };
        for (let i = 0; i < props.length; i++) {
          const prop = props[i];
          if (prop.type === 6) {
            const { loc, name, value } = prop;
            let isStatic = true;
            if (name === "ref") {
              hasRef = true;
              if (context.scopes.vFor > 0) {
                properties.push(
                  createObjectProperty(
                    createSimpleExpression("ref_for", true),
                    createSimpleExpression("true")
                  )
                );
              }
              if (value && context.inline) {
                const binding = context.bindingMetadata[value.content];
                if (binding === "setup-let" || binding === "setup-ref" || binding === "setup-maybe-ref") {
                  isStatic = false;
                  properties.push(
                    createObjectProperty(
                      createSimpleExpression("ref_key", true),
                      createSimpleExpression(value.content, true, value.loc)
                    )
                  );
                }
              }
            }
            if (name === "is" && (isComponentTag(tag) || value && value.content.startsWith("vue:") || isCompatEnabled(
              "COMPILER_IS_ON_ELEMENT",
              context
            ))) {
              continue;
            }
            properties.push(
              createObjectProperty(
                createSimpleExpression(
                  name,
                  true,
                  getInnerRange(loc, 0, name.length)
                ),
                createSimpleExpression(
                  value ? value.content : "",
                  isStatic,
                  value ? value.loc : loc
                )
              )
            );
          } else {
            const { name, arg, exp, loc } = prop;
            const isVBind = name === "bind";
            const isVOn = name === "on";
            if (name === "slot") {
              if (!isComponent2) {
                context.onError(
                  createCompilerError(40, loc)
                );
              }
              continue;
            }
            if (name === "once" || name === "memo") {
              continue;
            }
            if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag) || isCompatEnabled(
              "COMPILER_IS_ON_ELEMENT",
              context
            ))) {
              continue;
            }
            if (isVOn && ssr) {
              continue;
            }
            if (
              // #938: elements with dynamic keys should be forced into blocks
              isVBind && isStaticArgOf(arg, "key") || // inline before-update hooks need to force block so that it is invoked
              // before children
              isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")
            ) {
              shouldUseBlock = true;
            }
            if (isVBind && isStaticArgOf(arg, "ref") && context.scopes.vFor > 0) {
              properties.push(
                createObjectProperty(
                  createSimpleExpression("ref_for", true),
                  createSimpleExpression("true")
                )
              );
            }
            if (!arg && (isVBind || isVOn)) {
              hasDynamicKeys = true;
              if (exp) {
                if (isVBind) {
                  pushMergeArg();
                  {
                    {
                      const hasOverridableKeys = mergeArgs.some((arg2) => {
                        if (arg2.type === 15) {
                          return arg2.properties.some(({ key }) => {
                            if (key.type !== 4 || !key.isStatic) {
                              return true;
                            }
                            return key.content !== "class" && key.content !== "style" && !shared.isOn(key.content);
                          });
                        } else {
                          return true;
                        }
                      });
                      if (hasOverridableKeys) {
                        checkCompatEnabled(
                          "COMPILER_V_BIND_OBJECT_ORDER",
                          context,
                          loc
                        );
                      }
                    }
                    if (isCompatEnabled(
                      "COMPILER_V_BIND_OBJECT_ORDER",
                      context
                    )) {
                      mergeArgs.unshift(exp);
                      continue;
                    }
                  }
                  mergeArgs.push(exp);
                } else {
                  pushMergeArg({
                    type: 14,
                    loc,
                    callee: context.helper(TO_HANDLERS),
                    arguments: isComponent2 ? [exp] : [exp, `true`]
                  });
                }
              } else {
                context.onError(
                  createCompilerError(
                    isVBind ? 34 : 35,
                    loc
                  )
                );
              }
              continue;
            }
            const directiveTransform = context.directiveTransforms[name];
            if (directiveTransform) {
              const { props: props2, needRuntime } = directiveTransform(prop, node, context);
              !ssr && props2.forEach(analyzePatchFlag);
              if (isVOn && arg && !isStaticExp(arg)) {
                pushMergeArg(createObjectExpression(props2, elementLoc));
              } else {
                properties.push(...props2);
              }
              if (needRuntime) {
                runtimeDirectives.push(prop);
                if (shared.isSymbol(needRuntime)) {
                  directiveImportMap.set(prop, needRuntime);
                }
              }
            } else if (!shared.isBuiltInDirective(name)) {
              runtimeDirectives.push(prop);
              if (hasChildren) {
                shouldUseBlock = true;
              }
            }
          }
        }
        let propsExpression = void 0;
        if (mergeArgs.length) {
          pushMergeArg();
          if (mergeArgs.length > 1) {
            propsExpression = createCallExpression(
              context.helper(MERGE_PROPS),
              mergeArgs,
              elementLoc
            );
          } else {
            propsExpression = mergeArgs[0];
          }
        } else if (properties.length) {
          propsExpression = createObjectExpression(
            dedupeProperties(properties),
            elementLoc
          );
        }
        if (hasDynamicKeys) {
          patchFlag |= 16;
        } else {
          if (hasClassBinding && !isComponent2) {
            patchFlag |= 2;
          }
          if (hasStyleBinding && !isComponent2) {
            patchFlag |= 4;
          }
          if (dynamicPropNames.length) {
            patchFlag |= 8;
          }
          if (hasHydrationEventBinding) {
            patchFlag |= 32;
          }
        }
        if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
          patchFlag |= 512;
        }
        if (!context.inSSR && propsExpression) {
          switch (propsExpression.type) {
            case 15:
              let classKeyIndex = -1;
              let styleKeyIndex = -1;
              let hasDynamicKey = false;
              for (let i = 0; i < propsExpression.properties.length; i++) {
                const key = propsExpression.properties[i].key;
                if (isStaticExp(key)) {
                  if (key.content === "class") {
                    classKeyIndex = i;
                  } else if (key.content === "style") {
                    styleKeyIndex = i;
                  }
                } else if (!key.isHandlerKey) {
                  hasDynamicKey = true;
                }
              }
              const classProp = propsExpression.properties[classKeyIndex];
              const styleProp = propsExpression.properties[styleKeyIndex];
              if (!hasDynamicKey) {
                if (classProp && !isStaticExp(classProp.value)) {
                  classProp.value = createCallExpression(
                    context.helper(NORMALIZE_CLASS),
                    [classProp.value]
                  );
                }
                if (styleProp && // the static style is compiled into an object,
                // so use `hasStyleBinding` to ensure that it is a dynamic style binding
                (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || // v-bind:style and style both exist,
                // v-bind:style with static literal object
                styleProp.value.type === 17)) {
                  styleProp.value = createCallExpression(
                    context.helper(NORMALIZE_STYLE),
                    [styleProp.value]
                  );
                }
              } else {
                propsExpression = createCallExpression(
                  context.helper(NORMALIZE_PROPS),
                  [propsExpression]
                );
              }
              break;
            case 14:
              break;
            default:
              propsExpression = createCallExpression(
                context.helper(NORMALIZE_PROPS),
                [
                  createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
                    propsExpression
                  ])
                ]
              );
              break;
          }
        }
        return {
          props: propsExpression,
          directives: runtimeDirectives,
          patchFlag,
          dynamicPropNames,
          shouldUseBlock
        };
      }
      function dedupeProperties(properties) {
        const knownProps = /* @__PURE__ */ new Map();
        const deduped = [];
        for (let i = 0; i < properties.length; i++) {
          const prop = properties[i];
          if (prop.key.type === 8 || !prop.key.isStatic) {
            deduped.push(prop);
            continue;
          }
          const name = prop.key.content;
          const existing = knownProps.get(name);
          if (existing) {
            if (name === "style" || name === "class" || shared.isOn(name)) {
              mergeAsArray(existing, prop);
            }
          } else {
            knownProps.set(name, prop);
            deduped.push(prop);
          }
        }
        return deduped;
      }
      function mergeAsArray(existing, incoming) {
        if (existing.value.type === 17) {
          existing.value.elements.push(incoming.value);
        } else {
          existing.value = createArrayExpression(
            [existing.value, incoming.value],
            existing.loc
          );
        }
      }
      function buildDirectiveArgs(dir, context) {
        const dirArgs = [];
        const runtime = directiveImportMap.get(dir);
        if (runtime) {
          dirArgs.push(context.helperString(runtime));
        } else {
          const fromSetup = resolveSetupReference("v-" + dir.name, context);
          if (fromSetup) {
            dirArgs.push(fromSetup);
          } else {
            context.helper(RESOLVE_DIRECTIVE);
            context.directives.add(dir.name);
            dirArgs.push(toValidAssetId(dir.name, `directive`));
          }
        }
        const { loc } = dir;
        if (dir.exp)
          dirArgs.push(dir.exp);
        if (dir.arg) {
          if (!dir.exp) {
            dirArgs.push(`void 0`);
          }
          dirArgs.push(dir.arg);
        }
        if (Object.keys(dir.modifiers).length) {
          if (!dir.arg) {
            if (!dir.exp) {
              dirArgs.push(`void 0`);
            }
            dirArgs.push(`void 0`);
          }
          const trueExpression = createSimpleExpression(`true`, false, loc);
          dirArgs.push(
            createObjectExpression(
              dir.modifiers.map(
                (modifier) => createObjectProperty(modifier, trueExpression)
              ),
              loc
            )
          );
        }
        return createArrayExpression(dirArgs, dir.loc);
      }
      function stringifyDynamicPropNames(props) {
        let propsNamesString = `[`;
        for (let i = 0, l = props.length; i < l; i++) {
          propsNamesString += JSON.stringify(props[i]);
          if (i < l - 1)
            propsNamesString += ", ";
        }
        return propsNamesString + `]`;
      }
      function isComponentTag(tag) {
        return tag === "component" || tag === "Component";
      }
      var transformSlotOutlet = (node, context) => {
        if (isSlotOutlet(node)) {
          const { children, loc } = node;
          const { slotName, slotProps } = processSlotOutlet(node, context);
          const slotArgs = [
            context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
            slotName,
            "{}",
            "undefined",
            "true"
          ];
          let expectedLen = 2;
          if (slotProps) {
            slotArgs[2] = slotProps;
            expectedLen = 3;
          }
          if (children.length) {
            slotArgs[3] = createFunctionExpression([], children, false, false, loc);
            expectedLen = 4;
          }
          if (context.scopeId && !context.slotted) {
            expectedLen = 5;
          }
          slotArgs.splice(expectedLen);
          node.codegenNode = createCallExpression(
            context.helper(RENDER_SLOT),
            slotArgs,
            loc
          );
        }
      };
      function processSlotOutlet(node, context) {
        let slotName = `"default"`;
        let slotProps = void 0;
        const nonNameProps = [];
        for (let i = 0; i < node.props.length; i++) {
          const p = node.props[i];
          if (p.type === 6) {
            if (p.value) {
              if (p.name === "name") {
                slotName = JSON.stringify(p.value.content);
              } else {
                p.name = shared.camelize(p.name);
                nonNameProps.push(p);
              }
            }
          } else {
            if (p.name === "bind" && isStaticArgOf(p.arg, "name")) {
              if (p.exp)
                slotName = p.exp;
            } else {
              if (p.name === "bind" && p.arg && isStaticExp(p.arg)) {
                p.arg.content = shared.camelize(p.arg.content);
              }
              nonNameProps.push(p);
            }
          }
        }
        if (nonNameProps.length > 0) {
          const { props, directives } = buildProps(
            node,
            context,
            nonNameProps,
            false,
            false
          );
          slotProps = props;
          if (directives.length) {
            context.onError(
              createCompilerError(
                36,
                directives[0].loc
              )
            );
          }
        }
        return {
          slotName,
          slotProps
        };
      }
      var fnExpRE = /^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
      var transformOn = (dir, node, context, augmentor) => {
        const { loc, modifiers, arg } = dir;
        if (!dir.exp && !modifiers.length) {
          context.onError(createCompilerError(35, loc));
        }
        let eventName;
        if (arg.type === 4) {
          if (arg.isStatic) {
            let rawName = arg.content;
            if (rawName.startsWith("vnode")) {
              context.onWarn(
                createCompilerError(51, arg.loc)
              );
            }
            if (rawName.startsWith("vue:")) {
              rawName = `vnode-${rawName.slice(4)}`;
            }
            const eventString = node.tagType !== 0 || rawName.startsWith("vnode") || !/[A-Z]/.test(rawName) ? (
              // for non-element and vnode lifecycle event listeners, auto convert
              // it to camelCase. See issue #2249
              shared.toHandlerKey(shared.camelize(rawName))
            ) : (
              // preserve case for plain element listeners that have uppercase
              // letters, as these may be custom elements' custom events
              `on:${rawName}`
            );
            eventName = createSimpleExpression(eventString, true, arg.loc);
          } else {
            eventName = createCompoundExpression([
              `${context.helperString(TO_HANDLER_KEY)}(`,
              arg,
              `)`
            ]);
          }
        } else {
          eventName = arg;
          eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
          eventName.children.push(`)`);
        }
        let exp = dir.exp;
        if (exp && !exp.content.trim()) {
          exp = void 0;
        }
        let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
        if (exp) {
          const isMemberExp = isMemberExpression(exp.content, context);
          const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
          const hasMultipleStatements = exp.content.includes(`;`);
          if (context.prefixIdentifiers) {
            isInlineStatement && context.addIdentifiers(`$event`);
            exp = dir.exp = processExpression(
              exp,
              context,
              false,
              hasMultipleStatements
            );
            isInlineStatement && context.removeIdentifiers(`$event`);
            shouldCache = context.cacheHandlers && // unnecessary to cache inside v-once
            !context.inVOnce && // runtime constants don't need to be cached
            // (this is analyzed by compileScript in SFC <script setup>)
            !(exp.type === 4 && exp.constType > 0) && // #1541 bail if this is a member exp handler passed to a component -
            // we need to use the original function to preserve arity,
            // e.g. <transition> relies on checking cb.length to determine
            // transition end handling. Inline function is ok since its arity
            // is preserved even when cached.
            !(isMemberExp && node.tagType === 1) && // bail if the function references closure variables (v-for, v-slot)
            // it must be passed fresh to avoid stale values.
            !hasScopeRef(exp, context.identifiers);
            if (shouldCache && isMemberExp) {
              if (exp.type === 4) {
                exp.content = `${exp.content} && ${exp.content}(...args)`;
              } else {
                exp.children = [...exp.children, ` && `, ...exp.children, `(...args)`];
              }
            }
          }
          if (isInlineStatement || shouldCache && isMemberExp) {
            exp = createCompoundExpression([
              `${isInlineStatement ? context.isTS ? `($event: any)` : `$event` : `${context.isTS ? `
//@ts-ignore
` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
              exp,
              hasMultipleStatements ? `}` : `)`
            ]);
          }
        }
        let ret = {
          props: [
            createObjectProperty(
              eventName,
              exp || createSimpleExpression(`() => {}`, false, loc)
            )
          ]
        };
        if (augmentor) {
          ret = augmentor(ret);
        }
        if (shouldCache) {
          ret.props[0].value = context.cache(ret.props[0].value);
        }
        ret.props.forEach((p) => p.key.isHandlerKey = true);
        return ret;
      };
      var transformBind = (dir, _node, context) => {
        const { exp, modifiers, loc } = dir;
        const arg = dir.arg;
        if (arg.type !== 4) {
          arg.children.unshift(`(`);
          arg.children.push(`) || ""`);
        } else if (!arg.isStatic) {
          arg.content = `${arg.content} || ""`;
        }
        if (modifiers.includes("camel")) {
          if (arg.type === 4) {
            if (arg.isStatic) {
              arg.content = shared.camelize(arg.content);
            } else {
              arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
            }
          } else {
            arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
            arg.children.push(`)`);
          }
        }
        if (!context.inSSR) {
          if (modifiers.includes("prop")) {
            injectPrefix(arg, ".");
          }
          if (modifiers.includes("attr")) {
            injectPrefix(arg, "^");
          }
        }
        if (!exp || exp.type === 4 && !exp.content.trim()) {
          context.onError(createCompilerError(34, loc));
          return {
            props: [createObjectProperty(arg, createSimpleExpression("", true, loc))]
          };
        }
        return {
          props: [createObjectProperty(arg, exp)]
        };
      };
      var injectPrefix = (arg, prefix) => {
        if (arg.type === 4) {
          if (arg.isStatic) {
            arg.content = prefix + arg.content;
          } else {
            arg.content = `\`${prefix}\${${arg.content}}\``;
          }
        } else {
          arg.children.unshift(`'${prefix}' + (`);
          arg.children.push(`)`);
        }
      };
      var transformText = (node, context) => {
        if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {
          return () => {
            const children = node.children;
            let currentContainer = void 0;
            let hasText = false;
            for (let i = 0; i < children.length; i++) {
              const child = children[i];
              if (isText$1(child)) {
                hasText = true;
                for (let j = i + 1; j < children.length; j++) {
                  const next = children[j];
                  if (isText$1(next)) {
                    if (!currentContainer) {
                      currentContainer = children[i] = createCompoundExpression(
                        [child],
                        child.loc
                      );
                    }
                    currentContainer.children.push(` + `, next);
                    children.splice(j, 1);
                    j--;
                  } else {
                    currentContainer = void 0;
                    break;
                  }
                }
              }
            }
            if (!hasText || // if this is a plain element with a single text child, leave it
            // as-is since the runtime has dedicated fast path for this by directly
            // setting textContent of the element.
            // for component root it's always normalized anyway.
            children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && // #3756
            // custom directives can potentially add DOM elements arbitrarily,
            // we need to avoid setting textContent of the element at runtime
            // to avoid accidentally overwriting the DOM elements added
            // by the user through custom directives.
            !node.props.find(
              (p) => p.type === 7 && !context.directiveTransforms[p.name]
            ) && // in compat mode, <template> tags with no special directives
            // will be rendered as a fragment so its children must be
            // converted into vnodes.
            !(node.tag === "template"))) {
              return;
            }
            for (let i = 0; i < children.length; i++) {
              const child = children[i];
              if (isText$1(child) || child.type === 8) {
                const callArgs = [];
                if (child.type !== 2 || child.content !== " ") {
                  callArgs.push(child);
                }
                if (!context.ssr && getConstantType(child, context) === 0) {
                  callArgs.push(
                    `1 /* ${shared.PatchFlagNames[1]} */`
                  );
                }
                children[i] = {
                  type: 12,
                  content: child,
                  loc: child.loc,
                  codegenNode: createCallExpression(
                    context.helper(CREATE_TEXT),
                    callArgs
                  )
                };
              }
            }
          };
        }
      };
      var seen$1 = /* @__PURE__ */ new WeakSet();
      var transformOnce = (node, context) => {
        if (node.type === 1 && findDir(node, "once", true)) {
          if (seen$1.has(node) || context.inVOnce || context.inSSR) {
            return;
          }
          seen$1.add(node);
          context.inVOnce = true;
          context.helper(SET_BLOCK_TRACKING);
          return () => {
            context.inVOnce = false;
            const cur = context.currentNode;
            if (cur.codegenNode) {
              cur.codegenNode = context.cache(
                cur.codegenNode,
                true
                /* isVNode */
              );
            }
          };
        }
      };
      var transformModel = (dir, node, context) => {
        const { exp, arg } = dir;
        if (!exp) {
          context.onError(
            createCompilerError(41, dir.loc)
          );
          return createTransformProps();
        }
        const rawExp = exp.loc.source;
        const expString = exp.type === 4 ? exp.content : rawExp;
        const bindingType = context.bindingMetadata[rawExp];
        if (bindingType === "props" || bindingType === "props-aliased") {
          context.onError(createCompilerError(44, exp.loc));
          return createTransformProps();
        }
        const maybeRef = context.inline && (bindingType === "setup-let" || bindingType === "setup-ref" || bindingType === "setup-maybe-ref");
        if (!expString.trim() || !isMemberExpression(expString, context) && !maybeRef) {
          context.onError(
            createCompilerError(42, exp.loc)
          );
          return createTransformProps();
        }
        if (context.prefixIdentifiers && isSimpleIdentifier(expString) && context.identifiers[expString]) {
          context.onError(
            createCompilerError(43, exp.loc)
          );
          return createTransformProps();
        }
        const propName = arg ? arg : createSimpleExpression("modelValue", true);
        const eventName = arg ? isStaticExp(arg) ? `onUpdate:${shared.camelize(arg.content)}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
        let assignmentExp;
        const eventArg = context.isTS ? `($event: any)` : `$event`;
        if (maybeRef) {
          if (bindingType === "setup-ref") {
            assignmentExp = createCompoundExpression([
              `${eventArg} => ((`,
              createSimpleExpression(rawExp, false, exp.loc),
              `).value = $event)`
            ]);
          } else {
            const altAssignment = bindingType === "setup-let" ? `${rawExp} = $event` : `null`;
            assignmentExp = createCompoundExpression([
              `${eventArg} => (${context.helperString(IS_REF)}(${rawExp}) ? (`,
              createSimpleExpression(rawExp, false, exp.loc),
              `).value = $event : ${altAssignment})`
            ]);
          }
        } else {
          assignmentExp = createCompoundExpression([
            `${eventArg} => ((`,
            exp,
            `) = $event)`
          ]);
        }
        const props = [
          // modelValue: foo
          createObjectProperty(propName, dir.exp),
          // "onUpdate:modelValue": $event => (foo = $event)
          createObjectProperty(eventName, assignmentExp)
        ];
        if (context.prefixIdentifiers && !context.inVOnce && context.cacheHandlers && !hasScopeRef(exp, context.identifiers)) {
          props[1].value = context.cache(props[1].value);
        }
        if (dir.modifiers.length && node.tagType === 1) {
          const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
          const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
          props.push(
            createObjectProperty(
              modifiersKey,
              createSimpleExpression(
                `{ ${modifiers} }`,
                false,
                dir.loc,
                2
              )
            )
          );
        }
        return createTransformProps(props);
      };
      function createTransformProps(props = []) {
        return { props };
      }
      var validDivisionCharRE = /[\w).+\-_$\]]/;
      var transformFilter = (node, context) => {
        if (!isCompatEnabled("COMPILER_FILTER", context)) {
          return;
        }
        if (node.type === 5) {
          rewriteFilter(node.content, context);
        }
        if (node.type === 1) {
          node.props.forEach((prop) => {
            if (prop.type === 7 && prop.name !== "for" && prop.exp) {
              rewriteFilter(prop.exp, context);
            }
          });
        }
      };
      function rewriteFilter(node, context) {
        if (node.type === 4) {
          parseFilter(node, context);
        } else {
          for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i];
            if (typeof child !== "object")
              continue;
            if (child.type === 4) {
              parseFilter(child, context);
            } else if (child.type === 8) {
              rewriteFilter(node, context);
            } else if (child.type === 5) {
              rewriteFilter(child.content, context);
            }
          }
        }
      }
      function parseFilter(node, context) {
        const exp = node.content;
        let inSingle = false;
        let inDouble = false;
        let inTemplateString = false;
        let inRegex = false;
        let curly = 0;
        let square = 0;
        let paren = 0;
        let lastFilterIndex = 0;
        let c, prev, i, expression, filters = [];
        for (i = 0; i < exp.length; i++) {
          prev = c;
          c = exp.charCodeAt(i);
          if (inSingle) {
            if (c === 39 && prev !== 92)
              inSingle = false;
          } else if (inDouble) {
            if (c === 34 && prev !== 92)
              inDouble = false;
          } else if (inTemplateString) {
            if (c === 96 && prev !== 92)
              inTemplateString = false;
          } else if (inRegex) {
            if (c === 47 && prev !== 92)
              inRegex = false;
          } else if (c === 124 && // pipe
          exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
            if (expression === void 0) {
              lastFilterIndex = i + 1;
              expression = exp.slice(0, i).trim();
            } else {
              pushFilter();
            }
          } else {
            switch (c) {
              case 34:
                inDouble = true;
                break;
              case 39:
                inSingle = true;
                break;
              case 96:
                inTemplateString = true;
                break;
              case 40:
                paren++;
                break;
              case 41:
                paren--;
                break;
              case 91:
                square++;
                break;
              case 93:
                square--;
                break;
              case 123:
                curly++;
                break;
              case 125:
                curly--;
                break;
            }
            if (c === 47) {
              let j = i - 1;
              let p;
              for (; j >= 0; j--) {
                p = exp.charAt(j);
                if (p !== " ")
                  break;
              }
              if (!p || !validDivisionCharRE.test(p)) {
                inRegex = true;
              }
            }
          }
        }
        if (expression === void 0) {
          expression = exp.slice(0, i).trim();
        } else if (lastFilterIndex !== 0) {
          pushFilter();
        }
        function pushFilter() {
          filters.push(exp.slice(lastFilterIndex, i).trim());
          lastFilterIndex = i + 1;
        }
        if (filters.length) {
          warnDeprecation(
            "COMPILER_FILTER",
            context,
            node.loc
          );
          for (i = 0; i < filters.length; i++) {
            expression = wrapFilter(expression, filters[i], context);
          }
          node.content = expression;
        }
      }
      function wrapFilter(exp, filter, context) {
        context.helper(RESOLVE_FILTER);
        const i = filter.indexOf("(");
        if (i < 0) {
          context.filters.add(filter);
          return `${toValidAssetId(filter, "filter")}(${exp})`;
        } else {
          const name = filter.slice(0, i);
          const args = filter.slice(i + 1);
          context.filters.add(name);
          return `${toValidAssetId(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
        }
      }
      var seen = /* @__PURE__ */ new WeakSet();
      var transformMemo = (node, context) => {
        if (node.type === 1) {
          const dir = findDir(node, "memo");
          if (!dir || seen.has(node)) {
            return;
          }
          seen.add(node);
          return () => {
            const codegenNode = node.codegenNode || context.currentNode.codegenNode;
            if (codegenNode && codegenNode.type === 13) {
              if (node.tagType !== 1) {
                convertToBlock(codegenNode, context);
              }
              node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
                dir.exp,
                createFunctionExpression(void 0, codegenNode),
                `_cache`,
                String(context.cached++)
              ]);
            }
          };
        }
      };
      function getBaseTransformPreset(prefixIdentifiers) {
        return [
          [
            transformOnce,
            transformIf,
            transformMemo,
            transformFor,
            ...[transformFilter],
            ...prefixIdentifiers ? [
              // order is important
              trackVForSlotScopes,
              transformExpression
            ] : [],
            transformSlotOutlet,
            transformElement,
            trackSlotScopes,
            transformText
          ],
          {
            on: transformOn,
            bind: transformBind,
            model: transformModel
          }
        ];
      }
      function baseCompile(template2, options = {}) {
        const onError = options.onError || defaultOnError;
        const isModuleMode = options.mode === "module";
        const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;
        if (!prefixIdentifiers && options.cacheHandlers) {
          onError(createCompilerError(49));
        }
        if (options.scopeId && !isModuleMode) {
          onError(createCompilerError(50));
        }
        const ast = shared.isString(template2) ? baseParse(template2, options) : template2;
        const [nodeTransforms, directiveTransforms] = getBaseTransformPreset(prefixIdentifiers);
        if (options.isTS) {
          const { expressionPlugins } = options;
          if (!expressionPlugins || !expressionPlugins.includes("typescript")) {
            options.expressionPlugins = [...expressionPlugins || [], "typescript"];
          }
        }
        transform(
          ast,
          shared.extend({}, options, {
            prefixIdentifiers,
            nodeTransforms: [
              ...nodeTransforms,
              ...options.nodeTransforms || []
              // user transforms
            ],
            directiveTransforms: shared.extend(
              {},
              directiveTransforms,
              options.directiveTransforms || {}
              // user transforms
            )
          })
        );
        return generate(
          ast,
          shared.extend({}, options, {
            prefixIdentifiers
          })
        );
      }
      var noopDirectiveTransform = () => ({ props: [] });
      exports.generateCodeFrame = shared.generateCodeFrame;
      exports.BASE_TRANSITION = BASE_TRANSITION;
      exports.CAMELIZE = CAMELIZE;
      exports.CAPITALIZE = CAPITALIZE;
      exports.CREATE_BLOCK = CREATE_BLOCK;
      exports.CREATE_COMMENT = CREATE_COMMENT;
      exports.CREATE_ELEMENT_BLOCK = CREATE_ELEMENT_BLOCK;
      exports.CREATE_ELEMENT_VNODE = CREATE_ELEMENT_VNODE;
      exports.CREATE_SLOTS = CREATE_SLOTS;
      exports.CREATE_STATIC = CREATE_STATIC;
      exports.CREATE_TEXT = CREATE_TEXT;
      exports.CREATE_VNODE = CREATE_VNODE;
      exports.FRAGMENT = FRAGMENT;
      exports.GUARD_REACTIVE_PROPS = GUARD_REACTIVE_PROPS;
      exports.IS_MEMO_SAME = IS_MEMO_SAME;
      exports.IS_REF = IS_REF;
      exports.KEEP_ALIVE = KEEP_ALIVE;
      exports.MERGE_PROPS = MERGE_PROPS;
      exports.NORMALIZE_CLASS = NORMALIZE_CLASS;
      exports.NORMALIZE_PROPS = NORMALIZE_PROPS;
      exports.NORMALIZE_STYLE = NORMALIZE_STYLE;
      exports.OPEN_BLOCK = OPEN_BLOCK;
      exports.POP_SCOPE_ID = POP_SCOPE_ID;
      exports.PUSH_SCOPE_ID = PUSH_SCOPE_ID;
      exports.RENDER_LIST = RENDER_LIST;
      exports.RENDER_SLOT = RENDER_SLOT;
      exports.RESOLVE_COMPONENT = RESOLVE_COMPONENT;
      exports.RESOLVE_DIRECTIVE = RESOLVE_DIRECTIVE;
      exports.RESOLVE_DYNAMIC_COMPONENT = RESOLVE_DYNAMIC_COMPONENT;
      exports.RESOLVE_FILTER = RESOLVE_FILTER;
      exports.SET_BLOCK_TRACKING = SET_BLOCK_TRACKING;
      exports.SUSPENSE = SUSPENSE;
      exports.TELEPORT = TELEPORT;
      exports.TO_DISPLAY_STRING = TO_DISPLAY_STRING;
      exports.TO_HANDLERS = TO_HANDLERS;
      exports.TO_HANDLER_KEY = TO_HANDLER_KEY;
      exports.TS_NODE_TYPES = TS_NODE_TYPES;
      exports.UNREF = UNREF;
      exports.WITH_CTX = WITH_CTX;
      exports.WITH_DIRECTIVES = WITH_DIRECTIVES;
      exports.WITH_MEMO = WITH_MEMO;
      exports.advancePositionWithClone = advancePositionWithClone;
      exports.advancePositionWithMutation = advancePositionWithMutation;
      exports.assert = assert;
      exports.baseCompile = baseCompile;
      exports.baseParse = baseParse;
      exports.buildDirectiveArgs = buildDirectiveArgs;
      exports.buildProps = buildProps;
      exports.buildSlots = buildSlots;
      exports.checkCompatEnabled = checkCompatEnabled;
      exports.convertToBlock = convertToBlock;
      exports.createArrayExpression = createArrayExpression;
      exports.createAssignmentExpression = createAssignmentExpression;
      exports.createBlockStatement = createBlockStatement;
      exports.createCacheExpression = createCacheExpression;
      exports.createCallExpression = createCallExpression;
      exports.createCompilerError = createCompilerError;
      exports.createCompoundExpression = createCompoundExpression;
      exports.createConditionalExpression = createConditionalExpression;
      exports.createForLoopParams = createForLoopParams;
      exports.createFunctionExpression = createFunctionExpression;
      exports.createIfStatement = createIfStatement;
      exports.createInterpolation = createInterpolation;
      exports.createObjectExpression = createObjectExpression;
      exports.createObjectProperty = createObjectProperty;
      exports.createReturnStatement = createReturnStatement;
      exports.createRoot = createRoot;
      exports.createSequenceExpression = createSequenceExpression;
      exports.createSimpleExpression = createSimpleExpression;
      exports.createStructuralDirectiveTransform = createStructuralDirectiveTransform;
      exports.createTemplateLiteral = createTemplateLiteral;
      exports.createTransformContext = createTransformContext;
      exports.createVNodeCall = createVNodeCall;
      exports.extractIdentifiers = extractIdentifiers;
      exports.findDir = findDir;
      exports.findProp = findProp;
      exports.generate = generate;
      exports.getBaseTransformPreset = getBaseTransformPreset;
      exports.getConstantType = getConstantType;
      exports.getInnerRange = getInnerRange;
      exports.getMemoedVNodeCall = getMemoedVNodeCall;
      exports.getVNodeBlockHelper = getVNodeBlockHelper;
      exports.getVNodeHelper = getVNodeHelper;
      exports.hasDynamicKeyVBind = hasDynamicKeyVBind;
      exports.hasScopeRef = hasScopeRef;
      exports.helperNameMap = helperNameMap;
      exports.injectProp = injectProp;
      exports.isBuiltInType = isBuiltInType;
      exports.isCoreComponent = isCoreComponent;
      exports.isFunctionType = isFunctionType;
      exports.isInDestructureAssignment = isInDestructureAssignment;
      exports.isMemberExpression = isMemberExpression;
      exports.isMemberExpressionBrowser = isMemberExpressionBrowser;
      exports.isMemberExpressionNode = isMemberExpressionNode;
      exports.isReferencedIdentifier = isReferencedIdentifier;
      exports.isSimpleIdentifier = isSimpleIdentifier;
      exports.isSlotOutlet = isSlotOutlet;
      exports.isStaticArgOf = isStaticArgOf;
      exports.isStaticExp = isStaticExp;
      exports.isStaticProperty = isStaticProperty;
      exports.isStaticPropertyKey = isStaticPropertyKey;
      exports.isTemplateNode = isTemplateNode;
      exports.isText = isText$1;
      exports.isVSlot = isVSlot;
      exports.locStub = locStub;
      exports.noopDirectiveTransform = noopDirectiveTransform;
      exports.processExpression = processExpression;
      exports.processFor = processFor;
      exports.processIf = processIf;
      exports.processSlotOutlet = processSlotOutlet;
      exports.registerRuntimeHelpers = registerRuntimeHelpers;
      exports.resolveComponentType = resolveComponentType;
      exports.stringifyExpression = stringifyExpression;
      exports.toValidAssetId = toValidAssetId;
      exports.trackSlotScopes = trackSlotScopes;
      exports.trackVForSlotScopes = trackVForSlotScopes;
      exports.transform = transform;
      exports.transformBind = transformBind;
      exports.transformElement = transformElement;
      exports.transformExpression = transformExpression;
      exports.transformModel = transformModel;
      exports.transformOn = transformOn;
      exports.traverseNode = traverseNode;
      exports.walkBlockDeclarations = walkBlockDeclarations;
      exports.walkFunctionParams = walkFunctionParams;
      exports.walkIdentifiers = walkIdentifiers;
      exports.warnDeprecation = warnDeprecation;
    }
  });

  // node_modules/@vue/compiler-core/index.js
  var require_compiler_core = __commonJS({
    "node_modules/@vue/compiler-core/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_compiler_core_cjs();
      }
    }
  });

  // node_modules/@vue/compiler-dom/dist/compiler-dom.cjs.js
  var require_compiler_dom_cjs = __commonJS({
    "node_modules/@vue/compiler-dom/dist/compiler-dom.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var compilerCore = require_compiler_core();
      var shared = require_shared();
      var V_MODEL_RADIO = Symbol(`vModelRadio`);
      var V_MODEL_CHECKBOX = Symbol(`vModelCheckbox`);
      var V_MODEL_TEXT = Symbol(`vModelText`);
      var V_MODEL_SELECT = Symbol(`vModelSelect`);
      var V_MODEL_DYNAMIC = Symbol(`vModelDynamic`);
      var V_ON_WITH_MODIFIERS = Symbol(`vOnModifiersGuard`);
      var V_ON_WITH_KEYS = Symbol(`vOnKeysGuard`);
      var V_SHOW = Symbol(`vShow`);
      var TRANSITION = Symbol(`Transition`);
      var TRANSITION_GROUP = Symbol(`TransitionGroup`);
      compilerCore.registerRuntimeHelpers({
        [V_MODEL_RADIO]: `vModelRadio`,
        [V_MODEL_CHECKBOX]: `vModelCheckbox`,
        [V_MODEL_TEXT]: `vModelText`,
        [V_MODEL_SELECT]: `vModelSelect`,
        [V_MODEL_DYNAMIC]: `vModelDynamic`,
        [V_ON_WITH_MODIFIERS]: `withModifiers`,
        [V_ON_WITH_KEYS]: `withKeys`,
        [V_SHOW]: `vShow`,
        [TRANSITION]: `Transition`,
        [TRANSITION_GROUP]: `TransitionGroup`
      });
      var namedCharacterReferences = {
        GT: ">",
        gt: ">",
        LT: "<",
        lt: "<",
        "ac;": "\u223E",
        "af;": "\u2061",
        AMP: "&",
        amp: "&",
        "ap;": "\u2248",
        "DD;": "\u2145",
        "dd;": "\u2146",
        deg: "\xB0",
        "ee;": "\u2147",
        "eg;": "\u2A9A",
        "el;": "\u2A99",
        ETH: "\xD0",
        eth: "\xF0",
        "gE;": "\u2267",
        "ge;": "\u2265",
        "Gg;": "\u22D9",
        "gg;": "\u226B",
        "gl;": "\u2277",
        "GT;": ">",
        "Gt;": "\u226B",
        "gt;": ">",
        "ic;": "\u2063",
        "ii;": "\u2148",
        "Im;": "\u2111",
        "in;": "\u2208",
        "it;": "\u2062",
        "lE;": "\u2266",
        "le;": "\u2264",
        "lg;": "\u2276",
        "Ll;": "\u22D8",
        "ll;": "\u226A",
        "LT;": "<",
        "Lt;": "\u226A",
        "lt;": "<",
        "mp;": "\u2213",
        "Mu;": "\u039C",
        "mu;": "\u03BC",
        "ne;": "\u2260",
        "ni;": "\u220B",
        not: "\xAC",
        "Nu;": "\u039D",
        "nu;": "\u03BD",
        "Or;": "\u2A54",
        "or;": "\u2228",
        "oS;": "\u24C8",
        "Pi;": "\u03A0",
        "pi;": "\u03C0",
        "pm;": "\xB1",
        "Pr;": "\u2ABB",
        "pr;": "\u227A",
        "Re;": "\u211C",
        REG: "\xAE",
        reg: "\xAE",
        "rx;": "\u211E",
        "Sc;": "\u2ABC",
        "sc;": "\u227B",
        shy: "\xAD",
        uml: "\xA8",
        "wp;": "\u2118",
        "wr;": "\u2240",
        "Xi;": "\u039E",
        "xi;": "\u03BE",
        yen: "\xA5",
        "acd;": "\u223F",
        "acE;": "\u223E\u0333",
        "Acy;": "\u0410",
        "acy;": "\u0430",
        "Afr;": "\u{1D504}",
        "afr;": "\u{1D51E}",
        "AMP;": "&",
        "amp;": "&",
        "And;": "\u2A53",
        "and;": "\u2227",
        "ang;": "\u2220",
        "apE;": "\u2A70",
        "ape;": "\u224A",
        "ast;": "*",
        Auml: "\xC4",
        auml: "\xE4",
        "Bcy;": "\u0411",
        "bcy;": "\u0431",
        "Bfr;": "\u{1D505}",
        "bfr;": "\u{1D51F}",
        "bne;": "=\u20E5",
        "bot;": "\u22A5",
        "Cap;": "\u22D2",
        "cap;": "\u2229",
        cent: "\xA2",
        "Cfr;": "\u212D",
        "cfr;": "\u{1D520}",
        "Chi;": "\u03A7",
        "chi;": "\u03C7",
        "cir;": "\u25CB",
        COPY: "\xA9",
        copy: "\xA9",
        "Cup;": "\u22D3",
        "cup;": "\u222A",
        "Dcy;": "\u0414",
        "dcy;": "\u0434",
        "deg;": "\xB0",
        "Del;": "\u2207",
        "Dfr;": "\u{1D507}",
        "dfr;": "\u{1D521}",
        "die;": "\xA8",
        "div;": "\xF7",
        "Dot;": "\xA8",
        "dot;": "\u02D9",
        "Ecy;": "\u042D",
        "ecy;": "\u044D",
        "Efr;": "\u{1D508}",
        "efr;": "\u{1D522}",
        "egs;": "\u2A96",
        "ell;": "\u2113",
        "els;": "\u2A95",
        "ENG;": "\u014A",
        "eng;": "\u014B",
        "Eta;": "\u0397",
        "eta;": "\u03B7",
        "ETH;": "\xD0",
        "eth;": "\xF0",
        Euml: "\xCB",
        euml: "\xEB",
        "Fcy;": "\u0424",
        "fcy;": "\u0444",
        "Ffr;": "\u{1D509}",
        "ffr;": "\u{1D523}",
        "gap;": "\u2A86",
        "Gcy;": "\u0413",
        "gcy;": "\u0433",
        "gEl;": "\u2A8C",
        "gel;": "\u22DB",
        "geq;": "\u2265",
        "ges;": "\u2A7E",
        "Gfr;": "\u{1D50A}",
        "gfr;": "\u{1D524}",
        "ggg;": "\u22D9",
        "gla;": "\u2AA5",
        "glE;": "\u2A92",
        "glj;": "\u2AA4",
        "gnE;": "\u2269",
        "gne;": "\u2A88",
        "Hat;": "^",
        "Hfr;": "\u210C",
        "hfr;": "\u{1D525}",
        "Icy;": "\u0418",
        "icy;": "\u0438",
        "iff;": "\u21D4",
        "Ifr;": "\u2111",
        "ifr;": "\u{1D526}",
        "Int;": "\u222C",
        "int;": "\u222B",
        Iuml: "\xCF",
        iuml: "\xEF",
        "Jcy;": "\u0419",
        "jcy;": "\u0439",
        "Jfr;": "\u{1D50D}",
        "jfr;": "\u{1D527}",
        "Kcy;": "\u041A",
        "kcy;": "\u043A",
        "Kfr;": "\u{1D50E}",
        "kfr;": "\u{1D528}",
        "lap;": "\u2A85",
        "lat;": "\u2AAB",
        "Lcy;": "\u041B",
        "lcy;": "\u043B",
        "lEg;": "\u2A8B",
        "leg;": "\u22DA",
        "leq;": "\u2264",
        "les;": "\u2A7D",
        "Lfr;": "\u{1D50F}",
        "lfr;": "\u{1D529}",
        "lgE;": "\u2A91",
        "lnE;": "\u2268",
        "lne;": "\u2A87",
        "loz;": "\u25CA",
        "lrm;": "\u200E",
        "Lsh;": "\u21B0",
        "lsh;": "\u21B0",
        macr: "\xAF",
        "Map;": "\u2905",
        "map;": "\u21A6",
        "Mcy;": "\u041C",
        "mcy;": "\u043C",
        "Mfr;": "\u{1D510}",
        "mfr;": "\u{1D52A}",
        "mho;": "\u2127",
        "mid;": "\u2223",
        "nap;": "\u2249",
        nbsp: "\xA0",
        "Ncy;": "\u041D",
        "ncy;": "\u043D",
        "Nfr;": "\u{1D511}",
        "nfr;": "\u{1D52B}",
        "ngE;": "\u2267\u0338",
        "nge;": "\u2271",
        "nGg;": "\u22D9\u0338",
        "nGt;": "\u226B\u20D2",
        "ngt;": "\u226F",
        "nis;": "\u22FC",
        "niv;": "\u220B",
        "nlE;": "\u2266\u0338",
        "nle;": "\u2270",
        "nLl;": "\u22D8\u0338",
        "nLt;": "\u226A\u20D2",
        "nlt;": "\u226E",
        "Not;": "\u2AEC",
        "not;": "\xAC",
        "npr;": "\u2280",
        "nsc;": "\u2281",
        "num;": "#",
        "Ocy;": "\u041E",
        "ocy;": "\u043E",
        "Ofr;": "\u{1D512}",
        "ofr;": "\u{1D52C}",
        "ogt;": "\u29C1",
        "ohm;": "\u03A9",
        "olt;": "\u29C0",
        "ord;": "\u2A5D",
        ordf: "\xAA",
        ordm: "\xBA",
        "orv;": "\u2A5B",
        Ouml: "\xD6",
        ouml: "\xF6",
        "par;": "\u2225",
        para: "\xB6",
        "Pcy;": "\u041F",
        "pcy;": "\u043F",
        "Pfr;": "\u{1D513}",
        "pfr;": "\u{1D52D}",
        "Phi;": "\u03A6",
        "phi;": "\u03C6",
        "piv;": "\u03D6",
        "prE;": "\u2AB3",
        "pre;": "\u2AAF",
        "Psi;": "\u03A8",
        "psi;": "\u03C8",
        "Qfr;": "\u{1D514}",
        "qfr;": "\u{1D52E}",
        QUOT: '"',
        quot: '"',
        "Rcy;": "\u0420",
        "rcy;": "\u0440",
        "REG;": "\xAE",
        "reg;": "\xAE",
        "Rfr;": "\u211C",
        "rfr;": "\u{1D52F}",
        "Rho;": "\u03A1",
        "rho;": "\u03C1",
        "rlm;": "\u200F",
        "Rsh;": "\u21B1",
        "rsh;": "\u21B1",
        "scE;": "\u2AB4",
        "sce;": "\u2AB0",
        "Scy;": "\u0421",
        "scy;": "\u0441",
        sect: "\xA7",
        "Sfr;": "\u{1D516}",
        "sfr;": "\u{1D530}",
        "shy;": "\xAD",
        "sim;": "\u223C",
        "smt;": "\u2AAA",
        "sol;": "/",
        "squ;": "\u25A1",
        "Sub;": "\u22D0",
        "sub;": "\u2282",
        "Sum;": "\u2211",
        "sum;": "\u2211",
        "Sup;": "\u22D1",
        "sup;": "\u2283",
        sup1: "\xB9",
        sup2: "\xB2",
        sup3: "\xB3",
        "Tab;": "	",
        "Tau;": "\u03A4",
        "tau;": "\u03C4",
        "Tcy;": "\u0422",
        "tcy;": "\u0442",
        "Tfr;": "\u{1D517}",
        "tfr;": "\u{1D531}",
        "top;": "\u22A4",
        "Ucy;": "\u0423",
        "ucy;": "\u0443",
        "Ufr;": "\u{1D518}",
        "ufr;": "\u{1D532}",
        "uml;": "\xA8",
        Uuml: "\xDC",
        uuml: "\xFC",
        "Vcy;": "\u0412",
        "vcy;": "\u0432",
        "Vee;": "\u22C1",
        "vee;": "\u2228",
        "Vfr;": "\u{1D519}",
        "vfr;": "\u{1D533}",
        "Wfr;": "\u{1D51A}",
        "wfr;": "\u{1D534}",
        "Xfr;": "\u{1D51B}",
        "xfr;": "\u{1D535}",
        "Ycy;": "\u042B",
        "ycy;": "\u044B",
        "yen;": "\xA5",
        "Yfr;": "\u{1D51C}",
        "yfr;": "\u{1D536}",
        yuml: "\xFF",
        "Zcy;": "\u0417",
        "zcy;": "\u0437",
        "Zfr;": "\u2128",
        "zfr;": "\u{1D537}",
        "zwj;": "\u200D",
        Acirc: "\xC2",
        acirc: "\xE2",
        acute: "\xB4",
        AElig: "\xC6",
        aelig: "\xE6",
        "andd;": "\u2A5C",
        "andv;": "\u2A5A",
        "ange;": "\u29A4",
        "Aopf;": "\u{1D538}",
        "aopf;": "\u{1D552}",
        "apid;": "\u224B",
        "apos;": "'",
        Aring: "\xC5",
        aring: "\xE5",
        "Ascr;": "\u{1D49C}",
        "ascr;": "\u{1D4B6}",
        "Auml;": "\xC4",
        "auml;": "\xE4",
        "Barv;": "\u2AE7",
        "bbrk;": "\u23B5",
        "Beta;": "\u0392",
        "beta;": "\u03B2",
        "beth;": "\u2136",
        "bNot;": "\u2AED",
        "bnot;": "\u2310",
        "Bopf;": "\u{1D539}",
        "bopf;": "\u{1D553}",
        "boxH;": "\u2550",
        "boxh;": "\u2500",
        "boxV;": "\u2551",
        "boxv;": "\u2502",
        "Bscr;": "\u212C",
        "bscr;": "\u{1D4B7}",
        "bsim;": "\u223D",
        "bsol;": "\\",
        "bull;": "\u2022",
        "bump;": "\u224E",
        "caps;": "\u2229\uFE00",
        "Cdot;": "\u010A",
        "cdot;": "\u010B",
        cedil: "\xB8",
        "cent;": "\xA2",
        "CHcy;": "\u0427",
        "chcy;": "\u0447",
        "circ;": "\u02C6",
        "cirE;": "\u29C3",
        "cire;": "\u2257",
        "comp;": "\u2201",
        "cong;": "\u2245",
        "Copf;": "\u2102",
        "copf;": "\u{1D554}",
        "COPY;": "\xA9",
        "copy;": "\xA9",
        "Cscr;": "\u{1D49E}",
        "cscr;": "\u{1D4B8}",
        "csub;": "\u2ACF",
        "csup;": "\u2AD0",
        "cups;": "\u222A\uFE00",
        "Darr;": "\u21A1",
        "dArr;": "\u21D3",
        "darr;": "\u2193",
        "dash;": "\u2010",
        "dHar;": "\u2965",
        "diam;": "\u22C4",
        "DJcy;": "\u0402",
        "djcy;": "\u0452",
        "Dopf;": "\u{1D53B}",
        "dopf;": "\u{1D555}",
        "Dscr;": "\u{1D49F}",
        "dscr;": "\u{1D4B9}",
        "DScy;": "\u0405",
        "dscy;": "\u0455",
        "dsol;": "\u29F6",
        "dtri;": "\u25BF",
        "DZcy;": "\u040F",
        "dzcy;": "\u045F",
        "ecir;": "\u2256",
        Ecirc: "\xCA",
        ecirc: "\xEA",
        "Edot;": "\u0116",
        "eDot;": "\u2251",
        "edot;": "\u0117",
        "emsp;": "\u2003",
        "ensp;": "\u2002",
        "Eopf;": "\u{1D53C}",
        "eopf;": "\u{1D556}",
        "epar;": "\u22D5",
        "epsi;": "\u03B5",
        "Escr;": "\u2130",
        "escr;": "\u212F",
        "Esim;": "\u2A73",
        "esim;": "\u2242",
        "Euml;": "\xCB",
        "euml;": "\xEB",
        "euro;": "\u20AC",
        "excl;": "!",
        "flat;": "\u266D",
        "fnof;": "\u0192",
        "Fopf;": "\u{1D53D}",
        "fopf;": "\u{1D557}",
        "fork;": "\u22D4",
        "Fscr;": "\u2131",
        "fscr;": "\u{1D4BB}",
        "Gdot;": "\u0120",
        "gdot;": "\u0121",
        "geqq;": "\u2267",
        "gesl;": "\u22DB\uFE00",
        "GJcy;": "\u0403",
        "gjcy;": "\u0453",
        "gnap;": "\u2A8A",
        "gneq;": "\u2A88",
        "Gopf;": "\u{1D53E}",
        "gopf;": "\u{1D558}",
        "Gscr;": "\u{1D4A2}",
        "gscr;": "\u210A",
        "gsim;": "\u2273",
        "gtcc;": "\u2AA7",
        "gvnE;": "\u2269\uFE00",
        "half;": "\xBD",
        "hArr;": "\u21D4",
        "harr;": "\u2194",
        "hbar;": "\u210F",
        "Hopf;": "\u210D",
        "hopf;": "\u{1D559}",
        "Hscr;": "\u210B",
        "hscr;": "\u{1D4BD}",
        Icirc: "\xCE",
        icirc: "\xEE",
        "Idot;": "\u0130",
        "IEcy;": "\u0415",
        "iecy;": "\u0435",
        iexcl: "\xA1",
        "imof;": "\u22B7",
        "IOcy;": "\u0401",
        "iocy;": "\u0451",
        "Iopf;": "\u{1D540}",
        "iopf;": "\u{1D55A}",
        "Iota;": "\u0399",
        "iota;": "\u03B9",
        "Iscr;": "\u2110",
        "iscr;": "\u{1D4BE}",
        "isin;": "\u2208",
        "Iuml;": "\xCF",
        "iuml;": "\xEF",
        "Jopf;": "\u{1D541}",
        "jopf;": "\u{1D55B}",
        "Jscr;": "\u{1D4A5}",
        "jscr;": "\u{1D4BF}",
        "KHcy;": "\u0425",
        "khcy;": "\u0445",
        "KJcy;": "\u040C",
        "kjcy;": "\u045C",
        "Kopf;": "\u{1D542}",
        "kopf;": "\u{1D55C}",
        "Kscr;": "\u{1D4A6}",
        "kscr;": "\u{1D4C0}",
        "Lang;": "\u27EA",
        "lang;": "\u27E8",
        laquo: "\xAB",
        "Larr;": "\u219E",
        "lArr;": "\u21D0",
        "larr;": "\u2190",
        "late;": "\u2AAD",
        "lcub;": "{",
        "ldca;": "\u2936",
        "ldsh;": "\u21B2",
        "leqq;": "\u2266",
        "lesg;": "\u22DA\uFE00",
        "lHar;": "\u2962",
        "LJcy;": "\u0409",
        "ljcy;": "\u0459",
        "lnap;": "\u2A89",
        "lneq;": "\u2A87",
        "Lopf;": "\u{1D543}",
        "lopf;": "\u{1D55D}",
        "lozf;": "\u29EB",
        "lpar;": "(",
        "Lscr;": "\u2112",
        "lscr;": "\u{1D4C1}",
        "lsim;": "\u2272",
        "lsqb;": "[",
        "ltcc;": "\u2AA6",
        "ltri;": "\u25C3",
        "lvnE;": "\u2268\uFE00",
        "macr;": "\xAF",
        "male;": "\u2642",
        "malt;": "\u2720",
        micro: "\xB5",
        "mlcp;": "\u2ADB",
        "mldr;": "\u2026",
        "Mopf;": "\u{1D544}",
        "mopf;": "\u{1D55E}",
        "Mscr;": "\u2133",
        "mscr;": "\u{1D4C2}",
        "nang;": "\u2220\u20D2",
        "napE;": "\u2A70\u0338",
        "nbsp;": "\xA0",
        "ncap;": "\u2A43",
        "ncup;": "\u2A42",
        "ngeq;": "\u2271",
        "nges;": "\u2A7E\u0338",
        "ngtr;": "\u226F",
        "nGtv;": "\u226B\u0338",
        "nisd;": "\u22FA",
        "NJcy;": "\u040A",
        "njcy;": "\u045A",
        "nldr;": "\u2025",
        "nleq;": "\u2270",
        "nles;": "\u2A7D\u0338",
        "nLtv;": "\u226A\u0338",
        "nmid;": "\u2224",
        "Nopf;": "\u2115",
        "nopf;": "\u{1D55F}",
        "npar;": "\u2226",
        "npre;": "\u2AAF\u0338",
        "nsce;": "\u2AB0\u0338",
        "Nscr;": "\u{1D4A9}",
        "nscr;": "\u{1D4C3}",
        "nsim;": "\u2241",
        "nsub;": "\u2284",
        "nsup;": "\u2285",
        "ntgl;": "\u2279",
        "ntlg;": "\u2278",
        "nvap;": "\u224D\u20D2",
        "nvge;": "\u2265\u20D2",
        "nvgt;": ">\u20D2",
        "nvle;": "\u2264\u20D2",
        "nvlt;": "<\u20D2",
        "oast;": "\u229B",
        "ocir;": "\u229A",
        Ocirc: "\xD4",
        ocirc: "\xF4",
        "odiv;": "\u2A38",
        "odot;": "\u2299",
        "ogon;": "\u02DB",
        "oint;": "\u222E",
        "omid;": "\u29B6",
        "Oopf;": "\u{1D546}",
        "oopf;": "\u{1D560}",
        "opar;": "\u29B7",
        "ordf;": "\xAA",
        "ordm;": "\xBA",
        "oror;": "\u2A56",
        "Oscr;": "\u{1D4AA}",
        "oscr;": "\u2134",
        "osol;": "\u2298",
        "Ouml;": "\xD6",
        "ouml;": "\xF6",
        "para;": "\xB6",
        "part;": "\u2202",
        "perp;": "\u22A5",
        "phiv;": "\u03D5",
        "plus;": "+",
        "Popf;": "\u2119",
        "popf;": "\u{1D561}",
        pound: "\xA3",
        "prap;": "\u2AB7",
        "prec;": "\u227A",
        "prnE;": "\u2AB5",
        "prod;": "\u220F",
        "prop;": "\u221D",
        "Pscr;": "\u{1D4AB}",
        "pscr;": "\u{1D4C5}",
        "qint;": "\u2A0C",
        "Qopf;": "\u211A",
        "qopf;": "\u{1D562}",
        "Qscr;": "\u{1D4AC}",
        "qscr;": "\u{1D4C6}",
        "QUOT;": '"',
        "quot;": '"',
        "race;": "\u223D\u0331",
        "Rang;": "\u27EB",
        "rang;": "\u27E9",
        raquo: "\xBB",
        "Rarr;": "\u21A0",
        "rArr;": "\u21D2",
        "rarr;": "\u2192",
        "rcub;": "}",
        "rdca;": "\u2937",
        "rdsh;": "\u21B3",
        "real;": "\u211C",
        "rect;": "\u25AD",
        "rHar;": "\u2964",
        "rhov;": "\u03F1",
        "ring;": "\u02DA",
        "Ropf;": "\u211D",
        "ropf;": "\u{1D563}",
        "rpar;": ")",
        "Rscr;": "\u211B",
        "rscr;": "\u{1D4C7}",
        "rsqb;": "]",
        "rtri;": "\u25B9",
        "scap;": "\u2AB8",
        "scnE;": "\u2AB6",
        "sdot;": "\u22C5",
        "sect;": "\xA7",
        "semi;": ";",
        "sext;": "\u2736",
        "SHcy;": "\u0428",
        "shcy;": "\u0448",
        "sime;": "\u2243",
        "simg;": "\u2A9E",
        "siml;": "\u2A9D",
        "smid;": "\u2223",
        "smte;": "\u2AAC",
        "solb;": "\u29C4",
        "Sopf;": "\u{1D54A}",
        "sopf;": "\u{1D564}",
        "spar;": "\u2225",
        "Sqrt;": "\u221A",
        "squf;": "\u25AA",
        "Sscr;": "\u{1D4AE}",
        "sscr;": "\u{1D4C8}",
        "Star;": "\u22C6",
        "star;": "\u2606",
        "subE;": "\u2AC5",
        "sube;": "\u2286",
        "succ;": "\u227B",
        "sung;": "\u266A",
        "sup1;": "\xB9",
        "sup2;": "\xB2",
        "sup3;": "\xB3",
        "supE;": "\u2AC6",
        "supe;": "\u2287",
        szlig: "\xDF",
        "tbrk;": "\u23B4",
        "tdot;": "\u20DB",
        THORN: "\xDE",
        thorn: "\xFE",
        times: "\xD7",
        "tint;": "\u222D",
        "toea;": "\u2928",
        "Topf;": "\u{1D54B}",
        "topf;": "\u{1D565}",
        "tosa;": "\u2929",
        "trie;": "\u225C",
        "Tscr;": "\u{1D4AF}",
        "tscr;": "\u{1D4C9}",
        "TScy;": "\u0426",
        "tscy;": "\u0446",
        "Uarr;": "\u219F",
        "uArr;": "\u21D1",
        "uarr;": "\u2191",
        Ucirc: "\xDB",
        ucirc: "\xFB",
        "uHar;": "\u2963",
        "Uopf;": "\u{1D54C}",
        "uopf;": "\u{1D566}",
        "Upsi;": "\u03D2",
        "upsi;": "\u03C5",
        "Uscr;": "\u{1D4B0}",
        "uscr;": "\u{1D4CA}",
        "utri;": "\u25B5",
        "Uuml;": "\xDC",
        "uuml;": "\xFC",
        "vArr;": "\u21D5",
        "varr;": "\u2195",
        "Vbar;": "\u2AEB",
        "vBar;": "\u2AE8",
        "Vert;": "\u2016",
        "vert;": "|",
        "Vopf;": "\u{1D54D}",
        "vopf;": "\u{1D567}",
        "Vscr;": "\u{1D4B1}",
        "vscr;": "\u{1D4CB}",
        "Wopf;": "\u{1D54E}",
        "wopf;": "\u{1D568}",
        "Wscr;": "\u{1D4B2}",
        "wscr;": "\u{1D4CC}",
        "xcap;": "\u22C2",
        "xcup;": "\u22C3",
        "xmap;": "\u27FC",
        "xnis;": "\u22FB",
        "Xopf;": "\u{1D54F}",
        "xopf;": "\u{1D569}",
        "Xscr;": "\u{1D4B3}",
        "xscr;": "\u{1D4CD}",
        "xvee;": "\u22C1",
        "YAcy;": "\u042F",
        "yacy;": "\u044F",
        "YIcy;": "\u0407",
        "yicy;": "\u0457",
        "Yopf;": "\u{1D550}",
        "yopf;": "\u{1D56A}",
        "Yscr;": "\u{1D4B4}",
        "yscr;": "\u{1D4CE}",
        "YUcy;": "\u042E",
        "yucy;": "\u044E",
        "Yuml;": "\u0178",
        "yuml;": "\xFF",
        "Zdot;": "\u017B",
        "zdot;": "\u017C",
        "Zeta;": "\u0396",
        "zeta;": "\u03B6",
        "ZHcy;": "\u0416",
        "zhcy;": "\u0436",
        "Zopf;": "\u2124",
        "zopf;": "\u{1D56B}",
        "Zscr;": "\u{1D4B5}",
        "zscr;": "\u{1D4CF}",
        "zwnj;": "\u200C",
        Aacute: "\xC1",
        aacute: "\xE1",
        "Acirc;": "\xC2",
        "acirc;": "\xE2",
        "acute;": "\xB4",
        "AElig;": "\xC6",
        "aelig;": "\xE6",
        Agrave: "\xC0",
        agrave: "\xE0",
        "aleph;": "\u2135",
        "Alpha;": "\u0391",
        "alpha;": "\u03B1",
        "Amacr;": "\u0100",
        "amacr;": "\u0101",
        "amalg;": "\u2A3F",
        "angle;": "\u2220",
        "angrt;": "\u221F",
        "angst;": "\xC5",
        "Aogon;": "\u0104",
        "aogon;": "\u0105",
        "Aring;": "\xC5",
        "aring;": "\xE5",
        "asymp;": "\u2248",
        Atilde: "\xC3",
        atilde: "\xE3",
        "awint;": "\u2A11",
        "bcong;": "\u224C",
        "bdquo;": "\u201E",
        "bepsi;": "\u03F6",
        "blank;": "\u2423",
        "blk12;": "\u2592",
        "blk14;": "\u2591",
        "blk34;": "\u2593",
        "block;": "\u2588",
        "boxDL;": "\u2557",
        "boxDl;": "\u2556",
        "boxdL;": "\u2555",
        "boxdl;": "\u2510",
        "boxDR;": "\u2554",
        "boxDr;": "\u2553",
        "boxdR;": "\u2552",
        "boxdr;": "\u250C",
        "boxHD;": "\u2566",
        "boxHd;": "\u2564",
        "boxhD;": "\u2565",
        "boxhd;": "\u252C",
        "boxHU;": "\u2569",
        "boxHu;": "\u2567",
        "boxhU;": "\u2568",
        "boxhu;": "\u2534",
        "boxUL;": "\u255D",
        "boxUl;": "\u255C",
        "boxuL;": "\u255B",
        "boxul;": "\u2518",
        "boxUR;": "\u255A",
        "boxUr;": "\u2559",
        "boxuR;": "\u2558",
        "boxur;": "\u2514",
        "boxVH;": "\u256C",
        "boxVh;": "\u256B",
        "boxvH;": "\u256A",
        "boxvh;": "\u253C",
        "boxVL;": "\u2563",
        "boxVl;": "\u2562",
        "boxvL;": "\u2561",
        "boxvl;": "\u2524",
        "boxVR;": "\u2560",
        "boxVr;": "\u255F",
        "boxvR;": "\u255E",
        "boxvr;": "\u251C",
        "Breve;": "\u02D8",
        "breve;": "\u02D8",
        brvbar: "\xA6",
        "bsemi;": "\u204F",
        "bsime;": "\u22CD",
        "bsolb;": "\u29C5",
        "bumpE;": "\u2AAE",
        "bumpe;": "\u224F",
        "caret;": "\u2041",
        "caron;": "\u02C7",
        "ccaps;": "\u2A4D",
        Ccedil: "\xC7",
        ccedil: "\xE7",
        "Ccirc;": "\u0108",
        "ccirc;": "\u0109",
        "ccups;": "\u2A4C",
        "cedil;": "\xB8",
        "check;": "\u2713",
        "clubs;": "\u2663",
        "Colon;": "\u2237",
        "colon;": ":",
        "comma;": ",",
        "crarr;": "\u21B5",
        "Cross;": "\u2A2F",
        "cross;": "\u2717",
        "csube;": "\u2AD1",
        "csupe;": "\u2AD2",
        "ctdot;": "\u22EF",
        "cuepr;": "\u22DE",
        "cuesc;": "\u22DF",
        "cupor;": "\u2A45",
        curren: "\xA4",
        "cuvee;": "\u22CE",
        "cuwed;": "\u22CF",
        "cwint;": "\u2231",
        "Dashv;": "\u2AE4",
        "dashv;": "\u22A3",
        "dblac;": "\u02DD",
        "ddarr;": "\u21CA",
        "Delta;": "\u0394",
        "delta;": "\u03B4",
        "dharl;": "\u21C3",
        "dharr;": "\u21C2",
        "diams;": "\u2666",
        "disin;": "\u22F2",
        divide: "\xF7",
        "doteq;": "\u2250",
        "dtdot;": "\u22F1",
        "dtrif;": "\u25BE",
        "duarr;": "\u21F5",
        "duhar;": "\u296F",
        Eacute: "\xC9",
        eacute: "\xE9",
        "Ecirc;": "\xCA",
        "ecirc;": "\xEA",
        "eDDot;": "\u2A77",
        "efDot;": "\u2252",
        Egrave: "\xC8",
        egrave: "\xE8",
        "Emacr;": "\u0112",
        "emacr;": "\u0113",
        "empty;": "\u2205",
        "Eogon;": "\u0118",
        "eogon;": "\u0119",
        "eplus;": "\u2A71",
        "epsiv;": "\u03F5",
        "eqsim;": "\u2242",
        "Equal;": "\u2A75",
        "equiv;": "\u2261",
        "erarr;": "\u2971",
        "erDot;": "\u2253",
        "esdot;": "\u2250",
        "exist;": "\u2203",
        "fflig;": "\uFB00",
        "filig;": "\uFB01",
        "fjlig;": "fj",
        "fllig;": "\uFB02",
        "fltns;": "\u25B1",
        "forkv;": "\u2AD9",
        frac12: "\xBD",
        frac14: "\xBC",
        frac34: "\xBE",
        "frasl;": "\u2044",
        "frown;": "\u2322",
        "Gamma;": "\u0393",
        "gamma;": "\u03B3",
        "Gcirc;": "\u011C",
        "gcirc;": "\u011D",
        "gescc;": "\u2AA9",
        "gimel;": "\u2137",
        "gneqq;": "\u2269",
        "gnsim;": "\u22E7",
        "grave;": "`",
        "gsime;": "\u2A8E",
        "gsiml;": "\u2A90",
        "gtcir;": "\u2A7A",
        "gtdot;": "\u22D7",
        "Hacek;": "\u02C7",
        "harrw;": "\u21AD",
        "Hcirc;": "\u0124",
        "hcirc;": "\u0125",
        "hoarr;": "\u21FF",
        Iacute: "\xCD",
        iacute: "\xED",
        "Icirc;": "\xCE",
        "icirc;": "\xEE",
        "iexcl;": "\xA1",
        Igrave: "\xCC",
        igrave: "\xEC",
        "iiint;": "\u222D",
        "iiota;": "\u2129",
        "IJlig;": "\u0132",
        "ijlig;": "\u0133",
        "Imacr;": "\u012A",
        "imacr;": "\u012B",
        "image;": "\u2111",
        "imath;": "\u0131",
        "imped;": "\u01B5",
        "infin;": "\u221E",
        "Iogon;": "\u012E",
        "iogon;": "\u012F",
        "iprod;": "\u2A3C",
        iquest: "\xBF",
        "isinE;": "\u22F9",
        "isins;": "\u22F4",
        "isinv;": "\u2208",
        "Iukcy;": "\u0406",
        "iukcy;": "\u0456",
        "Jcirc;": "\u0134",
        "jcirc;": "\u0135",
        "jmath;": "\u0237",
        "Jukcy;": "\u0404",
        "jukcy;": "\u0454",
        "Kappa;": "\u039A",
        "kappa;": "\u03BA",
        "lAarr;": "\u21DA",
        "langd;": "\u2991",
        "laquo;": "\xAB",
        "larrb;": "\u21E4",
        "lates;": "\u2AAD\uFE00",
        "lBarr;": "\u290E",
        "lbarr;": "\u290C",
        "lbbrk;": "\u2772",
        "lbrke;": "\u298B",
        "lceil;": "\u2308",
        "ldquo;": "\u201C",
        "lescc;": "\u2AA8",
        "lhard;": "\u21BD",
        "lharu;": "\u21BC",
        "lhblk;": "\u2584",
        "llarr;": "\u21C7",
        "lltri;": "\u25FA",
        "lneqq;": "\u2268",
        "lnsim;": "\u22E6",
        "loang;": "\u27EC",
        "loarr;": "\u21FD",
        "lobrk;": "\u27E6",
        "lopar;": "\u2985",
        "lrarr;": "\u21C6",
        "lrhar;": "\u21CB",
        "lrtri;": "\u22BF",
        "lsime;": "\u2A8D",
        "lsimg;": "\u2A8F",
        "lsquo;": "\u2018",
        "ltcir;": "\u2A79",
        "ltdot;": "\u22D6",
        "ltrie;": "\u22B4",
        "ltrif;": "\u25C2",
        "mdash;": "\u2014",
        "mDDot;": "\u223A",
        "micro;": "\xB5",
        middot: "\xB7",
        "minus;": "\u2212",
        "mumap;": "\u22B8",
        "nabla;": "\u2207",
        "napid;": "\u224B\u0338",
        "napos;": "\u0149",
        "natur;": "\u266E",
        "nbump;": "\u224E\u0338",
        "ncong;": "\u2247",
        "ndash;": "\u2013",
        "neArr;": "\u21D7",
        "nearr;": "\u2197",
        "nedot;": "\u2250\u0338",
        "nesim;": "\u2242\u0338",
        "ngeqq;": "\u2267\u0338",
        "ngsim;": "\u2275",
        "nhArr;": "\u21CE",
        "nharr;": "\u21AE",
        "nhpar;": "\u2AF2",
        "nlArr;": "\u21CD",
        "nlarr;": "\u219A",
        "nleqq;": "\u2266\u0338",
        "nless;": "\u226E",
        "nlsim;": "\u2274",
        "nltri;": "\u22EA",
        "notin;": "\u2209",
        "notni;": "\u220C",
        "npart;": "\u2202\u0338",
        "nprec;": "\u2280",
        "nrArr;": "\u21CF",
        "nrarr;": "\u219B",
        "nrtri;": "\u22EB",
        "nsime;": "\u2244",
        "nsmid;": "\u2224",
        "nspar;": "\u2226",
        "nsubE;": "\u2AC5\u0338",
        "nsube;": "\u2288",
        "nsucc;": "\u2281",
        "nsupE;": "\u2AC6\u0338",
        "nsupe;": "\u2289",
        Ntilde: "\xD1",
        ntilde: "\xF1",
        "numsp;": "\u2007",
        "nvsim;": "\u223C\u20D2",
        "nwArr;": "\u21D6",
        "nwarr;": "\u2196",
        Oacute: "\xD3",
        oacute: "\xF3",
        "Ocirc;": "\xD4",
        "ocirc;": "\xF4",
        "odash;": "\u229D",
        "OElig;": "\u0152",
        "oelig;": "\u0153",
        "ofcir;": "\u29BF",
        Ograve: "\xD2",
        ograve: "\xF2",
        "ohbar;": "\u29B5",
        "olarr;": "\u21BA",
        "olcir;": "\u29BE",
        "oline;": "\u203E",
        "Omacr;": "\u014C",
        "omacr;": "\u014D",
        "Omega;": "\u03A9",
        "omega;": "\u03C9",
        "operp;": "\u29B9",
        "oplus;": "\u2295",
        "orarr;": "\u21BB",
        "order;": "\u2134",
        Oslash: "\xD8",
        oslash: "\xF8",
        Otilde: "\xD5",
        otilde: "\xF5",
        "ovbar;": "\u233D",
        "parsl;": "\u2AFD",
        "phone;": "\u260E",
        "plusb;": "\u229E",
        "pluse;": "\u2A72",
        plusmn: "\xB1",
        "pound;": "\xA3",
        "prcue;": "\u227C",
        "Prime;": "\u2033",
        "prime;": "\u2032",
        "prnap;": "\u2AB9",
        "prsim;": "\u227E",
        "quest;": "?",
        "rAarr;": "\u21DB",
        "radic;": "\u221A",
        "rangd;": "\u2992",
        "range;": "\u29A5",
        "raquo;": "\xBB",
        "rarrb;": "\u21E5",
        "rarrc;": "\u2933",
        "rarrw;": "\u219D",
        "ratio;": "\u2236",
        "RBarr;": "\u2910",
        "rBarr;": "\u290F",
        "rbarr;": "\u290D",
        "rbbrk;": "\u2773",
        "rbrke;": "\u298C",
        "rceil;": "\u2309",
        "rdquo;": "\u201D",
        "reals;": "\u211D",
        "rhard;": "\u21C1",
        "rharu;": "\u21C0",
        "rlarr;": "\u21C4",
        "rlhar;": "\u21CC",
        "rnmid;": "\u2AEE",
        "roang;": "\u27ED",
        "roarr;": "\u21FE",
        "robrk;": "\u27E7",
        "ropar;": "\u2986",
        "rrarr;": "\u21C9",
        "rsquo;": "\u2019",
        "rtrie;": "\u22B5",
        "rtrif;": "\u25B8",
        "sbquo;": "\u201A",
        "sccue;": "\u227D",
        "Scirc;": "\u015C",
        "scirc;": "\u015D",
        "scnap;": "\u2ABA",
        "scsim;": "\u227F",
        "sdotb;": "\u22A1",
        "sdote;": "\u2A66",
        "seArr;": "\u21D8",
        "searr;": "\u2198",
        "setmn;": "\u2216",
        "sharp;": "\u266F",
        "Sigma;": "\u03A3",
        "sigma;": "\u03C3",
        "simeq;": "\u2243",
        "simgE;": "\u2AA0",
        "simlE;": "\u2A9F",
        "simne;": "\u2246",
        "slarr;": "\u2190",
        "smile;": "\u2323",
        "smtes;": "\u2AAC\uFE00",
        "sqcap;": "\u2293",
        "sqcup;": "\u2294",
        "sqsub;": "\u228F",
        "sqsup;": "\u2290",
        "srarr;": "\u2192",
        "starf;": "\u2605",
        "strns;": "\xAF",
        "subnE;": "\u2ACB",
        "subne;": "\u228A",
        "supnE;": "\u2ACC",
        "supne;": "\u228B",
        "swArr;": "\u21D9",
        "swarr;": "\u2199",
        "szlig;": "\xDF",
        "Theta;": "\u0398",
        "theta;": "\u03B8",
        "thkap;": "\u2248",
        "THORN;": "\xDE",
        "thorn;": "\xFE",
        "Tilde;": "\u223C",
        "tilde;": "\u02DC",
        "times;": "\xD7",
        "TRADE;": "\u2122",
        "trade;": "\u2122",
        "trisb;": "\u29CD",
        "TSHcy;": "\u040B",
        "tshcy;": "\u045B",
        "twixt;": "\u226C",
        Uacute: "\xDA",
        uacute: "\xFA",
        "Ubrcy;": "\u040E",
        "ubrcy;": "\u045E",
        "Ucirc;": "\xDB",
        "ucirc;": "\xFB",
        "udarr;": "\u21C5",
        "udhar;": "\u296E",
        Ugrave: "\xD9",
        ugrave: "\xF9",
        "uharl;": "\u21BF",
        "uharr;": "\u21BE",
        "uhblk;": "\u2580",
        "ultri;": "\u25F8",
        "Umacr;": "\u016A",
        "umacr;": "\u016B",
        "Union;": "\u22C3",
        "Uogon;": "\u0172",
        "uogon;": "\u0173",
        "uplus;": "\u228E",
        "upsih;": "\u03D2",
        "UpTee;": "\u22A5",
        "Uring;": "\u016E",
        "uring;": "\u016F",
        "urtri;": "\u25F9",
        "utdot;": "\u22F0",
        "utrif;": "\u25B4",
        "uuarr;": "\u21C8",
        "varpi;": "\u03D6",
        "vBarv;": "\u2AE9",
        "VDash;": "\u22AB",
        "Vdash;": "\u22A9",
        "vDash;": "\u22A8",
        "vdash;": "\u22A2",
        "veeeq;": "\u225A",
        "vltri;": "\u22B2",
        "vnsub;": "\u2282\u20D2",
        "vnsup;": "\u2283\u20D2",
        "vprop;": "\u221D",
        "vrtri;": "\u22B3",
        "Wcirc;": "\u0174",
        "wcirc;": "\u0175",
        "Wedge;": "\u22C0",
        "wedge;": "\u2227",
        "xcirc;": "\u25EF",
        "xdtri;": "\u25BD",
        "xhArr;": "\u27FA",
        "xharr;": "\u27F7",
        "xlArr;": "\u27F8",
        "xlarr;": "\u27F5",
        "xodot;": "\u2A00",
        "xrArr;": "\u27F9",
        "xrarr;": "\u27F6",
        "xutri;": "\u25B3",
        Yacute: "\xDD",
        yacute: "\xFD",
        "Ycirc;": "\u0176",
        "ycirc;": "\u0177",
        "Aacute;": "\xC1",
        "aacute;": "\xE1",
        "Abreve;": "\u0102",
        "abreve;": "\u0103",
        "Agrave;": "\xC0",
        "agrave;": "\xE0",
        "andand;": "\u2A55",
        "angmsd;": "\u2221",
        "angsph;": "\u2222",
        "apacir;": "\u2A6F",
        "approx;": "\u2248",
        "Assign;": "\u2254",
        "Atilde;": "\xC3",
        "atilde;": "\xE3",
        "barvee;": "\u22BD",
        "Barwed;": "\u2306",
        "barwed;": "\u2305",
        "becaus;": "\u2235",
        "bernou;": "\u212C",
        "bigcap;": "\u22C2",
        "bigcup;": "\u22C3",
        "bigvee;": "\u22C1",
        "bkarow;": "\u290D",
        "bottom;": "\u22A5",
        "bowtie;": "\u22C8",
        "boxbox;": "\u29C9",
        "bprime;": "\u2035",
        "brvbar;": "\xA6",
        "bullet;": "\u2022",
        "Bumpeq;": "\u224E",
        "bumpeq;": "\u224F",
        "Cacute;": "\u0106",
        "cacute;": "\u0107",
        "capand;": "\u2A44",
        "capcap;": "\u2A4B",
        "capcup;": "\u2A47",
        "capdot;": "\u2A40",
        "Ccaron;": "\u010C",
        "ccaron;": "\u010D",
        "Ccedil;": "\xC7",
        "ccedil;": "\xE7",
        "circeq;": "\u2257",
        "cirmid;": "\u2AEF",
        "Colone;": "\u2A74",
        "colone;": "\u2254",
        "commat;": "@",
        "compfn;": "\u2218",
        "Conint;": "\u222F",
        "conint;": "\u222E",
        "coprod;": "\u2210",
        "copysr;": "\u2117",
        "cularr;": "\u21B6",
        "CupCap;": "\u224D",
        "cupcap;": "\u2A46",
        "cupcup;": "\u2A4A",
        "cupdot;": "\u228D",
        "curarr;": "\u21B7",
        "curren;": "\xA4",
        "cylcty;": "\u232D",
        "Dagger;": "\u2021",
        "dagger;": "\u2020",
        "daleth;": "\u2138",
        "Dcaron;": "\u010E",
        "dcaron;": "\u010F",
        "dfisht;": "\u297F",
        "divide;": "\xF7",
        "divonx;": "\u22C7",
        "dlcorn;": "\u231E",
        "dlcrop;": "\u230D",
        "dollar;": "$",
        "DotDot;": "\u20DC",
        "drcorn;": "\u231F",
        "drcrop;": "\u230C",
        "Dstrok;": "\u0110",
        "dstrok;": "\u0111",
        "Eacute;": "\xC9",
        "eacute;": "\xE9",
        "easter;": "\u2A6E",
        "Ecaron;": "\u011A",
        "ecaron;": "\u011B",
        "ecolon;": "\u2255",
        "Egrave;": "\xC8",
        "egrave;": "\xE8",
        "egsdot;": "\u2A98",
        "elsdot;": "\u2A97",
        "emptyv;": "\u2205",
        "emsp13;": "\u2004",
        "emsp14;": "\u2005",
        "eparsl;": "\u29E3",
        "eqcirc;": "\u2256",
        "equals;": "=",
        "equest;": "\u225F",
        "Exists;": "\u2203",
        "female;": "\u2640",
        "ffilig;": "\uFB03",
        "ffllig;": "\uFB04",
        "ForAll;": "\u2200",
        "forall;": "\u2200",
        "frac12;": "\xBD",
        "frac13;": "\u2153",
        "frac14;": "\xBC",
        "frac15;": "\u2155",
        "frac16;": "\u2159",
        "frac18;": "\u215B",
        "frac23;": "\u2154",
        "frac25;": "\u2156",
        "frac34;": "\xBE",
        "frac35;": "\u2157",
        "frac38;": "\u215C",
        "frac45;": "\u2158",
        "frac56;": "\u215A",
        "frac58;": "\u215D",
        "frac78;": "\u215E",
        "gacute;": "\u01F5",
        "Gammad;": "\u03DC",
        "gammad;": "\u03DD",
        "Gbreve;": "\u011E",
        "gbreve;": "\u011F",
        "Gcedil;": "\u0122",
        "gesdot;": "\u2A80",
        "gesles;": "\u2A94",
        "gtlPar;": "\u2995",
        "gtrarr;": "\u2978",
        "gtrdot;": "\u22D7",
        "gtrsim;": "\u2273",
        "hairsp;": "\u200A",
        "hamilt;": "\u210B",
        "HARDcy;": "\u042A",
        "hardcy;": "\u044A",
        "hearts;": "\u2665",
        "hellip;": "\u2026",
        "hercon;": "\u22B9",
        "homtht;": "\u223B",
        "horbar;": "\u2015",
        "hslash;": "\u210F",
        "Hstrok;": "\u0126",
        "hstrok;": "\u0127",
        "hybull;": "\u2043",
        "hyphen;": "\u2010",
        "Iacute;": "\xCD",
        "iacute;": "\xED",
        "Igrave;": "\xCC",
        "igrave;": "\xEC",
        "iiiint;": "\u2A0C",
        "iinfin;": "\u29DC",
        "incare;": "\u2105",
        "inodot;": "\u0131",
        "intcal;": "\u22BA",
        "iquest;": "\xBF",
        "isinsv;": "\u22F3",
        "Itilde;": "\u0128",
        "itilde;": "\u0129",
        "Jsercy;": "\u0408",
        "jsercy;": "\u0458",
        "kappav;": "\u03F0",
        "Kcedil;": "\u0136",
        "kcedil;": "\u0137",
        "kgreen;": "\u0138",
        "Lacute;": "\u0139",
        "lacute;": "\u013A",
        "lagran;": "\u2112",
        "Lambda;": "\u039B",
        "lambda;": "\u03BB",
        "langle;": "\u27E8",
        "larrfs;": "\u291D",
        "larrhk;": "\u21A9",
        "larrlp;": "\u21AB",
        "larrpl;": "\u2939",
        "larrtl;": "\u21A2",
        "lAtail;": "\u291B",
        "latail;": "\u2919",
        "lbrace;": "{",
        "lbrack;": "[",
        "Lcaron;": "\u013D",
        "lcaron;": "\u013E",
        "Lcedil;": "\u013B",
        "lcedil;": "\u013C",
        "ldquor;": "\u201E",
        "lesdot;": "\u2A7F",
        "lesges;": "\u2A93",
        "lfisht;": "\u297C",
        "lfloor;": "\u230A",
        "lharul;": "\u296A",
        "llhard;": "\u296B",
        "Lmidot;": "\u013F",
        "lmidot;": "\u0140",
        "lmoust;": "\u23B0",
        "loplus;": "\u2A2D",
        "lowast;": "\u2217",
        "lowbar;": "_",
        "lparlt;": "\u2993",
        "lrhard;": "\u296D",
        "lsaquo;": "\u2039",
        "lsquor;": "\u201A",
        "Lstrok;": "\u0141",
        "lstrok;": "\u0142",
        "lthree;": "\u22CB",
        "ltimes;": "\u22C9",
        "ltlarr;": "\u2976",
        "ltrPar;": "\u2996",
        "mapsto;": "\u21A6",
        "marker;": "\u25AE",
        "mcomma;": "\u2A29",
        "midast;": "*",
        "midcir;": "\u2AF0",
        "middot;": "\xB7",
        "minusb;": "\u229F",
        "minusd;": "\u2238",
        "mnplus;": "\u2213",
        "models;": "\u22A7",
        "mstpos;": "\u223E",
        "Nacute;": "\u0143",
        "nacute;": "\u0144",
        "nbumpe;": "\u224F\u0338",
        "Ncaron;": "\u0147",
        "ncaron;": "\u0148",
        "Ncedil;": "\u0145",
        "ncedil;": "\u0146",
        "nearhk;": "\u2924",
        "nequiv;": "\u2262",
        "nesear;": "\u2928",
        "nexist;": "\u2204",
        "nltrie;": "\u22EC",
        "notinE;": "\u22F9\u0338",
        "nparsl;": "\u2AFD\u20E5",
        "nprcue;": "\u22E0",
        "nrarrc;": "\u2933\u0338",
        "nrarrw;": "\u219D\u0338",
        "nrtrie;": "\u22ED",
        "nsccue;": "\u22E1",
        "nsimeq;": "\u2244",
        "Ntilde;": "\xD1",
        "ntilde;": "\xF1",
        "numero;": "\u2116",
        "nVDash;": "\u22AF",
        "nVdash;": "\u22AE",
        "nvDash;": "\u22AD",
        "nvdash;": "\u22AC",
        "nvHarr;": "\u2904",
        "nvlArr;": "\u2902",
        "nvrArr;": "\u2903",
        "nwarhk;": "\u2923",
        "nwnear;": "\u2927",
        "Oacute;": "\xD3",
        "oacute;": "\xF3",
        "Odblac;": "\u0150",
        "odblac;": "\u0151",
        "odsold;": "\u29BC",
        "Ograve;": "\xD2",
        "ograve;": "\xF2",
        "ominus;": "\u2296",
        "origof;": "\u22B6",
        "Oslash;": "\xD8",
        "oslash;": "\xF8",
        "Otilde;": "\xD5",
        "otilde;": "\xF5",
        "Otimes;": "\u2A37",
        "otimes;": "\u2297",
        "parsim;": "\u2AF3",
        "percnt;": "%",
        "period;": ".",
        "permil;": "\u2030",
        "phmmat;": "\u2133",
        "planck;": "\u210F",
        "plankv;": "\u210F",
        "plusdo;": "\u2214",
        "plusdu;": "\u2A25",
        "plusmn;": "\xB1",
        "preceq;": "\u2AAF",
        "primes;": "\u2119",
        "prnsim;": "\u22E8",
        "propto;": "\u221D",
        "prurel;": "\u22B0",
        "puncsp;": "\u2008",
        "qprime;": "\u2057",
        "Racute;": "\u0154",
        "racute;": "\u0155",
        "rangle;": "\u27E9",
        "rarrap;": "\u2975",
        "rarrfs;": "\u291E",
        "rarrhk;": "\u21AA",
        "rarrlp;": "\u21AC",
        "rarrpl;": "\u2945",
        "Rarrtl;": "\u2916",
        "rarrtl;": "\u21A3",
        "rAtail;": "\u291C",
        "ratail;": "\u291A",
        "rbrace;": "}",
        "rbrack;": "]",
        "Rcaron;": "\u0158",
        "rcaron;": "\u0159",
        "Rcedil;": "\u0156",
        "rcedil;": "\u0157",
        "rdquor;": "\u201D",
        "rfisht;": "\u297D",
        "rfloor;": "\u230B",
        "rharul;": "\u296C",
        "rmoust;": "\u23B1",
        "roplus;": "\u2A2E",
        "rpargt;": "\u2994",
        "rsaquo;": "\u203A",
        "rsquor;": "\u2019",
        "rthree;": "\u22CC",
        "rtimes;": "\u22CA",
        "Sacute;": "\u015A",
        "sacute;": "\u015B",
        "Scaron;": "\u0160",
        "scaron;": "\u0161",
        "Scedil;": "\u015E",
        "scedil;": "\u015F",
        "scnsim;": "\u22E9",
        "searhk;": "\u2925",
        "seswar;": "\u2929",
        "sfrown;": "\u2322",
        "SHCHcy;": "\u0429",
        "shchcy;": "\u0449",
        "sigmaf;": "\u03C2",
        "sigmav;": "\u03C2",
        "simdot;": "\u2A6A",
        "smashp;": "\u2A33",
        "SOFTcy;": "\u042C",
        "softcy;": "\u044C",
        "solbar;": "\u233F",
        "spades;": "\u2660",
        "sqcaps;": "\u2293\uFE00",
        "sqcups;": "\u2294\uFE00",
        "sqsube;": "\u2291",
        "sqsupe;": "\u2292",
        "Square;": "\u25A1",
        "square;": "\u25A1",
        "squarf;": "\u25AA",
        "ssetmn;": "\u2216",
        "ssmile;": "\u2323",
        "sstarf;": "\u22C6",
        "subdot;": "\u2ABD",
        "Subset;": "\u22D0",
        "subset;": "\u2282",
        "subsim;": "\u2AC7",
        "subsub;": "\u2AD5",
        "subsup;": "\u2AD3",
        "succeq;": "\u2AB0",
        "supdot;": "\u2ABE",
        "Supset;": "\u22D1",
        "supset;": "\u2283",
        "supsim;": "\u2AC8",
        "supsub;": "\u2AD4",
        "supsup;": "\u2AD6",
        "swarhk;": "\u2926",
        "swnwar;": "\u292A",
        "target;": "\u2316",
        "Tcaron;": "\u0164",
        "tcaron;": "\u0165",
        "Tcedil;": "\u0162",
        "tcedil;": "\u0163",
        "telrec;": "\u2315",
        "there4;": "\u2234",
        "thetav;": "\u03D1",
        "thinsp;": "\u2009",
        "thksim;": "\u223C",
        "timesb;": "\u22A0",
        "timesd;": "\u2A30",
        "topbot;": "\u2336",
        "topcir;": "\u2AF1",
        "tprime;": "\u2034",
        "tridot;": "\u25EC",
        "Tstrok;": "\u0166",
        "tstrok;": "\u0167",
        "Uacute;": "\xDA",
        "uacute;": "\xFA",
        "Ubreve;": "\u016C",
        "ubreve;": "\u016D",
        "Udblac;": "\u0170",
        "udblac;": "\u0171",
        "ufisht;": "\u297E",
        "Ugrave;": "\xD9",
        "ugrave;": "\xF9",
        "ulcorn;": "\u231C",
        "ulcrop;": "\u230F",
        "urcorn;": "\u231D",
        "urcrop;": "\u230E",
        "Utilde;": "\u0168",
        "utilde;": "\u0169",
        "vangrt;": "\u299C",
        "varphi;": "\u03D5",
        "varrho;": "\u03F1",
        "Vdashl;": "\u2AE6",
        "veebar;": "\u22BB",
        "vellip;": "\u22EE",
        "Verbar;": "\u2016",
        "verbar;": "|",
        "vsubnE;": "\u2ACB\uFE00",
        "vsubne;": "\u228A\uFE00",
        "vsupnE;": "\u2ACC\uFE00",
        "vsupne;": "\u228B\uFE00",
        "Vvdash;": "\u22AA",
        "wedbar;": "\u2A5F",
        "wedgeq;": "\u2259",
        "weierp;": "\u2118",
        "wreath;": "\u2240",
        "xoplus;": "\u2A01",
        "xotime;": "\u2A02",
        "xsqcup;": "\u2A06",
        "xuplus;": "\u2A04",
        "xwedge;": "\u22C0",
        "Yacute;": "\xDD",
        "yacute;": "\xFD",
        "Zacute;": "\u0179",
        "zacute;": "\u017A",
        "Zcaron;": "\u017D",
        "zcaron;": "\u017E",
        "zeetrf;": "\u2128",
        "alefsym;": "\u2135",
        "angrtvb;": "\u22BE",
        "angzarr;": "\u237C",
        "asympeq;": "\u224D",
        "backsim;": "\u223D",
        "Because;": "\u2235",
        "because;": "\u2235",
        "bemptyv;": "\u29B0",
        "between;": "\u226C",
        "bigcirc;": "\u25EF",
        "bigodot;": "\u2A00",
        "bigstar;": "\u2605",
        "bnequiv;": "\u2261\u20E5",
        "boxplus;": "\u229E",
        "Cayleys;": "\u212D",
        "Cconint;": "\u2230",
        "ccupssm;": "\u2A50",
        "Cedilla;": "\xB8",
        "cemptyv;": "\u29B2",
        "cirscir;": "\u29C2",
        "coloneq;": "\u2254",
        "congdot;": "\u2A6D",
        "cudarrl;": "\u2938",
        "cudarrr;": "\u2935",
        "cularrp;": "\u293D",
        "curarrm;": "\u293C",
        "dbkarow;": "\u290F",
        "ddagger;": "\u2021",
        "ddotseq;": "\u2A77",
        "demptyv;": "\u29B1",
        "Diamond;": "\u22C4",
        "diamond;": "\u22C4",
        "digamma;": "\u03DD",
        "dotplus;": "\u2214",
        "DownTee;": "\u22A4",
        "dwangle;": "\u29A6",
        "Element;": "\u2208",
        "Epsilon;": "\u0395",
        "epsilon;": "\u03B5",
        "eqcolon;": "\u2255",
        "equivDD;": "\u2A78",
        "gesdoto;": "\u2A82",
        "gtquest;": "\u2A7C",
        "gtrless;": "\u2277",
        "harrcir;": "\u2948",
        "Implies;": "\u21D2",
        "intprod;": "\u2A3C",
        "isindot;": "\u22F5",
        "larrbfs;": "\u291F",
        "larrsim;": "\u2973",
        "lbrksld;": "\u298F",
        "lbrkslu;": "\u298D",
        "ldrdhar;": "\u2967",
        "LeftTee;": "\u22A3",
        "lesdoto;": "\u2A81",
        "lessdot;": "\u22D6",
        "lessgtr;": "\u2276",
        "lesssim;": "\u2272",
        "lotimes;": "\u2A34",
        "lozenge;": "\u25CA",
        "ltquest;": "\u2A7B",
        "luruhar;": "\u2966",
        "maltese;": "\u2720",
        "minusdu;": "\u2A2A",
        "napprox;": "\u2249",
        "natural;": "\u266E",
        "nearrow;": "\u2197",
        "NewLine;": "\n",
        "nexists;": "\u2204",
        "NoBreak;": "\u2060",
        "notinva;": "\u2209",
        "notinvb;": "\u22F7",
        "notinvc;": "\u22F6",
        "NotLess;": "\u226E",
        "notniva;": "\u220C",
        "notnivb;": "\u22FE",
        "notnivc;": "\u22FD",
        "npolint;": "\u2A14",
        "npreceq;": "\u2AAF\u0338",
        "nsqsube;": "\u22E2",
        "nsqsupe;": "\u22E3",
        "nsubset;": "\u2282\u20D2",
        "nsucceq;": "\u2AB0\u0338",
        "nsupset;": "\u2283\u20D2",
        "nvinfin;": "\u29DE",
        "nvltrie;": "\u22B4\u20D2",
        "nvrtrie;": "\u22B5\u20D2",
        "nwarrow;": "\u2196",
        "olcross;": "\u29BB",
        "Omicron;": "\u039F",
        "omicron;": "\u03BF",
        "orderof;": "\u2134",
        "orslope;": "\u2A57",
        "OverBar;": "\u203E",
        "pertenk;": "\u2031",
        "planckh;": "\u210E",
        "pluscir;": "\u2A22",
        "plussim;": "\u2A26",
        "plustwo;": "\u2A27",
        "precsim;": "\u227E",
        "Product;": "\u220F",
        "quatint;": "\u2A16",
        "questeq;": "\u225F",
        "rarrbfs;": "\u2920",
        "rarrsim;": "\u2974",
        "rbrksld;": "\u298E",
        "rbrkslu;": "\u2990",
        "rdldhar;": "\u2969",
        "realine;": "\u211B",
        "rotimes;": "\u2A35",
        "ruluhar;": "\u2968",
        "searrow;": "\u2198",
        "simplus;": "\u2A24",
        "simrarr;": "\u2972",
        "subedot;": "\u2AC3",
        "submult;": "\u2AC1",
        "subplus;": "\u2ABF",
        "subrarr;": "\u2979",
        "succsim;": "\u227F",
        "supdsub;": "\u2AD8",
        "supedot;": "\u2AC4",
        "suphsol;": "\u27C9",
        "suphsub;": "\u2AD7",
        "suplarr;": "\u297B",
        "supmult;": "\u2AC2",
        "supplus;": "\u2AC0",
        "swarrow;": "\u2199",
        "topfork;": "\u2ADA",
        "triplus;": "\u2A39",
        "tritime;": "\u2A3B",
        "UpArrow;": "\u2191",
        "Uparrow;": "\u21D1",
        "uparrow;": "\u2191",
        "Upsilon;": "\u03A5",
        "upsilon;": "\u03C5",
        "uwangle;": "\u29A7",
        "vzigzag;": "\u299A",
        "zigrarr;": "\u21DD",
        "andslope;": "\u2A58",
        "angmsdaa;": "\u29A8",
        "angmsdab;": "\u29A9",
        "angmsdac;": "\u29AA",
        "angmsdad;": "\u29AB",
        "angmsdae;": "\u29AC",
        "angmsdaf;": "\u29AD",
        "angmsdag;": "\u29AE",
        "angmsdah;": "\u29AF",
        "angrtvbd;": "\u299D",
        "approxeq;": "\u224A",
        "awconint;": "\u2233",
        "backcong;": "\u224C",
        "barwedge;": "\u2305",
        "bbrktbrk;": "\u23B6",
        "bigoplus;": "\u2A01",
        "bigsqcup;": "\u2A06",
        "biguplus;": "\u2A04",
        "bigwedge;": "\u22C0",
        "boxminus;": "\u229F",
        "boxtimes;": "\u22A0",
        "bsolhsub;": "\u27C8",
        "capbrcup;": "\u2A49",
        "circledR;": "\xAE",
        "circledS;": "\u24C8",
        "cirfnint;": "\u2A10",
        "clubsuit;": "\u2663",
        "cupbrcap;": "\u2A48",
        "curlyvee;": "\u22CE",
        "cwconint;": "\u2232",
        "DDotrahd;": "\u2911",
        "doteqdot;": "\u2251",
        "DotEqual;": "\u2250",
        "dotminus;": "\u2238",
        "drbkarow;": "\u2910",
        "dzigrarr;": "\u27FF",
        "elinters;": "\u23E7",
        "emptyset;": "\u2205",
        "eqvparsl;": "\u29E5",
        "fpartint;": "\u2A0D",
        "geqslant;": "\u2A7E",
        "gesdotol;": "\u2A84",
        "gnapprox;": "\u2A8A",
        "hksearow;": "\u2925",
        "hkswarow;": "\u2926",
        "imagline;": "\u2110",
        "imagpart;": "\u2111",
        "infintie;": "\u29DD",
        "integers;": "\u2124",
        "Integral;": "\u222B",
        "intercal;": "\u22BA",
        "intlarhk;": "\u2A17",
        "laemptyv;": "\u29B4",
        "ldrushar;": "\u294B",
        "leqslant;": "\u2A7D",
        "lesdotor;": "\u2A83",
        "LessLess;": "\u2AA1",
        "llcorner;": "\u231E",
        "lnapprox;": "\u2A89",
        "lrcorner;": "\u231F",
        "lurdshar;": "\u294A",
        "mapstoup;": "\u21A5",
        "multimap;": "\u22B8",
        "naturals;": "\u2115",
        "ncongdot;": "\u2A6D\u0338",
        "NotEqual;": "\u2260",
        "notindot;": "\u22F5\u0338",
        "NotTilde;": "\u2241",
        "otimesas;": "\u2A36",
        "parallel;": "\u2225",
        "PartialD;": "\u2202",
        "plusacir;": "\u2A23",
        "pointint;": "\u2A15",
        "Precedes;": "\u227A",
        "precneqq;": "\u2AB5",
        "precnsim;": "\u22E8",
        "profalar;": "\u232E",
        "profline;": "\u2312",
        "profsurf;": "\u2313",
        "raemptyv;": "\u29B3",
        "realpart;": "\u211C",
        "RightTee;": "\u22A2",
        "rppolint;": "\u2A12",
        "rtriltri;": "\u29CE",
        "scpolint;": "\u2A13",
        "setminus;": "\u2216",
        "shortmid;": "\u2223",
        "smeparsl;": "\u29E4",
        "sqsubset;": "\u228F",
        "sqsupset;": "\u2290",
        "subseteq;": "\u2286",
        "Succeeds;": "\u227B",
        "succneqq;": "\u2AB6",
        "succnsim;": "\u22E9",
        "SuchThat;": "\u220B",
        "Superset;": "\u2283",
        "supseteq;": "\u2287",
        "thetasym;": "\u03D1",
        "thicksim;": "\u223C",
        "timesbar;": "\u2A31",
        "triangle;": "\u25B5",
        "triminus;": "\u2A3A",
        "trpezium;": "\u23E2",
        "Uarrocir;": "\u2949",
        "ulcorner;": "\u231C",
        "UnderBar;": "_",
        "urcorner;": "\u231D",
        "varkappa;": "\u03F0",
        "varsigma;": "\u03C2",
        "vartheta;": "\u03D1",
        "backprime;": "\u2035",
        "backsimeq;": "\u22CD",
        "Backslash;": "\u2216",
        "bigotimes;": "\u2A02",
        "CenterDot;": "\xB7",
        "centerdot;": "\xB7",
        "checkmark;": "\u2713",
        "CircleDot;": "\u2299",
        "complexes;": "\u2102",
        "Congruent;": "\u2261",
        "Coproduct;": "\u2210",
        "dotsquare;": "\u22A1",
        "DoubleDot;": "\xA8",
        "DownArrow;": "\u2193",
        "Downarrow;": "\u21D3",
        "downarrow;": "\u2193",
        "DownBreve;": "\u0311",
        "gtrapprox;": "\u2A86",
        "gtreqless;": "\u22DB",
        "gvertneqq;": "\u2269\uFE00",
        "heartsuit;": "\u2665",
        "HumpEqual;": "\u224F",
        "LeftArrow;": "\u2190",
        "Leftarrow;": "\u21D0",
        "leftarrow;": "\u2190",
        "LeftFloor;": "\u230A",
        "lesseqgtr;": "\u22DA",
        "LessTilde;": "\u2272",
        "lvertneqq;": "\u2268\uFE00",
        "Mellintrf;": "\u2133",
        "MinusPlus;": "\u2213",
        "ngeqslant;": "\u2A7E\u0338",
        "nleqslant;": "\u2A7D\u0338",
        "NotCupCap;": "\u226D",
        "NotExists;": "\u2204",
        "NotSubset;": "\u2282\u20D2",
        "nparallel;": "\u2226",
        "nshortmid;": "\u2224",
        "nsubseteq;": "\u2288",
        "nsupseteq;": "\u2289",
        "OverBrace;": "\u23DE",
        "pitchfork;": "\u22D4",
        "PlusMinus;": "\xB1",
        "rationals;": "\u211A",
        "spadesuit;": "\u2660",
        "subseteqq;": "\u2AC5",
        "subsetneq;": "\u228A",
        "supseteqq;": "\u2AC6",
        "supsetneq;": "\u228B",
        "Therefore;": "\u2234",
        "therefore;": "\u2234",
        "ThinSpace;": "\u2009",
        "triangleq;": "\u225C",
        "TripleDot;": "\u20DB",
        "UnionPlus;": "\u228E",
        "varpropto;": "\u221D",
        "Bernoullis;": "\u212C",
        "circledast;": "\u229B",
        "CirclePlus;": "\u2295",
        "complement;": "\u2201",
        "curlywedge;": "\u22CF",
        "eqslantgtr;": "\u2A96",
        "EqualTilde;": "\u2242",
        "Fouriertrf;": "\u2131",
        "gtreqqless;": "\u2A8C",
        "ImaginaryI;": "\u2148",
        "Laplacetrf;": "\u2112",
        "LeftVector;": "\u21BC",
        "lessapprox;": "\u2A85",
        "lesseqqgtr;": "\u2A8B",
        "Lleftarrow;": "\u21DA",
        "lmoustache;": "\u23B0",
        "longmapsto;": "\u27FC",
        "mapstodown;": "\u21A7",
        "mapstoleft;": "\u21A4",
        "nLeftarrow;": "\u21CD",
        "nleftarrow;": "\u219A",
        "NotElement;": "\u2209",
        "NotGreater;": "\u226F",
        "nsubseteqq;": "\u2AC5\u0338",
        "nsupseteqq;": "\u2AC6\u0338",
        "precapprox;": "\u2AB7",
        "Proportion;": "\u2237",
        "RightArrow;": "\u2192",
        "Rightarrow;": "\u21D2",
        "rightarrow;": "\u2192",
        "RightFloor;": "\u230B",
        "rmoustache;": "\u23B1",
        "sqsubseteq;": "\u2291",
        "sqsupseteq;": "\u2292",
        "subsetneqq;": "\u2ACB",
        "succapprox;": "\u2AB8",
        "supsetneqq;": "\u2ACC",
        "ThickSpace;": "\u205F\u200A",
        "TildeEqual;": "\u2243",
        "TildeTilde;": "\u2248",
        "UnderBrace;": "\u23DF",
        "UpArrowBar;": "\u2912",
        "UpTeeArrow;": "\u21A5",
        "upuparrows;": "\u21C8",
        "varepsilon;": "\u03F5",
        "varnothing;": "\u2205",
        "backepsilon;": "\u03F6",
        "blacksquare;": "\u25AA",
        "circledcirc;": "\u229A",
        "circleddash;": "\u229D",
        "CircleMinus;": "\u2296",
        "CircleTimes;": "\u2297",
        "curlyeqprec;": "\u22DE",
        "curlyeqsucc;": "\u22DF",
        "diamondsuit;": "\u2666",
        "eqslantless;": "\u2A95",
        "Equilibrium;": "\u21CC",
        "expectation;": "\u2130",
        "GreaterLess;": "\u2277",
        "LeftCeiling;": "\u2308",
        "LessGreater;": "\u2276",
        "MediumSpace;": "\u205F",
        "NotLessLess;": "\u226A\u0338",
        "NotPrecedes;": "\u2280",
        "NotSucceeds;": "\u2281",
        "NotSuperset;": "\u2283\u20D2",
        "nRightarrow;": "\u21CF",
        "nrightarrow;": "\u219B",
        "OverBracket;": "\u23B4",
        "preccurlyeq;": "\u227C",
        "precnapprox;": "\u2AB9",
        "quaternions;": "\u210D",
        "RightVector;": "\u21C0",
        "Rrightarrow;": "\u21DB",
        "RuleDelayed;": "\u29F4",
        "SmallCircle;": "\u2218",
        "SquareUnion;": "\u2294",
        "straightphi;": "\u03D5",
        "SubsetEqual;": "\u2286",
        "succcurlyeq;": "\u227D",
        "succnapprox;": "\u2ABA",
        "thickapprox;": "\u2248",
        "UpDownArrow;": "\u2195",
        "Updownarrow;": "\u21D5",
        "updownarrow;": "\u2195",
        "VerticalBar;": "\u2223",
        "blacklozenge;": "\u29EB",
        "DownArrowBar;": "\u2913",
        "DownTeeArrow;": "\u21A7",
        "ExponentialE;": "\u2147",
        "exponentiale;": "\u2147",
        "GreaterEqual;": "\u2265",
        "GreaterTilde;": "\u2273",
        "HilbertSpace;": "\u210B",
        "HumpDownHump;": "\u224E",
        "Intersection;": "\u22C2",
        "LeftArrowBar;": "\u21E4",
        "LeftTeeArrow;": "\u21A4",
        "LeftTriangle;": "\u22B2",
        "LeftUpVector;": "\u21BF",
        "NotCongruent;": "\u2262",
        "NotHumpEqual;": "\u224F\u0338",
        "NotLessEqual;": "\u2270",
        "NotLessTilde;": "\u2274",
        "Proportional;": "\u221D",
        "RightCeiling;": "\u2309",
        "risingdotseq;": "\u2253",
        "RoundImplies;": "\u2970",
        "ShortUpArrow;": "\u2191",
        "SquareSubset;": "\u228F",
        "triangledown;": "\u25BF",
        "triangleleft;": "\u25C3",
        "UnderBracket;": "\u23B5",
        "varsubsetneq;": "\u228A\uFE00",
        "varsupsetneq;": "\u228B\uFE00",
        "VerticalLine;": "|",
        "ApplyFunction;": "\u2061",
        "bigtriangleup;": "\u25B3",
        "blacktriangle;": "\u25B4",
        "DifferentialD;": "\u2146",
        "divideontimes;": "\u22C7",
        "DoubleLeftTee;": "\u2AE4",
        "DoubleUpArrow;": "\u21D1",
        "fallingdotseq;": "\u2252",
        "hookleftarrow;": "\u21A9",
        "leftarrowtail;": "\u21A2",
        "leftharpoonup;": "\u21BC",
        "LeftTeeVector;": "\u295A",
        "LeftVectorBar;": "\u2952",
        "LessFullEqual;": "\u2266",
        "LongLeftArrow;": "\u27F5",
        "Longleftarrow;": "\u27F8",
        "longleftarrow;": "\u27F5",
        "looparrowleft;": "\u21AB",
        "measuredangle;": "\u2221",
        "NotEqualTilde;": "\u2242\u0338",
        "NotTildeEqual;": "\u2244",
        "NotTildeTilde;": "\u2249",
        "ntriangleleft;": "\u22EA",
        "Poincareplane;": "\u210C",
        "PrecedesEqual;": "\u2AAF",
        "PrecedesTilde;": "\u227E",
        "RightArrowBar;": "\u21E5",
        "RightTeeArrow;": "\u21A6",
        "RightTriangle;": "\u22B3",
        "RightUpVector;": "\u21BE",
        "shortparallel;": "\u2225",
        "smallsetminus;": "\u2216",
        "SucceedsEqual;": "\u2AB0",
        "SucceedsTilde;": "\u227F",
        "SupersetEqual;": "\u2287",
        "triangleright;": "\u25B9",
        "UpEquilibrium;": "\u296E",
        "upharpoonleft;": "\u21BF",
        "varsubsetneqq;": "\u2ACB\uFE00",
        "varsupsetneqq;": "\u2ACC\uFE00",
        "VerticalTilde;": "\u2240",
        "VeryThinSpace;": "\u200A",
        "curvearrowleft;": "\u21B6",
        "DiacriticalDot;": "\u02D9",
        "doublebarwedge;": "\u2306",
        "DoubleRightTee;": "\u22A8",
        "downdownarrows;": "\u21CA",
        "DownLeftVector;": "\u21BD",
        "GreaterGreater;": "\u2AA2",
        "hookrightarrow;": "\u21AA",
        "HorizontalLine;": "\u2500",
        "InvisibleComma;": "\u2063",
        "InvisibleTimes;": "\u2062",
        "LeftDownVector;": "\u21C3",
        "leftleftarrows;": "\u21C7",
        "LeftRightArrow;": "\u2194",
        "Leftrightarrow;": "\u21D4",
        "leftrightarrow;": "\u2194",
        "leftthreetimes;": "\u22CB",
        "LessSlantEqual;": "\u2A7D",
        "LongRightArrow;": "\u27F6",
        "Longrightarrow;": "\u27F9",
        "longrightarrow;": "\u27F6",
        "looparrowright;": "\u21AC",
        "LowerLeftArrow;": "\u2199",
        "NestedLessLess;": "\u226A",
        "NotGreaterLess;": "\u2279",
        "NotLessGreater;": "\u2278",
        "NotSubsetEqual;": "\u2288",
        "NotVerticalBar;": "\u2224",
        "nshortparallel;": "\u2226",
        "ntriangleright;": "\u22EB",
        "OpenCurlyQuote;": "\u2018",
        "ReverseElement;": "\u220B",
        "rightarrowtail;": "\u21A3",
        "rightharpoonup;": "\u21C0",
        "RightTeeVector;": "\u295B",
        "RightVectorBar;": "\u2953",
        "ShortDownArrow;": "\u2193",
        "ShortLeftArrow;": "\u2190",
        "SquareSuperset;": "\u2290",
        "TildeFullEqual;": "\u2245",
        "trianglelefteq;": "\u22B4",
        "upharpoonright;": "\u21BE",
        "UpperLeftArrow;": "\u2196",
        "ZeroWidthSpace;": "\u200B",
        "bigtriangledown;": "\u25BD",
        "circlearrowleft;": "\u21BA",
        "CloseCurlyQuote;": "\u2019",
        "ContourIntegral;": "\u222E",
        "curvearrowright;": "\u21B7",
        "DoubleDownArrow;": "\u21D3",
        "DoubleLeftArrow;": "\u21D0",
        "downharpoonleft;": "\u21C3",
        "DownRightVector;": "\u21C1",
        "leftharpoondown;": "\u21BD",
        "leftrightarrows;": "\u21C6",
        "LeftRightVector;": "\u294E",
        "LeftTriangleBar;": "\u29CF",
        "LeftUpTeeVector;": "\u2960",
        "LeftUpVectorBar;": "\u2958",
        "LowerRightArrow;": "\u2198",
        "nLeftrightarrow;": "\u21CE",
        "nleftrightarrow;": "\u21AE",
        "NotGreaterEqual;": "\u2271",
        "NotGreaterTilde;": "\u2275",
        "NotHumpDownHump;": "\u224E\u0338",
        "NotLeftTriangle;": "\u22EA",
        "NotSquareSubset;": "\u228F\u0338",
        "ntrianglelefteq;": "\u22EC",
        "OverParenthesis;": "\u23DC",
        "RightDownVector;": "\u21C2",
        "rightleftarrows;": "\u21C4",
        "rightsquigarrow;": "\u219D",
        "rightthreetimes;": "\u22CC",
        "ShortRightArrow;": "\u2192",
        "straightepsilon;": "\u03F5",
        "trianglerighteq;": "\u22B5",
        "UpperRightArrow;": "\u2197",
        "vartriangleleft;": "\u22B2",
        "circlearrowright;": "\u21BB",
        "DiacriticalAcute;": "\xB4",
        "DiacriticalGrave;": "`",
        "DiacriticalTilde;": "\u02DC",
        "DoubleRightArrow;": "\u21D2",
        "DownArrowUpArrow;": "\u21F5",
        "downharpoonright;": "\u21C2",
        "EmptySmallSquare;": "\u25FB",
        "GreaterEqualLess;": "\u22DB",
        "GreaterFullEqual;": "\u2267",
        "LeftAngleBracket;": "\u27E8",
        "LeftUpDownVector;": "\u2951",
        "LessEqualGreater;": "\u22DA",
        "NonBreakingSpace;": "\xA0",
        "NotPrecedesEqual;": "\u2AAF\u0338",
        "NotRightTriangle;": "\u22EB",
        "NotSucceedsEqual;": "\u2AB0\u0338",
        "NotSucceedsTilde;": "\u227F\u0338",
        "NotSupersetEqual;": "\u2289",
        "ntrianglerighteq;": "\u22ED",
        "rightharpoondown;": "\u21C1",
        "rightrightarrows;": "\u21C9",
        "RightTriangleBar;": "\u29D0",
        "RightUpTeeVector;": "\u295C",
        "RightUpVectorBar;": "\u2954",
        "twoheadleftarrow;": "\u219E",
        "UnderParenthesis;": "\u23DD",
        "UpArrowDownArrow;": "\u21C5",
        "vartriangleright;": "\u22B3",
        "blacktriangledown;": "\u25BE",
        "blacktriangleleft;": "\u25C2",
        "DoubleUpDownArrow;": "\u21D5",
        "DoubleVerticalBar;": "\u2225",
        "DownLeftTeeVector;": "\u295E",
        "DownLeftVectorBar;": "\u2956",
        "FilledSmallSquare;": "\u25FC",
        "GreaterSlantEqual;": "\u2A7E",
        "LeftDoubleBracket;": "\u27E6",
        "LeftDownTeeVector;": "\u2961",
        "LeftDownVectorBar;": "\u2959",
        "leftrightharpoons;": "\u21CB",
        "LeftTriangleEqual;": "\u22B4",
        "NegativeThinSpace;": "\u200B",
        "NotGreaterGreater;": "\u226B\u0338",
        "NotLessSlantEqual;": "\u2A7D\u0338",
        "NotNestedLessLess;": "\u2AA1\u0338",
        "NotReverseElement;": "\u220C",
        "NotSquareSuperset;": "\u2290\u0338",
        "NotTildeFullEqual;": "\u2247",
        "RightAngleBracket;": "\u27E9",
        "rightleftharpoons;": "\u21CC",
        "RightUpDownVector;": "\u294F",
        "SquareSubsetEqual;": "\u2291",
        "twoheadrightarrow;": "\u21A0",
        "VerticalSeparator;": "\u2758",
        "blacktriangleright;": "\u25B8",
        "DownRightTeeVector;": "\u295F",
        "DownRightVectorBar;": "\u2957",
        "LongLeftRightArrow;": "\u27F7",
        "Longleftrightarrow;": "\u27FA",
        "longleftrightarrow;": "\u27F7",
        "NegativeThickSpace;": "\u200B",
        "NotLeftTriangleBar;": "\u29CF\u0338",
        "PrecedesSlantEqual;": "\u227C",
        "ReverseEquilibrium;": "\u21CB",
        "RightDoubleBracket;": "\u27E7",
        "RightDownTeeVector;": "\u295D",
        "RightDownVectorBar;": "\u2955",
        "RightTriangleEqual;": "\u22B5",
        "SquareIntersection;": "\u2293",
        "SucceedsSlantEqual;": "\u227D",
        "DoubleLongLeftArrow;": "\u27F8",
        "DownLeftRightVector;": "\u2950",
        "LeftArrowRightArrow;": "\u21C6",
        "leftrightsquigarrow;": "\u21AD",
        "NegativeMediumSpace;": "\u200B",
        "NotGreaterFullEqual;": "\u2267\u0338",
        "NotRightTriangleBar;": "\u29D0\u0338",
        "RightArrowLeftArrow;": "\u21C4",
        "SquareSupersetEqual;": "\u2292",
        "CapitalDifferentialD;": "\u2145",
        "DoubleLeftRightArrow;": "\u21D4",
        "DoubleLongRightArrow;": "\u27F9",
        "EmptyVerySmallSquare;": "\u25AB",
        "NestedGreaterGreater;": "\u226B",
        "NotDoubleVerticalBar;": "\u2226",
        "NotGreaterSlantEqual;": "\u2A7E\u0338",
        "NotLeftTriangleEqual;": "\u22EC",
        "NotSquareSubsetEqual;": "\u22E2",
        "OpenCurlyDoubleQuote;": "\u201C",
        "ReverseUpEquilibrium;": "\u296F",
        "CloseCurlyDoubleQuote;": "\u201D",
        "DoubleContourIntegral;": "\u222F",
        "FilledVerySmallSquare;": "\u25AA",
        "NegativeVeryThinSpace;": "\u200B",
        "NotPrecedesSlantEqual;": "\u22E0",
        "NotRightTriangleEqual;": "\u22ED",
        "NotSucceedsSlantEqual;": "\u22E1",
        "DiacriticalDoubleAcute;": "\u02DD",
        "NotSquareSupersetEqual;": "\u22E3",
        "NotNestedGreaterGreater;": "\u2AA2\u0338",
        "ClockwiseContourIntegral;": "\u2232",
        "DoubleLongLeftRightArrow;": "\u27FA",
        "CounterClockwiseContourIntegral;": "\u2233"
      };
      var maxCRNameLength;
      var decodeHtml = (rawText, asAttr) => {
        let offset = 0;
        const end = rawText.length;
        let decodedText = "";
        function advance(length) {
          offset += length;
          rawText = rawText.slice(length);
        }
        while (offset < end) {
          const head = /&(?:#x?)?/i.exec(rawText);
          if (!head || offset + head.index >= end) {
            const remaining = end - offset;
            decodedText += rawText.slice(0, remaining);
            advance(remaining);
            break;
          }
          decodedText += rawText.slice(0, head.index);
          advance(head.index);
          if (head[0] === "&") {
            let name = "";
            let value = void 0;
            if (/[0-9a-z]/i.test(rawText[1])) {
              if (!maxCRNameLength) {
                maxCRNameLength = Object.keys(namedCharacterReferences).reduce(
                  (max, name2) => Math.max(max, name2.length),
                  0
                );
              }
              for (let length = maxCRNameLength; !value && length > 0; --length) {
                name = rawText.slice(1, 1 + length);
                value = namedCharacterReferences[name];
              }
              if (value) {
                const semi = name.endsWith(";");
                if (asAttr && !semi && /[=a-z0-9]/i.test(rawText[name.length + 1] || "")) {
                  decodedText += "&" + name;
                  advance(1 + name.length);
                } else {
                  decodedText += value;
                  advance(1 + name.length);
                }
              } else {
                decodedText += "&" + name;
                advance(1 + name.length);
              }
            } else {
              decodedText += "&";
              advance(1);
            }
          } else {
            const hex = head[0] === "&#x";
            const pattern = hex ? /^&#x([0-9a-f]+);?/i : /^&#([0-9]+);?/;
            const body = pattern.exec(rawText);
            if (!body) {
              decodedText += head[0];
              advance(head[0].length);
            } else {
              let cp = Number.parseInt(body[1], hex ? 16 : 10);
              if (cp === 0) {
                cp = 65533;
              } else if (cp > 1114111) {
                cp = 65533;
              } else if (cp >= 55296 && cp <= 57343) {
                cp = 65533;
              } else if (cp >= 64976 && cp <= 65007 || (cp & 65534) === 65534)
                ;
              else if (cp >= 1 && cp <= 8 || cp === 11 || cp >= 13 && cp <= 31 || cp >= 127 && cp <= 159) {
                cp = CCR_REPLACEMENTS[cp] || cp;
              }
              decodedText += String.fromCodePoint(cp);
              advance(body[0].length);
            }
          }
        }
        return decodedText;
      };
      var CCR_REPLACEMENTS = {
        128: 8364,
        130: 8218,
        131: 402,
        132: 8222,
        133: 8230,
        134: 8224,
        135: 8225,
        136: 710,
        137: 8240,
        138: 352,
        139: 8249,
        140: 338,
        142: 381,
        145: 8216,
        146: 8217,
        147: 8220,
        148: 8221,
        149: 8226,
        150: 8211,
        151: 8212,
        152: 732,
        153: 8482,
        154: 353,
        155: 8250,
        156: 339,
        158: 382,
        159: 376
      };
      var isRawTextContainer = /* @__PURE__ */ shared.makeMap(
        "style,iframe,script,noscript",
        true
      );
      var parserOptions = {
        isVoidTag: shared.isVoidTag,
        isNativeTag: (tag) => shared.isHTMLTag(tag) || shared.isSVGTag(tag),
        isPreTag: (tag) => tag === "pre",
        decodeEntities: decodeHtml,
        isBuiltInComponent: (tag) => {
          if (compilerCore.isBuiltInType(tag, `Transition`)) {
            return TRANSITION;
          } else if (compilerCore.isBuiltInType(tag, `TransitionGroup`)) {
            return TRANSITION_GROUP;
          }
        },
        // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
        getNamespace(tag, parent) {
          let ns = parent ? parent.ns : 0;
          if (parent && ns === 2) {
            if (parent.tag === "annotation-xml") {
              if (tag === "svg") {
                return 1;
              }
              if (parent.props.some(
                (a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml")
              )) {
                ns = 0;
              }
            } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== "mglyph" && tag !== "malignmark") {
              ns = 0;
            }
          } else if (parent && ns === 1) {
            if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
              ns = 0;
            }
          }
          if (ns === 0) {
            if (tag === "svg") {
              return 1;
            }
            if (tag === "math") {
              return 2;
            }
          }
          return ns;
        },
        // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments
        getTextMode({ tag, ns }) {
          if (ns === 0) {
            if (tag === "textarea" || tag === "title") {
              return 1;
            }
            if (isRawTextContainer(tag)) {
              return 2;
            }
          }
          return 0;
        }
      };
      var transformStyle = (node) => {
        if (node.type === 1) {
          node.props.forEach((p, i) => {
            if (p.type === 6 && p.name === "style" && p.value) {
              node.props[i] = {
                type: 7,
                name: `bind`,
                arg: compilerCore.createSimpleExpression(`style`, true, p.loc),
                exp: parseInlineCSS(p.value.content, p.loc),
                modifiers: [],
                loc: p.loc
              };
            }
          });
        }
      };
      var parseInlineCSS = (cssText, loc) => {
        const normalized = shared.parseStringStyle(cssText);
        return compilerCore.createSimpleExpression(
          JSON.stringify(normalized),
          false,
          loc,
          3
        );
      };
      function createDOMCompilerError(code, loc) {
        return compilerCore.createCompilerError(
          code,
          loc,
          DOMErrorMessages
        );
      }
      var DOMErrorMessages = {
        [53]: `v-html is missing expression.`,
        [54]: `v-html will override element children.`,
        [55]: `v-text is missing expression.`,
        [56]: `v-text will override element children.`,
        [57]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
        [58]: `v-model argument is not supported on plain elements.`,
        [59]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
        [60]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
        [61]: `v-show is missing expression.`,
        [62]: `<Transition> expects exactly one child element or component.`,
        [63]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
      };
      var transformVHtml = (dir, node, context) => {
        const { exp, loc } = dir;
        if (!exp) {
          context.onError(
            createDOMCompilerError(53, loc)
          );
        }
        if (node.children.length) {
          context.onError(
            createDOMCompilerError(54, loc)
          );
          node.children.length = 0;
        }
        return {
          props: [
            compilerCore.createObjectProperty(
              compilerCore.createSimpleExpression(`innerHTML`, true, loc),
              exp || compilerCore.createSimpleExpression("", true)
            )
          ]
        };
      };
      var transformVText = (dir, node, context) => {
        const { exp, loc } = dir;
        if (!exp) {
          context.onError(
            createDOMCompilerError(55, loc)
          );
        }
        if (node.children.length) {
          context.onError(
            createDOMCompilerError(56, loc)
          );
          node.children.length = 0;
        }
        return {
          props: [
            compilerCore.createObjectProperty(
              compilerCore.createSimpleExpression(`textContent`, true),
              exp ? compilerCore.getConstantType(exp, context) > 0 ? exp : compilerCore.createCallExpression(
                context.helperString(compilerCore.TO_DISPLAY_STRING),
                [exp],
                loc
              ) : compilerCore.createSimpleExpression("", true)
            )
          ]
        };
      };
      var transformModel = (dir, node, context) => {
        const baseResult = compilerCore.transformModel(dir, node, context);
        if (!baseResult.props.length || node.tagType === 1) {
          return baseResult;
        }
        if (dir.arg) {
          context.onError(
            createDOMCompilerError(
              58,
              dir.arg.loc
            )
          );
        }
        function checkDuplicatedValue() {
          const value = compilerCore.findProp(node, "value");
          if (value) {
            context.onError(
              createDOMCompilerError(
                60,
                value.loc
              )
            );
          }
        }
        const { tag } = node;
        const isCustomElement = context.isCustomElement(tag);
        if (tag === "input" || tag === "textarea" || tag === "select" || isCustomElement) {
          let directiveToUse = V_MODEL_TEXT;
          let isInvalidType = false;
          if (tag === "input" || isCustomElement) {
            const type = compilerCore.findProp(node, `type`);
            if (type) {
              if (type.type === 7) {
                directiveToUse = V_MODEL_DYNAMIC;
              } else if (type.value) {
                switch (type.value.content) {
                  case "radio":
                    directiveToUse = V_MODEL_RADIO;
                    break;
                  case "checkbox":
                    directiveToUse = V_MODEL_CHECKBOX;
                    break;
                  case "file":
                    isInvalidType = true;
                    context.onError(
                      createDOMCompilerError(
                        59,
                        dir.loc
                      )
                    );
                    break;
                  default:
                    checkDuplicatedValue();
                    break;
                }
              }
            } else if (compilerCore.hasDynamicKeyVBind(node)) {
              directiveToUse = V_MODEL_DYNAMIC;
            } else {
              checkDuplicatedValue();
            }
          } else if (tag === "select") {
            directiveToUse = V_MODEL_SELECT;
          } else {
            checkDuplicatedValue();
          }
          if (!isInvalidType) {
            baseResult.needRuntime = context.helper(directiveToUse);
          }
        } else {
          context.onError(
            createDOMCompilerError(
              57,
              dir.loc
            )
          );
        }
        baseResult.props = baseResult.props.filter(
          (p) => !(p.key.type === 4 && p.key.content === "modelValue")
        );
        return baseResult;
      };
      var isEventOptionModifier = /* @__PURE__ */ shared.makeMap(`passive,once,capture`);
      var isNonKeyModifier = /* @__PURE__ */ shared.makeMap(
        // event propagation management
        `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
      );
      var maybeKeyModifier = /* @__PURE__ */ shared.makeMap("left,right");
      var isKeyboardEvent = /* @__PURE__ */ shared.makeMap(
        `onkeyup,onkeydown,onkeypress`,
        true
      );
      var resolveModifiers = (key, modifiers, context, loc) => {
        const keyModifiers = [];
        const nonKeyModifiers = [];
        const eventOptionModifiers = [];
        for (let i = 0; i < modifiers.length; i++) {
          const modifier = modifiers[i];
          if (modifier === "native" && compilerCore.checkCompatEnabled(
            "COMPILER_V_ON_NATIVE",
            context,
            loc
          )) {
            eventOptionModifiers.push(modifier);
          } else if (isEventOptionModifier(modifier)) {
            eventOptionModifiers.push(modifier);
          } else {
            if (maybeKeyModifier(modifier)) {
              if (compilerCore.isStaticExp(key)) {
                if (isKeyboardEvent(key.content)) {
                  keyModifiers.push(modifier);
                } else {
                  nonKeyModifiers.push(modifier);
                }
              } else {
                keyModifiers.push(modifier);
                nonKeyModifiers.push(modifier);
              }
            } else {
              if (isNonKeyModifier(modifier)) {
                nonKeyModifiers.push(modifier);
              } else {
                keyModifiers.push(modifier);
              }
            }
          }
        }
        return {
          keyModifiers,
          nonKeyModifiers,
          eventOptionModifiers
        };
      };
      var transformClick = (key, event) => {
        const isStaticClick = compilerCore.isStaticExp(key) && key.content.toLowerCase() === "onclick";
        return isStaticClick ? compilerCore.createSimpleExpression(event, true) : key.type !== 4 ? compilerCore.createCompoundExpression([
          `(`,
          key,
          `) === "onClick" ? "${event}" : (`,
          key,
          `)`
        ]) : key;
      };
      var transformOn = (dir, node, context) => {
        return compilerCore.transformOn(dir, node, context, (baseResult) => {
          const { modifiers } = dir;
          if (!modifiers.length)
            return baseResult;
          let { key, value: handlerExp } = baseResult.props[0];
          const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);
          if (nonKeyModifiers.includes("right")) {
            key = transformClick(key, `onContextmenu`);
          }
          if (nonKeyModifiers.includes("middle")) {
            key = transformClick(key, `onMouseup`);
          }
          if (nonKeyModifiers.length) {
            handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
              handlerExp,
              JSON.stringify(nonKeyModifiers)
            ]);
          }
          if (keyModifiers.length && // if event name is dynamic, always wrap with keys guard
          (!compilerCore.isStaticExp(key) || isKeyboardEvent(key.content))) {
            handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_KEYS), [
              handlerExp,
              JSON.stringify(keyModifiers)
            ]);
          }
          if (eventOptionModifiers.length) {
            const modifierPostfix = eventOptionModifiers.map(shared.capitalize).join("");
            key = compilerCore.isStaticExp(key) ? compilerCore.createSimpleExpression(`${key.content}${modifierPostfix}`, true) : compilerCore.createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
          }
          return {
            props: [compilerCore.createObjectProperty(key, handlerExp)]
          };
        });
      };
      var transformShow = (dir, node, context) => {
        const { exp, loc } = dir;
        if (!exp) {
          context.onError(
            createDOMCompilerError(61, loc)
          );
        }
        return {
          props: [],
          needRuntime: context.helper(V_SHOW)
        };
      };
      var transformTransition = (node, context) => {
        if (node.type === 1 && node.tagType === 1) {
          const component = context.isBuiltInComponent(node.tag);
          if (component === TRANSITION) {
            return () => {
              if (!node.children.length) {
                return;
              }
              if (hasMultipleChildren(node)) {
                context.onError(
                  createDOMCompilerError(
                    62,
                    {
                      start: node.children[0].loc.start,
                      end: node.children[node.children.length - 1].loc.end,
                      source: ""
                    }
                  )
                );
              }
              const child = node.children[0];
              if (child.type === 1) {
                for (const p of child.props) {
                  if (p.type === 7 && p.name === "show") {
                    node.props.push({
                      type: 6,
                      name: "persisted",
                      value: void 0,
                      loc: node.loc
                    });
                  }
                }
              }
            };
          }
        }
      };
      function hasMultipleChildren(node) {
        const children = node.children = node.children.filter(
          (c) => c.type !== 3 && !(c.type === 2 && !c.content.trim())
        );
        const child = children[0];
        return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);
      }
      var expReplaceRE = /__VUE_EXP_START__(.*?)__VUE_EXP_END__/g;
      var stringifyStatic = (children, context, parent) => {
        if (context.scopes.vSlot > 0) {
          return;
        }
        let nc = 0;
        let ec = 0;
        const currentChunk = [];
        const stringifyCurrentChunk = (currentIndex) => {
          if (nc >= 20 || ec >= 5) {
            const staticCall = compilerCore.createCallExpression(context.helper(compilerCore.CREATE_STATIC), [
              JSON.stringify(
                currentChunk.map((node) => stringifyNode(node, context)).join("")
              ).replace(expReplaceRE, `" + $1 + "`),
              // the 2nd argument indicates the number of DOM nodes this static vnode
              // will insert / hydrate
              String(currentChunk.length)
            ]);
            replaceHoist(currentChunk[0], staticCall, context);
            if (currentChunk.length > 1) {
              for (let i2 = 1; i2 < currentChunk.length; i2++) {
                replaceHoist(currentChunk[i2], null, context);
              }
              const deleteCount = currentChunk.length - 1;
              children.splice(currentIndex - currentChunk.length + 1, deleteCount);
              return deleteCount;
            }
          }
          return 0;
        };
        let i = 0;
        for (; i < children.length; i++) {
          const child = children[i];
          const hoisted = getHoistedNode(child);
          if (hoisted) {
            const node = child;
            const result = analyzeNode(node);
            if (result) {
              nc += result[0];
              ec += result[1];
              currentChunk.push(node);
              continue;
            }
          }
          i -= stringifyCurrentChunk(i);
          nc = 0;
          ec = 0;
          currentChunk.length = 0;
        }
        stringifyCurrentChunk(i);
      };
      var getHoistedNode = (node) => (node.type === 1 && node.tagType === 0 || node.type == 12) && node.codegenNode && node.codegenNode.type === 4 && node.codegenNode.hoisted;
      var dataAriaRE = /^(data|aria)-/;
      var isStringifiableAttr = (name, ns) => {
        return (ns === 0 ? shared.isKnownHtmlAttr(name) : ns === 1 ? shared.isKnownSvgAttr(name) : false) || dataAriaRE.test(name);
      };
      var replaceHoist = (node, replacement, context) => {
        const hoistToReplace = node.codegenNode.hoisted;
        context.hoists[context.hoists.indexOf(hoistToReplace)] = replacement;
      };
      var isNonStringifiable = /* @__PURE__ */ shared.makeMap(
        `caption,thead,tr,th,tbody,td,tfoot,colgroup,col`
      );
      function analyzeNode(node) {
        if (node.type === 1 && isNonStringifiable(node.tag)) {
          return false;
        }
        if (node.type === 12) {
          return [1, 0];
        }
        let nc = 1;
        let ec = node.props.length > 0 ? 1 : 0;
        let bailed = false;
        const bail = () => {
          bailed = true;
          return false;
        };
        function walk(node2) {
          for (let i = 0; i < node2.props.length; i++) {
            const p = node2.props[i];
            if (p.type === 6 && !isStringifiableAttr(p.name, node2.ns)) {
              return bail();
            }
            if (p.type === 7 && p.name === "bind") {
              if (p.arg && (p.arg.type === 8 || p.arg.isStatic && !isStringifiableAttr(p.arg.content, node2.ns))) {
                return bail();
              }
              if (p.exp && (p.exp.type === 8 || p.exp.constType < 3)) {
                return bail();
              }
            }
          }
          for (let i = 0; i < node2.children.length; i++) {
            nc++;
            const child = node2.children[i];
            if (child.type === 1) {
              if (child.props.length > 0) {
                ec++;
              }
              walk(child);
              if (bailed) {
                return false;
              }
            }
          }
          return true;
        }
        return walk(node) ? [nc, ec] : false;
      }
      function stringifyNode(node, context) {
        if (shared.isString(node)) {
          return node;
        }
        if (shared.isSymbol(node)) {
          return ``;
        }
        switch (node.type) {
          case 1:
            return stringifyElement(node, context);
          case 2:
            return shared.escapeHtml(node.content);
          case 3:
            return `<!--${shared.escapeHtml(node.content)}-->`;
          case 5:
            return shared.escapeHtml(shared.toDisplayString(evaluateConstant(node.content)));
          case 8:
            return shared.escapeHtml(evaluateConstant(node));
          case 12:
            return stringifyNode(node.content, context);
          default:
            return "";
        }
      }
      function stringifyElement(node, context) {
        let res = `<${node.tag}`;
        let innerHTML = "";
        for (let i = 0; i < node.props.length; i++) {
          const p = node.props[i];
          if (p.type === 6) {
            res += ` ${p.name}`;
            if (p.value) {
              res += `="${shared.escapeHtml(p.value.content)}"`;
            }
          } else if (p.type === 7) {
            if (p.name === "bind") {
              const exp = p.exp;
              if (exp.content[0] === "_") {
                res += ` ${p.arg.content}="__VUE_EXP_START__${exp.content}__VUE_EXP_END__"`;
                continue;
              }
              if (shared.isBooleanAttr(p.arg.content) && exp.content === "false") {
                continue;
              }
              let evaluated = evaluateConstant(exp);
              if (evaluated != null) {
                const arg = p.arg && p.arg.content;
                if (arg === "class") {
                  evaluated = shared.normalizeClass(evaluated);
                } else if (arg === "style") {
                  evaluated = shared.stringifyStyle(shared.normalizeStyle(evaluated));
                }
                res += ` ${p.arg.content}="${shared.escapeHtml(
                  evaluated
                )}"`;
              }
            } else if (p.name === "html") {
              innerHTML = evaluateConstant(p.exp);
            } else if (p.name === "text") {
              innerHTML = shared.escapeHtml(
                shared.toDisplayString(evaluateConstant(p.exp))
              );
            }
          }
        }
        if (context.scopeId) {
          res += ` ${context.scopeId}`;
        }
        res += `>`;
        if (innerHTML) {
          res += innerHTML;
        } else {
          for (let i = 0; i < node.children.length; i++) {
            res += stringifyNode(node.children[i], context);
          }
        }
        if (!shared.isVoidTag(node.tag)) {
          res += `</${node.tag}>`;
        }
        return res;
      }
      function evaluateConstant(exp) {
        if (exp.type === 4) {
          return new Function(`return (${exp.content})`)();
        } else {
          let res = ``;
          exp.children.forEach((c) => {
            if (shared.isString(c) || shared.isSymbol(c)) {
              return;
            }
            if (c.type === 2) {
              res += c.content;
            } else if (c.type === 5) {
              res += shared.toDisplayString(evaluateConstant(c.content));
            } else {
              res += evaluateConstant(c);
            }
          });
          return res;
        }
      }
      var ignoreSideEffectTags = (node, context) => {
        if (node.type === 1 && node.tagType === 0 && (node.tag === "script" || node.tag === "style")) {
          context.onError(
            createDOMCompilerError(
              63,
              node.loc
            )
          );
          context.removeNode();
        }
      };
      var DOMNodeTransforms = [
        transformStyle,
        ...[transformTransition]
      ];
      var DOMDirectiveTransforms = {
        cloak: compilerCore.noopDirectiveTransform,
        html: transformVHtml,
        text: transformVText,
        model: transformModel,
        // override compiler-core
        on: transformOn,
        // override compiler-core
        show: transformShow
      };
      function compile(template2, options = {}) {
        return compilerCore.baseCompile(
          template2,
          shared.extend({}, parserOptions, options, {
            nodeTransforms: [
              // ignore <script> and <tag>
              // this is not put inside DOMNodeTransforms because that list is used
              // by compiler-ssr to generate vnode fallback branches
              ignoreSideEffectTags,
              ...DOMNodeTransforms,
              ...options.nodeTransforms || []
            ],
            directiveTransforms: shared.extend(
              {},
              DOMDirectiveTransforms,
              options.directiveTransforms || {}
            ),
            transformHoist: stringifyStatic
          })
        );
      }
      function parse(template2, options = {}) {
        return compilerCore.baseParse(template2, shared.extend({}, parserOptions, options));
      }
      exports.DOMDirectiveTransforms = DOMDirectiveTransforms;
      exports.DOMNodeTransforms = DOMNodeTransforms;
      exports.TRANSITION = TRANSITION;
      exports.TRANSITION_GROUP = TRANSITION_GROUP;
      exports.V_MODEL_CHECKBOX = V_MODEL_CHECKBOX;
      exports.V_MODEL_DYNAMIC = V_MODEL_DYNAMIC;
      exports.V_MODEL_RADIO = V_MODEL_RADIO;
      exports.V_MODEL_SELECT = V_MODEL_SELECT;
      exports.V_MODEL_TEXT = V_MODEL_TEXT;
      exports.V_ON_WITH_KEYS = V_ON_WITH_KEYS;
      exports.V_ON_WITH_MODIFIERS = V_ON_WITH_MODIFIERS;
      exports.V_SHOW = V_SHOW;
      exports.compile = compile;
      exports.createDOMCompilerError = createDOMCompilerError;
      exports.parse = parse;
      exports.parserOptions = parserOptions;
      exports.transformStyle = transformStyle;
      Object.keys(compilerCore).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          exports[k] = compilerCore[k];
      });
    }
  });

  // node_modules/@vue/compiler-dom/index.js
  var require_compiler_dom = __commonJS({
    "node_modules/@vue/compiler-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_compiler_dom_cjs();
      }
    }
  });

  // node_modules/@vue/reactivity/dist/reactivity.cjs.js
  var require_reactivity_cjs = __commonJS({
    "node_modules/@vue/reactivity/dist/reactivity.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var shared = require_shared();
      function warn(msg, ...args) {
        console.warn(`[Vue warn] ${msg}`, ...args);
      }
      var activeEffectScope;
      var EffectScope = class {
        constructor(detached = false) {
          this.detached = detached;
          this._active = true;
          this.effects = [];
          this.cleanups = [];
          this.parent = activeEffectScope;
          if (!detached && activeEffectScope) {
            this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
              this
            ) - 1;
          }
        }
        get active() {
          return this._active;
        }
        run(fn) {
          if (this._active) {
            const currentEffectScope = activeEffectScope;
            try {
              activeEffectScope = this;
              return fn();
            } finally {
              activeEffectScope = currentEffectScope;
            }
          } else {
            warn(`cannot run an inactive effect scope.`);
          }
        }
        /**
         * This should only be called on non-detached scopes
         * @internal
         */
        on() {
          activeEffectScope = this;
        }
        /**
         * This should only be called on non-detached scopes
         * @internal
         */
        off() {
          activeEffectScope = this.parent;
        }
        stop(fromParent) {
          if (this._active) {
            let i, l;
            for (i = 0, l = this.effects.length; i < l; i++) {
              this.effects[i].stop();
            }
            for (i = 0, l = this.cleanups.length; i < l; i++) {
              this.cleanups[i]();
            }
            if (this.scopes) {
              for (i = 0, l = this.scopes.length; i < l; i++) {
                this.scopes[i].stop(true);
              }
            }
            if (!this.detached && this.parent && !fromParent) {
              const last = this.parent.scopes.pop();
              if (last && last !== this) {
                this.parent.scopes[this.index] = last;
                last.index = this.index;
              }
            }
            this.parent = void 0;
            this._active = false;
          }
        }
      };
      function effectScope(detached) {
        return new EffectScope(detached);
      }
      function recordEffectScope(effect2, scope = activeEffectScope) {
        if (scope && scope.active) {
          scope.effects.push(effect2);
        }
      }
      function getCurrentScope() {
        return activeEffectScope;
      }
      function onScopeDispose(fn) {
        if (activeEffectScope) {
          activeEffectScope.cleanups.push(fn);
        } else {
          warn(
            `onScopeDispose() is called when there is no active effect scope to be associated with.`
          );
        }
      }
      var createDep = (effects) => {
        const dep = new Set(effects);
        dep.w = 0;
        dep.n = 0;
        return dep;
      };
      var wasTracked = (dep) => (dep.w & trackOpBit) > 0;
      var newTracked = (dep) => (dep.n & trackOpBit) > 0;
      var initDepMarkers = ({ deps }) => {
        if (deps.length) {
          for (let i = 0; i < deps.length; i++) {
            deps[i].w |= trackOpBit;
          }
        }
      };
      var finalizeDepMarkers = (effect2) => {
        const { deps } = effect2;
        if (deps.length) {
          let ptr = 0;
          for (let i = 0; i < deps.length; i++) {
            const dep = deps[i];
            if (wasTracked(dep) && !newTracked(dep)) {
              dep.delete(effect2);
            } else {
              deps[ptr++] = dep;
            }
            dep.w &= ~trackOpBit;
            dep.n &= ~trackOpBit;
          }
          deps.length = ptr;
        }
      };
      var targetMap = /* @__PURE__ */ new WeakMap();
      var effectTrackDepth = 0;
      var trackOpBit = 1;
      var maxMarkerBits = 30;
      var activeEffect;
      var ITERATE_KEY = Symbol("iterate");
      var MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
      var ReactiveEffect = class {
        constructor(fn, scheduler2 = null, scope) {
          this.fn = fn;
          this.scheduler = scheduler2;
          this.active = true;
          this.deps = [];
          this.parent = void 0;
          recordEffectScope(this, scope);
        }
        run() {
          if (!this.active) {
            return this.fn();
          }
          let parent = activeEffect;
          let lastShouldTrack = shouldTrack;
          while (parent) {
            if (parent === this) {
              return;
            }
            parent = parent.parent;
          }
          try {
            this.parent = activeEffect;
            activeEffect = this;
            shouldTrack = true;
            trackOpBit = 1 << ++effectTrackDepth;
            if (effectTrackDepth <= maxMarkerBits) {
              initDepMarkers(this);
            } else {
              cleanupEffect(this);
            }
            return this.fn();
          } finally {
            if (effectTrackDepth <= maxMarkerBits) {
              finalizeDepMarkers(this);
            }
            trackOpBit = 1 << --effectTrackDepth;
            activeEffect = this.parent;
            shouldTrack = lastShouldTrack;
            this.parent = void 0;
            if (this.deferStop) {
              this.stop();
            }
          }
        }
        stop() {
          if (activeEffect === this) {
            this.deferStop = true;
          } else if (this.active) {
            cleanupEffect(this);
            if (this.onStop) {
              this.onStop();
            }
            this.active = false;
          }
        }
      };
      function cleanupEffect(effect2) {
        const { deps } = effect2;
        if (deps.length) {
          for (let i = 0; i < deps.length; i++) {
            deps[i].delete(effect2);
          }
          deps.length = 0;
        }
      }
      function effect(fn, options) {
        if (fn.effect) {
          fn = fn.effect.fn;
        }
        const _effect = new ReactiveEffect(fn);
        if (options) {
          shared.extend(_effect, options);
          if (options.scope)
            recordEffectScope(_effect, options.scope);
        }
        if (!options || !options.lazy) {
          _effect.run();
        }
        const runner = _effect.run.bind(_effect);
        runner.effect = _effect;
        return runner;
      }
      function stop(runner) {
        runner.effect.stop();
      }
      var shouldTrack = true;
      var trackStack = [];
      function pauseTracking() {
        trackStack.push(shouldTrack);
        shouldTrack = false;
      }
      function enableTracking() {
        trackStack.push(shouldTrack);
        shouldTrack = true;
      }
      function resetTracking() {
        const last = trackStack.pop();
        shouldTrack = last === void 0 ? true : last;
      }
      function track(target, type, key) {
        if (shouldTrack && activeEffect) {
          let depsMap = targetMap.get(target);
          if (!depsMap) {
            targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
          }
          let dep = depsMap.get(key);
          if (!dep) {
            depsMap.set(key, dep = createDep());
          }
          const eventInfo = { effect: activeEffect, target, type, key };
          trackEffects(dep, eventInfo);
        }
      }
      function trackEffects(dep, debuggerEventExtraInfo) {
        let shouldTrack2 = false;
        if (effectTrackDepth <= maxMarkerBits) {
          if (!newTracked(dep)) {
            dep.n |= trackOpBit;
            shouldTrack2 = !wasTracked(dep);
          }
        } else {
          shouldTrack2 = !dep.has(activeEffect);
        }
        if (shouldTrack2) {
          dep.add(activeEffect);
          activeEffect.deps.push(dep);
          if (activeEffect.onTrack) {
            activeEffect.onTrack(
              shared.extend(
                {
                  effect: activeEffect
                },
                debuggerEventExtraInfo
              )
            );
          }
        }
      }
      function trigger(target, type, key, newValue, oldValue, oldTarget) {
        const depsMap = targetMap.get(target);
        if (!depsMap) {
          return;
        }
        let deps = [];
        if (type === "clear") {
          deps = [...depsMap.values()];
        } else if (key === "length" && shared.isArray(target)) {
          const newLength = Number(newValue);
          depsMap.forEach((dep, key2) => {
            if (key2 === "length" || key2 >= newLength) {
              deps.push(dep);
            }
          });
        } else {
          if (key !== void 0) {
            deps.push(depsMap.get(key));
          }
          switch (type) {
            case "add":
              if (!shared.isArray(target)) {
                deps.push(depsMap.get(ITERATE_KEY));
                if (shared.isMap(target)) {
                  deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                }
              } else if (shared.isIntegerKey(key)) {
                deps.push(depsMap.get("length"));
              }
              break;
            case "delete":
              if (!shared.isArray(target)) {
                deps.push(depsMap.get(ITERATE_KEY));
                if (shared.isMap(target)) {
                  deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                }
              }
              break;
            case "set":
              if (shared.isMap(target)) {
                deps.push(depsMap.get(ITERATE_KEY));
              }
              break;
          }
        }
        const eventInfo = { target, type, key, newValue, oldValue, oldTarget };
        if (deps.length === 1) {
          if (deps[0]) {
            {
              triggerEffects(deps[0], eventInfo);
            }
          }
        } else {
          const effects = [];
          for (const dep of deps) {
            if (dep) {
              effects.push(...dep);
            }
          }
          {
            triggerEffects(createDep(effects), eventInfo);
          }
        }
      }
      function triggerEffects(dep, debuggerEventExtraInfo) {
        const effects = shared.isArray(dep) ? dep : [...dep];
        for (const effect2 of effects) {
          if (effect2.computed) {
            triggerEffect(effect2, debuggerEventExtraInfo);
          }
        }
        for (const effect2 of effects) {
          if (!effect2.computed) {
            triggerEffect(effect2, debuggerEventExtraInfo);
          }
        }
      }
      function triggerEffect(effect2, debuggerEventExtraInfo) {
        if (effect2 !== activeEffect || effect2.allowRecurse) {
          if (effect2.onTrigger) {
            effect2.onTrigger(shared.extend({ effect: effect2 }, debuggerEventExtraInfo));
          }
          if (effect2.scheduler) {
            effect2.scheduler();
          } else {
            effect2.run();
          }
        }
      }
      function getDepFromReactive(object, key) {
        var _a;
        return (_a = targetMap.get(object)) == null ? void 0 : _a.get(key);
      }
      var isNonTrackableKeys = /* @__PURE__ */ shared.makeMap(`__proto__,__v_isRef,__isVue`);
      var builtInSymbols = new Set(
        /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(shared.isSymbol)
      );
      var get$1 = /* @__PURE__ */ createGetter();
      var shallowGet = /* @__PURE__ */ createGetter(false, true);
      var readonlyGet = /* @__PURE__ */ createGetter(true);
      var shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
      var arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
      function createArrayInstrumentations() {
        const instrumentations = {};
        ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
          instrumentations[key] = function(...args) {
            const arr = toRaw(this);
            for (let i = 0, l = this.length; i < l; i++) {
              track(arr, "get", i + "");
            }
            const res = arr[key](...args);
            if (res === -1 || res === false) {
              return arr[key](...args.map(toRaw));
            } else {
              return res;
            }
          };
        });
        ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
          instrumentations[key] = function(...args) {
            pauseTracking();
            const res = toRaw(this)[key].apply(this, args);
            resetTracking();
            return res;
          };
        });
        return instrumentations;
      }
      function hasOwnProperty(key) {
        const obj = toRaw(this);
        track(obj, "has", key);
        return obj.hasOwnProperty(key);
      }
      function createGetter(isReadonly2 = false, shallow = false) {
        return function get2(target, key, receiver) {
          if (key === "__v_isReactive") {
            return !isReadonly2;
          } else if (key === "__v_isReadonly") {
            return isReadonly2;
          } else if (key === "__v_isShallow") {
            return shallow;
          } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
            return target;
          }
          const targetIsArray = shared.isArray(target);
          if (!isReadonly2) {
            if (targetIsArray && shared.hasOwn(arrayInstrumentations, key)) {
              return Reflect.get(arrayInstrumentations, key, receiver);
            }
            if (key === "hasOwnProperty") {
              return hasOwnProperty;
            }
          }
          const res = Reflect.get(target, key, receiver);
          if (shared.isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
            return res;
          }
          if (!isReadonly2) {
            track(target, "get", key);
          }
          if (shallow) {
            return res;
          }
          if (isRef(res)) {
            return targetIsArray && shared.isIntegerKey(key) ? res : res.value;
          }
          if (shared.isObject(res)) {
            return isReadonly2 ? readonly(res) : reactive(res);
          }
          return res;
        };
      }
      var set$1 = /* @__PURE__ */ createSetter();
      var shallowSet = /* @__PURE__ */ createSetter(true);
      function createSetter(shallow = false) {
        return function set2(target, key, value, receiver) {
          let oldValue = target[key];
          if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
            return false;
          }
          if (!shallow) {
            if (!isShallow(value) && !isReadonly(value)) {
              oldValue = toRaw(oldValue);
              value = toRaw(value);
            }
            if (!shared.isArray(target) && isRef(oldValue) && !isRef(value)) {
              oldValue.value = value;
              return true;
            }
          }
          const hadKey = shared.isArray(target) && shared.isIntegerKey(key) ? Number(key) < target.length : shared.hasOwn(target, key);
          const result = Reflect.set(target, key, value, receiver);
          if (target === toRaw(receiver)) {
            if (!hadKey) {
              trigger(target, "add", key, value);
            } else if (shared.hasChanged(value, oldValue)) {
              trigger(target, "set", key, value, oldValue);
            }
          }
          return result;
        };
      }
      function deleteProperty(target, key) {
        const hadKey = shared.hasOwn(target, key);
        const oldValue = target[key];
        const result = Reflect.deleteProperty(target, key);
        if (result && hadKey) {
          trigger(target, "delete", key, void 0, oldValue);
        }
        return result;
      }
      function has$1(target, key) {
        const result = Reflect.has(target, key);
        if (!shared.isSymbol(key) || !builtInSymbols.has(key)) {
          track(target, "has", key);
        }
        return result;
      }
      function ownKeys(target) {
        track(target, "iterate", shared.isArray(target) ? "length" : ITERATE_KEY);
        return Reflect.ownKeys(target);
      }
      var mutableHandlers = {
        get: get$1,
        set: set$1,
        deleteProperty,
        has: has$1,
        ownKeys
      };
      var readonlyHandlers = {
        get: readonlyGet,
        set(target, key) {
          {
            warn(
              `Set operation on key "${String(key)}" failed: target is readonly.`,
              target
            );
          }
          return true;
        },
        deleteProperty(target, key) {
          {
            warn(
              `Delete operation on key "${String(key)}" failed: target is readonly.`,
              target
            );
          }
          return true;
        }
      };
      var shallowReactiveHandlers = /* @__PURE__ */ shared.extend(
        {},
        mutableHandlers,
        {
          get: shallowGet,
          set: shallowSet
        }
      );
      var shallowReadonlyHandlers = /* @__PURE__ */ shared.extend(
        {},
        readonlyHandlers,
        {
          get: shallowReadonlyGet
        }
      );
      var toShallow = (value) => value;
      var getProto = (v) => Reflect.getPrototypeOf(v);
      function get(target, key, isReadonly2 = false, isShallow2 = false) {
        target = target["__v_raw"];
        const rawTarget = toRaw(target);
        const rawKey = toRaw(key);
        if (!isReadonly2) {
          if (key !== rawKey) {
            track(rawTarget, "get", key);
          }
          track(rawTarget, "get", rawKey);
        }
        const { has: has2 } = getProto(rawTarget);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        if (has2.call(rawTarget, key)) {
          return wrap(target.get(key));
        } else if (has2.call(rawTarget, rawKey)) {
          return wrap(target.get(rawKey));
        } else if (target !== rawTarget) {
          target.get(key);
        }
      }
      function has(key, isReadonly2 = false) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const rawKey = toRaw(key);
        if (!isReadonly2) {
          if (key !== rawKey) {
            track(rawTarget, "has", key);
          }
          track(rawTarget, "has", rawKey);
        }
        return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
      }
      function size(target, isReadonly2 = false) {
        target = target["__v_raw"];
        !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
        return Reflect.get(target, "size", target);
      }
      function add(value) {
        value = toRaw(value);
        const target = toRaw(this);
        const proto = getProto(target);
        const hadKey = proto.has.call(target, value);
        if (!hadKey) {
          target.add(value);
          trigger(target, "add", value, value);
        }
        return this;
      }
      function set(key, value) {
        value = toRaw(value);
        const target = toRaw(this);
        const { has: has2, get: get2 } = getProto(target);
        let hadKey = has2.call(target, key);
        if (!hadKey) {
          key = toRaw(key);
          hadKey = has2.call(target, key);
        } else {
          checkIdentityKeys(target, has2, key);
        }
        const oldValue = get2.call(target, key);
        target.set(key, value);
        if (!hadKey) {
          trigger(target, "add", key, value);
        } else if (shared.hasChanged(value, oldValue)) {
          trigger(target, "set", key, value, oldValue);
        }
        return this;
      }
      function deleteEntry(key) {
        const target = toRaw(this);
        const { has: has2, get: get2 } = getProto(target);
        let hadKey = has2.call(target, key);
        if (!hadKey) {
          key = toRaw(key);
          hadKey = has2.call(target, key);
        } else {
          checkIdentityKeys(target, has2, key);
        }
        const oldValue = get2 ? get2.call(target, key) : void 0;
        const result = target.delete(key);
        if (hadKey) {
          trigger(target, "delete", key, void 0, oldValue);
        }
        return result;
      }
      function clear() {
        const target = toRaw(this);
        const hadItems = target.size !== 0;
        const oldTarget = shared.isMap(target) ? new Map(target) : new Set(target);
        const result = target.clear();
        if (hadItems) {
          trigger(target, "clear", void 0, void 0, oldTarget);
        }
        return result;
      }
      function createForEach(isReadonly2, isShallow2) {
        return function forEach(callback, thisArg) {
          const observed = this;
          const target = observed["__v_raw"];
          const rawTarget = toRaw(target);
          const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
          !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
          return target.forEach((value, key) => {
            return callback.call(thisArg, wrap(value), wrap(key), observed);
          });
        };
      }
      function createIterableMethod(method, isReadonly2, isShallow2) {
        return function(...args) {
          const target = this["__v_raw"];
          const rawTarget = toRaw(target);
          const targetIsMap = shared.isMap(rawTarget);
          const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
          const isKeyOnly = method === "keys" && targetIsMap;
          const innerIterator = target[method](...args);
          const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
          !isReadonly2 && track(
            rawTarget,
            "iterate",
            isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
          );
          return {
            // iterator protocol
            next() {
              const { value, done } = innerIterator.next();
              return done ? { value, done } : {
                value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
                done
              };
            },
            // iterable protocol
            [Symbol.iterator]() {
              return this;
            }
          };
        };
      }
      function createReadonlyMethod(type) {
        return function(...args) {
          {
            const key = args[0] ? `on key "${args[0]}" ` : ``;
            console.warn(
              `${shared.capitalize(type)} operation ${key}failed: target is readonly.`,
              toRaw(this)
            );
          }
          return type === "delete" ? false : this;
        };
      }
      function createInstrumentations() {
        const mutableInstrumentations2 = {
          get(key) {
            return get(this, key);
          },
          get size() {
            return size(this);
          },
          has,
          add,
          set,
          delete: deleteEntry,
          clear,
          forEach: createForEach(false, false)
        };
        const shallowInstrumentations2 = {
          get(key) {
            return get(this, key, false, true);
          },
          get size() {
            return size(this);
          },
          has,
          add,
          set,
          delete: deleteEntry,
          clear,
          forEach: createForEach(false, true)
        };
        const readonlyInstrumentations2 = {
          get(key) {
            return get(this, key, true);
          },
          get size() {
            return size(this, true);
          },
          has(key) {
            return has.call(this, key, true);
          },
          add: createReadonlyMethod("add"),
          set: createReadonlyMethod("set"),
          delete: createReadonlyMethod("delete"),
          clear: createReadonlyMethod("clear"),
          forEach: createForEach(true, false)
        };
        const shallowReadonlyInstrumentations2 = {
          get(key) {
            return get(this, key, true, true);
          },
          get size() {
            return size(this, true);
          },
          has(key) {
            return has.call(this, key, true);
          },
          add: createReadonlyMethod("add"),
          set: createReadonlyMethod("set"),
          delete: createReadonlyMethod("delete"),
          clear: createReadonlyMethod("clear"),
          forEach: createForEach(true, true)
        };
        const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
        iteratorMethods.forEach((method) => {
          mutableInstrumentations2[method] = createIterableMethod(
            method,
            false,
            false
          );
          readonlyInstrumentations2[method] = createIterableMethod(
            method,
            true,
            false
          );
          shallowInstrumentations2[method] = createIterableMethod(
            method,
            false,
            true
          );
          shallowReadonlyInstrumentations2[method] = createIterableMethod(
            method,
            true,
            true
          );
        });
        return [
          mutableInstrumentations2,
          readonlyInstrumentations2,
          shallowInstrumentations2,
          shallowReadonlyInstrumentations2
        ];
      }
      var [
        mutableInstrumentations,
        readonlyInstrumentations,
        shallowInstrumentations,
        shallowReadonlyInstrumentations
      ] = /* @__PURE__ */ createInstrumentations();
      function createInstrumentationGetter(isReadonly2, shallow) {
        const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
        return (target, key, receiver) => {
          if (key === "__v_isReactive") {
            return !isReadonly2;
          } else if (key === "__v_isReadonly") {
            return isReadonly2;
          } else if (key === "__v_raw") {
            return target;
          }
          return Reflect.get(
            shared.hasOwn(instrumentations, key) && key in target ? instrumentations : target,
            key,
            receiver
          );
        };
      }
      var mutableCollectionHandlers = {
        get: /* @__PURE__ */ createInstrumentationGetter(false, false)
      };
      var shallowCollectionHandlers = {
        get: /* @__PURE__ */ createInstrumentationGetter(false, true)
      };
      var readonlyCollectionHandlers = {
        get: /* @__PURE__ */ createInstrumentationGetter(true, false)
      };
      var shallowReadonlyCollectionHandlers = {
        get: /* @__PURE__ */ createInstrumentationGetter(true, true)
      };
      function checkIdentityKeys(target, has2, key) {
        const rawKey = toRaw(key);
        if (rawKey !== key && has2.call(target, rawKey)) {
          const type = shared.toRawType(target);
          console.warn(
            `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
          );
        }
      }
      var reactiveMap = /* @__PURE__ */ new WeakMap();
      var shallowReactiveMap = /* @__PURE__ */ new WeakMap();
      var readonlyMap = /* @__PURE__ */ new WeakMap();
      var shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
      function targetTypeMap(rawType) {
        switch (rawType) {
          case "Object":
          case "Array":
            return 1;
          case "Map":
          case "Set":
          case "WeakMap":
          case "WeakSet":
            return 2;
          default:
            return 0;
        }
      }
      function getTargetType(value) {
        return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(shared.toRawType(value));
      }
      function reactive(target) {
        if (isReadonly(target)) {
          return target;
        }
        return createReactiveObject(
          target,
          false,
          mutableHandlers,
          mutableCollectionHandlers,
          reactiveMap
        );
      }
      function shallowReactive(target) {
        return createReactiveObject(
          target,
          false,
          shallowReactiveHandlers,
          shallowCollectionHandlers,
          shallowReactiveMap
        );
      }
      function readonly(target) {
        return createReactiveObject(
          target,
          true,
          readonlyHandlers,
          readonlyCollectionHandlers,
          readonlyMap
        );
      }
      function shallowReadonly(target) {
        return createReactiveObject(
          target,
          true,
          shallowReadonlyHandlers,
          shallowReadonlyCollectionHandlers,
          shallowReadonlyMap
        );
      }
      function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
        if (!shared.isObject(target)) {
          {
            console.warn(`value cannot be made reactive: ${String(target)}`);
          }
          return target;
        }
        if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
          return target;
        }
        const existingProxy = proxyMap.get(target);
        if (existingProxy) {
          return existingProxy;
        }
        const targetType = getTargetType(target);
        if (targetType === 0) {
          return target;
        }
        const proxy = new Proxy(
          target,
          targetType === 2 ? collectionHandlers : baseHandlers
        );
        proxyMap.set(target, proxy);
        return proxy;
      }
      function isReactive(value) {
        if (isReadonly(value)) {
          return isReactive(value["__v_raw"]);
        }
        return !!(value && value["__v_isReactive"]);
      }
      function isReadonly(value) {
        return !!(value && value["__v_isReadonly"]);
      }
      function isShallow(value) {
        return !!(value && value["__v_isShallow"]);
      }
      function isProxy(value) {
        return isReactive(value) || isReadonly(value);
      }
      function toRaw(observed) {
        const raw = observed && observed["__v_raw"];
        return raw ? toRaw(raw) : observed;
      }
      function markRaw(value) {
        shared.def(value, "__v_skip", true);
        return value;
      }
      var toReactive = (value) => shared.isObject(value) ? reactive(value) : value;
      var toReadonly = (value) => shared.isObject(value) ? readonly(value) : value;
      function trackRefValue(ref2) {
        if (shouldTrack && activeEffect) {
          ref2 = toRaw(ref2);
          {
            trackEffects(ref2.dep || (ref2.dep = createDep()), {
              target: ref2,
              type: "get",
              key: "value"
            });
          }
        }
      }
      function triggerRefValue(ref2, newVal) {
        ref2 = toRaw(ref2);
        const dep = ref2.dep;
        if (dep) {
          {
            triggerEffects(dep, {
              target: ref2,
              type: "set",
              key: "value",
              newValue: newVal
            });
          }
        }
      }
      function isRef(r) {
        return !!(r && r.__v_isRef === true);
      }
      function ref(value) {
        return createRef(value, false);
      }
      function shallowRef(value) {
        return createRef(value, true);
      }
      function createRef(rawValue, shallow) {
        if (isRef(rawValue)) {
          return rawValue;
        }
        return new RefImpl(rawValue, shallow);
      }
      var RefImpl = class {
        constructor(value, __v_isShallow) {
          this.__v_isShallow = __v_isShallow;
          this.dep = void 0;
          this.__v_isRef = true;
          this._rawValue = __v_isShallow ? value : toRaw(value);
          this._value = __v_isShallow ? value : toReactive(value);
        }
        get value() {
          trackRefValue(this);
          return this._value;
        }
        set value(newVal) {
          const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
          newVal = useDirectValue ? newVal : toRaw(newVal);
          if (shared.hasChanged(newVal, this._rawValue)) {
            this._rawValue = newVal;
            this._value = useDirectValue ? newVal : toReactive(newVal);
            triggerRefValue(this, newVal);
          }
        }
      };
      function triggerRef(ref2) {
        triggerRefValue(ref2, ref2.value);
      }
      function unref(ref2) {
        return isRef(ref2) ? ref2.value : ref2;
      }
      function toValue(source) {
        return shared.isFunction(source) ? source() : unref(source);
      }
      var shallowUnwrapHandlers = {
        get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
        set: (target, key, value, receiver) => {
          const oldValue = target[key];
          if (isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
          } else {
            return Reflect.set(target, key, value, receiver);
          }
        }
      };
      function proxyRefs(objectWithRefs) {
        return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
      }
      var CustomRefImpl = class {
        constructor(factory) {
          this.dep = void 0;
          this.__v_isRef = true;
          const { get: get2, set: set2 } = factory(
            () => trackRefValue(this),
            () => triggerRefValue(this)
          );
          this._get = get2;
          this._set = set2;
        }
        get value() {
          return this._get();
        }
        set value(newVal) {
          this._set(newVal);
        }
      };
      function customRef(factory) {
        return new CustomRefImpl(factory);
      }
      function toRefs(object) {
        if (!isProxy(object)) {
          console.warn(`toRefs() expects a reactive object but received a plain one.`);
        }
        const ret = shared.isArray(object) ? new Array(object.length) : {};
        for (const key in object) {
          ret[key] = propertyToRef(object, key);
        }
        return ret;
      }
      var ObjectRefImpl = class {
        constructor(_object, _key, _defaultValue) {
          this._object = _object;
          this._key = _key;
          this._defaultValue = _defaultValue;
          this.__v_isRef = true;
        }
        get value() {
          const val = this._object[this._key];
          return val === void 0 ? this._defaultValue : val;
        }
        set value(newVal) {
          this._object[this._key] = newVal;
        }
        get dep() {
          return getDepFromReactive(toRaw(this._object), this._key);
        }
      };
      var GetterRefImpl = class {
        constructor(_getter) {
          this._getter = _getter;
          this.__v_isRef = true;
          this.__v_isReadonly = true;
        }
        get value() {
          return this._getter();
        }
      };
      function toRef(source, key, defaultValue) {
        if (isRef(source)) {
          return source;
        } else if (shared.isFunction(source)) {
          return new GetterRefImpl(source);
        } else if (shared.isObject(source) && arguments.length > 1) {
          return propertyToRef(source, key, defaultValue);
        } else {
          return ref(source);
        }
      }
      function propertyToRef(source, key, defaultValue) {
        const val = source[key];
        return isRef(val) ? val : new ObjectRefImpl(
          source,
          key,
          defaultValue
        );
      }
      var ComputedRefImpl = class {
        constructor(getter, _setter, isReadonly2, isSSR) {
          this._setter = _setter;
          this.dep = void 0;
          this.__v_isRef = true;
          this["__v_isReadonly"] = false;
          this._dirty = true;
          this.effect = new ReactiveEffect(getter, () => {
            if (!this._dirty) {
              this._dirty = true;
              triggerRefValue(this);
            }
          });
          this.effect.computed = this;
          this.effect.active = this._cacheable = !isSSR;
          this["__v_isReadonly"] = isReadonly2;
        }
        get value() {
          const self2 = toRaw(this);
          trackRefValue(self2);
          if (self2._dirty || !self2._cacheable) {
            self2._dirty = false;
            self2._value = self2.effect.run();
          }
          return self2._value;
        }
        set value(newValue) {
          this._setter(newValue);
        }
      };
      function computed(getterOrOptions, debugOptions, isSSR = false) {
        let getter;
        let setter;
        const onlyGetter = shared.isFunction(getterOrOptions);
        if (onlyGetter) {
          getter = getterOrOptions;
          setter = () => {
            console.warn("Write operation failed: computed value is readonly");
          };
        } else {
          getter = getterOrOptions.get;
          setter = getterOrOptions.set;
        }
        const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
        if (debugOptions && !isSSR) {
          cRef.effect.onTrack = debugOptions.onTrack;
          cRef.effect.onTrigger = debugOptions.onTrigger;
        }
        return cRef;
      }
      var tick = /* @__PURE__ */ Promise.resolve();
      var queue = [];
      var queued = false;
      var scheduler = (fn) => {
        queue.push(fn);
        if (!queued) {
          queued = true;
          tick.then(flush);
        }
      };
      var flush = () => {
        for (let i = 0; i < queue.length; i++) {
          queue[i]();
        }
        queue.length = 0;
        queued = false;
      };
      var DeferredComputedRefImpl = class {
        constructor(getter) {
          this.dep = void 0;
          this._dirty = true;
          this.__v_isRef = true;
          this["__v_isReadonly"] = true;
          let compareTarget;
          let hasCompareTarget = false;
          let scheduled = false;
          this.effect = new ReactiveEffect(getter, (computedTrigger) => {
            if (this.dep) {
              if (computedTrigger) {
                compareTarget = this._value;
                hasCompareTarget = true;
              } else if (!scheduled) {
                const valueToCompare = hasCompareTarget ? compareTarget : this._value;
                scheduled = true;
                hasCompareTarget = false;
                scheduler(() => {
                  if (this.effect.active && this._get() !== valueToCompare) {
                    triggerRefValue(this);
                  }
                  scheduled = false;
                });
              }
              for (const e of this.dep) {
                if (e.computed instanceof DeferredComputedRefImpl) {
                  e.scheduler(
                    true
                    /* computedTrigger */
                  );
                }
              }
            }
            this._dirty = true;
          });
          this.effect.computed = this;
        }
        _get() {
          if (this._dirty) {
            this._dirty = false;
            return this._value = this.effect.run();
          }
          return this._value;
        }
        get value() {
          trackRefValue(this);
          return toRaw(this)._get();
        }
      };
      function deferredComputed(getter) {
        return new DeferredComputedRefImpl(getter);
      }
      exports.EffectScope = EffectScope;
      exports.ITERATE_KEY = ITERATE_KEY;
      exports.ReactiveEffect = ReactiveEffect;
      exports.computed = computed;
      exports.customRef = customRef;
      exports.deferredComputed = deferredComputed;
      exports.effect = effect;
      exports.effectScope = effectScope;
      exports.enableTracking = enableTracking;
      exports.getCurrentScope = getCurrentScope;
      exports.isProxy = isProxy;
      exports.isReactive = isReactive;
      exports.isReadonly = isReadonly;
      exports.isRef = isRef;
      exports.isShallow = isShallow;
      exports.markRaw = markRaw;
      exports.onScopeDispose = onScopeDispose;
      exports.pauseTracking = pauseTracking;
      exports.proxyRefs = proxyRefs;
      exports.reactive = reactive;
      exports.readonly = readonly;
      exports.ref = ref;
      exports.resetTracking = resetTracking;
      exports.shallowReactive = shallowReactive;
      exports.shallowReadonly = shallowReadonly;
      exports.shallowRef = shallowRef;
      exports.stop = stop;
      exports.toRaw = toRaw;
      exports.toRef = toRef;
      exports.toRefs = toRefs;
      exports.toValue = toValue;
      exports.track = track;
      exports.trigger = trigger;
      exports.triggerRef = triggerRef;
      exports.unref = unref;
    }
  });

  // node_modules/@vue/reactivity/index.js
  var require_reactivity = __commonJS({
    "node_modules/@vue/reactivity/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_reactivity_cjs();
      }
    }
  });

  // node_modules/@vue/runtime-core/dist/runtime-core.cjs.js
  var require_runtime_core_cjs = __commonJS({
    "node_modules/@vue/runtime-core/dist/runtime-core.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var reactivity = require_reactivity();
      var shared = require_shared();
      var stack = [];
      function pushWarningContext(vnode) {
        stack.push(vnode);
      }
      function popWarningContext() {
        stack.pop();
      }
      function warn(msg, ...args) {
        reactivity.pauseTracking();
        const instance = stack.length ? stack[stack.length - 1].component : null;
        const appWarnHandler = instance && instance.appContext.config.warnHandler;
        const trace = getComponentTrace();
        if (appWarnHandler) {
          callWithErrorHandling(
            appWarnHandler,
            instance,
            11,
            [
              msg + args.join(""),
              instance && instance.proxy,
              trace.map(
                ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
              ).join("\n"),
              trace
            ]
          );
        } else {
          const warnArgs = [`[Vue warn]: ${msg}`, ...args];
          if (trace.length && // avoid spamming console during tests
          true) {
            warnArgs.push(`
`, ...formatTrace(trace));
          }
          console.warn(...warnArgs);
        }
        reactivity.resetTracking();
      }
      function getComponentTrace() {
        let currentVNode = stack[stack.length - 1];
        if (!currentVNode) {
          return [];
        }
        const normalizedStack = [];
        while (currentVNode) {
          const last = normalizedStack[0];
          if (last && last.vnode === currentVNode) {
            last.recurseCount++;
          } else {
            normalizedStack.push({
              vnode: currentVNode,
              recurseCount: 0
            });
          }
          const parentInstance = currentVNode.component && currentVNode.component.parent;
          currentVNode = parentInstance && parentInstance.vnode;
        }
        return normalizedStack;
      }
      function formatTrace(trace) {
        const logs = [];
        trace.forEach((entry, i) => {
          logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
        });
        return logs;
      }
      function formatTraceEntry({ vnode, recurseCount }) {
        const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
        const isRoot = vnode.component ? vnode.component.parent == null : false;
        const open = ` at <${formatComponentName(
          vnode.component,
          vnode.type,
          isRoot
        )}`;
        const close = `>` + postfix;
        return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
      }
      function formatProps(props) {
        const res = [];
        const keys = Object.keys(props);
        keys.slice(0, 3).forEach((key) => {
          res.push(...formatProp(key, props[key]));
        });
        if (keys.length > 3) {
          res.push(` ...`);
        }
        return res;
      }
      function formatProp(key, value, raw) {
        if (shared.isString(value)) {
          value = JSON.stringify(value);
          return raw ? value : [`${key}=${value}`];
        } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
          return raw ? value : [`${key}=${value}`];
        } else if (reactivity.isRef(value)) {
          value = formatProp(key, reactivity.toRaw(value.value), true);
          return raw ? value : [`${key}=Ref<`, value, `>`];
        } else if (shared.isFunction(value)) {
          return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
        } else {
          value = reactivity.toRaw(value);
          return raw ? value : [`${key}=`, value];
        }
      }
      function assertNumber(val, type) {
        if (val === void 0) {
          return;
        } else if (typeof val !== "number") {
          warn(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
        } else if (isNaN(val)) {
          warn(`${type} is NaN - the duration expression might be incorrect.`);
        }
      }
      var ErrorTypeStrings = {
        ["sp"]: "serverPrefetch hook",
        ["bc"]: "beforeCreate hook",
        ["c"]: "created hook",
        ["bm"]: "beforeMount hook",
        ["m"]: "mounted hook",
        ["bu"]: "beforeUpdate hook",
        ["u"]: "updated",
        ["bum"]: "beforeUnmount hook",
        ["um"]: "unmounted hook",
        ["a"]: "activated hook",
        ["da"]: "deactivated hook",
        ["ec"]: "errorCaptured hook",
        ["rtc"]: "renderTracked hook",
        ["rtg"]: "renderTriggered hook",
        [0]: "setup function",
        [1]: "render function",
        [2]: "watcher getter",
        [3]: "watcher callback",
        [4]: "watcher cleanup function",
        [5]: "native event handler",
        [6]: "component event handler",
        [7]: "vnode hook",
        [8]: "directive hook",
        [9]: "transition hook",
        [10]: "app errorHandler",
        [11]: "app warnHandler",
        [12]: "ref function",
        [13]: "async component loader",
        [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"
      };
      function callWithErrorHandling(fn, instance, type, args) {
        let res;
        try {
          res = args ? fn(...args) : fn();
        } catch (err) {
          handleError(err, instance, type);
        }
        return res;
      }
      function callWithAsyncErrorHandling(fn, instance, type, args) {
        if (shared.isFunction(fn)) {
          const res = callWithErrorHandling(fn, instance, type, args);
          if (res && shared.isPromise(res)) {
            res.catch((err) => {
              handleError(err, instance, type);
            });
          }
          return res;
        }
        const values = [];
        for (let i = 0; i < fn.length; i++) {
          values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
        }
        return values;
      }
      function handleError(err, instance, type, throwInDev = true) {
        const contextVNode = instance ? instance.vnode : null;
        if (instance) {
          let cur = instance.parent;
          const exposedInstance = instance.proxy;
          const errorInfo = ErrorTypeStrings[type];
          while (cur) {
            const errorCapturedHooks = cur.ec;
            if (errorCapturedHooks) {
              for (let i = 0; i < errorCapturedHooks.length; i++) {
                if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
                  return;
                }
              }
            }
            cur = cur.parent;
          }
          const appErrorHandler = instance.appContext.config.errorHandler;
          if (appErrorHandler) {
            callWithErrorHandling(
              appErrorHandler,
              null,
              10,
              [err, exposedInstance, errorInfo]
            );
            return;
          }
        }
        logError(err, type, contextVNode, throwInDev);
      }
      function logError(err, type, contextVNode, throwInDev = true) {
        {
          const info = ErrorTypeStrings[type];
          if (contextVNode) {
            pushWarningContext(contextVNode);
          }
          warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
          if (contextVNode) {
            popWarningContext();
          }
          if (throwInDev) {
            throw err;
          } else {
            console.error(err);
          }
        }
      }
      var isFlushing = false;
      var isFlushPending = false;
      var queue = [];
      var flushIndex = 0;
      var pendingPostFlushCbs = [];
      var activePostFlushCbs = null;
      var postFlushIndex = 0;
      var resolvedPromise = /* @__PURE__ */ Promise.resolve();
      var currentFlushPromise = null;
      var RECURSION_LIMIT = 100;
      function nextTick(fn) {
        const p = currentFlushPromise || resolvedPromise;
        return fn ? p.then(this ? fn.bind(this) : fn) : p;
      }
      function findInsertionIndex(id) {
        let start = flushIndex + 1;
        let end = queue.length;
        while (start < end) {
          const middle = start + end >>> 1;
          const middleJobId = getId(queue[middle]);
          middleJobId < id ? start = middle + 1 : end = middle;
        }
        return start;
      }
      function queueJob(job) {
        if (!queue.length || !queue.includes(
          job,
          isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex
        )) {
          if (job.id == null) {
            queue.push(job);
          } else {
            queue.splice(findInsertionIndex(job.id), 0, job);
          }
          queueFlush();
        }
      }
      function queueFlush() {
        if (!isFlushing && !isFlushPending) {
          isFlushPending = true;
          currentFlushPromise = resolvedPromise.then(flushJobs);
        }
      }
      function invalidateJob(job) {
        const i = queue.indexOf(job);
        if (i > flushIndex) {
          queue.splice(i, 1);
        }
      }
      function queuePostFlushCb(cb) {
        if (!shared.isArray(cb)) {
          if (!activePostFlushCbs || !activePostFlushCbs.includes(
            cb,
            cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex
          )) {
            pendingPostFlushCbs.push(cb);
          }
        } else {
          pendingPostFlushCbs.push(...cb);
        }
        queueFlush();
      }
      function flushPreFlushCbs(seen, i = isFlushing ? flushIndex + 1 : 0) {
        {
          seen = seen || /* @__PURE__ */ new Map();
        }
        for (; i < queue.length; i++) {
          const cb = queue[i];
          if (cb && cb.pre) {
            if (checkRecursiveUpdates(seen, cb)) {
              continue;
            }
            queue.splice(i, 1);
            i--;
            cb();
          }
        }
      }
      function flushPostFlushCbs(seen) {
        if (pendingPostFlushCbs.length) {
          const deduped = [...new Set(pendingPostFlushCbs)];
          pendingPostFlushCbs.length = 0;
          if (activePostFlushCbs) {
            activePostFlushCbs.push(...deduped);
            return;
          }
          activePostFlushCbs = deduped;
          {
            seen = seen || /* @__PURE__ */ new Map();
          }
          activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
          for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
            if (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) {
              continue;
            }
            activePostFlushCbs[postFlushIndex]();
          }
          activePostFlushCbs = null;
          postFlushIndex = 0;
        }
      }
      var getId = (job) => job.id == null ? Infinity : job.id;
      var comparator = (a, b) => {
        const diff = getId(a) - getId(b);
        if (diff === 0) {
          if (a.pre && !b.pre)
            return -1;
          if (b.pre && !a.pre)
            return 1;
        }
        return diff;
      };
      function flushJobs(seen) {
        isFlushPending = false;
        isFlushing = true;
        {
          seen = seen || /* @__PURE__ */ new Map();
        }
        queue.sort(comparator);
        const check = (job) => checkRecursiveUpdates(seen, job);
        try {
          for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
            const job = queue[flushIndex];
            if (job && job.active !== false) {
              if (check(job)) {
                continue;
              }
              callWithErrorHandling(job, null, 14);
            }
          }
        } finally {
          flushIndex = 0;
          queue.length = 0;
          flushPostFlushCbs(seen);
          isFlushing = false;
          currentFlushPromise = null;
          if (queue.length || pendingPostFlushCbs.length) {
            flushJobs(seen);
          }
        }
      }
      function checkRecursiveUpdates(seen, fn) {
        if (!seen.has(fn)) {
          seen.set(fn, 1);
        } else {
          const count = seen.get(fn);
          if (count > RECURSION_LIMIT) {
            const instance = fn.ownerInstance;
            const componentName = instance && getComponentName(instance.type);
            warn(
              `Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`
            );
            return true;
          } else {
            seen.set(fn, count + 1);
          }
        }
      }
      var isHmrUpdating = false;
      var hmrDirtyComponents = /* @__PURE__ */ new Set();
      {
        shared.getGlobalThis().__VUE_HMR_RUNTIME__ = {
          createRecord: tryWrap(createRecord),
          rerender: tryWrap(rerender),
          reload: tryWrap(reload)
        };
      }
      var map = /* @__PURE__ */ new Map();
      function registerHMR(instance) {
        const id = instance.type.__hmrId;
        let record = map.get(id);
        if (!record) {
          createRecord(id, instance.type);
          record = map.get(id);
        }
        record.instances.add(instance);
      }
      function unregisterHMR(instance) {
        map.get(instance.type.__hmrId).instances.delete(instance);
      }
      function createRecord(id, initialDef) {
        if (map.has(id)) {
          return false;
        }
        map.set(id, {
          initialDef: normalizeClassComponent(initialDef),
          instances: /* @__PURE__ */ new Set()
        });
        return true;
      }
      function normalizeClassComponent(component) {
        return isClassComponent(component) ? component.__vccOpts : component;
      }
      function rerender(id, newRender) {
        const record = map.get(id);
        if (!record) {
          return;
        }
        record.initialDef.render = newRender;
        [...record.instances].forEach((instance) => {
          if (newRender) {
            instance.render = newRender;
            normalizeClassComponent(instance.type).render = newRender;
          }
          instance.renderCache = [];
          isHmrUpdating = true;
          instance.update();
          isHmrUpdating = false;
        });
      }
      function reload(id, newComp) {
        const record = map.get(id);
        if (!record)
          return;
        newComp = normalizeClassComponent(newComp);
        updateComponentDef(record.initialDef, newComp);
        const instances = [...record.instances];
        for (const instance of instances) {
          const oldComp = normalizeClassComponent(instance.type);
          if (!hmrDirtyComponents.has(oldComp)) {
            if (oldComp !== record.initialDef) {
              updateComponentDef(oldComp, newComp);
            }
            hmrDirtyComponents.add(oldComp);
          }
          instance.appContext.propsCache.delete(instance.type);
          instance.appContext.emitsCache.delete(instance.type);
          instance.appContext.optionsCache.delete(instance.type);
          if (instance.ceReload) {
            hmrDirtyComponents.add(oldComp);
            instance.ceReload(newComp.styles);
            hmrDirtyComponents.delete(oldComp);
          } else if (instance.parent) {
            queueJob(instance.parent.update);
          } else if (instance.appContext.reload) {
            instance.appContext.reload();
          } else if (typeof window !== "undefined") {
            window.location.reload();
          } else {
            console.warn(
              "[HMR] Root or manually mounted instance modified. Full reload required."
            );
          }
        }
        queuePostFlushCb(() => {
          for (const instance of instances) {
            hmrDirtyComponents.delete(
              normalizeClassComponent(instance.type)
            );
          }
        });
      }
      function updateComponentDef(oldComp, newComp) {
        shared.extend(oldComp, newComp);
        for (const key in oldComp) {
          if (key !== "__file" && !(key in newComp)) {
            delete oldComp[key];
          }
        }
      }
      function tryWrap(fn) {
        return (id, arg) => {
          try {
            return fn(id, arg);
          } catch (e) {
            console.error(e);
            console.warn(
              `[HMR] Something went wrong during Vue component hot-reload. Full reload required.`
            );
          }
        };
      }
      exports.devtools = void 0;
      var buffer = [];
      var devtoolsNotInstalled = false;
      function emit$1(event, ...args) {
        if (exports.devtools) {
          exports.devtools.emit(event, ...args);
        } else if (!devtoolsNotInstalled) {
          buffer.push({ event, args });
        }
      }
      function setDevtoolsHook(hook, target) {
        var _a, _b;
        exports.devtools = hook;
        if (exports.devtools) {
          exports.devtools.enabled = true;
          buffer.forEach(({ event, args }) => exports.devtools.emit(event, ...args));
          buffer = [];
        } else if (
          // handle late devtools injection - only do this if we are in an actual
          // browser environment to avoid the timer handle stalling test runner exit
          // (#4815)
          typeof window !== "undefined" && // some envs mock window but not fully
          window.HTMLElement && // also exclude jsdom
          !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes("jsdom"))
        ) {
          const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
          replay.push((newHook) => {
            setDevtoolsHook(newHook, target);
          });
          setTimeout(() => {
            if (!exports.devtools) {
              target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
              devtoolsNotInstalled = true;
              buffer = [];
            }
          }, 3e3);
        } else {
          devtoolsNotInstalled = true;
          buffer = [];
        }
      }
      function devtoolsInitApp(app2, version2) {
        emit$1("app:init", app2, version2, {
          Fragment,
          Text,
          Comment,
          Static
        });
      }
      function devtoolsUnmountApp(app2) {
        emit$1("app:unmount", app2);
      }
      var devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook(
        "component:added"
        /* COMPONENT_ADDED */
      );
      var devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook(
        "component:updated"
        /* COMPONENT_UPDATED */
      );
      var _devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook(
        "component:removed"
        /* COMPONENT_REMOVED */
      );
      var devtoolsComponentRemoved = (component) => {
        if (exports.devtools && typeof exports.devtools.cleanupBuffer === "function" && // remove the component if it wasn't buffered
        !exports.devtools.cleanupBuffer(component)) {
          _devtoolsComponentRemoved(component);
        }
      };
      function createDevtoolsComponentHook(hook) {
        return (component) => {
          emit$1(
            hook,
            component.appContext.app,
            component.uid,
            component.parent ? component.parent.uid : void 0,
            component
          );
        };
      }
      var devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook(
        "perf:start"
        /* PERFORMANCE_START */
      );
      var devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook(
        "perf:end"
        /* PERFORMANCE_END */
      );
      function createDevtoolsPerformanceHook(hook) {
        return (component, type, time) => {
          emit$1(hook, component.appContext.app, component.uid, component, type, time);
        };
      }
      function devtoolsComponentEmit(component, event, params) {
        emit$1(
          "component:emit",
          component.appContext.app,
          component,
          event,
          params
        );
      }
      function emit(instance, event, ...rawArgs) {
        if (instance.isUnmounted)
          return;
        const props = instance.vnode.props || shared.EMPTY_OBJ;
        {
          const {
            emitsOptions,
            propsOptions: [propsOptions]
          } = instance;
          if (emitsOptions) {
            if (!(event in emitsOptions) && true) {
              if (!propsOptions || !(shared.toHandlerKey(event) in propsOptions)) {
                warn(
                  `Component emitted event "${event}" but it is neither declared in the emits option nor as an "${shared.toHandlerKey(event)}" prop.`
                );
              }
            } else {
              const validator = emitsOptions[event];
              if (shared.isFunction(validator)) {
                const isValid = validator(...rawArgs);
                if (!isValid) {
                  warn(
                    `Invalid event arguments: event validation failed for event "${event}".`
                  );
                }
              }
            }
          }
        }
        let args = rawArgs;
        const isModelListener = event.startsWith("update:");
        const modelArg = isModelListener && event.slice(7);
        if (modelArg && modelArg in props) {
          const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
          const { number, trim } = props[modifiersKey] || shared.EMPTY_OBJ;
          if (trim) {
            args = rawArgs.map((a) => shared.isString(a) ? a.trim() : a);
          }
          if (number) {
            args = rawArgs.map(shared.looseToNumber);
          }
        }
        {
          devtoolsComponentEmit(instance, event, args);
        }
        {
          const lowerCaseEvent = event.toLowerCase();
          if (lowerCaseEvent !== event && props[shared.toHandlerKey(lowerCaseEvent)]) {
            warn(
              `Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(
                instance,
                instance.type
              )} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${shared.hyphenate(event)}" instead of "${event}".`
            );
          }
        }
        let handlerName;
        let handler = props[handlerName = shared.toHandlerKey(event)] || // also try camelCase event handler (#2249)
        props[handlerName = shared.toHandlerKey(shared.camelize(event))];
        if (!handler && isModelListener) {
          handler = props[handlerName = shared.toHandlerKey(shared.hyphenate(event))];
        }
        if (handler) {
          callWithAsyncErrorHandling(
            handler,
            instance,
            6,
            args
          );
        }
        const onceHandler = props[handlerName + `Once`];
        if (onceHandler) {
          if (!instance.emitted) {
            instance.emitted = {};
          } else if (instance.emitted[handlerName]) {
            return;
          }
          instance.emitted[handlerName] = true;
          callWithAsyncErrorHandling(
            onceHandler,
            instance,
            6,
            args
          );
        }
      }
      function normalizeEmitsOptions(comp, appContext, asMixin = false) {
        const cache = appContext.emitsCache;
        const cached = cache.get(comp);
        if (cached !== void 0) {
          return cached;
        }
        const raw = comp.emits;
        let normalized = {};
        let hasExtends = false;
        if (!shared.isFunction(comp)) {
          const extendEmits = (raw2) => {
            const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
            if (normalizedFromExtend) {
              hasExtends = true;
              shared.extend(normalized, normalizedFromExtend);
            }
          };
          if (!asMixin && appContext.mixins.length) {
            appContext.mixins.forEach(extendEmits);
          }
          if (comp.extends) {
            extendEmits(comp.extends);
          }
          if (comp.mixins) {
            comp.mixins.forEach(extendEmits);
          }
        }
        if (!raw && !hasExtends) {
          if (shared.isObject(comp)) {
            cache.set(comp, null);
          }
          return null;
        }
        if (shared.isArray(raw)) {
          raw.forEach((key) => normalized[key] = null);
        } else {
          shared.extend(normalized, raw);
        }
        if (shared.isObject(comp)) {
          cache.set(comp, normalized);
        }
        return normalized;
      }
      function isEmitListener(options, key) {
        if (!options || !shared.isOn(key)) {
          return false;
        }
        key = key.slice(2).replace(/Once$/, "");
        return shared.hasOwn(options, key[0].toLowerCase() + key.slice(1)) || shared.hasOwn(options, shared.hyphenate(key)) || shared.hasOwn(options, key);
      }
      var currentRenderingInstance = null;
      var currentScopeId = null;
      function setCurrentRenderingInstance(instance) {
        const prev = currentRenderingInstance;
        currentRenderingInstance = instance;
        currentScopeId = instance && instance.type.__scopeId || null;
        return prev;
      }
      function pushScopeId(id) {
        currentScopeId = id;
      }
      function popScopeId() {
        currentScopeId = null;
      }
      var withScopeId = (_id) => withCtx;
      function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
        if (!ctx)
          return fn;
        if (fn._n) {
          return fn;
        }
        const renderFnWithContext = (...args) => {
          if (renderFnWithContext._d) {
            setBlockTracking(-1);
          }
          const prevInstance = setCurrentRenderingInstance(ctx);
          let res;
          try {
            res = fn(...args);
          } finally {
            setCurrentRenderingInstance(prevInstance);
            if (renderFnWithContext._d) {
              setBlockTracking(1);
            }
          }
          {
            devtoolsComponentUpdated(ctx);
          }
          return res;
        };
        renderFnWithContext._n = true;
        renderFnWithContext._c = true;
        renderFnWithContext._d = true;
        return renderFnWithContext;
      }
      var accessedAttrs = false;
      function markAttrsAccessed() {
        accessedAttrs = true;
      }
      function renderComponentRoot(instance) {
        const {
          type: Component,
          vnode,
          proxy,
          withProxy,
          props,
          propsOptions: [propsOptions],
          slots,
          attrs,
          emit: emit2,
          render,
          renderCache,
          data,
          setupState,
          ctx,
          inheritAttrs
        } = instance;
        let result;
        let fallthroughAttrs;
        const prev = setCurrentRenderingInstance(instance);
        {
          accessedAttrs = false;
        }
        try {
          if (vnode.shapeFlag & 4) {
            const proxyToUse = withProxy || proxy;
            result = normalizeVNode(
              render.call(
                proxyToUse,
                proxyToUse,
                renderCache,
                props,
                setupState,
                data,
                ctx
              )
            );
            fallthroughAttrs = attrs;
          } else {
            const render2 = Component;
            if (attrs === props) {
              markAttrsAccessed();
            }
            result = normalizeVNode(
              render2.length > 1 ? render2(
                props,
                true ? {
                  get attrs() {
                    markAttrsAccessed();
                    return attrs;
                  },
                  slots,
                  emit: emit2
                } : { attrs, slots, emit: emit2 }
              ) : render2(
                props,
                null
                /* we know it doesn't need it */
              )
            );
            fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
          }
        } catch (err) {
          blockStack.length = 0;
          handleError(err, instance, 1);
          result = createVNode(Comment);
        }
        let root = result;
        let setRoot = void 0;
        if (result.patchFlag > 0 && result.patchFlag & 2048) {
          [root, setRoot] = getChildRoot(result);
        }
        if (fallthroughAttrs && inheritAttrs !== false) {
          const keys = Object.keys(fallthroughAttrs);
          const { shapeFlag } = root;
          if (keys.length) {
            if (shapeFlag & (1 | 6)) {
              if (propsOptions && keys.some(shared.isModelListener)) {
                fallthroughAttrs = filterModelListeners(
                  fallthroughAttrs,
                  propsOptions
                );
              }
              root = cloneVNode(root, fallthroughAttrs);
            } else if (!accessedAttrs && root.type !== Comment) {
              const allAttrs = Object.keys(attrs);
              const eventAttrs = [];
              const extraAttrs = [];
              for (let i = 0, l = allAttrs.length; i < l; i++) {
                const key = allAttrs[i];
                if (shared.isOn(key)) {
                  if (!shared.isModelListener(key)) {
                    eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                  }
                } else {
                  extraAttrs.push(key);
                }
              }
              if (extraAttrs.length) {
                warn(
                  `Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`
                );
              }
              if (eventAttrs.length) {
                warn(
                  `Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`
                );
              }
            }
          }
        }
        if (vnode.dirs) {
          if (!isElementRoot(root)) {
            warn(
              `Runtime directive used on component with non-element root node. The directives will not function as intended.`
            );
          }
          root = cloneVNode(root);
          root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
        }
        if (vnode.transition) {
          if (!isElementRoot(root)) {
            warn(
              `Component inside <Transition> renders non-element root node that cannot be animated.`
            );
          }
          root.transition = vnode.transition;
        }
        if (setRoot) {
          setRoot(root);
        } else {
          result = root;
        }
        setCurrentRenderingInstance(prev);
        return result;
      }
      var getChildRoot = (vnode) => {
        const rawChildren = vnode.children;
        const dynamicChildren = vnode.dynamicChildren;
        const childRoot = filterSingleRoot(rawChildren);
        if (!childRoot) {
          return [vnode, void 0];
        }
        const index = rawChildren.indexOf(childRoot);
        const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
        const setRoot = (updatedRoot) => {
          rawChildren[index] = updatedRoot;
          if (dynamicChildren) {
            if (dynamicIndex > -1) {
              dynamicChildren[dynamicIndex] = updatedRoot;
            } else if (updatedRoot.patchFlag > 0) {
              vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
            }
          }
        };
        return [normalizeVNode(childRoot), setRoot];
      };
      function filterSingleRoot(children) {
        let singleRoot;
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          if (isVNode(child)) {
            if (child.type !== Comment || child.children === "v-if") {
              if (singleRoot) {
                return;
              } else {
                singleRoot = child;
              }
            }
          } else {
            return;
          }
        }
        return singleRoot;
      }
      var getFunctionalFallthrough = (attrs) => {
        let res;
        for (const key in attrs) {
          if (key === "class" || key === "style" || shared.isOn(key)) {
            (res || (res = {}))[key] = attrs[key];
          }
        }
        return res;
      };
      var filterModelListeners = (attrs, props) => {
        const res = {};
        for (const key in attrs) {
          if (!shared.isModelListener(key) || !(key.slice(9) in props)) {
            res[key] = attrs[key];
          }
        }
        return res;
      };
      var isElementRoot = (vnode) => {
        return vnode.shapeFlag & (6 | 1) || vnode.type === Comment;
      };
      function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
        const { props: prevProps, children: prevChildren, component } = prevVNode;
        const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
        const emits = component.emitsOptions;
        if ((prevChildren || nextChildren) && isHmrUpdating) {
          return true;
        }
        if (nextVNode.dirs || nextVNode.transition) {
          return true;
        }
        if (optimized && patchFlag >= 0) {
          if (patchFlag & 1024) {
            return true;
          }
          if (patchFlag & 16) {
            if (!prevProps) {
              return !!nextProps;
            }
            return hasPropsChanged(prevProps, nextProps, emits);
          } else if (patchFlag & 8) {
            const dynamicProps = nextVNode.dynamicProps;
            for (let i = 0; i < dynamicProps.length; i++) {
              const key = dynamicProps[i];
              if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
                return true;
              }
            }
          }
        } else {
          if (prevChildren || nextChildren) {
            if (!nextChildren || !nextChildren.$stable) {
              return true;
            }
          }
          if (prevProps === nextProps) {
            return false;
          }
          if (!prevProps) {
            return !!nextProps;
          }
          if (!nextProps) {
            return true;
          }
          return hasPropsChanged(prevProps, nextProps, emits);
        }
        return false;
      }
      function hasPropsChanged(prevProps, nextProps, emitsOptions) {
        const nextKeys = Object.keys(nextProps);
        if (nextKeys.length !== Object.keys(prevProps).length) {
          return true;
        }
        for (let i = 0; i < nextKeys.length; i++) {
          const key = nextKeys[i];
          if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
            return true;
          }
        }
        return false;
      }
      function updateHOCHostEl({ vnode, parent }, el) {
        while (parent && parent.subTree === vnode) {
          (vnode = parent.vnode).el = el;
          parent = parent.parent;
        }
      }
      var isSuspense = (type) => type.__isSuspense;
      var SuspenseImpl = {
        name: "Suspense",
        // In order to make Suspense tree-shakable, we need to avoid importing it
        // directly in the renderer. The renderer checks for the __isSuspense flag
        // on a vnode's type and calls the `process` method, passing in renderer
        // internals.
        __isSuspense: true,
        process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
          if (n1 == null) {
            mountSuspense(
              n2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              isSVG,
              slotScopeIds,
              optimized,
              rendererInternals
            );
          } else {
            patchSuspense(
              n1,
              n2,
              container,
              anchor,
              parentComponent,
              isSVG,
              slotScopeIds,
              optimized,
              rendererInternals
            );
          }
        },
        hydrate: hydrateSuspense,
        create: createSuspenseBoundary,
        normalize: normalizeSuspenseChildren
      };
      var Suspense = SuspenseImpl;
      function triggerEvent(vnode, name) {
        const eventListener = vnode.props && vnode.props[name];
        if (shared.isFunction(eventListener)) {
          eventListener();
        }
      }
      function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
        const {
          p: patch,
          o: { createElement }
        } = rendererInternals;
        const hiddenContainer = createElement("div");
        const suspense = vnode.suspense = createSuspenseBoundary(
          vnode,
          parentSuspense,
          parentComponent,
          container,
          hiddenContainer,
          anchor,
          isSVG,
          slotScopeIds,
          optimized,
          rendererInternals
        );
        patch(
          null,
          suspense.pendingBranch = vnode.ssContent,
          hiddenContainer,
          null,
          parentComponent,
          suspense,
          isSVG,
          slotScopeIds
        );
        if (suspense.deps > 0) {
          triggerEvent(vnode, "onPending");
          triggerEvent(vnode, "onFallback");
          patch(
            null,
            vnode.ssFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            isSVG,
            slotScopeIds
          );
          setActiveBranch(suspense, vnode.ssFallback);
        } else {
          suspense.resolve(false, true);
        }
      }
      function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
        const suspense = n2.suspense = n1.suspense;
        suspense.vnode = n2;
        n2.el = n1.el;
        const newBranch = n2.ssContent;
        const newFallback = n2.ssFallback;
        const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
        if (pendingBranch) {
          suspense.pendingBranch = newBranch;
          if (isSameVNodeType(newBranch, pendingBranch)) {
            patch(
              pendingBranch,
              newBranch,
              suspense.hiddenContainer,
              null,
              parentComponent,
              suspense,
              isSVG,
              slotScopeIds,
              optimized
            );
            if (suspense.deps <= 0) {
              suspense.resolve();
            } else if (isInFallback) {
              patch(
                activeBranch,
                newFallback,
                container,
                anchor,
                parentComponent,
                null,
                // fallback tree will not have suspense context
                isSVG,
                slotScopeIds,
                optimized
              );
              setActiveBranch(suspense, newFallback);
            }
          } else {
            suspense.pendingId++;
            if (isHydrating) {
              suspense.isHydrating = false;
              suspense.activeBranch = pendingBranch;
            } else {
              unmount(pendingBranch, parentComponent, suspense);
            }
            suspense.deps = 0;
            suspense.effects.length = 0;
            suspense.hiddenContainer = createElement("div");
            if (isInFallback) {
              patch(
                null,
                newBranch,
                suspense.hiddenContainer,
                null,
                parentComponent,
                suspense,
                isSVG,
                slotScopeIds,
                optimized
              );
              if (suspense.deps <= 0) {
                suspense.resolve();
              } else {
                patch(
                  activeBranch,
                  newFallback,
                  container,
                  anchor,
                  parentComponent,
                  null,
                  // fallback tree will not have suspense context
                  isSVG,
                  slotScopeIds,
                  optimized
                );
                setActiveBranch(suspense, newFallback);
              }
            } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
              patch(
                activeBranch,
                newBranch,
                container,
                anchor,
                parentComponent,
                suspense,
                isSVG,
                slotScopeIds,
                optimized
              );
              suspense.resolve(true);
            } else {
              patch(
                null,
                newBranch,
                suspense.hiddenContainer,
                null,
                parentComponent,
                suspense,
                isSVG,
                slotScopeIds,
                optimized
              );
              if (suspense.deps <= 0) {
                suspense.resolve();
              }
            }
          }
        } else {
          if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
            patch(
              activeBranch,
              newBranch,
              container,
              anchor,
              parentComponent,
              suspense,
              isSVG,
              slotScopeIds,
              optimized
            );
            setActiveBranch(suspense, newBranch);
          } else {
            triggerEvent(n2, "onPending");
            suspense.pendingBranch = newBranch;
            suspense.pendingId++;
            patch(
              null,
              newBranch,
              suspense.hiddenContainer,
              null,
              parentComponent,
              suspense,
              isSVG,
              slotScopeIds,
              optimized
            );
            if (suspense.deps <= 0) {
              suspense.resolve();
            } else {
              const { timeout, pendingId } = suspense;
              if (timeout > 0) {
                setTimeout(() => {
                  if (suspense.pendingId === pendingId) {
                    suspense.fallback(newFallback);
                  }
                }, timeout);
              } else if (timeout === 0) {
                suspense.fallback(newFallback);
              }
            }
          }
        }
      }
      var hasWarned = false;
      function createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
        if (!hasWarned) {
          hasWarned = true;
          console[console.info ? "info" : "log"](
            `<Suspense> is an experimental feature and its API will likely change.`
          );
        }
        const {
          p: patch,
          m: move,
          um: unmount,
          n: next,
          o: { parentNode, remove }
        } = rendererInternals;
        let parentSuspenseId;
        const isSuspensible = isVNodeSuspensible(vnode);
        if (isSuspensible) {
          if (parentSuspense == null ? void 0 : parentSuspense.pendingBranch) {
            parentSuspenseId = parentSuspense.pendingId;
            parentSuspense.deps++;
          }
        }
        const timeout = vnode.props ? shared.toNumber(vnode.props.timeout) : void 0;
        {
          assertNumber(timeout, `Suspense timeout`);
        }
        const suspense = {
          vnode,
          parent: parentSuspense,
          parentComponent,
          isSVG,
          container,
          hiddenContainer,
          anchor,
          deps: 0,
          pendingId: 0,
          timeout: typeof timeout === "number" ? timeout : -1,
          activeBranch: null,
          pendingBranch: null,
          isInFallback: true,
          isHydrating,
          isUnmounted: false,
          effects: [],
          resolve(resume = false, sync = false) {
            {
              if (!resume && !suspense.pendingBranch) {
                throw new Error(
                  `suspense.resolve() is called without a pending branch.`
                );
              }
              if (suspense.isUnmounted) {
                throw new Error(
                  `suspense.resolve() is called on an already unmounted suspense boundary.`
                );
              }
            }
            const {
              vnode: vnode2,
              activeBranch,
              pendingBranch,
              pendingId,
              effects,
              parentComponent: parentComponent2,
              container: container2
            } = suspense;
            if (suspense.isHydrating) {
              suspense.isHydrating = false;
            } else if (!resume) {
              const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
              if (delayEnter) {
                activeBranch.transition.afterLeave = () => {
                  if (pendingId === suspense.pendingId) {
                    move(pendingBranch, container2, anchor2, 0);
                  }
                };
              }
              let { anchor: anchor2 } = suspense;
              if (activeBranch) {
                anchor2 = next(activeBranch);
                unmount(activeBranch, parentComponent2, suspense, true);
              }
              if (!delayEnter) {
                move(pendingBranch, container2, anchor2, 0);
              }
            }
            setActiveBranch(suspense, pendingBranch);
            suspense.pendingBranch = null;
            suspense.isInFallback = false;
            let parent = suspense.parent;
            let hasUnresolvedAncestor = false;
            while (parent) {
              if (parent.pendingBranch) {
                parent.effects.push(...effects);
                hasUnresolvedAncestor = true;
                break;
              }
              parent = parent.parent;
            }
            if (!hasUnresolvedAncestor) {
              queuePostFlushCb(effects);
            }
            suspense.effects = [];
            if (isSuspensible) {
              if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {
                parentSuspense.deps--;
                if (parentSuspense.deps === 0 && !sync) {
                  parentSuspense.resolve();
                }
              }
            }
            triggerEvent(vnode2, "onResolve");
          },
          fallback(fallbackVNode) {
            if (!suspense.pendingBranch) {
              return;
            }
            const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, isSVG: isSVG2 } = suspense;
            triggerEvent(vnode2, "onFallback");
            const anchor2 = next(activeBranch);
            const mountFallback = () => {
              if (!suspense.isInFallback) {
                return;
              }
              patch(
                null,
                fallbackVNode,
                container2,
                anchor2,
                parentComponent2,
                null,
                // fallback tree will not have suspense context
                isSVG2,
                slotScopeIds,
                optimized
              );
              setActiveBranch(suspense, fallbackVNode);
            };
            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
            if (delayEnter) {
              activeBranch.transition.afterLeave = mountFallback;
            }
            suspense.isInFallback = true;
            unmount(
              activeBranch,
              parentComponent2,
              null,
              // no suspense so unmount hooks fire now
              true
              // shouldRemove
            );
            if (!delayEnter) {
              mountFallback();
            }
          },
          move(container2, anchor2, type) {
            suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
            suspense.container = container2;
          },
          next() {
            return suspense.activeBranch && next(suspense.activeBranch);
          },
          registerDep(instance, setupRenderEffect) {
            const isInPendingSuspense = !!suspense.pendingBranch;
            if (isInPendingSuspense) {
              suspense.deps++;
            }
            const hydratedEl = instance.vnode.el;
            instance.asyncDep.catch((err) => {
              handleError(err, instance, 0);
            }).then((asyncSetupResult) => {
              if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
                return;
              }
              instance.asyncResolved = true;
              const { vnode: vnode2 } = instance;
              {
                pushWarningContext(vnode2);
              }
              handleSetupResult(instance, asyncSetupResult, false);
              if (hydratedEl) {
                vnode2.el = hydratedEl;
              }
              const placeholder = !hydratedEl && instance.subTree.el;
              setupRenderEffect(
                instance,
                vnode2,
                // component may have been moved before resolve.
                // if this is not a hydration, instance.subTree will be the comment
                // placeholder.
                parentNode(hydratedEl || instance.subTree.el),
                // anchor will not be used if this is hydration, so only need to
                // consider the comment placeholder case.
                hydratedEl ? null : next(instance.subTree),
                suspense,
                isSVG,
                optimized
              );
              if (placeholder) {
                remove(placeholder);
              }
              updateHOCHostEl(instance, vnode2.el);
              {
                popWarningContext();
              }
              if (isInPendingSuspense && --suspense.deps === 0) {
                suspense.resolve();
              }
            });
          },
          unmount(parentSuspense2, doRemove) {
            suspense.isUnmounted = true;
            if (suspense.activeBranch) {
              unmount(
                suspense.activeBranch,
                parentComponent,
                parentSuspense2,
                doRemove
              );
            }
            if (suspense.pendingBranch) {
              unmount(
                suspense.pendingBranch,
                parentComponent,
                parentSuspense2,
                doRemove
              );
            }
          }
        };
        return suspense;
      }
      function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
        const suspense = vnode.suspense = createSuspenseBoundary(
          vnode,
          parentSuspense,
          parentComponent,
          node.parentNode,
          document.createElement("div"),
          null,
          isSVG,
          slotScopeIds,
          optimized,
          rendererInternals,
          true
          /* hydrating */
        );
        const result = hydrateNode(
          node,
          suspense.pendingBranch = vnode.ssContent,
          parentComponent,
          suspense,
          slotScopeIds,
          optimized
        );
        if (suspense.deps === 0) {
          suspense.resolve(false, true);
        }
        return result;
      }
      function normalizeSuspenseChildren(vnode) {
        const { shapeFlag, children } = vnode;
        const isSlotChildren = shapeFlag & 32;
        vnode.ssContent = normalizeSuspenseSlot(
          isSlotChildren ? children.default : children
        );
        vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
      }
      function normalizeSuspenseSlot(s) {
        let block;
        if (shared.isFunction(s)) {
          const trackBlock = isBlockTreeEnabled && s._c;
          if (trackBlock) {
            s._d = false;
            openBlock();
          }
          s = s();
          if (trackBlock) {
            s._d = true;
            block = currentBlock;
            closeBlock();
          }
        }
        if (shared.isArray(s)) {
          const singleChild = filterSingleRoot(s);
          if (!singleChild) {
            warn(`<Suspense> slots expect a single root node.`);
          }
          s = singleChild;
        }
        s = normalizeVNode(s);
        if (block && !s.dynamicChildren) {
          s.dynamicChildren = block.filter((c) => c !== s);
        }
        return s;
      }
      function queueEffectWithSuspense(fn, suspense) {
        if (suspense && suspense.pendingBranch) {
          if (shared.isArray(fn)) {
            suspense.effects.push(...fn);
          } else {
            suspense.effects.push(fn);
          }
        } else {
          queuePostFlushCb(fn);
        }
      }
      function setActiveBranch(suspense, branch) {
        suspense.activeBranch = branch;
        const { vnode, parentComponent } = suspense;
        const el = vnode.el = branch.el;
        if (parentComponent && parentComponent.subTree === vnode) {
          parentComponent.vnode.el = el;
          updateHOCHostEl(parentComponent, el);
        }
      }
      function isVNodeSuspensible(vnode) {
        var _a;
        return ((_a = vnode.props) == null ? void 0 : _a.suspensible) != null && vnode.props.suspensible !== false;
      }
      function watchEffect(effect, options) {
        return doWatch(effect, null, options);
      }
      function watchPostEffect(effect, options) {
        return doWatch(
          effect,
          null,
          shared.extend({}, options, { flush: "post" })
        );
      }
      function watchSyncEffect(effect, options) {
        return doWatch(
          effect,
          null,
          shared.extend({}, options, { flush: "sync" })
        );
      }
      var INITIAL_WATCHER_VALUE = {};
      function watch(source, cb, options) {
        if (!shared.isFunction(cb)) {
          warn(
            `\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`
          );
        }
        return doWatch(source, cb, options);
      }
      function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = shared.EMPTY_OBJ) {
        var _a;
        if (!cb) {
          if (immediate !== void 0) {
            warn(
              `watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`
            );
          }
          if (deep !== void 0) {
            warn(
              `watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`
            );
          }
        }
        const warnInvalidSource = (s) => {
          warn(
            `Invalid watch source: `,
            s,
            `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
          );
        };
        const instance = reactivity.getCurrentScope() === ((_a = currentInstance) == null ? void 0 : _a.scope) ? currentInstance : null;
        let getter;
        let forceTrigger = false;
        let isMultiSource = false;
        if (reactivity.isRef(source)) {
          getter = () => source.value;
          forceTrigger = reactivity.isShallow(source);
        } else if (reactivity.isReactive(source)) {
          getter = () => source;
          deep = true;
        } else if (shared.isArray(source)) {
          isMultiSource = true;
          forceTrigger = source.some((s) => reactivity.isReactive(s) || reactivity.isShallow(s));
          getter = () => source.map((s) => {
            if (reactivity.isRef(s)) {
              return s.value;
            } else if (reactivity.isReactive(s)) {
              return traverse(s);
            } else if (shared.isFunction(s)) {
              return callWithErrorHandling(s, instance, 2);
            } else {
              warnInvalidSource(s);
            }
          });
        } else if (shared.isFunction(source)) {
          if (cb) {
            getter = () => callWithErrorHandling(source, instance, 2);
          } else {
            getter = () => {
              if (instance && instance.isUnmounted) {
                return;
              }
              if (cleanup) {
                cleanup();
              }
              return callWithAsyncErrorHandling(
                source,
                instance,
                3,
                [onCleanup]
              );
            };
          }
        } else {
          getter = shared.NOOP;
          warnInvalidSource(source);
        }
        if (cb && deep) {
          const baseGetter = getter;
          getter = () => traverse(baseGetter());
        }
        let cleanup;
        let onCleanup = (fn) => {
          cleanup = effect.onStop = () => {
            callWithErrorHandling(fn, instance, 4);
          };
        };
        let ssrCleanup;
        if (isInSSRComponentSetup) {
          onCleanup = shared.NOOP;
          if (!cb) {
            getter();
          } else if (immediate) {
            callWithAsyncErrorHandling(cb, instance, 3, [
              getter(),
              isMultiSource ? [] : void 0,
              onCleanup
            ]);
          }
          if (flush === "sync") {
            const ctx = useSSRContext();
            ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
          } else {
            return shared.NOOP;
          }
        }
        let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
        const job = () => {
          if (!effect.active) {
            return;
          }
          if (cb) {
            const newValue = effect.run();
            if (deep || forceTrigger || (isMultiSource ? newValue.some(
              (v, i) => shared.hasChanged(v, oldValue[i])
            ) : shared.hasChanged(newValue, oldValue)) || false) {
              if (cleanup) {
                cleanup();
              }
              callWithAsyncErrorHandling(cb, instance, 3, [
                newValue,
                // pass undefined as the old value when it's changed for the first time
                oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
                onCleanup
              ]);
              oldValue = newValue;
            }
          } else {
            effect.run();
          }
        };
        job.allowRecurse = !!cb;
        let scheduler;
        if (flush === "sync") {
          scheduler = job;
        } else if (flush === "post") {
          scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
        } else {
          job.pre = true;
          if (instance)
            job.id = instance.uid;
          scheduler = () => queueJob(job);
        }
        const effect = new reactivity.ReactiveEffect(getter, scheduler);
        {
          effect.onTrack = onTrack;
          effect.onTrigger = onTrigger;
        }
        if (cb) {
          if (immediate) {
            job();
          } else {
            oldValue = effect.run();
          }
        } else if (flush === "post") {
          queuePostRenderEffect(
            effect.run.bind(effect),
            instance && instance.suspense
          );
        } else {
          effect.run();
        }
        const unwatch = () => {
          effect.stop();
          if (instance && instance.scope) {
            shared.remove(instance.scope.effects, effect);
          }
        };
        if (ssrCleanup)
          ssrCleanup.push(unwatch);
        return unwatch;
      }
      function instanceWatch(source, value, options) {
        const publicThis = this.proxy;
        const getter = shared.isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
        let cb;
        if (shared.isFunction(value)) {
          cb = value;
        } else {
          cb = value.handler;
          options = value;
        }
        const cur = currentInstance;
        setCurrentInstance(this);
        const res = doWatch(getter, cb.bind(publicThis), options);
        if (cur) {
          setCurrentInstance(cur);
        } else {
          unsetCurrentInstance();
        }
        return res;
      }
      function createPathGetter(ctx, path) {
        const segments = path.split(".");
        return () => {
          let cur = ctx;
          for (let i = 0; i < segments.length && cur; i++) {
            cur = cur[segments[i]];
          }
          return cur;
        };
      }
      function traverse(value, seen) {
        if (!shared.isObject(value) || value["__v_skip"]) {
          return value;
        }
        seen = seen || /* @__PURE__ */ new Set();
        if (seen.has(value)) {
          return value;
        }
        seen.add(value);
        if (reactivity.isRef(value)) {
          traverse(value.value, seen);
        } else if (shared.isArray(value)) {
          for (let i = 0; i < value.length; i++) {
            traverse(value[i], seen);
          }
        } else if (shared.isSet(value) || shared.isMap(value)) {
          value.forEach((v) => {
            traverse(v, seen);
          });
        } else if (shared.isPlainObject(value)) {
          for (const key in value) {
            traverse(value[key], seen);
          }
        }
        return value;
      }
      function validateDirectiveName(name) {
        if (shared.isBuiltInDirective(name)) {
          warn("Do not use built-in directive ids as custom directive id: " + name);
        }
      }
      function withDirectives(vnode, directives) {
        const internalInstance = currentRenderingInstance;
        if (internalInstance === null) {
          warn(`withDirectives can only be used inside render functions.`);
          return vnode;
        }
        const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
        const bindings = vnode.dirs || (vnode.dirs = []);
        for (let i = 0; i < directives.length; i++) {
          let [dir, value, arg, modifiers = shared.EMPTY_OBJ] = directives[i];
          if (dir) {
            if (shared.isFunction(dir)) {
              dir = {
                mounted: dir,
                updated: dir
              };
            }
            if (dir.deep) {
              traverse(value);
            }
            bindings.push({
              dir,
              instance,
              value,
              oldValue: void 0,
              arg,
              modifiers
            });
          }
        }
        return vnode;
      }
      function invokeDirectiveHook(vnode, prevVNode, instance, name) {
        const bindings = vnode.dirs;
        const oldBindings = prevVNode && prevVNode.dirs;
        for (let i = 0; i < bindings.length; i++) {
          const binding = bindings[i];
          if (oldBindings) {
            binding.oldValue = oldBindings[i].value;
          }
          let hook = binding.dir[name];
          if (hook) {
            reactivity.pauseTracking();
            callWithAsyncErrorHandling(hook, instance, 8, [
              vnode.el,
              binding,
              vnode,
              prevVNode
            ]);
            reactivity.resetTracking();
          }
        }
      }
      function useTransitionState() {
        const state = {
          isMounted: false,
          isLeaving: false,
          isUnmounting: false,
          leavingVNodes: /* @__PURE__ */ new Map()
        };
        onMounted(() => {
          state.isMounted = true;
        });
        onBeforeUnmount(() => {
          state.isUnmounting = true;
        });
        return state;
      }
      var TransitionHookValidator = [Function, Array];
      var BaseTransitionPropsValidators = {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
      };
      var BaseTransitionImpl = {
        name: `BaseTransition`,
        props: BaseTransitionPropsValidators,
        setup(props, { slots }) {
          const instance = getCurrentInstance();
          const state = useTransitionState();
          let prevTransitionKey;
          return () => {
            const children = slots.default && getTransitionRawChildren(slots.default(), true);
            if (!children || !children.length) {
              return;
            }
            let child = children[0];
            if (children.length > 1) {
              let hasFound = false;
              for (const c of children) {
                if (c.type !== Comment) {
                  if (hasFound) {
                    warn(
                      "<transition> can only be used on a single element or component. Use <transition-group> for lists."
                    );
                    break;
                  }
                  child = c;
                  hasFound = true;
                }
              }
            }
            const rawProps = reactivity.toRaw(props);
            const { mode } = rawProps;
            if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
              warn(`invalid <transition> mode: ${mode}`);
            }
            if (state.isLeaving) {
              return emptyPlaceholder(child);
            }
            const innerChild = getKeepAliveChild(child);
            if (!innerChild) {
              return emptyPlaceholder(child);
            }
            const enterHooks = resolveTransitionHooks(
              innerChild,
              rawProps,
              state,
              instance
            );
            setTransitionHooks(innerChild, enterHooks);
            const oldChild = instance.subTree;
            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
            let transitionKeyChanged = false;
            const { getTransitionKey } = innerChild.type;
            if (getTransitionKey) {
              const key = getTransitionKey();
              if (prevTransitionKey === void 0) {
                prevTransitionKey = key;
              } else if (key !== prevTransitionKey) {
                prevTransitionKey = key;
                transitionKeyChanged = true;
              }
            }
            if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
              const leavingHooks = resolveTransitionHooks(
                oldInnerChild,
                rawProps,
                state,
                instance
              );
              setTransitionHooks(oldInnerChild, leavingHooks);
              if (mode === "out-in") {
                state.isLeaving = true;
                leavingHooks.afterLeave = () => {
                  state.isLeaving = false;
                  if (instance.update.active !== false) {
                    instance.update();
                  }
                };
                return emptyPlaceholder(child);
              } else if (mode === "in-out" && innerChild.type !== Comment) {
                leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
                  const leavingVNodesCache = getLeavingNodesForType(
                    state,
                    oldInnerChild
                  );
                  leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                  el._leaveCb = () => {
                    earlyRemove();
                    el._leaveCb = void 0;
                    delete enterHooks.delayedLeave;
                  };
                  enterHooks.delayedLeave = delayedLeave;
                };
              }
            }
            return child;
          };
        }
      };
      var BaseTransition = BaseTransitionImpl;
      function getLeavingNodesForType(state, vnode) {
        const { leavingVNodes } = state;
        let leavingVNodesCache = leavingVNodes.get(vnode.type);
        if (!leavingVNodesCache) {
          leavingVNodesCache = /* @__PURE__ */ Object.create(null);
          leavingVNodes.set(vnode.type, leavingVNodesCache);
        }
        return leavingVNodesCache;
      }
      function resolveTransitionHooks(vnode, props, state, instance) {
        const {
          appear,
          mode,
          persisted = false,
          onBeforeEnter,
          onEnter,
          onAfterEnter,
          onEnterCancelled,
          onBeforeLeave,
          onLeave,
          onAfterLeave,
          onLeaveCancelled,
          onBeforeAppear,
          onAppear,
          onAfterAppear,
          onAppearCancelled
        } = props;
        const key = String(vnode.key);
        const leavingVNodesCache = getLeavingNodesForType(state, vnode);
        const callHook2 = (hook, args) => {
          hook && callWithAsyncErrorHandling(
            hook,
            instance,
            9,
            args
          );
        };
        const callAsyncHook = (hook, args) => {
          const done = args[1];
          callHook2(hook, args);
          if (shared.isArray(hook)) {
            if (hook.every((hook2) => hook2.length <= 1))
              done();
          } else if (hook.length <= 1) {
            done();
          }
        };
        const hooks = {
          mode,
          persisted,
          beforeEnter(el) {
            let hook = onBeforeEnter;
            if (!state.isMounted) {
              if (appear) {
                hook = onBeforeAppear || onBeforeEnter;
              } else {
                return;
              }
            }
            if (el._leaveCb) {
              el._leaveCb(
                true
                /* cancelled */
              );
            }
            const leavingVNode = leavingVNodesCache[key];
            if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
              leavingVNode.el._leaveCb();
            }
            callHook2(hook, [el]);
          },
          enter(el) {
            let hook = onEnter;
            let afterHook = onAfterEnter;
            let cancelHook = onEnterCancelled;
            if (!state.isMounted) {
              if (appear) {
                hook = onAppear || onEnter;
                afterHook = onAfterAppear || onAfterEnter;
                cancelHook = onAppearCancelled || onEnterCancelled;
              } else {
                return;
              }
            }
            let called = false;
            const done = el._enterCb = (cancelled) => {
              if (called)
                return;
              called = true;
              if (cancelled) {
                callHook2(cancelHook, [el]);
              } else {
                callHook2(afterHook, [el]);
              }
              if (hooks.delayedLeave) {
                hooks.delayedLeave();
              }
              el._enterCb = void 0;
            };
            if (hook) {
              callAsyncHook(hook, [el, done]);
            } else {
              done();
            }
          },
          leave(el, remove) {
            const key2 = String(vnode.key);
            if (el._enterCb) {
              el._enterCb(
                true
                /* cancelled */
              );
            }
            if (state.isUnmounting) {
              return remove();
            }
            callHook2(onBeforeLeave, [el]);
            let called = false;
            const done = el._leaveCb = (cancelled) => {
              if (called)
                return;
              called = true;
              remove();
              if (cancelled) {
                callHook2(onLeaveCancelled, [el]);
              } else {
                callHook2(onAfterLeave, [el]);
              }
              el._leaveCb = void 0;
              if (leavingVNodesCache[key2] === vnode) {
                delete leavingVNodesCache[key2];
              }
            };
            leavingVNodesCache[key2] = vnode;
            if (onLeave) {
              callAsyncHook(onLeave, [el, done]);
            } else {
              done();
            }
          },
          clone(vnode2) {
            return resolveTransitionHooks(vnode2, props, state, instance);
          }
        };
        return hooks;
      }
      function emptyPlaceholder(vnode) {
        if (isKeepAlive(vnode)) {
          vnode = cloneVNode(vnode);
          vnode.children = null;
          return vnode;
        }
      }
      function getKeepAliveChild(vnode) {
        return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
      }
      function setTransitionHooks(vnode, hooks) {
        if (vnode.shapeFlag & 6 && vnode.component) {
          setTransitionHooks(vnode.component.subTree, hooks);
        } else if (vnode.shapeFlag & 128) {
          vnode.ssContent.transition = hooks.clone(vnode.ssContent);
          vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
        } else {
          vnode.transition = hooks;
        }
      }
      function getTransitionRawChildren(children, keepComment = false, parentKey) {
        let ret = [];
        let keyedFragmentCount = 0;
        for (let i = 0; i < children.length; i++) {
          let child = children[i];
          const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
          if (child.type === Fragment) {
            if (child.patchFlag & 128)
              keyedFragmentCount++;
            ret = ret.concat(
              getTransitionRawChildren(child.children, keepComment, key)
            );
          } else if (keepComment || child.type !== Comment) {
            ret.push(key != null ? cloneVNode(child, { key }) : child);
          }
        }
        if (keyedFragmentCount > 1) {
          for (let i = 0; i < ret.length; i++) {
            ret[i].patchFlag = -2;
          }
        }
        return ret;
      }
      function defineComponent(options, extraOptions) {
        return shared.isFunction(options) ? (
          // #8326: extend call and options.name access are considered side-effects
          // by Rollup, so we have to wrap it in a pure-annotated IIFE.
          /* @__PURE__ */ (() => shared.extend({ name: options.name }, extraOptions, { setup: options }))()
        ) : options;
      }
      var isAsyncWrapper = (i) => !!i.type.__asyncLoader;
      function defineAsyncComponent(source) {
        if (shared.isFunction(source)) {
          source = { loader: source };
        }
        const {
          loader,
          loadingComponent,
          errorComponent,
          delay = 200,
          timeout,
          // undefined = never times out
          suspensible = true,
          onError: userOnError
        } = source;
        let pendingRequest = null;
        let resolvedComp;
        let retries = 0;
        const retry = () => {
          retries++;
          pendingRequest = null;
          return load();
        };
        const load = () => {
          let thisRequest;
          return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
            err = err instanceof Error ? err : new Error(String(err));
            if (userOnError) {
              return new Promise((resolve2, reject) => {
                const userRetry = () => resolve2(retry());
                const userFail = () => reject(err);
                userOnError(err, userRetry, userFail, retries + 1);
              });
            } else {
              throw err;
            }
          }).then((comp) => {
            if (thisRequest !== pendingRequest && pendingRequest) {
              return pendingRequest;
            }
            if (!comp) {
              warn(
                `Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`
              );
            }
            if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
              comp = comp.default;
            }
            if (comp && !shared.isObject(comp) && !shared.isFunction(comp)) {
              throw new Error(`Invalid async component load result: ${comp}`);
            }
            resolvedComp = comp;
            return comp;
          }));
        };
        return defineComponent({
          name: "AsyncComponentWrapper",
          __asyncLoader: load,
          get __asyncResolved() {
            return resolvedComp;
          },
          setup() {
            const instance = currentInstance;
            if (resolvedComp) {
              return () => createInnerComp(resolvedComp, instance);
            }
            const onError = (err) => {
              pendingRequest = null;
              handleError(
                err,
                instance,
                13,
                !errorComponent
                /* do not throw in dev if user provided error component */
              );
            };
            if (suspensible && instance.suspense || isInSSRComponentSetup) {
              return load().then((comp) => {
                return () => createInnerComp(comp, instance);
              }).catch((err) => {
                onError(err);
                return () => errorComponent ? createVNode(errorComponent, {
                  error: err
                }) : null;
              });
            }
            const loaded = reactivity.ref(false);
            const error = reactivity.ref();
            const delayed = reactivity.ref(!!delay);
            if (delay) {
              setTimeout(() => {
                delayed.value = false;
              }, delay);
            }
            if (timeout != null) {
              setTimeout(() => {
                if (!loaded.value && !error.value) {
                  const err = new Error(
                    `Async component timed out after ${timeout}ms.`
                  );
                  onError(err);
                  error.value = err;
                }
              }, timeout);
            }
            load().then(() => {
              loaded.value = true;
              if (instance.parent && isKeepAlive(instance.parent.vnode)) {
                queueJob(instance.parent.update);
              }
            }).catch((err) => {
              onError(err);
              error.value = err;
            });
            return () => {
              if (loaded.value && resolvedComp) {
                return createInnerComp(resolvedComp, instance);
              } else if (error.value && errorComponent) {
                return createVNode(errorComponent, {
                  error: error.value
                });
              } else if (loadingComponent && !delayed.value) {
                return createVNode(loadingComponent);
              }
            };
          }
        });
      }
      function createInnerComp(comp, parent) {
        const { ref: ref2, props, children, ce } = parent.vnode;
        const vnode = createVNode(comp, props, children);
        vnode.ref = ref2;
        vnode.ce = ce;
        delete parent.vnode.ce;
        return vnode;
      }
      var isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
      var KeepAliveImpl = {
        name: `KeepAlive`,
        // Marker for special handling inside the renderer. We are not using a ===
        // check directly on KeepAlive in the renderer, because importing it directly
        // would prevent it from being tree-shaken.
        __isKeepAlive: true,
        props: {
          include: [String, RegExp, Array],
          exclude: [String, RegExp, Array],
          max: [String, Number]
        },
        setup(props, { slots }) {
          const instance = getCurrentInstance();
          const sharedContext = instance.ctx;
          if (!sharedContext.renderer) {
            return () => {
              const children = slots.default && slots.default();
              return children && children.length === 1 ? children[0] : children;
            };
          }
          const cache = /* @__PURE__ */ new Map();
          const keys = /* @__PURE__ */ new Set();
          let current = null;
          {
            instance.__v_cache = cache;
          }
          const parentSuspense = instance.suspense;
          const {
            renderer: {
              p: patch,
              m: move,
              um: _unmount,
              o: { createElement }
            }
          } = sharedContext;
          const storageContainer = createElement("div");
          sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
            const instance2 = vnode.component;
            move(vnode, container, anchor, 0, parentSuspense);
            patch(
              instance2.vnode,
              vnode,
              container,
              anchor,
              instance2,
              parentSuspense,
              isSVG,
              vnode.slotScopeIds,
              optimized
            );
            queuePostRenderEffect(() => {
              instance2.isDeactivated = false;
              if (instance2.a) {
                shared.invokeArrayFns(instance2.a);
              }
              const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
              if (vnodeHook) {
                invokeVNodeHook(vnodeHook, instance2.parent, vnode);
              }
            }, parentSuspense);
            {
              devtoolsComponentAdded(instance2);
            }
          };
          sharedContext.deactivate = (vnode) => {
            const instance2 = vnode.component;
            move(vnode, storageContainer, null, 1, parentSuspense);
            queuePostRenderEffect(() => {
              if (instance2.da) {
                shared.invokeArrayFns(instance2.da);
              }
              const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
              if (vnodeHook) {
                invokeVNodeHook(vnodeHook, instance2.parent, vnode);
              }
              instance2.isDeactivated = true;
            }, parentSuspense);
            {
              devtoolsComponentAdded(instance2);
            }
          };
          function unmount(vnode) {
            resetShapeFlag(vnode);
            _unmount(vnode, instance, parentSuspense, true);
          }
          function pruneCache(filter) {
            cache.forEach((vnode, key) => {
              const name = getComponentName(vnode.type);
              if (name && (!filter || !filter(name))) {
                pruneCacheEntry(key);
              }
            });
          }
          function pruneCacheEntry(key) {
            const cached = cache.get(key);
            if (!current || !isSameVNodeType(cached, current)) {
              unmount(cached);
            } else if (current) {
              resetShapeFlag(current);
            }
            cache.delete(key);
            keys.delete(key);
          }
          watch(
            () => [props.include, props.exclude],
            ([include, exclude]) => {
              include && pruneCache((name) => matches(include, name));
              exclude && pruneCache((name) => !matches(exclude, name));
            },
            // prune post-render after `current` has been updated
            { flush: "post", deep: true }
          );
          let pendingCacheKey = null;
          const cacheSubtree = () => {
            if (pendingCacheKey != null) {
              cache.set(pendingCacheKey, getInnerChild(instance.subTree));
            }
          };
          onMounted(cacheSubtree);
          onUpdated(cacheSubtree);
          onBeforeUnmount(() => {
            cache.forEach((cached) => {
              const { subTree, suspense } = instance;
              const vnode = getInnerChild(subTree);
              if (cached.type === vnode.type && cached.key === vnode.key) {
                resetShapeFlag(vnode);
                const da = vnode.component.da;
                da && queuePostRenderEffect(da, suspense);
                return;
              }
              unmount(cached);
            });
          });
          return () => {
            pendingCacheKey = null;
            if (!slots.default) {
              return null;
            }
            const children = slots.default();
            const rawVNode = children[0];
            if (children.length > 1) {
              {
                warn(`KeepAlive should contain exactly one component child.`);
              }
              current = null;
              return children;
            } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
              current = null;
              return rawVNode;
            }
            let vnode = getInnerChild(rawVNode);
            const comp = vnode.type;
            const name = getComponentName(
              isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp
            );
            const { include, exclude, max } = props;
            if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
              current = vnode;
              return rawVNode;
            }
            const key = vnode.key == null ? comp : vnode.key;
            const cachedVNode = cache.get(key);
            if (vnode.el) {
              vnode = cloneVNode(vnode);
              if (rawVNode.shapeFlag & 128) {
                rawVNode.ssContent = vnode;
              }
            }
            pendingCacheKey = key;
            if (cachedVNode) {
              vnode.el = cachedVNode.el;
              vnode.component = cachedVNode.component;
              if (vnode.transition) {
                setTransitionHooks(vnode, vnode.transition);
              }
              vnode.shapeFlag |= 512;
              keys.delete(key);
              keys.add(key);
            } else {
              keys.add(key);
              if (max && keys.size > parseInt(max, 10)) {
                pruneCacheEntry(keys.values().next().value);
              }
            }
            vnode.shapeFlag |= 256;
            current = vnode;
            return isSuspense(rawVNode.type) ? rawVNode : vnode;
          };
        }
      };
      var KeepAlive = KeepAliveImpl;
      function matches(pattern, name) {
        if (shared.isArray(pattern)) {
          return pattern.some((p) => matches(p, name));
        } else if (shared.isString(pattern)) {
          return pattern.split(",").includes(name);
        } else if (shared.isRegExp(pattern)) {
          return pattern.test(name);
        }
        return false;
      }
      function onActivated(hook, target) {
        registerKeepAliveHook(hook, "a", target);
      }
      function onDeactivated(hook, target) {
        registerKeepAliveHook(hook, "da", target);
      }
      function registerKeepAliveHook(hook, type, target = currentInstance) {
        const wrappedHook = hook.__wdc || (hook.__wdc = () => {
          let current = target;
          while (current) {
            if (current.isDeactivated) {
              return;
            }
            current = current.parent;
          }
          return hook();
        });
        injectHook(type, wrappedHook, target);
        if (target) {
          let current = target.parent;
          while (current && current.parent) {
            if (isKeepAlive(current.parent.vnode)) {
              injectToKeepAliveRoot(wrappedHook, type, target, current);
            }
            current = current.parent;
          }
        }
      }
      function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
        const injected = injectHook(
          type,
          hook,
          keepAliveRoot,
          true
          /* prepend */
        );
        onUnmounted(() => {
          shared.remove(keepAliveRoot[type], injected);
        }, target);
      }
      function resetShapeFlag(vnode) {
        vnode.shapeFlag &= ~256;
        vnode.shapeFlag &= ~512;
      }
      function getInnerChild(vnode) {
        return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
      }
      function injectHook(type, hook, target = currentInstance, prepend = false) {
        if (target) {
          const hooks = target[type] || (target[type] = []);
          const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
            if (target.isUnmounted) {
              return;
            }
            reactivity.pauseTracking();
            setCurrentInstance(target);
            const res = callWithAsyncErrorHandling(hook, target, type, args);
            unsetCurrentInstance();
            reactivity.resetTracking();
            return res;
          });
          if (prepend) {
            hooks.unshift(wrappedHook);
          } else {
            hooks.push(wrappedHook);
          }
          return wrappedHook;
        } else {
          const apiName = shared.toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ""));
          warn(
            `${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`
          );
        }
      }
      var createHook = (lifecycle) => (hook, target = currentInstance) => (
        // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
        (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, (...args) => hook(...args), target)
      );
      var onBeforeMount = createHook("bm");
      var onMounted = createHook("m");
      var onBeforeUpdate = createHook("bu");
      var onUpdated = createHook("u");
      var onBeforeUnmount = createHook("bum");
      var onUnmounted = createHook("um");
      var onServerPrefetch = createHook("sp");
      var onRenderTriggered = createHook(
        "rtg"
      );
      var onRenderTracked = createHook(
        "rtc"
      );
      function onErrorCaptured(hook, target = currentInstance) {
        injectHook("ec", hook, target);
      }
      var COMPONENTS = "components";
      var DIRECTIVES = "directives";
      function resolveComponent(name, maybeSelfReference) {
        return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
      }
      var NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
      function resolveDynamicComponent(component) {
        if (shared.isString(component)) {
          return resolveAsset(COMPONENTS, component, false) || component;
        } else {
          return component || NULL_DYNAMIC_COMPONENT;
        }
      }
      function resolveDirective(name) {
        return resolveAsset(DIRECTIVES, name);
      }
      function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
        const instance = currentRenderingInstance || currentInstance;
        if (instance) {
          const Component = instance.type;
          if (type === COMPONENTS) {
            const selfName = getComponentName(
              Component,
              false
              /* do not include inferred name to avoid breaking existing code */
            );
            if (selfName && (selfName === name || selfName === shared.camelize(name) || selfName === shared.capitalize(shared.camelize(name)))) {
              return Component;
            }
          }
          const res = (
            // local registration
            // check instance[type] first which is resolved for options API
            resolve(instance[type] || Component[type], name) || // global registration
            resolve(instance.appContext[type], name)
          );
          if (!res && maybeSelfReference) {
            return Component;
          }
          if (warnMissing && !res) {
            const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
          }
          return res;
        } else {
          warn(
            `resolve${shared.capitalize(type.slice(0, -1))} can only be used in render() or setup().`
          );
        }
      }
      function resolve(registry, name) {
        return registry && (registry[name] || registry[shared.camelize(name)] || registry[shared.capitalize(shared.camelize(name))]);
      }
      function renderList(source, renderItem, cache, index) {
        let ret;
        const cached = cache && cache[index];
        if (shared.isArray(source) || shared.isString(source)) {
          ret = new Array(source.length);
          for (let i = 0, l = source.length; i < l; i++) {
            ret[i] = renderItem(source[i], i, void 0, cached && cached[i]);
          }
        } else if (typeof source === "number") {
          if (!Number.isInteger(source)) {
            warn(`The v-for range expect an integer value but got ${source}.`);
          }
          ret = new Array(source);
          for (let i = 0; i < source; i++) {
            ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
          }
        } else if (shared.isObject(source)) {
          if (source[Symbol.iterator]) {
            ret = Array.from(
              source,
              (item, i) => renderItem(item, i, void 0, cached && cached[i])
            );
          } else {
            const keys = Object.keys(source);
            ret = new Array(keys.length);
            for (let i = 0, l = keys.length; i < l; i++) {
              const key = keys[i];
              ret[i] = renderItem(source[key], key, i, cached && cached[i]);
            }
          }
        } else {
          ret = [];
        }
        if (cache) {
          cache[index] = ret;
        }
        return ret;
      }
      function createSlots(slots, dynamicSlots) {
        for (let i = 0; i < dynamicSlots.length; i++) {
          const slot = dynamicSlots[i];
          if (shared.isArray(slot)) {
            for (let j = 0; j < slot.length; j++) {
              slots[slot[j].name] = slot[j].fn;
            }
          } else if (slot) {
            slots[slot.name] = slot.key ? (...args) => {
              const res = slot.fn(...args);
              if (res)
                res.key = slot.key;
              return res;
            } : slot.fn;
          }
        }
        return slots;
      }
      function renderSlot(slots, name, props = {}, fallback, noSlotted) {
        if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
          if (name !== "default")
            props.name = name;
          return createVNode("slot", props, fallback && fallback());
        }
        let slot = slots[name];
        if (slot && slot.length > 1) {
          warn(
            `SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`
          );
          slot = () => [];
        }
        if (slot && slot._c) {
          slot._d = false;
        }
        openBlock();
        const validSlotContent = slot && ensureValidVNode(slot(props));
        const rendered = createBlock(
          Fragment,
          {
            key: props.key || // slot content array of a dynamic conditional slot may have a branch
            // key attached in the `createSlots` helper, respect that
            validSlotContent && validSlotContent.key || `_${name}`
          },
          validSlotContent || (fallback ? fallback() : []),
          validSlotContent && slots._ === 1 ? 64 : -2
        );
        if (!noSlotted && rendered.scopeId) {
          rendered.slotScopeIds = [rendered.scopeId + "-s"];
        }
        if (slot && slot._c) {
          slot._d = true;
        }
        return rendered;
      }
      function ensureValidVNode(vnodes) {
        return vnodes.some((child) => {
          if (!isVNode(child))
            return true;
          if (child.type === Comment)
            return false;
          if (child.type === Fragment && !ensureValidVNode(child.children))
            return false;
          return true;
        }) ? vnodes : null;
      }
      function toHandlers(obj, preserveCaseIfNecessary) {
        const ret = {};
        if (!shared.isObject(obj)) {
          warn(`v-on with no argument expects an object value.`);
          return ret;
        }
        for (const key in obj) {
          ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : shared.toHandlerKey(key)] = obj[key];
        }
        return ret;
      }
      var getPublicInstance = (i) => {
        if (!i)
          return null;
        if (isStatefulComponent(i))
          return getExposeProxy(i) || i.proxy;
        return getPublicInstance(i.parent);
      };
      var publicPropertiesMap = (
        // Move PURE marker to new line to workaround compiler discarding it
        // due to type annotation
        /* @__PURE__ */ shared.extend(/* @__PURE__ */ Object.create(null), {
          $: (i) => i,
          $el: (i) => i.vnode.el,
          $data: (i) => i.data,
          $props: (i) => reactivity.shallowReadonly(i.props),
          $attrs: (i) => reactivity.shallowReadonly(i.attrs),
          $slots: (i) => reactivity.shallowReadonly(i.slots),
          $refs: (i) => reactivity.shallowReadonly(i.refs),
          $parent: (i) => getPublicInstance(i.parent),
          $root: (i) => getPublicInstance(i.root),
          $emit: (i) => i.emit,
          $options: (i) => resolveMergedOptions(i),
          $forceUpdate: (i) => i.f || (i.f = () => queueJob(i.update)),
          $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
          $watch: (i) => instanceWatch.bind(i)
        })
      );
      var isReservedPrefix = (key) => key === "_" || key === "$";
      var hasSetupBinding = (state, key) => state !== shared.EMPTY_OBJ && !state.__isScriptSetup && shared.hasOwn(state, key);
      var PublicInstanceProxyHandlers = {
        get({ _: instance }, key) {
          const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
          if (key === "__isVue") {
            return true;
          }
          let normalizedProps;
          if (key[0] !== "$") {
            const n = accessCache[key];
            if (n !== void 0) {
              switch (n) {
                case 1:
                  return setupState[key];
                case 2:
                  return data[key];
                case 4:
                  return ctx[key];
                case 3:
                  return props[key];
              }
            } else if (hasSetupBinding(setupState, key)) {
              accessCache[key] = 1;
              return setupState[key];
            } else if (data !== shared.EMPTY_OBJ && shared.hasOwn(data, key)) {
              accessCache[key] = 2;
              return data[key];
            } else if (
              // only cache other properties when instance has declared (thus stable)
              // props
              (normalizedProps = instance.propsOptions[0]) && shared.hasOwn(normalizedProps, key)
            ) {
              accessCache[key] = 3;
              return props[key];
            } else if (ctx !== shared.EMPTY_OBJ && shared.hasOwn(ctx, key)) {
              accessCache[key] = 4;
              return ctx[key];
            } else if (shouldCacheAccess) {
              accessCache[key] = 0;
            }
          }
          const publicGetter = publicPropertiesMap[key];
          let cssModule, globalProperties;
          if (publicGetter) {
            if (key === "$attrs") {
              reactivity.track(instance, "get", key);
              markAttrsAccessed();
            } else if (key === "$slots") {
              reactivity.track(instance, "get", key);
            }
            return publicGetter(instance);
          } else if (
            // css module (injected by vue-loader)
            (cssModule = type.__cssModules) && (cssModule = cssModule[key])
          ) {
            return cssModule;
          } else if (ctx !== shared.EMPTY_OBJ && shared.hasOwn(ctx, key)) {
            accessCache[key] = 4;
            return ctx[key];
          } else if (
            // global properties
            globalProperties = appContext.config.globalProperties, shared.hasOwn(globalProperties, key)
          ) {
            {
              return globalProperties[key];
            }
          } else if (currentRenderingInstance && (!shared.isString(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
          // to infinite warning loop
          key.indexOf("__v") !== 0)) {
            if (data !== shared.EMPTY_OBJ && isReservedPrefix(key[0]) && shared.hasOwn(data, key)) {
              warn(
                `Property ${JSON.stringify(
                  key
                )} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`
              );
            } else if (instance === currentRenderingInstance) {
              warn(
                `Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`
              );
            }
          }
        },
        set({ _: instance }, key, value) {
          const { data, setupState, ctx } = instance;
          if (hasSetupBinding(setupState, key)) {
            setupState[key] = value;
            return true;
          } else if (setupState.__isScriptSetup && shared.hasOwn(setupState, key)) {
            warn(`Cannot mutate <script setup> binding "${key}" from Options API.`);
            return false;
          } else if (data !== shared.EMPTY_OBJ && shared.hasOwn(data, key)) {
            data[key] = value;
            return true;
          } else if (shared.hasOwn(instance.props, key)) {
            warn(`Attempting to mutate prop "${key}". Props are readonly.`);
            return false;
          }
          if (key[0] === "$" && key.slice(1) in instance) {
            warn(
              `Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`
            );
            return false;
          } else {
            if (key in instance.appContext.config.globalProperties) {
              Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                value
              });
            } else {
              ctx[key] = value;
            }
          }
          return true;
        },
        has({
          _: { data, setupState, accessCache, ctx, appContext, propsOptions }
        }, key) {
          let normalizedProps;
          return !!accessCache[key] || data !== shared.EMPTY_OBJ && shared.hasOwn(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && shared.hasOwn(normalizedProps, key) || shared.hasOwn(ctx, key) || shared.hasOwn(publicPropertiesMap, key) || shared.hasOwn(appContext.config.globalProperties, key);
        },
        defineProperty(target, key, descriptor) {
          if (descriptor.get != null) {
            target._.accessCache[key] = 0;
          } else if (shared.hasOwn(descriptor, "value")) {
            this.set(target, key, descriptor.value, null);
          }
          return Reflect.defineProperty(target, key, descriptor);
        }
      };
      {
        PublicInstanceProxyHandlers.ownKeys = (target) => {
          warn(
            `Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`
          );
          return Reflect.ownKeys(target);
        };
      }
      var RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ shared.extend(
        {},
        PublicInstanceProxyHandlers,
        {
          get(target, key) {
            if (key === Symbol.unscopables) {
              return;
            }
            return PublicInstanceProxyHandlers.get(target, key, target);
          },
          has(_, key) {
            const has = key[0] !== "_" && !shared.isGloballyWhitelisted(key);
            if (!has && PublicInstanceProxyHandlers.has(_, key)) {
              warn(
                `Property ${JSON.stringify(
                  key
                )} should not start with _ which is a reserved prefix for Vue internals.`
              );
            }
            return has;
          }
        }
      );
      function createDevRenderContext(instance) {
        const target = {};
        Object.defineProperty(target, `_`, {
          configurable: true,
          enumerable: false,
          get: () => instance
        });
        Object.keys(publicPropertiesMap).forEach((key) => {
          Object.defineProperty(target, key, {
            configurable: true,
            enumerable: false,
            get: () => publicPropertiesMap[key](instance),
            // intercepted by the proxy so no need for implementation,
            // but needed to prevent set errors
            set: shared.NOOP
          });
        });
        return target;
      }
      function exposePropsOnRenderContext(instance) {
        const {
          ctx,
          propsOptions: [propsOptions]
        } = instance;
        if (propsOptions) {
          Object.keys(propsOptions).forEach((key) => {
            Object.defineProperty(ctx, key, {
              enumerable: true,
              configurable: true,
              get: () => instance.props[key],
              set: shared.NOOP
            });
          });
        }
      }
      function exposeSetupStateOnRenderContext(instance) {
        const { ctx, setupState } = instance;
        Object.keys(reactivity.toRaw(setupState)).forEach((key) => {
          if (!setupState.__isScriptSetup) {
            if (isReservedPrefix(key[0])) {
              warn(
                `setup() return property ${JSON.stringify(
                  key
                )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
              );
              return;
            }
            Object.defineProperty(ctx, key, {
              enumerable: true,
              configurable: true,
              get: () => setupState[key],
              set: shared.NOOP
            });
          }
        });
      }
      var warnRuntimeUsage = (method) => warn(
        `${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`
      );
      function defineProps() {
        {
          warnRuntimeUsage(`defineProps`);
        }
        return null;
      }
      function defineEmits() {
        {
          warnRuntimeUsage(`defineEmits`);
        }
        return null;
      }
      function defineExpose(exposed) {
        {
          warnRuntimeUsage(`defineExpose`);
        }
      }
      function defineOptions(options) {
        {
          warnRuntimeUsage(`defineOptions`);
        }
      }
      function defineSlots() {
        {
          warnRuntimeUsage(`defineSlots`);
        }
        return null;
      }
      function defineModel() {
        {
          warnRuntimeUsage("defineModel");
        }
      }
      function withDefaults(props, defaults) {
        {
          warnRuntimeUsage(`withDefaults`);
        }
        return null;
      }
      function useSlots() {
        return getContext().slots;
      }
      function useAttrs() {
        return getContext().attrs;
      }
      function useModel(props, name, options) {
        const i = getCurrentInstance();
        if (!i) {
          warn(`useModel() called without active instance.`);
          return reactivity.ref();
        }
        if (!i.propsOptions[0][name]) {
          warn(`useModel() called with prop "${name}" which is not declared.`);
          return reactivity.ref();
        }
        if (options && options.local) {
          const proxy = reactivity.ref(props[name]);
          watch(
            () => props[name],
            (v) => proxy.value = v
          );
          watch(proxy, (value) => {
            if (value !== props[name]) {
              i.emit(`update:${name}`, value);
            }
          });
          return proxy;
        } else {
          return {
            __v_isRef: true,
            get value() {
              return props[name];
            },
            set value(value) {
              i.emit(`update:${name}`, value);
            }
          };
        }
      }
      function getContext() {
        const i = getCurrentInstance();
        if (!i) {
          warn(`useContext() called without active instance.`);
        }
        return i.setupContext || (i.setupContext = createSetupContext(i));
      }
      function normalizePropsOrEmits(props) {
        return shared.isArray(props) ? props.reduce(
          (normalized, p) => (normalized[p] = null, normalized),
          {}
        ) : props;
      }
      function mergeDefaults(raw, defaults) {
        const props = normalizePropsOrEmits(raw);
        for (const key in defaults) {
          if (key.startsWith("__skip"))
            continue;
          let opt = props[key];
          if (opt) {
            if (shared.isArray(opt) || shared.isFunction(opt)) {
              opt = props[key] = { type: opt, default: defaults[key] };
            } else {
              opt.default = defaults[key];
            }
          } else if (opt === null) {
            opt = props[key] = { default: defaults[key] };
          } else {
            warn(`props default key "${key}" has no corresponding declaration.`);
          }
          if (opt && defaults[`__skip_${key}`]) {
            opt.skipFactory = true;
          }
        }
        return props;
      }
      function mergeModels(a, b) {
        if (!a || !b)
          return a || b;
        if (shared.isArray(a) && shared.isArray(b))
          return a.concat(b);
        return shared.extend({}, normalizePropsOrEmits(a), normalizePropsOrEmits(b));
      }
      function createPropsRestProxy(props, excludedKeys) {
        const ret = {};
        for (const key in props) {
          if (!excludedKeys.includes(key)) {
            Object.defineProperty(ret, key, {
              enumerable: true,
              get: () => props[key]
            });
          }
        }
        return ret;
      }
      function withAsyncContext(getAwaitable) {
        const ctx = getCurrentInstance();
        if (!ctx) {
          warn(
            `withAsyncContext called without active current instance. This is likely a bug.`
          );
        }
        let awaitable = getAwaitable();
        unsetCurrentInstance();
        if (shared.isPromise(awaitable)) {
          awaitable = awaitable.catch((e) => {
            setCurrentInstance(ctx);
            throw e;
          });
        }
        return [awaitable, () => setCurrentInstance(ctx)];
      }
      function createDuplicateChecker() {
        const cache = /* @__PURE__ */ Object.create(null);
        return (type, key) => {
          if (cache[key]) {
            warn(`${type} property "${key}" is already defined in ${cache[key]}.`);
          } else {
            cache[key] = type;
          }
        };
      }
      var shouldCacheAccess = true;
      function applyOptions(instance) {
        const options = resolveMergedOptions(instance);
        const publicThis = instance.proxy;
        const ctx = instance.ctx;
        shouldCacheAccess = false;
        if (options.beforeCreate) {
          callHook(options.beforeCreate, instance, "bc");
        }
        const {
          // state
          data: dataOptions,
          computed: computedOptions,
          methods,
          watch: watchOptions,
          provide: provideOptions,
          inject: injectOptions,
          // lifecycle
          created,
          beforeMount,
          mounted,
          beforeUpdate,
          updated,
          activated,
          deactivated,
          beforeDestroy,
          beforeUnmount,
          destroyed,
          unmounted,
          render,
          renderTracked,
          renderTriggered,
          errorCaptured,
          serverPrefetch,
          // public API
          expose,
          inheritAttrs,
          // assets
          components,
          directives,
          filters
        } = options;
        const checkDuplicateProperties = createDuplicateChecker();
        {
          const [propsOptions] = instance.propsOptions;
          if (propsOptions) {
            for (const key in propsOptions) {
              checkDuplicateProperties("Props", key);
            }
          }
        }
        if (injectOptions) {
          resolveInjections(injectOptions, ctx, checkDuplicateProperties);
        }
        if (methods) {
          for (const key in methods) {
            const methodHandler = methods[key];
            if (shared.isFunction(methodHandler)) {
              {
                Object.defineProperty(ctx, key, {
                  value: methodHandler.bind(publicThis),
                  configurable: true,
                  enumerable: true,
                  writable: true
                });
              }
              {
                checkDuplicateProperties("Methods", key);
              }
            } else {
              warn(
                `Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`
              );
            }
          }
        }
        if (dataOptions) {
          if (!shared.isFunction(dataOptions)) {
            warn(
              `The data option must be a function. Plain object usage is no longer supported.`
            );
          }
          const data = dataOptions.call(publicThis, publicThis);
          if (shared.isPromise(data)) {
            warn(
              `data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`
            );
          }
          if (!shared.isObject(data)) {
            warn(`data() should return an object.`);
          } else {
            instance.data = reactivity.reactive(data);
            {
              for (const key in data) {
                checkDuplicateProperties("Data", key);
                if (!isReservedPrefix(key[0])) {
                  Object.defineProperty(ctx, key, {
                    configurable: true,
                    enumerable: true,
                    get: () => data[key],
                    set: shared.NOOP
                  });
                }
              }
            }
          }
        }
        shouldCacheAccess = true;
        if (computedOptions) {
          for (const key in computedOptions) {
            const opt = computedOptions[key];
            const get = shared.isFunction(opt) ? opt.bind(publicThis, publicThis) : shared.isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : shared.NOOP;
            if (get === shared.NOOP) {
              warn(`Computed property "${key}" has no getter.`);
            }
            const set = !shared.isFunction(opt) && shared.isFunction(opt.set) ? opt.set.bind(publicThis) : () => {
              warn(
                `Write operation failed: computed property "${key}" is readonly.`
              );
            };
            const c = computed({
              get,
              set
            });
            Object.defineProperty(ctx, key, {
              enumerable: true,
              configurable: true,
              get: () => c.value,
              set: (v) => c.value = v
            });
            {
              checkDuplicateProperties("Computed", key);
            }
          }
        }
        if (watchOptions) {
          for (const key in watchOptions) {
            createWatcher(watchOptions[key], ctx, publicThis, key);
          }
        }
        if (provideOptions) {
          const provides = shared.isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
          Reflect.ownKeys(provides).forEach((key) => {
            provide(key, provides[key]);
          });
        }
        if (created) {
          callHook(created, instance, "c");
        }
        function registerLifecycleHook(register, hook) {
          if (shared.isArray(hook)) {
            hook.forEach((_hook) => register(_hook.bind(publicThis)));
          } else if (hook) {
            register(hook.bind(publicThis));
          }
        }
        registerLifecycleHook(onBeforeMount, beforeMount);
        registerLifecycleHook(onMounted, mounted);
        registerLifecycleHook(onBeforeUpdate, beforeUpdate);
        registerLifecycleHook(onUpdated, updated);
        registerLifecycleHook(onActivated, activated);
        registerLifecycleHook(onDeactivated, deactivated);
        registerLifecycleHook(onErrorCaptured, errorCaptured);
        registerLifecycleHook(onRenderTracked, renderTracked);
        registerLifecycleHook(onRenderTriggered, renderTriggered);
        registerLifecycleHook(onBeforeUnmount, beforeUnmount);
        registerLifecycleHook(onUnmounted, unmounted);
        registerLifecycleHook(onServerPrefetch, serverPrefetch);
        if (shared.isArray(expose)) {
          if (expose.length) {
            const exposed = instance.exposed || (instance.exposed = {});
            expose.forEach((key) => {
              Object.defineProperty(exposed, key, {
                get: () => publicThis[key],
                set: (val) => publicThis[key] = val
              });
            });
          } else if (!instance.exposed) {
            instance.exposed = {};
          }
        }
        if (render && instance.render === shared.NOOP) {
          instance.render = render;
        }
        if (inheritAttrs != null) {
          instance.inheritAttrs = inheritAttrs;
        }
        if (components)
          instance.components = components;
        if (directives)
          instance.directives = directives;
      }
      function resolveInjections(injectOptions, ctx, checkDuplicateProperties = shared.NOOP) {
        if (shared.isArray(injectOptions)) {
          injectOptions = normalizeInject(injectOptions);
        }
        for (const key in injectOptions) {
          const opt = injectOptions[key];
          let injected;
          if (shared.isObject(opt)) {
            if ("default" in opt) {
              injected = inject(
                opt.from || key,
                opt.default,
                true
                /* treat default function as factory */
              );
            } else {
              injected = inject(opt.from || key);
            }
          } else {
            injected = inject(opt);
          }
          if (reactivity.isRef(injected)) {
            Object.defineProperty(ctx, key, {
              enumerable: true,
              configurable: true,
              get: () => injected.value,
              set: (v) => injected.value = v
            });
          } else {
            ctx[key] = injected;
          }
          {
            checkDuplicateProperties("Inject", key);
          }
        }
      }
      function callHook(hook, instance, type) {
        callWithAsyncErrorHandling(
          shared.isArray(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy),
          instance,
          type
        );
      }
      function createWatcher(raw, ctx, publicThis, key) {
        const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
        if (shared.isString(raw)) {
          const handler = ctx[raw];
          if (shared.isFunction(handler)) {
            watch(getter, handler);
          } else {
            warn(`Invalid watch handler specified by key "${raw}"`, handler);
          }
        } else if (shared.isFunction(raw)) {
          watch(getter, raw.bind(publicThis));
        } else if (shared.isObject(raw)) {
          if (shared.isArray(raw)) {
            raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
          } else {
            const handler = shared.isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
            if (shared.isFunction(handler)) {
              watch(getter, handler, raw);
            } else {
              warn(`Invalid watch handler specified by key "${raw.handler}"`, handler);
            }
          }
        } else {
          warn(`Invalid watch option: "${key}"`, raw);
        }
      }
      function resolveMergedOptions(instance) {
        const base = instance.type;
        const { mixins, extends: extendsOptions } = base;
        const {
          mixins: globalMixins,
          optionsCache: cache,
          config: { optionMergeStrategies }
        } = instance.appContext;
        const cached = cache.get(base);
        let resolved;
        if (cached) {
          resolved = cached;
        } else if (!globalMixins.length && !mixins && !extendsOptions) {
          {
            resolved = base;
          }
        } else {
          resolved = {};
          if (globalMixins.length) {
            globalMixins.forEach(
              (m) => mergeOptions(resolved, m, optionMergeStrategies, true)
            );
          }
          mergeOptions(resolved, base, optionMergeStrategies);
        }
        if (shared.isObject(base)) {
          cache.set(base, resolved);
        }
        return resolved;
      }
      function mergeOptions(to, from, strats, asMixin = false) {
        const { mixins, extends: extendsOptions } = from;
        if (extendsOptions) {
          mergeOptions(to, extendsOptions, strats, true);
        }
        if (mixins) {
          mixins.forEach(
            (m) => mergeOptions(to, m, strats, true)
          );
        }
        for (const key in from) {
          if (asMixin && key === "expose") {
            warn(
              `"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`
            );
          } else {
            const strat = internalOptionMergeStrats[key] || strats && strats[key];
            to[key] = strat ? strat(to[key], from[key]) : from[key];
          }
        }
        return to;
      }
      var internalOptionMergeStrats = {
        data: mergeDataFn,
        props: mergeEmitsOrPropsOptions,
        emits: mergeEmitsOrPropsOptions,
        // objects
        methods: mergeObjectOptions,
        computed: mergeObjectOptions,
        // lifecycle
        beforeCreate: mergeAsArray,
        created: mergeAsArray,
        beforeMount: mergeAsArray,
        mounted: mergeAsArray,
        beforeUpdate: mergeAsArray,
        updated: mergeAsArray,
        beforeDestroy: mergeAsArray,
        beforeUnmount: mergeAsArray,
        destroyed: mergeAsArray,
        unmounted: mergeAsArray,
        activated: mergeAsArray,
        deactivated: mergeAsArray,
        errorCaptured: mergeAsArray,
        serverPrefetch: mergeAsArray,
        // assets
        components: mergeObjectOptions,
        directives: mergeObjectOptions,
        // watch
        watch: mergeWatchOptions,
        // provide / inject
        provide: mergeDataFn,
        inject: mergeInject
      };
      function mergeDataFn(to, from) {
        if (!from) {
          return to;
        }
        if (!to) {
          return from;
        }
        return function mergedDataFn() {
          return shared.extend(
            shared.isFunction(to) ? to.call(this, this) : to,
            shared.isFunction(from) ? from.call(this, this) : from
          );
        };
      }
      function mergeInject(to, from) {
        return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
      }
      function normalizeInject(raw) {
        if (shared.isArray(raw)) {
          const res = {};
          for (let i = 0; i < raw.length; i++) {
            res[raw[i]] = raw[i];
          }
          return res;
        }
        return raw;
      }
      function mergeAsArray(to, from) {
        return to ? [...new Set([].concat(to, from))] : from;
      }
      function mergeObjectOptions(to, from) {
        return to ? shared.extend(/* @__PURE__ */ Object.create(null), to, from) : from;
      }
      function mergeEmitsOrPropsOptions(to, from) {
        if (to) {
          if (shared.isArray(to) && shared.isArray(from)) {
            return [.../* @__PURE__ */ new Set([...to, ...from])];
          }
          return shared.extend(
            /* @__PURE__ */ Object.create(null),
            normalizePropsOrEmits(to),
            normalizePropsOrEmits(from != null ? from : {})
          );
        } else {
          return from;
        }
      }
      function mergeWatchOptions(to, from) {
        if (!to)
          return from;
        if (!from)
          return to;
        const merged = shared.extend(/* @__PURE__ */ Object.create(null), to);
        for (const key in from) {
          merged[key] = mergeAsArray(to[key], from[key]);
        }
        return merged;
      }
      function createAppContext() {
        return {
          app: null,
          config: {
            isNativeTag: shared.NO,
            performance: false,
            globalProperties: {},
            optionMergeStrategies: {},
            errorHandler: void 0,
            warnHandler: void 0,
            compilerOptions: {}
          },
          mixins: [],
          components: {},
          directives: {},
          provides: /* @__PURE__ */ Object.create(null),
          optionsCache: /* @__PURE__ */ new WeakMap(),
          propsCache: /* @__PURE__ */ new WeakMap(),
          emitsCache: /* @__PURE__ */ new WeakMap()
        };
      }
      var uid$1 = 0;
      function createAppAPI(render, hydrate) {
        return function createApp2(rootComponent, rootProps = null) {
          if (!shared.isFunction(rootComponent)) {
            rootComponent = shared.extend({}, rootComponent);
          }
          if (rootProps != null && !shared.isObject(rootProps)) {
            warn(`root props passed to app.mount() must be an object.`);
            rootProps = null;
          }
          const context = createAppContext();
          {
            Object.defineProperty(context.config, "unwrapInjectedRef", {
              get() {
                return true;
              },
              set() {
                warn(
                  `app.config.unwrapInjectedRef has been deprecated. 3.3 now alawys unwraps injected refs in Options API.`
                );
              }
            });
          }
          const installedPlugins = /* @__PURE__ */ new Set();
          let isMounted = false;
          const app2 = context.app = {
            _uid: uid$1++,
            _component: rootComponent,
            _props: rootProps,
            _container: null,
            _context: context,
            _instance: null,
            version,
            get config() {
              return context.config;
            },
            set config(v) {
              {
                warn(
                  `app.config cannot be replaced. Modify individual options instead.`
                );
              }
            },
            use(plugin, ...options) {
              if (installedPlugins.has(plugin)) {
                warn(`Plugin has already been applied to target app.`);
              } else if (plugin && shared.isFunction(plugin.install)) {
                installedPlugins.add(plugin);
                plugin.install(app2, ...options);
              } else if (shared.isFunction(plugin)) {
                installedPlugins.add(plugin);
                plugin(app2, ...options);
              } else {
                warn(
                  `A plugin must either be a function or an object with an "install" function.`
                );
              }
              return app2;
            },
            mixin(mixin) {
              {
                if (!context.mixins.includes(mixin)) {
                  context.mixins.push(mixin);
                } else {
                  warn(
                    "Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : "")
                  );
                }
              }
              return app2;
            },
            component(name, component) {
              {
                validateComponentName(name, context.config);
              }
              if (!component) {
                return context.components[name];
              }
              if (context.components[name]) {
                warn(`Component "${name}" has already been registered in target app.`);
              }
              context.components[name] = component;
              return app2;
            },
            directive(name, directive) {
              {
                validateDirectiveName(name);
              }
              if (!directive) {
                return context.directives[name];
              }
              if (context.directives[name]) {
                warn(`Directive "${name}" has already been registered in target app.`);
              }
              context.directives[name] = directive;
              return app2;
            },
            mount(rootContainer, isHydrate, isSVG) {
              if (!isMounted) {
                if (rootContainer.__vue_app__) {
                  warn(
                    `There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`
                  );
                }
                const vnode = createVNode(
                  rootComponent,
                  rootProps
                );
                vnode.appContext = context;
                {
                  context.reload = () => {
                    render(cloneVNode(vnode), rootContainer, isSVG);
                  };
                }
                if (isHydrate && hydrate) {
                  hydrate(vnode, rootContainer);
                } else {
                  render(vnode, rootContainer, isSVG);
                }
                isMounted = true;
                app2._container = rootContainer;
                rootContainer.__vue_app__ = app2;
                {
                  app2._instance = vnode.component;
                  devtoolsInitApp(app2, version);
                }
                return getExposeProxy(vnode.component) || vnode.component.proxy;
              } else {
                warn(
                  `App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``
                );
              }
            },
            unmount() {
              if (isMounted) {
                render(null, app2._container);
                {
                  app2._instance = null;
                  devtoolsUnmountApp(app2);
                }
                delete app2._container.__vue_app__;
              } else {
                warn(`Cannot unmount an app that is not mounted.`);
              }
            },
            provide(key, value) {
              if (key in context.provides) {
                warn(
                  `App already provides property with key "${String(key)}". It will be overwritten with the new value.`
                );
              }
              context.provides[key] = value;
              return app2;
            },
            runWithContext(fn) {
              currentApp = app2;
              try {
                return fn();
              } finally {
                currentApp = null;
              }
            }
          };
          return app2;
        };
      }
      var currentApp = null;
      function provide(key, value) {
        if (!currentInstance) {
          {
            warn(`provide() can only be used inside setup().`);
          }
        } else {
          let provides = currentInstance.provides;
          const parentProvides = currentInstance.parent && currentInstance.parent.provides;
          if (parentProvides === provides) {
            provides = currentInstance.provides = Object.create(parentProvides);
          }
          provides[key] = value;
        }
      }
      function inject(key, defaultValue, treatDefaultAsFactory = false) {
        const instance = currentInstance || currentRenderingInstance;
        if (instance || currentApp) {
          const provides = instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : currentApp._context.provides;
          if (provides && key in provides) {
            return provides[key];
          } else if (arguments.length > 1) {
            return treatDefaultAsFactory && shared.isFunction(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
          } else {
            warn(`injection "${String(key)}" not found.`);
          }
        } else {
          warn(`inject() can only be used inside setup() or functional components.`);
        }
      }
      function hasInjectionContext() {
        return !!(currentInstance || currentRenderingInstance || currentApp);
      }
      function initProps(instance, rawProps, isStateful, isSSR = false) {
        const props = {};
        const attrs = {};
        shared.def(attrs, InternalObjectKey, 1);
        instance.propsDefaults = /* @__PURE__ */ Object.create(null);
        setFullProps(instance, rawProps, props, attrs);
        for (const key in instance.propsOptions[0]) {
          if (!(key in props)) {
            props[key] = void 0;
          }
        }
        {
          validateProps(rawProps || {}, props, instance);
        }
        if (isStateful) {
          instance.props = isSSR ? props : reactivity.shallowReactive(props);
        } else {
          if (!instance.type.props) {
            instance.props = attrs;
          } else {
            instance.props = props;
          }
        }
        instance.attrs = attrs;
      }
      function isInHmrContext(instance) {
        while (instance) {
          if (instance.type.__hmrId)
            return true;
          instance = instance.parent;
        }
      }
      function updateProps(instance, rawProps, rawPrevProps, optimized) {
        const {
          props,
          attrs,
          vnode: { patchFlag }
        } = instance;
        const rawCurrentProps = reactivity.toRaw(props);
        const [options] = instance.propsOptions;
        let hasAttrsChanged = false;
        if (
          // always force full diff in dev
          // - #1942 if hmr is enabled with sfc component
          // - vite#872 non-sfc component used by sfc component
          !isInHmrContext(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)
        ) {
          if (patchFlag & 8) {
            const propsToUpdate = instance.vnode.dynamicProps;
            for (let i = 0; i < propsToUpdate.length; i++) {
              let key = propsToUpdate[i];
              if (isEmitListener(instance.emitsOptions, key)) {
                continue;
              }
              const value = rawProps[key];
              if (options) {
                if (shared.hasOwn(attrs, key)) {
                  if (value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                  }
                } else {
                  const camelizedKey = shared.camelize(key);
                  props[camelizedKey] = resolvePropValue(
                    options,
                    rawCurrentProps,
                    camelizedKey,
                    value,
                    instance,
                    false
                    /* isAbsent */
                  );
                }
              } else {
                if (value !== attrs[key]) {
                  attrs[key] = value;
                  hasAttrsChanged = true;
                }
              }
            }
          }
        } else {
          if (setFullProps(instance, rawProps, props, attrs)) {
            hasAttrsChanged = true;
          }
          let kebabKey;
          for (const key in rawCurrentProps) {
            if (!rawProps || // for camelCase
            !shared.hasOwn(rawProps, key) && // it's possible the original props was passed in as kebab-case
            // and converted to camelCase (#955)
            ((kebabKey = shared.hyphenate(key)) === key || !shared.hasOwn(rawProps, kebabKey))) {
              if (options) {
                if (rawPrevProps && // for camelCase
                (rawPrevProps[key] !== void 0 || // for kebab-case
                rawPrevProps[kebabKey] !== void 0)) {
                  props[key] = resolvePropValue(
                    options,
                    rawCurrentProps,
                    key,
                    void 0,
                    instance,
                    true
                    /* isAbsent */
                  );
                }
              } else {
                delete props[key];
              }
            }
          }
          if (attrs !== rawCurrentProps) {
            for (const key in attrs) {
              if (!rawProps || !shared.hasOwn(rawProps, key) && true) {
                delete attrs[key];
                hasAttrsChanged = true;
              }
            }
          }
        }
        if (hasAttrsChanged) {
          reactivity.trigger(instance, "set", "$attrs");
        }
        {
          validateProps(rawProps || {}, props, instance);
        }
      }
      function setFullProps(instance, rawProps, props, attrs) {
        const [options, needCastKeys] = instance.propsOptions;
        let hasAttrsChanged = false;
        let rawCastValues;
        if (rawProps) {
          for (let key in rawProps) {
            if (shared.isReservedProp(key)) {
              continue;
            }
            const value = rawProps[key];
            let camelKey;
            if (options && shared.hasOwn(options, camelKey = shared.camelize(key))) {
              if (!needCastKeys || !needCastKeys.includes(camelKey)) {
                props[camelKey] = value;
              } else {
                (rawCastValues || (rawCastValues = {}))[camelKey] = value;
              }
            } else if (!isEmitListener(instance.emitsOptions, key)) {
              if (!(key in attrs) || value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
              }
            }
          }
        }
        if (needCastKeys) {
          const rawCurrentProps = reactivity.toRaw(props);
          const castValues = rawCastValues || shared.EMPTY_OBJ;
          for (let i = 0; i < needCastKeys.length; i++) {
            const key = needCastKeys[i];
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              castValues[key],
              instance,
              !shared.hasOwn(castValues, key)
            );
          }
        }
        return hasAttrsChanged;
      }
      function resolvePropValue(options, props, key, value, instance, isAbsent) {
        const opt = options[key];
        if (opt != null) {
          const hasDefault = shared.hasOwn(opt, "default");
          if (hasDefault && value === void 0) {
            const defaultValue = opt.default;
            if (opt.type !== Function && !opt.skipFactory && shared.isFunction(defaultValue)) {
              const { propsDefaults } = instance;
              if (key in propsDefaults) {
                value = propsDefaults[key];
              } else {
                setCurrentInstance(instance);
                value = propsDefaults[key] = defaultValue.call(
                  null,
                  props
                );
                unsetCurrentInstance();
              }
            } else {
              value = defaultValue;
            }
          }
          if (opt[
            0
            /* shouldCast */
          ]) {
            if (isAbsent && !hasDefault) {
              value = false;
            } else if (opt[
              1
              /* shouldCastTrue */
            ] && (value === "" || value === shared.hyphenate(key))) {
              value = true;
            }
          }
        }
        return value;
      }
      function normalizePropsOptions(comp, appContext, asMixin = false) {
        const cache = appContext.propsCache;
        const cached = cache.get(comp);
        if (cached) {
          return cached;
        }
        const raw = comp.props;
        const normalized = {};
        const needCastKeys = [];
        let hasExtends = false;
        if (!shared.isFunction(comp)) {
          const extendProps = (raw2) => {
            hasExtends = true;
            const [props, keys] = normalizePropsOptions(raw2, appContext, true);
            shared.extend(normalized, props);
            if (keys)
              needCastKeys.push(...keys);
          };
          if (!asMixin && appContext.mixins.length) {
            appContext.mixins.forEach(extendProps);
          }
          if (comp.extends) {
            extendProps(comp.extends);
          }
          if (comp.mixins) {
            comp.mixins.forEach(extendProps);
          }
        }
        if (!raw && !hasExtends) {
          if (shared.isObject(comp)) {
            cache.set(comp, shared.EMPTY_ARR);
          }
          return shared.EMPTY_ARR;
        }
        if (shared.isArray(raw)) {
          for (let i = 0; i < raw.length; i++) {
            if (!shared.isString(raw[i])) {
              warn(`props must be strings when using array syntax.`, raw[i]);
            }
            const normalizedKey = shared.camelize(raw[i]);
            if (validatePropName(normalizedKey)) {
              normalized[normalizedKey] = shared.EMPTY_OBJ;
            }
          }
        } else if (raw) {
          if (!shared.isObject(raw)) {
            warn(`invalid props options`, raw);
          }
          for (const key in raw) {
            const normalizedKey = shared.camelize(key);
            if (validatePropName(normalizedKey)) {
              const opt = raw[key];
              const prop = normalized[normalizedKey] = shared.isArray(opt) || shared.isFunction(opt) ? { type: opt } : shared.extend({}, opt);
              if (prop) {
                const booleanIndex = getTypeIndex(Boolean, prop.type);
                const stringIndex = getTypeIndex(String, prop.type);
                prop[
                  0
                  /* shouldCast */
                ] = booleanIndex > -1;
                prop[
                  1
                  /* shouldCastTrue */
                ] = stringIndex < 0 || booleanIndex < stringIndex;
                if (booleanIndex > -1 || shared.hasOwn(prop, "default")) {
                  needCastKeys.push(normalizedKey);
                }
              }
            }
          }
        }
        const res = [normalized, needCastKeys];
        if (shared.isObject(comp)) {
          cache.set(comp, res);
        }
        return res;
      }
      function validatePropName(key) {
        if (key[0] !== "$") {
          return true;
        } else {
          warn(`Invalid prop name: "${key}" is a reserved property.`);
        }
        return false;
      }
      function getType(ctor) {
        const match = ctor && ctor.toString().match(/^\s*(function|class) (\w+)/);
        return match ? match[2] : ctor === null ? "null" : "";
      }
      function isSameType(a, b) {
        return getType(a) === getType(b);
      }
      function getTypeIndex(type, expectedTypes) {
        if (shared.isArray(expectedTypes)) {
          return expectedTypes.findIndex((t) => isSameType(t, type));
        } else if (shared.isFunction(expectedTypes)) {
          return isSameType(expectedTypes, type) ? 0 : -1;
        }
        return -1;
      }
      function validateProps(rawProps, props, instance) {
        const resolvedValues = reactivity.toRaw(props);
        const options = instance.propsOptions[0];
        for (const key in options) {
          let opt = options[key];
          if (opt == null)
            continue;
          validateProp(
            key,
            resolvedValues[key],
            opt,
            !shared.hasOwn(rawProps, key) && !shared.hasOwn(rawProps, shared.hyphenate(key))
          );
        }
      }
      function validateProp(name, value, prop, isAbsent) {
        const { type, required, validator, skipCheck } = prop;
        if (required && isAbsent) {
          warn('Missing required prop: "' + name + '"');
          return;
        }
        if (value == null && !required) {
          return;
        }
        if (type != null && type !== true && !skipCheck) {
          let isValid = false;
          const types = shared.isArray(type) ? type : [type];
          const expectedTypes = [];
          for (let i = 0; i < types.length && !isValid; i++) {
            const { valid, expectedType } = assertType(value, types[i]);
            expectedTypes.push(expectedType || "");
            isValid = valid;
          }
          if (!isValid) {
            warn(getInvalidTypeMessage(name, value, expectedTypes));
            return;
          }
        }
        if (validator && !validator(value)) {
          warn('Invalid prop: custom validator check failed for prop "' + name + '".');
        }
      }
      var isSimpleType = /* @__PURE__ */ shared.makeMap(
        "String,Number,Boolean,Function,Symbol,BigInt"
      );
      function assertType(value, type) {
        let valid;
        const expectedType = getType(type);
        if (isSimpleType(expectedType)) {
          const t = typeof value;
          valid = t === expectedType.toLowerCase();
          if (!valid && t === "object") {
            valid = value instanceof type;
          }
        } else if (expectedType === "Object") {
          valid = shared.isObject(value);
        } else if (expectedType === "Array") {
          valid = shared.isArray(value);
        } else if (expectedType === "null") {
          valid = value === null;
        } else {
          valid = value instanceof type;
        }
        return {
          valid,
          expectedType
        };
      }
      function getInvalidTypeMessage(name, value, expectedTypes) {
        let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(shared.capitalize).join(" | ")}`;
        const expectedType = expectedTypes[0];
        const receivedType = shared.toRawType(value);
        const expectedValue = styleValue(value, expectedType);
        const receivedValue = styleValue(value, receivedType);
        if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
          message += ` with value ${expectedValue}`;
        }
        message += `, got ${receivedType} `;
        if (isExplicable(receivedType)) {
          message += `with value ${receivedValue}.`;
        }
        return message;
      }
      function styleValue(value, type) {
        if (type === "String") {
          return `"${value}"`;
        } else if (type === "Number") {
          return `${Number(value)}`;
        } else {
          return `${value}`;
        }
      }
      function isExplicable(type) {
        const explicitTypes = ["string", "number", "boolean"];
        return explicitTypes.some((elem) => type.toLowerCase() === elem);
      }
      function isBoolean(...args) {
        return args.some((elem) => elem.toLowerCase() === "boolean");
      }
      var isInternalKey = (key) => key[0] === "_" || key === "$stable";
      var normalizeSlotValue = (value) => shared.isArray(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
      var normalizeSlot = (key, rawSlot, ctx) => {
        if (rawSlot._n) {
          return rawSlot;
        }
        const normalized = withCtx((...args) => {
          if (currentInstance) {
            warn(
              `Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`
            );
          }
          return normalizeSlotValue(rawSlot(...args));
        }, ctx);
        normalized._c = false;
        return normalized;
      };
      var normalizeObjectSlots = (rawSlots, slots, instance) => {
        const ctx = rawSlots._ctx;
        for (const key in rawSlots) {
          if (isInternalKey(key))
            continue;
          const value = rawSlots[key];
          if (shared.isFunction(value)) {
            slots[key] = normalizeSlot(key, value, ctx);
          } else if (value != null) {
            {
              warn(
                `Non-function value encountered for slot "${key}". Prefer function slots for better performance.`
              );
            }
            const normalized = normalizeSlotValue(value);
            slots[key] = () => normalized;
          }
        }
      };
      var normalizeVNodeSlots = (instance, children) => {
        if (!isKeepAlive(instance.vnode) && true) {
          warn(
            `Non-function value encountered for default slot. Prefer function slots for better performance.`
          );
        }
        const normalized = normalizeSlotValue(children);
        instance.slots.default = () => normalized;
      };
      var initSlots = (instance, children) => {
        if (instance.vnode.shapeFlag & 32) {
          const type = children._;
          if (type) {
            instance.slots = reactivity.toRaw(children);
            shared.def(children, "_", type);
          } else {
            normalizeObjectSlots(
              children,
              instance.slots = {}
            );
          }
        } else {
          instance.slots = {};
          if (children) {
            normalizeVNodeSlots(instance, children);
          }
        }
        shared.def(instance.slots, InternalObjectKey, 1);
      };
      var updateSlots = (instance, children, optimized) => {
        const { vnode, slots } = instance;
        let needDeletionCheck = true;
        let deletionComparisonTarget = shared.EMPTY_OBJ;
        if (vnode.shapeFlag & 32) {
          const type = children._;
          if (type) {
            if (isHmrUpdating) {
              shared.extend(slots, children);
              reactivity.trigger(instance, "set", "$slots");
            } else if (optimized && type === 1) {
              needDeletionCheck = false;
            } else {
              shared.extend(slots, children);
              if (!optimized && type === 1) {
                delete slots._;
              }
            }
          } else {
            needDeletionCheck = !children.$stable;
            normalizeObjectSlots(children, slots);
          }
          deletionComparisonTarget = children;
        } else if (children) {
          normalizeVNodeSlots(instance, children);
          deletionComparisonTarget = { default: 1 };
        }
        if (needDeletionCheck) {
          for (const key in slots) {
            if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
              delete slots[key];
            }
          }
        }
      };
      function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
        if (shared.isArray(rawRef)) {
          rawRef.forEach(
            (r, i) => setRef(
              r,
              oldRawRef && (shared.isArray(oldRawRef) ? oldRawRef[i] : oldRawRef),
              parentSuspense,
              vnode,
              isUnmount
            )
          );
          return;
        }
        if (isAsyncWrapper(vnode) && !isUnmount) {
          return;
        }
        const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
        const value = isUnmount ? null : refValue;
        const { i: owner, r: ref } = rawRef;
        if (!owner) {
          warn(
            `Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`
          );
          return;
        }
        const oldRef = oldRawRef && oldRawRef.r;
        const refs = owner.refs === shared.EMPTY_OBJ ? owner.refs = {} : owner.refs;
        const setupState = owner.setupState;
        if (oldRef != null && oldRef !== ref) {
          if (shared.isString(oldRef)) {
            refs[oldRef] = null;
            if (shared.hasOwn(setupState, oldRef)) {
              setupState[oldRef] = null;
            }
          } else if (reactivity.isRef(oldRef)) {
            oldRef.value = null;
          }
        }
        if (shared.isFunction(ref)) {
          callWithErrorHandling(ref, owner, 12, [value, refs]);
        } else {
          const _isString = shared.isString(ref);
          const _isRef = reactivity.isRef(ref);
          if (_isString || _isRef) {
            const doSet = () => {
              if (rawRef.f) {
                const existing = _isString ? shared.hasOwn(setupState, ref) ? setupState[ref] : refs[ref] : ref.value;
                if (isUnmount) {
                  shared.isArray(existing) && shared.remove(existing, refValue);
                } else {
                  if (!shared.isArray(existing)) {
                    if (_isString) {
                      refs[ref] = [refValue];
                      if (shared.hasOwn(setupState, ref)) {
                        setupState[ref] = refs[ref];
                      }
                    } else {
                      ref.value = [refValue];
                      if (rawRef.k)
                        refs[rawRef.k] = ref.value;
                    }
                  } else if (!existing.includes(refValue)) {
                    existing.push(refValue);
                  }
                }
              } else if (_isString) {
                refs[ref] = value;
                if (shared.hasOwn(setupState, ref)) {
                  setupState[ref] = value;
                }
              } else if (_isRef) {
                ref.value = value;
                if (rawRef.k)
                  refs[rawRef.k] = value;
              } else {
                warn("Invalid template ref type:", ref, `(${typeof ref})`);
              }
            };
            if (value) {
              doSet.id = -1;
              queuePostRenderEffect(doSet, parentSuspense);
            } else {
              doSet();
            }
          } else {
            warn("Invalid template ref type:", ref, `(${typeof ref})`);
          }
        }
      }
      var hasMismatch = false;
      var isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== "foreignObject";
      var isComment = (node) => node.nodeType === 8;
      function createHydrationFunctions(rendererInternals) {
        const {
          mt: mountComponent,
          p: patch,
          o: {
            patchProp,
            createText,
            nextSibling,
            parentNode,
            remove,
            insert,
            createComment
          }
        } = rendererInternals;
        const hydrate = (vnode, container) => {
          if (!container.hasChildNodes()) {
            warn(
              `Attempting to hydrate existing markup but container is empty. Performing full mount instead.`
            );
            patch(null, vnode, container);
            flushPostFlushCbs();
            container._vnode = vnode;
            return;
          }
          hasMismatch = false;
          hydrateNode(container.firstChild, vnode, null, null, null);
          flushPostFlushCbs();
          container._vnode = vnode;
          if (hasMismatch && true) {
            console.error(`Hydration completed but contains mismatches.`);
          }
        };
        const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
          const isFragmentStart = isComment(node) && node.data === "[";
          const onMismatch = () => handleMismatch(
            node,
            vnode,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            isFragmentStart
          );
          const { type, ref, shapeFlag, patchFlag } = vnode;
          let domType = node.nodeType;
          vnode.el = node;
          if (patchFlag === -2) {
            optimized = false;
            vnode.dynamicChildren = null;
          }
          let nextNode = null;
          switch (type) {
            case Text:
              if (domType !== 3) {
                if (vnode.children === "") {
                  insert(vnode.el = createText(""), parentNode(node), node);
                  nextNode = node;
                } else {
                  nextNode = onMismatch();
                }
              } else {
                if (node.data !== vnode.children) {
                  hasMismatch = true;
                  warn(
                    `Hydration text mismatch:
- Client: ${JSON.stringify(node.data)}
- Server: ${JSON.stringify(vnode.children)}`
                  );
                  node.data = vnode.children;
                }
                nextNode = nextSibling(node);
              }
              break;
            case Comment:
              if (domType !== 8 || isFragmentStart) {
                nextNode = onMismatch();
              } else {
                nextNode = nextSibling(node);
              }
              break;
            case Static:
              if (isFragmentStart) {
                node = nextSibling(node);
                domType = node.nodeType;
              }
              if (domType === 1 || domType === 3) {
                nextNode = node;
                const needToAdoptContent = !vnode.children.length;
                for (let i = 0; i < vnode.staticCount; i++) {
                  if (needToAdoptContent)
                    vnode.children += nextNode.nodeType === 1 ? nextNode.outerHTML : nextNode.data;
                  if (i === vnode.staticCount - 1) {
                    vnode.anchor = nextNode;
                  }
                  nextNode = nextSibling(nextNode);
                }
                return isFragmentStart ? nextSibling(nextNode) : nextNode;
              } else {
                onMismatch();
              }
              break;
            case Fragment:
              if (!isFragmentStart) {
                nextNode = onMismatch();
              } else {
                nextNode = hydrateFragment(
                  node,
                  vnode,
                  parentComponent,
                  parentSuspense,
                  slotScopeIds,
                  optimized
                );
              }
              break;
            default:
              if (shapeFlag & 1) {
                if (domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) {
                  nextNode = onMismatch();
                } else {
                  nextNode = hydrateElement(
                    node,
                    vnode,
                    parentComponent,
                    parentSuspense,
                    slotScopeIds,
                    optimized
                  );
                }
              } else if (shapeFlag & 6) {
                vnode.slotScopeIds = slotScopeIds;
                const container = parentNode(node);
                mountComponent(
                  vnode,
                  container,
                  null,
                  parentComponent,
                  parentSuspense,
                  isSVGContainer(container),
                  optimized
                );
                nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
                if (nextNode && isComment(nextNode) && nextNode.data === "teleport end") {
                  nextNode = nextSibling(nextNode);
                }
                if (isAsyncWrapper(vnode)) {
                  let subTree;
                  if (isFragmentStart) {
                    subTree = createVNode(Fragment);
                    subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
                  } else {
                    subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
                  }
                  subTree.el = node;
                  vnode.component.subTree = subTree;
                }
              } else if (shapeFlag & 64) {
                if (domType !== 8) {
                  nextNode = onMismatch();
                } else {
                  nextNode = vnode.type.hydrate(
                    node,
                    vnode,
                    parentComponent,
                    parentSuspense,
                    slotScopeIds,
                    optimized,
                    rendererInternals,
                    hydrateChildren
                  );
                }
              } else if (shapeFlag & 128) {
                nextNode = vnode.type.hydrate(
                  node,
                  vnode,
                  parentComponent,
                  parentSuspense,
                  isSVGContainer(parentNode(node)),
                  slotScopeIds,
                  optimized,
                  rendererInternals,
                  hydrateNode
                );
              } else {
                warn("Invalid HostVNode type:", type, `(${typeof type})`);
              }
          }
          if (ref != null) {
            setRef(ref, null, parentSuspense, vnode);
          }
          return nextNode;
        };
        const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
          optimized = optimized || !!vnode.dynamicChildren;
          const { type, props, patchFlag, shapeFlag, dirs } = vnode;
          const forcePatchValue = type === "input" && dirs || type === "option";
          {
            if (dirs) {
              invokeDirectiveHook(vnode, null, parentComponent, "created");
            }
            if (props) {
              if (forcePatchValue || !optimized || patchFlag & (16 | 32)) {
                for (const key in props) {
                  if (forcePatchValue && key.endsWith("value") || shared.isOn(key) && !shared.isReservedProp(key)) {
                    patchProp(
                      el,
                      key,
                      null,
                      props[key],
                      false,
                      void 0,
                      parentComponent
                    );
                  }
                }
              } else if (props.onClick) {
                patchProp(
                  el,
                  "onClick",
                  null,
                  props.onClick,
                  false,
                  void 0,
                  parentComponent
                );
              }
            }
            let vnodeHooks;
            if (vnodeHooks = props && props.onVnodeBeforeMount) {
              invokeVNodeHook(vnodeHooks, parentComponent, vnode);
            }
            if (dirs) {
              invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
            }
            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
              queueEffectWithSuspense(() => {
                vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
              }, parentSuspense);
            }
            if (shapeFlag & 16 && // skip if element has innerHTML / textContent
            !(props && (props.innerHTML || props.textContent))) {
              let next = hydrateChildren(
                el.firstChild,
                vnode,
                el,
                parentComponent,
                parentSuspense,
                slotScopeIds,
                optimized
              );
              let hasWarned2 = false;
              while (next) {
                hasMismatch = true;
                if (!hasWarned2) {
                  warn(
                    `Hydration children mismatch in <${vnode.type}>: server rendered element contains more child nodes than client vdom.`
                  );
                  hasWarned2 = true;
                }
                const cur = next;
                next = next.nextSibling;
                remove(cur);
              }
            } else if (shapeFlag & 8) {
              if (el.textContent !== vnode.children) {
                hasMismatch = true;
                warn(
                  `Hydration text content mismatch in <${vnode.type}>:
- Client: ${el.textContent}
- Server: ${vnode.children}`
                );
                el.textContent = vnode.children;
              }
            }
          }
          return el.nextSibling;
        };
        const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
          optimized = optimized || !!parentVNode.dynamicChildren;
          const children = parentVNode.children;
          const l = children.length;
          let hasWarned2 = false;
          for (let i = 0; i < l; i++) {
            const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
            if (node) {
              node = hydrateNode(
                node,
                vnode,
                parentComponent,
                parentSuspense,
                slotScopeIds,
                optimized
              );
            } else if (vnode.type === Text && !vnode.children) {
              continue;
            } else {
              hasMismatch = true;
              if (!hasWarned2) {
                warn(
                  `Hydration children mismatch in <${container.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.`
                );
                hasWarned2 = true;
              }
              patch(
                null,
                vnode,
                container,
                null,
                parentComponent,
                parentSuspense,
                isSVGContainer(container),
                slotScopeIds
              );
            }
          }
          return node;
        };
        const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
          const { slotScopeIds: fragmentSlotScopeIds } = vnode;
          if (fragmentSlotScopeIds) {
            slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
          }
          const container = parentNode(node);
          const next = hydrateChildren(
            nextSibling(node),
            vnode,
            container,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          );
          if (next && isComment(next) && next.data === "]") {
            return nextSibling(vnode.anchor = next);
          } else {
            hasMismatch = true;
            insert(vnode.anchor = createComment(`]`), container, next);
            return next;
          }
        };
        const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
          hasMismatch = true;
          warn(
            `Hydration node mismatch:
- Client vnode:`,
            vnode.type,
            `
- Server rendered DOM:`,
            node,
            node.nodeType === 3 ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``
          );
          vnode.el = null;
          if (isFragment) {
            const end = locateClosingAsyncAnchor(node);
            while (true) {
              const next2 = nextSibling(node);
              if (next2 && next2 !== end) {
                remove(next2);
              } else {
                break;
              }
            }
          }
          const next = nextSibling(node);
          const container = parentNode(node);
          remove(node);
          patch(
            null,
            vnode,
            container,
            next,
            parentComponent,
            parentSuspense,
            isSVGContainer(container),
            slotScopeIds
          );
          return next;
        };
        const locateClosingAsyncAnchor = (node) => {
          let match = 0;
          while (node) {
            node = nextSibling(node);
            if (node && isComment(node)) {
              if (node.data === "[")
                match++;
              if (node.data === "]") {
                if (match === 0) {
                  return nextSibling(node);
                } else {
                  match--;
                }
              }
            }
          }
          return node;
        };
        return [hydrate, hydrateNode];
      }
      var supported;
      var perf;
      function startMeasure(instance, type) {
        if (instance.appContext.config.performance && isSupported()) {
          perf.mark(`vue-${type}-${instance.uid}`);
        }
        {
          devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
        }
      }
      function endMeasure(instance, type) {
        if (instance.appContext.config.performance && isSupported()) {
          const startTag = `vue-${type}-${instance.uid}`;
          const endTag = startTag + `:end`;
          perf.mark(endTag);
          perf.measure(
            `<${formatComponentName(instance, instance.type)}> ${type}`,
            startTag,
            endTag
          );
          perf.clearMarks(startTag);
          perf.clearMarks(endTag);
        }
        {
          devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
        }
      }
      function isSupported() {
        if (supported !== void 0) {
          return supported;
        }
        if (typeof window !== "undefined" && window.performance) {
          supported = true;
          perf = window.performance;
        } else {
          supported = false;
        }
        return supported;
      }
      var queuePostRenderEffect = queueEffectWithSuspense;
      function createRenderer(options) {
        return baseCreateRenderer(options);
      }
      function createHydrationRenderer(options) {
        return baseCreateRenderer(options, createHydrationFunctions);
      }
      function baseCreateRenderer(options, createHydrationFns) {
        const target = shared.getGlobalThis();
        target.__VUE__ = true;
        {
          setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
        }
        const {
          insert: hostInsert,
          remove: hostRemove,
          patchProp: hostPatchProp,
          createElement: hostCreateElement,
          createText: hostCreateText,
          createComment: hostCreateComment,
          setText: hostSetText,
          setElementText: hostSetElementText,
          parentNode: hostParentNode,
          nextSibling: hostNextSibling,
          setScopeId: hostSetScopeId = shared.NOOP,
          insertStaticContent: hostInsertStaticContent
        } = options;
        const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren) => {
          if (n1 === n2) {
            return;
          }
          if (n1 && !isSameVNodeType(n1, n2)) {
            anchor = getNextHostNode(n1);
            unmount(n1, parentComponent, parentSuspense, true);
            n1 = null;
          }
          if (n2.patchFlag === -2) {
            optimized = false;
            n2.dynamicChildren = null;
          }
          const { type, ref, shapeFlag } = n2;
          switch (type) {
            case Text:
              processText(n1, n2, container, anchor);
              break;
            case Comment:
              processCommentNode(n1, n2, container, anchor);
              break;
            case Static:
              if (n1 == null) {
                mountStaticNode(n2, container, anchor, isSVG);
              } else {
                patchStaticNode(n1, n2, container, isSVG);
              }
              break;
            case Fragment:
              processFragment(
                n1,
                n2,
                container,
                anchor,
                parentComponent,
                parentSuspense,
                isSVG,
                slotScopeIds,
                optimized
              );
              break;
            default:
              if (shapeFlag & 1) {
                processElement(
                  n1,
                  n2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized
                );
              } else if (shapeFlag & 6) {
                processComponent(
                  n1,
                  n2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized
                );
              } else if (shapeFlag & 64) {
                type.process(
                  n1,
                  n2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized,
                  internals
                );
              } else if (shapeFlag & 128) {
                type.process(
                  n1,
                  n2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized,
                  internals
                );
              } else {
                warn("Invalid VNode type:", type, `(${typeof type})`);
              }
          }
          if (ref != null && parentComponent) {
            setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
          }
        };
        const processText = (n1, n2, container, anchor) => {
          if (n1 == null) {
            hostInsert(
              n2.el = hostCreateText(n2.children),
              container,
              anchor
            );
          } else {
            const el = n2.el = n1.el;
            if (n2.children !== n1.children) {
              hostSetText(el, n2.children);
            }
          }
        };
        const processCommentNode = (n1, n2, container, anchor) => {
          if (n1 == null) {
            hostInsert(
              n2.el = hostCreateComment(n2.children || ""),
              container,
              anchor
            );
          } else {
            n2.el = n1.el;
          }
        };
        const mountStaticNode = (n2, container, anchor, isSVG) => {
          [n2.el, n2.anchor] = hostInsertStaticContent(
            n2.children,
            container,
            anchor,
            isSVG,
            n2.el,
            n2.anchor
          );
        };
        const patchStaticNode = (n1, n2, container, isSVG) => {
          if (n2.children !== n1.children) {
            const anchor = hostNextSibling(n1.anchor);
            removeStaticNode(n1);
            [n2.el, n2.anchor] = hostInsertStaticContent(
              n2.children,
              container,
              anchor,
              isSVG
            );
          } else {
            n2.el = n1.el;
            n2.anchor = n1.anchor;
          }
        };
        const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
          let next;
          while (el && el !== anchor) {
            next = hostNextSibling(el);
            hostInsert(el, container, nextSibling);
            el = next;
          }
          hostInsert(anchor, container, nextSibling);
        };
        const removeStaticNode = ({ el, anchor }) => {
          let next;
          while (el && el !== anchor) {
            next = hostNextSibling(el);
            hostRemove(el);
            el = next;
          }
          hostRemove(anchor);
        };
        const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
          isSVG = isSVG || n2.type === "svg";
          if (n1 == null) {
            mountElement(
              n2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              isSVG,
              slotScopeIds,
              optimized
            );
          } else {
            patchElement(
              n1,
              n2,
              parentComponent,
              parentSuspense,
              isSVG,
              slotScopeIds,
              optimized
            );
          }
        };
        const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
          let el;
          let vnodeHook;
          const { type, props, shapeFlag, transition, dirs } = vnode;
          el = vnode.el = hostCreateElement(
            vnode.type,
            isSVG,
            props && props.is,
            props
          );
          if (shapeFlag & 8) {
            hostSetElementText(el, vnode.children);
          } else if (shapeFlag & 16) {
            mountChildren(
              vnode.children,
              el,
              null,
              parentComponent,
              parentSuspense,
              isSVG && type !== "foreignObject",
              slotScopeIds,
              optimized
            );
          }
          if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "created");
          }
          setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
          if (props) {
            for (const key in props) {
              if (key !== "value" && !shared.isReservedProp(key)) {
                hostPatchProp(
                  el,
                  key,
                  null,
                  props[key],
                  isSVG,
                  vnode.children,
                  parentComponent,
                  parentSuspense,
                  unmountChildren
                );
              }
            }
            if ("value" in props) {
              hostPatchProp(el, "value", null, props.value);
            }
            if (vnodeHook = props.onVnodeBeforeMount) {
              invokeVNodeHook(vnodeHook, parentComponent, vnode);
            }
          }
          {
            Object.defineProperty(el, "__vnode", {
              value: vnode,
              enumerable: false
            });
            Object.defineProperty(el, "__vueParentComponent", {
              value: parentComponent,
              enumerable: false
            });
          }
          if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
          }
          const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
          if (needCallTransitionHooks) {
            transition.beforeEnter(el);
          }
          hostInsert(el, container, anchor);
          if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
            queuePostRenderEffect(() => {
              vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
              needCallTransitionHooks && transition.enter(el);
              dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
            }, parentSuspense);
          }
        };
        const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
          if (scopeId) {
            hostSetScopeId(el, scopeId);
          }
          if (slotScopeIds) {
            for (let i = 0; i < slotScopeIds.length; i++) {
              hostSetScopeId(el, slotScopeIds[i]);
            }
          }
          if (parentComponent) {
            let subTree = parentComponent.subTree;
            if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
              subTree = filterSingleRoot(subTree.children) || subTree;
            }
            if (vnode === subTree) {
              const parentVNode = parentComponent.vnode;
              setScopeId(
                el,
                parentVNode,
                parentVNode.scopeId,
                parentVNode.slotScopeIds,
                parentComponent.parent
              );
            }
          }
        };
        const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
          for (let i = start; i < children.length; i++) {
            const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
            patch(
              null,
              child,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              isSVG,
              slotScopeIds,
              optimized
            );
          }
        };
        const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
          const el = n2.el = n1.el;
          let { patchFlag, dynamicChildren, dirs } = n2;
          patchFlag |= n1.patchFlag & 16;
          const oldProps = n1.props || shared.EMPTY_OBJ;
          const newProps = n2.props || shared.EMPTY_OBJ;
          let vnodeHook;
          parentComponent && toggleRecurse(parentComponent, false);
          if (vnodeHook = newProps.onVnodeBeforeUpdate) {
            invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
          }
          if (dirs) {
            invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
          }
          parentComponent && toggleRecurse(parentComponent, true);
          if (isHmrUpdating) {
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
          }
          const areChildrenSVG = isSVG && n2.type !== "foreignObject";
          if (dynamicChildren) {
            patchBlockChildren(
              n1.dynamicChildren,
              dynamicChildren,
              el,
              parentComponent,
              parentSuspense,
              areChildrenSVG,
              slotScopeIds
            );
            {
              traverseStaticChildren(n1, n2);
            }
          } else if (!optimized) {
            patchChildren(
              n1,
              n2,
              el,
              null,
              parentComponent,
              parentSuspense,
              areChildrenSVG,
              slotScopeIds,
              false
            );
          }
          if (patchFlag > 0) {
            if (patchFlag & 16) {
              patchProps(
                el,
                n2,
                oldProps,
                newProps,
                parentComponent,
                parentSuspense,
                isSVG
              );
            } else {
              if (patchFlag & 2) {
                if (oldProps.class !== newProps.class) {
                  hostPatchProp(el, "class", null, newProps.class, isSVG);
                }
              }
              if (patchFlag & 4) {
                hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
              }
              if (patchFlag & 8) {
                const propsToUpdate = n2.dynamicProps;
                for (let i = 0; i < propsToUpdate.length; i++) {
                  const key = propsToUpdate[i];
                  const prev = oldProps[key];
                  const next = newProps[key];
                  if (next !== prev || key === "value") {
                    hostPatchProp(
                      el,
                      key,
                      prev,
                      next,
                      isSVG,
                      n1.children,
                      parentComponent,
                      parentSuspense,
                      unmountChildren
                    );
                  }
                }
              }
            }
            if (patchFlag & 1) {
              if (n1.children !== n2.children) {
                hostSetElementText(el, n2.children);
              }
            }
          } else if (!optimized && dynamicChildren == null) {
            patchProps(
              el,
              n2,
              oldProps,
              newProps,
              parentComponent,
              parentSuspense,
              isSVG
            );
          }
          if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
            queuePostRenderEffect(() => {
              vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
              dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
            }, parentSuspense);
          }
        };
        const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
          for (let i = 0; i < newChildren.length; i++) {
            const oldVNode = oldChildren[i];
            const newVNode = newChildren[i];
            const container = (
              // oldVNode may be an errored async setup() component inside Suspense
              // which will not have a mounted element
              oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
              // of the Fragment itself so it can move its children.
              (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
              // which also requires the correct parent container
              !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
              oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
                // In other cases, the parent container is not actually used so we
                // just pass the block element here to avoid a DOM parentNode call.
                fallbackContainer
              )
            );
            patch(
              oldVNode,
              newVNode,
              container,
              null,
              parentComponent,
              parentSuspense,
              isSVG,
              slotScopeIds,
              true
            );
          }
        };
        const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
          if (oldProps !== newProps) {
            if (oldProps !== shared.EMPTY_OBJ) {
              for (const key in oldProps) {
                if (!shared.isReservedProp(key) && !(key in newProps)) {
                  hostPatchProp(
                    el,
                    key,
                    oldProps[key],
                    null,
                    isSVG,
                    vnode.children,
                    parentComponent,
                    parentSuspense,
                    unmountChildren
                  );
                }
              }
            }
            for (const key in newProps) {
              if (shared.isReservedProp(key))
                continue;
              const next = newProps[key];
              const prev = oldProps[key];
              if (next !== prev && key !== "value") {
                hostPatchProp(
                  el,
                  key,
                  prev,
                  next,
                  isSVG,
                  vnode.children,
                  parentComponent,
                  parentSuspense,
                  unmountChildren
                );
              }
            }
            if ("value" in newProps) {
              hostPatchProp(el, "value", oldProps.value, newProps.value);
            }
          }
        };
        const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
          const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
          const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
          let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
          if (
            // #5523 dev root fragment may inherit directives
            isHmrUpdating || patchFlag & 2048
          ) {
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
          }
          if (fragmentSlotScopeIds) {
            slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
          }
          if (n1 == null) {
            hostInsert(fragmentStartAnchor, container, anchor);
            hostInsert(fragmentEndAnchor, container, anchor);
            mountChildren(
              n2.children,
              container,
              fragmentEndAnchor,
              parentComponent,
              parentSuspense,
              isSVG,
              slotScopeIds,
              optimized
            );
          } else {
            if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
            // of renderSlot() with no valid children
            n1.dynamicChildren) {
              patchBlockChildren(
                n1.dynamicChildren,
                dynamicChildren,
                container,
                parentComponent,
                parentSuspense,
                isSVG,
                slotScopeIds
              );
              {
                traverseStaticChildren(n1, n2);
              }
            } else {
              patchChildren(
                n1,
                n2,
                container,
                fragmentEndAnchor,
                parentComponent,
                parentSuspense,
                isSVG,
                slotScopeIds,
                optimized
              );
            }
          }
        };
        const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
          n2.slotScopeIds = slotScopeIds;
          if (n1 == null) {
            if (n2.shapeFlag & 512) {
              parentComponent.ctx.activate(
                n2,
                container,
                anchor,
                isSVG,
                optimized
              );
            } else {
              mountComponent(
                n2,
                container,
                anchor,
                parentComponent,
                parentSuspense,
                isSVG,
                optimized
              );
            }
          } else {
            updateComponent(n1, n2, optimized);
          }
        };
        const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
          const instance = initialVNode.component = createComponentInstance(
            initialVNode,
            parentComponent,
            parentSuspense
          );
          if (instance.type.__hmrId) {
            registerHMR(instance);
          }
          {
            pushWarningContext(initialVNode);
            startMeasure(instance, `mount`);
          }
          if (isKeepAlive(initialVNode)) {
            instance.ctx.renderer = internals;
          }
          {
            {
              startMeasure(instance, `init`);
            }
            setupComponent(instance);
            {
              endMeasure(instance, `init`);
            }
          }
          if (instance.asyncDep) {
            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
            if (!initialVNode.el) {
              const placeholder = instance.subTree = createVNode(Comment);
              processCommentNode(null, placeholder, container, anchor);
            }
            return;
          }
          setupRenderEffect(
            instance,
            initialVNode,
            container,
            anchor,
            parentSuspense,
            isSVG,
            optimized
          );
          {
            popWarningContext();
            endMeasure(instance, `mount`);
          }
        };
        const updateComponent = (n1, n2, optimized) => {
          const instance = n2.component = n1.component;
          if (shouldUpdateComponent(n1, n2, optimized)) {
            if (instance.asyncDep && !instance.asyncResolved) {
              {
                pushWarningContext(n2);
              }
              updateComponentPreRender(instance, n2, optimized);
              {
                popWarningContext();
              }
              return;
            } else {
              instance.next = n2;
              invalidateJob(instance.update);
              instance.update();
            }
          } else {
            n2.el = n1.el;
            instance.vnode = n2;
          }
        };
        const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
          const componentUpdateFn = () => {
            if (!instance.isMounted) {
              let vnodeHook;
              const { el, props } = initialVNode;
              const { bm, m, parent } = instance;
              const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
              toggleRecurse(instance, false);
              if (bm) {
                shared.invokeArrayFns(bm);
              }
              if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
                invokeVNodeHook(vnodeHook, parent, initialVNode);
              }
              toggleRecurse(instance, true);
              if (el && hydrateNode) {
                const hydrateSubTree = () => {
                  {
                    startMeasure(instance, `render`);
                  }
                  instance.subTree = renderComponentRoot(instance);
                  {
                    endMeasure(instance, `render`);
                  }
                  {
                    startMeasure(instance, `hydrate`);
                  }
                  hydrateNode(
                    el,
                    instance.subTree,
                    instance,
                    parentSuspense,
                    null
                  );
                  {
                    endMeasure(instance, `hydrate`);
                  }
                };
                if (isAsyncWrapperVNode) {
                  initialVNode.type.__asyncLoader().then(
                    // note: we are moving the render call into an async callback,
                    // which means it won't track dependencies - but it's ok because
                    // a server-rendered async wrapper is already in resolved state
                    // and it will never need to change.
                    () => !instance.isUnmounted && hydrateSubTree()
                  );
                } else {
                  hydrateSubTree();
                }
              } else {
                {
                  startMeasure(instance, `render`);
                }
                const subTree = instance.subTree = renderComponentRoot(instance);
                {
                  endMeasure(instance, `render`);
                }
                {
                  startMeasure(instance, `patch`);
                }
                patch(
                  null,
                  subTree,
                  container,
                  anchor,
                  instance,
                  parentSuspense,
                  isSVG
                );
                {
                  endMeasure(instance, `patch`);
                }
                initialVNode.el = subTree.el;
              }
              if (m) {
                queuePostRenderEffect(m, parentSuspense);
              }
              if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
                const scopedInitialVNode = initialVNode;
                queuePostRenderEffect(
                  () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
                  parentSuspense
                );
              }
              if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
                instance.a && queuePostRenderEffect(instance.a, parentSuspense);
              }
              instance.isMounted = true;
              {
                devtoolsComponentAdded(instance);
              }
              initialVNode = container = anchor = null;
            } else {
              let { next, bu, u, parent, vnode } = instance;
              let originNext = next;
              let vnodeHook;
              {
                pushWarningContext(next || instance.vnode);
              }
              toggleRecurse(instance, false);
              if (next) {
                next.el = vnode.el;
                updateComponentPreRender(instance, next, optimized);
              } else {
                next = vnode;
              }
              if (bu) {
                shared.invokeArrayFns(bu);
              }
              if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
                invokeVNodeHook(vnodeHook, parent, next, vnode);
              }
              toggleRecurse(instance, true);
              {
                startMeasure(instance, `render`);
              }
              const nextTree = renderComponentRoot(instance);
              {
                endMeasure(instance, `render`);
              }
              const prevTree = instance.subTree;
              instance.subTree = nextTree;
              {
                startMeasure(instance, `patch`);
              }
              patch(
                prevTree,
                nextTree,
                // parent may have changed if it's in a teleport
                hostParentNode(prevTree.el),
                // anchor may have changed if it's in a fragment
                getNextHostNode(prevTree),
                instance,
                parentSuspense,
                isSVG
              );
              {
                endMeasure(instance, `patch`);
              }
              next.el = nextTree.el;
              if (originNext === null) {
                updateHOCHostEl(instance, nextTree.el);
              }
              if (u) {
                queuePostRenderEffect(u, parentSuspense);
              }
              if (vnodeHook = next.props && next.props.onVnodeUpdated) {
                queuePostRenderEffect(
                  () => invokeVNodeHook(vnodeHook, parent, next, vnode),
                  parentSuspense
                );
              }
              {
                devtoolsComponentUpdated(instance);
              }
              {
                popWarningContext();
              }
            }
          };
          const effect = instance.effect = new reactivity.ReactiveEffect(
            componentUpdateFn,
            () => queueJob(update),
            instance.scope
            // track it in component's effect scope
          );
          const update = instance.update = () => effect.run();
          update.id = instance.uid;
          toggleRecurse(instance, true);
          {
            effect.onTrack = instance.rtc ? (e) => shared.invokeArrayFns(instance.rtc, e) : void 0;
            effect.onTrigger = instance.rtg ? (e) => shared.invokeArrayFns(instance.rtg, e) : void 0;
            update.ownerInstance = instance;
          }
          update();
        };
        const updateComponentPreRender = (instance, nextVNode, optimized) => {
          nextVNode.component = instance;
          const prevProps = instance.vnode.props;
          instance.vnode = nextVNode;
          instance.next = null;
          updateProps(instance, nextVNode.props, prevProps, optimized);
          updateSlots(instance, nextVNode.children, optimized);
          reactivity.pauseTracking();
          flushPreFlushCbs();
          reactivity.resetTracking();
        };
        const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
          const c1 = n1 && n1.children;
          const prevShapeFlag = n1 ? n1.shapeFlag : 0;
          const c2 = n2.children;
          const { patchFlag, shapeFlag } = n2;
          if (patchFlag > 0) {
            if (patchFlag & 128) {
              patchKeyedChildren(
                c1,
                c2,
                container,
                anchor,
                parentComponent,
                parentSuspense,
                isSVG,
                slotScopeIds,
                optimized
              );
              return;
            } else if (patchFlag & 256) {
              patchUnkeyedChildren(
                c1,
                c2,
                container,
                anchor,
                parentComponent,
                parentSuspense,
                isSVG,
                slotScopeIds,
                optimized
              );
              return;
            }
          }
          if (shapeFlag & 8) {
            if (prevShapeFlag & 16) {
              unmountChildren(c1, parentComponent, parentSuspense);
            }
            if (c2 !== c1) {
              hostSetElementText(container, c2);
            }
          } else {
            if (prevShapeFlag & 16) {
              if (shapeFlag & 16) {
                patchKeyedChildren(
                  c1,
                  c2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized
                );
              } else {
                unmountChildren(c1, parentComponent, parentSuspense, true);
              }
            } else {
              if (prevShapeFlag & 8) {
                hostSetElementText(container, "");
              }
              if (shapeFlag & 16) {
                mountChildren(
                  c2,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized
                );
              }
            }
          }
        };
        const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
          c1 = c1 || shared.EMPTY_ARR;
          c2 = c2 || shared.EMPTY_ARR;
          const oldLength = c1.length;
          const newLength = c2.length;
          const commonLength = Math.min(oldLength, newLength);
          let i;
          for (i = 0; i < commonLength; i++) {
            const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            patch(
              c1[i],
              nextChild,
              container,
              null,
              parentComponent,
              parentSuspense,
              isSVG,
              slotScopeIds,
              optimized
            );
          }
          if (oldLength > newLength) {
            unmountChildren(
              c1,
              parentComponent,
              parentSuspense,
              true,
              false,
              commonLength
            );
          } else {
            mountChildren(
              c2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              isSVG,
              slotScopeIds,
              optimized,
              commonLength
            );
          }
        };
        const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
          let i = 0;
          const l2 = c2.length;
          let e1 = c1.length - 1;
          let e2 = l2 - 1;
          while (i <= e1 && i <= e2) {
            const n1 = c1[i];
            const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            if (isSameVNodeType(n1, n2)) {
              patch(
                n1,
                n2,
                container,
                null,
                parentComponent,
                parentSuspense,
                isSVG,
                slotScopeIds,
                optimized
              );
            } else {
              break;
            }
            i++;
          }
          while (i <= e1 && i <= e2) {
            const n1 = c1[e1];
            const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
            if (isSameVNodeType(n1, n2)) {
              patch(
                n1,
                n2,
                container,
                null,
                parentComponent,
                parentSuspense,
                isSVG,
                slotScopeIds,
                optimized
              );
            } else {
              break;
            }
            e1--;
            e2--;
          }
          if (i > e1) {
            if (i <= e2) {
              const nextPos = e2 + 1;
              const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
              while (i <= e2) {
                patch(
                  null,
                  c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]),
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized
                );
                i++;
              }
            }
          } else if (i > e2) {
            while (i <= e1) {
              unmount(c1[i], parentComponent, parentSuspense, true);
              i++;
            }
          } else {
            const s1 = i;
            const s2 = i;
            const keyToNewIndexMap = /* @__PURE__ */ new Map();
            for (i = s2; i <= e2; i++) {
              const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
              if (nextChild.key != null) {
                if (keyToNewIndexMap.has(nextChild.key)) {
                  warn(
                    `Duplicate keys found during update:`,
                    JSON.stringify(nextChild.key),
                    `Make sure keys are unique.`
                  );
                }
                keyToNewIndexMap.set(nextChild.key, i);
              }
            }
            let j;
            let patched = 0;
            const toBePatched = e2 - s2 + 1;
            let moved = false;
            let maxNewIndexSoFar = 0;
            const newIndexToOldIndexMap = new Array(toBePatched);
            for (i = 0; i < toBePatched; i++)
              newIndexToOldIndexMap[i] = 0;
            for (i = s1; i <= e1; i++) {
              const prevChild = c1[i];
              if (patched >= toBePatched) {
                unmount(prevChild, parentComponent, parentSuspense, true);
                continue;
              }
              let newIndex;
              if (prevChild.key != null) {
                newIndex = keyToNewIndexMap.get(prevChild.key);
              } else {
                for (j = s2; j <= e2; j++) {
                  if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                    newIndex = j;
                    break;
                  }
                }
              }
              if (newIndex === void 0) {
                unmount(prevChild, parentComponent, parentSuspense, true);
              } else {
                newIndexToOldIndexMap[newIndex - s2] = i + 1;
                if (newIndex >= maxNewIndexSoFar) {
                  maxNewIndexSoFar = newIndex;
                } else {
                  moved = true;
                }
                patch(
                  prevChild,
                  c2[newIndex],
                  container,
                  null,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized
                );
                patched++;
              }
            }
            const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : shared.EMPTY_ARR;
            j = increasingNewIndexSequence.length - 1;
            for (i = toBePatched - 1; i >= 0; i--) {
              const nextIndex = s2 + i;
              const nextChild = c2[nextIndex];
              const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
              if (newIndexToOldIndexMap[i] === 0) {
                patch(
                  null,
                  nextChild,
                  container,
                  anchor,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized
                );
              } else if (moved) {
                if (j < 0 || i !== increasingNewIndexSequence[j]) {
                  move(nextChild, container, anchor, 2);
                } else {
                  j--;
                }
              }
            }
          }
        };
        const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
          const { el, type, transition, children, shapeFlag } = vnode;
          if (shapeFlag & 6) {
            move(vnode.component.subTree, container, anchor, moveType);
            return;
          }
          if (shapeFlag & 128) {
            vnode.suspense.move(container, anchor, moveType);
            return;
          }
          if (shapeFlag & 64) {
            type.move(vnode, container, anchor, internals);
            return;
          }
          if (type === Fragment) {
            hostInsert(el, container, anchor);
            for (let i = 0; i < children.length; i++) {
              move(children[i], container, anchor, moveType);
            }
            hostInsert(vnode.anchor, container, anchor);
            return;
          }
          if (type === Static) {
            moveStaticNode(vnode, container, anchor);
            return;
          }
          const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
          if (needTransition) {
            if (moveType === 0) {
              transition.beforeEnter(el);
              hostInsert(el, container, anchor);
              queuePostRenderEffect(() => transition.enter(el), parentSuspense);
            } else {
              const { leave, delayLeave, afterLeave } = transition;
              const remove2 = () => hostInsert(el, container, anchor);
              const performLeave = () => {
                leave(el, () => {
                  remove2();
                  afterLeave && afterLeave();
                });
              };
              if (delayLeave) {
                delayLeave(el, remove2, performLeave);
              } else {
                performLeave();
              }
            }
          } else {
            hostInsert(el, container, anchor);
          }
        };
        const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
          const {
            type,
            props,
            ref,
            children,
            dynamicChildren,
            shapeFlag,
            patchFlag,
            dirs
          } = vnode;
          if (ref != null) {
            setRef(ref, null, parentSuspense, vnode, true);
          }
          if (shapeFlag & 256) {
            parentComponent.ctx.deactivate(vnode);
            return;
          }
          const shouldInvokeDirs = shapeFlag & 1 && dirs;
          const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
          let vnodeHook;
          if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
            invokeVNodeHook(vnodeHook, parentComponent, vnode);
          }
          if (shapeFlag & 6) {
            unmountComponent(vnode.component, parentSuspense, doRemove);
          } else {
            if (shapeFlag & 128) {
              vnode.suspense.unmount(parentSuspense, doRemove);
              return;
            }
            if (shouldInvokeDirs) {
              invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
            }
            if (shapeFlag & 64) {
              vnode.type.remove(
                vnode,
                parentComponent,
                parentSuspense,
                optimized,
                internals,
                doRemove
              );
            } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
            (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
              unmountChildren(
                dynamicChildren,
                parentComponent,
                parentSuspense,
                false,
                true
              );
            } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
              unmountChildren(children, parentComponent, parentSuspense);
            }
            if (doRemove) {
              remove(vnode);
            }
          }
          if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
            queuePostRenderEffect(() => {
              vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
              shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
            }, parentSuspense);
          }
        };
        const remove = (vnode) => {
          const { type, el, anchor, transition } = vnode;
          if (type === Fragment) {
            if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
              vnode.children.forEach((child) => {
                if (child.type === Comment) {
                  hostRemove(child.el);
                } else {
                  remove(child);
                }
              });
            } else {
              removeFragment(el, anchor);
            }
            return;
          }
          if (type === Static) {
            removeStaticNode(vnode);
            return;
          }
          const performRemove = () => {
            hostRemove(el);
            if (transition && !transition.persisted && transition.afterLeave) {
              transition.afterLeave();
            }
          };
          if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
            const { leave, delayLeave } = transition;
            const performLeave = () => leave(el, performRemove);
            if (delayLeave) {
              delayLeave(vnode.el, performRemove, performLeave);
            } else {
              performLeave();
            }
          } else {
            performRemove();
          }
        };
        const removeFragment = (cur, end) => {
          let next;
          while (cur !== end) {
            next = hostNextSibling(cur);
            hostRemove(cur);
            cur = next;
          }
          hostRemove(end);
        };
        const unmountComponent = (instance, parentSuspense, doRemove) => {
          if (instance.type.__hmrId) {
            unregisterHMR(instance);
          }
          const { bum, scope, update, subTree, um } = instance;
          if (bum) {
            shared.invokeArrayFns(bum);
          }
          scope.stop();
          if (update) {
            update.active = false;
            unmount(subTree, instance, parentSuspense, doRemove);
          }
          if (um) {
            queuePostRenderEffect(um, parentSuspense);
          }
          queuePostRenderEffect(() => {
            instance.isUnmounted = true;
          }, parentSuspense);
          if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
            parentSuspense.deps--;
            if (parentSuspense.deps === 0) {
              parentSuspense.resolve();
            }
          }
          {
            devtoolsComponentRemoved(instance);
          }
        };
        const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
          for (let i = start; i < children.length; i++) {
            unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
          }
        };
        const getNextHostNode = (vnode) => {
          if (vnode.shapeFlag & 6) {
            return getNextHostNode(vnode.component.subTree);
          }
          if (vnode.shapeFlag & 128) {
            return vnode.suspense.next();
          }
          return hostNextSibling(vnode.anchor || vnode.el);
        };
        const render = (vnode, container, isSVG) => {
          if (vnode == null) {
            if (container._vnode) {
              unmount(container._vnode, null, null, true);
            }
          } else {
            patch(container._vnode || null, vnode, container, null, null, null, isSVG);
          }
          flushPreFlushCbs();
          flushPostFlushCbs();
          container._vnode = vnode;
        };
        const internals = {
          p: patch,
          um: unmount,
          m: move,
          r: remove,
          mt: mountComponent,
          mc: mountChildren,
          pc: patchChildren,
          pbc: patchBlockChildren,
          n: getNextHostNode,
          o: options
        };
        let hydrate;
        let hydrateNode;
        if (createHydrationFns) {
          [hydrate, hydrateNode] = createHydrationFns(
            internals
          );
        }
        return {
          render,
          hydrate,
          createApp: createAppAPI(render, hydrate)
        };
      }
      function toggleRecurse({ effect, update }, allowed) {
        effect.allowRecurse = update.allowRecurse = allowed;
      }
      function traverseStaticChildren(n1, n2, shallow = false) {
        const ch1 = n1.children;
        const ch2 = n2.children;
        if (shared.isArray(ch1) && shared.isArray(ch2)) {
          for (let i = 0; i < ch1.length; i++) {
            const c1 = ch1[i];
            let c2 = ch2[i];
            if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
              if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
                c2 = ch2[i] = cloneIfMounted(ch2[i]);
                c2.el = c1.el;
              }
              if (!shallow)
                traverseStaticChildren(c1, c2);
            }
            if (c2.type === Text) {
              c2.el = c1.el;
            }
            if (c2.type === Comment && !c2.el) {
              c2.el = c1.el;
            }
          }
        }
      }
      function getSequence(arr) {
        const p = arr.slice();
        const result = [0];
        let i, j, u, v, c;
        const len = arr.length;
        for (i = 0; i < len; i++) {
          const arrI = arr[i];
          if (arrI !== 0) {
            j = result[result.length - 1];
            if (arr[j] < arrI) {
              p[i] = j;
              result.push(i);
              continue;
            }
            u = 0;
            v = result.length - 1;
            while (u < v) {
              c = u + v >> 1;
              if (arr[result[c]] < arrI) {
                u = c + 1;
              } else {
                v = c;
              }
            }
            if (arrI < arr[result[u]]) {
              if (u > 0) {
                p[i] = result[u - 1];
              }
              result[u] = i;
            }
          }
        }
        u = result.length;
        v = result[u - 1];
        while (u-- > 0) {
          result[u] = v;
          v = p[v];
        }
        return result;
      }
      var isTeleport = (type) => type.__isTeleport;
      var isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
      var isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
      var resolveTarget = (props, select) => {
        const targetSelector = props && props.to;
        if (shared.isString(targetSelector)) {
          if (!select) {
            warn(
              `Current renderer does not support string target for Teleports. (missing querySelector renderer option)`
            );
            return null;
          } else {
            const target = select(targetSelector);
            if (!target) {
              warn(
                `Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`
              );
            }
            return target;
          }
        } else {
          if (!targetSelector && !isTeleportDisabled(props)) {
            warn(`Invalid Teleport target: ${targetSelector}`);
          }
          return targetSelector;
        }
      };
      var TeleportImpl = {
        __isTeleport: true,
        process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
          const {
            mc: mountChildren,
            pc: patchChildren,
            pbc: patchBlockChildren,
            o: { insert, querySelector, createText, createComment }
          } = internals;
          const disabled = isTeleportDisabled(n2.props);
          let { shapeFlag, children, dynamicChildren } = n2;
          if (isHmrUpdating) {
            optimized = false;
            dynamicChildren = null;
          }
          if (n1 == null) {
            const placeholder = n2.el = createComment("teleport start");
            const mainAnchor = n2.anchor = createComment("teleport end");
            insert(placeholder, container, anchor);
            insert(mainAnchor, container, anchor);
            const target = n2.target = resolveTarget(n2.props, querySelector);
            const targetAnchor = n2.targetAnchor = createText("");
            if (target) {
              insert(targetAnchor, target);
              isSVG = isSVG || isTargetSVG(target);
            } else if (!disabled) {
              warn("Invalid Teleport target on mount:", target, `(${typeof target})`);
            }
            const mount = (container2, anchor2) => {
              if (shapeFlag & 16) {
                mountChildren(
                  children,
                  container2,
                  anchor2,
                  parentComponent,
                  parentSuspense,
                  isSVG,
                  slotScopeIds,
                  optimized
                );
              }
            };
            if (disabled) {
              mount(container, mainAnchor);
            } else if (target) {
              mount(target, targetAnchor);
            }
          } else {
            n2.el = n1.el;
            const mainAnchor = n2.anchor = n1.anchor;
            const target = n2.target = n1.target;
            const targetAnchor = n2.targetAnchor = n1.targetAnchor;
            const wasDisabled = isTeleportDisabled(n1.props);
            const currentContainer = wasDisabled ? container : target;
            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
            isSVG = isSVG || isTargetSVG(target);
            if (dynamicChildren) {
              patchBlockChildren(
                n1.dynamicChildren,
                dynamicChildren,
                currentContainer,
                parentComponent,
                parentSuspense,
                isSVG,
                slotScopeIds
              );
              traverseStaticChildren(n1, n2, true);
            } else if (!optimized) {
              patchChildren(
                n1,
                n2,
                currentContainer,
                currentAnchor,
                parentComponent,
                parentSuspense,
                isSVG,
                slotScopeIds,
                false
              );
            }
            if (disabled) {
              if (!wasDisabled) {
                moveTeleport(
                  n2,
                  container,
                  mainAnchor,
                  internals,
                  1
                );
              }
            } else {
              if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                const nextTarget = n2.target = resolveTarget(
                  n2.props,
                  querySelector
                );
                if (nextTarget) {
                  moveTeleport(
                    n2,
                    nextTarget,
                    null,
                    internals,
                    0
                  );
                } else {
                  warn(
                    "Invalid Teleport target on update:",
                    target,
                    `(${typeof target})`
                  );
                }
              } else if (wasDisabled) {
                moveTeleport(
                  n2,
                  target,
                  targetAnchor,
                  internals,
                  1
                );
              }
            }
          }
          updateCssVars(n2);
        },
        remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
          const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
          if (target) {
            hostRemove(targetAnchor);
          }
          if (doRemove || !isTeleportDisabled(props)) {
            hostRemove(anchor);
            if (shapeFlag & 16) {
              for (let i = 0; i < children.length; i++) {
                const child = children[i];
                unmount(
                  child,
                  parentComponent,
                  parentSuspense,
                  true,
                  !!child.dynamicChildren
                );
              }
            }
          }
        },
        move: moveTeleport,
        hydrate: hydrateTeleport
      };
      function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
        if (moveType === 0) {
          insert(vnode.targetAnchor, container, parentAnchor);
        }
        const { el, anchor, shapeFlag, children, props } = vnode;
        const isReorder = moveType === 2;
        if (isReorder) {
          insert(el, container, parentAnchor);
        }
        if (!isReorder || isTeleportDisabled(props)) {
          if (shapeFlag & 16) {
            for (let i = 0; i < children.length; i++) {
              move(
                children[i],
                container,
                parentAnchor,
                2
              );
            }
          }
        }
        if (isReorder) {
          insert(anchor, container, parentAnchor);
        }
      }
      function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
        o: { nextSibling, parentNode, querySelector }
      }, hydrateChildren) {
        const target = vnode.target = resolveTarget(
          vnode.props,
          querySelector
        );
        if (target) {
          const targetNode = target._lpa || target.firstChild;
          if (vnode.shapeFlag & 16) {
            if (isTeleportDisabled(vnode.props)) {
              vnode.anchor = hydrateChildren(
                nextSibling(node),
                vnode,
                parentNode(node),
                parentComponent,
                parentSuspense,
                slotScopeIds,
                optimized
              );
              vnode.targetAnchor = targetNode;
            } else {
              vnode.anchor = nextSibling(node);
              let targetAnchor = targetNode;
              while (targetAnchor) {
                targetAnchor = nextSibling(targetAnchor);
                if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
                  vnode.targetAnchor = targetAnchor;
                  target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                  break;
                }
              }
              hydrateChildren(
                targetNode,
                vnode,
                target,
                parentComponent,
                parentSuspense,
                slotScopeIds,
                optimized
              );
            }
          }
          updateCssVars(vnode);
        }
        return vnode.anchor && nextSibling(vnode.anchor);
      }
      var Teleport = TeleportImpl;
      function updateCssVars(vnode) {
        const ctx = vnode.ctx;
        if (ctx && ctx.ut) {
          let node = vnode.children[0].el;
          while (node !== vnode.targetAnchor) {
            if (node.nodeType === 1)
              node.setAttribute("data-v-owner", ctx.uid);
            node = node.nextSibling;
          }
          ctx.ut();
        }
      }
      var Fragment = Symbol.for("v-fgt");
      var Text = Symbol.for("v-txt");
      var Comment = Symbol.for("v-cmt");
      var Static = Symbol.for("v-stc");
      var blockStack = [];
      var currentBlock = null;
      function openBlock(disableTracking = false) {
        blockStack.push(currentBlock = disableTracking ? null : []);
      }
      function closeBlock() {
        blockStack.pop();
        currentBlock = blockStack[blockStack.length - 1] || null;
      }
      var isBlockTreeEnabled = 1;
      function setBlockTracking(value) {
        isBlockTreeEnabled += value;
      }
      function setupBlock(vnode) {
        vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || shared.EMPTY_ARR : null;
        closeBlock();
        if (isBlockTreeEnabled > 0 && currentBlock) {
          currentBlock.push(vnode);
        }
        return vnode;
      }
      function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
        return setupBlock(
          createBaseVNode(
            type,
            props,
            children,
            patchFlag,
            dynamicProps,
            shapeFlag,
            true
            /* isBlock */
          )
        );
      }
      function createBlock(type, props, children, patchFlag, dynamicProps) {
        return setupBlock(
          createVNode(
            type,
            props,
            children,
            patchFlag,
            dynamicProps,
            true
            /* isBlock: prevent a block from tracking itself */
          )
        );
      }
      function isVNode(value) {
        return value ? value.__v_isVNode === true : false;
      }
      function isSameVNodeType(n1, n2) {
        if (n2.shapeFlag & 6 && hmrDirtyComponents.has(n2.type)) {
          n1.shapeFlag &= ~256;
          n2.shapeFlag &= ~512;
          return false;
        }
        return n1.type === n2.type && n1.key === n2.key;
      }
      var vnodeArgsTransformer;
      function transformVNodeArgs(transformer) {
        vnodeArgsTransformer = transformer;
      }
      var createVNodeWithArgsTransform = (...args) => {
        return _createVNode(
          ...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args
        );
      };
      var InternalObjectKey = `__vInternal`;
      var normalizeKey = ({ key }) => key != null ? key : null;
      var normalizeRef = ({
        ref,
        ref_key,
        ref_for
      }) => {
        if (typeof ref === "number") {
          ref = "" + ref;
        }
        return ref != null ? shared.isString(ref) || reactivity.isRef(ref) || shared.isFunction(ref) ? { i: currentRenderingInstance, r: ref, k: ref_key, f: !!ref_for } : ref : null;
      };
      function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
        const vnode = {
          __v_isVNode: true,
          __v_skip: true,
          type,
          props,
          key: props && normalizeKey(props),
          ref: props && normalizeRef(props),
          scopeId: currentScopeId,
          slotScopeIds: null,
          children,
          component: null,
          suspense: null,
          ssContent: null,
          ssFallback: null,
          dirs: null,
          transition: null,
          el: null,
          anchor: null,
          target: null,
          targetAnchor: null,
          staticCount: 0,
          shapeFlag,
          patchFlag,
          dynamicProps,
          dynamicChildren: null,
          appContext: null,
          ctx: currentRenderingInstance
        };
        if (needFullChildrenNormalization) {
          normalizeChildren(vnode, children);
          if (shapeFlag & 128) {
            type.normalize(vnode);
          }
        } else if (children) {
          vnode.shapeFlag |= shared.isString(children) ? 8 : 16;
        }
        if (vnode.key !== vnode.key) {
          warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
        }
        if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
        !isBlockNode && // has current parent block
        currentBlock && // presence of a patch flag indicates this node needs patching on updates.
        // component nodes also should always be patched, because even if the
        // component doesn't need to update, it needs to persist the instance on to
        // the next vnode so that it can be properly unmounted later.
        (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
        // vnode should not be considered dynamic due to handler caching.
        vnode.patchFlag !== 32) {
          currentBlock.push(vnode);
        }
        return vnode;
      }
      var createVNode = createVNodeWithArgsTransform;
      function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
        if (!type || type === NULL_DYNAMIC_COMPONENT) {
          if (!type) {
            warn(`Invalid vnode type when creating vnode: ${type}.`);
          }
          type = Comment;
        }
        if (isVNode(type)) {
          const cloned = cloneVNode(
            type,
            props,
            true
            /* mergeRef: true */
          );
          if (children) {
            normalizeChildren(cloned, children);
          }
          if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
            if (cloned.shapeFlag & 6) {
              currentBlock[currentBlock.indexOf(type)] = cloned;
            } else {
              currentBlock.push(cloned);
            }
          }
          cloned.patchFlag |= -2;
          return cloned;
        }
        if (isClassComponent(type)) {
          type = type.__vccOpts;
        }
        if (props) {
          props = guardReactiveProps(props);
          let { class: klass, style } = props;
          if (klass && !shared.isString(klass)) {
            props.class = shared.normalizeClass(klass);
          }
          if (shared.isObject(style)) {
            if (reactivity.isProxy(style) && !shared.isArray(style)) {
              style = shared.extend({}, style);
            }
            props.style = shared.normalizeStyle(style);
          }
        }
        const shapeFlag = shared.isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : shared.isObject(type) ? 4 : shared.isFunction(type) ? 2 : 0;
        if (shapeFlag & 4 && reactivity.isProxy(type)) {
          type = reactivity.toRaw(type);
          warn(
            `Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`,
            `
Component that was made reactive: `,
            type
          );
        }
        return createBaseVNode(
          type,
          props,
          children,
          patchFlag,
          dynamicProps,
          shapeFlag,
          isBlockNode,
          true
        );
      }
      function guardReactiveProps(props) {
        if (!props)
          return null;
        return reactivity.isProxy(props) || InternalObjectKey in props ? shared.extend({}, props) : props;
      }
      function cloneVNode(vnode, extraProps, mergeRef = false) {
        const { props, ref, patchFlag, children } = vnode;
        const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
        const cloned = {
          __v_isVNode: true,
          __v_skip: true,
          type: vnode.type,
          props: mergedProps,
          key: mergedProps && normalizeKey(mergedProps),
          ref: extraProps && extraProps.ref ? (
            // #2078 in the case of <component :is="vnode" ref="extra"/>
            // if the vnode itself already has a ref, cloneVNode will need to merge
            // the refs so the single vnode can be set on multiple refs
            mergeRef && ref ? shared.isArray(ref) ? ref.concat(normalizeRef(extraProps)) : [ref, normalizeRef(extraProps)] : normalizeRef(extraProps)
          ) : ref,
          scopeId: vnode.scopeId,
          slotScopeIds: vnode.slotScopeIds,
          children: patchFlag === -1 && shared.isArray(children) ? children.map(deepCloneVNode) : children,
          target: vnode.target,
          targetAnchor: vnode.targetAnchor,
          staticCount: vnode.staticCount,
          shapeFlag: vnode.shapeFlag,
          // if the vnode is cloned with extra props, we can no longer assume its
          // existing patch flag to be reliable and need to add the FULL_PROPS flag.
          // note: preserve flag for fragments since they use the flag for children
          // fast paths only.
          patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
          dynamicProps: vnode.dynamicProps,
          dynamicChildren: vnode.dynamicChildren,
          appContext: vnode.appContext,
          dirs: vnode.dirs,
          transition: vnode.transition,
          // These should technically only be non-null on mounted VNodes. However,
          // they *should* be copied for kept-alive vnodes. So we just always copy
          // them since them being non-null during a mount doesn't affect the logic as
          // they will simply be overwritten.
          component: vnode.component,
          suspense: vnode.suspense,
          ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
          ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
          el: vnode.el,
          anchor: vnode.anchor,
          ctx: vnode.ctx,
          ce: vnode.ce
        };
        return cloned;
      }
      function deepCloneVNode(vnode) {
        const cloned = cloneVNode(vnode);
        if (shared.isArray(vnode.children)) {
          cloned.children = vnode.children.map(deepCloneVNode);
        }
        return cloned;
      }
      function createTextVNode(text = " ", flag = 0) {
        return createVNode(Text, null, text, flag);
      }
      function createStaticVNode(content, numberOfNodes) {
        const vnode = createVNode(Static, null, content);
        vnode.staticCount = numberOfNodes;
        return vnode;
      }
      function createCommentVNode(text = "", asBlock = false) {
        return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
      }
      function normalizeVNode(child) {
        if (child == null || typeof child === "boolean") {
          return createVNode(Comment);
        } else if (shared.isArray(child)) {
          return createVNode(
            Fragment,
            null,
            // #3666, avoid reference pollution when reusing vnode
            child.slice()
          );
        } else if (typeof child === "object") {
          return cloneIfMounted(child);
        } else {
          return createVNode(Text, null, String(child));
        }
      }
      function cloneIfMounted(child) {
        return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
      }
      function normalizeChildren(vnode, children) {
        let type = 0;
        const { shapeFlag } = vnode;
        if (children == null) {
          children = null;
        } else if (shared.isArray(children)) {
          type = 16;
        } else if (typeof children === "object") {
          if (shapeFlag & (1 | 64)) {
            const slot = children.default;
            if (slot) {
              slot._c && (slot._d = false);
              normalizeChildren(vnode, slot());
              slot._c && (slot._d = true);
            }
            return;
          } else {
            type = 32;
            const slotFlag = children._;
            if (!slotFlag && !(InternalObjectKey in children)) {
              children._ctx = currentRenderingInstance;
            } else if (slotFlag === 3 && currentRenderingInstance) {
              if (currentRenderingInstance.slots._ === 1) {
                children._ = 1;
              } else {
                children._ = 2;
                vnode.patchFlag |= 1024;
              }
            }
          }
        } else if (shared.isFunction(children)) {
          children = { default: children, _ctx: currentRenderingInstance };
          type = 32;
        } else {
          children = String(children);
          if (shapeFlag & 64) {
            type = 16;
            children = [createTextVNode(children)];
          } else {
            type = 8;
          }
        }
        vnode.children = children;
        vnode.shapeFlag |= type;
      }
      function mergeProps(...args) {
        const ret = {};
        for (let i = 0; i < args.length; i++) {
          const toMerge = args[i];
          for (const key in toMerge) {
            if (key === "class") {
              if (ret.class !== toMerge.class) {
                ret.class = shared.normalizeClass([ret.class, toMerge.class]);
              }
            } else if (key === "style") {
              ret.style = shared.normalizeStyle([ret.style, toMerge.style]);
            } else if (shared.isOn(key)) {
              const existing = ret[key];
              const incoming = toMerge[key];
              if (incoming && existing !== incoming && !(shared.isArray(existing) && existing.includes(incoming))) {
                ret[key] = existing ? [].concat(existing, incoming) : incoming;
              }
            } else if (key !== "") {
              ret[key] = toMerge[key];
            }
          }
        }
        return ret;
      }
      function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
        callWithAsyncErrorHandling(hook, instance, 7, [
          vnode,
          prevVNode
        ]);
      }
      var emptyAppContext = createAppContext();
      var uid = 0;
      function createComponentInstance(vnode, parent, suspense) {
        const type = vnode.type;
        const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
        const instance = {
          uid: uid++,
          vnode,
          type,
          parent,
          appContext,
          root: null,
          // to be immediately set
          next: null,
          subTree: null,
          // will be set synchronously right after creation
          effect: null,
          update: null,
          // will be set synchronously right after creation
          scope: new reactivity.EffectScope(
            true
            /* detached */
          ),
          render: null,
          proxy: null,
          exposed: null,
          exposeProxy: null,
          withProxy: null,
          provides: parent ? parent.provides : Object.create(appContext.provides),
          accessCache: null,
          renderCache: [],
          // local resolved assets
          components: null,
          directives: null,
          // resolved props and emits options
          propsOptions: normalizePropsOptions(type, appContext),
          emitsOptions: normalizeEmitsOptions(type, appContext),
          // emit
          emit: null,
          // to be set immediately
          emitted: null,
          // props default value
          propsDefaults: shared.EMPTY_OBJ,
          // inheritAttrs
          inheritAttrs: type.inheritAttrs,
          // state
          ctx: shared.EMPTY_OBJ,
          data: shared.EMPTY_OBJ,
          props: shared.EMPTY_OBJ,
          attrs: shared.EMPTY_OBJ,
          slots: shared.EMPTY_OBJ,
          refs: shared.EMPTY_OBJ,
          setupState: shared.EMPTY_OBJ,
          setupContext: null,
          attrsProxy: null,
          slotsProxy: null,
          // suspense related
          suspense,
          suspenseId: suspense ? suspense.pendingId : 0,
          asyncDep: null,
          asyncResolved: false,
          // lifecycle hooks
          // not using enums here because it results in computed properties
          isMounted: false,
          isUnmounted: false,
          isDeactivated: false,
          bc: null,
          c: null,
          bm: null,
          m: null,
          bu: null,
          u: null,
          um: null,
          bum: null,
          da: null,
          a: null,
          rtg: null,
          rtc: null,
          ec: null,
          sp: null
        };
        {
          instance.ctx = createDevRenderContext(instance);
        }
        instance.root = parent ? parent.root : instance;
        instance.emit = emit.bind(null, instance);
        if (vnode.ce) {
          vnode.ce(instance);
        }
        return instance;
      }
      var currentInstance = null;
      var getCurrentInstance = () => currentInstance || currentRenderingInstance;
      var internalSetCurrentInstance;
      var globalCurrentInstanceSetters;
      var settersKey = "__VUE_INSTANCE_SETTERS__";
      {
        if (!(globalCurrentInstanceSetters = shared.getGlobalThis()[settersKey])) {
          globalCurrentInstanceSetters = shared.getGlobalThis()[settersKey] = [];
        }
        globalCurrentInstanceSetters.push((i) => currentInstance = i);
        internalSetCurrentInstance = (instance) => {
          if (globalCurrentInstanceSetters.length > 1) {
            globalCurrentInstanceSetters.forEach((s) => s(instance));
          } else {
            globalCurrentInstanceSetters[0](instance);
          }
        };
      }
      var setCurrentInstance = (instance) => {
        internalSetCurrentInstance(instance);
        instance.scope.on();
      };
      var unsetCurrentInstance = () => {
        currentInstance && currentInstance.scope.off();
        internalSetCurrentInstance(null);
      };
      var isBuiltInTag = /* @__PURE__ */ shared.makeMap("slot,component");
      function validateComponentName(name, config) {
        const appIsNativeTag = config.isNativeTag || shared.NO;
        if (isBuiltInTag(name) || appIsNativeTag(name)) {
          warn(
            "Do not use built-in or reserved HTML elements as component id: " + name
          );
        }
      }
      function isStatefulComponent(instance) {
        return instance.vnode.shapeFlag & 4;
      }
      var isInSSRComponentSetup = false;
      function setupComponent(instance, isSSR = false) {
        isInSSRComponentSetup = isSSR;
        const { props, children } = instance.vnode;
        const isStateful = isStatefulComponent(instance);
        initProps(instance, props, isStateful, isSSR);
        initSlots(instance, children);
        const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
        isInSSRComponentSetup = false;
        return setupResult;
      }
      function setupStatefulComponent(instance, isSSR) {
        var _a;
        const Component = instance.type;
        {
          if (Component.name) {
            validateComponentName(Component.name, instance.appContext.config);
          }
          if (Component.components) {
            const names = Object.keys(Component.components);
            for (let i = 0; i < names.length; i++) {
              validateComponentName(names[i], instance.appContext.config);
            }
          }
          if (Component.directives) {
            const names = Object.keys(Component.directives);
            for (let i = 0; i < names.length; i++) {
              validateDirectiveName(names[i]);
            }
          }
          if (Component.compilerOptions && isRuntimeOnly()) {
            warn(
              `"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`
            );
          }
        }
        instance.accessCache = /* @__PURE__ */ Object.create(null);
        instance.proxy = reactivity.markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
        {
          exposePropsOnRenderContext(instance);
        }
        const { setup } = Component;
        if (setup) {
          const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
          setCurrentInstance(instance);
          reactivity.pauseTracking();
          const setupResult = callWithErrorHandling(
            setup,
            instance,
            0,
            [reactivity.shallowReadonly(instance.props), setupContext]
          );
          reactivity.resetTracking();
          unsetCurrentInstance();
          if (shared.isPromise(setupResult)) {
            setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
            if (isSSR) {
              return setupResult.then((resolvedResult) => {
                handleSetupResult(instance, resolvedResult, isSSR);
              }).catch((e) => {
                handleError(e, instance, 0);
              });
            } else {
              instance.asyncDep = setupResult;
              if (!instance.suspense) {
                const name = (_a = Component.name) != null ? _a : "Anonymous";
                warn(
                  `Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`
                );
              }
            }
          } else {
            handleSetupResult(instance, setupResult, isSSR);
          }
        } else {
          finishComponentSetup(instance, isSSR);
        }
      }
      function handleSetupResult(instance, setupResult, isSSR) {
        if (shared.isFunction(setupResult)) {
          if (instance.type.__ssrInlineRender) {
            instance.ssrRender = setupResult;
          } else {
            instance.render = setupResult;
          }
        } else if (shared.isObject(setupResult)) {
          if (isVNode(setupResult)) {
            warn(
              `setup() should not return VNodes directly - return a render function instead.`
            );
          }
          {
            instance.devtoolsRawSetupState = setupResult;
          }
          instance.setupState = reactivity.proxyRefs(setupResult);
          {
            exposeSetupStateOnRenderContext(instance);
          }
        } else if (setupResult !== void 0) {
          warn(
            `setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`
          );
        }
        finishComponentSetup(instance, isSSR);
      }
      var compile;
      var installWithProxy;
      function registerRuntimeCompiler(_compile) {
        compile = _compile;
        installWithProxy = (i) => {
          if (i.render._rc) {
            i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
          }
        };
      }
      var isRuntimeOnly = () => !compile;
      function finishComponentSetup(instance, isSSR, skipOptions) {
        const Component = instance.type;
        if (!instance.render) {
          if (!isSSR && compile && !Component.render) {
            const template2 = Component.template || resolveMergedOptions(instance).template;
            if (template2) {
              {
                startMeasure(instance, `compile`);
              }
              const { isCustomElement, compilerOptions } = instance.appContext.config;
              const { delimiters, compilerOptions: componentCompilerOptions } = Component;
              const finalCompilerOptions = shared.extend(
                shared.extend(
                  {
                    isCustomElement,
                    delimiters
                  },
                  compilerOptions
                ),
                componentCompilerOptions
              );
              Component.render = compile(template2, finalCompilerOptions);
              {
                endMeasure(instance, `compile`);
              }
            }
          }
          instance.render = Component.render || shared.NOOP;
          if (installWithProxy) {
            installWithProxy(instance);
          }
        }
        {
          setCurrentInstance(instance);
          reactivity.pauseTracking();
          applyOptions(instance);
          reactivity.resetTracking();
          unsetCurrentInstance();
        }
        if (!Component.render && instance.render === shared.NOOP && !isSSR) {
          if (!compile && Component.template) {
            warn(
              `Component provided template option but runtime compilation is not supported in this build of Vue.`
              /* should not happen */
            );
          } else {
            warn(`Component is missing template or render function.`);
          }
        }
      }
      function getAttrsProxy(instance) {
        return instance.attrsProxy || (instance.attrsProxy = new Proxy(
          instance.attrs,
          {
            get(target, key) {
              markAttrsAccessed();
              reactivity.track(instance, "get", "$attrs");
              return target[key];
            },
            set() {
              warn(`setupContext.attrs is readonly.`);
              return false;
            },
            deleteProperty() {
              warn(`setupContext.attrs is readonly.`);
              return false;
            }
          }
        ));
      }
      function getSlotsProxy(instance) {
        return instance.slotsProxy || (instance.slotsProxy = new Proxy(instance.slots, {
          get(target, key) {
            reactivity.track(instance, "get", "$slots");
            return target[key];
          }
        }));
      }
      function createSetupContext(instance) {
        const expose = (exposed) => {
          {
            if (instance.exposed) {
              warn(`expose() should be called only once per setup().`);
            }
            if (exposed != null) {
              let exposedType = typeof exposed;
              if (exposedType === "object") {
                if (shared.isArray(exposed)) {
                  exposedType = "array";
                } else if (reactivity.isRef(exposed)) {
                  exposedType = "ref";
                }
              }
              if (exposedType !== "object") {
                warn(
                  `expose() should be passed a plain object, received ${exposedType}.`
                );
              }
            }
          }
          instance.exposed = exposed || {};
        };
        {
          return Object.freeze({
            get attrs() {
              return getAttrsProxy(instance);
            },
            get slots() {
              return getSlotsProxy(instance);
            },
            get emit() {
              return (event, ...args) => instance.emit(event, ...args);
            },
            expose
          });
        }
      }
      function getExposeProxy(instance) {
        if (instance.exposed) {
          return instance.exposeProxy || (instance.exposeProxy = new Proxy(reactivity.proxyRefs(reactivity.markRaw(instance.exposed)), {
            get(target, key) {
              if (key in target) {
                return target[key];
              } else if (key in publicPropertiesMap) {
                return publicPropertiesMap[key](instance);
              }
            },
            has(target, key) {
              return key in target || key in publicPropertiesMap;
            }
          }));
        }
      }
      var classifyRE = /(?:^|[-_])(\w)/g;
      var classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
      function getComponentName(Component, includeInferred = true) {
        return shared.isFunction(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
      }
      function formatComponentName(instance, Component, isRoot = false) {
        let name = getComponentName(Component);
        if (!name && Component.__file) {
          const match = Component.__file.match(/([^/\\]+)\.\w+$/);
          if (match) {
            name = match[1];
          }
        }
        if (!name && instance && instance.parent) {
          const inferFromRegistry = (registry) => {
            for (const key in registry) {
              if (registry[key] === Component) {
                return key;
              }
            }
          };
          name = inferFromRegistry(
            instance.components || instance.parent.type.components
          ) || inferFromRegistry(instance.appContext.components);
        }
        return name ? classify(name) : isRoot ? `App` : `Anonymous`;
      }
      function isClassComponent(value) {
        return shared.isFunction(value) && "__vccOpts" in value;
      }
      var computed = (getterOrOptions, debugOptions) => {
        return reactivity.computed(getterOrOptions, debugOptions, isInSSRComponentSetup);
      };
      function h(type, propsOrChildren, children) {
        const l = arguments.length;
        if (l === 2) {
          if (shared.isObject(propsOrChildren) && !shared.isArray(propsOrChildren)) {
            if (isVNode(propsOrChildren)) {
              return createVNode(type, null, [propsOrChildren]);
            }
            return createVNode(type, propsOrChildren);
          } else {
            return createVNode(type, null, propsOrChildren);
          }
        } else {
          if (l > 3) {
            children = Array.prototype.slice.call(arguments, 2);
          } else if (l === 3 && isVNode(children)) {
            children = [children];
          }
          return createVNode(type, propsOrChildren, children);
        }
      }
      var ssrContextKey = Symbol.for("v-scx");
      var useSSRContext = () => {
        {
          const ctx = inject(ssrContextKey);
          if (!ctx) {
            warn(
              `Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`
            );
          }
          return ctx;
        }
      };
      function isShallow(value) {
        return !!(value && value["__v_isShallow"]);
      }
      function initCustomFormatter() {
        if (typeof window === "undefined") {
          return;
        }
        const vueStyle = { style: "color:#3ba776" };
        const numberStyle = { style: "color:#0b1bc9" };
        const stringStyle = { style: "color:#b62e24" };
        const keywordStyle = { style: "color:#9d288c" };
        const formatter = {
          header(obj) {
            if (!shared.isObject(obj)) {
              return null;
            }
            if (obj.__isVue) {
              return ["div", vueStyle, `VueInstance`];
            } else if (reactivity.isRef(obj)) {
              return [
                "div",
                {},
                ["span", vueStyle, genRefFlag(obj)],
                "<",
                formatValue(obj.value),
                `>`
              ];
            } else if (reactivity.isReactive(obj)) {
              return [
                "div",
                {},
                ["span", vueStyle, isShallow(obj) ? "ShallowReactive" : "Reactive"],
                "<",
                formatValue(obj),
                `>${reactivity.isReadonly(obj) ? ` (readonly)` : ``}`
              ];
            } else if (reactivity.isReadonly(obj)) {
              return [
                "div",
                {},
                ["span", vueStyle, isShallow(obj) ? "ShallowReadonly" : "Readonly"],
                "<",
                formatValue(obj),
                ">"
              ];
            }
            return null;
          },
          hasBody(obj) {
            return obj && obj.__isVue;
          },
          body(obj) {
            if (obj && obj.__isVue) {
              return [
                "div",
                {},
                ...formatInstance(obj.$)
              ];
            }
          }
        };
        function formatInstance(instance) {
          const blocks = [];
          if (instance.type.props && instance.props) {
            blocks.push(createInstanceBlock("props", reactivity.toRaw(instance.props)));
          }
          if (instance.setupState !== shared.EMPTY_OBJ) {
            blocks.push(createInstanceBlock("setup", instance.setupState));
          }
          if (instance.data !== shared.EMPTY_OBJ) {
            blocks.push(createInstanceBlock("data", reactivity.toRaw(instance.data)));
          }
          const computed2 = extractKeys(instance, "computed");
          if (computed2) {
            blocks.push(createInstanceBlock("computed", computed2));
          }
          const injected = extractKeys(instance, "inject");
          if (injected) {
            blocks.push(createInstanceBlock("injected", injected));
          }
          blocks.push([
            "div",
            {},
            [
              "span",
              {
                style: keywordStyle.style + ";opacity:0.66"
              },
              "$ (internal): "
            ],
            ["object", { object: instance }]
          ]);
          return blocks;
        }
        function createInstanceBlock(type, target) {
          target = shared.extend({}, target);
          if (!Object.keys(target).length) {
            return ["span", {}];
          }
          return [
            "div",
            { style: "line-height:1.25em;margin-bottom:0.6em" },
            [
              "div",
              {
                style: "color:#476582"
              },
              type
            ],
            [
              "div",
              {
                style: "padding-left:1.25em"
              },
              ...Object.keys(target).map((key) => {
                return [
                  "div",
                  {},
                  ["span", keywordStyle, key + ": "],
                  formatValue(target[key], false)
                ];
              })
            ]
          ];
        }
        function formatValue(v, asRaw = true) {
          if (typeof v === "number") {
            return ["span", numberStyle, v];
          } else if (typeof v === "string") {
            return ["span", stringStyle, JSON.stringify(v)];
          } else if (typeof v === "boolean") {
            return ["span", keywordStyle, v];
          } else if (shared.isObject(v)) {
            return ["object", { object: asRaw ? reactivity.toRaw(v) : v }];
          } else {
            return ["span", stringStyle, String(v)];
          }
        }
        function extractKeys(instance, type) {
          const Comp = instance.type;
          if (shared.isFunction(Comp)) {
            return;
          }
          const extracted = {};
          for (const key in instance.ctx) {
            if (isKeyOfType(Comp, key, type)) {
              extracted[key] = instance.ctx[key];
            }
          }
          return extracted;
        }
        function isKeyOfType(Comp, key, type) {
          const opts = Comp[type];
          if (shared.isArray(opts) && opts.includes(key) || shared.isObject(opts) && key in opts) {
            return true;
          }
          if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
            return true;
          }
          if (Comp.mixins && Comp.mixins.some((m) => isKeyOfType(m, key, type))) {
            return true;
          }
        }
        function genRefFlag(v) {
          if (isShallow(v)) {
            return `ShallowRef`;
          }
          if (v.effect) {
            return `ComputedRef`;
          }
          return `Ref`;
        }
        if (window.devtoolsFormatters) {
          window.devtoolsFormatters.push(formatter);
        } else {
          window.devtoolsFormatters = [formatter];
        }
      }
      function withMemo(memo, render, cache, index) {
        const cached = cache[index];
        if (cached && isMemoSame(cached, memo)) {
          return cached;
        }
        const ret = render();
        ret.memo = memo.slice();
        return cache[index] = ret;
      }
      function isMemoSame(cached, memo) {
        const prev = cached.memo;
        if (prev.length != memo.length) {
          return false;
        }
        for (let i = 0; i < prev.length; i++) {
          if (shared.hasChanged(prev[i], memo[i])) {
            return false;
          }
        }
        if (isBlockTreeEnabled > 0 && currentBlock) {
          currentBlock.push(cached);
        }
        return true;
      }
      var version = "3.3.4";
      var _ssrUtils = {
        createComponentInstance,
        setupComponent,
        renderComponentRoot,
        setCurrentRenderingInstance,
        isVNode,
        normalizeVNode
      };
      var ssrUtils = _ssrUtils;
      var resolveFilter = null;
      var compatUtils = null;
      exports.EffectScope = reactivity.EffectScope;
      exports.ReactiveEffect = reactivity.ReactiveEffect;
      exports.customRef = reactivity.customRef;
      exports.effect = reactivity.effect;
      exports.effectScope = reactivity.effectScope;
      exports.getCurrentScope = reactivity.getCurrentScope;
      exports.isProxy = reactivity.isProxy;
      exports.isReactive = reactivity.isReactive;
      exports.isReadonly = reactivity.isReadonly;
      exports.isRef = reactivity.isRef;
      exports.isShallow = reactivity.isShallow;
      exports.markRaw = reactivity.markRaw;
      exports.onScopeDispose = reactivity.onScopeDispose;
      exports.proxyRefs = reactivity.proxyRefs;
      exports.reactive = reactivity.reactive;
      exports.readonly = reactivity.readonly;
      exports.ref = reactivity.ref;
      exports.shallowReactive = reactivity.shallowReactive;
      exports.shallowReadonly = reactivity.shallowReadonly;
      exports.shallowRef = reactivity.shallowRef;
      exports.stop = reactivity.stop;
      exports.toRaw = reactivity.toRaw;
      exports.toRef = reactivity.toRef;
      exports.toRefs = reactivity.toRefs;
      exports.toValue = reactivity.toValue;
      exports.triggerRef = reactivity.triggerRef;
      exports.unref = reactivity.unref;
      exports.camelize = shared.camelize;
      exports.capitalize = shared.capitalize;
      exports.normalizeClass = shared.normalizeClass;
      exports.normalizeProps = shared.normalizeProps;
      exports.normalizeStyle = shared.normalizeStyle;
      exports.toDisplayString = shared.toDisplayString;
      exports.toHandlerKey = shared.toHandlerKey;
      exports.BaseTransition = BaseTransition;
      exports.BaseTransitionPropsValidators = BaseTransitionPropsValidators;
      exports.Comment = Comment;
      exports.Fragment = Fragment;
      exports.KeepAlive = KeepAlive;
      exports.Static = Static;
      exports.Suspense = Suspense;
      exports.Teleport = Teleport;
      exports.Text = Text;
      exports.assertNumber = assertNumber;
      exports.callWithAsyncErrorHandling = callWithAsyncErrorHandling;
      exports.callWithErrorHandling = callWithErrorHandling;
      exports.cloneVNode = cloneVNode;
      exports.compatUtils = compatUtils;
      exports.computed = computed;
      exports.createBlock = createBlock;
      exports.createCommentVNode = createCommentVNode;
      exports.createElementBlock = createElementBlock;
      exports.createElementVNode = createBaseVNode;
      exports.createHydrationRenderer = createHydrationRenderer;
      exports.createPropsRestProxy = createPropsRestProxy;
      exports.createRenderer = createRenderer;
      exports.createSlots = createSlots;
      exports.createStaticVNode = createStaticVNode;
      exports.createTextVNode = createTextVNode;
      exports.createVNode = createVNode;
      exports.defineAsyncComponent = defineAsyncComponent;
      exports.defineComponent = defineComponent;
      exports.defineEmits = defineEmits;
      exports.defineExpose = defineExpose;
      exports.defineModel = defineModel;
      exports.defineOptions = defineOptions;
      exports.defineProps = defineProps;
      exports.defineSlots = defineSlots;
      exports.getCurrentInstance = getCurrentInstance;
      exports.getTransitionRawChildren = getTransitionRawChildren;
      exports.guardReactiveProps = guardReactiveProps;
      exports.h = h;
      exports.handleError = handleError;
      exports.hasInjectionContext = hasInjectionContext;
      exports.initCustomFormatter = initCustomFormatter;
      exports.inject = inject;
      exports.isMemoSame = isMemoSame;
      exports.isRuntimeOnly = isRuntimeOnly;
      exports.isVNode = isVNode;
      exports.mergeDefaults = mergeDefaults;
      exports.mergeModels = mergeModels;
      exports.mergeProps = mergeProps;
      exports.nextTick = nextTick;
      exports.onActivated = onActivated;
      exports.onBeforeMount = onBeforeMount;
      exports.onBeforeUnmount = onBeforeUnmount;
      exports.onBeforeUpdate = onBeforeUpdate;
      exports.onDeactivated = onDeactivated;
      exports.onErrorCaptured = onErrorCaptured;
      exports.onMounted = onMounted;
      exports.onRenderTracked = onRenderTracked;
      exports.onRenderTriggered = onRenderTriggered;
      exports.onServerPrefetch = onServerPrefetch;
      exports.onUnmounted = onUnmounted;
      exports.onUpdated = onUpdated;
      exports.openBlock = openBlock;
      exports.popScopeId = popScopeId;
      exports.provide = provide;
      exports.pushScopeId = pushScopeId;
      exports.queuePostFlushCb = queuePostFlushCb;
      exports.registerRuntimeCompiler = registerRuntimeCompiler;
      exports.renderList = renderList;
      exports.renderSlot = renderSlot;
      exports.resolveComponent = resolveComponent;
      exports.resolveDirective = resolveDirective;
      exports.resolveDynamicComponent = resolveDynamicComponent;
      exports.resolveFilter = resolveFilter;
      exports.resolveTransitionHooks = resolveTransitionHooks;
      exports.setBlockTracking = setBlockTracking;
      exports.setDevtoolsHook = setDevtoolsHook;
      exports.setTransitionHooks = setTransitionHooks;
      exports.ssrContextKey = ssrContextKey;
      exports.ssrUtils = ssrUtils;
      exports.toHandlers = toHandlers;
      exports.transformVNodeArgs = transformVNodeArgs;
      exports.useAttrs = useAttrs;
      exports.useModel = useModel;
      exports.useSSRContext = useSSRContext;
      exports.useSlots = useSlots;
      exports.useTransitionState = useTransitionState;
      exports.version = version;
      exports.warn = warn;
      exports.watch = watch;
      exports.watchEffect = watchEffect;
      exports.watchPostEffect = watchPostEffect;
      exports.watchSyncEffect = watchSyncEffect;
      exports.withAsyncContext = withAsyncContext;
      exports.withCtx = withCtx;
      exports.withDefaults = withDefaults;
      exports.withDirectives = withDirectives;
      exports.withMemo = withMemo;
      exports.withScopeId = withScopeId;
    }
  });

  // node_modules/@vue/runtime-core/index.js
  var require_runtime_core = __commonJS({
    "node_modules/@vue/runtime-core/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_runtime_core_cjs();
      }
    }
  });

  // node_modules/@vue/runtime-dom/dist/runtime-dom.cjs.js
  var require_runtime_dom_cjs = __commonJS({
    "node_modules/@vue/runtime-dom/dist/runtime-dom.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var runtimeCore = require_runtime_core();
      var shared = require_shared();
      var svgNS = "http://www.w3.org/2000/svg";
      var doc = typeof document !== "undefined" ? document : null;
      var templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
      var nodeOps = {
        insert: (child, parent, anchor) => {
          parent.insertBefore(child, anchor || null);
        },
        remove: (child) => {
          const parent = child.parentNode;
          if (parent) {
            parent.removeChild(child);
          }
        },
        createElement: (tag, isSVG, is, props) => {
          const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
          if (tag === "select" && props && props.multiple != null) {
            el.setAttribute("multiple", props.multiple);
          }
          return el;
        },
        createText: (text) => doc.createTextNode(text),
        createComment: (text) => doc.createComment(text),
        setText: (node, text) => {
          node.nodeValue = text;
        },
        setElementText: (el, text) => {
          el.textContent = text;
        },
        parentNode: (node) => node.parentNode,
        nextSibling: (node) => node.nextSibling,
        querySelector: (selector) => doc.querySelector(selector),
        setScopeId(el, id) {
          el.setAttribute(id, "");
        },
        // __UNSAFE__
        // Reason: innerHTML.
        // Static content here can only come from compiled templates.
        // As long as the user only uses trusted templates, this is safe.
        insertStaticContent(content, parent, anchor, isSVG, start, end) {
          const before = anchor ? anchor.previousSibling : parent.lastChild;
          if (start && (start === end || start.nextSibling)) {
            while (true) {
              parent.insertBefore(start.cloneNode(true), anchor);
              if (start === end || !(start = start.nextSibling))
                break;
            }
          } else {
            templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
            const template2 = templateContainer.content;
            if (isSVG) {
              const wrapper = template2.firstChild;
              while (wrapper.firstChild) {
                template2.appendChild(wrapper.firstChild);
              }
              template2.removeChild(wrapper);
            }
            parent.insertBefore(template2, anchor);
          }
          return [
            // first
            before ? before.nextSibling : parent.firstChild,
            // last
            anchor ? anchor.previousSibling : parent.lastChild
          ];
        }
      };
      function patchClass(el, value, isSVG) {
        const transitionClasses = el._vtc;
        if (transitionClasses) {
          value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
        }
        if (value == null) {
          el.removeAttribute("class");
        } else if (isSVG) {
          el.setAttribute("class", value);
        } else {
          el.className = value;
        }
      }
      function patchStyle(el, prev, next) {
        const style = el.style;
        const isCssString = shared.isString(next);
        if (next && !isCssString) {
          if (prev && !shared.isString(prev)) {
            for (const key in prev) {
              if (next[key] == null) {
                setStyle(style, key, "");
              }
            }
          }
          for (const key in next) {
            setStyle(style, key, next[key]);
          }
        } else {
          const currentDisplay = style.display;
          if (isCssString) {
            if (prev !== next) {
              style.cssText = next;
            }
          } else if (prev) {
            el.removeAttribute("style");
          }
          if ("_vod" in el) {
            style.display = currentDisplay;
          }
        }
      }
      var semicolonRE = /[^\\];\s*$/;
      var importantRE = /\s*!important$/;
      function setStyle(style, name, val) {
        if (shared.isArray(val)) {
          val.forEach((v) => setStyle(style, name, v));
        } else {
          if (val == null)
            val = "";
          {
            if (semicolonRE.test(val)) {
              runtimeCore.warn(
                `Unexpected semicolon at the end of '${name}' style value: '${val}'`
              );
            }
          }
          if (name.startsWith("--")) {
            style.setProperty(name, val);
          } else {
            const prefixed = autoPrefix(style, name);
            if (importantRE.test(val)) {
              style.setProperty(
                shared.hyphenate(prefixed),
                val.replace(importantRE, ""),
                "important"
              );
            } else {
              style[prefixed] = val;
            }
          }
        }
      }
      var prefixes = ["Webkit", "Moz", "ms"];
      var prefixCache = {};
      function autoPrefix(style, rawName) {
        const cached = prefixCache[rawName];
        if (cached) {
          return cached;
        }
        let name = runtimeCore.camelize(rawName);
        if (name !== "filter" && name in style) {
          return prefixCache[rawName] = name;
        }
        name = shared.capitalize(name);
        for (let i = 0; i < prefixes.length; i++) {
          const prefixed = prefixes[i] + name;
          if (prefixed in style) {
            return prefixCache[rawName] = prefixed;
          }
        }
        return rawName;
      }
      var xlinkNS = "http://www.w3.org/1999/xlink";
      function patchAttr(el, key, value, isSVG, instance) {
        if (isSVG && key.startsWith("xlink:")) {
          if (value == null) {
            el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
          } else {
            el.setAttributeNS(xlinkNS, key, value);
          }
        } else {
          const isBoolean = shared.isSpecialBooleanAttr(key);
          if (value == null || isBoolean && !shared.includeBooleanAttr(value)) {
            el.removeAttribute(key);
          } else {
            el.setAttribute(key, isBoolean ? "" : value);
          }
        }
      }
      function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
        if (key === "innerHTML" || key === "textContent") {
          if (prevChildren) {
            unmountChildren(prevChildren, parentComponent, parentSuspense);
          }
          el[key] = value == null ? "" : value;
          return;
        }
        const tag = el.tagName;
        if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
        !tag.includes("-")) {
          el._value = value;
          const oldValue = tag === "OPTION" ? el.getAttribute("value") : el.value;
          const newValue = value == null ? "" : value;
          if (oldValue !== newValue) {
            el.value = newValue;
          }
          if (value == null) {
            el.removeAttribute(key);
          }
          return;
        }
        let needRemove = false;
        if (value === "" || value == null) {
          const type = typeof el[key];
          if (type === "boolean") {
            value = shared.includeBooleanAttr(value);
          } else if (value == null && type === "string") {
            value = "";
            needRemove = true;
          } else if (type === "number") {
            value = 0;
            needRemove = true;
          }
        }
        try {
          el[key] = value;
        } catch (e) {
          if (!needRemove) {
            runtimeCore.warn(
              `Failed setting prop "${key}" on <${tag.toLowerCase()}>: value ${value} is invalid.`,
              e
            );
          }
        }
        needRemove && el.removeAttribute(key);
      }
      function addEventListener(el, event, handler, options) {
        el.addEventListener(event, handler, options);
      }
      function removeEventListener(el, event, handler, options) {
        el.removeEventListener(event, handler, options);
      }
      function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
        const invokers = el._vei || (el._vei = {});
        const existingInvoker = invokers[rawName];
        if (nextValue && existingInvoker) {
          existingInvoker.value = nextValue;
        } else {
          const [name, options] = parseName(rawName);
          if (nextValue) {
            const invoker = invokers[rawName] = createInvoker(nextValue, instance);
            addEventListener(el, name, invoker, options);
          } else if (existingInvoker) {
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = void 0;
          }
        }
      }
      var optionsModifierRE = /(?:Once|Passive|Capture)$/;
      function parseName(name) {
        let options;
        if (optionsModifierRE.test(name)) {
          options = {};
          let m;
          while (m = name.match(optionsModifierRE)) {
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
          }
        }
        const event = name[2] === ":" ? name.slice(3) : shared.hyphenate(name.slice(2));
        return [event, options];
      }
      var cachedNow = 0;
      var p = /* @__PURE__ */ Promise.resolve();
      var getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
      function createInvoker(initialValue, instance) {
        const invoker = (e) => {
          if (!e._vts) {
            e._vts = Date.now();
          } else if (e._vts <= invoker.attached) {
            return;
          }
          runtimeCore.callWithAsyncErrorHandling(
            patchStopImmediatePropagation(e, invoker.value),
            instance,
            5,
            [e]
          );
        };
        invoker.value = initialValue;
        invoker.attached = getNow();
        return invoker;
      }
      function patchStopImmediatePropagation(e, value) {
        if (shared.isArray(value)) {
          const originalStop = e.stopImmediatePropagation;
          e.stopImmediatePropagation = () => {
            originalStop.call(e);
            e._stopped = true;
          };
          return value.map((fn) => (e2) => !e2._stopped && fn && fn(e2));
        } else {
          return value;
        }
      }
      var nativeOnRE = /^on[a-z]/;
      var patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
        if (key === "class") {
          patchClass(el, nextValue, isSVG);
        } else if (key === "style") {
          patchStyle(el, prevValue, nextValue);
        } else if (shared.isOn(key)) {
          if (!shared.isModelListener(key)) {
            patchEvent(el, key, prevValue, nextValue, parentComponent);
          }
        } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
          patchDOMProp(
            el,
            key,
            nextValue,
            prevChildren,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        } else {
          if (key === "true-value") {
            el._trueValue = nextValue;
          } else if (key === "false-value") {
            el._falseValue = nextValue;
          }
          patchAttr(el, key, nextValue, isSVG);
        }
      };
      function shouldSetAsProp(el, key, value, isSVG) {
        if (isSVG) {
          if (key === "innerHTML" || key === "textContent") {
            return true;
          }
          if (key in el && nativeOnRE.test(key) && shared.isFunction(value)) {
            return true;
          }
          return false;
        }
        if (key === "spellcheck" || key === "draggable" || key === "translate") {
          return false;
        }
        if (key === "form") {
          return false;
        }
        if (key === "list" && el.tagName === "INPUT") {
          return false;
        }
        if (key === "type" && el.tagName === "TEXTAREA") {
          return false;
        }
        if (nativeOnRE.test(key) && shared.isString(value)) {
          return false;
        }
        return key in el;
      }
      function defineCustomElement(options, hydrate2) {
        const Comp = runtimeCore.defineComponent(options);
        class VueCustomElement extends VueElement {
          constructor(initialProps) {
            super(Comp, initialProps, hydrate2);
          }
        }
        VueCustomElement.def = Comp;
        return VueCustomElement;
      }
      var defineSSRCustomElement = (options) => {
        return defineCustomElement(options, hydrate);
      };
      var BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
      };
      var VueElement = class extends BaseClass {
        constructor(_def, _props = {}, hydrate2) {
          super();
          this._def = _def;
          this._props = _props;
          this._instance = null;
          this._connected = false;
          this._resolved = false;
          this._numberProps = null;
          if (this.shadowRoot && hydrate2) {
            hydrate2(this._createVNode(), this.shadowRoot);
          } else {
            if (this.shadowRoot) {
              runtimeCore.warn(
                `Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \`defineSSRCustomElement\`.`
              );
            }
            this.attachShadow({ mode: "open" });
            if (!this._def.__asyncLoader) {
              this._resolveProps(this._def);
            }
          }
        }
        connectedCallback() {
          this._connected = true;
          if (!this._instance) {
            if (this._resolved) {
              this._update();
            } else {
              this._resolveDef();
            }
          }
        }
        disconnectedCallback() {
          this._connected = false;
          runtimeCore.nextTick(() => {
            if (!this._connected) {
              render(null, this.shadowRoot);
              this._instance = null;
            }
          });
        }
        /**
         * resolve inner component definition (handle possible async component)
         */
        _resolveDef() {
          this._resolved = true;
          for (let i = 0; i < this.attributes.length; i++) {
            this._setAttr(this.attributes[i].name);
          }
          new MutationObserver((mutations) => {
            for (const m of mutations) {
              this._setAttr(m.attributeName);
            }
          }).observe(this, { attributes: true });
          const resolve = (def, isAsync = false) => {
            const { props, styles } = def;
            let numberProps;
            if (props && !shared.isArray(props)) {
              for (const key in props) {
                const opt = props[key];
                if (opt === Number || opt && opt.type === Number) {
                  if (key in this._props) {
                    this._props[key] = shared.toNumber(this._props[key]);
                  }
                  (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[shared.camelize(key)] = true;
                }
              }
            }
            this._numberProps = numberProps;
            if (isAsync) {
              this._resolveProps(def);
            }
            this._applyStyles(styles);
            this._update();
          };
          const asyncDef = this._def.__asyncLoader;
          if (asyncDef) {
            asyncDef().then((def) => resolve(def, true));
          } else {
            resolve(this._def);
          }
        }
        _resolveProps(def) {
          const { props } = def;
          const declaredPropKeys = shared.isArray(props) ? props : Object.keys(props || {});
          for (const key of Object.keys(this)) {
            if (key[0] !== "_" && declaredPropKeys.includes(key)) {
              this._setProp(key, this[key], true, false);
            }
          }
          for (const key of declaredPropKeys.map(shared.camelize)) {
            Object.defineProperty(this, key, {
              get() {
                return this._getProp(key);
              },
              set(val) {
                this._setProp(key, val);
              }
            });
          }
        }
        _setAttr(key) {
          let value = this.getAttribute(key);
          const camelKey = shared.camelize(key);
          if (this._numberProps && this._numberProps[camelKey]) {
            value = shared.toNumber(value);
          }
          this._setProp(camelKey, value, false);
        }
        /**
         * @internal
         */
        _getProp(key) {
          return this._props[key];
        }
        /**
         * @internal
         */
        _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
          if (val !== this._props[key]) {
            this._props[key] = val;
            if (shouldUpdate && this._instance) {
              this._update();
            }
            if (shouldReflect) {
              if (val === true) {
                this.setAttribute(shared.hyphenate(key), "");
              } else if (typeof val === "string" || typeof val === "number") {
                this.setAttribute(shared.hyphenate(key), val + "");
              } else if (!val) {
                this.removeAttribute(shared.hyphenate(key));
              }
            }
          }
        }
        _update() {
          render(this._createVNode(), this.shadowRoot);
        }
        _createVNode() {
          const vnode = runtimeCore.createVNode(this._def, shared.extend({}, this._props));
          if (!this._instance) {
            vnode.ce = (instance) => {
              this._instance = instance;
              instance.isCE = true;
              {
                instance.ceReload = (newStyles) => {
                  if (this._styles) {
                    this._styles.forEach((s) => this.shadowRoot.removeChild(s));
                    this._styles.length = 0;
                  }
                  this._applyStyles(newStyles);
                  this._instance = null;
                  this._update();
                };
              }
              const dispatch = (event, args) => {
                this.dispatchEvent(
                  new CustomEvent(event, {
                    detail: args
                  })
                );
              };
              instance.emit = (event, ...args) => {
                dispatch(event, args);
                if (shared.hyphenate(event) !== event) {
                  dispatch(shared.hyphenate(event), args);
                }
              };
              let parent = this;
              while (parent = parent && (parent.parentNode || parent.host)) {
                if (parent instanceof VueElement) {
                  instance.parent = parent._instance;
                  instance.provides = parent._instance.provides;
                  break;
                }
              }
            };
          }
          return vnode;
        }
        _applyStyles(styles) {
          if (styles) {
            styles.forEach((css2) => {
              const s = document.createElement("style");
              s.textContent = css2;
              this.shadowRoot.appendChild(s);
              {
                (this._styles || (this._styles = [])).push(s);
              }
            });
          }
        }
      };
      function useCssModule(name = "$style") {
        {
          const instance = runtimeCore.getCurrentInstance();
          if (!instance) {
            runtimeCore.warn(`useCssModule must be called inside setup()`);
            return shared.EMPTY_OBJ;
          }
          const modules = instance.type.__cssModules;
          if (!modules) {
            runtimeCore.warn(`Current instance does not have CSS modules injected.`);
            return shared.EMPTY_OBJ;
          }
          const mod = modules[name];
          if (!mod) {
            runtimeCore.warn(`Current instance does not have CSS module named "${name}".`);
            return shared.EMPTY_OBJ;
          }
          return mod;
        }
      }
      function useCssVars(getter) {
        return;
      }
      var TRANSITION = "transition";
      var ANIMATION = "animation";
      var Transition = (props, { slots }) => runtimeCore.h(runtimeCore.BaseTransition, resolveTransitionProps(props), slots);
      Transition.displayName = "Transition";
      var DOMTransitionPropsValidators = {
        name: String,
        type: String,
        css: {
          type: Boolean,
          default: true
        },
        duration: [String, Number, Object],
        enterFromClass: String,
        enterActiveClass: String,
        enterToClass: String,
        appearFromClass: String,
        appearActiveClass: String,
        appearToClass: String,
        leaveFromClass: String,
        leaveActiveClass: String,
        leaveToClass: String
      };
      var TransitionPropsValidators = Transition.props = /* @__PURE__ */ shared.extend(
        {},
        runtimeCore.BaseTransitionPropsValidators,
        DOMTransitionPropsValidators
      );
      var callHook = (hook, args = []) => {
        if (shared.isArray(hook)) {
          hook.forEach((h2) => h2(...args));
        } else if (hook) {
          hook(...args);
        }
      };
      var hasExplicitCallback = (hook) => {
        return hook ? shared.isArray(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
      };
      function resolveTransitionProps(rawProps) {
        const baseProps = {};
        for (const key in rawProps) {
          if (!(key in DOMTransitionPropsValidators)) {
            baseProps[key] = rawProps[key];
          }
        }
        if (rawProps.css === false) {
          return baseProps;
        }
        const {
          name = "v",
          type,
          duration,
          enterFromClass = `${name}-enter-from`,
          enterActiveClass = `${name}-enter-active`,
          enterToClass = `${name}-enter-to`,
          appearFromClass = enterFromClass,
          appearActiveClass = enterActiveClass,
          appearToClass = enterToClass,
          leaveFromClass = `${name}-leave-from`,
          leaveActiveClass = `${name}-leave-active`,
          leaveToClass = `${name}-leave-to`
        } = rawProps;
        const durations = normalizeDuration(duration);
        const enterDuration = durations && durations[0];
        const leaveDuration = durations && durations[1];
        const {
          onBeforeEnter,
          onEnter,
          onEnterCancelled,
          onLeave,
          onLeaveCancelled,
          onBeforeAppear = onBeforeEnter,
          onAppear = onEnter,
          onAppearCancelled = onEnterCancelled
        } = baseProps;
        const finishEnter = (el, isAppear, done) => {
          removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
          removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
          done && done();
        };
        const finishLeave = (el, done) => {
          el._isLeaving = false;
          removeTransitionClass(el, leaveFromClass);
          removeTransitionClass(el, leaveToClass);
          removeTransitionClass(el, leaveActiveClass);
          done && done();
        };
        const makeEnterHook = (isAppear) => {
          return (el, done) => {
            const hook = isAppear ? onAppear : onEnter;
            const resolve = () => finishEnter(el, isAppear, done);
            callHook(hook, [el, resolve]);
            nextFrame(() => {
              removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
              addTransitionClass(el, isAppear ? appearToClass : enterToClass);
              if (!hasExplicitCallback(hook)) {
                whenTransitionEnds(el, type, enterDuration, resolve);
              }
            });
          };
        };
        return shared.extend(baseProps, {
          onBeforeEnter(el) {
            callHook(onBeforeEnter, [el]);
            addTransitionClass(el, enterFromClass);
            addTransitionClass(el, enterActiveClass);
          },
          onBeforeAppear(el) {
            callHook(onBeforeAppear, [el]);
            addTransitionClass(el, appearFromClass);
            addTransitionClass(el, appearActiveClass);
          },
          onEnter: makeEnterHook(false),
          onAppear: makeEnterHook(true),
          onLeave(el, done) {
            el._isLeaving = true;
            const resolve = () => finishLeave(el, done);
            addTransitionClass(el, leaveFromClass);
            forceReflow();
            addTransitionClass(el, leaveActiveClass);
            nextFrame(() => {
              if (!el._isLeaving) {
                return;
              }
              removeTransitionClass(el, leaveFromClass);
              addTransitionClass(el, leaveToClass);
              if (!hasExplicitCallback(onLeave)) {
                whenTransitionEnds(el, type, leaveDuration, resolve);
              }
            });
            callHook(onLeave, [el, resolve]);
          },
          onEnterCancelled(el) {
            finishEnter(el, false);
            callHook(onEnterCancelled, [el]);
          },
          onAppearCancelled(el) {
            finishEnter(el, true);
            callHook(onAppearCancelled, [el]);
          },
          onLeaveCancelled(el) {
            finishLeave(el);
            callHook(onLeaveCancelled, [el]);
          }
        });
      }
      function normalizeDuration(duration) {
        if (duration == null) {
          return null;
        } else if (shared.isObject(duration)) {
          return [NumberOf(duration.enter), NumberOf(duration.leave)];
        } else {
          const n = NumberOf(duration);
          return [n, n];
        }
      }
      function NumberOf(val) {
        const res = shared.toNumber(val);
        {
          runtimeCore.assertNumber(res, "<transition> explicit duration");
        }
        return res;
      }
      function addTransitionClass(el, cls) {
        cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
        (el._vtc || (el._vtc = /* @__PURE__ */ new Set())).add(cls);
      }
      function removeTransitionClass(el, cls) {
        cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
        const { _vtc } = el;
        if (_vtc) {
          _vtc.delete(cls);
          if (!_vtc.size) {
            el._vtc = void 0;
          }
        }
      }
      function nextFrame(cb) {
        requestAnimationFrame(() => {
          requestAnimationFrame(cb);
        });
      }
      var endId = 0;
      function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
        const id = el._endId = ++endId;
        const resolveIfNotStale = () => {
          if (id === el._endId) {
            resolve();
          }
        };
        if (explicitTimeout) {
          return setTimeout(resolveIfNotStale, explicitTimeout);
        }
        const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
        if (!type) {
          return resolve();
        }
        const endEvent = type + "end";
        let ended = 0;
        const end = () => {
          el.removeEventListener(endEvent, onEnd);
          resolveIfNotStale();
        };
        const onEnd = (e) => {
          if (e.target === el && ++ended >= propCount) {
            end();
          }
        };
        setTimeout(() => {
          if (ended < propCount) {
            end();
          }
        }, timeout + 1);
        el.addEventListener(endEvent, onEnd);
      }
      function getTransitionInfo(el, expectedType) {
        const styles = window.getComputedStyle(el);
        const getStyleProperties = (key) => (styles[key] || "").split(", ");
        const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
        const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
        const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
        const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
        const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
        const animationTimeout = getTimeout(animationDelays, animationDurations);
        let type = null;
        let timeout = 0;
        let propCount = 0;
        if (expectedType === TRANSITION) {
          if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
          }
        } else if (expectedType === ANIMATION) {
          if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
          }
        } else {
          timeout = Math.max(transitionTimeout, animationTimeout);
          type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
          propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
        }
        const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(
          getStyleProperties(`${TRANSITION}Property`).toString()
        );
        return {
          type,
          timeout,
          propCount,
          hasTransform
        };
      }
      function getTimeout(delays, durations) {
        while (delays.length < durations.length) {
          delays = delays.concat(delays);
        }
        return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
      }
      function toMs(s) {
        return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
      }
      function forceReflow() {
        return document.body.offsetHeight;
      }
      var positionMap = /* @__PURE__ */ new WeakMap();
      var newPositionMap = /* @__PURE__ */ new WeakMap();
      var TransitionGroupImpl = {
        name: "TransitionGroup",
        props: /* @__PURE__ */ shared.extend({}, TransitionPropsValidators, {
          tag: String,
          moveClass: String
        }),
        setup(props, { slots }) {
          const instance = runtimeCore.getCurrentInstance();
          const state = runtimeCore.useTransitionState();
          let prevChildren;
          let children;
          runtimeCore.onUpdated(() => {
            if (!prevChildren.length) {
              return;
            }
            const moveClass = props.moveClass || `${props.name || "v"}-move`;
            if (!hasCSSTransform(
              prevChildren[0].el,
              instance.vnode.el,
              moveClass
            )) {
              return;
            }
            prevChildren.forEach(callPendingCbs);
            prevChildren.forEach(recordPosition);
            const movedChildren = prevChildren.filter(applyTranslation);
            forceReflow();
            movedChildren.forEach((c) => {
              const el = c.el;
              const style = el.style;
              addTransitionClass(el, moveClass);
              style.transform = style.webkitTransform = style.transitionDuration = "";
              const cb = el._moveCb = (e) => {
                if (e && e.target !== el) {
                  return;
                }
                if (!e || /transform$/.test(e.propertyName)) {
                  el.removeEventListener("transitionend", cb);
                  el._moveCb = null;
                  removeTransitionClass(el, moveClass);
                }
              };
              el.addEventListener("transitionend", cb);
            });
          });
          return () => {
            const rawProps = runtimeCore.toRaw(props);
            const cssTransitionProps = resolveTransitionProps(rawProps);
            let tag = rawProps.tag || runtimeCore.Fragment;
            prevChildren = children;
            children = slots.default ? runtimeCore.getTransitionRawChildren(slots.default()) : [];
            for (let i = 0; i < children.length; i++) {
              const child = children[i];
              if (child.key != null) {
                runtimeCore.setTransitionHooks(
                  child,
                  runtimeCore.resolveTransitionHooks(child, cssTransitionProps, state, instance)
                );
              } else {
                runtimeCore.warn(`<TransitionGroup> children must be keyed.`);
              }
            }
            if (prevChildren) {
              for (let i = 0; i < prevChildren.length; i++) {
                const child = prevChildren[i];
                runtimeCore.setTransitionHooks(
                  child,
                  runtimeCore.resolveTransitionHooks(child, cssTransitionProps, state, instance)
                );
                positionMap.set(child, child.el.getBoundingClientRect());
              }
            }
            return runtimeCore.createVNode(tag, null, children);
          };
        }
      };
      var removeMode = (props) => delete props.mode;
      /* @__PURE__ */ removeMode(TransitionGroupImpl.props);
      var TransitionGroup = TransitionGroupImpl;
      function callPendingCbs(c) {
        const el = c.el;
        if (el._moveCb) {
          el._moveCb();
        }
        if (el._enterCb) {
          el._enterCb();
        }
      }
      function recordPosition(c) {
        newPositionMap.set(c, c.el.getBoundingClientRect());
      }
      function applyTranslation(c) {
        const oldPos = positionMap.get(c);
        const newPos = newPositionMap.get(c);
        const dx = oldPos.left - newPos.left;
        const dy = oldPos.top - newPos.top;
        if (dx || dy) {
          const s = c.el.style;
          s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
          s.transitionDuration = "0s";
          return c;
        }
      }
      function hasCSSTransform(el, root, moveClass) {
        const clone = el.cloneNode();
        if (el._vtc) {
          el._vtc.forEach((cls) => {
            cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
          });
        }
        moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
        clone.style.display = "none";
        const container = root.nodeType === 1 ? root : root.parentNode;
        container.appendChild(clone);
        const { hasTransform } = getTransitionInfo(clone);
        container.removeChild(clone);
        return hasTransform;
      }
      var getModelAssigner = (vnode) => {
        const fn = vnode.props["onUpdate:modelValue"] || false;
        return shared.isArray(fn) ? (value) => shared.invokeArrayFns(fn, value) : fn;
      };
      function onCompositionStart(e) {
        e.target.composing = true;
      }
      function onCompositionEnd(e) {
        const target = e.target;
        if (target.composing) {
          target.composing = false;
          target.dispatchEvent(new Event("input"));
        }
      }
      var vModelText = {
        created(el, { modifiers: { lazy, trim, number } }, vnode) {
          el._assign = getModelAssigner(vnode);
          const castToNumber = number || vnode.props && vnode.props.type === "number";
          addEventListener(el, lazy ? "change" : "input", (e) => {
            if (e.target.composing)
              return;
            let domValue = el.value;
            if (trim) {
              domValue = domValue.trim();
            }
            if (castToNumber) {
              domValue = shared.looseToNumber(domValue);
            }
            el._assign(domValue);
          });
          if (trim) {
            addEventListener(el, "change", () => {
              el.value = el.value.trim();
            });
          }
          if (!lazy) {
            addEventListener(el, "compositionstart", onCompositionStart);
            addEventListener(el, "compositionend", onCompositionEnd);
            addEventListener(el, "change", onCompositionEnd);
          }
        },
        // set value on mounted so it's after min/max for type="range"
        mounted(el, { value }) {
          el.value = value == null ? "" : value;
        },
        beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {
          el._assign = getModelAssigner(vnode);
          if (el.composing)
            return;
          if (document.activeElement === el && el.type !== "range") {
            if (lazy) {
              return;
            }
            if (trim && el.value.trim() === value) {
              return;
            }
            if ((number || el.type === "number") && shared.looseToNumber(el.value) === value) {
              return;
            }
          }
          const newValue = value == null ? "" : value;
          if (el.value !== newValue) {
            el.value = newValue;
          }
        }
      };
      var vModelCheckbox = {
        // #4096 array checkboxes need to be deep traversed
        deep: true,
        created(el, _, vnode) {
          el._assign = getModelAssigner(vnode);
          addEventListener(el, "change", () => {
            const modelValue = el._modelValue;
            const elementValue = getValue(el);
            const checked = el.checked;
            const assign = el._assign;
            if (shared.isArray(modelValue)) {
              const index = shared.looseIndexOf(modelValue, elementValue);
              const found = index !== -1;
              if (checked && !found) {
                assign(modelValue.concat(elementValue));
              } else if (!checked && found) {
                const filtered = [...modelValue];
                filtered.splice(index, 1);
                assign(filtered);
              }
            } else if (shared.isSet(modelValue)) {
              const cloned = new Set(modelValue);
              if (checked) {
                cloned.add(elementValue);
              } else {
                cloned.delete(elementValue);
              }
              assign(cloned);
            } else {
              assign(getCheckboxValue(el, checked));
            }
          });
        },
        // set initial checked on mount to wait for true-value/false-value
        mounted: setChecked,
        beforeUpdate(el, binding, vnode) {
          el._assign = getModelAssigner(vnode);
          setChecked(el, binding, vnode);
        }
      };
      function setChecked(el, { value, oldValue }, vnode) {
        el._modelValue = value;
        if (shared.isArray(value)) {
          el.checked = shared.looseIndexOf(value, vnode.props.value) > -1;
        } else if (shared.isSet(value)) {
          el.checked = value.has(vnode.props.value);
        } else if (value !== oldValue) {
          el.checked = shared.looseEqual(value, getCheckboxValue(el, true));
        }
      }
      var vModelRadio = {
        created(el, { value }, vnode) {
          el.checked = shared.looseEqual(value, vnode.props.value);
          el._assign = getModelAssigner(vnode);
          addEventListener(el, "change", () => {
            el._assign(getValue(el));
          });
        },
        beforeUpdate(el, { value, oldValue }, vnode) {
          el._assign = getModelAssigner(vnode);
          if (value !== oldValue) {
            el.checked = shared.looseEqual(value, vnode.props.value);
          }
        }
      };
      var vModelSelect = {
        // <select multiple> value need to be deep traversed
        deep: true,
        created(el, { value, modifiers: { number } }, vnode) {
          const isSetModel = shared.isSet(value);
          addEventListener(el, "change", () => {
            const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map(
              (o) => number ? shared.looseToNumber(getValue(o)) : getValue(o)
            );
            el._assign(
              el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]
            );
          });
          el._assign = getModelAssigner(vnode);
        },
        // set value in mounted & updated because <select> relies on its children
        // <option>s.
        mounted(el, { value }) {
          setSelected(el, value);
        },
        beforeUpdate(el, _binding, vnode) {
          el._assign = getModelAssigner(vnode);
        },
        updated(el, { value }) {
          setSelected(el, value);
        }
      };
      function setSelected(el, value) {
        const isMultiple = el.multiple;
        if (isMultiple && !shared.isArray(value) && !shared.isSet(value)) {
          runtimeCore.warn(
            `<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`
          );
          return;
        }
        for (let i = 0, l = el.options.length; i < l; i++) {
          const option = el.options[i];
          const optionValue = getValue(option);
          if (isMultiple) {
            if (shared.isArray(value)) {
              option.selected = shared.looseIndexOf(value, optionValue) > -1;
            } else {
              option.selected = value.has(optionValue);
            }
          } else {
            if (shared.looseEqual(getValue(option), value)) {
              if (el.selectedIndex !== i)
                el.selectedIndex = i;
              return;
            }
          }
        }
        if (!isMultiple && el.selectedIndex !== -1) {
          el.selectedIndex = -1;
        }
      }
      function getValue(el) {
        return "_value" in el ? el._value : el.value;
      }
      function getCheckboxValue(el, checked) {
        const key = checked ? "_trueValue" : "_falseValue";
        return key in el ? el[key] : checked;
      }
      var vModelDynamic = {
        created(el, binding, vnode) {
          callModelHook(el, binding, vnode, null, "created");
        },
        mounted(el, binding, vnode) {
          callModelHook(el, binding, vnode, null, "mounted");
        },
        beforeUpdate(el, binding, vnode, prevVNode) {
          callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
        },
        updated(el, binding, vnode, prevVNode) {
          callModelHook(el, binding, vnode, prevVNode, "updated");
        }
      };
      function resolveDynamicModel(tagName, type) {
        switch (tagName) {
          case "SELECT":
            return vModelSelect;
          case "TEXTAREA":
            return vModelText;
          default:
            switch (type) {
              case "checkbox":
                return vModelCheckbox;
              case "radio":
                return vModelRadio;
              default:
                return vModelText;
            }
        }
      }
      function callModelHook(el, binding, vnode, prevVNode, hook) {
        const modelToUse = resolveDynamicModel(
          el.tagName,
          vnode.props && vnode.props.type
        );
        const fn = modelToUse[hook];
        fn && fn(el, binding, vnode, prevVNode);
      }
      function initVModelForSSR() {
        vModelText.getSSRProps = ({ value }) => ({ value });
        vModelRadio.getSSRProps = ({ value }, vnode) => {
          if (vnode.props && shared.looseEqual(vnode.props.value, value)) {
            return { checked: true };
          }
        };
        vModelCheckbox.getSSRProps = ({ value }, vnode) => {
          if (shared.isArray(value)) {
            if (vnode.props && shared.looseIndexOf(value, vnode.props.value) > -1) {
              return { checked: true };
            }
          } else if (shared.isSet(value)) {
            if (vnode.props && value.has(vnode.props.value)) {
              return { checked: true };
            }
          } else if (value) {
            return { checked: true };
          }
        };
        vModelDynamic.getSSRProps = (binding, vnode) => {
          if (typeof vnode.type !== "string") {
            return;
          }
          const modelToUse = resolveDynamicModel(
            // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
            vnode.type.toUpperCase(),
            vnode.props && vnode.props.type
          );
          if (modelToUse.getSSRProps) {
            return modelToUse.getSSRProps(binding, vnode);
          }
        };
      }
      var systemModifiers = ["ctrl", "shift", "alt", "meta"];
      var modifierGuards = {
        stop: (e) => e.stopPropagation(),
        prevent: (e) => e.preventDefault(),
        self: (e) => e.target !== e.currentTarget,
        ctrl: (e) => !e.ctrlKey,
        shift: (e) => !e.shiftKey,
        alt: (e) => !e.altKey,
        meta: (e) => !e.metaKey,
        left: (e) => "button" in e && e.button !== 0,
        middle: (e) => "button" in e && e.button !== 1,
        right: (e) => "button" in e && e.button !== 2,
        exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
      };
      var withModifiers = (fn, modifiers) => {
        return (event, ...args) => {
          for (let i = 0; i < modifiers.length; i++) {
            const guard = modifierGuards[modifiers[i]];
            if (guard && guard(event, modifiers))
              return;
          }
          return fn(event, ...args);
        };
      };
      var keyNames = {
        esc: "escape",
        space: " ",
        up: "arrow-up",
        left: "arrow-left",
        right: "arrow-right",
        down: "arrow-down",
        delete: "backspace"
      };
      var withKeys = (fn, modifiers) => {
        return (event) => {
          if (!("key" in event)) {
            return;
          }
          const eventKey = shared.hyphenate(event.key);
          if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
            return fn(event);
          }
        };
      };
      var vShow = {
        beforeMount(el, { value }, { transition }) {
          el._vod = el.style.display === "none" ? "" : el.style.display;
          if (transition && value) {
            transition.beforeEnter(el);
          } else {
            setDisplay(el, value);
          }
        },
        mounted(el, { value }, { transition }) {
          if (transition && value) {
            transition.enter(el);
          }
        },
        updated(el, { value, oldValue }, { transition }) {
          if (!value === !oldValue)
            return;
          if (transition) {
            if (value) {
              transition.beforeEnter(el);
              setDisplay(el, true);
              transition.enter(el);
            } else {
              transition.leave(el, () => {
                setDisplay(el, false);
              });
            }
          } else {
            setDisplay(el, value);
          }
        },
        beforeUnmount(el, { value }) {
          setDisplay(el, value);
        }
      };
      function setDisplay(el, value) {
        el.style.display = value ? el._vod : "none";
      }
      function initVShowForSSR() {
        vShow.getSSRProps = ({ value }) => {
          if (!value) {
            return { style: { display: "none" } };
          }
        };
      }
      var rendererOptions = /* @__PURE__ */ shared.extend({ patchProp }, nodeOps);
      var renderer;
      var enabledHydration = false;
      function ensureRenderer() {
        return renderer || (renderer = runtimeCore.createRenderer(rendererOptions));
      }
      function ensureHydrationRenderer() {
        renderer = enabledHydration ? renderer : runtimeCore.createHydrationRenderer(rendererOptions);
        enabledHydration = true;
        return renderer;
      }
      var render = (...args) => {
        ensureRenderer().render(...args);
      };
      var hydrate = (...args) => {
        ensureHydrationRenderer().hydrate(...args);
      };
      var createApp2 = (...args) => {
        const app2 = ensureRenderer().createApp(...args);
        {
          injectNativeTagCheck(app2);
          injectCompilerOptionsCheck(app2);
        }
        const { mount } = app2;
        app2.mount = (containerOrSelector) => {
          const container = normalizeContainer(containerOrSelector);
          if (!container)
            return;
          const component = app2._component;
          if (!shared.isFunction(component) && !component.render && !component.template) {
            component.template = container.innerHTML;
          }
          container.innerHTML = "";
          const proxy = mount(container, false, container instanceof SVGElement);
          if (container instanceof Element) {
            container.removeAttribute("v-cloak");
            container.setAttribute("data-v-app", "");
          }
          return proxy;
        };
        return app2;
      };
      var createSSRApp = (...args) => {
        const app2 = ensureHydrationRenderer().createApp(...args);
        {
          injectNativeTagCheck(app2);
          injectCompilerOptionsCheck(app2);
        }
        const { mount } = app2;
        app2.mount = (containerOrSelector) => {
          const container = normalizeContainer(containerOrSelector);
          if (container) {
            return mount(container, true, container instanceof SVGElement);
          }
        };
        return app2;
      };
      function injectNativeTagCheck(app2) {
        Object.defineProperty(app2.config, "isNativeTag", {
          value: (tag) => shared.isHTMLTag(tag) || shared.isSVGTag(tag),
          writable: false
        });
      }
      function injectCompilerOptionsCheck(app2) {
        if (runtimeCore.isRuntimeOnly()) {
          const isCustomElement = app2.config.isCustomElement;
          Object.defineProperty(app2.config, "isCustomElement", {
            get() {
              return isCustomElement;
            },
            set() {
              runtimeCore.warn(
                `The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`
              );
            }
          });
          const compilerOptions = app2.config.compilerOptions;
          const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
          Object.defineProperty(app2.config, "compilerOptions", {
            get() {
              runtimeCore.warn(msg);
              return compilerOptions;
            },
            set() {
              runtimeCore.warn(msg);
            }
          });
        }
      }
      function normalizeContainer(container) {
        if (shared.isString(container)) {
          const res = document.querySelector(container);
          if (!res) {
            runtimeCore.warn(
              `Failed to mount app: mount target selector "${container}" returned null.`
            );
          }
          return res;
        }
        if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
          runtimeCore.warn(
            `mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`
          );
        }
        return container;
      }
      var ssrDirectiveInitialized = false;
      var initDirectivesForSSR = () => {
        if (!ssrDirectiveInitialized) {
          ssrDirectiveInitialized = true;
          initVModelForSSR();
          initVShowForSSR();
        }
      };
      exports.Transition = Transition;
      exports.TransitionGroup = TransitionGroup;
      exports.VueElement = VueElement;
      exports.createApp = createApp2;
      exports.createSSRApp = createSSRApp;
      exports.defineCustomElement = defineCustomElement;
      exports.defineSSRCustomElement = defineSSRCustomElement;
      exports.hydrate = hydrate;
      exports.initDirectivesForSSR = initDirectivesForSSR;
      exports.render = render;
      exports.useCssModule = useCssModule;
      exports.useCssVars = useCssVars;
      exports.vModelCheckbox = vModelCheckbox;
      exports.vModelDynamic = vModelDynamic;
      exports.vModelRadio = vModelRadio;
      exports.vModelSelect = vModelSelect;
      exports.vModelText = vModelText;
      exports.vShow = vShow;
      exports.withKeys = withKeys;
      exports.withModifiers = withModifiers;
      Object.keys(runtimeCore).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          exports[k] = runtimeCore[k];
      });
    }
  });

  // node_modules/@vue/runtime-dom/index.js
  var require_runtime_dom = __commonJS({
    "node_modules/@vue/runtime-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_runtime_dom_cjs();
      }
    }
  });

  // node_modules/vue/dist/vue.cjs.js
  var require_vue_cjs = __commonJS({
    "node_modules/vue/dist/vue.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var compilerDom = require_compiler_dom();
      var runtimeDom = require_runtime_dom();
      var shared = require_shared();
      function _interopNamespaceDefault(e) {
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          for (var k in e) {
            n[k] = e[k];
          }
        }
        n.default = e;
        return Object.freeze(n);
      }
      var runtimeDom__namespace = /* @__PURE__ */ _interopNamespaceDefault(runtimeDom);
      var compileCache = /* @__PURE__ */ Object.create(null);
      function compileToFunction(template2, options) {
        if (!shared.isString(template2)) {
          if (template2.nodeType) {
            template2 = template2.innerHTML;
          } else {
            runtimeDom.warn(`invalid template option: `, template2);
            return shared.NOOP;
          }
        }
        const key = template2;
        const cached = compileCache[key];
        if (cached) {
          return cached;
        }
        if (template2[0] === "#") {
          const el = document.querySelector(template2);
          if (!el) {
            runtimeDom.warn(`Template element not found or is empty: ${template2}`);
          }
          template2 = el ? el.innerHTML : ``;
        }
        const opts = shared.extend(
          {
            hoistStatic: true,
            onError,
            onWarn: (e) => onError(e, true)
          },
          options
        );
        if (!opts.isCustomElement && typeof customElements !== "undefined") {
          opts.isCustomElement = (tag) => !!customElements.get(tag);
        }
        const { code } = compilerDom.compile(template2, opts);
        function onError(err, asWarning = false) {
          const message = asWarning ? err.message : `Template compilation error: ${err.message}`;
          const codeFrame = err.loc && shared.generateCodeFrame(
            template2,
            err.loc.start.offset,
            err.loc.end.offset
          );
          runtimeDom.warn(codeFrame ? `${message}
${codeFrame}` : message);
        }
        const render = new Function("Vue", code)(runtimeDom__namespace);
        render._rc = true;
        return compileCache[key] = render;
      }
      runtimeDom.registerRuntimeCompiler(compileToFunction);
      exports.compile = compileToFunction;
      Object.keys(runtimeDom).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          exports[k] = runtimeDom[k];
      });
    }
  });

  // node_modules/vue/index.js
  var require_vue = __commonJS({
    "node_modules/vue/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_vue_cjs();
      }
    }
  });

  // node_modules/@jrc03c/vue-component-with-css/src/index.js
  var require_src = __commonJS({
    "node_modules/@jrc03c/vue-component-with-css/src/index.js"(exports, module) {
      function createVueComponentWithCSS2(component) {
        let count = 0;
        let styleElement;
        component = component || {};
        const data = component.data ? component.data : function() {
        };
        const mounted = component.mounted ? component.mounted : function() {
        };
        const unmounted = component.unmounted ? component.unmounted : function() {
        };
        if (!data.css)
          data.css = "";
        component.data = function() {
          const self2 = this;
          return data.bind(self2)();
        };
        component.mounted = function() {
          const self2 = this;
          mounted.bind(self2)();
          count++;
          if (!styleElement) {
            styleElement = document.createElement("style");
            document.body.appendChild(styleElement);
            styleElement.innerHTML = self2.css;
          }
        };
        component.unmounted = function() {
          const self2 = this;
          unmounted.bind(self2)();
          count--;
          if (count < 1) {
            document.body.removeChild(styleElement);
            styleElement = null;
          }
        };
        return component;
      }
      if (typeof module !== "undefined") {
        module.exports = createVueComponentWithCSS2;
      }
      if (typeof window !== "undefined") {
        window.createVueComponentWithCSS = createVueComponentWithCSS2;
      }
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/camelify.js
  var require_camelify = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/camelify.js"(exports, module) {
      function camelify(text) {
        if (typeof text !== "string") {
          throw new Error("`text` must be a string!");
        }
        text = text.trim();
        let out = "";
        let shouldCapitalizeNextCharacter = false;
        for (let i = 0; i < text.length; i++) {
          const char = text[i];
          if (char.match(/[A-Za-z0-9]/g)) {
            if (out.length === 0) {
              out += char.toLowerCase();
            } else if (shouldCapitalizeNextCharacter) {
              out += char.toUpperCase();
            } else {
              out += char;
            }
            shouldCapitalizeNextCharacter = false;
          } else if (!char.includes("'") && !char.includes("\u2019") && !char.includes("\u275C")) {
            shouldCapitalizeNextCharacter = true;
          }
        }
        return out;
      }
      module.exports = camelify;
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/indent.js
  var require_indent = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/indent.js"(exports, module) {
      function indent(text, chars) {
        chars = chars || "";
        return text.split("\n").map((line) => {
          if (line.trim().length > 0) {
            return chars + line;
          } else {
            return line;
          }
        }).join("\n");
      }
      module.exports = indent;
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/helpers/punctuation.js
  var require_punctuation = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/helpers/punctuation.js"(exports, module) {
      module.exports = "!\"#%&'()*+,-./:;<=>?@[]^_`{|}~\xA0\xA1\xA4\xA7\xA9\xAA\xAB\xAE\xB0\xB1\xB6\xB7\xBA\xBB\xBF\xD7\xF7\u0254\u0300\u0301\u0302\u0303\u037E\u0387\u055A\u055B\u055C\u055D\u055E\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A\u066B\u066C\u066D\u06D4\u0700\u0701\u0702\u0703\u0704\u0705\u0706\u0707\u0708\u0709\u070A\u070B\u070C\u070D\u07F7\u07F8\u07F9\u0830\u0831\u0832\u0833\u0834\u0835\u0836\u0837\u0838\u0839\u083A\u083B\u083C\u083D\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04\u0F05\u0F06\u0F07\u0F08\u0F09\u0F0A\u0F0B\u0F0C\u0F0D\u0F0E\u0F0F\u0F10\u0F11\u0F12\u0F14\u0F3A\u0F3B\u0F3C\u0F3D\u0F85\u0FD0\u0FD1\u0FD2\u0FD3\u0FD4\u0FD9\u0FDA\u104A\u104B\u104C\u104D\u104E\u104F\u10FB\u1360\u1361\u1362\u1363\u1364\u1365\u1366\u1367\u1368\u1400\u166E\u169B\u169C\u16EB\u16EC\u16ED\u1735\u1736\u17D4\u17D5\u17D6\u17D8\u17D9\u17DA\u1800\u1801\u1802\u1803\u1804\u1805\u1806\u1807\u1808\u1809\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0\u1AA1\u1AA2\u1AA3\u1AA4\u1AA5\u1AA6\u1AA8\u1AA9\u1AAA\u1AAB\u1AAC\u1AAD\u1B5A\u1B5B\u1B5C\u1B5D\u1B5E\u1B5F\u1B60\u1BFC\u1BFD\u1BFE\u1BFF\u1C3B\u1C3C\u1C3D\u1C3E\u1C3F\u1C7E\u1C7F\u1CC0\u1CC1\u1CC2\u1CC3\u1CC4\u1CC5\u1CC6\u1CC7\u1CD3\u2010\u2011\u2012\u2013\u2014\u2015\u2016\u2017\u2018\u2019\u201A\u201B\u201C\u201D\u201E\u201F\u2020\u2021\u2022\u2023\u2024\u2025\u2026\u2027\u2030\u2031\u2032\u2033\u2034\u2035\u2036\u2037\u2038\u2039\u203A\u203B\u203C\u203D\u203E\u203F\u2040\u2041\u2042\u2043\u2045\u2046\u2047\u2048\u2049\u204A\u204B\u204C\u204D\u204E\u204F\u2050\u2051\u2052\u2053\u2054\u2055\u2056\u2057\u2058\u2059\u205A\u205B\u205C\u205D\u205E\u207D\u207E\u208D\u208E\u2116\u2117\u2120\u2122\u212E\u2212\u2234\u2235\u2248\u2300\u2308\u2309\u230A\u230B\u2311\u2329\u232A\u2380\u25CA\u25CC\u261E\u2640\u2642\u26A5\u2766\u2767\u2768\u2769\u276A\u276B\u276C\u276D\u276E\u276F\u2770\u2771\u2772\u2773\u2774\u2775\u27C5\u27C6\u27E6\u27E7\u27E8\u27E9\u27EA\u27EB\u27EC\u27ED\u27EE\u27EF\u2983\u2984\u2985\u2986\u2987\u2988\u2989\u298A\u298B\u298C\u298D\u298E\u298F\u2990\u2991\u2992\u2993\u2994\u2995\u2996\u2997\u2998\u29D8\u29D9\u29DA\u29DB\u29FC\u29FD\u2CF9\u2CFA\u2CFB\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E02\u2E03\u2E04\u2E05\u2E06\u2E07\u2E08\u2E09\u2E0A\u2E0B\u2E0C\u2E0D\u2E0E\u2E0F\u2E10\u2E11\u2E12\u2E13\u2E14\u2E15\u2E16\u2E17\u2E18\u2E19\u2E1A\u2E1B\u2E1C\u2E1D\u2E1E\u2E1F\u2E20\u2E21\u2E22\u2E23\u2E24\u2E25\u2E26\u2E27\u2E28\u2E29\u2E2A\u2E2B\u2E2C\u2E2D\u2E2E\u2E30\u2E31\u2E32\u2E33\u2E34\u2E35\u2E36\u2E37\u2E38\u2E39\u2E3A\u2E3B\u2E3C\u2E3D\u2E3E\u2E3F\u2E40\u2E41\u2E42\u2E43\u2E44\u2E45\u2E46\u2E47\u2E48\u2E49\u2E4A\u2E4B\u2E4C\u2E4D\u2E4E\u2E4F\u2E52\u3001\u3002\u3003\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\u3014\u3015\u3016\u3017\u3018\u3019\u301A\u301B\u301C\u301D\u301E\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D\uA60E\uA60F\uA673\uA67E\uA6F2\uA6F3\uA6F4\uA6F5\uA6F6\uA6F7\uA874\uA875\uA876\uA877\uA8CE\uA8CF\uA8F8\uA8F9\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1\uA9C2\uA9C3\uA9C4\uA9C5\uA9C6\uA9C7\uA9C8\uA9C9\uA9CA\uA9CB\uA9CC\uA9CD\uA9DE\uA9DF\uAA5C\uAA5D\uAA5E\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uD800\uD801\uD802\uD803\uD804\uD805\uD806\uD807\uD809\uD81A\uD81B\uD82F\uD836\uD83A\u{1F03B}\uDC41\uDC42\uDC43\uDC44\uDC45\uDC47\uDC48\uDC49\uDC4A\uDC4B\uDC4C\uDC4D\uDC4E\uDC4F\uDC57\uDC5A\uDC5B\uDC5D\uDC70\uDC71\uDC72\uDC73\uDC74\uDC9F\uDCBB\uDCBC\uDCBE\uDCBF\uDCC0\uDCC1\uDCC6\uDD00\uDD01\uDD02\uDD1F\uDD2F\uDD3F\uDD40\uDD41\uDD42\uDD43\uDD44\uDD45\uDD46\uDD5E\uDD5F\uDD6F\uDD74\uDD75\uDDC1\uDDC2\uDDC3\uDDC4\uDDC5\uDDC6\uDDC7\uDDC8\uDDC9\uDDCA\uDDCB\uDDCC\uDDCD\uDDCE\uDDCF\uDDD0\uDDD1\uDDD2\uDDD3\uDDD4\uDDD5\uDDD6\uDDD7\uDDDB\uDDDD\uDDDE\uDDDF\uDDE2\uDE38\uDE39\uDE3A\uDE3B\uDE3C\uDE3D\uDE3F\uDE40\uDE41\uDE42\uDE43\uDE44\uDE45\uDE46\uDE50\uDE51\uDE52\uDE53\uDE54\uDE55\uDE56\uDE57\uDE58\uDE60\uDE61\uDE62\uDE63\uDE64\uDE65\uDE66\uDE67\uDE68\uDE69\uDE6A\uDE6B\uDE6C\uDE6E\uDE6F\uDE7F\uDE87\uDE88\uDE89\uDE8A\uDE8B\uDE97\uDE98\uDE99\uDE9A\uDE9B\uDE9C\uDE9E\uDE9F\uDEA0\uDEA1\uDEA2\uDEA9\uDEAD\uDEF0\uDEF1\uDEF2\uDEF3\uDEF4\uDEF5\uDEF6\uDEF7\uDEF8\uDF37\uDF38\uDF39\uDF3A\uDF3B\uDF3C\uDF3D\uDF3E\uDF3F\uDF44\uDF55\uDF56\uDF57\uDF58\uDF59\uDF99\uDF9A\uDF9B\uDF9C\uDF9F\uDFD0\uDFE2\uDFFF\uFD3F\uFE10\uFE11\uFE12\uFE13\uFE14\uFE15\uFE16\uFE17\uFE18\uFE19\uFE30\uFE31\uFE32\uFE33\uFE34\uFE35\uFE36\uFE37\uFE38\uFE39\uFE3A\uFE3B\uFE3C\uFE3D\uFE3E\uFE3F\uFE40\uFE41\uFE42\uFE43\uFE44\uFE45\uFE46\uFE47\uFE48\uFE49\uFE4A\uFE4B\uFE4C\uFE4D\uFE4E\uFE4F\uFE50\uFE51\uFE52\uFE54\uFE55\uFE56\uFE57\uFE58\uFE59\uFE5A\uFE5B\uFE5C\uFE5D\uFE5E\uFE5F\uFE60\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01\uFF02\uFF03\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0C\uFF0D\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B\uFF3C\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F\uFF60\uFF61\uFF62\uFF63\uFF64\uFF65";
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/helpers/replace-all.js
  var require_replace_all = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/helpers/replace-all.js"(exports, module) {
      function replaceAll(text, a, b) {
        if (typeof text !== "string") {
          throw new Error("`text` must be a string!");
        }
        if (typeof a !== "string") {
          throw new Error("`a` must be a string!");
        }
        if (typeof b !== "string") {
          throw new Error("`b` must be a string!");
        }
        return text.split(a).join(b);
      }
      module.exports = replaceAll;
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/helpers/strip.js
  var require_strip = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/helpers/strip.js"(exports, module) {
      var punctuation = require_punctuation();
      var replaceAll = require_replace_all();
      var doubleSpace = "  ";
      var singleSpace = " ";
      function strip(text) {
        if (typeof text !== "string") {
          throw new Error("`text` must be a string!");
        }
        let out = "";
        for (let i = 0; i < text.length; i++) {
          const char = text[i].toLowerCase();
          if (punctuation.includes(char)) {
            out += singleSpace;
          } else {
            out += char;
          }
        }
        while (out.includes(doubleSpace)) {
          out = replaceAll(out, doubleSpace, singleSpace);
        }
        return out.trim();
      }
      module.exports = strip;
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/kebabify.js
  var require_kebabify = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/kebabify.js"(exports, module) {
      var strip = require_strip();
      function kebabify(text) {
        if (typeof text !== "string") {
          throw new Error("`text` must be a string!");
        }
        const words = strip(text).split(" ");
        if (words.length === 0)
          return "";
        if (words.length === 1)
          return words[0];
        return words.join("-");
      }
      module.exports = kebabify;
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/snakeify.js
  var require_snakeify = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/snakeify.js"(exports, module) {
      var strip = require_strip();
      function snakeify(text) {
        if (typeof text !== "string") {
          throw new Error("`text` must be a string!");
        }
        const words = strip(text).split(" ");
        if (words.length === 0)
          return "";
        if (words.length === 1)
          return words[0];
        return words.join("_");
      }
      module.exports = snakeify;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/math-error.js
  var require_math_error = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/math-error.js"(exports, module) {
      var isBrowser = new Function(`
  try {
    return this === window
  } catch(e) {}

  try {
    return typeof importScripts !== "undefined"
  } catch(e) {}

  return false
`);
      var MathError = class extends Error {
        constructor(message) {
          if (isBrowser()) {
            super(message);
          } else {
            super("\n\n\x1B[31m" + message + "\n\x1B[0m");
          }
        }
      };
      module.exports = MathError;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/assert.js
  var require_assert = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/assert.js"(exports, module) {
      var MathError = require_math_error();
      module.exports = function(isTrue, message) {
        if (!isTrue)
          throw new MathError(message);
      };
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-array.js
  var require_is_array = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-array.js"(exports, module) {
      function isArray(obj) {
        try {
          return obj instanceof Array || typeof obj.constructor !== "undefined" && obj.constructor.name === "Array";
        } catch (e) {
          return false;
        }
      }
      module.exports = isArray;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-dataframe.js
  var require_is_dataframe = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-dataframe.js"(exports, module) {
      function isDataFrame(x) {
        try {
          return !!x._symbol && x._symbol === Symbol.for("@jrc03c/js-math-tools/dataframe");
        } catch (e) {
          return false;
        }
      }
      module.exports = isDataFrame;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-function.js
  var require_is_function = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-function.js"(exports, module) {
      function isFunction(fn) {
        return typeof fn === "function";
      }
      module.exports = isFunction;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-number.js
  var require_is_number = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-number.js"(exports, module) {
      function isNumber(x) {
        return typeof x === "number" && !isNaN(x);
      }
      module.exports = isNumber;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-undefined.js
  var require_is_undefined = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-undefined.js"(exports, module) {
      function isUndefined(x) {
        return x === null || typeof x === "undefined";
      }
      module.exports = isUndefined;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-object.js
  var require_is_object = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-object.js"(exports, module) {
      var isArray = require_is_array();
      var isUndefined = require_is_undefined();
      function isObject(x) {
        return typeof x === "object" && !isUndefined(x) && !isArray(x);
      }
      module.exports = isObject;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-series.js
  var require_is_series = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-series.js"(exports, module) {
      function isSeries(x) {
        try {
          return !!x._symbol && x._symbol === Symbol.for("@jrc03c/js-math-tools/series");
        } catch (e) {
          return false;
        }
      }
      module.exports = isSeries;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/index-of.js
  var require_index_of = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/index-of.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isFunction = require_is_function();
      var isNumber = require_is_number();
      var isObject = require_is_object();
      var isSeries = require_is_series();
      function indexOf(x, fn) {
        if (isDataFrame(x)) {
          const index = indexOf(x.values, fn);
          if (index.length > 0 && isNumber(index[0]) && index[0] >= 0 && index[0] < x.index.length) {
            index[0] = x.index[index[0]];
          }
          if (index.length > 1 && isNumber(index[1]) && index[1] >= 0 && index[1] < x.columns.length) {
            index[1] = x.columns[index[1]];
          }
          return index;
        }
        if (isSeries(x)) {
          const index = indexOf(x.values, fn);
          if (index.length > 0 && isNumber(index[0]) && index[0] >= 0 && index[0] < x.index.length) {
            index[0] = x.index[index[0]];
          }
          return index;
        }
        assert(
          isObject(x) || isArray(x),
          "You must pass (1) an object, array, Series, or DataFrame and (2) a function or value into the `indexOf` function!"
        );
        if (!isFunction(fn)) {
          const value = fn;
          fn = (v) => v === value;
        }
        function helper(x2, fn2, checked) {
          checked = checked || [];
          if (checked.indexOf(x2) > -1) {
            return null;
          }
          if (isObject(x2)) {
            checked.push(x2);
            const keys = Object.keys(x2);
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              const value = x2[key];
              if (fn2(value)) {
                return [key];
              }
              const results = helper(value, fn2, checked);
              if (results && results.length > 0) {
                return [key].concat(results);
              }
            }
          } else if (isArray(x2)) {
            checked.push(x2);
            for (let i = 0; i < x2.length; i++) {
              const value = x2[i];
              if (fn2(value)) {
                return [i];
              }
              const results = helper(value, fn2, checked);
              if (results && results.length > 0) {
                return [i].concat(results);
              }
            }
          } else {
            if (fn2(x2)) {
              return [];
            }
          }
          return null;
        }
        function safeFn(v) {
          try {
            return fn(v);
          } catch (e) {
            return false;
          }
        }
        const paths = helper(x, safeFn);
        if (paths && paths.length > 0) {
          return paths;
        } else {
          return null;
        }
      }
      module.exports = indexOf;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/copy.js
  var require_copy = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/copy.js"(exports, module) {
      var indexOf = require_index_of();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function copy(x) {
        function helper(x2) {
          if (typeof x2 === "object") {
            if (x2 === null) {
              return null;
            }
            if (isArray(x2)) {
              return x2.map((v) => copy(v));
            }
            if (isSeries(x2)) {
              const out2 = x2.copy();
              out2.values = copy(out2.values);
              return out2;
            }
            if (isDataFrame(x2)) {
              const out2 = x2.copy();
              out2.values = copy(x2.values);
              return out2;
            }
            if (x2 instanceof Date) {
              return new Date(x2.getTime());
            }
            x2 = decycle(x2);
            const out = {};
            Object.keys(x2).forEach((key) => {
              out[key] = copy(x2[key]);
            });
            return out;
          } else {
            return x2;
          }
        }
        return helper(decycle(x));
      }
      function decycle(x) {
        function helper(x2, checked, currentPath) {
          checked = checked || [];
          currentPath = currentPath || "";
          if (checked.indexOf(x2) > -1) {
            const parts = currentPath.split("/").slice(currentPath.startsWith("/") ? 1 : 0);
            const isANestedCopy = parts.some((v, i) => {
              const subParts = parts.slice(0, parts.length - i - 1);
              let temp = orig;
              subParts.forEach((part) => {
                temp = temp[part];
              });
              return temp === x2;
            });
            if (isANestedCopy) {
              const pathToCopy = orig === x2 ? "/" : "/" + indexOf(orig, x2).join("/");
              return `<reference to "${pathToCopy}">`;
            }
          }
          if (typeof x2 === "object") {
            if (x2 === null)
              return null;
            checked.push(x2);
            if (isArray(x2)) {
              return x2.map((v, i) => helper(v, checked, currentPath + "/" + i));
            } else {
              Object.keys(x2).forEach((key) => {
                x2[key] = helper(x2[key], checked, currentPath + "/" + key);
              });
              return x2;
            }
          } else {
            return x2;
          }
        }
        const orig = (() => {
          try {
            return structuredClone(x);
          } catch (e) {
            return x;
          }
        })();
        let out = helper(orig);
        if (isDataFrame(x)) {
          const temp = x.copy();
          temp._values = out.values;
          temp._columns = out.columns;
          temp._index = out.index;
          out = temp;
        }
        if (isSeries(x)) {
          const temp = x.copy();
          temp.name = out.name;
          temp._values = out.values;
          temp._index = out.index;
          out = temp;
        }
        return out;
      }
      module.exports = { copy, decycle };
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/flatten.js
  var require_flatten = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/flatten.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function flatten(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return flatten(arr.values);
        }
        assert(
          isArray(arr),
          "The `flatten` function only works on arrays, Series, and DataFrames!"
        );
        function helper(arr2) {
          let out = [];
          arr2.forEach((child) => {
            if (isArray(child)) {
              out = out.concat(helper(child));
            } else {
              out.push(child);
            }
          });
          return out;
        }
        return helper(arr);
      }
      module.exports = flatten;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-date.js
  var require_is_date = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-date.js"(exports, module) {
      function isDate(x) {
        return x instanceof Date && x.toString() !== "Invalid Date";
      }
      module.exports = isDate;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-equal.js
  var require_is_equal = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-equal.js"(exports, module) {
      var { decycle } = require_copy();
      var isArray = require_is_array();
      var isDate = require_is_date();
      function isEqual(a, b) {
        function helper(a2, b2) {
          const aType = typeof a2;
          const bType = typeof b2;
          if (aType !== bType)
            return false;
          if (aType === "undefined")
            return true;
          if (aType === "boolean")
            return a2 === b2;
          if (aType === "symbol")
            return a2 === b2;
          if (aType === "number" || aType === "bigint") {
            if (a2.toString() === "NaN" && b2.toString() === "NaN") {
              return true;
            }
            return a2 === b2;
          }
          if (aType === "string")
            return a2 === b2;
          if (aType === "function")
            return a2 === b2;
          if (aType === "object") {
            if (a2 === null || b2 === null) {
              return a2 === null && b2 === null;
            } else {
              if (isDate(a2) && isDate(b2)) {
                return a2.getTime() === b2.getTime();
              }
              if (isArray(a2) !== isArray(b2)) {
                return false;
              }
              const aKeys = Object.keys(a2);
              const bKeys = Object.keys(b2);
              if (aKeys.length !== bKeys.length)
                return false;
              for (let i = 0; i < aKeys.length; i++) {
                const key = aKeys[i];
                if (!helper(a2[key], b2[key]))
                  return false;
              }
              return true;
            }
          }
        }
        try {
          return helper(a, b);
        } catch (e) {
          return helper(decycle(a), decycle(b));
        }
      }
      module.exports = isEqual;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/set.js
  var require_set = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/set.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isFunction = require_is_function();
      var isSeries = require_is_series();
      var isUndefined = require_is_undefined();
      function makeKey(n) {
        const alpha = "abcdefg1234567890";
        let out = "";
        while (out.length < n)
          out += alpha[parseInt(Math.random() * alpha.length)];
        return out;
      }
      var NULL_KEY = makeKey(256);
      var UNDEFINED_KEY = makeKey(256);
      var INFINITY_KEY = makeKey(256);
      var MINUS_INFINITY_KEY = makeKey(256);
      var SYMBOL_KEY = makeKey(256);
      function set(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return set(arr.values);
        }
        assert(
          isArray(arr),
          "The `set` function only works on arrays, Series, and DataFrames!"
        );
        const out = [];
        const temp = {};
        flatten(arr).forEach((item) => {
          const key = typeof item === "object" && item === null ? NULL_KEY : isUndefined(item) ? UNDEFINED_KEY : isFunction(item) ? item.toString() : typeof item === "symbol" ? item.toString() + " - " + SYMBOL_KEY : item === Infinity ? INFINITY_KEY : item === -Infinity ? MINUS_INFINITY_KEY : isDataFrame(item) ? item.toJSONString() : isSeries(item) ? JSON.stringify(item.toObject()) : JSON.stringify(item);
          if (!temp[key])
            out.push(item);
          temp[key] = true;
        });
        return out;
      }
      module.exports = set;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/count.js
  var require_count = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/count.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isEqual = require_is_equal();
      var isFunction = require_is_function();
      var isSeries = require_is_series();
      var set = require_set();
      function count(arr, matcher) {
        if (isDataFrame(arr) || isSeries(arr)) {
          if (arguments.length > 1) {
            return count(arr.values, matcher);
          } else {
            return count(arr.values, arr.values);
          }
        }
        assert(
          isArray(arr),
          "The first argument to the `count` function must be an array, Series, or DataFrame!"
        );
        if (isFunction(matcher)) {
          return flatten(arr).filter((value) => matcher(value)).length;
        } else if (isArray(matcher)) {
          const temp = flatten(arr);
          return set(matcher).map((value) => {
            return {
              value,
              count: temp.filter((v) => isEqual(v, value)).length
            };
          });
        } else if (arguments.length > 1) {
          return flatten(arr).filter((other) => isEqual(other, matcher)).length;
        } else {
          return count(arr, arr);
        }
      }
      module.exports = count;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-jagged.js
  var require_is_jagged = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-jagged.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function isJagged(x) {
        if (isDataFrame(x) || isSeries(x)) {
          return isJagged(x.values);
        }
        assert(
          isArray(x),
          "The `isJagged` function only works on arrays, Series, and DataFrames!"
        );
        let childArrayCount = 0;
        let firstChildArrayLength = null;
        for (let i = 0; i < x.length; i++) {
          if (isArray(x[i])) {
            childArrayCount++;
            if (isJagged(x[i])) {
              return true;
            }
            if (firstChildArrayLength === null) {
              firstChildArrayLength = x[i].length;
            } else if (x[i].length !== firstChildArrayLength) {
              return true;
            }
          }
        }
        if (childArrayCount > 0 && childArrayCount < x.length) {
          return true;
        }
        return false;
      }
      module.exports = isJagged;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-nested.js
  var require_is_nested = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-nested.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function isNested(x) {
        if (isDataFrame(x) || isSeries(x)) {
          return isNested(x.values);
        }
        assert(
          isArray(x),
          "The `isNested` function only works on arrays, Series, and DataFrames!"
        );
        for (let i = 0; i < x.length; i++) {
          if (isArray(x[i])) {
            return true;
          }
        }
        return false;
      }
      module.exports = isNested;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/ndarray.js
  var require_ndarray = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/ndarray.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isNested = require_is_nested();
      var isNumber = require_is_number();
      var isUndefined = require_is_undefined();
      var error = "You must pass a natural number or a one-dimensional array of natural numbers into the `ndarray` function!";
      function ndarray(shape) {
        assert(!isUndefined(shape), error);
        if (!isArray(shape))
          shape = [shape];
        assert(!isNested(shape), error);
        assert(shape.length > 0, error);
        const s = shape[0];
        assert(isNumber(s), error);
        assert(parseInt(s) === s, error);
        assert(s >= 0, error);
        assert(
          s !== Infinity,
          "We can't create an array containing an infinite number of values!"
        );
        if (shape.length === 1) {
          const out = [];
          for (let i = 0; i < s; i++)
            out.push(void 0);
          return out;
        } else {
          const out = [];
          for (let i = 0; i < s; i++) {
            out.push(ndarray(shape.slice(1)));
          }
          return out;
        }
      }
      module.exports = ndarray;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/reverse.js
  var require_reverse = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/reverse.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function reverse(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          const out2 = arr.copy();
          out2.values = reverse(out2.values);
          out2.index = reverse(out2.index);
          return out2;
        }
        assert(
          isArray(arr),
          "The `reverse` function only works on arrays, Series, and DataFrames!"
        );
        const out = [];
        for (let i = arr.length - 1; i >= 0; i--)
          out.push(arr[i]);
        return out;
      }
      module.exports = reverse;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/range.js
  var require_range = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/range.js"(exports, module) {
      var assert = require_assert();
      var isNumber = require_is_number();
      var isUndefined = require_is_undefined();
      var reverse = require_reverse();
      function range(a, b, step = 1) {
        assert(
          !isUndefined(a) && !isUndefined(b) && !isUndefined(step),
          "You must pass two numbers and optionally a step value to the `range` function!"
        );
        assert(
          isNumber(a) && isNumber(b) && isNumber(step),
          "You must pass two numbers and optionally a step value to the `range` function!"
        );
        assert(
          step > 0,
          "The step value must be greater than 0! (NOTE: The step value is a magnitude; it does not indicate direction.)"
        );
        let shouldReverse = false;
        if (a > b) {
          shouldReverse = true;
          const buffer = a;
          a = b + step;
          b = buffer + step;
        }
        let out = [];
        for (let i = a; i < b; i += step)
          out.push(i);
        if (shouldReverse)
          out = reverse(out);
        return out;
      }
      module.exports = range;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/shape.js
  var require_shape = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/shape.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isEqual = require_is_equal();
      var isSeries = require_is_series();
      var isUndefined = require_is_undefined();
      function helper(x) {
        if (!isArray(x)) {
          return void 0;
        }
        const out = [x.length];
        let childArrayCount = 0;
        const childShapes = x.map((v) => {
          const s = helper(v);
          if (!isUndefined(s)) {
            childArrayCount++;
            if (s.length === 1) {
              return s[0];
            } else {
              return s;
            }
          } else {
            return s;
          }
        });
        if (childArrayCount > 0) {
          if (childArrayCount === x.length) {
            const childShapesAreIdentical = childShapes.slice(0, -1).every((s, i) => {
              return isEqual(s, childShapes[i + 1]);
            });
            if (childShapesAreIdentical) {
              return out.concat(childShapes[0]);
            } else {
              out.push(childShapes);
              return out;
            }
          } else {
            out.push(childShapes);
            return out;
          }
        } else {
          return out;
        }
      }
      function shape(x) {
        if (isDataFrame(x) || isSeries(x)) {
          return shape(x.values);
        }
        assert(
          isArray(x),
          "The `shape` function only works on arrays, Series, and DataFrames!"
        );
        return helper(x);
      }
      module.exports = shape;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-append.js
  var require_df_append = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-append.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isJagged = require_is_jagged();
      var isSeries = require_is_series();
      var isUndefined = require_is_undefined();
      var MathError = require_math_error();
      var ndarray = require_ndarray();
      var range = require_range();
      var set = require_set();
      var shape = require_shape();
      function dfAppend(df, x, axis) {
        if (isUndefined(axis)) {
          axis = 0;
        }
        assert(
          axis === 0 || axis === 1 || axis === "vertical" || axis === "horizontal",
          'The only valid axis values for use when appending data to a DataFrame are 0, 1, "vertical", and "horizontal". Note that 0 == "horizontal" and 1 == "vertical".'
        );
        if (isArray(x)) {
          assert(
            !isJagged(x),
            "The array of data you're trying to append to this DataFrame is jagged!"
          );
          const xShape = shape(x);
          if (xShape.length === 1) {
            if (axis === 0) {
              const out = df.copy();
              out._values.push(x);
              const maxRowLength = Math.max(df.shape[1], xShape[0]);
              out._values.forEach((row) => {
                while (row.length < maxRowLength) {
                  row.push(void 0);
                }
              });
              while (out._index.length < out._values.length) {
                out._index.push("row" + out._index.length);
              }
              while (out._columns.length < maxRowLength) {
                out._columns.push("col" + out._columns.length);
              }
              return out;
            } else {
              const maxColLength = Math.max(df.shape[0], xShape[0]);
              const out = df.copy();
              range(0, maxColLength).forEach((i) => {
                if (i >= out._values.length) {
                  out._values.push(ndarray(df.shape[1]));
                }
                out._values[i].push(x[i]);
              });
              while (out._index.length < out._values.length) {
                out._index.push("row" + out._index.length);
              }
              while (out._columns.length < out._values[0].length) {
                out._columns.push("col" + out._columns.length);
              }
              return out;
            }
          } else if (xShape.length === 2) {
            if (axis === 0) {
              const maxRowLength = Math.max(
                ...x.map((row) => row.length).concat([df.shape[1]])
              );
              const out = df.copy();
              out._values = out._values.concat(x).map((row) => {
                while (row.length < maxRowLength) {
                  row.push(void 0);
                }
                return row;
              });
              while (out._index.length < out._values.length) {
                out._index.push("row" + out._index.length);
              }
              while (out._columns.length < maxRowLength) {
                out._columns.push("col" + out._columns.length);
              }
              return out;
            } else {
              const maxRowLength = Math.max(...x.map((row) => row.length)) + df.shape[1];
              const maxColLength = Math.max(df.shape[0], xShape[0]);
              const out = df.copy();
              range(0, maxColLength).forEach((i) => {
                if (i >= out._values.length) {
                  out._values.push(ndarray(df.shape[1]));
                }
                out._values[i] = out._values[i].concat(x[i]);
                while (out._values[i].length < maxRowLength) {
                  out._values[i].push(void 0);
                }
              });
              while (out._index.length < out._values.length) {
                out._index.push("row" + out._index.length);
              }
              while (out._columns.length < maxRowLength) {
                out._columns.push("col" + out._columns.length);
              }
              return out;
            }
          } else {
            throw new MathError(
              "Only 1- and 2-dimensional arrays can be appended to a DataFrame!"
            );
          }
        } else if (isSeries(x)) {
          const out = dfAppend(df, x.values, axis);
          if (axis === 0) {
            out.index[out.index.length - 1] = out.index.indexOf(x.name) > -1 ? x.name + " (2)" : x.name;
          } else {
            out.columns[out.columns.length - 1] = out.columns.indexOf(x.name) > -1 ? x.name + " (2)" : x.name;
          }
          return out;
        } else if (isDataFrame(x)) {
          if (axis === 0) {
            const out = df.copy();
            const maxRowLength = set(out._columns.concat(x._columns)).length;
            out._values.forEach((row) => {
              while (row.length < maxRowLength) {
                row.push(void 0);
              }
            });
            x.apply((row) => {
              const rowCopy = row.copy();
              const temp = [];
              out._columns.forEach((col) => {
                const index = rowCopy._index.indexOf(col);
                if (index > -1) {
                  temp.push(rowCopy._values[index]);
                  rowCopy._values.splice(index, 1);
                  rowCopy._index.splice(index, 1);
                } else {
                  temp.push(void 0);
                }
              });
              out._values.push(temp.concat(rowCopy._values));
            }, 1);
            out._columns = out._columns.concat(
              x._columns.filter((c) => out._columns.indexOf(c) < 0)
            );
            while (out._index.length < out._values.length) {
              const newRowName = "row" + out._index.length;
              out._index.push(
                newRowName + (df._index.indexOf(newRowName) > -1 ? " (2)" : "")
              );
            }
            return out;
          } else {
            const out = df.copy();
            out._index.forEach((rowName, i) => {
              const xIndex = x._index.indexOf(rowName);
              if (xIndex > -1) {
                out._values[i] = out._values[i].concat(x._values[xIndex]);
              } else {
                out._values[i] = out._values[i].concat(ndarray(x.shape[1]));
              }
            });
            x._index.forEach((rowName, i) => {
              const outIndex = out._index.indexOf(rowName);
              if (outIndex < 0) {
                out._index.push(rowName);
                out._values.push(ndarray(out._columns.length).concat(x._values[i]));
              }
            });
            out._columns = out._columns.concat(
              x._columns.map((c) => c + (out._columns.indexOf(c) > -1 ? " (2)" : ""))
            );
            return out;
          }
        } else {
          throw new MathError(
            "Only 1- or 2-dimensional arrays, Series, and DataFrames can be appended to a DataFrame!"
          );
        }
      }
      module.exports = dfAppend;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-apply.js
  var require_df_apply = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-apply.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isFunction = require_is_function();
      var isUndefined = require_is_undefined();
      function dfApply(DataFrame, Series, df, fn, axis) {
        axis = axis || 0;
        assert(
          isFunction(fn),
          "The first parameter to the `apply` method must be a function."
        );
        assert(
          axis === 0 || axis === 1,
          "The second parameter to the `apply` method (the `axis`) must be 0 or 1."
        );
        if (axis === 0) {
          const temp = {};
          let shouldReturnADataFrame;
          df.columns.forEach((colName, i) => {
            const series = new Series(df.values.map((row) => row[i]));
            series.name = colName;
            series.index = df.index;
            const value = fn(series, i, df);
            if (value instanceof Series) {
              temp[colName] = value.values;
            } else {
              temp[colName] = value;
            }
            if (isUndefined(shouldReturnADataFrame)) {
              shouldReturnADataFrame = value instanceof Series || isArray(value);
            }
          });
          if (shouldReturnADataFrame) {
            const out = new DataFrame(temp);
            out.index = df.index;
            return out;
          } else {
            const out = new Series(df.columns.map((colName) => temp[colName]));
            out.index = df.columns;
            return out;
          }
        } else if (axis === 1) {
          let shouldReturnADataFrame;
          const temp = df.values.map((row, i) => {
            const series = new Series(row);
            series.name = df.index[i];
            series.index = df.columns;
            const value = fn(series, i, df);
            if (isUndefined(shouldReturnADataFrame)) {
              shouldReturnADataFrame = value instanceof Series || isArray(value);
            }
            if (value instanceof Series) {
              return value.values;
            } else {
              return value;
            }
          });
          if (shouldReturnADataFrame) {
            const out = new DataFrame(temp);
            out.index = df.index;
            out.columns = df.columns;
            return out;
          } else {
            const out = new Series(temp);
            out.index = df.index;
            return out;
          }
        }
      }
      module.exports = dfApply;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-string.js
  var require_is_string = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-string.js"(exports, module) {
      function isString(s) {
        return typeof s === "string";
      }
      module.exports = isString;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-assign.js
  var require_df_assign = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-assign.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isJagged = require_is_jagged();
      var isObject = require_is_object();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var MathError = require_math_error();
      var shape = require_shape();
      function dfAssign(DataFrame, Series, df, p1, p2) {
        const isDataFrame = (x) => x instanceof DataFrame;
        const isSeries = (x) => x instanceof Series;
        if (!isUndefined(p2)) {
          assert(
            isString(p1),
            "If passing two arguments into the `assign` method, then the first argument must be a string name!"
          );
          assert(
            isArray(p2) && !isJagged(p2) && shape(p2).length === 1,
            "If passing two arguments into the `assign` method, then the second argument must be a 1-dimensional array!"
          );
          const out = df.append(p2, 1);
          out.columns[out.columns.length - 1] = p1;
          return out;
        } else {
          if (isDataFrame(p1)) {
            return df.append(p1, 1);
          } else if (isSeries(p1)) {
            return df.append(p1, 1);
          } else if (isObject(p1)) {
            const maxColumnLength = Math.max(
              ...Object.keys(p1).map((key) => p1[key].length)
            );
            Object.keys(p1).forEach((key) => {
              while (p1[key].length < maxColumnLength) {
                p1[key].push(void 0);
              }
            });
            return df.append(new DataFrame(p1), 1);
          } else {
            throw new MathError(
              "You must pass a DataFrame, Series, or object into the `assign` method!"
            );
          }
        }
      }
      module.exports = dfAssign;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-copy.js
  var require_df_copy = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-copy.js"(exports, module) {
      var { copy } = require_copy();
      function dfCopy(DataFrame, df) {
        if (df.isEmpty)
          return new DataFrame();
        const out = new DataFrame(copy(df.values));
        out.columns = df.columns.slice();
        out.index = df.index.slice();
        return out;
      }
      module.exports = dfCopy;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-drop.js
  var require_df_drop = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-drop.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isNumber = require_is_number();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var shape = require_shape();
      function dfDrop(DataFrame, Series, df, rows, cols) {
        if (isUndefined(rows))
          rows = [];
        if (isUndefined(cols))
          cols = [];
        if (isString(rows) || isNumber(rows))
          rows = [rows];
        if (isString(cols) || isNumber(cols))
          cols = [cols];
        assert(
          isArray(rows),
          "The `drop` method only works on 1-dimensional arrays of numerical indices and/or strings."
        );
        assert(
          isArray(cols),
          "The `drop` method only works on 1-dimensional arrays of numerical indices and/or strings."
        );
        assert(
          shape(rows).length === 1,
          "The `drop` method only works on 1-dimensional arrays of numerical indices and/or strings."
        );
        assert(
          shape(cols).length === 1,
          "The `drop` method only works on 1-dimensional arrays of numerical indices and/or strings."
        );
        let outIndex, outColumns;
        df.index.forEach((row, i) => {
          if (rows.indexOf(row) < 0 && rows.indexOf(i) < 0) {
            if (!outIndex)
              outIndex = [];
            outIndex.push(row);
          }
        });
        df.columns.forEach((col, i) => {
          if (cols.indexOf(col) < 0 && cols.indexOf(i) < 0) {
            if (!outColumns)
              outColumns = [];
            outColumns.push(col);
          }
        });
        let out = df.get(outIndex, outColumns);
        if (out instanceof Series) {
          let temp = new DataFrame();
          temp = temp.assign(out);
          if (df.index.indexOf(out.name) > -1)
            temp = temp.transpose();
          out = temp;
        }
        return out;
      }
      module.exports = dfDrop;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/helpers/is-whole-number.js
  var require_is_whole_number = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/helpers/is-whole-number.js"(exports, module) {
      var isNumber = require_is_number();
      function isInteger(x) {
        return isNumber(x) && parseInt(x) === x;
      }
      function isWholeNumber(x) {
        return isInteger(x) && x >= 0;
      }
      module.exports = isWholeNumber;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-drop-missing.js
  var require_df_drop_missing = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-drop-missing.js"(exports, module) {
      var assert = require_assert();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var isWholeNumber = require_is_whole_number();
      var shape = require_shape();
      function dfDropMissing(DataFrame, Series, df, axis, condition, threshold) {
        axis = axis || 0;
        assert(
          axis === 0 || axis === 1,
          "The first parameter of the `dropMissing` method (the `axis`) must be 0 or 1."
        );
        threshold = threshold || 0;
        assert(
          isWholeNumber(threshold),
          "The third parameter of the `dropMissing` method (the `threshold`) should be a whole number (meaning that data should be dropped if it contains more than `threshold` null values)."
        );
        condition = threshold > 0 ? "none" : condition || "any";
        assert(
          condition === "any" || condition === "all" || condition === "none",
          "The second parameter of the `dropMissing` method (the `condition` parameter, which indicates the condition under which data should be dropped) should be 'any' or 'all' (meaning that if 'any' of the data contains null values, then it should be dropped; or that if 'all' of the data contains null values, then it should be dropped)."
        );
        function helper(values) {
          if (threshold > 0) {
            let count = 0;
            for (let i = 0; i < values.length; i++) {
              const value = values[i];
              if (isUndefined(value))
                count++;
              if (count >= threshold)
                return [];
            }
          } else if (condition === "any") {
            for (let i = 0; i < values.length; i++) {
              const value = values[i];
              if (isUndefined(value))
                return [];
            }
          } else if (condition === "all") {
            for (let i = 0; i < values.length; i++) {
              const value = values[i];
              if (!isUndefined(value))
                return values;
            }
            return [];
          }
          return values;
        }
        let out = df.copy();
        const tempID = Math.random().toString();
        if (axis === 0) {
          out = out.assign(tempID, out.index);
          const newValues = out.values.map(helper).filter((row) => row.length > 0);
          if (shape(newValues).length < 2)
            return new DataFrame();
          out.values = newValues;
          let newIndex = out.get(null, tempID);
          if (isUndefined(newIndex))
            return new DataFrame();
          if (isString(newIndex))
            newIndex = [newIndex];
          if (newIndex instanceof Series)
            newIndex = newIndex.values;
          out.index = newIndex;
          out = out.drop(null, tempID);
        } else if (axis === 1) {
          const temp = {};
          out.columns.forEach((colName, i) => {
            const values = out.values.map((row) => row[i]);
            const newValues = helper(values);
            if (newValues.length > 0) {
              temp[colName] = newValues;
            }
          });
          if (Object.keys(temp).length === 0) {
            return new DataFrame();
          }
          const newOut = new DataFrame(temp);
          newOut.index = out.index;
          return newOut;
        }
        return out;
      }
      module.exports = dfDropMissing;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/drop-nan.js
  var require_drop_nan = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/drop-nan.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      function dropNaN(x) {
        if (isDataFrame(x) || isSeries(x)) {
          return x.dropNaN(...Object.values(arguments).slice(1));
        }
        assert(
          isArray(x),
          "The `dropNaN` function only works on arrays, Series, and DataFrames!"
        );
        const out = [];
        x.forEach((v) => {
          try {
            return out.push(dropNaN(v));
          } catch (e) {
            if (isNumber(v)) {
              return out.push(v);
            }
          }
        });
        return out;
      }
      module.exports = dropNaN;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-drop-nan.js
  var require_df_drop_nan = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-drop-nan.js"(exports, module) {
      var assert = require_assert();
      var dropNaN = require_drop_nan();
      var isWholeNumber = require_is_whole_number();
      function dfDropNaN(DataFrame, df, axis, condition, threshold) {
        axis = axis || 0;
        assert(
          axis === 0 || axis === 1,
          "The first parameter of the `dropNaN` method (the `axis`) must be 0 or 1."
        );
        threshold = threshold || 0;
        assert(
          isWholeNumber(threshold),
          "The third parameter of the `dropNaN` method (the `threshold`) should be a whole number (meaning that data should be dropped if it contains more than `threshold` NaN values)."
        );
        condition = threshold > 0 ? "none" : condition || "any";
        assert(
          condition === "any" || condition === "all" || condition === "none",
          "The second parameter of the `dropNaN` method (the `condition` parameter, which indicates the condition under which data should be dropped) should be 'any' or 'all' (meaning that if 'any' of the data contains NaN values, then it should be dropped; or that if 'all' of the data contains NaN values, then it should be dropped)."
        );
        function helper(values) {
          const numericalValues = dropNaN(values);
          if (threshold > 0)
            return values.length - numericalValues.length < threshold;
          if (condition === "any")
            return numericalValues.length === values.length;
          if (condition === "all")
            return numericalValues.length > 0;
          return true;
        }
        const out = df.copy();
        if (axis === 0) {
          const rowsToKeep = out.index.filter((row) => {
            const values = out.get(row, null).values;
            return helper(values);
          });
          if (rowsToKeep.length > 0)
            return out.get(rowsToKeep, null);
          else
            return new DataFrame();
        } else if (axis === 1) {
          const colsToKeep = out.columns.filter((col) => {
            const values = out.get(null, col).values;
            return helper(values);
          });
          if (colsToKeep.length > 0)
            return out.get(null, colsToKeep);
          else
            return new DataFrame();
        }
        return out;
      }
      module.exports = dfDropNaN;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-filter.js
  var require_df_filter = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-filter.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isFunction = require_is_function();
      var isUndefined = require_is_undefined();
      function arrayToObject(x) {
        const out = {};
        flatten(x).forEach((value, i) => {
          out[value] = i;
        });
        return out;
      }
      function undoArrayToObject(obj) {
        return Object.keys(obj).sort((a, b) => obj[a] - obj[b]);
      }
      function dfFilter(DataFrame, Series, df, fn, axis) {
        assert(
          isFunction(fn),
          "The `filter` method takes a single parameter: a function that is used to filter the values."
        );
        if (isUndefined(axis))
          axis = 0;
        assert(
          axis === 0 || axis === 1,
          "The `axis` parameter to the `filter` method must be 0 or 1."
        );
        let out = df.copy();
        if (out.isEmpty)
          return out;
        const index = arrayToObject(out.index);
        const columns = arrayToObject(out.columns);
        if (axis === 0) {
          const newValues = out.values.filter((row, i) => {
            const series = new Series(row);
            series.name = df.index[i];
            series.index = df.columns;
            const shouldKeep = fn(series, i, df);
            if (!shouldKeep)
              delete index[out.index[i]];
            return shouldKeep;
          });
          if (flatten(newValues).length === 0) {
            return new DataFrame();
          }
          if (newValues.length === 1) {
            const temp = new Series(flatten(newValues));
            temp.name = undoArrayToObject(index)[0];
            temp.index = undoArrayToObject(columns);
            return temp;
          }
          out.values = newValues;
          out.index = undoArrayToObject(index);
        } else if (axis === 1) {
          out = out.transpose();
          const newValues = out.values.filter((row, i) => {
            const series = new Series(row);
            series.name = df.columns[i];
            series.index = df.index;
            const shouldKeep = fn(series, i, df);
            if (!shouldKeep)
              delete columns[out.index[i]];
            return shouldKeep;
          });
          if (flatten(newValues).length === 0) {
            return new DataFrame();
          }
          if (newValues.length === 1) {
            const temp = new Series(flatten(newValues));
            temp.name = undoArrayToObject(columns)[0];
            temp.index = undoArrayToObject(index);
            return temp;
          }
          out.values = newValues;
          out.index = undoArrayToObject(columns);
          out = out.transpose();
        }
        return out;
      }
      module.exports = dfFilter;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-get.js
  var require_df_get = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-get.js"(exports, module) {
      var assert = require_assert();
      var isNumber = require_is_number();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var set = require_set();
      function dfGet(df, rows, cols) {
        if (isString(rows) || isNumber(rows))
          rows = [rows];
        if (isString(cols) || isNumber(cols))
          cols = [cols];
        const types = set((rows || []).concat(cols || []).map((v) => typeof v));
        assert(
          types.length <= 2,
          "Only whole numbers and/or strings are allowed in `get` arrays!"
        );
        if (types.length === 1) {
          assert(
            types[0] === "string" || types[0] === "number",
            "Only whole numbers and/or strings are allowed in `get` arrays!"
          );
        }
        if (types.length === 2) {
          assert(
            types.indexOf("string") > -1,
            "Only whole numbers and/or strings are allowed in `get` arrays!"
          );
          assert(
            types.indexOf("number") > -1,
            "Only whole numbers and/or strings are allowed in `get` arrays!"
          );
        }
        if (!isUndefined(rows)) {
          rows = rows.map((r) => {
            if (isString(r)) {
              assert(df.index.indexOf(r) > -1, `Row "${r}" does not exist!`);
              return r;
            }
            if (isNumber(r)) {
              assert(r >= 0, `Index ${r} is out of bounds!`);
              assert(parseInt(r) === r, `Row numbers must be integers!`);
              assert(r < df.index.length, `Index ${r} is out of bounds!`);
              return df.index[r];
            }
          });
        }
        if (!isUndefined(cols)) {
          cols = cols.map((c) => {
            if (isString(c)) {
              assert(df.columns.indexOf(c) > -1, `Column "${c}" does not exist!`);
              return c;
            }
            if (isNumber(c)) {
              assert(c >= 0, `Column ${c} is out of bounds!`);
              assert(parseInt(c) === c, `Column numbers must be integers!`);
              assert(c < df.columns.length, `Column ${c} is out of bounds!`);
              return df.columns[c];
            }
          });
        }
        return df.getSubsetByNames(rows, cols);
      }
      module.exports = dfGet;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/sort.js
  var require_sort = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/sort.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isFunction = require_is_function();
      var isSeries = require_is_series();
      var isUndefined = require_is_undefined();
      function alphaSort(a, b) {
        try {
          if (a < b)
            return -1;
          if (a > b)
            return 1;
          return 0;
        } catch (e) {
          a = typeof a === "object" && a !== null ? JSON.stringify(a) : a.toString();
          b = typeof b === "object" && b !== null ? JSON.stringify(b) : b.toString();
          if (a < b)
            return -1;
          if (a > b)
            return 1;
          return 0;
        }
      }
      function sort(arr, fn) {
        if (isUndefined(fn))
          fn = alphaSort;
        if (isDataFrame(arr) || isSeries(arr)) {
          return arr.sort(...Object.values(arguments).slice(1));
        }
        assert(
          isArray(arr),
          "The `sort` function only works on arrays, Series, and DataFrames!"
        );
        assert(
          isFunction(fn),
          "The second parameter of the `sort` function must be a comparison function!"
        );
        const out = arr.slice();
        out.sort(fn);
        return out;
      }
      module.exports = sort;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-get-dummies.js
  var require_df_get_dummies = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-get-dummies.js"(exports, module) {
      var assert = require_assert();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var set = require_set();
      var sort = require_sort();
      function camelify(text) {
        const temp = text.toLowerCase();
        let out = "";
        for (let i = 0; i < temp.length; i++) {
          const char = temp[i];
          if (char.match(/[a-z0-9]/g)) {
            out += char;
          } else {
            out += " ";
          }
        }
        const words = out.split(" ").filter((word) => word.length > 0);
        return words[0] + words.slice(1).map((word) => word[0].toUpperCase() + word.substring(1)).join("");
      }
      function dfGetDummies(DataFrame, df, columns) {
        if (isUndefined(columns)) {
          columns = df.columns;
        } else if (isString(columns)) {
          columns = [columns];
        }
        const temp = {};
        columns.forEach((col) => {
          assert(
            isString(col),
            "You must pass either a string or a one-dimensional array of strings into the `getDummies` (AKA `oneHotEncode`) method!"
          );
          const colIndex = df.columns.indexOf(col);
          assert(
            colIndex > -1,
            `The given DataFrame does not have a column called "${col}"!`
          );
          const values = df.values.map((row) => row[colIndex]);
          const valuesSet = sort(set(values));
          values.forEach((value) => {
            valuesSet.forEach((orig) => {
              const colName = col + "_" + camelify(orig.toString());
              if (!temp[colName]) {
                temp[colName] = [];
              }
              if (value === orig) {
                temp[colName].push(1);
              } else {
                temp[colName].push(0);
              }
            });
          });
        });
        const out = new DataFrame(temp);
        out.index = df.index;
        return out;
      }
      module.exports = dfGetDummies;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-get-subset-by-indices.js
  var require_df_get_subset_by_indices = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-get-subset-by-indices.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isNumber = require_is_number();
      var isUndefined = require_is_undefined();
      var isWholeNumber = require_is_whole_number();
      var range = require_range();
      var shape = require_shape();
      function dfGetSubsetByIndices(df, rowIndices, colIndices) {
        const dataShape = df.shape;
        if (isUndefined(rowIndices))
          rowIndices = range(0, dataShape[0]);
        if (isUndefined(colIndices))
          colIndices = range(0, dataShape[1]);
        if (isNumber(rowIndices))
          rowIndices = [rowIndices];
        if (isNumber(colIndices))
          colIndices = [colIndices];
        assert(
          isArray(rowIndices) && isArray(colIndices),
          "The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."
        );
        assert(
          shape(rowIndices).length === 1 && shape(colIndices).length === 1,
          "The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."
        );
        assert(
          rowIndices.length > 0,
          "The `rowIndices` array must contain at least one index."
        );
        assert(
          colIndices.length > 0,
          "The `colIndices` array must contain at least one index."
        );
        rowIndices.forEach((rowIndex) => {
          assert(
            isWholeNumber(rowIndex),
            "The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."
          );
          assert(
            rowIndex < df.index.length,
            `The row index ${rowIndex} is out of bounds.`
          );
        });
        colIndices.forEach((colIndex) => {
          assert(
            isWholeNumber(colIndex),
            "The `rowIndices` and `colIndices` parameters must be 1-dimensional arrays of whole numbers."
          );
          assert(
            colIndex < df.columns.length,
            `The column index ${colIndex} is out of bounds.`
          );
        });
        const rows = rowIndices.map((i) => df.index[i]);
        const cols = colIndices.map((i) => df.columns[i]);
        return df.getSubsetByNames(rows, cols);
      }
      module.exports = dfGetSubsetByIndices;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-get-subset-by-names.js
  var require_df_get_subset_by_names = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-get-subset-by-names.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var shape = require_shape();
      function dfGetSubsetByNames(DataFrame, Series, df, rows, cols) {
        if (isUndefined(rows))
          rows = df.index;
        if (isUndefined(cols))
          cols = df.columns;
        if (isString(rows))
          rows = [rows];
        if (isString(cols))
          cols = [cols];
        assert(
          isArray(rows) && isArray(cols),
          "The `rows` and `cols` parameters must be 1-dimensional arrays of strings."
        );
        assert(
          shape(rows).length === 1 && shape(cols).length === 1,
          "The `rows` and `cols` parameters must be 1-dimensional arrays of strings."
        );
        assert(
          rows.length > 0,
          "The `rows` array must contain at least one row name."
        );
        assert(
          cols.length > 0,
          "The `cols` array must contain at least one column name."
        );
        rows.forEach((row) => {
          assert(
            isString(row),
            "The `rows` and `cols` parameters must be 1-dimensional arrays of strings."
          );
          assert(
            df.index.indexOf(row) > -1,
            `The row name "${row}" does not exist in the list of rows.`
          );
        });
        cols.forEach((col) => {
          assert(
            isString(col),
            "The `rows` and `cols` parameters must be 1-dimensional arrays of strings."
          );
          assert(
            df.columns.indexOf(col) > -1,
            `The column name "${col}" does not exist in the list of columns.`
          );
        });
        const values = rows.map((row) => {
          return cols.map((col) => {
            return df.values[df.index.indexOf(row)][df.columns.indexOf(col)];
          });
        });
        if (rows.length === 1 && cols.length === 1) {
          return flatten(values)[0];
        }
        if (rows.length === 1) {
          const out2 = new Series(flatten(values));
          out2.name = rows[0];
          out2.index = cols;
          return out2;
        }
        if (cols.length === 1) {
          const out2 = new Series(flatten(values));
          out2.name = cols[0];
          out2.index = rows;
          return out2;
        }
        const out = new DataFrame(values);
        out.columns = cols;
        out.index = rows;
        return out;
      }
      module.exports = dfGetSubsetByNames;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-print.js
  var require_df_print = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-print.js"(exports, module) {
      var isString = require_is_string();
      var range = require_range();
      function dfPrint(DataFrame, Series, df) {
        function truncate(s, maxLength2) {
          if (isString(s)) {
            if (s.length > maxLength2) {
              return s.substring(0, maxLength2 - 3) + "...";
            } else {
              return s;
            }
          } else {
            return s;
          }
        }
        if (df.isEmpty) {
          console.table({});
          console.log("Shape:", [0, 0], "\n");
          return df;
        }
        const maxRows = typeof window === "undefined" ? 20 : 10;
        const halfMaxRows = parseInt(maxRows / 2);
        const maxColumns = typeof process === "undefined" ? 10 : Math.floor(process.stdout.columns / 24) - 1;
        const halfMaxColumns = parseInt(maxColumns / 2);
        const tempRows = maxRows > df.index.length ? null : range(0, halfMaxRows).concat(
          range(df.index.length - halfMaxRows, df.index.length)
        );
        const tempColumns = maxColumns > df.columns.length ? null : range(0, halfMaxColumns).concat(
          range(df.columns.length - halfMaxColumns, df.columns.length)
        );
        let temp = df.get(tempRows, tempColumns);
        if (temp instanceof Series) {
          if (df.shape[0] === 1) {
            temp = new DataFrame([temp.values]);
            temp.index = df.index;
            temp.columns = new Series(df.columns).get(tempColumns).values;
          } else if (df.shape[1] === 1) {
            temp = new DataFrame([temp.values]).transpose();
            temp.index = new Series(df.index).get(tempRows).values;
            temp.columns = df.columns;
          }
        }
        if (maxRows <= df.index.length) {
          temp._index.splice(halfMaxRows, 0, "...");
          temp._values.splice(
            halfMaxRows,
            0,
            range(0, temp.columns.length).map(() => "...")
          );
        }
        if (maxColumns <= df.columns.length) {
          temp._columns.splice(halfMaxColumns, 0, "...");
          temp._values = temp._values.map((row) => {
            row.splice(halfMaxColumns, 0, "...");
            return row;
          });
        }
        const maxLength = 28;
        if (temp instanceof Series) {
          temp.values = temp.values.map((value) => truncate(value, maxLength));
          temp.name = truncate(temp.name, maxLength);
          temp.index = temp.index.map((row) => truncate(row, maxLength));
        } else {
          temp.values = temp.values.map((row) => {
            return row.map((value) => truncate(value, maxLength));
          });
          temp.columns = temp.columns.map((col) => truncate(col, maxLength));
          temp.index = temp.index.map((row) => truncate(row, maxLength));
        }
        console.table(temp.toObject());
        console.log("Shape:", df.shape, "\n");
        return df;
      }
      module.exports = dfPrint;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/helpers/left-pad.js
  var require_left_pad = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/helpers/left-pad.js"(exports, module) {
      var assert = require_assert();
      var isNumber = require_is_number();
      function leftPad(x, maxLength) {
        assert(isNumber(x), "The `leftPad` function only works on numbers!");
        let out = x.toString();
        while (out.length < maxLength)
          out = "0" + out;
        return out;
      }
      module.exports = leftPad;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-reset-index.js
  var require_df_reset_index = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-reset-index.js"(exports, module) {
      var leftPad = require_left_pad();
      var range = require_range();
      function dfResetIndex(df, shouldSkipCopying) {
        const out = shouldSkipCopying ? df : df.copy();
        out.index = range(0, df.shape[0]).map((i) => {
          return "row" + leftPad(i, (out.index.length - 1).toString().length);
        });
        return out;
      }
      module.exports = dfResetIndex;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/product.js
  var require_product = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/product.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function product(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return product(arr.values);
        }
        assert(
          isArray(arr),
          "The `product` function only works on arrays, Series, and DataFrames!"
        );
        try {
          if (arr.length === 0)
            return NaN;
          return flatten(arr).reduce((a, b) => a * b, 1);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = product;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/reshape.js
  var require_reshape = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/reshape.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      var product = require_product();
      var shape = require_shape();
      function reshape(x, newShape) {
        if (isDataFrame(x) || isSeries(x)) {
          return reshape(x.values, newShape);
        }
        assert(
          isArray(x),
          "The first argument passed into the `reshape` function must be an array!"
        );
        if (isNumber(newShape))
          newShape = [newShape];
        assert(
          isArray(newShape),
          "The second argument passed into the `reshape` function must be a whole number or a one-dimensional array of whole numbers!"
        );
        assert(
          shape(newShape).length === 1,
          "The first argument passed into the `reshape` function must be a whole number or a one-dimensional array of whole numbers!"
        );
        newShape.forEach((v) => {
          assert(
            isNumber(v) && parseInt(v) === v && v > 0,
            "The first argument passed into the `reshape` function must be a whole number or a one-dimensional array of whole numbers!"
          );
        });
        if (newShape.length === 0) {
          return flatten(x);
        }
        const temp = flatten(x);
        if (newShape.length === 1 && newShape[0] === temp.length) {
          return temp;
        }
        assert(
          product(newShape) === temp.length,
          "The new shape doesn't match the number of values available in `x` (the first argument passed into the `reshape` function)!"
        );
        const out = [];
        const step = parseInt(temp.length / newShape[0]);
        for (let i = 0; i < newShape[0]; i++) {
          const row = temp.slice(i * step, (i + 1) * step);
          out.push(reshape(row, newShape.slice(1)));
        }
        return out;
      }
      module.exports = reshape;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/random.js
  var require_random = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/random.js"(exports, module) {
      var { copy } = require_copy();
      var assert = require_assert();
      var isArray = require_is_array();
      var isNumber = require_is_number();
      var isUndefined = require_is_undefined();
      var ndarray = require_ndarray();
      var product = require_product();
      var reshape = require_reshape();
      var MAX = Math.pow(2, 64);
      var s = [];
      seed(parseInt(Math.random() * MAX));
      function splitmix64(state, n) {
        state = uint(state);
        function helper() {
          state += uint("0x9e3779b97f4a7c15");
          let z = copy(state);
          z = (z ^ z >> BigInt(30)) * uint("0xbf58476d1ce4e5b9");
          z = (z ^ z >> BigInt(27)) * uint("0x94d049bb133111eb");
          return z ^ z >> BigInt(31);
        }
        const out = [];
        for (let i = 0; i < n; i++)
          out.push(helper());
        return out;
      }
      function uint(x) {
        return BigInt.asUintN(64, BigInt(x));
      }
      function rotl(x, k) {
        x = uint(x);
        k = BigInt(k);
        return uint(uint(x << k) | uint(x >> uint(BigInt(64) - k)));
      }
      function seed(val) {
        if (!isUndefined(val)) {
          assert(
            isNumber(val),
            "If passing a value into the `seed` function, then that value must be an integer!"
          );
          const temp = splitmix64(parseInt(val), 4);
          s[0] = temp[0];
          s[1] = temp[1];
          s[2] = temp[2];
          s[3] = temp[3];
        } else {
          return copy(s);
        }
      }
      function next() {
        const result = uint(rotl(s[0] + s[3], 23) + s[0]);
        const t = uint(s[1] << BigInt(17));
        s[2] = uint(s[2] ^ s[0]);
        s[3] = uint(s[3] ^ s[1]);
        s[1] = uint(s[1] ^ s[2]);
        s[0] = uint(s[0] ^ s[3]);
        s[2] = uint(s[2] ^ t);
        s[3] = rotl(s[3], 45);
        return parseInt(result) / MAX;
      }
      function random(shape) {
        if (isUndefined(shape))
          return next();
        if (!isArray(shape))
          shape = [shape];
        return reshape(ndarray(product(shape)).map(next), shape);
      }
      module.exports = { random, seed };
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/shuffle.js
  var require_shuffle = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/shuffle.js"(exports, module) {
      var { random } = require_random();
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function shuffle(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return arr.shuffle(...Object.values(arguments).slice(1));
        }
        assert(
          isArray(arr),
          "The `shuffle` function only works on arrays, Series, and DataFrames!"
        );
        const out = [];
        const temp = arr.slice();
        for (let i = 0; i < arr.length; i++) {
          const index = parseInt(random() * temp.length);
          out.push(temp.splice(index, 1)[0]);
        }
        return out;
      }
      module.exports = shuffle;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-shuffle.js
  var require_df_shuffle = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-shuffle.js"(exports, module) {
      var assert = require_assert();
      var isUndefined = require_is_undefined();
      var shuffle = require_shuffle();
      function dfShuffle(df, axis) {
        if (isUndefined(axis))
          axis = 0;
        assert(
          axis === 0 || axis === 1,
          "The `axis` parameter to the `shuffle` must be 0, 1, or undefined."
        );
        return df.get(
          axis === 0 ? shuffle(df.index) : null,
          axis === 1 ? shuffle(df.columns) : null
        );
      }
      module.exports = dfShuffle;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/is-boolean.js
  var require_is_boolean = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/is-boolean.js"(exports, module) {
      function isBoolean(x) {
        return typeof x === "boolean";
      }
      module.exports = isBoolean;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-sort.js
  var require_df_sort = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-sort.js"(exports, module) {
      var { random } = require_random();
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isBoolean = require_is_boolean();
      var isFunction = require_is_function();
      var isNumber = require_is_number();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var range = require_range();
      var shape = require_shape();
      var sort = require_sort();
      function dfSort(df, a, b) {
        if (isFunction(a)) {
          return dfSortByFunction(df, a, b);
        } else {
          return dfSortByColumns(df, a, b);
        }
      }
      function dfSortByFunction(df, fn, axis) {
        axis = isUndefined(axis) ? 0 : axis;
        assert(
          isFunction(fn),
          "When sorting a DataFrame using a function, the first argument to the `sort` method must be a function!"
        );
        assert(
          isNumber(axis),
          "When sorting a DataFrame using a function, the second argument to the `sort` method must be null, undefined, 0, or 1 to indicate the axis along which the data should be sorted! An axis of 0 means that the rows will be sorted relative to each other, whereas an axis of 1 means that the columns will be sorted relative to each other."
        );
        if (axis === 0) {
          const index = sort(df.index, (a, b) => {
            return fn(df.get(a, null), df.get(b, null));
          });
          return df.get(index, null);
        } else {
          const columns = sort(df.columns, (a, b) => {
            return fn(df.get(null, a), df.get(null, b));
          });
          return df.get(null, columns);
        }
      }
      function dfSortByColumns(df, cols, directions) {
        let out = df.copy();
        const indexID = random().toString();
        out = out.assign(indexID, out.index);
        if (isUndefined(cols)) {
          cols = [indexID];
          directions = [true];
        }
        if (isNumber(cols) || isString(cols)) {
          cols = [cols];
          if (isBoolean(directions) || isString(directions))
            directions = [directions];
        }
        assert(
          isArray(cols),
          "The first parameter of the `sort` method must be (1) a string or index representing a column name or index, respectively; (2) a 1-dimensional array of strings and/or indices; or (3) null."
        );
        assert(
          shape(cols).length === 1,
          "The first parameter of the `sort` method must be (1) a string or index representing a column name or index, respectively; (2) a 1-dimensional array of strings and/or indices; or (3) null."
        );
        if (isUndefined(directions))
          directions = range(0, cols.length).map(() => true);
        assert(
          isArray(directions),
          "The second parameter of the `sort` method must be (1) a string or boolean representing the sort direction ('ascending' / 'descending', or true / false); (2) a 1-dimensional array of strings and/or booleans; or (3) null."
        );
        assert(
          shape(directions).length === 1,
          "The second parameter of the `sort` method must be (1) a string or boolean representing the sort direction ('ascending' / 'descending', or true / false); (2) a 1-dimensional array of strings and/or booleans; or (3) null."
        );
        assert(
          cols.length === directions.length,
          "The arrays passed into the `sort` method must be equal in length."
        );
        cols = cols.map((col) => {
          assert(
            isString(col) || isNumber(col),
            "Column references can either be column names (as strings) or column indices (as whole numbers)."
          );
          if (isString(col)) {
            const index = out.columns.indexOf(col);
            assert(index > -1, `The column "${col}" does not exist!`);
            return index;
          }
          if (isNumber(col)) {
            assert(parseInt(col) === col, "Column indices must be whole numbers!");
            assert(col >= 0, `The column index ${col} is out of bounds!`);
            assert(col < out.columns.length, `The index ${col} is out of bounds!`);
            return col;
          }
        });
        directions = directions.map((dir) => {
          assert(
            isString(dir) || isBoolean(dir),
            "Direction references can either be strings ('ascending' or 'descending') or booleans (true or false)."
          );
          if (isString(dir)) {
            const value = dir.trim().toLowerCase();
            assert(
              value === "ascending" || value === "descending",
              "Direction references can either be strings ('ascending' or 'descending') or booleans (true or false)."
            );
            return value === "ascending";
          }
          if (isBoolean(dir)) {
            return dir;
          }
        });
        out.values = sort(out.values, (a, b) => {
          let counter = 0;
          while (a[cols[counter]] === b[cols[counter]] && counter < cols.length) {
            counter++;
          }
          const isAscending = directions[counter];
          if (a[cols[counter]] === b[cols[counter]])
            return 0;
          if (a[cols[counter]] < b[cols[counter]])
            return isAscending ? -1 : 1;
          if (a[cols[counter]] > b[cols[counter]])
            return isAscending ? 1 : -1;
        });
        out.index = flatten(out.get(null, indexID).values);
        out = out.dropColumns(indexID);
        return out;
      }
      module.exports = dfSort;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-to-json-string.js
  var require_df_to_json_string = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-to-json-string.js"(exports, module) {
      function dfToJSONString(df, axis) {
        return JSON.stringify(df.toObject(axis));
      }
      module.exports = dfToJSONString;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-to-json.js
  var require_df_to_json = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-to-json.js"(exports, module) {
      var MathError = require_math_error();
      var dfToJSONString = require_df_to_json_string();
      function toJSON(df, filename, axis) {
        const out = dfToJSONString(df, axis);
        let downloadedInBrowser = false;
        let wroteToDiskInNode = false;
        let browserError, nodeError;
        try {
          let newFilename = filename;
          if (filename.includes("/")) {
            const parts = filename.split("/");
            newFilename = parts[parts.length - 1];
          }
          const a = document.createElement("a");
          a.href = `data:application/json;charset=utf-8,${encodeURIComponent(out)}`;
          a.download = newFilename;
          a.dispatchEvent(new MouseEvent("click"));
          downloadedInBrowser = true;
        } catch (e) {
          browserError = e;
        }
        try {
          const fs = __require("fs");
          const path = __require("path");
          fs.writeFileSync(path.resolve(filename), out, "utf8");
          wroteToDiskInNode = true;
        } catch (e) {
          nodeError = e;
        }
        if (!downloadedInBrowser && !wroteToDiskInNode) {
          if (typeof window !== "undefined") {
            throw new MathError(browserError);
          } else if (typeof module !== "undefined") {
            throw new MathError(nodeError);
          } else {
            throw new MathError(
              "I don't know what's going wrong, but it doesn't seem like you're in Node or the browser, and we couldn't download and/or write the file to disk!"
            );
          }
        }
        return df;
      }
      module.exports = toJSON;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/df-to-object.js
  var require_df_to_object = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/df-to-object.js"(exports, module) {
      var assert = require_assert();
      var isUndefined = require_is_undefined();
      function dfToObject(df, axis) {
        if (isUndefined(axis)) {
          axis = 0;
        } else {
          assert(
            axis === 0 || axis === 1,
            "The axis parameter of the `toObject` method must be undefined, 0, or 1. An axis of 0 indicates that the returned object should be organized first by rows and then by columns. An axis of 1 indicates that the returned object should be organized first by columns and then by rows."
          );
        }
        const out = {};
        if (axis === 0) {
          df.index.forEach((rowName, i) => {
            const temp = {};
            df.columns.forEach((colName, j) => {
              temp[colName] = df.values[i][j];
            });
            out[rowName] = temp;
          });
        } else {
          df.columns.forEach((colName, j) => {
            const temp = {};
            df.index.forEach((rowName, i) => {
              temp[rowName] = df.values[i][j];
            });
            out[colName] = temp;
          });
        }
        return out;
      }
      module.exports = dfToObject;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/transpose.js
  var require_transpose = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/transpose.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      var ndarray = require_ndarray();
      var reverse = require_reverse();
      var shape = require_shape();
      function transpose(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return arr.transpose();
        }
        assert(
          isArray(arr),
          "The `transpose` function only works on arrays, Series, and DataFrames!"
        );
        const theShape = shape(arr);
        assert(
          theShape.length <= 2,
          "I'm not smart enough to know how to transpose arrays that have more than 2 dimensions. Sorry for the inconvenience! Please only pass 1- or 2-dimensional arrays into the `transpose` function!"
        );
        if (theShape.length === 1) {
          return reverse(arr);
        } else if (theShape.length === 2) {
          const out = ndarray(reverse(theShape));
          for (let row = 0; row < theShape[0]; row++) {
            for (let col = 0; col < theShape[1]; col++) {
              out[col][row] = arr[row][col];
            }
          }
          return out;
        }
      }
      module.exports = transpose;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-append.js
  var require_series_append = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-append.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isNested = require_is_nested();
      var isSeries = require_is_series();
      var shape = require_shape();
      function seriesAppend(Series, series, x) {
        if (isSeries(x)) {
          return new Series(series.values.concat(x.values));
        }
        if (isArray(x)) {
          const xShape = shape(x);
          assert(
            xShape.length === 1 && !isNested(xShape),
            "Only vectors can be appended to Series!"
          );
          const out = series.copy();
          x.forEach((v, i) => {
            out._values.push(v);
            out._index.push("item" + (series.values.length + i));
          });
          return out;
        }
        assert(!isDataFrame(x), "DataFrames cannot be appended to Series!");
        return seriesAppend(series, [x]);
      }
      module.exports = seriesAppend;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-apply.js
  var require_series_apply = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-apply.js"(exports, module) {
      var assert = require_assert();
      var isFunction = require_is_function();
      function seriesApply(series, fn) {
        assert(
          isFunction(fn),
          "The parameter to the `apply` method must be a function."
        );
        const out = series.copy();
        out._values = out._values.map((v, i) => fn(v, i));
        return out;
      }
      module.exports = seriesApply;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-drop-missing.js
  var require_series_drop_missing = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-drop-missing.js"(exports, module) {
      var isUndefined = require_is_undefined();
      function seriesDropMissing(series) {
        const out = series.copy();
        const outIndex = [];
        out._values = out.values.filter((v, i) => {
          if (isUndefined(v)) {
            return false;
          } else {
            outIndex.push(out.index[i]);
            return true;
          }
        });
        out._index = outIndex;
        return out;
      }
      module.exports = seriesDropMissing;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-drop-nan.js
  var require_series_drop_nan = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-drop-nan.js"(exports, module) {
      var isNumber = require_is_number();
      function seriesDropNaN(Series, series) {
        const index = [];
        const values = [];
        series.values.forEach((value, i) => {
          if (isNumber(value)) {
            values.push(value);
            index.push(series.index[i]);
          }
        });
        const out = new Series(values);
        out.name = series.name;
        out.index = index;
        return out;
      }
      module.exports = seriesDropNaN;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-filter.js
  var require_series_filter = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-filter.js"(exports, module) {
      var { copy } = require_copy();
      function seriesFilter(Series, series, fn) {
        let out = series.copy();
        const index = copy(out.index);
        const indicesToRemove = [];
        const newValues = out.values.filter((value, i) => {
          const shouldKeep = fn(value, i, out.values);
          if (!shouldKeep)
            indicesToRemove.push(out.index[i]);
          return shouldKeep;
        });
        indicesToRemove.forEach((i) => {
          index.splice(index.indexOf(i), 1);
        });
        if (newValues.length === 0) {
          out = new Series();
          out.name = series.name;
          return out;
        }
        out.values = newValues;
        out.index = index;
        return out;
      }
      module.exports = seriesFilter;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-get.js
  var require_series_get = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-get.js"(exports, module) {
      var assert = require_assert();
      var isNumber = require_is_number();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var set = require_set();
      function seriesGet(series, indices) {
        if (isString(indices) || isNumber(indices))
          indices = [indices];
        const types = set((indices || []).map((v) => typeof v));
        assert(
          types.length <= 2,
          "Only whole numbers and/or strings are allowed in `get` arrays!"
        );
        if (types.length === 1) {
          assert(
            types[0] === "string" || types[0] === "number",
            "Only whole numbers and/or strings are allowed in `get` arrays!"
          );
        }
        if (types.length === 2) {
          assert(
            types.indexOf("string") > -1,
            "Only whole numbers and/or strings are allowed in `get` arrays!"
          );
          assert(
            types.indexOf("number") > -1,
            "Only whole numbers and/or strings are allowed in `get` arrays!"
          );
        }
        if (!isUndefined(indices)) {
          indices = indices.map((i) => {
            if (typeof i === "string") {
              assert(series.index.indexOf(i) > -1, `Index "${i}" does not exist!`);
              return i;
            }
            if (typeof i === "number") {
              assert(i >= 0, `Index ${i} is out of bounds!`);
              assert(parseInt(i) === i, `Indices must be integers!`);
              assert(i < series.index.length, `Index ${i} is out of bounds!`);
              return series.index[i];
            }
          });
        }
        return series.getSubsetByNames(indices);
      }
      module.exports = seriesGet;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-get-subset-by-indices.js
  var require_series_get_subset_by_indices = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-get-subset-by-indices.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isUndefined = require_is_undefined();
      var isWholeNumber = require_is_whole_number();
      var range = require_range();
      var shape = require_shape();
      function seriesGetSubsetByIndices(series, indices) {
        const dataShape = series.shape;
        if (isUndefined(indices))
          indices = range(0, dataShape[0]);
        assert(
          isArray(indices),
          "The `indices` array must be 1-dimensional array of whole numbers."
        );
        assert(
          shape(indices).length === 1,
          "The `indices` array must be a 1-dimensional array of whole numbers."
        );
        assert(
          indices.length > 0,
          "The `indices` array must contain at least one index."
        );
        indices.forEach((index) => {
          assert(
            isWholeNumber(index),
            "The `indices` array must be a 1-dimensional array of whole numbers."
          );
          assert(
            index < series.index.length,
            `The row index ${index} is out of bounds.`
          );
        });
        const rows = indices.map((i) => series.index[i]);
        return series.getSubsetByNames(rows);
      }
      module.exports = seriesGetSubsetByIndices;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-get-subset-by-names.js
  var require_series_get_subset_by_names = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-get-subset-by-names.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var shape = require_shape();
      function seriesGetSubsetByNames(Series, series, indices) {
        if (isUndefined(indices))
          indices = series.index;
        assert(
          isArray(indices),
          "The `indices` array must be a 1-dimensional array of strings."
        );
        assert(
          shape(indices).length === 1,
          "The `indices` array must be a 1-dimensional array of strings."
        );
        assert(
          indices.length > 0,
          "The `indices` array must contain at least one index name."
        );
        indices.forEach((name) => {
          assert(isString(name), "The `indices` array must contain only strings.");
          assert(
            series.index.indexOf(name) > -1,
            `The name "${name}" does not exist in the index.`
          );
        });
        const values = indices.map((name) => {
          return series.values[series.index.indexOf(name)];
        });
        if (values.length === 1)
          return values[0];
        const out = new Series(values);
        out.index = indices;
        out.name = series.name;
        return out;
      }
      module.exports = seriesGetSubsetByNames;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-print.js
  var require_series_print = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-print.js"(exports, module) {
      var { copy } = require_copy();
      var range = require_range();
      function seriesPrint(series) {
        let temp = series.copy();
        const maxRows = typeof window === "undefined" ? 20 : 10;
        if (temp.index.length > maxRows) {
          temp = temp.get(
            range(0, maxRows / 2).concat(
              range(temp.index.length - maxRows / 2, temp.index.length)
            )
          );
          const tempIndex = copy(temp.index);
          tempIndex.splice(parseInt(tempIndex.length / 2), 0, "...");
          temp.values.push("...");
          temp.index.push("...");
          temp = temp.get(tempIndex);
        }
        const out = {};
        temp.values.forEach((value, i) => {
          const obj = {};
          obj[temp.name] = value;
          out[temp.index[i]] = obj;
        });
        console.table(out);
        console.log("Shape:", series.shape, "\n");
        return series;
      }
      module.exports = seriesPrint;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-shuffle.js
  var require_series_shuffle = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-shuffle.js"(exports, module) {
      var shuffle = require_shuffle();
      function seriesShuffle(series) {
        const out = series.copy();
        return out.get(shuffle(out.index));
      }
      module.exports = seriesShuffle;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-sort.js
  var require_series_sort = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-sort.js"(exports, module) {
      var assert = require_assert();
      var isFunction = require_is_function();
      var isUndefined = require_is_undefined();
      var sort = require_sort();
      var transpose = require_transpose();
      function seriesSort(Series, series, fn) {
        fn = fn || ((a, b) => a < b ? -1 : 1);
        assert(
          isUndefined(fn) || isFunction(fn),
          "You must pass undefined, null, or a comparison function as the second argument to the `sort` method!"
        );
        const pairs = transpose([series.values, series.index]);
        const temp = sort(pairs, (aPair, bPair) => {
          return fn(aPair[0], bPair[0]);
        });
        const newValues = [];
        const newIndex = [];
        temp.forEach((pair) => {
          newValues.push(pair[0]);
          newIndex.push(pair[1]);
        });
        const out = new Series();
        out._values = newValues;
        out._index = newIndex;
        out.name = series.name;
        return out;
      }
      module.exports = seriesSort;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-sort-by-index.js
  var require_series_sort_by_index = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-sort-by-index.js"(exports, module) {
      var sort = require_sort();
      var transpose = require_transpose();
      function seriesSortByIndex(Series, series) {
        let temp = transpose([series.values, series.index]);
        temp = transpose(
          sort(temp, (a, b) => {
            if (a[1] === b[1])
              return 0;
            if (a[1] < b[1])
              return -1;
            if (a[1] > b[1])
              return 1;
          })
        );
        const out = new Series(temp[0]);
        out.index = temp[1];
        out.name = series.name;
        return out;
      }
      module.exports = seriesSortByIndex;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/series-to-object.js
  var require_series_to_object = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/series-to-object.js"(exports, module) {
      function seriesToObject(series) {
        const out = {};
        out[series.name] = {};
        series.index.forEach((index, i) => {
          out[series.name][index] = series.values[i];
        });
        return out;
      }
      module.exports = seriesToObject;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/series/index.js
  var require_series = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/series/index.js"(exports, module) {
      var { copy } = require_copy();
      var assert = require_assert();
      var isArray = require_is_array();
      var isString = require_is_string();
      var isUndefined = require_is_undefined();
      var leftPad = require_left_pad();
      var range = require_range();
      var reverse = require_reverse();
      var seriesAppend = require_series_append();
      var seriesApply = require_series_apply();
      var seriesDropMissing = require_series_drop_missing();
      var seriesDropNaN = require_series_drop_nan();
      var seriesFilter = require_series_filter();
      var seriesGet = require_series_get();
      var seriesGetSubsetByIndices = require_series_get_subset_by_indices();
      var seriesGetSubsetByNames = require_series_get_subset_by_names();
      var seriesPrint = require_series_print();
      var seriesShuffle = require_series_shuffle();
      var seriesSort = require_series_sort();
      var seriesSortByIndex = require_series_sort_by_index();
      var seriesToObject = require_series_to_object();
      var shape = require_shape();
      var transpose = require_transpose();
      var SERIES_SYMBOL = Symbol.for("@jrc03c/js-math-tools/series");
      module.exports = function(DataFrame) {
        class Series {
          static [Symbol.hasInstance](x) {
            try {
              return !!x._symbol && x._symbol === SERIES_SYMBOL;
            } catch (e) {
              return false;
            }
          }
          constructor(data) {
            const self2 = this;
            self2.name = "data";
            Object.defineProperty(self2, "_symbol", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: SERIES_SYMBOL
            });
            Object.defineProperty(self2, "_values", {
              value: [],
              configurable: true,
              enumerable: false,
              writable: true
            });
            Object.defineProperty(self2, "values", {
              configurable: true,
              enumerable: true,
              get() {
                return self2._values;
              },
              set(x) {
                assert(isArray(x), "The new values must be a 1-dimensional array!");
                const dataShape = shape(x);
                assert(
                  dataShape.length === 1,
                  "The new array of values must be 1-dimensional!"
                );
                if (dataShape[0] < self2._index.length) {
                  self2._index = self2._index.slice(0, dataShape[0]);
                } else if (dataShape[0] > self2._index.length) {
                  self2._index = self2._index.concat(
                    range(self2._index.length, dataShape[0]).map((i) => {
                      return "item" + leftPad(i, (x.length - 1).toString().length);
                    })
                  );
                }
                self2._values = x;
              }
            });
            Object.defineProperty(self2, "_index", {
              value: [],
              configurable: true,
              enumerable: false,
              writable: true
            });
            Object.defineProperty(self2, "index", {
              configurable: true,
              enumerable: true,
              get() {
                return self2._index;
              },
              set(x) {
                assert(
                  isArray(x),
                  "The new index must be a 1-dimensional array of strings!"
                );
                assert(
                  x.length === self2.shape[0],
                  "The new index must be the same length as the old index!"
                );
                assert(
                  shape(x).length === 1,
                  "The new index must be a 1-dimensional array of strings!"
                );
                x.forEach((value) => {
                  assert(isString(value), "All of the row names must be strings!");
                });
                self2._index = x;
              }
            });
            if (data) {
              if (data instanceof Series) {
                self2.name = data.name;
                self2.values = copy(data.values);
                self2.index = copy(data.index);
              } else if (isArray(data)) {
                const dataShape = shape(data);
                assert(
                  dataShape.length === 1,
                  "When passing an array into the constructor of a Series, the array must be 1-dimensional!"
                );
                self2.values = data;
              } else if (data instanceof Object) {
                const keys = Object.keys(data);
                assert(
                  keys.length === 1,
                  "When passing an object into the constructor of a Series, the object must have only 1 key-value pair, where the key is the name of the data and the value is the 1-dimensional array of values!"
                );
                const name = keys[0];
                const values = data[name];
                assert(
                  shape(values).length === 1,
                  "When passing an object into the constructor of a Series, the object must have only 1 key-value pair, where the key is the name of the data and the value is the 1-dimensional array of values!"
                );
                self2.name = name;
                self2.values = values.slice();
              }
            }
          }
          get shape() {
            const self2 = this;
            return shape(self2.values);
          }
          get length() {
            const self2 = this;
            return self2.shape[0];
          }
          get isEmpty() {
            const self2 = this;
            return self2.values.filter((v) => !isUndefined(v)).length === 0;
          }
          clear() {
            const self2 = this;
            const out = self2.copy();
            out.values.forEach((v, i) => {
              out.values[i] = void 0;
            });
            return out;
          }
          get(indices) {
            const self2 = this;
            return seriesGet(self2, indices);
          }
          getSubsetByNames(indices) {
            const self2 = this;
            return seriesGetSubsetByNames(Series, self2, indices);
          }
          getSubsetByIndices(indices) {
            const self2 = this;
            return seriesGetSubsetByIndices(self2, indices);
          }
          loc(indices) {
            const self2 = this;
            return self2.getSubsetByNames(indices);
          }
          iloc(indices) {
            const self2 = this;
            return self2.getSubsetByIndices(indices);
          }
          reverse() {
            const self2 = this;
            const out = new Series(reverse(self2.values));
            out.index = reverse(self2.index);
            out.name = self2.name;
            return out;
          }
          resetIndex() {
            const self2 = this;
            const out = self2.copy();
            out.index = range(0, self2.shape[0]).map((i) => {
              return "item" + leftPad(i, (out.index.length - 1).toString().length);
            });
            return out;
          }
          copy() {
            const self2 = this;
            const out = new Series();
            out._values = copy(self2.values);
            out._index = copy(self2.index);
            out.name = self2.name;
            return out;
          }
          append(x) {
            const self2 = this;
            return seriesAppend(Series, self2, x);
          }
          apply(fn) {
            const self2 = this;
            return seriesApply(self2, fn);
          }
          concat(x) {
            const self2 = this;
            return self2.append(x);
          }
          dropMissing(condition, threshold) {
            const self2 = this;
            return seriesDropMissing(self2, condition, threshold);
          }
          dropNaN() {
            const self2 = this;
            return seriesDropNaN(Series, self2);
          }
          toObject() {
            const self2 = this;
            return seriesToObject(self2);
          }
          print() {
            const self2 = this;
            return seriesPrint(self2);
          }
          shuffle() {
            const self2 = this;
            return seriesShuffle(self2);
          }
          sort(direction) {
            const self2 = this;
            return seriesSort(Series, self2, direction);
          }
          sortByIndex() {
            const self2 = this;
            return seriesSortByIndex(Series, self2);
          }
          filter(fn) {
            const self2 = this;
            return seriesFilter(Series, self2, fn);
          }
          toDataFrame() {
            const self2 = this;
            const out = new DataFrame(transpose([self2.values]));
            out.columns = [self2.name];
            out.index = self2.index;
            return out;
          }
          transpose() {
            const self2 = this;
            const out = self2.copy();
            out.values = reverse(out.values);
            out.index = reverse(out.index);
            return out;
          }
          getDummies() {
            const self2 = this;
            return self2.toDataFrame().getDummies();
          }
          oneHotEncode() {
            const self2 = this;
            return self2.getDummies();
          }
        }
        return Series;
      };
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dataframe/index.js
  var require_dataframe = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dataframe/index.js"(exports, module) {
      var { copy } = require_copy();
      var assert = require_assert();
      var count = require_count();
      var dfAppend = require_df_append();
      var dfApply = require_df_apply();
      var dfAssign = require_df_assign();
      var dfCopy = require_df_copy();
      var dfDrop = require_df_drop();
      var dfDropMissing = require_df_drop_missing();
      var dfDropNaN = require_df_drop_nan();
      var dfFilter = require_df_filter();
      var dfGet = require_df_get();
      var dfGetDummies = require_df_get_dummies();
      var dfGetSubsetByIndices = require_df_get_subset_by_indices();
      var dfGetSubsetByNames = require_df_get_subset_by_names();
      var dfPrint = require_df_print();
      var dfResetIndex = require_df_reset_index();
      var dfShuffle = require_df_shuffle();
      var dfSort = require_df_sort();
      var dfToJSON = require_df_to_json();
      var dfToJSONString = require_df_to_json_string();
      var dfToObject = require_df_to_object();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isObject = require_is_object();
      var isUndefined = require_is_undefined();
      var leftPad = require_left_pad();
      var ndarray = require_ndarray();
      var range = require_range();
      var shape = require_shape();
      var transpose = require_transpose();
      var DATAFRAME_SYMBOL = Symbol.for("@jrc03c/js-math-tools/dataframe");
      function makeKey(n) {
        const alpha = "abcdefghijklmnopqrstuvwxyz1234567890";
        let out = "";
        for (let i = 0; i < n; i++)
          out += alpha[parseInt(Math.random() * alpha.length)];
        return out;
      }
      var DataFrame = class {
        static [Symbol.hasInstance](x) {
          try {
            return !!x._symbol && x._symbol === DATAFRAME_SYMBOL;
          } catch (e) {
            return false;
          }
        }
        constructor(data) {
          const self2 = this;
          Object.defineProperty(self2, "_symbol", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: DATAFRAME_SYMBOL
          });
          Object.defineProperty(self2, "_values", {
            value: [],
            configurable: true,
            enumerable: false,
            writable: true
          });
          Object.defineProperty(self2, "values", {
            configurable: true,
            enumerable: true,
            get() {
              if (self2._values.length === 0 || !isUndefined(self2._values[0]) && self2._values[0].length === 0) {
                return [[]];
              }
              return self2._values;
            },
            set(x) {
              assert(isArray(x), "The new values must be a 2-dimensional array!");
              const dataShape = shape(x);
              assert(
                dataShape.length === 2,
                "The new array of values must be 2-dimensional!"
              );
              if (dataShape[0] < self2._index.length) {
                self2._index = self2._index.slice(0, dataShape[0]);
              } else if (dataShape[0] > self2._index.length) {
                self2._index = self2._index.concat(
                  range(self2._index.length, dataShape[0]).map((i) => {
                    return "row" + leftPad(i, (dataShape[0] - 1).toString().length);
                  })
                );
              }
              if (dataShape[1] < self2._columns.length) {
                self2._columns = self2._columns.slice(0, dataShape[1]);
              } else if (dataShape[1] > self2._columns.length) {
                self2._columns = self2._columns.concat(
                  range(self2._columns.length, dataShape[1]).map((i) => {
                    return "col" + leftPad(i, (dataShape[1] - 1).toString().length);
                  })
                );
              }
              self2._values = x;
            }
          });
          Object.defineProperty(self2, "_columns", {
            value: [],
            configurable: true,
            enumerable: false,
            writable: true
          });
          Object.defineProperty(self2, "columns", {
            configurable: true,
            enumerable: true,
            get() {
              return self2._columns;
            },
            set(x) {
              assert(
                isArray(x),
                "The new columns list must be a 1-dimensional array of strings!"
              );
              assert(
                self2.isEmpty || x.length === self2.shape[1],
                "The new columns list must be the same length as the old columns list!"
              );
              assert(
                shape(x).length === 1,
                "The new columns list must be a 1-dimensional array of strings!"
              );
              x = x.map((v) => {
                if (typeof v !== "string") {
                  v = JSON.stringify(v) || v.toString();
                }
                if (v.trim().length === 0) {
                  return "untitled_" + makeKey(8);
                }
                return v.trim();
              });
              const counts = (() => {
                const temp = count(x);
                const out = {};
                temp.forEach((obj) => {
                  out[obj.value] = obj.count;
                });
                return out;
              })();
              x = x.map((v) => {
                if (counts[v] > 1) {
                  return v + "_" + makeKey(8);
                }
                return v;
              });
              self2._columns = x;
            }
          });
          Object.defineProperty(self2, "_index", {
            value: [],
            configurable: true,
            enumerable: false,
            writable: true
          });
          Object.defineProperty(self2, "index", {
            configurable: true,
            enumerable: true,
            get() {
              return self2._index;
            },
            set(x) {
              assert(
                isArray(x),
                "The new index must be a 1-dimensional array of strings!"
              );
              assert(
                self2.isEmpty || x.length === self2.shape[0],
                "The new index must be the same length as the old index!"
              );
              assert(
                shape(x).length === 1,
                "The new index must be a 1-dimensional array of strings!"
              );
              x = x.map((v) => {
                if (typeof v !== "string") {
                  v = JSON.stringify(v) || v.toString();
                }
                if (v.trim().length === 0) {
                  return "untitled_" + makeKey(8);
                }
                return v.trim();
              });
              const counts = (() => {
                const temp = count(x);
                const out = {};
                temp.forEach((obj) => {
                  out[obj.value] = obj.count;
                });
                return out;
              })();
              x = x.map((v) => {
                if (counts[v] > 1) {
                  return v + "_" + makeKey(8);
                }
                return v;
              });
              self2._index = x;
            }
          });
          assert(
            isUndefined(data) || isObject(data) || isArray(data),
            "The `data` passed into the constructor of a DataFrame must be either (1) an object where the key-value pairs are (respectively) column names and 1-dimensional arrays of values, or (2) a 2-dimensional array of values."
          );
          if (data) {
            if (data instanceof DataFrame) {
              self2.values = copy(data.values);
              self2.columns = copy(data.columns);
              self2.index = copy(data.index);
            } else if (isArray(data)) {
              const dataShape = shape(data);
              assert(
                dataShape.length === 2,
                "The `data` array passed into the constructor of a DataFrame must be 2-dimensional!"
              );
              self2.values = data;
            } else {
              self2._columns = Object.keys(data);
              const temp = [];
              self2._columns.forEach((col) => {
                const values = data[col];
                temp.push(values);
              });
              self2._values = transpose(temp);
              const dataShape = shape(self2.values);
              self2._index = range(0, dataShape[0]).map((i) => {
                return "row" + leftPad(i, (dataShape[0] - 1).toString().length);
              });
            }
          }
        }
        get shape() {
          const self2 = this;
          return shape(self2.values);
        }
        get length() {
          const self2 = this;
          return self2.shape[0];
        }
        get width() {
          const self2 = this;
          return self2.shape[1];
        }
        get rows() {
          const self2 = this;
          return self2.index;
        }
        set rows(rows) {
          const self2 = this;
          self2.index = rows;
        }
        get isEmpty() {
          const self2 = this;
          return flatten(self2.values).length === 0;
        }
        clear() {
          const self2 = this;
          const out = new DataFrame(ndarray(self2.shape));
          out.columns = self2.columns.slice();
          out.index = self2.index.slice();
          return out;
        }
        get(rows, cols) {
          const self2 = this;
          if (arguments.length === 0) {
            return self2;
          }
          if (arguments.length === 1) {
            try {
              return self2.get(null, rows);
            } catch (e) {
              return self2.get(rows, null);
            }
          }
          return dfGet(self2, rows, cols);
        }
        getSubsetByNames(rows, cols) {
          const self2 = this;
          return dfGetSubsetByNames(DataFrame, Series, self2, rows, cols);
        }
        getSubsetByIndices(rowIndices, colIndices) {
          const self2 = this;
          return dfGetSubsetByIndices(self2, rowIndices, colIndices);
        }
        getDummies(columns) {
          const self2 = this;
          return dfGetDummies(DataFrame, self2, columns);
        }
        oneHotEncode(columns) {
          const self2 = this;
          return dfGetDummies(DataFrame, self2, columns);
        }
        transpose() {
          const self2 = this;
          const out = new DataFrame(transpose(self2.values));
          out.columns = self2.index.slice();
          out.index = self2.columns.slice();
          return out;
        }
        get T() {
          const self2 = this;
          return self2.transpose();
        }
        resetIndex(shouldSkipCopying) {
          const self2 = this;
          return dfResetIndex(self2, shouldSkipCopying);
        }
        copy() {
          const self2 = this;
          return dfCopy(DataFrame, self2);
        }
        assign(p1, p2) {
          const self2 = this;
          return dfAssign(DataFrame, Series, self2, p1, p2);
        }
        apply(fn, axis) {
          const self2 = this;
          return dfApply(DataFrame, Series, self2, fn, axis);
        }
        dropMissing(axis, condition, threshold) {
          const self2 = this;
          return dfDropMissing(DataFrame, Series, self2, axis, condition, threshold);
        }
        dropNaN(axis, condition, threshold) {
          const self2 = this;
          return dfDropNaN(DataFrame, self2, axis, condition, threshold);
        }
        drop(rows, cols) {
          const self2 = this;
          return dfDrop(DataFrame, Series, self2, rows, cols);
        }
        dropColumns(columns) {
          const self2 = this;
          return self2.drop(null, columns);
        }
        dropRows(rows) {
          const self2 = this;
          return self2.drop(rows, null);
        }
        toObject(axis) {
          const self2 = this;
          return dfToObject(self2, axis);
        }
        toJSONString(axis) {
          const self2 = this;
          return dfToJSONString(self2, axis);
        }
        saveAsJSON(filename, axis) {
          const self2 = this;
          return dfToJSON(self2, filename, axis);
        }
        print() {
          const self2 = this;
          return dfPrint(DataFrame, Series, self2);
        }
        sort(cols, directions) {
          const self2 = this;
          return dfSort(self2, cols, directions);
        }
        sortByIndex() {
          const self2 = this;
          return self2.sort();
        }
        filter(fn, axis) {
          const self2 = this;
          return dfFilter(DataFrame, Series, self2, fn, axis);
        }
        shuffle(axis) {
          const self2 = this;
          return dfShuffle(self2, axis);
        }
        append(x, axis) {
          const self2 = this;
          return dfAppend(self2, x, axis);
        }
        concat(x, axis) {
          const self2 = this;
          return self2.append(x, axis);
        }
        join(x, axis) {
          const self2 = this;
          return self2.append(x, axis);
        }
        toString() {
          const self2 = this;
          return JSON.stringify(self2);
        }
      };
      var Series = require_series()(DataFrame);
      module.exports = { DataFrame, Series };
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/max.js
  var require_max = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/max.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function max(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return max(arr.values);
        }
        assert(
          isArray(arr),
          "The `max` function only works on arrays, Series, and DataFrames!"
        );
        try {
          return Math.max(...flatten(arr));
        } catch (e) {
          return NaN;
        }
      }
      module.exports = max;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/vectorize.js
  var require_vectorize = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/vectorize.js"(exports, module) {
      var { DataFrame, Series } = require_dataframe();
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isEqual = require_is_equal();
      var isFunction = require_is_function();
      var isSeries = require_is_series();
      var max = require_max();
      var range = require_range();
      var shape = require_shape();
      function isArraySeriesOrDataFrame(x) {
        return isArray(x) || isSeries(x) || isDataFrame(x);
      }
      function vectorize(fn) {
        assert(
          isFunction(fn),
          "You must pass a function into the `vectorize` function!"
        );
        return function helper() {
          let hasSeries, hasDataFrames;
          const series = [];
          const dataframes = [];
          const childArrays = Object.keys(arguments).filter((key) => {
            const arg = arguments[key];
            if (isArray(arg)) {
              return true;
            } else if (isSeries(arg)) {
              hasSeries = true;
              series.push(arg);
              return true;
            } else if (isDataFrame(arg)) {
              hasDataFrames = true;
              dataframes.push(arg);
              return true;
            } else {
              return false;
            }
          }).map((key) => arguments[key]);
          childArrays.slice(0, -1).forEach((s, i) => {
            assert(
              isEqual(
                isArray(s) ? shape(s) : s.shape,
                isArray(childArrays[i + 1]) ? shape(childArrays[i + 1]) : childArrays[i + 1].shape
              ),
              `When passing multiple arrays into the \`${fn.name}\` function, all of the arrays must have the same shape!`
            );
          });
          if (childArrays.length > 0) {
            const maxLength = max(
              childArrays.map((a) => a.length ? a.length : a.values.length)
            );
            const out = range(0, maxLength).map((i) => {
              const args = Object.keys(arguments).map((key) => {
                if (isArraySeriesOrDataFrame(arguments[key])) {
                  if (isArray(arguments[key])) {
                    return arguments[key][i];
                  } else if (isSeries(arguments[key])) {
                    return arguments[key].values[i];
                  } else if (isDataFrame(arguments[key])) {
                    return arguments[key].values[i];
                  }
                } else {
                  return arguments[key];
                }
              });
              return helper(...args);
            });
            if (hasDataFrames) {
              try {
                if (dataframes.length === 1 && isEqual(shape(dataframes[0]), shape(out))) {
                  const temp = new DataFrame(out);
                  temp.index = dataframes[0].index.slice();
                  temp.columns = dataframes[0].columns.slice();
                  return temp;
                } else {
                  return new DataFrame(out);
                }
              } catch (e) {
                return out;
              }
            }
            if (hasSeries) {
              try {
                if (series.length === 1 && series[0].length === out.length) {
                  const temp = new Series(out);
                  temp.name = series[0].name;
                  temp.index = series[0].index.slice();
                  return temp;
                } else {
                  return new Series(out);
                }
              } catch (e) {
                return out;
              }
            }
            return out;
          } else {
            return fn(...arguments);
          }
        };
      }
      module.exports = vectorize;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/abs.js
  var require_abs = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/abs.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function abs(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.abs(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(abs);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/add.js
  var require_add = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/add.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function add() {
        try {
          let out = 0;
          const x = Object.values(arguments);
          for (let i = 0; i < x.length; i++) {
            if (!isNumber(x[i]))
              return NaN;
            out += x[i];
          }
          return out;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(add);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/apply.js
  var require_apply = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/apply.js"(exports, module) {
      var vectorize = require_vectorize();
      function apply(x, fn) {
        try {
          return fn(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(apply);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/arccos.js
  var require_arccos = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/arccos.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function arccos(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.acos(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(arccos);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/arcsin.js
  var require_arcsin = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/arcsin.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function arcsin(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.asin(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(arcsin);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/arctan.js
  var require_arctan = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/arctan.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function arctan(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.atan(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(arctan);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/argmax.js
  var require_argmax = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/argmax.js"(exports, module) {
      var assert = require_assert();
      var indexOf = require_index_of();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      var max = require_max();
      function argmax(x) {
        if (isDataFrame(x)) {
          const index = argmax(x.values);
          return [x.index[index[0]], x.columns[index[1]]];
        }
        if (isSeries(x)) {
          const index = argmax(x.values);
          return [x.index[index]];
        }
        assert(
          isArray(x),
          "The `argmax` function only works on arrays, Series, and DataFrames!"
        );
        try {
          const out = indexOf(x, max(x));
          if (out) {
            if (out.length === 0) {
              return void 0;
            } else if (out.length === 1) {
              return out[0];
            } else {
              return out;
            }
          } else {
            return void 0;
          }
        } catch (e) {
          return void 0;
        }
      }
      module.exports = argmax;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/min.js
  var require_min = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/min.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function min(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return min(arr.values);
        }
        assert(
          isArray(arr),
          "The `min` function only works on arrays, Series, and DataFrames!"
        );
        try {
          return Math.min(...flatten(arr));
        } catch (e) {
          return NaN;
        }
      }
      module.exports = min;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/argmin.js
  var require_argmin = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/argmin.js"(exports, module) {
      var assert = require_assert();
      var indexOf = require_index_of();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      var min = require_min();
      function argmin(x) {
        if (isDataFrame(x)) {
          const index = argmin(x.values);
          return [x.index[index[0]], x.columns[index[1]]];
        }
        if (isSeries(x)) {
          const index = argmin(x.values);
          return [x.index[index]];
        }
        assert(
          isArray(x),
          "The `argmin` function only works on arrays, Series, and DataFrames!"
        );
        try {
          const out = indexOf(x, min(x));
          if (out) {
            if (out.length === 0) {
              return void 0;
            } else if (out.length === 1) {
              return out[0];
            } else {
              return out;
            }
          } else {
            return void 0;
          }
        } catch (e) {
          return void 0;
        }
      }
      module.exports = argmin;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/cast.js
  var require_cast = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/cast.js"(exports, module) {
      var isArray = require_is_array();
      var isBoolean = require_is_boolean();
      var isDataFrame = require_is_dataframe();
      var isDate = require_is_date();
      var isEqual = require_is_equal();
      var isNumber = require_is_number();
      var isObject = require_is_object();
      var isSeries = require_is_series();
      var isUndefined = require_is_undefined();
      function cast(value, type) {
        if (isDataFrame(value) || isSeries(value)) {
          return value.apply((item) => cast(item, type));
        }
        if (isArray(value)) {
          return value.map((v) => cast(v, type));
        }
        if (type === "null") {
          return null;
        }
        if (type === "number") {
          if (isUndefined(value)) {
            return NaN;
          }
          const booleanValue = cast(value, "boolean");
          if (isBoolean(booleanValue)) {
            return booleanValue ? 1 : 0;
          }
          try {
            JSON.parse(value);
          } catch (e) {
            const dateValue = cast(value, "date");
            if (isDate(dateValue)) {
              return dateValue.getTime();
            }
          }
          const out = parseFloat(value);
          if (isNaN(out))
            return NaN;
          return out;
        }
        if (type === "boolean") {
          if (isBoolean(value)) {
            return value;
          }
          if (isNumber(value)) {
            if (value === 0) {
              return false;
            }
            if (value === 1) {
              return true;
            }
            return null;
          }
          try {
            const vBool = (typeof value === "object" ? value.toString() === "null" ? "false" : JSON.stringify(value) : value.toString()).trim().toLowerCase();
            if (vBool === "true" || vBool === "yes" || vBool === "y") {
              return true;
            }
            if (vBool === "false" || vBool === "no" || vBool === "n") {
              return false;
            }
            return null;
          } catch (e) {
            return null;
          }
        }
        if (type === "date") {
          if (isDate(value)) {
            return value;
          }
          if (isUndefined(value)) {
            return null;
          }
          const valueFloat = parseFloat(value);
          if (!isNaN(valueFloat)) {
            const out = new Date(value);
            if (!isDate(out))
              return null;
            return out;
          }
          const valueDate = Date.parse(value);
          if (!isNaN(valueDate)) {
            return new Date(valueDate);
          }
          return null;
        }
        if (type === "object") {
          if (isObject(value)) {
            return value;
          }
          const booleanValue = cast(value, "boolean");
          if (isBoolean(booleanValue)) {
            return null;
          }
          try {
            const numberValue = cast(value, "number");
            if (isNumber(numberValue)) {
              JSON.parse(value);
              return null;
            }
          } catch (e) {
          }
          const dateValue = cast(value, "date");
          if (dateValue) {
            return dateValue;
          }
          try {
            const out = JSON.parse(value);
            if (isArray(out)) {
              return out.map((v) => cast(v, type));
            } else {
              return out;
            }
          } catch (e) {
            return null;
          }
        }
        if (type === "string") {
          if (isUndefined(value)) {
            if (isEqual(value, void 0)) {
              return "undefined";
            }
            return "null";
          }
          if (value instanceof Date) {
            return value.toJSON();
          }
          const valueString = (() => {
            if (typeof value === "object") {
              if (value === null) {
                return "null";
              } else {
                return JSON.stringify(value);
              }
            } else {
              return value.toString();
            }
          })();
          return valueString;
        }
      }
      module.exports = cast;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/ceil.js
  var require_ceil = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/ceil.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function ceil(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.ceil(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(ceil);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/chop.js
  var require_chop = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/chop.js"(exports, module) {
      var abs = require_abs();
      var isNumber = require_is_number();
      var isUndefined = require_is_undefined();
      var vectorize = require_vectorize();
      function chop(x, threshold) {
        try {
          if (!isNumber(x))
            return NaN;
          if (isUndefined(threshold)) {
            threshold = 1e-10;
          } else if (!isNumber(threshold)) {
            return NaN;
          }
          return abs(x) < threshold ? 0 : x;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(chop);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/clamp.js
  var require_clamp = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/clamp.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function clamp(x, a, b) {
        try {
          if (!isNumber(x))
            return NaN;
          if (!isNumber(a))
            return NaN;
          if (!isNumber(b))
            return NaN;
          if (x < a)
            return a;
          if (x > b)
            return b;
          return x;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(clamp);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/combinations.js
  var require_combinations = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/combinations.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      function combinations(arr, r) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return combinations(arr.values, r);
        }
        assert(
          isArray(arr),
          "The `combinations` function only works on arrays, Series, and DataFrames!"
        );
        assert(isNumber(r), "`r` must be a whole number!");
        arr = flatten(arr);
        if (r > arr.length) {
          return [arr];
        }
        if (r <= 0) {
          return [[]];
        }
        assert(r === parseInt(r), "`r` must be a whole number!");
        if (arr.length < 2)
          return arr;
        const out = [];
        arr.forEach((item, i) => {
          const after = arr.slice(i + 1);
          if (after.length < r - 1)
            return;
          const children = combinations(after, r - 1);
          children.forEach((child) => {
            out.push([item].concat(child));
          });
        });
        return out;
      }
      module.exports = combinations;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/mean.js
  var require_mean = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/mean.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function mean(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return mean(arr.values);
        }
        assert(
          isArray(arr),
          "The `mean` function only works on arrays, Series, and DataFrames!"
        );
        try {
          const temp = flatten(arr);
          let out = 0;
          temp.forEach((v) => {
            out += v;
          });
          return out / temp.length;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = mean;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/covariance.js
  var require_covariance = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/covariance.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      var mean = require_mean();
      var shape = require_shape();
      function covariance(x, y) {
        if (isSeries(x)) {
          return covariance(x.values, y);
        }
        if (isSeries(y)) {
          return covariance(x, y.values);
        }
        assert(
          isArray(x) && isArray(y) && shape(x).length === 1 && shape(y).length === 1,
          "The `covariance` function only works on 1-dimensional arrays and Series!"
        );
        assert(
          x.length === y.length,
          "The two arrays or Series passed into the `covariance` function must have the same length!"
        );
        try {
          const mx = mean(x);
          const my = mean(y);
          if (!isNumber(mx) || !isNumber(my)) {
            return NaN;
          }
          const n = Math.max(x.length, y.length);
          let out = 0;
          for (let i = 0; i < n; i++) {
            if (!isNumber(x[i]))
              return NaN;
            if (!isNumber(y[i]))
              return NaN;
            out += (x[i] - mx) * (y[i] - my);
          }
          return out / x.length;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = covariance;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/sqrt.js
  var require_sqrt = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/sqrt.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function sqrt(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.sqrt(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(sqrt);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/variance.js
  var require_variance = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/variance.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      var mean = require_mean();
      function variance(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return variance(arr.values);
        }
        assert(
          isArray(arr),
          "The `variance` function only works on arrays, Series, and DataFrames!"
        );
        try {
          const temp = flatten(arr);
          const m = mean(temp);
          let out = 0;
          for (let i = 0; i < temp.length; i++) {
            if (!isNumber(temp[i]))
              return NaN;
            out += (temp[i] - m) * (temp[i] - m);
          }
          return out / temp.length;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = variance;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/std.js
  var require_std = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/std.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      var sqrt = require_sqrt();
      var variance = require_variance();
      function std(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return std(arr.values);
        }
        assert(
          isArray(arr),
          "The `std` function only works on arrays, Series, and DataFrames!"
        );
        try {
          return sqrt(variance(arr));
        } catch (e) {
          return NaN;
        }
      }
      module.exports = std;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/correl.js
  var require_correl = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/correl.js"(exports, module) {
      var assert = require_assert();
      var covariance = require_covariance();
      var isArray = require_is_array();
      var isSeries = require_is_series();
      var shape = require_shape();
      var std = require_std();
      function correl(x, y) {
        if (isSeries(x)) {
          return correl(x.values, y);
        }
        if (isSeries(y)) {
          return correl(x, y.values);
        }
        assert(
          isArray(x) && isArray(y) && shape(x).length === 1 && shape(y).length === 1,
          "The `correl` function only works on 1-dimensional arrays and Series!"
        );
        assert(
          x.length === y.length,
          "The two arrays or Series passed into the `correl` function must have the same length!"
        );
        try {
          return covariance(x, y) / (std(x) * std(y));
        } catch (e) {
          return NaN;
        }
      }
      module.exports = correl;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/cos.js
  var require_cos = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/cos.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function cos(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.cos(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(cos);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/helpers/data-types.js
  var require_data_types = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/helpers/data-types.js"(exports, module) {
      module.exports = Object.freeze({
        boolean: "boolean",
        date: "date",
        null: "null",
        number: "number",
        object: "object",
        string: "string"
      });
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/diff.js
  var require_diff = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/diff.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isEqual = require_is_equal();
      var isSeries = require_is_series();
      var set = require_set();
      function diff(a, b) {
        if (isDataFrame(a) || isSeries(a)) {
          return diff(a.values, b);
        }
        if (isDataFrame(b) || isSeries(b)) {
          return diff(a, b.values);
        }
        assert(
          isArray(a) && isArray(b),
          "The `diff` function only works on arrays, Series, and DataFrames!"
        );
        const aTemp = set(a);
        const bTemp = set(b);
        const out = [];
        aTemp.forEach((item) => {
          if (bTemp.findIndex((other) => isEqual(other, item)) < 0) {
            out.push(item);
          }
        });
        return out;
      }
      module.exports = diff;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/pow.js
  var require_pow = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/pow.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function pow(x, p) {
        try {
          if (!isNumber(x))
            return NaN;
          if (!isNumber(p))
            return NaN;
          return Math.pow(x, p);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(pow);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/multiply.js
  var require_multiply = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/multiply.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function multiply() {
        try {
          const values = Object.values(arguments);
          if (values.length === 0)
            return NaN;
          let out = 1;
          for (let i = 0; i < values.length; i++) {
            if (!isNumber(values[i]))
              return NaN;
            out *= values[i];
          }
          return out;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(multiply);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/scale.js
  var require_scale = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/scale.js"(exports, module) {
      var multiply = require_multiply();
      function scale() {
        return multiply(...arguments);
      }
      module.exports = scale;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/subtract.js
  var require_subtract = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/subtract.js"(exports, module) {
      var add = require_add();
      var scale = require_scale();
      function subtract(a, b) {
        return add(a, scale(b, -1));
      }
      module.exports = subtract;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/sum.js
  var require_sum = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/sum.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      function sum(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return sum(arr.values);
        }
        assert(
          isArray(arr),
          "The `sum` function only works on arrays, Series, and DataFrames!"
        );
        try {
          if (arr.length === 0)
            return NaN;
          return flatten(arr).reduce((a, b) => a + b, 0);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = sum;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/distance.js
  var require_distance = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/distance.js"(exports, module) {
      var abs = require_abs();
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isEqual = require_is_equal();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      var pow = require_pow();
      var shape = require_shape();
      var sqrt = require_sqrt();
      var subtract = require_subtract();
      var sum = require_sum();
      function distance(a, b) {
        if (isNumber(a) && isNumber(b)) {
          return abs(a - b);
        }
        if (isDataFrame(a) || isSeries(a)) {
          return distance(a.values, b);
        }
        if (isDataFrame(b) || isSeries(b)) {
          return distance(a, b.values);
        }
        if (isArray(a) && isArray(b)) {
          assert(
            isEqual(shape(a), shape(b)),
            "If passing two arrays, Series, or DataFrames into the `distance` function, then those objects must have the same shape!"
          );
        }
        try {
          return sqrt(sum(pow(subtract(a, b), 2)));
        } catch (e) {
          return NaN;
        }
      }
      module.exports = distance;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/divide.js
  var require_divide = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/divide.js"(exports, module) {
      var pow = require_pow();
      var scale = require_scale();
      function divide(a, b) {
        return scale(a, pow(b, -1));
      }
      module.exports = divide;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/dot.js
  var require_dot = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/dot.js"(exports, module) {
      var { DataFrame, Series } = require_dataframe();
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      var scale = require_scale();
      var shape = require_shape();
      var sum = require_sum();
      var transpose = require_transpose();
      function dot(a, b) {
        if (isDataFrame(a)) {
          const temp = dot(a.values, b);
          if (shape(temp).length === 1) {
            const out = new Series(temp);
            out.name = isSeries(b) ? b.name : out.name;
            out.index = a.index.slice();
            return out;
          } else {
            const out = new DataFrame(temp);
            out.index = a.index.slice();
            if (isDataFrame(b)) {
              out.columns = b.columns.slice();
            }
            return out;
          }
        }
        if (isDataFrame(b)) {
          const temp = dot(a, b.values);
          if (shape(temp).length === 1) {
            const out = new Series(temp);
            out.name = isSeries(a) ? a.name : out.name;
            out.index = b.columns.slice();
            return out;
          } else {
            const out = new DataFrame(temp);
            out.columns = b.columns.slice();
            return out;
          }
        }
        if (isSeries(a)) {
          return dot(a.values, b);
        }
        if (isSeries(b)) {
          return dot(a, b.values);
        }
        assert(
          isArray(a) && isArray(b),
          "The `dot` function only works on arrays, Series, and DataFrames!"
        );
        flatten(a).concat(flatten(b)).forEach((v) => {
          assert(
            isNumber(v),
            "One of the arrays you passed into the `dot` function contains non-numerical values!"
          );
        });
        const aShape = shape(a);
        const bShape = shape(b);
        assert(
          aShape.length <= 2 && bShape.length <= 2,
          "I'm not smart enough to know how to get the dot-product of arrays that have more than 2 dimensions. Sorry for the inconvenience! Please only pass 1- or 2-dimensional arrays into the `dot` function!"
        );
        assert(
          aShape[aShape.length - 1] === bShape[0],
          `There's a dimension misalignment in the two arrays you passed into the \`dot\` function. (${aShape[aShape.length - 1]} !== ${bShape[0]})`
        );
        if (aShape.length === 1 && bShape.length === 1) {
          return sum(scale(a, b));
        } else if (aShape.length === 1 && bShape.length === 2) {
          return transpose(b).map((col) => dot(a, col));
        } else if (aShape.length === 2 && bShape.length === 1) {
          return a.map((row) => dot(row, b));
        } else if (aShape.length === 2 && bShape.length === 2) {
          const bTranspose = transpose(b);
          const out = [];
          for (let i = 0; i < a.length; i++) {
            const row = [];
            for (let j = 0; j < bTranspose.length; j++) {
              row.push(dot(a[i], bTranspose[j]));
            }
            out.push(row);
          }
          return out;
        }
      }
      module.exports = dot;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/drop-missing.js
  var require_drop_missing = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/drop-missing.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      var isUndefined = require_is_undefined();
      function dropMissing(x) {
        if (isDataFrame(x) || isSeries(x)) {
          return x.dropMissing(...Object.values(arguments).slice(1));
        }
        assert(
          isArray(x),
          "The `dropMissing` function only works on arrays, Series, and DataFrames!"
        );
        const out = [];
        x.forEach((v) => {
          try {
            return out.push(dropMissing(v));
          } catch (e) {
            if (!isUndefined(v)) {
              out.push(v);
            }
          }
        });
        return out;
      }
      module.exports = dropMissing;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/drop-missing-pairwise.js
  var require_drop_missing_pairwise = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/drop-missing-pairwise.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isEqual = require_is_equal();
      var isSeries = require_is_series();
      var isUndefined = require_is_undefined();
      var shape = require_shape();
      function dropMissingPairwise(a, b) {
        if (isDataFrame(a) || isSeries(a)) {
          return dropMissingPairwise(a.values, b);
        }
        if (isDataFrame(b) || isSeries(b)) {
          return dropMissingPairwise(a, b.values);
        }
        assert(
          isArray(a) && isArray(b),
          "The `dropMissingPairwise` function only works on arrays, Series, and DataFrames!"
        );
        assert(
          isEqual(shape(a), shape(b)),
          "The two arrays, Series, and/or DataFrames passed into the `dropMissingPairwise` function must have the same shape!"
        );
        const aOut = [];
        const bOut = [];
        for (let i = 0; i < a.length; i++) {
          try {
            const [aChildren, bChildren] = dropMissingPairwise(a[i], b[i]);
            aOut.push(aChildren);
            bOut.push(bChildren);
          } catch (e) {
            if (!isUndefined(a[i]) && !isUndefined(b[i])) {
              aOut.push(a[i]);
              bOut.push(b[i]);
            }
          }
        }
        return [aOut, bOut];
      }
      module.exports = dropMissingPairwise;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/drop-nan-pairwise.js
  var require_drop_nan_pairwise = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/drop-nan-pairwise.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isEqual = require_is_equal();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      var shape = require_shape();
      function dropNaNPairwise(a, b) {
        if (isDataFrame(a) || isSeries(a)) {
          return dropNaNPairwise(a.values, b);
        }
        if (isDataFrame(b) || isSeries(b)) {
          return dropNaNPairwise(a, b.values);
        }
        assert(
          isArray(a) && isArray(b),
          "The `dropNaNPairwise` only works on arrays, Series, and DataFrames!"
        );
        assert(
          isEqual(shape(a), shape(b)),
          "The two arrays, Series, and/or DataFrames passed into the `dropNaNPairwise` must have the same shape!"
        );
        const aOut = [];
        const bOut = [];
        for (let i = 0; i < a.length; i++) {
          try {
            const [aChildren, bChildren] = dropNaNPairwise(a[i], b[i]);
            aOut.push(aChildren);
            bOut.push(bChildren);
          } catch (e) {
            if (isNumber(a[i]) && isNumber(b[i])) {
              aOut.push(a[i]);
              bOut.push(b[i]);
            }
          }
        }
        return [aOut, bOut];
      }
      module.exports = dropNaNPairwise;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/drop-undefined.js
  var require_drop_undefined = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/drop-undefined.js"(exports, module) {
      var dropMissing = require_drop_missing();
      function dropUndefined(x) {
        return dropMissing(x);
      }
      module.exports = dropUndefined;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/exp.js
  var require_exp = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/exp.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function exp(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.exp(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(exp);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/factorial.js
  var require_factorial = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/factorial.js"(exports, module) {
      var vectorize = require_vectorize();
      function factorial(n) {
        try {
          if (n !== parseInt(n))
            return NaN;
          if (n <= 1)
            return 1;
          return n * factorial(n - 1);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(factorial);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/find.js
  var require_find = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/find.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isFunction = require_is_function();
      var isObject = require_is_object();
      var isSeries = require_is_series();
      function find(x, fn) {
        if (isDataFrame(x)) {
          return find(flatten(x.values), fn);
        }
        if (isSeries(x)) {
          return find(x.values, fn);
        }
        assert(
          isObject(x) || isArray(x),
          "You must pass (1) an object, array, Series, or DataFrame and (2) a function or value into the `find` function!"
        );
        if (!isFunction(fn)) {
          const value = fn;
          fn = (v) => v === value;
        }
        function helper(x2, fn2, checked) {
          checked = checked || [];
          if (checked.indexOf(x2) > -1) {
            return null;
          }
          if (isObject(x2)) {
            checked.push(x2);
            const keys = Object.keys(x2);
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              const value = x2[key];
              if (fn2(value)) {
                return value;
              }
              const result = helper(value, fn2, checked);
              if (result) {
                return result;
              }
            }
          } else if (isArray(x2)) {
            checked.push(x2);
            for (let i = 0; i < x2.length; i++) {
              const value = x2[i];
              if (fn2(value)) {
                return value;
              }
              const result = helper(value, fn2, checked);
              if (result) {
                return result;
              }
            }
          } else {
            if (fn2(x2)) {
              return x2;
            }
          }
          return null;
        }
        function safeFn(v) {
          try {
            return fn(v);
          } catch (e) {
            return false;
          }
        }
        return helper(x, safeFn);
      }
      module.exports = find;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/find-all.js
  var require_find_all = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/find-all.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isFunction = require_is_function();
      var isObject = require_is_object();
      var isSeries = require_is_series();
      function findAll(x, fn) {
        if (isDataFrame(x)) {
          return findAll(flatten(x.values), fn);
        }
        if (isSeries(x)) {
          return findAll(x.values, fn);
        }
        assert(
          isObject(x) || isArray(x),
          "You must pass (1) an object, array, Series, or DataFrame and (2) a function or value into the `findAll` function!"
        );
        if (!isFunction(fn)) {
          const value = fn;
          fn = (v) => v === value;
        }
        function helper(x2, fn2, checked) {
          checked = checked || [];
          if (checked.indexOf(x2) > -1) {
            return null;
          }
          if (isObject(x2)) {
            checked.push(x2);
            const keys = Object.keys(x2);
            const out = [];
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              const value = x2[key];
              let alreadyStoredThisValue = false;
              if (fn2(value)) {
                out.push(value);
                alreadyStoredThisValue = true;
              }
              const results2 = helper(value, fn2, checked);
              if (results2 && results2.length > 0) {
                results2.slice(alreadyStoredThisValue ? 1 : 0).forEach((r) => out.push(r));
              }
            }
            return out;
          } else if (isArray(x2)) {
            checked.push(x2);
            const out = [];
            for (let i = 0; i < x2.length; i++) {
              const value = x2[i];
              let alreadyStoredThisValue = false;
              if (fn2(value)) {
                out.push(value);
                alreadyStoredThisValue = true;
              }
              const results2 = helper(value, fn2, checked);
              if (results2 && results2.length > 0) {
                results2.slice(alreadyStoredThisValue ? 1 : 0).forEach((r) => out.push(r));
              }
            }
            return out;
          } else {
            if (fn2(x2)) {
              return [x2];
            }
          }
          return null;
        }
        function safeFn(v) {
          try {
            return fn(v);
          } catch (e) {
            return false;
          }
        }
        const results = helper(x, safeFn);
        if (results && results.length > 0) {
          return results;
        } else {
          return null;
        }
      }
      module.exports = findAll;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/float.js
  var require_float = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/float.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function float(x) {
        try {
          if (x === "Infinity") {
            return Infinity;
          }
          if (x === "-Infinity") {
            return -Infinity;
          }
          const out = JSON.parse(x);
          if (isNumber(out))
            return out;
          return NaN;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(float);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/floor.js
  var require_floor = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/floor.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function floor(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.floor(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(floor);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/zeros.js
  var require_zeros = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/zeros.js"(exports, module) {
      var isNumber = require_is_number();
      var product = require_product();
      var reshape = require_reshape();
      function zeros(shape) {
        if (isNumber(shape))
          shape = [shape];
        const out = [];
        const n = product(shape);
        for (let i = 0; i < n; i++)
          out.push(0);
        return reshape(out, shape);
      }
      module.exports = zeros;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/identity.js
  var require_identity = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/identity.js"(exports, module) {
      var assert = require_assert();
      var isNumber = require_is_number();
      var isUndefined = require_is_undefined();
      var zeros = require_zeros();
      function identity(size) {
        assert(
          !isUndefined(size),
          "You must pass an integer greater than 0 (representing the size) into the `identity` function!"
        );
        assert(
          isNumber(size),
          "You must pass an integer greater than 0 (representing the size) into the `identity` function!"
        );
        assert(
          parseInt(size) === size,
          "You must pass an integer greater than 0 (representing the size) into the `identity` function!"
        );
        assert(
          size > 0,
          "You must pass an integer greater than 0 (representing the size) into the `identity` function!"
        );
        const out = zeros([size, size]);
        for (let i = 0; i < size; i++)
          out[i][i] = 1;
        return out;
      }
      module.exports = identity;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/helpers/boolean-values.js
  var require_boolean_values = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/helpers/boolean-values.js"(exports, module) {
      module.exports = ["true", "false", "yes", "no"];
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/helpers/null-values.js
  var require_null_values = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/helpers/null-values.js"(exports, module) {
      module.exports = ["null", "none", "nan", "na", "n/a", "", "undefined"];
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/infer-type.js
  var require_infer_type = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/infer-type.js"(exports, module) {
      var apply = require_apply();
      var assert = require_assert();
      var booleanValues = require_boolean_values();
      var cast = require_cast();
      var count = require_count();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isDate = require_is_date();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      var isString = require_is_string();
      var nullValues = require_null_values();
      function checkIfInteger(results) {
        if (results.type === "number") {
          if (typeof results.value !== "undefined") {
            results.isInteger = parseInt(results.value) === results.value;
          } else {
            results.isInteger = flatten(results.values).every(
              (v) => isNumber(v) ? parseInt(v) === v : true
            );
          }
        }
        return results;
      }
      function inferType(arr) {
        if (isDataFrame(arr)) {
          const out = arr.copy();
          const results = inferType(arr.values);
          out.values = results.values;
          return checkIfInteger({ type: results.type, values: out });
        }
        if (isSeries(arr)) {
          const out = arr.copy();
          const results = inferType(arr.values);
          out.values = results.values;
          return checkIfInteger({ type: results.type, values: out });
        }
        if (!isArray(arr)) {
          const out = inferType([arr]);
          out.value = out.values[0];
          delete out.values;
          return checkIfInteger(out);
        }
        assert(
          isArray(arr),
          "The `inferType` function only works on arrays, Series, and DataFrames!"
        );
        const types = flatten(arr).map((v) => {
          if (v === void 0)
            return "null";
          try {
            if (typeof v === "object") {
              const temp = new Date(v.getTime());
              if (isDate(temp)) {
                return "date";
              }
            }
          } catch (e) {
          }
          if (!isString(v)) {
            v = JSON.stringify(v);
          }
          const vLower = v.toLowerCase();
          const vLowerTrimmed = vLower.trim();
          if (nullValues.indexOf(vLowerTrimmed) > -1) {
            return "null";
          }
          if (booleanValues.indexOf(vLowerTrimmed) > -1) {
            return "boolean";
          }
          try {
            const vParsed = JSON.parse(v);
            if (isNumber(vParsed)) {
              return "number";
            }
            if (typeof vParsed === "object") {
              if (isArray(vParsed))
                return "string";
              return "object";
            }
            return "string";
          } catch (e) {
            const vDate = new Date(v);
            if (isDate(vDate)) {
              return "date";
            }
            return "string";
          }
        });
        const counts = count(types).sort((a, b) => b.count - a.count);
        const primaryType = counts[0].value;
        return checkIfInteger({
          type: primaryType,
          values: apply(arr, (v) => cast(v, primaryType))
        });
      }
      module.exports = inferType;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/int.js
  var require_int = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/int.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function int(x) {
        try {
          const out = JSON.parse(x);
          if (isNumber(out))
            return parseInt(out);
          return NaN;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(int);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/intersect.js
  var require_intersect = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/intersect.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isEqual = require_is_equal();
      var isSeries = require_is_series();
      var set = require_set();
      function intersect() {
        const arrays = Object.values(arguments).map((x) => {
          if (isDataFrame(x) || isSeries(x)) {
            return set(x.values);
          }
          assert(
            isArray(x),
            "The `intersect` function only works on arrays, Series, and DataFrames!"
          );
          return set(x);
        });
        const all = set(arrays);
        return all.filter((v) => {
          return arrays.every((arr) => arr.findIndex((other) => isEqual(other, v)) > -1);
        });
      }
      module.exports = intersect;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/inverse.js
  var require_inverse = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/inverse.js"(exports, module) {
      var add = require_add();
      var assert = require_assert();
      var dot = require_dot();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isNumber = require_is_number();
      var scale = require_scale();
      var shape = require_shape();
      function inverse(x) {
        if (isDataFrame(x)) {
          const out = x.copy();
          out.values = inverse(out.values);
          return out;
        }
        assert(
          isArray(x),
          "The `inverse` function only works on square 2-dimensional arrays or DataFrames!"
        );
        flatten(x).forEach(
          (v) => assert(
            isNumber(v),
            "The array passed into the `inverse` function must contain only numbers!"
          )
        );
        const xShape = shape(x);
        assert(
          xShape.length === 2,
          "The array passed into the `inverse` function must be exactly two-dimensional and square!"
        );
        assert(
          xShape[0] === xShape[1],
          "The array passed into the `inverse` function must be exactly two-dimensional and square!"
        );
        assert(
          xShape[0] >= 0,
          "The array passed into the `inverse` function must be exactly two-dimensional and square!"
        );
        if (xShape[0] === 0) {
          return x;
        } else if (xShape[0] === 1) {
          assert(x[0][0] !== 0, "This matrix cannot be inverted!");
          return 1 / x[0][0];
        } else if (xShape[0] === 2) {
          const a = x[0][0];
          const b = x[0][1];
          const c = x[1][0];
          const d = x[1][1];
          const det = a * d - b * c;
          assert(det !== 0, "This matrix cannot be inverted!");
          const out = [
            [d, -b],
            [-c, a]
          ];
          return scale(out, 1 / det);
        } else if (xShape[0] > 1) {
          const times = (a, b) => isNumber(a) || isNumber(b) ? scale(a, b) : dot(a, b);
          for (let divider = 1; divider < xShape[0] - 1; divider++) {
            try {
              const A = x.slice(0, divider).map((row) => row.slice(0, divider));
              const B = x.slice(0, divider).map((row) => row.slice(divider, xShape[0]));
              const C = x.slice(divider, xShape[0]).map((row) => row.slice(0, divider));
              const D = x.slice(divider, xShape[0]).map((row) => row.slice(divider, xShape[0]));
              const AInv = inverse(A);
              const CompInv = inverse(add(D, times(-1, times(times(C, AInv), B))));
              const topLeft = add(
                AInv,
                times(times(times(times(AInv, B), CompInv), C), AInv)
              );
              const topRight = times(-1, times(times(AInv, B), CompInv));
              const bottomLeft = times(-1, times(times(CompInv, C), AInv));
              const bottomRight = CompInv;
              const out = topLeft.map((row, i) => row.concat(topRight[i])).concat(bottomLeft.map((row, i) => row.concat(bottomRight[i])));
              return out;
            } catch (e) {
            }
          }
          assert(false, "This matrix cannot be inverted!");
        }
      }
      module.exports = inverse;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/helpers/is-browser.js
  var require_is_browser = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/helpers/is-browser.js"(exports, module) {
      var isBrowser = new Function(
        `
    try {
      return this === window
    } catch(e) {}

    try {
      return !!importScripts
    } catch(e){}

    return false
  `
      );
      module.exports = isBrowser;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/lerp.js
  var require_lerp = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/lerp.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function lerp(a, b, f) {
        try {
          if (!isNumber(a))
            return NaN;
          if (!isNumber(b))
            return NaN;
          if (!isNumber(f))
            return NaN;
          return f * (b - a) + a;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(lerp);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/log.js
  var require_log = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/log.js"(exports, module) {
      var isNumber = require_is_number();
      var isUndefined = require_is_undefined();
      var vectorize = require_vectorize();
      function log(x, base) {
        try {
          base = isUndefined(base) ? Math.E : base;
          if (!isNumber(x))
            return NaN;
          if (!isNumber(base))
            return NaN;
          return Math.log(x) / Math.log(base);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(log);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/median.js
  var require_median = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/median.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      var sort = require_sort();
      function median(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return median(arr.values);
        }
        assert(
          isArray(arr),
          "The `median` function only works on arrays, Series, and DataFrames!"
        );
        try {
          const temp = sort(flatten(arr));
          if (temp.length === 0) {
            return NaN;
          } else if (temp.length % 2 === 0) {
            return (temp[temp.length / 2 - 1] + temp[temp.length / 2]) / 2;
          } else {
            return temp[parseInt(temp.length / 2)];
          }
        } catch (e) {
          return NaN;
        }
      }
      module.exports = median;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/mod.js
  var require_mod = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/mod.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function mod(a, b) {
        try {
          if (!isNumber(a))
            return NaN;
          if (!isNumber(b))
            return NaN;
          return a % b;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(mod);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/mode.js
  var require_mode = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/mode.js"(exports, module) {
      var assert = require_assert();
      var count = require_count();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      var set = require_set();
      var sort = require_sort();
      function mode(arr) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return mode(arr.values);
        }
        assert(
          isArray(arr),
          "The `mode` function only works on arrays, Series, and DataFrames!"
        );
        try {
          if (arr.length === 0)
            return NaN;
          const temp = flatten(arr);
          if (temp.length === 0)
            return NaN;
          const counts = {};
          const tempSet = set(temp);
          tempSet.forEach((value) => {
            counts[value] = count(temp, value);
          });
          const sortedTempSet = sort(tempSet, (a, b) => counts[b] - counts[a]);
          const mostCountedValue = sortedTempSet[0];
          const out = sort(
            sortedTempSet.filter((value) => counts[value] === counts[mostCountedValue])
          );
          return out;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = mode;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/normal.js
  var require_normal = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/normal.js"(exports, module) {
      var { random } = require_random();
      var apply = require_apply();
      var isUndefined = require_is_undefined();
      var ndarray = require_ndarray();
      function helper() {
        const u1 = random();
        const u2 = random();
        return Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
      }
      function normal(shape) {
        if (isUndefined(shape))
          return helper();
        return apply(ndarray(shape), helper);
      }
      module.exports = normal;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/ones.js
  var require_ones = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/ones.js"(exports, module) {
      var apply = require_apply();
      var ndarray = require_ndarray();
      function ones(shape) {
        return apply(ndarray(shape), () => 1);
      }
      module.exports = ones;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/permutations.js
  var require_permutations = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/permutations.js"(exports, module) {
      var assert = require_assert();
      var flatten = require_flatten();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isNumber = require_is_number();
      var isSeries = require_is_series();
      var isUndefined = require_is_undefined();
      function permutations(arr, r) {
        if (isDataFrame(arr) || isSeries(arr)) {
          return permutations(arr.values, r);
        }
        assert(
          isArray(arr),
          "The `permutations` function only works on arrays, Series, and DataFrames!"
        );
        if (isUndefined(r))
          r = arr.length;
        assert(isNumber(r), "`r` must be a whole number!");
        arr = flatten(arr);
        if (r > arr.length) {
          return permutations(arr);
        }
        if (r <= 0) {
          return [[]];
        }
        assert(r === parseInt(r), "`r` must be a whole number!");
        if (arr.length < 2)
          return arr;
        const out = [];
        arr.forEach((item, i) => {
          const before = arr.slice(0, i);
          const after = arr.slice(i + 1);
          const others = before.concat(after);
          const children = permutations(others, r - 1);
          children.forEach((child) => {
            out.push([item].concat(child));
          });
        });
        return out;
      }
      module.exports = permutations;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/print.js
  var require_print = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/print.js"(exports, module) {
      var { DataFrame, Series } = require_dataframe();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isJagged = require_is_jagged();
      var isSeries = require_is_series();
      var shape = require_shape();
      function print() {
        Object.keys(arguments).forEach((key) => {
          const x = arguments[key];
          if (isArray(x)) {
            if (!isJagged(x)) {
              const xShape = shape(x);
              if (xShape.length === 1) {
                new Series(x).print();
              } else if (xShape.length == 2) {
                new DataFrame(x).print();
              } else {
                console.log(x);
              }
            } else {
              console.log(x);
            }
          } else if (isDataFrame(x) || isSeries(x)) {
            x.print();
          } else {
            console.log(x);
          }
        });
      }
      module.exports = print;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/remap.js
  var require_remap = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/remap.js"(exports, module) {
      var isArray = require_is_array();
      var isNumber = require_is_number();
      var isUndefined = require_is_undefined();
      var max = require_max();
      var min = require_min();
      var vectorize = require_vectorize();
      var helper = vectorize(function(x, a, b, c, d) {
        try {
          if (![x, a, b, c, d].every((v) => isNumber(v))) {
            return NaN;
          }
          if (b - a === 0)
            return NaN;
          return (d - c) * (x - a) / (b - a) + c;
        } catch (e) {
          return NaN;
        }
      });
      function remap(x, a, b, c, d) {
        if (isArray(x) && isUndefined(c) && isUndefined(d)) {
          c = a;
          d = b;
          a = min(x);
          b = max(x);
        }
        return helper(x, a, b, c, d);
      }
      module.exports = remap;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/round.js
  var require_round = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/round.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function round(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.round(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(round);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/sign.js
  var require_sign = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/sign.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function sign(x) {
        try {
          if (!isNumber(x))
            return NaN;
          if (x < 0)
            return -1;
          if (x > 0)
            return 1;
          return 0;
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(sign);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/sin.js
  var require_sin = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/sin.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function sin(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.sin(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(sin);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/stdev.js
  var require_stdev = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/stdev.js"(exports, module) {
      var std = require_std();
      function stdev(x) {
        return std(x);
      }
      module.exports = stdev;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/tan.js
  var require_tan = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/tan.js"(exports, module) {
      var isNumber = require_is_number();
      var vectorize = require_vectorize();
      function tan(x) {
        try {
          if (!isNumber(x))
            return NaN;
          return Math.tan(x);
        } catch (e) {
          return NaN;
        }
      }
      module.exports = vectorize(tan);
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/time.js
  var require_time = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/time.js"(exports, module) {
      var assert = require_assert();
      var isFunction = require_is_function();
      function timeSync(fn, args) {
        assert(isFunction(fn), "`fn` must be a function!");
        const start = /* @__PURE__ */ new Date();
        if (args) {
          fn(...args);
        } else {
          fn();
        }
        return /* @__PURE__ */ new Date() - start;
      }
      async function timeAsync(fn, args) {
        assert(isFunction(fn), "`fn` must be a function!");
        const start = /* @__PURE__ */ new Date();
        if (args) {
          await fn(...args);
        } else {
          await fn();
        }
        return /* @__PURE__ */ new Date() - start;
      }
      module.exports = { timeSync, timeAsync };
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/union.js
  var require_union = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/union.js"(exports, module) {
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      var set = require_set();
      function union() {
        return set(
          [...arguments].map((v) => {
            if (isArray(v))
              return v;
            if (isDataFrame(v))
              return v.values;
            if (isSeries(v))
              return v.values;
            return [v];
          })
        );
      }
      module.exports = union;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/zip.js
  var require_zip = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/zip.js"(exports, module) {
      var assert = require_assert();
      var isArray = require_is_array();
      var isDataFrame = require_is_dataframe();
      var isSeries = require_is_series();
      var isUndefined = require_is_undefined();
      var max = require_max();
      var range = require_range();
      function zip() {
        const out = [];
        const arrays = Object.values(arguments).map((arr) => {
          if (isDataFrame(arr) || isSeries(arr)) {
            arr = arr.values;
          }
          assert(
            isArray(arr),
            "The `zip` function only works on arrays, Series, and DataFrames!"
          );
          return arr;
        });
        range(0, max(arrays.map((arr) => arr.length))).forEach((i) => {
          const row = [];
          arrays.forEach((arr) => {
            const value = arr[i];
            row.push(isUndefined(value) ? void 0 : value);
          });
          out.push(row);
        });
        return out;
      }
      module.exports = zip;
    }
  });

  // node_modules/@jrc03c/js-math-tools/src/index.js
  var require_src2 = __commonJS({
    "node_modules/@jrc03c/js-math-tools/src/index.js"(exports, module) {
      var { copy, decycle } = require_copy();
      var { DataFrame, Series } = require_dataframe();
      var out = {
        abs: require_abs(),
        add: require_add(),
        apply: require_apply(),
        arccos: require_arccos(),
        arcsin: require_arcsin(),
        arctan: require_arctan(),
        argmax: require_argmax(),
        argmin: require_argmin(),
        assert: require_assert(),
        cast: require_cast(),
        ceil: require_ceil(),
        chop: require_chop(),
        clamp: require_clamp(),
        combinations: require_combinations(),
        copy,
        correl: require_correl(),
        cos: require_cos(),
        count: require_count(),
        covariance: require_covariance(),
        DataFrame,
        dataTypes: require_data_types(),
        decycle,
        diff: require_diff(),
        distance: require_distance(),
        divide: require_divide(),
        dot: require_dot(),
        dropMissing: require_drop_missing(),
        dropMissingPairwise: require_drop_missing_pairwise(),
        dropNaN: require_drop_nan(),
        dropNaNPairwise: require_drop_nan_pairwise(),
        dropUndefined: require_drop_undefined(),
        exp: require_exp(),
        factorial: require_factorial(),
        find: require_find(),
        findAll: require_find_all(),
        flatten: require_flatten(),
        float: require_float(),
        floor: require_floor(),
        identity: require_identity(),
        indexOf: require_index_of(),
        inferType: require_infer_type(),
        int: require_int(),
        intersect: require_intersect(),
        inverse: require_inverse(),
        isArray: require_is_array(),
        isBoolean: require_is_boolean(),
        isBrowser: require_is_browser(),
        isDataFrame: require_is_dataframe(),
        isDate: require_is_date(),
        isEqual: require_is_equal(),
        isFunction: require_is_function(),
        isJagged: require_is_jagged(),
        isNested: require_is_nested(),
        isNumber: require_is_number(),
        isObject: require_is_object(),
        isSeries: require_is_series(),
        isString: require_is_string(),
        isUndefined: require_is_undefined(),
        lerp: require_lerp(),
        log: require_log(),
        MathError: require_math_error(),
        max: require_max(),
        mean: require_mean(),
        median: require_median(),
        min: require_min(),
        mod: require_mod(),
        mode: require_mode(),
        multiply: require_multiply(),
        ndarray: require_ndarray(),
        normal: require_normal(),
        ones: require_ones(),
        permutations: require_permutations(),
        pow: require_pow(),
        print: require_print(),
        product: require_product(),
        random: require_random().random,
        range: require_range(),
        remap: require_remap(),
        reshape: require_reshape(),
        reverse: require_reverse(),
        round: require_round(),
        scale: require_scale(),
        seed: require_random().seed,
        Series,
        set: require_set(),
        shape: require_shape(),
        shuffle: require_shuffle(),
        sign: require_sign(),
        sin: require_sin(),
        sort: require_sort(),
        sqrt: require_sqrt(),
        std: require_std(),
        stdev: require_stdev(),
        subtract: require_subtract(),
        sum: require_sum(),
        tan: require_tan(),
        time: require_time().timeSync,
        timeSync: require_time().timeSync,
        timeAsync: require_time().timeAsync,
        transpose: require_transpose(),
        union: require_union(),
        variance: require_variance(),
        vectorize: require_vectorize(),
        zeros: require_zeros(),
        zip: require_zip(),
        dump: function() {
          const pub = typeof global !== "undefined" ? global : window;
          if (!pub) {
            throw new out.MathError(
              "Cannot dump functions into global scope because neither `global` nor `window` exist in the current context!"
            );
          }
          Object.keys(out).forEach((key) => {
            try {
              Object.defineProperty(pub, key, {
                configurable: false,
                enumerable: true,
                writable: false,
                value: out[key]
              });
            } catch (e) {
              pub[key] = out[key];
            }
          });
        }
      };
      if (typeof module !== "undefined") {
        module.exports = out;
      }
      if (typeof window !== "undefined") {
        window.JSMathTools = out;
      }
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/stringify.js
  var require_stringify = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/stringify.js"(exports, module) {
      var {
        assert,
        decycle,
        isArray,
        isDate,
        isString,
        isUndefined,
        range
      } = require_src2();
      function prefix(s, n) {
        if (!s || n <= 0)
          return "";
        return range(0, n).map(() => s).join("");
      }
      function stringify(x, indent) {
        assert(
          isString(indent) || isUndefined(indent),
          "The second parameter to the `stringify` function must be undefined or a string!"
        );
        const newline = indent ? "\n" : "";
        function helper(x2, indent2, depth) {
          depth = depth || 0;
          if (typeof x2 === "number" || typeof x2 === "bigint") {
            if (x2 === Infinity) {
              return "Infinity";
            }
            if (x2 === -Infinity) {
              return "-Infinity";
            }
            if (isNaN(x2)) {
              return "NaN";
            }
            return x2.toString();
          }
          if (typeof x2 === "string") {
            return JSON.stringify(x2);
          }
          if (typeof x2 === "boolean") {
            return x2.toString();
          }
          if (typeof x2 === "undefined") {
            return "undefined";
          }
          if (typeof x2 === "symbol") {
            return x2.toString();
          }
          if (typeof x2 === "function") {
            return x2.toString();
          }
          if (typeof x2 === "object") {
            if (x2 === null) {
              return "null";
            }
            if (isDate(x2)) {
              return x2.toJSON();
            }
            if (isArray(x2)) {
              if (x2.length === 0) {
                return prefix(indent2, depth - 1) + "[]";
              }
              return prefix(indent2, depth - 1) + "[" + newline + x2.map((v) => {
                let child = helper(v, indent2, depth + 1);
                if (isString(child))
                  child = child.trim();
                return prefix(indent2, depth + 1) + child;
              }).join("," + newline) + newline + prefix(indent2, depth) + "]";
            }
            if (Object.keys(x2).length === 0) {
              return prefix(indent2, depth - 1) + "{}";
            }
            return prefix(indent2, depth - 1) + "{" + newline + Object.keys(x2).map((key) => {
              let child = helper(x2[key], indent2, depth + 1);
              if (isString(child))
                child = child.trim();
              return prefix(indent2, depth + 1) + JSON.stringify(key) + ":" + (indent2 ? " " : "") + child;
            }).join("," + newline) + newline + prefix(indent2, depth) + "}";
          }
          return "undefined";
        }
        return helper(decycle(x), indent);
      }
      module.exports = stringify;
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/unindent.js
  var require_unindent = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/unindent.js"(exports, module) {
      function unindent(text) {
        const lines = text.split("\n");
        const indentations = lines.filter((line) => line.trim().length > 0).map((line) => line.split("").findIndex((char) => !char.match(/\s/g)));
        const minIndentation = Math.min(...indentations);
        return lines.map((line) => line.substring(minIndentation)).join("\n");
      }
      module.exports = unindent;
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/wrap.js
  var require_wrap = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/wrap.js"(exports, module) {
      function wrap(raw, maxLineLength) {
        if (typeof raw !== "string") {
          throw new Error(
            "The first argument to the `wrap` function must be a string!"
          );
        }
        if (typeof maxLineLength === "undefined" || maxLineLength === null) {
          if (typeof process !== "undefined" && typeof process.stdout !== "undefined" && typeof process.stdout.columns === "number") {
            maxLineLength = process.stdout.columns > 80 ? 80 : process.stdout.columns;
          } else {
            maxLineLength = 80;
          }
        }
        if (isNaN(maxLineLength) || typeof maxLineLength !== "number") {
          throw new Error(
            "The second argument to the `wrap` function must be undefined, null, or an integer!"
          );
        }
        const out = [];
        raw.split("\n").forEach((line) => {
          if (line.trim().length === 0) {
            return out.push("");
          }
          const indentation = line.split(/[^\s]/g)[0];
          const words = line.replace(indentation, "").split(" ");
          let temp = indentation;
          words.forEach((word) => {
            const newLine = temp + (temp.trim().length > 0 ? " " : "") + word;
            if (newLine.length > maxLineLength) {
              out.push(temp);
              temp = indentation + word;
            } else {
              temp = newLine;
            }
          });
          if (temp.length > 0) {
            out.push(temp);
          }
        });
        return out.join("\n");
      }
      module.exports = wrap;
    }
  });

  // node_modules/@jrc03c/js-text-tools/src/index.js
  var require_src3 = __commonJS({
    "node_modules/@jrc03c/js-text-tools/src/index.js"(exports, module) {
      var out = {
        camelify: require_camelify(),
        indent: require_indent(),
        kebabify: require_kebabify(),
        snakeify: require_snakeify(),
        stringify: require_stringify(),
        unindent: require_unindent(),
        wrap: require_wrap(),
        dump() {
          Object.keys(out).forEach((key) => {
            if (typeof global !== "undefined") {
              global[key] = out[key];
            }
            if (typeof window !== "undefined") {
              window[key] = out[key];
            }
          });
        }
      };
      if (typeof module !== "undefined") {
        module.exports = out;
      }
      if (typeof window !== "undefined") {
        window.JSTextTools = out;
      }
    }
  });

  // res/js/src/words/adjectives.json
  var require_adjectives = __commonJS({
    "res/js/src/words/adjectives.json"(exports, module) {
      module.exports = ["a ok", "aaronic", "aaronical", "abactinal", "abandoned", "abased", "abashed", "abatable", "abating", "abaxial", "abbatial", "abbevillian", "abbreviated", "abdicable", "abdicant", "abdominal", "abdominous", "abducent", "abducted", "abducting", "abecedarian", "aberdeen", "aberrant", "aberrational", "abessive", "abeyant", "abhominable", "abhorrent", "abiding", "abiogenetic", "abiotic", "abject", "ablated", "ablatival", "ablative", "ablaze", "able", "able bodied", "abler", "ablest", "abloom", "ablush", "ablutionary", "abnormal", "abolishable", "abolition", "abolitionary", "abomasal", "abominable", "aboral", "aboriginal", "aborning", "abortifacient", "abortional", "abortive", "abounding", "about", "above", "above board", "above mentioned", "above named", "abradant", "abraded", "abranchial", "abranchiate", "abrasive", "abreast", "abridgable", "abridgeable", "abridged", "abroach", "abroad", "abrogative", "abrupt", "abscessed", "absent", "absent minded", "absolute", "absolutist", "absolutory", "absolved", "absonant", "absorbable", "absorbed", "absorbefacient", "absorbent", "absorbing", "absorptive", "abstemious", "abstentious", "abstergent", "abstersive", "abstinent", "abstract", "abstracted", "abstractional", "abstractionist", "abstractive", "abstruse", "absurd", "abundant", "abused", "abusive", "abutting", "abuzz", "abysmal", "abyssal", "abyssinian", "academic", "academical", "acadian", "acanthaceous", "acanthine", "acanthocephalan", "acanthoid", "acanthopterygian", "acanthous", "acarid", "acaridan", "acarine", "acaroid", "acarpellous", "acarpelous", "acarpous", "acatalectic", "acaudal", "acaudate", "acaulescent", "accadian", "accelerando", "accelerated", "accelerating", "accelerative", "acceleratory", "accented", "accentual", "acceptable", "acceptant", "accepted", "accepting", "acceptive", "accessible", "accessorial", "accessory", "accident prone", "accidental", "accipitrine", "acclamatory", "acclimatisable", "acclimatizable", "acclivitous", "acclivous", "accommodable", "accommodating", "accommodative", "accompanied", "accompanying", "accomplishable", "accomplished", "accordable", "accordant", "according", "accordion", "accostable", "accosted", "accountable", "accoutered", "accoutred", "accredited", "accrescent", "accrete", "accretive", "accrued", "accumbent", "accumulated", "accumulative", "accurate", "accursed", "accurst", "accusable", "accusatival", "accusative", "accusatorial", "accusatory", "accusing", "accustomed", "ace", "acellular", "acephalous", "acerate", "acerb", "acerbic", "acerose", "acerous", "acervate", "acescent", "acetabular", "acetic", "acetose", "acetous", "achaean", "achenial", "acheulean", "acheulian", "achievable", "achillean", "aching", "achlamydeous", "achondroplastic", "achromatic", "achromatous", "achy", "acicular", "aciculate", "acid", "acid fast", "acidic", "acidifiable", "acidulated", "acidulent", "acidulous", "aciform", "acinaceous", "acinaciform", "aciniform", "acinose", "acinous", "acknowledgeable", "acknowledged", "acock", "acold", "aconitic", "acorned", "acotyledonous", "acoustic", "acoustical", "acquainted", "acquiescent", "acquirable", "acquired", "acquisitive", "acquitted", "acred", "acrid", "acrimonious", "acrobatic", "acrocentric", "acrogenic", "acrogenous", "acrolithic", "acromegalic", "acronical", "acronychal", "acronymic", "acronymous", "acropetal", "acrophonic", "across", "across the board", "acroterial", "acrylic", "actable", "actinal", "acting", "actinian", "actinic", "actinoid", "actinomorphic", "action", "actionable", "activated", "activating", "active", "activist", "actual", "actualist", "actualized", "actuarial", "actuated", "actuating", "aculeate", "aculeated", "acuminate", "acuminous", "acute", "acyclic", "ad lib", "adactylous", "adagio", "adam", "adamant", "adamantine", "adamic", "adamitic", "adamitical", "adaptable", "adaptative", "adapted", "adaptive", "adaxial", "added", "addicted", "addictive", "additional", "additive", "addle", "addled", "addorsed", "addressable", "addressed", "adducent", "adducible", "adducting", "adductive", "adenoid", "adenoidal", "adenomatous", "adept", "adequate", "adessive", "adherent", "adhesive", "adiabatic", "adiaphoristic", "adiaphorous", "adipose", "adjacent", "adjectival", "adjective", "adjoining", "adjudicative", "adjunct", "adjunctive", "adjuratory", "adjustable", "adjusted", "adjuvant", "adminicular", "administrable", "administrant", "administrative", "admirable", "admirative", "admired", "admiring", "admissible", "admissive", "admittable", "admitted", "admonished", "admonishing", "admonitory", "adnate", "adnominal", "adolescent", "adonic", "adopted", "adoptive", "adorable", "adored", "adoring", "adorned", "adpressed", "adrenal", "adrenergic", "adrenocorticotrophic", "adrenocorticotropic", "adriatic", "adrift", "adroit", "adscititious", "adscript", "adsorbable", "adsorbate", "adsorbed", "adsorbent", "adulatory", "adult", "adulterant", "adulterate", "adulterated", "adulterating", "adulterine", "adulterous", "adumbrative", "adunc", "adust", "advance", "advanced", "advancing", "advantaged", "advantageous", "adventitious", "adventive", "adventuresome", "adventuristic", "adventurous", "adverbial", "adversative", "adverse", "advertent", "advertised", "advisable", "advised", "advisory", "advocatory", "adynamic", "aegean", "aeneolithic", "aeneous", "aeolian", "aeolic", "aeolotropic", "aeonian", "aerated", "aerial", "aeriform", "aerobatic", "aerobic", "aerobiological", "aerobiosis", "aerobiotic", "aerodynamic", "aerodynamical", "aeroelastic", "aerolitic", "aerological", "aerometric", "aeronautic", "aeronautical", "aerophobic", "aerostatic", "aerotropic", "aeruginous", "aery", "aesculapian", "aesthetic", "aesthetical", "aestival", "aetiological", "afeard", "afeared", "affable", "affected", "affecting", "affectional", "affectionate", "affectioned", "affective", "afferent", "affettuoso", "affianced", "affiliable", "affiliated", "affine", "affined", "affinitive", "affirmable", "affirmative", "affirmatory", "affixed", "afflated", "afflicted", "afflictive", "affluent", "affordable", "affricative", "affronted", "affrontive", "afghan", "afghani", "afire", "aflame", "afloat", "aflutter", "afoot", "aforementioned", "aforesaid", "aforethought", "afoul", "afraid", "afric", "african", "afro american", "afro asian", "aft", "after", "after dinner", "aftermost", "afternoon", "aftmost", "agamic", "agamid", "agamous", "agape", "agaze", "age old", "aged", "agee", "ageing", "ageless", "agelong", "agent", "agential", "agentive", "agglomerate", "agglomerated", "agglomerative", "agglutinable", "agglutinant", "agglutinate", "agglutinative", "aggravated", "aggravating", "aggregate", "aggregately", "aggregative", "aggressive", "aggrieved", "aghast", "agile", "aging", "agitated", "agitating", "agitative", "agitato", "agleam", "agley", "aglimmer", "aglitter", "aglow", "agnate", "agnatic", "agnatical", "agnominal", "agnostic", "ago", "agog", "agone", "agonic", "agonistic", "agonistical", "agonized", "agonizing", "agoraphobic", "agraphic", "agrarian", "agravic", "agreeable", "agreed", "agreeing", "agrestal", "agrestic", "agricultural", "agrobiological", "agrological", "agronomic", "agronomical", "agrostological", "aground", "aguish", "ahead", "ahistorical", "ahorse", "ahorseback", "ahull", "ahungered", "aided", "aidful", "aidless", "ailing", "ailurophilic", "ailurophobic", "aimless", "ain", "air", "air conditioned", "air conditioning", "air cooled", "air mail", "air minded", "air raid", "air to air", "airborne", "aired", "airier", "airiest", "airless", "airline", "airsick", "airtight", "airworthy", "airy", "airy fairy", "aisled", "ajar", "akimbo", "akin", "akkadian", "alabaman", "alabamian", "alabaster", "alabastrine", "alar", "alarmed", "alarming", "alarmist", "alary", "alaskan", "alate", "alated", "albanian", "albescent", "albigensian", "albinic", "albinistic", "albinotic", "albitic", "albuminoid", "albuminous", "alburnous", "alcaic", "alchemic", "alchemical", "alcibiadean", "alcoholic", "alcyonarian", "aldermanic", "aldermanly", "aldine", "aleatory", "alemannic", "alembicated", "alert", "alexandrian", "alexic", "alexipharmic", "alfresco", "algal", "algebraic", "algebraical", "algerian", "algid", "algoid", "algological", "algonkian", "algonkin", "algonquian", "algonquin", "algorithmic", "alhambresque", "alice in wonderland", "alicyclic", "alien", "alienable", "alienated", "alienating", "aliform", "alight", "aligned", "aligning", "alike", "alimental", "alimentary", "alimentative", "alined", "aliped", "aliphatic", "aliquant", "aliquot", "aliunde", "alive", "alkalescent", "alkaline", "all", "all american", "all day", "all fired", "all important", "all in", "all inclusive", "all night", "all out", "all over", "all powerful", "all purpose", "all round", "all star", "all time", "all weather", "allantoic", "allantoid", "allargando", "allative", "alleged", "allegiant", "allegoric", "allegorical", "allegretto", "allegro", "allelomorphic", "allergenic", "allergic", "alleviated", "alleviative", "alleviatory", "alliaceous", "allied", "alliterative", "allocable", "allocatable", "allochthonous", "allodial", "allogamous", "allometric", "allonymous", "allopathic", "allopatric", "allophonic", "allotriomorphic", "allotropic", "allotted", "allowable", "allowed", "alloyed", "alluring", "allusive", "alluvial", "almighty", "almond eyed", "alodial", "aloetic", "alone", "aloof", "alpha", "alphabetic", "alphabetical", "alphabetized", "alphameric", "alphamerical", "alphanumeric", "alphanumerical", "alpine", "alright", "alsatian", "alt", "altaic", "alterable", "alterant", "alterative", "altered", "altern", "alternant", "alternate", "alternating", "alternative", "altimetrical", "altissimo", "altitudinal", "altitudinous", "alto", "altricial", "altruistic", "aluminiferous", "aluminous", "aluminum", "alveated", "alveolar", "alveolate", "alvine", "amalgamate", "amalgamated", "amalgamative", "amandine", "amaranthaceous", "amaranthine", "amaryllidaceous", "amassable", "amassed", "amateur", "amateurish", "amative", "amatory", "amaurotic", "amazed", "amazing", "ambagious", "ambassadorial", "amber", "amberous", "ambery", "ambidexter", "ambidextrous", "ambient", "ambiguous", "ambilateral", "ambisexual", "ambitionless", "ambitious", "ambivalent", "ambrosial", "ambrosian", "ambulacral", "ambulant", "ambulatory", "amebic", "ameboid", "ameliorating", "ameliorative", "amenable", "amendable", "amendatory", "amended", "amentaceous", "amental", "amentiferous", "amerceable", "amerciable", "american", "amerindian", "amerindic", "ametabolic", "ametabolous", "amethyst", "amethystine", "amharic", "amiable", "amicable", "amish", "amiss", "amitotic", "ammoniac", "ammoniacal", "ammoniated", "ammophilous", "amnesiac", "amnesic", "amniotic", "amoebaean", "amoebic", "amoeboid", "amok", "amoral", "amoroso", "amorous", "amorphous", "amort", "amphibian", "amphibious", "amphibolic", "amphibological", "amphibolous", "amphibrachic", "amphictyonic", "amphipod", "amphiprotic", "amphisbaenic", "amphitheatric", "amphitheatrical", "amphitropous", "amphoric", "amphoteric", "ample", "ampler", "amplest", "amplexicaul", "amuck", "amusable", "amused", "amusing", "amusive", "amygdalaceous", "amygdaloid", "amygdaloidal", "amylaceous", "amyloid", "amyloidal", "an end", "anabatic", "anabiotic", "anabolic", "anacardiaceous", "anachronic", "anachronistic", "anachronous", "anaclastic", "anacreontic", "anacrustic", "anadromous", "anaemic", "anaerobic", "anaerobiotic", "anaesthetic", "anaesthetized", "anaglyphic", "anaglyptic", "anagogic", "anagogical", "anagrammatic", "anagrammatical", "anal", "analectic", "analeptic", "analgesic", "analog", "analogical", "analogous", "analogue", "analphabetic", "analysable", "analytic", "analytical", "analyzable", "analyzed", "anamnestic", "anamorphic", "anandrous", "ananthous", "anapaestic", "anaphoric", "anaphrodisiac", "anaphylactic", "anaplastic", "anaptyctic", "anarchic", "anarchical", "anarchistic", "anarthrous", "anastigmatic", "anastomotic", "anatolian", "anatomic", "anatomical", "anatropous", "ancestral", "anchoretic", "anchoritic", "anchorless", "ancient", "ancillary", "ancipital", "andalusian", "andante", "andantino", "andean", "andesitic", "andorra", "andorran", "androcentric", "androdioecious", "androecial", "androgenic", "androgenous", "androgynous", "android", "andromonoecious", "ane", "anecdotal", "anecdotical", "anechoic", "anemic", "anemographic", "anemometric", "anemometrical", "anemophilous", "anencephalic", "aneroid", "anesthetic", "anesthetized", "aneuploid", "aneurismal", "aneurysmal", "anfractuous", "angelic", "angelical", "angered", "angevin", "anginal", "angiocarpous", "angiospermous", "angled", "anglian", "anglican", "anglo american", "anglo catholic", "anglo french", "anglo indian", "anglo irish", "anglo norman", "anglo saxon", "anglophilic", "anglophobiac", "anglophobic", "angrier", "angriest", "angry", "anguilliform", "anguine", "anguished", "angular", "angulate", "anharmonic", "anhedonic", "anhydrous", "aniconic", "anile", "animal", "animalcular", "animalic", "animate", "animated", "animating", "animist", "animistic", "anionic", "anisodactylous", "anisomerous", "anisophyllous", "anisotropic", "annalistic", "annealed", "annectent", "annelid", "annihilated", "annihilating", "annihilative", "anniversary", "announced", "annoyed", "annoying", "annual", "annular", "annulate", "annulated", "annulose", "annunciative", "anodal", "anodic", "anodyne", "anoestrous", "anoetic", "anomalistic", "anomalous", "anomic", "anonymous", "anopheline", "anorectal", "anorectic", "anorexic", "anorthic", "another", "anourous", "anoxic", "ansate", "anserine", "answerable", "answering", "answerless", "ant", "antacid", "antagonistic", "antagonizing", "antarctic", "antarthritic", "antasthmatic", "ante", "ante bellum", "ante nicene", "antecedent", "antediluvial", "antediluvian", "antefixal", "antemeridian", "antemundane", "antenatal", "antennal", "antennary", "antenniform", "antenuptial", "anteorbital", "antepenultimate", "anteprandial", "anterior", "anthelminthic", "anthelmintic", "anthocarpous", "anthophilous", "anthracitic", "anthracoid", "anthropic", "anthropical", "anthropocentric", "anthropogenic", "anthropoid", "anthropoidal", "anthropological", "anthropometric", "anthropomorphic", "anthropomorphous", "anthropopathic", "anthropophagous", "anthroposophical", "anti", "anti semitic", "antibacterial", "antiballistic", "antibilious", "antibiotic", "antic", "anticholinergic", "antichristian", "anticipant", "anticipated", "anticipative", "anticipatory", "anticivic", "anticlerical", "anticlimactic", "anticlinal", "anticlockwise", "anticoagulant", "anticonvulsant", "anticorrosive", "anticyclone", "anticyclonic", "antidepressant", "antidiuretic", "antidotal", "antidromic", "antifouling", "antifriction", "antigenic", "antiguan", "antiknock", "antimalarial", "antimicrobial", "antimodernist", "antimonarchical", "antimonarchist", "antimonial", "antimonic", "antimonious", "antinodal", "antinoise", "antinomian", "antinomic", "antinomical", "antiochian", "antiodontalgic", "antipapal", "antiparallel", "antipathetic", "antipathetical", "antiperiodic", "antiperistaltic", "antiperspirant", "antipetalous", "antiphlogistic", "antiphonal", "antiphonary", "antiphonic", "antiphrastic", "antiphrastical", "antipodal", "antipodean", "antipruritic", "antipyretic", "antiquarian", "antiquated", "antique", "antirachitic", "antirust", "antiscorbutic", "antiscriptural", "antisepalous", "antiseptic", "antiskid", "antisocial", "antispasmodic", "antistatic", "antistrophic", "antisubmarine", "antitank", "antithetic", "antithetical", "antitoxic", "antitrade", "antitussive", "antitypic", "antitypical", "antiviral", "antivirus", "antiwar", "antlered", "antliate", "antlike", "antonymous", "antrorse", "anucleate", "anurous", "anxiolytic", "anxious", "any", "aoristic", "aortal", "aortic", "apart", "apartmental", "apatetic", "apathetic", "apeak", "aperient", "aperiodic", "aperitive", "apetalous", "aphasic", "aphelian", "apheliotropic", "aphetic", "aphidian", "aphidious", "aphonic", "aphoristic", "aphotic", "aphrodisiac", "aphyllous", "apian", "apiarian", "apical", "apiculate", "apish", "apivorous", "aplacental", "aplanatic", "aplastic", "apocalyptic", "apocalyptical", "apocarpous", "apochromatic", "apocrine", "apocryphal", "apocynaceous", "apodal", "apodeictic", "apodictic", "apodous", "apogamic", "apogamous", "apogeal", "apogean", "apogeotropic", "apolitical", "apollonian", "apologetic", "apomictic", "apomictical", "aponeurotic", "apopemptic", "apophthegmatic", "apophthegmatical", "apoplectic", "aposematic", "aposiopetic", "apostate", "apostolic", "apostolical", "apostrophic", "apothecial", "apothegmatic", "apothegmatical", "apotropaic", "appalachian", "appalled", "appalling", "apparent", "apparitional", "appassionato", "appealable", "appealing", "appeasable", "appeasing", "appellant", "appellate", "appellative", "appendant", "appendicular", "appendiculate", "apperceptive", "appetent", "appetitive", "appetizing", "applausive", "appliable", "applicable", "applicative", "applicatory", "applied", "appointed", "appointive", "apportioned", "apposite", "appositely", "appositional", "appositive", "appraisable", "appraising", "appraisive", "appreciable", "appreciated", "appreciative", "appreciatory", "apprehensible", "apprehensive", "apprentice", "apprenticed", "appressed", "approachable", "approaching", "approbative", "approbatory", "appropriate", "appropriated", "appropriative", "approvable", "approved", "approving", "approximal", "approximate", "approximative", "appurtenant", "apropos", "apsidal", "apt", "apteral", "apterous", "apterygial", "apyretic", "aqua", "aquaphobic", "aquarian", "aquarius", "aquatic", "aqueous", "aquiline", "arabesque", "arabian", "arabic", "arable", "araceous", "arachnidan", "arachnoid", "araeostyle", "araeosystyle", "aragon", "araliaceous", "aramaic", "aran", "arawakan", "arbitrable", "arbitral", "arbitrary", "arboraceous", "arboreal", "arboreous", "arborescent", "arboricultural", "arborous", "arc", "arcadian", "arcane", "arced", "arch", "archaean", "archaeological", "archaic", "archaistic", "archangelic", "archducal", "arched", "archegonial", "archegoniate", "archetypal", "archetypical", "archidiaconal", "archiepiscopal", "archilochian", "archimedean", "arching", "archipelagic", "architectonic", "architectural", "architraved", "archival", "arctic", "arctogaean", "arcuate", "ardent", "arduous", "areal", "arenaceous", "arenicolous", "areolar", "areolate", "areopagitic", "areostyle", "argent", "argentiferous", "argentine", "argillaceous", "argive", "arguable", "arguing", "argumentative", "argus eyed", "argyle", "arhythmic", "arian", "arid", "arillate", "arilloid", "aristate", "aristocratic", "aristocratical", "aristophanic", "aristotelian", "arithmetic", "arithmetical", "arizonan", "arizonian", "arkansan", "armchair", "armed", "armenian", "armenoid", "armigeral", "armigerous", "armillary", "arminian", "armipotent", "armless", "armor plated", "armored", "armorial", "armorican", "armour clad", "armour plated", "armoured", "aroid", "aromatic", "around the clock", "aroused", "arow", "arpeggiated", "arranged", "arrant", "arrased", "arrayed", "arrestable", "arrested", "arresting", "arrestive", "arrhythmic", "arriving", "arrogant", "arrogated", "arrowy", "arsenic", "arsenical", "arsenious", "artefactual", "arterial", "arteriosclerotic", "artful", "arthralgic", "arthritic", "arthropodal", "arthurian", "articled", "articulable", "articular", "articulate", "articulated", "articulating", "articulatory", "artier", "artiest", "artificial", "artiodactyl", "artisanal", "artistic", "artless", "arty", "arty crafty", "arundinaceous", "aryan", "aryballoid", "arytenoid", "asbestine", "asbestous", "ascendable", "ascendant", "ascendent", "ascendible", "ascending", "ascensional", "ascensive", "ascertainable", "ascertained", "ascetic", "ascetical", "ascidian", "ascitic", "ascitical", "asclepiadaceous", "asclepiadean", "ascribable", "asepalous", "aseptic", "asexual", "ashake", "ashamed", "ashen", "ashier", "ashiest", "ashy", "asian", "asianic", "asiatic", "asinine", "askance", "askant", "askew", "asking", "aslant", "asleep", "aslope", "asocial", "aspectual", "aspen", "aspersive", "asphalt", "asphaltic", "aspheric", "asphyxial", "asphyxiant", "asphyxiated", "asphyxiating", "aspirant", "aspirate", "aspiratory", "aspiring", "asprawl", "asquint", "assailable", "assamese", "assassinated", "assault", "assaulted", "assayable", "assembled", "assentient", "assenting", "assentive", "assertable", "asserted", "asserting", "assertive", "assertory", "assessable", "assessorial", "assiduous", "assignable", "assigned", "assimilable", "assimilating", "assimilative", "assistant", "assisted", "associable", "associate", "associated", "associative", "assonant", "assonantal", "assortative", "assorted", "assuasive", "assumable", "assumed", "assuming", "assumptive", "assured", "assurgent", "assuring", "assyrian", "astable", "astatic", "asteriated", "asterisked", "asteroid", "asteroidal", "asthenic", "asthmatic", "astigmatic", "astir", "astomatous", "astonied", "astonished", "astonishing", "astounded", "astounding", "astral", "astrictive", "astringent", "astrological", "astronomic", "astronomical", "astrophysical", "astucious", "astute", "astylar", "asunder", "aswarm", "asymmetric", "asymmetrical", "asymptomatic", "asymptotic", "asynchronous", "asyndetic", "asyntactic", "at home", "atactic", "ataractic", "ataraxic", "atavistic", "ataxic", "atelectatic", "athanasian", "atheism", "atheist", "atheistic", "atheistical", "athematic", "athenian", "atherine", "athermanous", "atheromatous", "atherosclerotic", "athetoid", "athetosic", "athirst", "athletic", "athrill", "atilt", "atingle", "atlantean", "atlantic", "atmospheric", "atmospherical", "atomic", "atomism", "atomistic", "atonal", "atonic", "atrabilious", "atrial", "atrip", "atrocious", "atrophied", "attachable", "attached", "attack", "attackable", "attacking", "attainable", "attained", "attemptable", "attempted", "attendant", "attended", "attending", "attent", "attentional", "attentive", "attenuant", "attenuate", "attenuated", "attestable", "attestative", "attested", "attic", "attired", "attitudinal", "attractable", "attractive", "attrahent", "attributable", "attributive", "attrite", "attritional", "attuned", "atwitter", "atypical", "auburn", "aubusson", "auctionary", "auctorial", "audacious", "audible", "audient", "audile", "audiometric", "audiovisual", "auditive", "auditory", "augean", "augitic", "augmentable", "augmentative", "augmented", "augmenting", "augural", "august", "augustan", "augustinian", "auld", "aulic", "aural", "aureate", "auric", "auricled", "auricular", "auriculate", "auriculated", "auriferous", "auriform", "aurignacian", "auroral", "aurorean", "aurous", "auscultatory", "auspicious", "austenitic", "austere", "austral", "australasian", "australian", "australoid", "australopithecine", "austrian", "austroasiatic", "austronesian", "autarchic", "autarchical", "autarkic", "autarkical", "autecologic", "autecological", "authentic", "authentical", "authenticated", "authorial", "authorisable", "authorised", "authoritarian", "authoritative", "authorizable", "authorized", "authorless", "autistic", "autobiographic", "autobiographical", "autocatalytic", "autocephalous", "autochthonous", "autocratic", "autodidactic", "autoerotic", "autogamic", "autogamous", "autogenic", "autogenous", "autographed", "autographic", "autokinetic", "autologous", "autolytic", "automated", "automatic", "automorphic", "automotive", "autonomic", "autonomous", "autoplastic", "autoradiograph", "autoradiographic", "autosomal", "autotelic", "autotrophic", "autumn", "autumnal", "auxetic", "auxiliary", "available", "avant garde", "avaricious", "avascular", "avenaceous", "avengeful", "avenging", "average", "averse", "aversive", "avertable", "avertible", "avestan", "avian", "avid", "avionic", "avocado", "avoidable", "avowable", "avowed", "avulsed", "avuncular", "awaited", "awake", "awakened", "awakening", "aware", "awash", "away", "awe inspiring", "aweary", "awed", "aweless", "awesome", "awestricken", "awestruck", "awful", "awheel", "awing", "awkward", "awned", "awnless", "awny", "awol", "awry", "axial", "axile", "axillary", "axiological", "axiomatic", "axiomatical", "axonometric", "aymaran", "azeotropic", "azilian", "azimuthal", "azoic", "azonal", "azonic", "azotic", "aztec", "aztecan", "azure", "azygos", "azygous", "babbling", "babist", "baboonish", "baby", "babyish", "babylonian", "babylonish", "baccate", "bacchanal", "bacchanalian", "bacchic", "bacciferous", "bacciform", "baccivorous", "bacillar", "bacillary", "bacilliform", "back", "back to back", "backboned", "backboneless", "backbreaking", "backed", "background", "backhand", "backhanded", "backless", "backmost", "backstage", "backstair", "backstairs", "backswept", "backward", "backwoods", "baconian", "bacterial", "bactericidal", "bacterioid", "bacteriological", "bacteriolytic", "bacteriostatic", "bacteroid", "bactrian", "baculiform", "baculine", "bad", "bad tempered", "baddish", "badgerly", "baffled", "baffling", "baggier", "baggiest", "baggy", "bahai", "bahamian", "bailable", "bairnly", "baked", "baking", "baking hot", "balaamitical", "balanced", "balconied", "bald", "bald headed", "balding", "baldish", "baldpated", "baleful", "balinese", "balkan", "balked", "balkier", "balkiest", "balking", "balky", "ball bearing", "balled", "balletic", "ballistic", "ballooning", "bally", "balmier", "balmiest", "balmy", "balneal", "balsamic", "balsamiferous", "balsamy", "baltic", "baluchi", "baluster", "balustered", "balustraded", "bamboo", "banal", "bananas", "banausic", "bandaged", "banded", "bandoleered", "bandoliered", "bandy", "bandy legged", "baneful", "bang up", "banging", "bangled", "bankable", "bankrupt", "banned", "banner", "bannered", "bantam", "bantering", "bantu", "baptismal", "baptist", "bar", "barbadian", "barbarian", "barbaric", "barbarous", "barbate", "barbecued", "barbed", "barbellate", "barbituric", "bardic", "bardy", "bare", "bareback", "barebacked", "bared", "barefaced", "barefoot", "barefooted", "barehanded", "bareheaded", "bareknuckle", "barelegged", "barer", "barest", "bargain", "bargain basement", "baric", "baring", "barish", "baritone", "barkier", "barkiest", "barkless", "barky", "barmecidal", "barmecide", "barmier", "barmiest", "barmy", "barnacled", "barometric", "barometrical", "baronetical", "baronial", "baroque", "barratrous", "barred", "barrel chested", "barrel vaulted", "barrelled", "barren", "barricaded", "barristerial", "bartizaned", "barytic", "barytone", "basal", "basaltic", "base", "based", "baseless", "baser", "basest", "bashful", "basic", "basidial", "basidiomycetous", "basifixed", "basilar", "basilican", "basipetal", "basophil", "basophilic", "bass", "bassy", "bastard", "bastardized", "bastardly", "bastioned", "bated", "bathetic", "batholithic", "batholitic", "bathonian", "bathyal", "bathymetric", "bathymetrical", "bathypelagic", "batrachian", "bats", "bats in the belfry", "battailous", "battered", "battier", "battiest", "battle scarred", "battled", "battlemented", "battological", "batty", "batwing", "bausond", "bauxitic", "bavarian", "bawdier", "bawdiest", "bawdy", "bawling", "bay", "beached", "beachy", "beaded", "beadier", "beadiest", "beady", "beady eyed", "beaked", "beaky", "beamier", "beamiest", "beaming", "beamish", "beamless", "beamy", "bearable", "bearded", "beardless", "bearing", "bearish", "bearlike", "beastlier", "beastliest", "beastlike", "beastly", "beat", "beat up", "beatable", "beaten", "beatific", "beatified", "beating", "beauish", "beaut", "beauteous", "beautiful", "becalmed", "becoming", "bedaubed", "beddable", "bedded", "bedecked", "bedewed", "bedfast", "bedight", "bedimmed", "bedraggled", "bedrid", "bedridden", "beechen", "beef witted", "beefier", "beefiest", "beefy", "beerier", "beeriest", "beery", "beetle", "beetle browed", "beetling", "befitting", "befogged", "beforehand", "befouled", "befuddled", "beggarly", "beginning", "begotten", "begrimed", "begrudging", "beguiled", "beguiling", "behavioral", "behaviorist", "behavioural", "behaviourist", "beheaded", "behind", "beholden", "beige", "bejeweled", "bejewelled", "belated", "belgian", "belgic", "belgravian", "believable", "belittled", "belittling", "bell bottomed", "belletristic", "bellicose", "bellied", "belligerent", "bellying", "belorussian", "beloved", "belted", "bemazed", "bemused", "ben", "bended", "bending", "bendwise", "bendy", "benedictional", "benedictive", "benedictory", "benefic", "beneficed", "beneficent", "beneficial", "beneficiary", "benevolent", "bengalese", "bengali", "benighted", "benign", "benignant", "bent", "bentham", "benthic", "benthonic", "benumbed", "benzal", "benzoic", "bequeathable", "berber", "berberidaceous", "bereaved", "bereft", "bergsonian", "beribboned", "berkeleian", "bermuda", "bermudan", "bermudian", "bernardine", "berried", "berserk", "beseeching", "besetting", "besieged", "besmeared", "besmirched", "besotted", "bespangled", "bespattered", "bespectacled", "bespoke", "bespoken", "besprent", "bessarabian", "best", "best ball", "best selling", "bestead", "bested", "bestial", "bestowed", "betraying", "betrothed", "better", "bettering", "betting", "bevel", "beveled", "bewhiskered", "bewildered", "bewildering", "bewitched", "bewitching", "bhutan", "biafran", "biannual", "bias", "biased", "biaxal", "biaxial", "bibbed", "biblical", "bibliographic", "bibliographical", "bibliolatrous", "bibliological", "bibliomania", "bibliomaniacal", "bibliopegic", "bibliopolic", "bibliopolical", "bibulous", "bicameral", "bicentenary", "bicentennial", "bicephalous", "bicipital", "biconcave", "biconvex", "bicorn", "bicuspid", "bicuspidate", "biddable", "bidentate", "bidirectional", "biedermeier", "biennial", "bifacial", "bifarious", "bifid", "bifilar", "bifocal", "bifold", "bifoliate", "bifoliolate", "biform", "bifurcate", "bifurcated", "big", "big bellied", "big league", "big name", "big ticket", "big time", "bigamous", "bigeneric", "bigger", "biggest", "biggish", "bigheaded", "bighearted", "bignoniaceous", "bigoted", "bihari", "bijou", "bilabial", "bilabiate", "bilateral", "bilgier", "bilgiest", "bilgy", "biliary", "bilingual", "bilious", "biliteral", "billed", "billion", "billionth", "billowier", "billowiest", "billowing", "billowy", "bilobate", "bilobed", "bilocular", "bimanous", "bimanual", "bimestrial", "bimetallic", "bimillenary", "bimodal", "bimolecular", "bimonthly", "binary", "binate", "binaural", "binding", "binocular", "binomial", "binominal", "biobibliographical", "biochemical", "biodegradable", "biodynamic", "biogenetic", "biogenic", "biogenous", "biogeochemical", "biogeographical", "biographic", "biographical", "biological", "bioluminescent", "biomedical", "biometric", "biomorphic", "bionic", "bionomic", "biophysical", "bioplasmic", "biosynthetic", "biosystematic", "biotechnological", "biotic", "biparous", "bipartisan", "bipartite", "biped", "bipedal", "bipetalous", "bipinnate", "bipolar", "biquadratic", "biracial", "biramous", "birch", "birchen", "bird s eye", "bird brained", "birdlike", "birefringent", "birk", "birken", "birthing", "biserial", "biserrate", "bisexual", "bissextile", "bistable", "bistred", "bisulcate", "bit", "bitchier", "bitchiest", "bitchy", "biting", "bitless", "bitonal", "bitten", "bitter", "bitterish", "bittersweet", "bitty", "bituminous", "bivalent", "bivalve", "bivalvular", "bivariate", "biyearly", "bizarre", "bizonal", "black", "black a vised", "black and blue", "black and tan", "black and white", "black coated", "black figure", "black hearted", "black letter", "blackened", "blackguardly", "blackish", "bladdery", "bladed", "blae", "blah", "blamable", "blame", "blameable", "blamed", "blameful", "blameless", "blameworthy", "blanched", "bland", "blank", "blanket", "blankety", "blankety blank", "blaring", "blasphemous", "blasted", "blasting", "blastoderm", "blastular", "blatant", "blate", "blathering", "blazing", "bleached", "bleak", "blear", "blear eyed", "blearier", "bleariest", "bleary", "bleary eyed", "bleeding", "blemished", "blended", "blending", "blessed", "blest", "blighted", "blightingly", "blimpish", "blind", "blinded", "blindfold", "blindfolded", "blinding", "blinking", "blissful", "blissless", "blistered", "blistering", "blistery", "blithe", "blithering", "blithesome", "blizzardly", "blizzardy", "bloated", "blockaded", "blockading", "blocked", "blockish", "blocky", "blond", "blonde", "blood and thunder", "blood red", "blooded", "bloodied", "bloodier", "bloodiest", "bloodless", "bloodshot", "bloodstained", "bloodsucking", "bloodthirsty", "bloody", "bloody minded", "bloodying", "bloomed", "bloomier", "bloomiest", "blooming", "bloomless", "bloomsbury", "bloomy", "blossomy", "blotched", "blotchier", "blotchiest", "blotchy", "blotto", "blotty", "blow by blow", "blowhard", "blowier", "blowiest", "blown", "blowsier", "blowsiest", "blowsy", "blowy", "blowzed", "blowzier", "blowziest", "blowzy", "blubber", "blubbery", "blue", "blue black", "blue blooded", "blue collar", "blue eyed", "blue sky", "bluer", "bluest", "bluff", "bluish", "blunt", "blunted", "blurred", "blurry", "blushful", "blushing", "blushless", "blustering", "blusterous", "blustery", "boarish", "boastful", "boastless", "bobbery", "bobs", "bobtail", "bobtailed", "bodacious", "bodger", "bodied", "bodiless", "bodily", "boding", "body line", "boeotian", "boggy", "bogus", "bohemian", "boiled", "boiling", "boisterous", "bold", "bold faced", "bolivian", "bolometric", "bolshevist", "bolshie", "bolshy", "bolted", "bomb", "bombacaceous", "bombastic", "bombproof", "bombycid", "bonapartean", "bond", "bonded", "bone", "bone dry", "bone idle", "boned", "boneheaded", "boneless", "bonhomous", "bonier", "boniest", "bonism", "bonkers", "bonnie", "bonnier", "bonniest", "bonny", "bony", "bonzer", "boobyish", "book learned", "bookable", "booked", "bookish", "bookless", "bookmaking", "booming", "boon", "boorish", "booted", "bootleg", "bootless", "bootlicking", "boozier", "booziest", "boozy", "boracic", "boraginaceous", "bordelaise", "bordered", "bordering", "borderless", "borderline", "boreal", "bored", "boric", "boring", "born", "born again", "bosker", "boskier", "boskiest", "bosky", "bosnian", "bosom", "bosomed", "bosomy", "boss", "boss eyed", "bossier", "bossiest", "bossy", "boswellian", "botanic", "botanical", "botched", "botchier", "botchiest", "botchy", "both", "bothered", "bothersome", "botryoid", "botryoidal", "botryose", "bottle fed", "bottle green", "bottle nosed", "bottom", "bottom up", "bottomed", "bottomless", "bottommost", "bouffant", "bought", "boughten", "bouilli", "boulle", "bouncing", "bouncy", "bound", "bounded", "bounden", "bounding", "boundless", "bounteous", "bountiful", "bourgeois", "boustrophedon", "bousy", "bovid", "bovine", "bow", "bow windowed", "bowed", "bowery", "bowing", "box office", "boxed", "boxlike", "boxy", "boy meets girl", "boyish", "braced", "brachial", "brachiate", "brachiopod", "brachycephalic", "brachydactylic", "brachydactylous", "brachypterous", "brachyurous", "bracing", "brackish", "bracteal", "bracteate", "bracteolate", "bractless", "brag", "braggart", "bragging", "brahmanic", "brahmanical", "brahminic", "brahminical", "braided", "brainier", "brainiest", "brainish", "brainless", "brainsick", "brainwashed", "brainy", "braised", "brakeless", "braky", "braless", "bramblier", "brambliest", "brambly", "bran new", "branched", "branchial", "branchiate", "branching", "branchiopod", "branchless", "branchlike", "branchy", "brand new", "branded", "brannier", "branniest", "branny", "brash", "brashier", "brashiest", "brashy", "brassier", "brassiest", "brassy", "brattish", "bratty", "brave", "braver", "bravest", "braving", "braw", "brawling", "brawny", "brazen", "brazen faced", "brazilian", "breached", "bread and butter", "breakable", "breakaway", "breaking", "breakneck", "breast fed", "breasted", "breathable", "breathed", "breathier", "breathiest", "breathing", "breathless", "breathtaking", "breathy", "breeched", "breechless", "breechloading", "breeding", "breezeless", "breezier", "breeziest", "breezy", "bregmatic", "brevipennate", "briarean", "bribable", "bribeable", "brick", "brick red", "brickier", "brickiest", "brickle", "bricky", "bridal", "bridgeable", "bridgeless", "brief", "briefless", "briery", "bright", "brilliant", "brilliant cut", "brimful", "brimless", "brimming", "brimstony", "brinded", "brindle", "brindled", "brinier", "briniest", "brinish", "briny", "brisk", "bristled", "bristly", "britannic", "british", "brittle", "brittonic", "broached", "broad", "broad gauge", "broad leaved", "broad minded", "broadband", "broadcast", "broadish", "broadloom", "broadside", "brocaded", "broch", "broguish", "broiled", "broke", "broken", "broken backed", "broken down", "broken hearted", "broken in", "broken winded", "bromeliaceous", "bromic", "bromidic", "bronchial", "bronchitic", "bronchoscopic", "bronze", "bronzed", "bronzy", "brood", "broodier", "broodiest", "brooding", "broody", "broomy", "brother", "brotherlike", "brotherly", "browbeaten", "browless", "brown", "browned", "brownish", "browny", "bruised", "bruising", "brumal", "brummagem", "brumous", "brunet", "brunette", "brush fire", "brushed", "brushless", "brushy", "brusque", "brut", "brutal", "brute", "brutelike", "brutish", "bryological", "brythonic", "bubaline", "bubblier", "bubbliest", "bubbling", "bubbly", "bubonic", "buccal", "buccaneerish", "buccinatory", "buck", "bucked", "buckish", "buckram", "buckshee", "buckskin", "bucktooth", "bucktoothed", "bucolic", "buddhism", "buddhist", "buddhistic", "budding", "buddy buddy", "budget", "budgetary", "budless", "buff", "buffeted", "bug eyed", "bugged", "buggy", "bughouse", "bugs", "buhl", "building", "built", "built in", "built up", "buirdly", "bulbar", "bulbed", "bulbiferous", "bulbous", "bulgarian", "bulging", "bulgy", "bulimic", "bulk", "bulkier", "bulkiest", "bulky", "bull", "bull headed", "bull necked", "bull nosed", "bullate", "bulldog", "bullet headed", "bullied", "bullish", "bullocky", "bully", "bullying", "bum", "bumbling", "bumper", "bumper to bumper", "bumpier", "bumpiest", "bumpkinish", "bumptious", "bumpy", "bunched", "bunchier", "bunchiest", "bunchy", "bung", "bungaloid", "bungled", "bungling", "bunodont", "bunted", "buoyant", "buprestid", "bur reed", "burbling", "burdened", "burdensome", "bureaucratic", "burghal", "burglarious", "burgundian", "buried", "burked", "burled", "burlesque", "burlier", "burliest", "burly", "burman", "burmese", "burned", "burning", "burnished", "burnt", "burred", "burrier", "burriest", "burry", "bursal", "bursarial", "burseraceous", "bursiform", "burst", "bursting", "bush", "bushed", "bushier", "bushiest", "bushwhacking", "bushy", "busied", "busier", "busiest", "business", "busked", "buskined", "bust", "busted", "bustier", "bustiest", "bustled", "bustling", "busty", "busy", "busying", "butch", "butcherly", "buttery", "buttocked", "button down", "buttoned", "buttony", "buttressed", "butyraceous", "butyric", "buxom", "buyable", "buzzing", "by past", "bye", "byelorussian", "bygone", "byronic", "byssaceous", "byssal", "byssoid", "byzantine", "cabalistic", "cabbagy", "cabbalistic", "cabbalistical", "cabinet", "cable laid", "caboched", "caboshed", "cacciatore", "cachectic", "cachectical", "cachinnatory", "cack handed", "cacodylic", "cacographic", "cacographical", "cacophonic", "cacophonous", "cactaceous", "cacuminal", "cadastral", "cadaveric", "cadaverous", "caddish", "cade", "cadenced", "cadent", "cadential", "cadgy", "caducean", "caducous", "caecal", "caecilian", "caenozoic", "caesalpiniaceous", "caesarean", "caespitose", "caesural", "cagey", "cagier", "cagiest", "cagy", "cainozoic", "cairene", "cairned", "caitiff", "calabrian", "calamitous", "calando", "calcaneal", "calcanean", "calcareous", "calced", "calceiform", "calceolate", "calcic", "calcicolous", "calciferous", "calcific", "calcifugous", "calcinable", "calculable", "calculated", "calculating", "calculational", "calculative", "calculous", "caledonian", "calefacient", "calefactive", "calefactory", "calendered", "calendric", "calendrical", "calfless", "calibered", "calibred", "calico", "californian", "caliginous", "caliphal", "calisthenic", "callable", "called", "called for", "caller", "calligraphic", "calligraphical", "callisthenic", "callous", "callow", "calm", "calmative", "calming", "calmy", "caloric", "calorific", "calumniatory", "calumnious", "calved", "calvinism", "calvinist", "calvinistic", "calvinistical", "calyciform", "calycinal", "calycine", "calycled", "calyculate", "calyptrate", "cambial", "cambodian", "cambrian", "camera shy", "cameral", "cameronian", "camouflaged", "camp", "campanological", "campanulaceous", "campanular", "campanulate", "campestral", "camphoraceous", "camphorated", "camphoric", "campodeid", "campodeiform", "campy", "campylotropous", "can do", "canadian", "canalicular", "canaliculate", "canaliculated", "canarese", "canary", "cancellate", "cancellated", "cancelled", "cancellous", "cancerous", "cancrine", "cancrizans", "cancroid", "candent", "candescent", "candid", "candied", "candy striped", "canescent", "canicular", "canine", "cankered", "cankerous", "cannabic", "canned", "cannibalistic", "cannier", "canniest", "cannonball", "cannular", "canny", "canonic", "canonical", "canonist", "canonistic", "canonized", "canopic", "canopied", "canorous", "cant", "cantabile", "cantabrigian", "cantankerous", "canted", "cantering", "cantharidal", "cantharidian", "cantonal", "cantonese", "cantorial", "cantoris", "canty", "cany", "capable", "capacious", "caparisoned", "caped", "capeskin", "capetian", "capillaceous", "capillary", "capital", "capitalist", "capitalistic", "capitate", "capitular", "capitulary", "capitulatory", "capparidaceous", "capped", "capreolate", "capricious", "capricorn", "caprifoliaceous", "caprine", "caprylic", "capsian", "capsizable", "capsular", "capsulate", "captious", "captivated", "captivating", "captive", "car", "carabid", "caramel", "carangid", "carangoid", "carapacial", "carbocyclic", "carbolic", "carbonaceous", "carbonated", "carbonic", "carboniferous", "carbonyl", "carboxyl", "carboxylic", "carbuncled", "carbuncular", "carcinogenic", "carcinomatous", "card carrying", "cardboard", "cardiac", "cardinal", "cardiological", "cardiopulmonary", "cardiorespiratory", "cardiovascular", "carefree", "careful", "careless", "caressing", "caressive", "careworn", "caribbean", "carinate", "caring", "cariogenic", "carious", "carking", "carlish", "carlovingian", "carminative", "carmine", "carnal", "carnassial", "carnation", "carneous", "carnivalesque", "carnivorous", "carnose", "carolean", "caroline", "carolingian", "carolinian", "carotenoid", "carotid", "carousing", "carpal", "carpellary", "carpellate", "carpetbag", "carpeted", "carping", "carpophagous", "carroty", "carsick", "cartelist", "cartesian", "carthaginian", "cartilaginous", "cartographic", "cartographical", "caruncular", "carunculate", "carunculous", "carved", "carvel built", "carven", "caryatidal", "caryophyllaceous", "case hardened", "casebook", "cased", "casemated", "casemented", "caseous", "cash and carry", "cashed", "caspian", "cassocked", "cast", "cast iron", "cast off", "castalian", "castaway", "casteless", "castellated", "castigatory", "castilian", "castled", "castor", "castrated", "casual", "casuistic", "casuistical", "cat and dog", "cat eyed", "catabolic", "catacaustic", "catachrestic", "catachrestical", "cataclysmal", "cataclysmic", "catacumbal", "catadioptric", "catadromous", "catalan", "catalectic", "cataleptic", "catalogued", "catalytic", "catalytical", "catamenial", "cataphractic", "cataphyllary", "cataplexy", "catapultic", "catarrhal", "catarrhine", "catarrhous", "catastrophic", "catatonic", "catch as catch can", "catchable", "catchier", "catchiest", "catching", "catchpenny", "catchweight", "catchy", "catechetic", "catechetical", "catechismal", "catechistic", "catechistical", "catechumenical", "categorial", "categoric", "categorical", "categorized", "catenary", "catenate", "catercorner", "caterpillar", "cathartic", "cathectic", "cathedral", "cathodic", "catholic", "catoptric", "cattish", "catty", "catty cornered", "caucasian", "caucasoid", "caudal", "caudate", "caudated", "cauld", "caulescent", "caulicolous", "cauliform", "cauline", "caulked", "causal", "causative", "causeless", "caustic", "cauterant", "cautionary", "cautious", "cavalier", "cavalierly", "cavernous", "cavicorn", "caviling", "cavitied", "cayenned", "ceaseless", "cecal", "cedar", "cedarn", "ceilinged", "celebrated", "celebratory", "celestial", "celiac", "celibate", "cellular", "celluloid", "cellulosic", "celsius", "celtic", "cementitious", "cenozoic", "censored", "censorial", "censorian", "censorious", "censual", "censurable", "censured", "centaurian", "centenarian", "centenary", "centennial", "center", "centered", "centesimal", "centigrade", "centillionth", "central", "central fire", "centralism", "centralist", "centralized", "centralizing", "centre fire", "centred", "centric", "centrical", "centrifugal", "centripetal", "centrist", "centrobaric", "centroclinal", "centroidal", "centrosome", "centum", "centuple", "centuplicate", "centurial", "cephalalgic", "cephalate", "cephalic", "cephalochordate", "cephalopod", "cephalous", "ceraceous", "ceramic", "cerated", "ceratoid", "cercal", "cercarian", "cereal", "cerebellar", "cerebral", "cerebric", "cerebrospinal", "cerebrotonic", "cerebrovascular", "cered", "ceremonial", "ceremonious", "cereous", "ceric", "ceriferous", "cerise", "cernuous", "cerographic", "cerographical", "ceroplastic", "cerous", "certain", "certifiable", "certificated", "certificatory", "certified", "cerulean", "ceruminous", "cervical", "cervid", "cervine", "cesarean", "cespitose", "cestoid", "cesural", "cetacean", "cetaceous", "ceylonese", "chad", "chadic", "chafed", "chaffier", "chaffiest", "chaffless", "chaffy", "chagrined", "chain driven", "chained", "chainless", "chairborne", "chalcedonic", "chalcographic", "chalcographical", "chalcolithic", "chaldaic", "chaldean", "chaliced", "chalkier", "chalkiest", "chalky", "challengeable", "challenging", "chalybeate", "chambered", "chameleonic", "chameleonlike", "champertous", "champion", "chance", "chanceful", "chanceless", "chancier", "chanciest", "chancroid", "chancroidal", "chancrous", "chancy", "changeable", "changed", "changeful", "changeless", "changing", "chanted", "chantilly", "chaotic", "chapeless", "chapfallen", "chapleted", "chapped", "character", "characterful", "characteristic", "characterized", "characterless", "charcoal", "chargeable", "charged", "chargeful", "chargeless", "charier", "chariest", "charismatic", "charitable", "charlatanic", "charlatanical", "charmed", "charming", "charmless", "charnel", "charrier", "charriest", "charry", "chartaceous", "chartered", "chartless", "chary", "charybdian", "chasidic", "chasmal", "chasmed", "chasmic", "chasmogamic", "chasmy", "chasseur", "chaste", "chastened", "chaster", "chastest", "chastisable", "chastised", "chatoyant", "chattering", "chattier", "chattiest", "chatty", "chaucerian", "chautauqua", "chauvinistic", "cheap", "cheap jack", "cheating", "checked", "checkered", "checky", "cheek", "cheeked", "cheekier", "cheekiest", "cheeky", "cheerful", "cheerier", "cheeriest", "cheering", "cheerless", "cheerly", "cheery", "cheese head", "cheesed", "cheesy", "chekhovian", "chelate", "chelated", "chelicerate", "cheliferous", "cheliform", "chellean", "chelonian", "chemic", "chemical", "chemoreceptive", "chemotactic", "chemotropic", "chemurgic", "chemurgical", "chenopodiaceous", "chequered", "chequy", "cherished", "cherry", "cherty", "cherubic", "cherubical", "chestier", "chestiest", "chestnut", "chesty", "chevroned", "chewable", "chewier", "chewiest", "chewy", "chian", "chiastic", "chic", "chichi", "chicken", "chicken hearted", "chicken livered", "chief", "chiefless", "chiefly", "chiffon", "childbearing", "childing", "childish", "childless", "childlike", "childly", "chilean", "chiliastic", "chill", "chilled", "chillier", "chilliest", "chilling", "chilly", "chilopod", "chimeric", "chimerical", "chin", "china", "chinese", "chinked", "chinless", "chintzier", "chintziest", "chintzy", "chipped", "chipper", "chippy", "chirk", "chiromantic", "chiromantical", "chiropodial", "chiropteran", "chirpier", "chirpiest", "chirpy", "chirrupy", "chiseled", "chiselled", "chitinoid", "chitinous", "chivalric", "chivalrous", "chlamydate", "chlamydeous", "chloric", "chloritic", "chlorotic", "chlorous", "chock a block", "chock full", "chocker", "chocolate", "chocolaty", "choice", "choicer", "choicest", "choke full", "choked", "chokey", "chokier", "chokiest", "choking", "choky", "cholagogue", "choleraic", "choleric", "cholinergic", "chomsky", "chondral", "chondritic", "choosey", "choosier", "choosiest", "choosy", "chopfallen", "chopped", "choppier", "choppiest", "chopping", "choppy", "choragic", "choral", "chordal", "chordate", "choreic", "choreographic", "chorial", "choriambic", "choric", "chorioid", "chorionic", "chorographic", "chorographical", "choroid", "chosen", "chrematistic", "chrestomathic", "chrismal", "christadelphian", "christian", "christianlike", "christianly", "christless", "christlike", "christly", "christocentric", "christological", "chromatic", "chromatographic", "chromic", "chromophil", "chromosomal", "chronic", "chronological", "chronometric", "chronometrical", "chrysalid", "chryselephantine", "chthonian", "chthonic", "chubbier", "chubbiest", "chubby", "chuck full", "chuffier", "chuffiest", "chuffy", "chummier", "chummiest", "chummy", "chunderous", "chunkier", "chunkiest", "chunky", "churchier", "churchiest", "churchless", "churchly", "churchward", "churchy", "churlish", "churning", "churrigueresque", "chylaceous", "chyliferous", "chymous", "ci devant", "ciceronian", "cichlid", "cigar shaped", "ciliary", "ciliate", "ciliated", "ciliolate", "cimmerian", "cinchonic", "cindery", "cinematic", "cinematographic", "cinerary", "cinereous", "cingalese", "cinnabarine", "cinnamic", "cinnamonic", "circadian", "circassian", "circean", "circinate", "circling", "circuital", "circuitous", "circulable", "circular", "circulating", "circulative", "circulatory", "circumambient", "circumferential", "circumflex", "circumfluent", "circumfluous", "circumgyratory", "circumjacent", "circumlocutional", "circumlocutionary", "circumlocutory", "circumlunar", "circumnavigable", "circumnutatory", "circumpolar", "circumscissile", "circumscribable", "circumscribed", "circumscriptive", "circumsolar", "circumspect", "circumspective", "circumstantial", "circumventive", "cirrate", "cirrhotic", "cirriform", "cirriped", "cirripede", "cirrose", "cirsoid", "cislunar", "cismontane", "cissoid", "cissy", "cistaceous", "cisted", "cistic", "citable", "citatory", "citeable", "citified", "citreous", "citric", "citrous", "citrus", "cityfied", "civic", "civil", "civilian", "civilisable", "civilizable", "civilized", "clactonian", "clad", "claimable", "clairvoyant", "clamant", "clammy", "clamorous", "clandestine", "clanging", "clangorous", "clanking", "clankless", "clannish", "clarified", "clarifying", "clarino", "clarion", "clashing", "clasping", "class conscious", "classable", "classic", "classical", "classier", "classiest", "classifiable", "classificatory", "classified", "classless", "classy", "clastic", "clathrate", "clattering", "clattery", "clausal", "claustral", "claustrophobic", "clausular", "clavate", "clavicorn", "clavicular", "claviform", "clawed", "clawless", "clayey", "clayish", "clean", "clean cut", "clean limbed", "clean living", "clean shaven", "cleanable", "cleaned", "cleanlier", "cleanliest", "cleanly", "cleansable", "cleansed", "cleansing", "clear", "clear cut", "clear eyed", "clear headed", "clear sighted", "cleared", "cleavable", "cleft", "cleidoic", "cleistogamic", "cleistogamous", "clement", "clenched", "clerical", "clerkish", "clerklier", "clerkliest", "clerkly", "clever", "clever clever", "cleverish", "cliental", "cliffier", "cliffiest", "cliffy", "climacteric", "climactic", "climactical", "climatic", "climatical", "climatological", "climbable", "climbing", "clinched", "clincher built", "clingier", "clingiest", "clingy", "clinical", "clinker built", "clinking", "clinometric", "clinquant", "clip fed", "clip on", "clipped", "clipping", "cliquey", "cliquish", "cliquy", "clithral", "clitic", "clitoral", "cloacal", "cloak and dagger", "cloaked", "clockwise", "cloddish", "cloddy", "clodhopping", "clogged", "clogging", "cloggy", "cloistered", "cloistral", "clonal", "clonic", "close", "close cropped", "close fisted", "close fitting", "close grained", "close hauled", "close knit", "close lipped", "close mouthed", "close reefed", "closed", "closed circuit", "closed door", "closer", "closest", "closet", "closing", "clostridial", "cloth eared", "clothed", "clotted", "clotty", "clouded", "cloudier", "cloudiest", "cloudless", "cloudy", "cloven", "cloven hoofed", "clovered", "clovery", "clownish", "cloying", "clubable", "clubbable", "clubbish", "clubby", "clucky", "clueless", "clumpy", "clumsier", "clumsiest", "clumsy", "clunky", "clupeid", "clupeoid", "clustered", "clustery", "cluttered", "clypeal", "clypeate", "cnemial", "cnidarian", "co optative", "co ordinal", "coach built", "coactive", "coadjutant", "coadunate", "coagulable", "coagulate", "coagulated", "coagulatory", "coal black", "coal tar", "coalesced", "coalescent", "coalier", "coalitional", "coaly", "coarctate", "coarse", "coarse grained", "coarsened", "coarser", "coarsest", "coastal", "coastward", "coastwise", "coated", "coatless", "coaxial", "coaxing", "cobaltic", "cobblestone", "cobwebby", "coccal", "coccoid", "coccygeal", "cochlear", "cochleate", "cock a hoop", "cockamamie", "cockeyed", "cockfighting", "cockier", "cockiest", "cockney", "cockneyish", "cocksure", "cocky", "coconscious", "coconut", "cod", "coddled", "codicillary", "codified", "coeducational", "coelanaglyphic", "coelenterate", "coeliac", "coelomate", "coenobitic", "coenobitical", "coequal", "coercible", "coercive", "coetaneous", "coeternal", "coeval", "coffered", "cogent", "cogged", "cogitable", "cogitative", "cognate", "cognisable", "cognisant", "cognitional", "cognitive", "cognizable", "cognizant", "cognominal", "cognoscible", "coherent", "cohesive", "cohortative", "coiled", "coiling", "coincident", "coincidental", "coinciding", "coital", "coky", "cold", "cold blooded", "cold drawn", "cold hearted", "cold short", "coldish", "coleopteran", "coleopterous", "colicky", "coliform", "collaborative", "collapsable", "collapsed", "collapsible", "collatable", "collateral", "collative", "collect", "collectable", "collected", "collectible", "collective", "collectivist", "collectivized", "collegial", "collegiate", "collembolan", "collenchymatous", "colligative", "collinear", "colloid", "colloidal", "colloquial", "collotypic", "collusive", "colly", "colombian", "colonial", "colonialism", "colonialist", "colonic", "colonized", "colonnaded", "color", "color blind", "colorable", "coloratura", "colored", "colorfast", "colorful", "colorific", "colorless", "colory", "colossal", "colour", "colour blind", "colourable", "coloured", "colourful", "colourless", "coltish", "colubrid", "colubrine", "columban", "columbian", "columbine", "columnar", "columned", "comal", "comate", "comatose", "combatable", "combatant", "combative", "combed", "combinable", "combinative", "combinatorial", "combinatory", "combined", "combining", "combless", "combust", "combustible", "combustion", "combustive", "come at able", "come hither", "comedic", "comelier", "comeliest", "comely", "comestible", "cometary", "comether", "cometic", "comfier", "comfiest", "comfortable", "comforted", "comforting", "comfortless", "comfy", "comic", "comical", "coming", "comitative", "commanding", "commeasurable", "commemorable", "commemorating", "commemorative", "commemoratory", "commendable", "commendatory", "commensal", "commensurable", "commensurate", "commentatorial", "commercial", "commercialized", "commie", "comminative", "comminatory", "commiserable", "commiserative", "commissarial", "commissioned", "commissural", "committed", "commo", "commodious", "common", "common law", "commonable", "commonplace", "commonsense", "commonsensical", "commorant", "commotional", "communal", "communicable", "communicant", "communicative", "communicatory", "communist", "communistic", "community", "commutable", "commutative", "commutual", "comose", "compact", "companionable", "companionate", "companionless", "comparable", "comparative", "compartmental", "compartmentalized", "compassable", "compassionate", "compatible", "compatriotic", "compellable", "compelled", "compelling", "compendious", "compensated", "compensational", "compensative", "compensatory", "competent", "competing", "competitive", "compilatory", "complacent", "complaining", "complaisant", "complanate", "compleat", "complected", "complemental", "complementary", "complemented", "completable", "complete", "completed", "completing", "completive", "complex", "complexional", "complexioned", "complexionless", "compliable", "compliant", "complicate", "complicated", "complicative", "complimentary", "complying", "compo", "component", "componental", "componential", "compony", "composed", "composite", "compositional", "compositive", "compossible", "compotatory", "compound", "compoundable", "compounded", "comprehended", "comprehensible", "comprehensive", "compressed", "compressible", "compressional", "compressive", "comprisable", "compromising", "compulsive", "compulsory", "compunctious", "compurgatorial", "compurgatory", "computable", "computational", "computative", "computerized", "comradely", "comtian", "comtist", "conative", "concatenate", "concave", "concavo concave", "concavo convex", "concealable", "concealed", "concealing", "conceded", "conceding", "conceited", "conceivable", "conceived", "concentrated", "concentrative", "concentric", "concentrical", "conceptional", "conceptive", "conceptual", "conceptualistic", "concerned", "concerning", "concertante", "concerted", "concessible", "concessionary", "concessive", "conchal", "conchate", "conched", "conchiferous", "conchoidal", "conchological", "conciliable", "conciliar", "conciliating", "conciliative", "conciliatory", "concinnous", "concise", "concluded", "concluding", "conclusive", "concoctive", "concomitant", "concordant", "concrete", "concretionary", "concretive", "concubinary", "concubine", "concupiscent", "concupiscible", "concurrent", "concurring", "concussive", "concyclic", "condemnable", "condemnatory", "condemned", "condemning", "condensable", "condensed", "condescending", "condign", "conditional", "conditioned", "condolatory", "condolent", "condonable", "conducible", "conducive", "conducted", "conductible", "conductive", "conduplicate", "condylar", "condyloid", "condylomatous", "confabulatory", "confarreate", "confectionary", "confederate", "confederative", "conferential", "conferrable", "conferred", "conferva", "confervoid", "confessed", "confessional", "confessionary", "confident", "confidential", "confiding", "configurational", "configured", "confinable", "confined", "confineless", "confining", "confirmable", "confirmative", "confirmatory", "confirmed", "confirming", "confiscable", "confiscate", "confiscated", "confiscatory", "conflagrant", "conflicting", "conflictive", "confluent", "confocal", "conformable", "conformal", "conforming", "conformist", "confounded", "confounding", "confrontational", "confucian", "confusable", "confused", "confusing", "confutable", "confutative", "congealable", "congealed", "congeneric", "congenerical", "congenial", "congenital", "congested", "congestible", "congestive", "conglobate", "conglomerate", "conglomeratic", "conglutinant", "conglutinative", "congolese", "congratulant", "congratulatory", "congregate", "congregational", "congressional", "congruent", "congruous", "conic", "conical", "conidial", "coniferous", "conirostral", "conjecturable", "conjectural", "conjoined", "conjoint", "conjugal", "conjugate", "conjugated", "conjugational", "conjugative", "conjunct", "conjunctional", "conjunctival", "conjunctive", "conjuring", "connate", "connatural", "connect", "connectable", "connected", "connectible", "connecting", "connective", "connivent", "conniving", "connotative", "connotive", "connubial", "conoid", "conquerable", "conquered", "conquering", "consanguine", "consanguineous", "conscience smitten", "conscience stricken", "conscienceless", "conscientious", "conscionable", "conscious", "conscriptional", "consecrate", "consecrated", "consecrative", "consecratory", "consecutive", "consensual", "consentaneous", "consentient", "consenting", "consequent", "consequential", "conservable", "conservant", "conservational", "conservative", "conservatory", "conserved", "conserving", "considerable", "considerate", "considered", "consignable", "consistent", "consistorial", "consistorian", "consociate", "consolable", "consolatory", "consolidated", "consolidative", "consoling", "consolingly", "consolute", "consonant", "consonantal", "conspecific", "conspicuous", "conspiratorial", "constabulary", "constant", "constantinian", "constellatory", "constipated", "constipating", "constituent", "constitutional", "constitutive", "constrainable", "constrained", "constraining", "constricted", "constricting", "constrictive", "constringent", "construable", "constructible", "constructional", "constructive", "consubstantial", "consuetudinary", "consular", "consultative", "consultatory", "consulting", "consultive", "consumable", "consumed", "consumerism", "consuming", "consummate", "consummated", "consummative", "consummatory", "consumptive", "contactual", "contagious", "containable", "contained", "containerized", "contaminable", "contaminate", "contaminated", "contaminating", "contaminative", "contemnible", "contemplable", "contemplative", "contemporaneous", "contemporary", "contemptible", "contemptuous", "contending", "content", "contented", "contentious", "conterminous", "contestable", "contextual", "contiguous", "continent", "continental", "contingent", "continuable", "continual", "continuant", "continuate", "continuative", "continued", "continuing", "continuous", "contorted", "contortional", "contortive", "contraband", "contrabass", "contraceptive", "contractable", "contracted", "contractible", "contractile", "contractional", "contractive", "contractual", "contradictable", "contradictious", "contradictive", "contradictory", "contradistinctive", "contralateral", "contralto", "contrapositive", "contrapuntal", "contrarious", "contrary", "contrasting", "contrastive", "contrasty", "contrasuggestible", "contrate", "contributable", "contributing", "contributive", "contributory", "contrite", "contrivable", "contrived", "controllable", "controlled", "controlling", "controversial", "controvertible", "contumacious", "contumelious", "contused", "contusive", "convalescence", "convalescent", "convectional", "convective", "convenable", "convenient", "conventional", "conventionalized", "conventual", "convergent", "converging", "conversable", "conversant", "conversational", "converse", "converted", "convertible", "convex", "convexo concave", "convexo convex", "conveyable", "conveyed", "convict", "convicted", "convictive", "convinced", "convincible", "convincing", "convivial", "convocational", "convolute", "convoluted", "convolvulaceous", "convulsant", "convulsible", "convulsionary", "convulsive", "cooing", "cookable", "cooked", "cooking", "cool", "cool headed", "cooled", "cooling", "cooling off", "coolish", "cooperative", "coordinate", "coordinated", "coordinating", "coordinative", "copacetic", "copepod", "copernican", "copesettic", "copied", "copious", "coplanar", "copper bottomed", "coppery", "coppiced", "coprolaliac", "coprolitic", "coprophagous", "coprophilous", "coptic", "copular", "copulative", "copulatory", "copyright", "copyrightable", "copyrighted", "coquettish", "coraciiform", "coral", "coralliferous", "coralline", "coralloid", "corbelled", "corbiculate", "cordate", "corded", "cordial", "cordiform", "cordless", "corduroy", "coreferential", "coreless", "coriaceous", "corinthian", "cork tipped", "corked", "corkier", "corkiest", "corking", "corky", "cormophytic", "cormous", "corn fed", "cornaceous", "corneal", "corned", "corneous", "corner", "cornered", "corniculate", "cornier", "corniest", "cornish", "cornual", "cornucopian", "cornute", "corny", "corollaceous", "corollary", "coronal", "coronary", "coronate", "coroneted", "corporal", "corporate", "corporatist", "corporative", "corporeal", "corpulent", "corpuscular", "correct", "correctable", "corrected", "correctible", "correctional", "corrective", "correlatable", "correlate", "correlated", "correlative", "correspondent", "corresponding", "corresponsive", "corrigible", "corroborant", "corroborate", "corroborated", "corroborative", "corroboratory", "corroded", "corrodible", "corrosive", "corrugate", "corrugated", "corrupt", "corrupted", "corruptible", "corrupting", "corruptive", "corsican", "cortical", "corticate", "corticolous", "coruscant", "corvine", "corybantic", "corymbose", "coseismal", "coseismic", "cosher", "cosier", "cosies", "cosiest", "cosmetic", "cosmic", "cosmogonic", "cosmogonical", "cosmographic", "cosmographical", "cosmological", "cosmopolitan", "cosmoramic", "cossack", "cost effective", "cost plus", "costal", "costate", "costive", "costlier", "costliest", "costly", "costume", "costumed", "cosy", "cotemporaneous", "coterminous", "cottaged", "cotton picking", "cottony", "cotyledonary", "cotyledonous", "cotyloid", "couchant", "councilmanic", "counsellable", "countable", "counter", "counter passant", "counter revolutionary", "counteractive", "counterbalanced", "counterbalancing", "counterclockwise", "counterfeit", "countermandable", "counterpoised", "countervailing", "countless", "countrified", "country", "countryfied", "countrywide", "county", "couped", "coupled", "courageous", "courant", "coursed", "courteous", "courtlier", "courtliest", "courtly", "cousinly", "couth", "couthie", "couthy", "covalent", "covariant", "coverable", "covered", "covering", "coverless", "covert", "covetable", "coveted", "covetous", "covinous", "coward", "cowardly", "cowed", "cowering", "cowled", "coxal", "coxcombic", "coxcombical", "coy", "coyish", "cozier", "coziest", "cozy", "crabbed", "crabbier", "crabbiest", "crabby", "crablike", "crabwise", "crack", "crackajack", "crackbrained", "cracked", "cracker barrel", "crackerjack", "crackers", "cracking", "crackjaw", "crackle", "crackled", "cracklier", "crackliest", "crackling", "crackly", "crackpot", "craftier", "craftiest", "craftless", "crafty", "cragged", "craggier", "craggiest", "craggy", "cram full", "cramoisy", "cramped", "crane fly", "cranial", "craniate", "craniological", "crank", "crankier", "crankiest", "cranky", "crannied", "crapulent", "crapulous", "crash", "crashing", "crass", "crassulaceous", "craterous", "craved", "craven", "crawlier", "crawliest", "crawling", "crawly", "crazed", "crazier", "craziest", "crazy", "creakier", "creakiest", "creaking", "creaky", "cream", "creamier", "creamiest", "creamlaid", "creamy", "crease resistant", "creased", "creasy", "creatable", "creational", "creative", "creatural", "creaturely", "credal", "credent", "credential", "credible", "creditable", "credited", "creditworthy", "credulous", "creedal", "creepier", "creepiest", "creeping", "creepy", "creepy crawly", "crematory", "crenate", "crenelate", "crenelated", "crenellate", "crenellated", "crenulate", "crenulated", "creole", "creolized", "creophagous", "crepitant", "crepuscular", "crescendo", "crescent", "crescentic", "crescive", "cressy", "crested", "crestfallen", "crestless", "cresylic", "cretaceous", "cretan", "cretinoid", "cretinous", "crew necked", "cribriform", "cricoid", "crimean", "crimeless", "criminal", "criminative", "criminatory", "crimpier", "crimpiest", "crimpy", "crimson", "crinal", "crinated", "crined", "cringing", "crinite", "crinkled", "crinklier", "crinkliest", "crinkly", "crinoid", "crinose", "criollo", "crippled", "crippling", "crisp", "crispate", "crispier", "crispiest", "crispy", "crisscross", "crisscrossed", "cristate", "critical", "criticisable", "criticizable", "croakier", "croakiest", "croaking", "croaky", "croat", "croatian", "crocked", "crocodilian", "crocus", "cromwellian", "cronk", "crook", "crookback", "crookbacked", "crooked", "crop eared", "cropped", "crosiered", "cross", "cross armed", "cross country", "cross cultural", "cross eyed", "cross grained", "cross legged", "cross ply", "cross ratio", "cross section", "cross sectional", "crossbanded", "crossbred", "crosscut", "crossed", "crosshatched", "crossing", "crossopterygian", "crosstown", "crosswise", "crotched", "crotchety", "crouched", "crouching", "croupiest", "croupous", "croupy", "crouse", "crowded", "crowing", "crowned", "crowning", "crownless", "crucial", "cruciate", "cruciferous", "cruciform", "crude", "cruder", "crudest", "cruel", "crumb", "crumbier", "crumbiest", "crumbled", "crumblier", "crumbliest", "crumbly", "crumby", "crummier", "crummies", "crummiest", "crummy", "crumpled", "crunched", "crunchier", "crunchiest", "crunchy", "crural", "crushable", "crushed", "crushing", "crustacean", "crustaceous", "crustal", "crusted", "crustier", "crustiest", "crustless", "crusty", "crutched", "crying", "cryogenic", "cryophilic", "cryoscopic", "cryptal", "cryptic", "cryptical", "cryptocrystalline", "cryptogamic", "cryptogamous", "cryptogenic", "cryptographic", "cryptonymous", "cryptorchid", "crystal", "crystal clear", "crystalline", "crystallisable", "crystallizable", "crystallized", "crystallographic", "crystalloid", "ctenoid", "ctenophoran", "cuban", "cubbish", "cubic", "cubical", "cubiform", "cubist", "cubistic", "cubital", "cuboid", "cuboidal", "cuckoo", "cucullate", "cucumiform", "cucurbitaceous", "cuddlesome", "cuddly", "cuffed", "cufic", "culicid", "culinary", "culmiferous", "culminant", "culpable", "cultic", "cultish", "cultivable", "cultivatable", "cultivated", "cultrate", "cultural", "cultured", "cultureless", "cumberless", "cumbersome", "cumbrous", "cumulate", "cumulative", "cumuliform", "cunctatious", "cunctatory", "cuneal", "cuneate", "cuneatic", "cuneiform", "cunning", "cup tied", "cupidinous", "cupolated", "cupped", "cupreous", "cupric", "cupriferous", "cuprous", "cupular", "cupulate", "cur", "curable", "curative", "curatorial", "curbable", "curbed", "curbless", "curdier", "curdiest", "curdled", "curdling", "curdy", "cured", "cureless", "curious", "curled", "curlier", "curliest", "curling", "curly", "curmudgeonly", "current", "curricular", "currish", "cursed", "cursing", "cursive", "cursorial", "cursory", "curst", "curt", "curtained", "curtal", "curtate", "curule", "curvaceous", "curved", "curvier", "curviest", "curvilineal", "curvilinear", "curving", "curvy", "cushier", "cushiest", "cushioned", "cushiony", "cushitic", "cushy", "cuspate", "cusped", "cuspidal", "cuspidate", "cuspidated", "cussed", "custodial", "custom", "custom built", "custom made", "customable", "customary", "cut", "cut off", "cut out", "cut price", "cut rate", "cut up", "cutaneous", "cutcha", "cute", "cuter", "cutest", "cuticular", "cutting", "cutty", "cyan", "cyanic", "cyanophyte", "cyanotic", "cyathiform", "cybernetic", "cycadaceous", "cyclamen", "cyclic", "cyclical", "cycloid", "cycloidal", "cyclone", "cyclonic", "cyclopean", "cyclopedic", "cyclostome", "cyclothymic", "cylindraceous", "cylindric", "cylindrical", "cylindroid", "cymbiform", "cymoid", "cymose", "cymotrichous", "cymric", "cynic", "cynical", "cyperaceous", "cyprian", "cyprinid", "cyprinoid", "cypriot", "cypriote", "cyrenaic", "cyrillic", "cystic", "cystoid", "cytherean", "cytogenetic", "cytoid", "cytological", "cytoplasmic", "cytotoxic", "czarist", "czech", "czechoslovak", "czechoslovakian", "dabbled", "dactylic", "dada", "dadaistic", "daedal", "daedalian", "daemonic", "daffier", "daffiest", "daffy", "daft", "daily", "daimen", "daimonic", "daintier", "dainties", "daintiest", "dainty", "daisied", "dalmatian", "daltonian", "dam", "damageable", "damaged", "damaging", "damascene", "damascened", "damask", "damfool", "damn", "damnable", "damnatory", "damned", "damning", "damoclean", "damp", "dampish", "danceable", "dancing", "dandiacal", "dandified", "dandy", "dandyish", "dang", "danged", "dangerous", "dangling", "danish", "dank", "dantean", "dantesque", "dapper", "dapple", "dappled", "dardic", "daring", "dark", "darkened", "darkening", "darkish", "darkling", "darksome", "darling", "darn", "darned", "darting", "darwinian", "darwinism", "darwinist", "dash", "dashed", "dashing", "dastard", "dastardly", "dasyphyllous", "datable", "dateable", "dated", "dateless", "datival", "dative", "daubed", "dauby", "daughter", "daughterly", "daunted", "daunting", "dauntless", "dawdling", "day", "day old", "day to day", "daylong", "daytime", "dazed", "dazzled", "dazzling", "dead", "dead and alive", "dead letter", "dead on", "dead set", "deadened", "deadening", "deadlier", "deadliest", "deadlocked", "deadly", "deaf", "deaf and dumb", "deaf mute", "deafened", "deafening", "deal", "dear", "deathful", "deathless", "deathlike", "deathly", "deathy", "debased", "debasing", "debatable", "debauched", "debentured", "debilitated", "debilitating", "debilitative", "debonair", "deboned", "debonnaire", "decadal", "decadent", "decagonal", "decahedral", "decamerous", "decanal", "decani", "decapitated", "decapod", "decapodous", "decasyllabic", "decayed", "deceased", "deceitful", "decemviral", "decennary", "decennial", "decent", "decentralize", "decentralized", "decentralizing", "deceptive", "decidable", "decided", "deciding", "decidual", "deciduate", "deciduous", "decillionth", "decimal", "decinormal", "decipherable", "deciphered", "decisive", "decked", "deckle edged", "deckled", "declamatory", "declarable", "declarative", "declaratory", "declared", "declassified", "declensional", "declinable", "declinate", "declinatory", "declining", "declivitous", "declivous", "decoctive", "decolorant", "decomposable", "decomposed", "decomposing", "decompound", "decompressive", "decongestant", "decongestive", "deconsecrated", "deconstructionist", "decontaminative", "decorated", "decorative", "decorous", "decreased", "decreasing", "decreed", "decrepit", "decrescendo", "decrescent", "decretal", "decretive", "decretory", "decuman", "decumbent", "decuple", "decurrent", "decurved", "decussate", "dedal", "dedicate", "dedicated", "dedicational", "dedicatory", "deducible", "deducted", "deductible", "deductive", "deedless", "deep", "deep dyed", "deep fried", "deep laid", "deep rooted", "deep sea", "deep seated", "deep set", "deepened", "deepening", "defaced", "defamatory", "defeasible", "defeated", "defeatism", "defeatist", "defectible", "defective", "defenceless", "defendable", "defendant", "defending", "defenseless", "defensible", "defensive", "deferable", "deferent", "deferential", "deferrable", "deferred", "defiant", "deficient", "defiled", "definable", "defined", "definite", "definitive", "deflagrable", "deflated", "deflation", "deflationary", "deflationist", "deflected", "deflective", "deflexed", "defoliate", "defoliated", "deformable", "deformed", "defrayable", "deft", "defunct", "defunctive", "degenerate", "degenerative", "degradable", "degraded", "degrading", "degree", "degressive", "dehiscent", "dehortative", "dehortatory", "dehumanized", "dehydrated", "deicidal", "deictic", "deific", "deiform", "deism", "deistic", "deistical", "deject", "dejected", "delayed", "delectable", "delegable", "deleterious", "delian", "deliberate", "deliberative", "delible", "delicate", "delicious", "delighted", "delightful", "delightless", "delightsome", "delimitative", "delimited", "delineable", "delineate", "delineated", "delineative", "delinquent", "deliquescent", "delirious", "delitescent", "deliverable", "delphi", "delphian", "delphic", "deltaic", "deltoid", "delusional", "delusive", "delusory", "demagogic", "demagogical", "demandable", "demanding", "demeaning", "demented", "demersal", "demisable", "demiurgeous", "demiurgic", "demiurgical", "democratic", "demoded", "demographic", "demographical", "demolished", "demolition", "demoniac", "demoniacal", "demonic", "demonologic", "demonological", "demonology", "demonstrable", "demonstrated", "demonstrative", "demoralising", "demoralized", "demoralizing", "demotic", "demountable", "demulcent", "demure", "demurer", "demurest", "demurrable", "demythologized", "denary", "denatured", "denaturized", "dendriform", "dendritic", "dendrochronological", "dendroid", "dendroidal", "dendrological", "deniable", "denigrating", "denominate", "denominational", "denominationalism", "denominative", "denotable", "denotative", "dense", "denser", "densest", "densimetric", "densitometric", "dental", "dentate", "dented", "denticulate", "dentiform", "dentilingual", "dentirostral", "dentoid", "denudate", "denuded", "denumerable", "denunciatory", "deontic", "deontological", "departed", "departing", "departmental", "depauperate", "dependable", "dependant", "dependent", "depicted", "depictive", "depilatory", "depletable", "depleted", "depletive", "depletory", "deplorable", "deponent", "depopulated", "deposable", "deposed", "depositional", "depraved", "deprecating", "deprecative", "deprecatory", "depreciating", "depreciative", "depreciatory", "depredatory", "depressant", "depressed", "depressible", "depressing", "depressive", "deprivable", "deprivative", "deprived", "depurative", "deputy", "deranged", "dere", "derelict", "derisible", "derisive", "derisory", "derivable", "derivational", "derivative", "derived", "dermal", "dermatic", "dermatographic", "dermatoid", "dermatological", "dermatoplastic", "dermic", "dermoid", "dern", "dernier", "derogate", "derogative", "derogatory", "descant", "descendant", "descendent", "descendible", "descending", "describable", "described", "descriptive", "desecrated", "desegregate", "desensitized", "desensitizing", "desert", "deserted", "deserved", "deserving", "desiccant", "desiccate", "desiccated", "desiccative", "desiderative", "designate", "designated", "designative", "designatory", "designed", "designer", "designing", "desinent", "desirable", "desired", "desireless", "desirous", "desktop", "desmoid", "desolate", "desolated", "despairful", "despairing", "desperate", "despicable", "despisable", "despised", "despiteful", "despiteous", "despoiled", "despondent", "despotic", "despotical", "destined", "destitute", "destroyable", "destroyed", "destructible", "destructive", "desultory", "detachable", "detached", "detailed", "detainable", "detectable", "detected", "detectible", "detective", "detergent", "deteriorating", "deteriorative", "determinable", "determinant", "determinate", "determinately", "determinative", "determined", "determining", "determinism", "determinist", "deterministic", "deterrent", "detersive", "detestable", "detested", "detonating", "detoxicant", "detractive", "detrimental", "detrital", "deuced", "deuteranopic", "deuteronomic", "deutoplasmic", "devalued", "devastated", "devastating", "devastative", "developable", "developed", "developing", "developmental", "deviant", "deviate", "deviationism", "deviatory", "deviceful", "devil may care", "deviled", "devilish", "devious", "devisable", "devoid", "devolution", "devonian", "devoted", "devotional", "devoured", "devouring", "devout", "dewlapped", "dewy", "dewy eyed", "dexter", "dexterous", "dextral", "dextrogyrate", "dextrorotatory", "dextrorse", "dextrous", "diabasic", "diabetic", "diabolic", "diabolical", "diacaustic", "diachronic", "diacid", "diaconal", "diacritic", "diacritical", "diactinic", "diadelphous", "diagenetic", "diageotropic", "diagnosable", "diagnostic", "diagonal", "diagrammatic", "dialectal", "dialectic", "dialectical", "dialogic", "dialogistic", "dialysable", "dialytic", "dialyzable", "diamagnetic", "diamantiferous", "diamantine", "diametral", "diametric", "diametrical", "diandrous", "dianoetic", "diapedetic", "diaphanous", "diaphoretic", "diaphragmatic", "diapophysial", "diarch", "diarchic", "diarrheal", "diarrheic", "diarrhoeal", "diarrhoeic", "diastatic", "diastolic", "diastrophic", "diastyle", "diathermic", "diathetic", "diatomaceous", "diatomic", "diatonic", "diatropic", "diazo", "dibasic", "dibranchiate", "dicastic", "dicephalous", "dicey", "dichasial", "dichlamydeous", "dichogamous", "dichotomic", "dichotomous", "dichroic", "dichromatic", "dichromic", "dichroscopic", "dickensian", "dickey", "dicky", "diclinous", "dicotyledonous", "dicrotic", "dictated", "dictatorial", "didactic", "didactical", "didymous", "didynamous", "die cast", "die casting", "die hard", "dielectric", "diesel electric", "diesel hydraulic", "diet", "dietary", "dietetic", "dietetical", "different", "differential", "differentiated", "differing", "difficile", "difficult", "diffident", "diffluent", "diffractive", "diffuse", "diffused", "diffusible", "diffusing", "diffusive", "digamous", "digastric", "digested", "digestible", "digestive", "dighted", "digital", "digitate", "digitiform", "digitigrade", "diglot", "dignified", "dignifying", "digressional", "digressive", "dihedral", "dihydric", "dilapidated", "dilatable", "dilatant", "dilated", "dilative", "dilatory", "dilemmatic", "dilettante", "dilettantish", "diligent", "diluent", "dilute", "diluted", "diluvial", "diluvian", "dim", "dime", "dimensional", "dimensioning", "dimensionless", "dimerous", "dimetric", "dimidiate", "diminishable", "diminished", "diminishing", "diminuendo", "diminutive", "dimissory", "dimmed", "dimmest", "dimming", "dimorphous", "dimply", "ding dong", "dingbats", "dinge", "dingier", "dingiest", "dingy", "dink", "dinkier", "dinkies", "dinkiest", "dinkum", "dinky", "dinky di", "dinnerless", "dinoflagellate", "diocesan", "dioecious", "diogenic", "dionysiac", "dionysian", "dioptric", "dioramic", "dioritic", "diorthotic", "dipetalous", "diphtheritic", "diphtheroid", "diphthongal", "diphthongic", "diphycercal", "diphyletic", "diphyodont", "diplex", "diploid", "diplomatic", "diplomatical", "diplostemonous", "dipnoan", "dipolar", "dipped", "dippier", "dippiest", "dippy", "dipsomaniac", "dipteral", "dipteran", "dipterocarpaceous", "dipterous", "dire", "direct", "directed", "directing", "directional", "directionless", "directive", "directoire", "directorial", "directory", "direful", "direr", "direst", "dirigible", "diriment", "dirt", "dirt cheap", "dirtier", "dirtiest", "dirty", "disabled", "disabling", "disabused", "disadvantaged", "disadvantageous", "disaffected", "disagreeable", "disallowable", "disappearing", "disappointed", "disappointing", "disapproved", "disapproving", "disarming", "disarranged", "disarrayed", "disastrous", "disbelieving", "discalceate", "discalced", "discarded", "discarnate", "discernible", "discerning", "discerptible", "discharged", "disciplinable", "disciplinal", "disciplinarian", "disciplinary", "disciplined", "disclosed", "disclosing", "discoid", "discoidal", "discolored", "discoloured", "discombobulated", "discomfited", "discomfortable", "discommodious", "discomposed", "discomycetous", "disconcerted", "disconcerting", "disconfirming", "disconnected", "disconsolate", "discontent", "discontented", "discontinued", "discontinuous", "discordant", "discorporate", "discountable", "discouraged", "discouraging", "discourteous", "discoverable", "discovered", "discovert", "discreditable", "discredited", "discreet", "discrepant", "discrete", "discretional", "discretionary", "discriminate", "discriminating", "discriminative", "discriminatory", "discursive", "discussable", "discussible", "disdainful", "diseased", "disembodied", "disenchanted", "disenchanting", "disenfranchised", "disentangled", "disepalous", "disfigured", "disfranchised", "disgraced", "disgraceful", "disgruntled", "disguisable", "disguised", "disgusted", "disgustful", "disgusting", "disgustingly", "disharmonious", "disheartened", "disheartening", "dished", "disheveled", "dishevelled", "dishonest", "dishonorable", "dishonored", "dishonourable", "dishy", "disillusioned", "disillusioning", "disillusive", "disimpassioned", "disincentive", "disinclined", "disinfectant", "disingenuous", "disinherited", "disintegrable", "disintegrative", "disinterested", "disjoined", "disjoint", "disjointed", "disjunct", "disjunctive", "dislikable", "disliked", "dislocated", "disloyal", "dismal", "dismantled", "dismayed", "dismaying", "dismissed", "dismissible", "dismissive", "dismounted", "disobedient", "disobliging", "disordered", "disorderly", "disorganized", "disoriented", "disorienting", "disowned", "disparaging", "disparate", "dispassionate", "dispatched", "dispensable", "dispensational", "dispensatory", "dispensed", "dispermous", "disperse", "dispersed", "dispersive", "dispirited", "dispiriting", "dispiteous", "displaceable", "displayed", "displeased", "displeasing", "disposable", "disposed", "dispositional", "dispossessed", "disproportionable", "disproportional", "disproportionate", "disprovable", "disputable", "disputant", "disputatious", "disputative", "disputed", "disqualifiable", "disqualified", "disqualifying", "disquiet", "disquieted", "disquieting", "disquisitional", "disregarded", "disregardful", "disreputable", "disrespectable", "disrespectful", "disrupted", "disruptive", "dissatisfactory", "dissatisfied", "dissected", "dissectible", "dissembling", "disseminating", "disseminative", "dissentient", "dissenting", "dissentious", "dissepimental", "dissertational", "dissident", "dissilient", "dissimilar", "dissimulating", "dissimulative", "dissipated", "dissipative", "dissociable", "dissocial", "dissociated", "dissociative", "dissoluble", "dissolute", "dissolvable", "dissolved", "dissolvent", "dissonant", "dissuasive", "dissymmetric", "dissymmetrical", "distaff", "distal", "distanceless", "distant", "distasteful", "distended", "distensible", "distensile", "distent", "distichal", "distichous", "distillable", "distillatory", "distilled", "distinct", "distinctive", "distinguishable", "distinguished", "distinguishing", "distorted", "distortive", "distracted", "distractible", "distractive", "distrainable", "distrait", "distraught", "distressed", "distressful", "distressing", "distributable", "distributed", "distributional", "distributive", "district", "distrustful", "disturbed", "disturbing", "distyle", "disunited", "disused", "disyllabic", "ditheistic", "ditheistical", "dithyrambic", "ditriglyphic", "diuretic", "diurnal", "divalent", "divaricate", "divergent", "diverging", "divers", "diverse", "diversifiable", "diversified", "diversionary", "diverted", "divertible", "diverticular", "diverting", "divertive", "divestible", "dividable", "divided", "dividing", "dividual", "divinatory", "divine", "divisible", "divisional", "divisionary", "divisionism", "divisive", "divorceable", "divorced", "divorcive", "divulsive", "dizygotic", "dizzied", "dizzier", "dizziest", "dizzy", "dizzying", "do it yourself", "do nothing", "doable", "docile", "docked", "dockside", "doctoral", "doctorial", "doctrinaire", "doctrinal", "documental", "documentary", "documented", "doddered", "doddering", "doddery", "dodecahedral", "dodecaphonic", "dodecastyle", "dodecasyllabic", "dodgy", "dodonaean", "dog cheap", "dog eared", "dog eat dog", "dog legged", "dog tired", "dogged", "doggier", "doggiest", "dogging", "doggish", "doggone", "doggoned", "doggy", "doglike", "dogmatic", "dogmatical", "doiled", "doited", "dolabriform", "dolce", "doleful", "doleritic", "dolesome", "dolichocephalic", "dollish", "dolomitic", "doloroso", "dolorous", "doltish", "domanial", "domed", "domestic", "domesticable", "domesticated", "domical", "domiciliary", "dominant", "dominated", "dominating", "dominative", "domineering", "dominical", "dominican", "donated", "donative", "done", "donnard", "donnered", "donnish", "donsie", "doomed", "door to door", "doped", "dopey", "dopier", "dopiest", "dopy", "dorian", "doric", "dormant", "dormie", "dormient", "dormy", "dorsal", "dorsiferous", "dorsigrade", "dorsiventral", "dorsolumbar", "dorty", "dosed", "dotal", "dotier", "dotiest", "doting", "dotted", "dottier", "dottiest", "dotty", "doty", "double", "double acting", "double barreled", "double barrelled", "double bass", "double blind", "double breasted", "double chinned", "double dealing", "double dyed", "double edged", "double faced", "double hung", "double jointed", "double minded", "double quick", "double reed", "double spaced", "double tongued", "doubled", "doubling", "doubtable", "doubtful", "doubting", "doubtless", "douce", "doughier", "doughiest", "doughtier", "doughtiest", "doughty", "doughy", "dour", "dovelike", "dovetailed", "dovish", "dowable", "dowdy", "dowdyish", "dowered", "dowerless", "dowf", "dowie", "down", "down and out", "down at heel", "down market", "down the line", "down to earth", "downbeat", "downed", "downfallen", "downhearted", "downhill", "downier", "downiest", "downrange", "downright", "downstage", "downstair", "downstairs", "downstate", "downstream", "downtown", "downtrodden", "downward", "downwind", "downy", "dozen", "dozenth", "dozier", "doziest", "dozing", "dozy", "drab", "draconian", "draconic", "draffy", "draftier", "draftiest", "drafty", "dragging", "draggled", "draggy", "dragonish", "dragonlike", "drainable", "drained", "draining", "dramatic", "dramatisable", "dramatizable", "dramaturgic", "dramaturgical", "draped", "draperied", "drastic", "dratted", "draughtier", "draughtiest", "draughty", "dravidian", "drawable", "drawing room", "drawling", "drawn", "drawn out", "dread", "dreaded", "dreadful", "dreamed", "dreamful", "dreamier", "dreamiest", "dreamless", "dreamlike", "dreamy", "drear", "drearier", "dreariest", "drearisome", "dreary", "dree", "dreggy", "dreich", "drenched", "dresden", "dress", "dressed", "dressier", "dressiest", "dressy", "dried", "drier", "driest", "driftier", "driftiest", "drifting", "driftless", "drifty", "drilled", "drinkable", "drinking", "drip dry", "dripping", "drippy", "drivable", "driveable", "driven", "driverless", "driving", "drizzling", "drizzly", "droll", "droning", "dronish", "droopier", "droopiest", "drooping", "droopy", "dropped", "dropping", "dropsical", "dropsied", "drossier", "drossiest", "drossy", "droughtier", "droughtiest", "droughty", "drouthier", "drouthiest", "drouthy", "drowned", "drowsier", "drowsiest", "drowsing", "drowsy", "drudging", "drugged", "druidic", "druidical", "drumhead", "drumlier", "drumliest", "drumly", "drunk", "drunken", "drupaceous", "drusian", "dry", "dry cleaned", "dry eyed", "dry shod", "dry stone", "dryer", "drying", "dual", "dual purpose", "dualistic", "dubious", "dubitable", "dubitative", "ducal", "duck billed", "duck legged", "duckbill", "duckie", "duckier", "duckiest", "ducky", "ductile", "ductless", "dud", "duddy", "dudish", "due", "duff", "dulcet", "dull", "dulled", "dullish", "dulotic", "dumb", "dumbfounded", "dumbfounding", "dumbstruck", "dumfounded", "dumfounding", "dummy", "dumped", "dumpier", "dumpiest", "dumpish", "dumpy", "dun", "dunderheaded", "dungy", "dunked", "duodecimal", "duodenal", "duodenary", "dupable", "duple", "duplex", "duplicate", "duplicative", "duplicitous", "durable", "dural", "durational", "durative", "dure", "dusk", "duskier", "duskiest", "duskish", "dusky", "dustier", "dustiest", "dustless", "dustproof", "dusty", "dutch", "duteous", "dutiable", "dutiful", "duty bound", "duty free", "dwarf", "dwarfish", "dwindling", "dyable", "dyadic", "dyeable", "dyed", "dyed in the wool", "dyeline", "dying", "dynamic", "dynamical", "dynamistic", "dynamometric", "dynamometrical", "dynastic", "dynastical", "dysaesthetic", "dysenteric", "dysfunctional", "dysgenic", "dyslectic", "dyslexic", "dyslogistic", "dysmenorrheal", "dyspathetic", "dyspeptic", "dysphagic", "dysphemistic", "dysphonic", "dysphoric", "dysplastic", "dyspneal", "dyspneic", "dyspnoeal", "dyspnoeic", "dysteleological", "dysthymic", "dystonic", "dystopian", "dystrophic", "dysuric", "dytiscid", "each", "eager", "eagle eyed", "ear piercing", "ear splitting", "eared", "earless", "earlier", "earliest", "early", "earned", "earnest", "earthborn", "earthbound", "earthen", "earthier", "earthiest", "earthlier", "earthliest", "earthly", "earthquaked", "earthquaking", "earthshaking", "earthward", "earthy", "earwiggy", "eased", "easeful", "easier", "easiest", "east", "east by north", "eastbound", "easterly", "eastern", "easternmost", "eastmost", "eastward", "eastwardly", "easy", "easy going", "eatable", "eaten", "eath", "eating", "ebb", "ebon", "ebony", "ebracteate", "ebullient", "ecaudate", "ecbolic", "eccentric", "eccentrical", "ecchymotic", "ecclesiastic", "ecclesiastical", "ecclesiological", "eccrine", "echinate", "echinodermatous", "echinoid", "echoic", "echoing", "echoless", "echt", "eclamptic", "eclectic", "ecliptic", "ecologic", "ecological", "econometric", "econometrical", "economic", "economical", "economy", "ecru", "ecstatic", "ectoblastic", "ectodermal", "ectodermic", "ectogenetic", "ectogenous", "ectomorphic", "ectophytic", "ectopic", "ectoplasmic", "ectotrophic", "ectozoan", "ectozoic", "ectypal", "ecuadoran", "ecuadorian", "ecumenic", "ecumenical", "eczematous", "edacious", "edaphic", "eddic", "edematous", "edenic", "edental", "edentate", "edentulous", "edge", "edged", "edgeless", "edgier", "edgiest", "edging", "edgy", "edible", "edictal", "edificatory", "edificial", "edified", "edifying", "edited", "editorial", "educable", "educated", "educational", "educative", "educatory", "educible", "edulcorative", "edwardian", "eely", "eerie", "eerier", "eeriest", "eery", "effable", "effaceable", "effected", "effectible", "effective", "effectless", "effectual", "effeminate", "efferent", "effervescent", "effervescible", "effervescing", "effete", "efficacious", "efficient", "efflorescent", "effluent", "effluvial", "effortful", "effortless", "effulgent", "effuse", "effusive", "egal", "egalitarian", "egestive", "egg shaped", "eggshell", "egocentric", "egoistic", "egoistical", "egomaniacal", "egotistic", "egotistical", "egregious", "egyptian", "egyptological", "eidetic", "eight", "eighteen", "eighteenth", "eightfold", "eighth", "eightieth", "eightpenny", "eighty", "eild", "einsteinian", "eirenic", "eisteddfodic", "either", "ejaculatory", "ejective", "elaborate", "elaborated", "elaborative", "elamite", "elapsed", "elasmobranch", "elastic", "elasticized", "elastomeric", "elated", "elating", "elative", "elder", "elderly", "eldest", "eldritch", "eleatic", "elect", "elected", "electioneer", "elective", "electoral", "electric", "electrical", "electrifying", "electroacoustic", "electroanalytical", "electrochemical", "electroencephalographic", "electrolytic", "electromagnetic", "electromechanical", "electrometallurgical", "electrometric", "electrometrical", "electromotive", "electronegative", "electronic", "electrophilic", "electrophoresis", "electrophoretic", "electrophotographic", "electrophysiological", "electroplate", "electropositive", "electroscopic", "electrostatic", "electrothermal", "electrotonic", "electrotypic", "electrovalent", "eleemosynary", "elegant", "elegiac", "elemental", "elementary", "elenctic", "elephantine", "elephantoid", "eleusinian", "elevated", "eleven", "eleventh", "elfin", "elfish", "elicited", "eligible", "eliminable", "eliminative", "eliminatory", "elite", "elizabethan", "ellipsoid", "ellipsoidal", "elliptic", "elliptical", "elmier", "elmiest", "elmy", "elocutionary", "elohistic", "elongate", "elongated", "eloquent", "else", "elucidative", "elusive", "eluvial", "elvish", "elysian", "elzevir", "emaciated", "emanant", "emanational", "emanative", "emanatory", "emancipated", "emancipating", "emancipatory", "emarginate", "emasculate", "emasculated", "emasculatory", "embarrassed", "embarrassing", "embattled", "embedded", "embellished", "embezzled", "emblematic", "emblematical", "embodied", "emboldened", "embolic", "embolismic", "embonpoint", "embossed", "embowed", "embowered", "embraceable", "embracive", "embroidered", "embroiled", "embryo", "embryoid", "embryologic", "embryological", "embryonal", "embryonic", "embryotic", "emendable", "emendatory", "emended", "emergency", "emergent", "emerging", "emeritus", "emersed", "emetic", "emigrational", "emigratory", "eminent", "emissive", "emitting", "emmenagogue", "emmetropic", "emollient", "emotionable", "emotional", "emotionless", "emotive", "empathetic", "empathic", "emphasized", "emphatic", "emphysematous", "empire builder", "empiric", "empirical", "empiricism", "empiricist", "employable", "employed", "empowered", "emptied", "empties", "emptiest", "empty", "empty handed", "empty headed", "emptying", "empurpled", "empyemic", "empyreal", "empyrean", "emulative", "emulous", "emulsified", "emulsive", "emunctory", "enabling", "enactive", "enameled", "enamored", "enantiomorphic", "enantiomorphous", "enantiotropic", "enarched", "enarthrodial", "enate", "encased", "encaustic", "enceinte", "encephalic", "encephalitic", "enchained", "enchanted", "enchanting", "enchorial", "encircled", "encircling", "enclitic", "enclosed", "encomiastic", "encompassing", "encouraged", "encouraging", "encroaching", "encrusted", "encumbered", "encyclical", "encyclopaedic", "encyclopedic", "encysted", "end stopped", "endangered", "endarch", "endearing", "ended", "endemic", "endermatic", "endermic", "endless", "endmost", "endocardial", "endocrinal", "endocrine", "endodermal", "endodermic", "endogamic", "endogamous", "endogenic", "endogenous", "endometrial", "endomorphic", "endophytic", "endoplasmic", "endorsable", "endorsed", "endoscopic", "endoskeletal", "endosmotic", "endothelial", "endothermic", "endotrophic", "endowed", "endozoic", "endurable", "enduring", "endways", "enemy", "energetic", "energising", "energizing", "enervate", "enervated", "enervating", "enervative", "enfeebled", "enfeebling", "enforceable", "enforced", "enfranchised", "engaged", "engaging", "english", "engorged", "engrailed", "engrained", "engraved", "engrossed", "engrossing", "engulfed", "enhanced", "enhancive", "enharmonic", "enigmatic", "enigmatical", "enjambed", "enjoyable", "enkindled", "enlargeable", "enlarged", "enlightened", "enlightening", "enlisted", "enlivened", "enlivening", "enmeshed", "enneadic", "enneahedral", "enneastyle", "ennobling", "enorm", "enormous", "enough", "enow", "enraged", "enrapt", "enraptured", "enrolled", "ensiform", "enslaved", "ensorcelled", "ensuing", "entangled", "enterable", "enteral", "enteric", "entering", "enterprising", "entertained", "entertaining", "enthetic", "enthralled", "enthralling", "enthusiastic", "enticing", "entire", "entitative", "entitled", "entomic", "entomological", "entomophagous", "entomophilous", "entomostracan", "entomostracous", "entophytic", "entopic", "entozoic", "entranced", "entrancing", "entrenched", "entrepreneurial", "enucleate", "enumerable", "enumerative", "enunciable", "enunciative", "enunciatory", "enured", "enuretic", "enveloped", "enveloping", "enviable", "envious", "environmental", "envisioned", "enwrapped", "enzootic", "enzymatic", "eocene", "eolian", "eolic", "eolithic", "eosinophilic", "eozoic", "epagogic", "epaxial", "epeirogenic", "epencephalic", "epenthetic", "epexegetic", "ephebic", "ephemeral", "ephesian", "epiblast", "epiblastic", "epic", "epical", "epicanthic", "epicedial", "epicedian", "epicene", "epicentral", "epicontinental", "epicritic", "epicurean", "epicyclic", "epicycloidal", "epideictic", "epidemic", "epidemiological", "epidermal", "epidermic", "epidermoid", "epidotic", "epidural", "epifocal", "epigamic", "epigastric", "epigeal", "epigene", "epigenetic", "epigeous", "epiglottic", "epigrammatic", "epigraphic", "epigynous", "epileptic", "epimeric", "epinastic", "epipetalous", "epiphanic", "epiphyllous", "epiphytic", "epiphytical", "epiploic", "episcopal", "episcopalian", "episcopally", "episematic", "episepalous", "episodic", "epispastic", "epistatic", "epistemic", "epistemological", "epistolary", "epistolatory", "epistolic", "epitaphic", "epitaxial", "epithalamic", "epithelial", "epitheliomatous", "epithetic", "epitomic", "epitomical", "epizoan", "epizoic", "epizootic", "epoch making", "epochal", "eponymic", "eponymous", "epoxy", "equable", "equal", "equalised", "equalitarian", "equalized", "equanimous", "equatable", "equatorial", "equestrian", "equiangular", "equidistant", "equilateral", "equine", "equinoctial", "equipoised", "equipollent", "equiponderant", "equipotent", "equipotential", "equipped", "equiprobable", "equisetic", "equitable", "equitant", "equivalent", "equivalve", "equivocal", "eradicable", "eradicative", "erasable", "erased", "erastian", "erect", "erectile", "erective", "eremitic", "erethismic", "erethistic", "ergative", "ergodic", "ergonomic", "ericaceous", "ericoid", "eristic", "eritrean", "ermined", "eroded", "erodent", "erodible", "erogenous", "erose", "erosive", "erotic", "erotically", "erotogenic", "errable", "errant", "erratic", "errhine", "erring", "erroneous", "ersatz", "erse", "erstwhile", "erubescent", "eruciform", "erudite", "erumpent", "erupting", "eruptional", "eruptive", "erysipelatous", "erythemal", "erythematic", "erythrocyte", "escapable", "escaped", "escapeless", "escapism", "escapist", "escharotic", "eschatological", "escheatable", "esculapian", "esculent", "escutcheoned", "esemplastic", "eskimo", "esophageal", "esoteric", "especial", "esperanto", "esquimau", "essayistic", "essential", "essive", "established", "establishmentarian", "esteemed", "esthetic", "esthonian", "estimable", "estimated", "estimative", "estipulate", "estival", "estonian", "estranged", "estranging", "estrous", "estuarial", "estuarine", "esurient", "etched", "eternal", "eterne", "etesian", "ethereal", "ethereous", "ethic", "ethical", "ethiop", "ethiopian", "ethiopic", "ethmoid", "ethnic", "ethnical", "ethnocentric", "ethnographic", "ethnographical", "ethnolinguistic", "ethnological", "ethological", "ethylene", "etiolate", "etiolated", "etiological", "etonian", "etruscan", "etymological", "eucaryotic", "eucharistic", "euclidean", "eudaemonic", "eudemonic", "eugenic", "euhemeristic", "eukaryotic", "eulogistic", "eunuchoid", "eupeptic", "euphemistic", "euphonic", "euphonical", "euphonious", "euphorbiaceous", "euphoriant", "euphoric", "euphuistic", "eurasian", "eurhythmic", "euro american", "eurocommunism", "european", "eurythermal", "eurythmic", "eurythmical", "eusporangiate", "eustatic", "eustyle", "eutectic", "eutectoid", "euterpean", "eutherian", "eutrophic", "evacuant", "evacuated", "evacuative", "evadable", "evaluative", "evanescent", "evangelical", "evangelistic", "evaporable", "evaporated", "evaporative", "evasive", "even", "even handed", "even minded", "even tempered", "evening", "evens", "eventful", "eventual", "evergreen", "everlasting", "eversible", "every", "everyday", "evidenced", "evident", "evidential", "evidentiary", "evil", "evil eyed", "evil minded", "evincible", "evincive", "eviscerate", "evitable", "evocable", "evocative", "evoked", "evolutional", "evolutionary", "evolutionist", "evolutive", "evolvable", "ewe necked", "ex directory", "ex service", "exacerbating", "exact", "exactable", "exacting", "exaggerated", "exaggerative", "exalted", "exalting", "examinable", "examinational", "exanimate", "exanthematic", "exarate", "exarch", "exarchal", "exasperate", "exasperated", "exasperating", "excaudate", "exceeding", "excellent", "excentric", "exceptionable", "exceptional", "exceptive", "excerptible", "excess", "excessive", "exchangeable", "exchanged", "excisable", "excitable", "excitant", "excitative", "excitatory", "excited", "exciting", "exclamational", "exclamatory", "excludable", "exclusionary", "exclusionist", "exclusive", "exclusory", "excogitative", "excommunicable", "excommunicate", "excommunicative", "excommunicatory", "excrementitious", "excrescent", "excretal", "excretive", "excretory", "excruciating", "exculpable", "exculpated", "exculpatory", "excurrent", "excursive", "excusable", "excusatory", "excused", "excusive", "execrable", "execrative", "execratory", "executable", "executed", "executive", "executorial", "executory", "exegetic", "exegetical", "exemplary", "exemplifiable", "exemplificative", "exemplifying", "exempt", "exenterate", "exequial", "exercisable", "exergonic", "exergual", "exertive", "exfoliative", "exhalant", "exhaled", "exhaling", "exhausted", "exhaustible", "exhausting", "exhaustive", "exhaustless", "exhibitionist", "exhibitionistic", "exhibitive", "exhibitory", "exhilarant", "exhilarated", "exhilarating", "exhilarative", "exhortative", "exhortatory", "exigeant", "exigent", "exigible", "exiguous", "exilic", "eximious", "existent", "existential", "existentialist", "existing", "exocrine", "exodermal", "exoergic", "exogamic", "exogamous", "exogenetic", "exogenous", "exonerated", "exonerative", "exophthalmic", "exopoditic", "exorable", "exorbitant", "exordial", "exoskeletal", "exosmotic", "exospherical", "exosporal", "exosporous", "exoteric", "exothermal", "exothermic", "exotic", "exotoxic", "expandable", "expanded", "expanding", "expansible", "expansile", "expansional", "expansionary", "expansionism", "expansionistic", "expansive", "expatriate", "expectable", "expectant", "expectative", "expected", "expecting", "expectorant", "expedient", "expediential", "expedite", "expedited", "expeditionary", "expeditious", "expellant", "expendable", "expended", "expensive", "experienced", "experienceless", "experiential", "experimental", "experimentative", "expert", "expiable", "expiatory", "expiratory", "expired", "expiring", "expiscatory", "explainable", "explanatory", "expletive", "explicable", "explicative", "explicit", "exploding", "exploitable", "exploitative", "exploited", "exploitive", "explorative", "exploratory", "explosible", "explosive", "exponent", "exponential", "exponible", "exportable", "exposable", "exposed", "expositional", "expositive", "expository", "expostulatory", "express", "expressed", "expressible", "expressional", "expressionism", "expressionist", "expressionistic", "expressionless", "expressive", "expropriable", "expropriated", "expugnable", "expulsive", "expurgated", "expurgatorial", "expurgatory", "exquisite", "exsanguine", "exsert", "exserted", "exsertile", "exsiccative", "exstipulate", "exsufflicate", "extant", "extemporal", "extemporaneous", "extemporary", "extempore", "extendable", "extended", "extended play", "extendible", "extensible", "extensile", "extension", "extensional", "extensive", "extenuating", "extenuative", "extenuatory", "exterior", "exterminable", "exterminated", "exterminatory", "external", "exteroceptive", "exterritorial", "extinct", "extinctive", "extinguishable", "extinguished", "extirpable", "extirpative", "extorsive", "extortionary", "extortionate", "extortive", "extra", "extra condensed", "extracanonical", "extracorporeal", "extractable", "extractible", "extractive", "extraditable", "extraneous", "extranuclear", "extraordinary", "extrapolated", "extrapolative", "extrapolatory", "extravagant", "extravehicular", "extraversive", "extravert", "extraverted", "extreme", "extremer", "extremest", "extremist", "extricable", "extricated", "extrinsic", "extrorse", "extroversive", "extrovert", "extroverted", "extrusible", "extrusive", "exuberant", "exudative", "exultant", "exulting", "exuvial", "eye catching", "eyed", "eyeless", "eyetie", "fab", "fabaceous", "fabian", "fabianism", "fabled", "fabricated", "fabricative", "fabulous", "face saving", "faced", "faceless", "facete", "faceted", "facetious", "facial", "facile", "facilitated", "facilitative", "facinorous", "fact finding", "factional", "factious", "factitious", "factitive", "factorable", "factorial", "factual", "facular", "facultative", "fadable", "faddier", "faddiest", "faddish", "faddy", "faded", "fadeless", "fading", "faecal", "faerie", "faeroese", "faery", "fagaceous", "fagged", "fahrenheit", "fail safe", "failed", "failing", "fain", "faint", "faintish", "fair", "fair haired", "fair minded", "fair spoken", "fair weather", "fairish", "fairy", "fairylike", "faithful", "faithless", "fake", "falange", "falcate", "falciform", "falconine", "falernian", "fallacious", "fallen", "fallibilist", "fallible", "falling", "fallow", "false", "false hearted", "falser", "falsest", "falsetto", "falsifiable", "falstaffian", "faltering", "famed", "fameless", "familial", "familiar", "familiarized", "familiarizing", "familistic", "famished", "famous", "fanatic", "fanatical", "fancied", "fanciful", "fanciless", "fancy", "fancy free", "fanfold", "fanged", "fangled", "fangless", "fanned", "fantastic", "fantastical", "far", "far flung", "far gone", "far off", "far out", "far reaching", "far seeing", "far sighted", "faradic", "farand", "faraway", "farci", "farcical", "fardel bound", "farewell", "farfetched", "farinaceous", "farinose", "farm", "farming", "faroese", "farouche", "farraginous", "farrow", "farther", "farthermost", "farthest", "fascial", "fasciate", "fascicular", "fasciculate", "fascinated", "fascinating", "fascist", "fascistic", "fashionable", "fashioned", "fast", "fastened", "fastidious", "fastigiate", "fastuous", "fat", "fat faced", "fat free", "fat witted", "fatal", "fatalist", "fatalistic", "fated", "fateful", "fatherless", "fatherlike", "fatherly", "fathomable", "fathomless", "fatigable", "fatigate", "fatigue", "fatigued", "fatless", "fattened", "fattening", "fatter", "fattest", "fattier", "fattiest", "fattish", "fatty", "fatuitous", "fatuous", "faucal", "faucial", "fault finding", "faultier", "faultiest", "faultless", "faulty", "faunal", "faustian", "fauve", "faux", "faveolate", "favorable", "favored", "favoring", "favorite", "favorless", "favourable", "favoured", "favourite", "favourless", "fawning", "fay", "fazed", "feal", "fearful", "fearless", "fearsome", "feasible", "feastful", "feat", "featherbrained", "feathered", "featherless", "feathery", "feature length", "featured", "featureless", "febrifacient", "febrific", "febrifugal", "febrifuge", "febrile", "fecal", "feckless", "feculent", "fecund", "federal", "federalism", "federalist", "federate", "federated", "federative", "feeble", "feeble minded", "feebler", "feeblest", "feeblish", "feeling", "feelingless", "feetless", "feigned", "feisty", "feldspathic", "feldspathoid", "felicific", "felicitous", "feline", "fell", "fellable", "felled", "fellow", "felon", "felonious", "felsic", "felsitic", "felspathic", "felt", "felted", "female", "feminine", "feminism", "feminist", "feministic", "femoral", "fencible", "fenestral", "fenestrated", "fenian", "fenny", "feodal", "feracious", "feral", "ferial", "ferine", "fermentable", "fermentation", "fermentative", "fermented", "fernier", "ferniest", "ferny", "ferocious", "ferreous", "ferrety", "ferric", "ferriferous", "ferroelectric", "ferromagnesian", "ferromagnetic", "ferrous", "ferruginous", "fertile", "fertilised", "fertilized", "ferulaceous", "fervent", "fervid", "fescennine", "fesswise", "festal", "festering", "festinate", "festive", "fetal", "fetching", "fetial", "fetichistic", "feticidal", "fetid", "fetishistic", "fettered", "fetterless", "feudal", "feudalist", "feudalistic", "feudatory", "fevered", "feverish", "feverous", "few", "fewer", "fewest", "fey", "fezzed", "fibered", "fiberless", "fibreless", "fibriform", "fibrillar", "fibrillose", "fibrinous", "fibroblastic", "fibroid", "fibrotic", "fibrous", "fibrovascular", "fibular", "fickle", "fictile", "fictional", "fictitious", "fictive", "fiddling", "fiddly", "fidgety", "fiducial", "fiduciary", "fiendish", "fierce", "fiercer", "fiercest", "fierier", "fieriest", "fiery", "fifteen", "fifteenth", "fifth", "fiftieth", "fifty", "fifty fifty", "fightable", "fighting", "figuline", "figurable", "figural", "figurate", "figurative", "figured", "fijian", "filaceous", "filagree", "filamentary", "filamentous", "filar", "filarial", "filial", "filibusterous", "filiform", "filigree", "filigreed", "filipino", "filled", "filmable", "filmed", "filmier", "filmiest", "filmy", "filose", "filter tipped", "filterable", "filthier", "filthiest", "filthy", "filtrable", "fimbriate", "fin footed", "finable", "final", "financed", "financial", "fine", "fine drawn", "fineable", "fined", "finer", "finest", "fingered", "fingerless", "finical", "finicky", "finished", "finite", "finless", "finned", "finnic", "finnier", "finniest", "finnish", "finno ugrian", "finno ugric", "finny", "fire and brimstone", "fire eater", "fire new", "fire resistant", "fire resisting", "fired", "fireless", "fireproof", "firm", "firmamental", "firry", "first", "first aid", "first born", "first chop", "first class", "first generation", "first hand", "first rate", "first string", "fiscal", "fish bellied", "fishable", "fishier", "fishiest", "fishy", "fishyback", "fissile", "fissionable", "fissiparous", "fissiped", "fissirostral", "fistic", "fistular", "fistulous", "fit", "fitchy", "fitful", "fitted", "fitter", "fitting", "five", "fivefold", "fivepenny", "fixable", "fixative", "fixed", "fizzier", "fizziest", "fizzing", "fizzy", "flabbergasted", "flabbier", "flabbiest", "flabby", "flabellate", "flaccid", "flag waving", "flagellate", "flagellated", "flagellatory", "flagelliform", "flaggier", "flaggiest", "flagging", "flaggy", "flagitious", "flagrant", "flailing", "flakier", "flakiest", "flaky", "flamboyant", "flameproof", "flamier", "flamiest", "flaming", "flammable", "flamy", "flannelly", "flapperish", "flappy", "flared", "flaring", "flash", "flashier", "flashiest", "flashing", "flashy", "flat", "flat footed", "flatling", "flattened", "flattering", "flattest", "flattish", "flatulent", "flauntier", "flauntiest", "flaunty", "flavescent", "flavored", "flavorful", "flavorless", "flavorous", "flavorsome", "flavoured", "flavourful", "flavourless", "flavourous", "flavoursome", "flawed", "flawier", "flawiest", "flawless", "flawy", "flaxen", "flea bitten", "flecked", "fleckless", "fledged", "fledgeling", "fledgier", "fledgiest", "fledgling", "fledgy", "fleeceless", "fleecier", "fleeciest", "fleecy", "fleeing", "fleet", "fleeting", "flemish", "fleshier", "fleshiest", "fleshless", "fleshly", "fleshy", "fleury", "flexed", "flexible", "flexile", "flexuous", "flexural", "flickering", "flighted", "flightier", "flightiest", "flightless", "flighty", "flimsier", "flimsies", "flimsy", "flintier", "flintiest", "flinty", "flip", "flippant", "flipping", "flirtatious", "flittering", "flitting", "floatable", "floatier", "floatiest", "floating", "floaty", "floccose", "flocculent", "floccus", "flood", "flooded", "flooding", "floodlighted", "floodlit", "floored", "floppier", "floppiest", "floppy", "floral", "floreated", "florentine", "florescent", "floriated", "floricultural", "florid", "floriferous", "floristic", "flory", "flossy", "flourishing", "floury", "flowered", "flowering", "flowerless", "flowery", "flowing", "flown", "fluctuant", "fluctuating", "fluent", "fluffier", "fluffiest", "fluffy", "fluid", "fluidal", "fluidic", "flukey", "flukier", "flukiest", "fluky", "fluorescent", "fluoric", "fluorometric", "fluoroscopic", "flurried", "flush", "flushed", "flustered", "fluted", "flutier", "flutiest", "fluttering", "fluttery", "fluty", "fluvial", "fluviatile", "fluxional", "fluxionary", "fly", "fly by night", "flyable", "flyaway", "flying", "flyweight", "foaled", "foamier", "foamiest", "foaming", "foamless", "foamy", "focal", "focused", "focussed", "foetal", "foetid", "fogbound", "fogged", "foggier", "foggiest", "foggy", "fogless", "fogyish", "foiled", "fold", "foldable", "foldaway", "folded", "folding", "foliaceous", "foliaged", "foliar", "foliate", "foliated", "folio", "foliolate", "foliose", "folk", "folkish", "folklore", "folkloric", "folksier", "folksiest", "folksy", "follicular", "follow up", "following", "fond", "fontal", "foodless", "fool", "foolhardier", "foolhardiest", "foolhardy", "fooling", "foolish", "foolproof", "foot loose", "footed", "footier", "footiest", "footless", "footling", "footsore", "footworn", "foppish", "foraminal", "foraminiferal", "foraminiferous", "forbearing", "forbidden", "forbidding", "forced", "forceful", "forceless", "forcible", "forcipate", "fordable", "fore", "foreboding", "foreclosable", "foregoing", "foregone", "forehand", "forehanded", "foreign", "foreknowable", "foremost", "forenamed", "forensic", "foreordained", "foresaid", "foreseeable", "foreseen", "foreshadowing", "foresighted", "foresightful", "forespent", "forestal", "forested", "forethoughtful", "foretold", "forfeit", "forfeitable", "forfeited", "forficate", "forgeable", "forged", "forgetful", "forgetive", "forgettable", "forgivable", "forgiving", "forgotten", "forked", "forkier", "forkiest", "forky", "forlorn", "formable", "formal", "formalistic", "formalized", "formational", "formative", "formed", "former", "formic", "formidable", "formless", "formulaic", "formulary", "formulated", "formulism", "fornent", "fornical", "fornicate", "forsaken", "forspent", "forte", "forthcoming", "forthright", "fortieth", "fortifiable", "fortified", "fortifying", "fortis", "fortissimo", "fortitudinous", "fortnightly", "fortuitism", "fortuitist", "fortuitous", "fortunate", "fortuneless", "forty", "fortyish", "forward", "forward looking", "forworn", "forzando", "fossiliferous", "fossilized", "fossorial", "foster", "fostered", "fou", "foudroyant", "foughten", "foul", "foul mouthed", "foul spoken", "fouled", "found", "foundational", "founded", "founderous", "fountainless", "four", "four dimensional", "four footed", "four handed", "four legged", "four part", "four stroke", "four wheel", "fourfold", "fourierism", "fourieristic", "fourpenny", "fourscore", "foursquare", "fourteen", "fourteenth", "fourth", "fourth class", "fourth dimensional", "foveal", "foveate", "foxier", "foxiest", "foxy", "fozier", "foziest", "fozy", "fractional", "fractious", "fractured", "fragile", "fragmental", "fragmentary", "fragmented", "fragrant", "frail", "framed", "francophone", "frangible", "frank", "frankish", "frantic", "fratchy", "fraternal", "fratricidal", "fraudful", "fraudulent", "fraught", "frayed", "frazzled", "freakier", "freakiest", "freakish", "freaky", "frecklier", "freckliest", "freckly", "free", "free and easy", "free floating", "free form", "free hand", "free handed", "free hearted", "free living", "free range", "free soil", "free spoken", "free swimming", "free thinking", "free trade", "freebie", "freeborn", "freed", "freehold", "freeing", "freemasonic", "freer", "freest", "freewheeling", "freezable", "freeze dried", "freezing", "fremd", "french", "french canadian", "frenchy", "frenetic", "frenzied", "frequent", "frequentative", "fresh", "fresh run", "freshman", "freshwater", "fretful", "fretted", "fretty", "freudian", "friable", "fribble", "fricative", "frictional", "frictionless", "fried", "friended", "friendless", "friendlier", "friendliest", "friendly", "friesian", "frightened", "frightening", "frightful", "frigid", "frigorific", "frilled", "frilly", "fringe", "fringed", "fringeless", "fringillid", "fringilline", "fringy", "friskier", "friskiest", "frisky", "frivolous", "frizzier", "frizziest", "frizzlier", "frizzliest", "frizzly", "frizzy", "frockless", "froebelian", "frogged", "froggier", "froggiest", "froggy", "frolic", "frolicsome", "fronded", "frondescent", "front", "front rank", "frontal", "frontier", "frontless", "frore", "frostbitten", "frosted", "frostier", "frostiest", "frostless", "frostlike", "frosty", "frothier", "frothiest", "frothing", "frothy", "froward", "frowning", "frowsier", "frowsiest", "frowsty", "frowsy", "frowzier", "frowziest", "frowzy", "frozen", "fructed", "fructiferous", "fructuous", "frugal", "frugivorous", "fruitarian", "fruited", "fruitful", "fruitier", "fruitiest", "fruiting", "fruitive", "fruitless", "fruity", "frumentaceous", "frumpier", "frumpiest", "frumpish", "frumpy", "frustrate", "frustrated", "frustrating", "frutescent", "fruticose", "fubsier", "fubsiest", "fubsy", "fucoid", "fuddled", "fugacious", "fugal", "fugato", "fuggy", "fugitive", "fulani", "fulfilled", "fulgent", "fulgid", "fulgorous", "fulgurant", "fulgurating", "fulgurous", "fuliginous", "full", "full blooded", "full blown", "full bodied", "full bottomed", "full bound", "full cream", "full dress", "full face", "full faced", "full fashioned", "full fledged", "full frontal", "full grown", "full length", "full mouthed", "full page", "full rigged", "full sailed", "full scale", "full size", "full time", "fully fashioned", "fully fledged", "fully grown", "fulminant", "fulminatory", "fulminous", "fulsome", "fulvous", "fumarolic", "fumatory", "fumbling", "fumed", "fumier", "fumiest", "fumigatory", "fumy", "fun", "functional", "functionalism", "functionalist", "functionary", "functioning", "functionless", "fundamental", "fundamentalism", "fundamentalist", "funded", "funerary", "funereal", "funest", "fungal", "fungible", "fungicidal", "fungiform", "fungistatic", "fungoid", "fungous", "funicular", "funiculate", "funked", "funkier", "funkiest", "funky", "funnier", "funniest", "funny", "furcate", "furcular", "furfuraceous", "furibund", "furioso", "furious", "furled", "furnished", "furred", "furriest", "furrowed", "furrowy", "furry", "further", "furthermost", "furthest", "furtive", "furuncular", "furunculous", "furzy", "fuscous", "fused", "fusible", "fusiform", "fusil", "fusile", "fusionism", "fusionist", "fussier", "fussiest", "fussy", "fustian", "fustier", "fustiest", "fusty", "futile", "futilitarian", "future", "future perfect", "futureless", "futurism", "futurist", "futuristic", "fuzzed", "fuzzier", "fuzziest", "fuzzy", "gabbling", "gabbroic", "gabbroid", "gabbroitic", "gabby", "gabled", "gadarene", "gadhelic", "gadoid", "gadrooned", "gaelic", "gaff rigged", "gaga", "gaillard", "gainable", "gainful", "gainless", "gainly", "gaited", "gala", "galactagogue", "galactic", "galactophorous", "galactopoietic", "galatian", "galeate", "galenic", "galician", "galilean", "gallant", "galled", "galleried", "galliambic", "galliard", "gallic", "gallican", "gallinaceous", "galling", "gallooned", "galloping", "galore", "galvanic", "galvanizing", "galvanometric", "galvanoplastic", "galwegian", "gambia", "gambling", "gambogian", "gambrel", "game", "gamer", "gamesome", "gamest", "gametic", "gamey", "gamic", "gamier", "gamiest", "gammy", "gamopetalous", "gamophyllous", "gamosepalous", "gamy", "gandhian", "gangliar", "gangliate", "ganglier", "gangliest", "gangliform", "gangling", "ganglionic", "gangly", "gangrenous", "ganoid", "gap toothed", "gaping", "garbed", "garbled", "gardant", "gargantuan", "gargety", "garish", "garlandless", "garlicky", "garmented", "garmentless", "garni", "garnished", "garreted", "garrulous", "gas fired", "gaseous", "gashed", "gasified", "gasiform", "gasometric", "gasometrical", "gasping", "gassier", "gassiest", "gassy", "gasteropod", "gastralgic", "gastric", "gastroenteric", "gastrointestinal", "gastronomic", "gastronomical", "gastropod", "gated", "gateless", "gathered", "gathering", "gauche", "gaudy", "gauge", "gaugeable", "gaulish", "gaullist", "gaumless", "gaunt", "gauntleted", "gaussian", "gauzier", "gauziest", "gauzy", "gawkier", "gawkiest", "gawky", "gawsy", "gay", "geanticlinal", "geared", "gearless", "geegaw", "geitonogamous", "gelatinoid", "gelatinous", "gelded", "gelid", "gemel", "geminate", "gemmaceous", "gemmate", "gemmed", "gemmier", "gemmiest", "gemmiferous", "gemmiparous", "gemmological", "gemmy", "gemological", "genal", "genealogic", "genealogical", "generable", "general", "general purpose", "generalisable", "generalizable", "generalized", "generative", "generic", "generous", "genesiac", "genesitic", "genethliac", "genethliacally", "genethlialogic", "genethlialogical", "genetic", "genetical", "genevan", "genevese", "genial", "genic", "geniculate", "genital", "genitalic", "genitival", "genitive", "genocidal", "genoese", "genotypic", "genovese", "genteel", "gentianaceous", "gentile", "gentle", "gentled", "gentlemanlike", "gentlemanly", "gentler", "gentlest", "gentlewomanly", "gentling", "genty", "genuine", "geocentric", "geochemical", "geochronological", "geodesic", "geodesical", "geodetic", "geodic", "geodynamic", "geodynamical", "geognostic", "geognostical", "geographic", "geographical", "geoidal", "geologic", "geological", "geomagnetic", "geomantic", "geomedical", "geometric", "geometrical", "geometrid", "geomorphologic", "geomorphological", "geophagous", "geophilous", "geophysical", "geophytic", "geopolitical", "geoponic", "georgian", "georgic", "geostatic", "geostationary", "geostrophic", "geosynchronous", "geosynclinal", "geotactic", "geotectonic", "geothermal", "geotropic", "geriatric", "german", "germane", "germanic", "germanous", "germicidal", "germinable", "germinal", "germinant", "germinative", "gerontological", "gerundial", "gerundival", "gerundive", "gestational", "gestative", "gestic", "gesticulating", "gesticulative", "gesticulatory", "gestural", "gettable", "gewgaw", "ghanaian", "ghast", "ghastful", "ghastlier", "ghastliest", "ghastly", "ghostlier", "ghostliest", "ghostly", "ghoulish", "giant", "gibbed", "gibbose", "gibbous", "giddied", "giddier", "giddiest", "giddy", "giddying", "gifted", "gigantean", "gigantesque", "gigantic", "gigglier", "giggliest", "giggly", "gilbertian", "gilded", "gilled", "gilt", "gilt edged", "gimcrack", "gimlet", "gimlet eyed", "gimmicky", "gimpy", "ginger", "gingerly", "gingery", "gingival", "ginned", "giocoso", "girlish", "girly", "girondist", "girt", "given", "giving", "glabellar", "glabrate", "glabrous", "glacial", "glaciated", "glaciological", "glad", "gladdened", "gladiate", "gladiatorial", "gladsome", "glagolitic", "glaikit", "glairier", "glairiest", "glairy", "glaived", "glamorous", "glamourous", "glandered", "glanderous", "glandular", "glandulous", "glare", "glarier", "glariest", "glaring", "glary", "glass", "glass faced", "glassed", "glassier", "glassiest", "glasslike", "glassy", "glaswegian", "glaucescent", "glaucomatous", "glauconitic", "glaucous", "glazed", "gleaming", "gleeful", "gleesome", "gleetier", "gleetiest", "gleety", "gleg", "glenoid", "glial", "glib", "glibber", "glibbest", "gliddery", "glimmering", "glimmery", "glinting", "gliomatous", "glistening", "glistering", "glittering", "glittery", "global", "globate", "globoid", "globose", "globular", "globuliferous", "glomerate", "glomerular", "gloomful", "gloomier", "gloomiest", "glooming", "gloomy", "glorified", "glorious", "glossarial", "glossier", "glossies", "glossiest", "glossographical", "glossological", "glossy", "glottal", "glottic", "glottidean", "glottogonic", "gloved", "glowering", "glowing", "gluconeogenic", "glucosic", "glucosuric", "glued", "gluey", "glum", "glumaceous", "glummer", "glummest", "glumpier", "glumpiest", "glumpy", "gluteal", "glutenous", "glutinous", "glutted", "gluttonous", "glyceric", "glycogen", "glycogenetic", "glycogenic", "glycolic", "glycolytic", "glycosidic", "glycosuric", "glyphic", "glyphographic", "glyptic", "glyptographic", "gnarled", "gnarlier", "gnarliest", "gnarly", "gnathic", "gnathonic", "gneissic", "gneissoid", "gnomic", "gnomish", "gnomonic", "gnostic", "gnotobiotic", "go ahead", "go as you please", "go to meeting", "goaded", "goalless", "goateed", "goatish", "gobelin", "gobioid", "gobony", "god fearing", "goddam", "goddamn", "goddamned", "godless", "godlier", "godliest", "godlike", "godly", "goggle eyed", "goidelic", "going", "goitrous", "gold", "gold foil", "gold leaf", "golden", "goliardic", "gonadal", "gonadial", "gonadotropic", "gone", "gongoristic", "gonidial", "gonidic", "goniometric", "goniometrical", "gonococcal", "gonococcic", "gonococcoid", "gonorrheal", "gonorrheic", "good", "good for nothing", "good humoured", "good looking", "good natured", "good sized", "good tempered", "goodish", "goodlier", "goodliest", "goodly", "goody goody", "gooey", "goofier", "goofiest", "goofy", "gooier", "gooiest", "goosey", "goosy", "gordian", "gorged", "gorgeous", "gorgonian", "gorier", "goriest", "gorillian", "gorilline", "gorilloid", "gormless", "gorsy", "gory", "gossamer", "gossipy", "gothic", "goutier", "goutiest", "gouty", "governable", "governessy", "governing", "governmental", "gowaned", "gowany", "gowned", "goyish", "grab", "graceful", "graceless", "gracile", "gracious", "gradable", "gradational", "gradatory", "grade", "graded", "gradely", "gradient", "gradual", "gradualism", "gradualist", "gradualistic", "graduate", "graduated", "graeco roman", "grained", "grainier", "grainiest", "grainy", "grallatorial", "gram negative", "gram positive", "gramineous", "graminivorous", "grammatic", "grammatical", "gramophonic", "grand", "grand ducal", "grandfatherly", "grandiloquent", "grandiose", "grandioso", "grandmotherly", "granitic", "granitoid", "granivorous", "granolithic", "granophyric", "grantable", "granted", "granular", "granulated", "granulative", "granuliferous", "granulitic", "granulocytic", "granulomatous", "granulose", "grapey", "graphic", "graphical", "graphitic", "graphologic", "graphological", "grapier", "grapiest", "graptolitic", "grapy", "graspable", "grasping", "graspless", "grass green", "grass roots", "grassier", "grassiest", "grassy", "grateful", "gratified", "gratifying", "grating", "gratis", "gratuitous", "gratulant", "gratulatory", "grave", "gravel", "gravel blind", "graveless", "gravelly", "graven", "gravest", "gravettian", "gravid", "gravimetric", "gravitational", "gravitative", "gray", "grayed", "grayish", "grazed", "greased", "greasier", "greasiest", "greasy", "great", "great bellied", "great hearted", "greater", "greatest", "greaved", "grecian", "greco roman", "greedier", "greediest", "greedy", "greek", "greekish", "green", "green eyed", "greening", "greenish", "greensick", "gregarine", "gregarious", "gregorian", "greige", "grenada", "grenadian", "gressorial", "grey", "grey haired", "grey headed", "greyish", "grief stricken", "griefless", "grieving", "grievous", "griffinish", "grilled", "grim", "grimier", "grimiest", "grimmer", "grimmest", "grimy", "grippier", "grippiest", "gripping", "gripple", "grippy", "griseous", "grislier", "grisliest", "grisly", "gristlier", "gristliest", "gristly", "grittier", "grittiest", "gritty", "grizzled", "grizzlier", "grizzlies", "grizzliest", "grizzly", "groaning", "groggier", "groggiest", "groggy", "grolier", "groomed", "grooved", "groovier", "grooviest", "groovy", "groping", "gross", "grotesque", "grotian", "grotty", "grouchier", "grouchiest", "grouchy", "ground", "groundless", "group", "grouped", "grouse", "groutier", "groutiest", "grouty", "groveling", "grovelling", "growable", "growing", "grown", "grown up", "grubbier", "grubbiest", "grubby", "grudging", "grueling", "gruelling", "gruesome", "gruff", "gruffish", "grum", "grumbling", "grumbly", "grummer", "grummest", "grumose", "grumous", "grumpier", "grumpiest", "grumpy", "grungy", "grunting", "gruntled", "guam", "guaranteed", "guardable", "guardant", "guarded", "guardian", "guardless", "guatemalan", "gubernacular", "gubernatorial", "gude", "guelfic", "guerilla", "guerrilla", "guessable", "guest", "guidable", "guided", "guideless", "guiding", "guileful", "guileless", "guiltier", "guiltiest", "guiltless", "guilty", "guinean", "gujarati", "gular", "gules", "gulfy", "gull wing", "gullable", "gullible", "gummatous", "gummed", "gummier", "gummiest", "gummous", "gummy", "gumptious", "gun shy", "gunless", "gunned", "guns", "gushier", "gushiest", "gushing", "gushy", "gusseted", "gustable", "gustative", "gustatory", "gustier", "gustiest", "gusty", "gutless", "gutsier", "gutsiest", "gutsy", "gutta", "guttate", "guttering", "guttural", "gutturalized", "gymnasial", "gymnastic", "gymnorhinal", "gymnospermous", "gynaecocracy", "gynaecocratic", "gynaecoid", "gynaecologic", "gynaecological", "gynandromorphic", "gynandromorphous", "gynandrous", "gynecoid", "gynecologic", "gynecological", "gynodioecious", "gynomonoecious", "gypseous", "gypsiferous", "gypsy", "gyral", "gyrate", "gyrational", "gyratory", "gyroidal", "gyromagnetic", "gyronny", "gyroscopic", "gyrose", "gyrostatic", "habile", "habit forming", "habitable", "habitational", "habited", "habitual", "habitudinal", "hack", "hacking", "hackly", "hackneyed", "hadal", "haemal", "haematic", "haematinic", "haematogenous", "haematoid", "haematopoiesis", "haematopoietic", "haemic", "haemolysis", "haemolytic", "haemorrhagic", "haemorrhoidal", "haemostatic", "hag ridden", "haggard", "haggish", "hagiographic", "hagiographical", "hagiologic", "hagiological", "hagioscopic", "hail fellow", "hail fellow well met", "hair raising", "hair trigger", "haired", "hairier", "hairiest", "hairless", "hairlike", "hairy", "haitian", "halcyon", "hale", "halest", "half", "half a dozen", "half and half", "half asleep", "half assed", "half baked", "half blooded", "half bound", "half bred", "half breed", "half calf", "half caste", "half cocked", "half cut", "half dead", "half done", "half door", "half dozen", "half hardy", "half hearted", "half hour", "half hourly", "half length", "half pound", "half price", "half round", "half seas over", "half size", "half starved", "half timbered", "half time", "half track", "half tracked", "half witted", "halftone", "halfway", "hallowed", "hallstatt", "hallucinating", "hallucinative", "hallucinatory", "hallucinogenic", "halogenous", "haloid", "halophilous", "halt", "halted", "halting", "ham fisted", "ham handed", "hamate", "hamiltonian", "hamitic", "hammered", "hammerless", "hammier", "hammiest", "hammy", "hamular", "hamulate", "hand held", "hand knit", "hand me down", "hand picked", "hand to hand", "hand to mouth", "handcrafted", "handed", "handicapped", "handier", "handiest", "handled", "handless", "handmade", "hands off", "handsome", "handsomer", "handsomest", "handworked", "handwritten", "handwrought", "handy", "hangable", "hangdog", "hanging", "hanoverian", "hanseatic", "haphazard", "hapless", "haploid", "happening", "happier", "happiest", "happy", "happy go lucky", "haptic", "harassed", "harborless", "harbourless", "hard", "hard and fast", "hard bitten", "hard boiled", "hard featured", "hard fisted", "hard fought", "hard handed", "hard headed", "hard hit", "hard hitting", "hard mouthed", "hard nosed", "hard pressed", "hard set", "hard up", "hard wearing", "hard working", "hardback", "hardbacked", "hardcover", "hardened", "hardier", "hardiest", "hardscrabble", "hardwood", "hardy", "harlequin", "harlot", "harmed", "harmful", "harmless", "harmonic", "harmonical", "harmonious", "harmonistic", "harmonized", "harnessed", "harried", "harrovian", "harrowing", "harsh", "harum scarum", "haruspical", "hasidic", "hask", "hastate", "hastening", "hastier", "hastiest", "hasty", "hatable", "hatched", "hatching", "hateable", "hated", "hateful", "hatless", "hatted", "haughtier", "haughtiest", "haughty", "haunched", "haunted", "haunting", "hauriant", "haustellate", "hawaiian", "hawk eyed", "hawkish", "hawklike", "hawser laid", "haywire", "hazardable", "hazardous", "hazel", "hazelly", "hazier", "haziest", "hazy", "head", "head on", "headachy", "headed", "headfirst", "headhunting", "headier", "headiest", "headless", "headlong", "headmost", "headstrong", "heady", "healable", "healed", "healing", "healthful", "healthier", "healthiest", "healthy", "heaped", "heaping", "heapy", "heard", "hearing", "hearing impaired", "hearsay", "heart free", "heart rending", "heart shaped", "heart stricken", "heart to heart", "heart warming", "heart whole", "heartbreaking", "heartbroken", "hearted", "heartening", "heartfelt", "heartier", "hearties", "heartiest", "heartless", "heartsome", "hearty", "heated", "heath robinson", "heathen", "heathenish", "heather", "heathery", "heathier", "heathiest", "heathy", "heating", "heaven born", "heaven sent", "heavenly", "heavenward", "heavier", "heavier than air", "heavies", "heaviest", "heaving", "heavy", "heavy armed", "heavy duty", "heavy handed", "heavy hearted", "heavy laden", "heavyweight", "hebdomadal", "hebdomadary", "hebephrenic", "hebetate", "hebetudinous", "hebraic", "hebraistic", "hebrew", "hebridean", "hebrides", "hectic", "hectographic", "hedged", "hedgier", "hedgiest", "hedgy", "hedonic", "hedonist", "hedonistic", "heedful", "heedless", "heel and toe", "heeled", "heelless", "heftier", "heftiest", "hefty", "hegelian", "hegemonic", "hegemonical", "heigh", "heightening", "heinous", "heirless", "held", "heliac", "heliacal", "helical", "helicoid", "helicoidal", "heliconian", "heliocentric", "heliochromic", "heliographic", "heliographical", "heliolatrous", "heliolithic", "heliometric", "heliometrical", "helioscopic", "heliotropic", "heliotypic", "hell bent", "helladic", "hellenic", "hellenistic", "hellish", "helluva", "helmed", "helmeted", "helminthic", "helminthoid", "helminthologic", "helminthological", "helmless", "helpable", "helpful", "helpless", "helter skelter", "helvetian", "helvetic", "hemal", "hematologic", "hemicyclic", "hemihedral", "hemimorphic", "hemiopic", "hemiparasitic", "hemiplegic", "hemipterous", "hemispheric", "hemispherical", "hemispheroidal", "hemistichal", "hemitropic", "hemizygous", "hemorrhagic", "hempen", "hempy", "hendecagonal", "hendecasyllabic", "hennaed", "henotheistic", "henpecked", "heortological", "hep", "hepatic", "hepplewhite", "heptagonal", "heptamerous", "heptarchic", "heptasyllabic", "heptavalent", "heraclean", "heraclidan", "heraclitean", "heralded", "heraldic", "herbaceous", "herbaged", "herbal", "herbartian", "herbicidal", "herbier", "herbiest", "herbivorous", "herbless", "herby", "hercynian", "herding", "here", "hereditable", "hereditary", "heretical", "heretofore", "heritable", "hermaphrodite", "hermaphroditic", "hermeneutic", "hermetic", "hermitical", "hernial", "herniated", "heroic", "heroical", "herpetic", "herpetologic", "herpetological", "hertzian", "hesitant", "hesitating", "hesitative", "hesperian", "het", "hetero", "heterocercal", "heterochromatic", "heterochromous", "heteroclite", "heterocyclic", "heterodactyl", "heterodactylous", "heterodont", "heterodox", "heterodyne", "heteroecious", "heterogamous", "heterogeneous", "heterogenetic", "heterogonous", "heterologous", "heteromerous", "heteromorphic", "heteronomous", "heterophyllous", "heteroplastic", "heteropolar", "heteropterous", "heterosexual", "heterosporous", "heterostyled", "heterotactic", "heterothallic", "heterotopic", "heterotrophic", "heterotypic", "heterozygous", "heuristic", "hewn", "hex", "hexadecimal", "hexadic", "hexagonal", "hexahedral", "hexamerous", "hexametric", "hexametrical", "hexaplar", "hexaplaric", "hexastyle", "hexavalent", "hexed", "hi fi", "hibernal", "hibernating", "hibernian", "hick", "hidden", "hideous", "hidrotic", "hiemal", "hierarchal", "hierarchic", "hierarchical", "hieratic", "hierocratic", "hieroglyphic", "hieroglyphical", "hierogrammatic", "hierogrammatical", "hierologic", "hierological", "hieronymic", "hierophantic", "hierurgical", "higgledy piggledy", "high", "high class", "high fidelity", "high flown", "high flying", "high grade", "high handed", "high hat", "high key", "high keyed", "high level", "high minded", "high necked", "high octane", "high pitched", "high powered", "high pressure", "high priced", "high principled", "high proof", "high ranking", "high rise", "high risk", "high sounding", "high speed", "high spirited", "high stepping", "high strung", "high tension", "high test", "high toned", "high top", "high voltage", "highbrow", "higher", "highest", "highland", "highty tighty", "hijacking", "hilar", "hilarious", "hilding", "hillier", "hilliest", "hillocky", "hilly", "himalayan", "himyarite", "himyaritic", "hind", "hinder", "hindering", "hindermost", "hindmost", "hindoo", "hindu", "hindustani", "hindward", "hip", "hipped", "hipper", "hippest", "hippiatric", "hippier", "hippiest", "hippocampal", "hippocratic", "hippodromic", "hippophagous", "hippopotamic", "hippy", "hirable", "hircine", "hireable", "hired", "hirsute", "hirudinean", "hirudinoid", "hirundine", "his", "hispanic", "hispid", "hissing", "histie", "histiocytic", "histioid", "histogenetic", "histoid", "histologic", "histological", "histolytic", "histopathological", "historiated", "historic", "historical", "historicism", "historicist", "historiographic", "historiographical", "histrionic", "hit", "hit and run", "hitchy", "hither", "hithermost", "hitlerite", "hittite", "hiveless", "hivelike", "ho hum", "hoar", "hoarier", "hoariest", "hoarse", "hoary", "hobbes", "hobbesian", "hobbistical", "hobbyless", "hobnail", "hobnailed", "hoc", "hogged", "hoggish", "hoiden", "hoity toity", "hokey", "holarctic", "holding", "hole and corner", "holey", "holiday", "holier", "holier than thou", "holies", "holiest", "holistic", "hollow", "hollow eyed", "hollowed", "hollowhearted", "holmic", "holoblastic", "holocaustal", "holocaustic", "holocene", "holocrine", "holograph", "holographic", "holohedral", "holometabolic", "holometabolous", "holophrastic", "holophytic", "holothurian", "holotypic", "holozoic", "holstered", "holy", "home", "home baked", "home brewed", "home grown", "home made", "homebound", "homeless", "homelier", "homeliest", "homelike", "homely", "homemaker", "homemaking", "homeomorphic", "homeomorphous", "homeopathic", "homeostatic", "homeothermal", "homeothermic", "homeric", "homesick", "homespun", "homeward", "homeward bound", "homey", "homicidal", "homier", "homiest", "homiletic", "homiletical", "homing", "hominid", "hominoid", "homocentric", "homocercal", "homochromatic", "homochromous", "homocyclic", "homodont", "homodyne", "homoeomorphic", "homoeomorphous", "homoeopathic", "homoerotic", "homogamous", "homogeneous", "homogenetic", "homogenized", "homogenous", "homoiothermal", "homoiothermic", "homological", "homologous", "homomorphic", "homomorphous", "homonymic", "homonymous", "homophile", "homophonic", "homophonous", "homoplastic", "homopolar", "homopterous", "homosexual", "homosporous", "homotaxial", "homotaxic", "homothallic", "homothermal", "homothermic", "homotypic", "homozygous", "homuncular", "homy", "honduran", "honest", "honey", "honey sweet", "honeycombed", "honeyed", "honeyless", "honied", "honorable", "honorary", "honorific", "honour", "honourable", "honoured", "honourless", "hooded", "hoodless", "hoofed", "hoofless", "hook nosed", "hooked", "hookier", "hookiest", "hooly", "hopeful", "hopeless", "hopping", "horal", "horary", "horatian", "horizontal", "hormonal", "hormonic", "horn mad", "horn rimmed", "hornblendic", "horned", "hornier", "horniest", "hornish", "hornless", "hornlike", "horny", "horologic", "horoscopic", "horrendous", "horrent", "horrible", "horrid", "horrific", "horrified", "horrifying", "horror", "horror stricken", "horror struck", "horse and buggy", "horse faced", "horsey", "horsier", "horsiest", "horsy", "hortative", "hortatory", "horticultural", "hospitable", "hostile", "hot", "hot blooded", "hot short", "hot tempered", "hotfoot", "hotheaded", "hotshot", "hotter", "hottest", "hotting", "hottish", "hour", "hourlong", "hourly", "house", "house broken", "house proud", "house to house", "housebound", "household", "houseless", "housewifely", "hoven", "how to", "howe", "howling", "hoyden", "hoydenish", "huddled", "hudibrastic", "hued", "hueless", "huffier", "huffiest", "huffing", "huffish", "huffy", "huge", "huger", "hugest", "huggable", "hugger mugger", "huguenot", "hulkier", "hulkiest", "hulking", "hulky", "hull down", "human", "humane", "humanist", "humanistic", "humanitarian", "humanlike", "humanoid", "humble", "humbled", "humbler", "humblest", "humbling", "humdrum", "humectant", "humeral", "humic", "humid", "humiliated", "humiliating", "humiliatory", "hummel", "humming", "hummocky", "humongous", "humoral", "humoristic", "humorless", "humorous", "humourless", "humoursome", "humpbacked", "humped", "humpier", "humpiest", "humpy", "hunchback", "hunchbacked", "hunched", "hundred", "hundredfold", "hundredth", "hung", "hungarian", "hungerly", "hungry", "hunkered", "hunky", "hunky dory", "hunnish", "huntaway", "hunted", "hurling", "hurly burly", "hurried", "hurry scurry", "hurry skurry", "hurrying", "hurt", "hurtful", "hurtless", "hurtling", "husbandless", "husbandly", "hush hush", "hushed", "huskier", "huskiest", "husky", "hussite", "hyacinthine", "hyaline", "hyaloid", "hybrid", "hybridisable", "hybridizable", "hydra headed", "hydragogue", "hydrated", "hydraulic", "hydric", "hydriodic", "hydro", "hydrobromic", "hydrocephalic", "hydrochloric", "hydrocyanic", "hydrodynamic", "hydroelectric", "hydrofluoric", "hydrogenous", "hydrographic", "hydrographical", "hydroid", "hydrokinetic", "hydrologic", "hydrological", "hydrolytic", "hydromantic", "hydromedusan", "hydrometric", "hydrometrical", "hydropathic", "hydropathical", "hydrophanous", "hydrophilic", "hydrophilous", "hydrophobic", "hydrophytic", "hydropic", "hydroponic", "hydroptic", "hydrostatic", "hydrotactic", "hydrotherapeutic", "hydrothermal", "hydrotropic", "hydrous", "hydroxy", "hydrozoan", "hyetal", "hyetographic", "hyetographical", "hygeian", "hygienic", "hygrometric", "hygrophilous", "hygrophytic", "hygroscopic", "hylomorphic", "hylophagous", "hylotheist", "hylozoistic", "hymenal", "hymeneal", "hymenial", "hymenopterous", "hymnal", "hyoid", "hypabyssal", "hypaethral", "hypalgesic", "hyperactive", "hyperacute", "hyperaemic", "hyperaesthetic", "hyperalgesic", "hyperbaric", "hyperbatic", "hyperbolic", "hypercatalectic", "hyperconscious", "hypercorrect", "hypercritical", "hyperemetic", "hyperemic", "hyperesthetic", "hypereutectic", "hypergamous", "hypergolic", "hypermetrical", "hypermetropic", "hyperphysical", "hyperplastic", "hyperpyretic", "hypersensitive", "hypersensitized", "hypersensual", "hypersonic", "hypersthenic", "hypertensive", "hyperthermal", "hypertonic", "hypertrophic", "hypertrophied", "hyphal", "hyphenated", "hyphenic", "hypnagogic", "hypnogenetic", "hypnoid", "hypnoidal", "hypnopompic", "hypnotic", "hypnotisable", "hypnotised", "hypnotistic", "hypnotizable", "hypnotized", "hypoblastic", "hypochondriac", "hypochondriacal", "hypocoristic", "hypocritical", "hypocycloidal", "hypodermal", "hypodermic", "hypoeutectic", "hypogastric", "hypogeal", "hypogene", "hypogeous", "hypoglossal", "hypoglycemic", "hypognathous", "hypogynous", "hypomanic", "hypophosphorous", "hypophyseal", "hypophysial", "hypoplastic", "hypostatic", "hypostyle", "hypotactic", "hypotensive", "hypothalamic", "hypothecary", "hypothermal", "hypothetic", "hypothetical", "hypothyroid", "hypothyroidism", "hypotonic", "hypoxic", "hypsometric", "hyracoid", "hysteretic", "hysteric", "hysterical", "hysterogenic", "hysteroid", "iambic", "iatric", "iatrochemical", "iatrogenic", "iberian", "ibsenian", "icarian", "ice cold", "ice cube", "ice free", "iced", "icelandic", "ichnographic", "ichnographical", "ichorous", "ichthyic", "ichthyoid", "ichthyolitic", "ichthyological", "ichthyophagous", "ichthyosaurian", "ichthyotic", "icier", "iciest", "ickier", "ickiest", "icky", "iconic", "iconoclastic", "iconomatic", "icosahedral", "icteric", "ictic", "icy", "idaean", "idahoan", "ideal", "idealess", "idealist", "idealistic", "idealized", "ideational", "ideative", "idem", "idempotent", "identic", "identical", "identifiable", "identified", "identifying", "ideographic", "ideographical", "ideologic", "ideological", "ideomotor", "idioblastic", "idiographic", "idiomatic", "idiomatical", "idiomorphic", "idiopathic", "idiorrhythmic", "idiosyncratic", "idiotic", "idle", "idled", "idlest", "idling", "idolatrous", "idolized", "idyllic", "iffy", "igneous", "ignescent", "ignitable", "ignited", "ignitible", "ignoble", "ignominious", "ignorable", "ignorant", "ignored", "iguana", "iguanid", "ileac", "iliac", "ilka", "ill", "ill advised", "ill affected", "ill assorted", "ill behaved", "ill boding", "ill bred", "ill conceived", "ill conditioned", "ill considered", "ill defined", "ill disposed", "ill equipped", "ill fated", "ill favored", "ill favoured", "ill founded", "ill gotten", "ill humoured", "ill judged", "ill looking", "ill mannered", "ill natured", "ill omened", "ill spent", "ill starred", "ill tempered", "ill timed", "ill treated", "ill used", "illative", "illaudable", "illegal", "illegible", "illegitimate", "illiberal", "illicit", "illimitable", "illinoian", "illinois", "illiquid", "illiterate", "illogical", "illuminable", "illuminant", "illuminate", "illuminated", "illuminating", "illuminative", "illusive", "illusory", "illustrated", "illustrational", "illustrative", "illustrious", "illuvial", "illyrian", "imageable", "imaginable", "imaginal", "imaginary", "imaginative", "imagined", "imagism", "imagist", "imagistic", "imbecile", "imbecilic", "imbibitional", "imbricate", "imbricated", "imbued", "imidic", "imitable", "imitation", "imitative", "immaculate", "immane", "immanent", "immaterial", "immature", "immeasurable", "immediate", "immedicable", "immemorial", "immense", "immensurable", "immersed", "immersible", "immethodical", "imminent", "immiscible", "immitigable", "immobile", "immoderate", "immodest", "immoral", "immortal", "immotile", "immovable", "immoveable", "immune", "immunized", "immunogenic", "immunological", "immunosuppressive", "immutable", "impacted", "impactive", "impaired", "impalpable", "imparipinnate", "imparisyllabic", "impartable", "impartial", "impartible", "impassable", "impassible", "impassionate", "impassioned", "impassive", "impatient", "impavid", "impeachable", "impeccable", "impeccant", "impecunious", "impeded", "impedimental", "impeding", "impeditive", "impel", "impelled", "impellent", "impelling", "impendent", "impending", "impenetrable", "impenitent", "impennate", "imperative", "imperatorial", "imperceptible", "imperceptive", "impercipient", "imperfect", "imperfectible", "imperfective", "imperforate", "imperial", "imperialist", "imperialistic", "imperious", "imperishable", "impermanent", "impermeable", "impermissible", "impersonal", "impertinent", "imperturbable", "imperviable", "impervious", "impetiginous", "impetrative", "impetratory", "impetuous", "impingent", "impious", "impish", "implacable", "implacental", "implanted", "implausible", "implemental", "implemented", "implicated", "implicative", "implicit", "implied", "imploratory", "imploring", "implosive", "impolite", "impolitic", "imponderable", "importable", "important", "imported", "importunate", "imposable", "imposed", "imposing", "impossible", "impotent", "impoundable", "impoverished", "impracticable", "impractical", "imprecatory", "imprecise", "impregnable", "impregnate", "impregnated", "imprescriptible", "impressed", "impressible", "impressionable", "impressionist", "impressionistic", "impressive", "imprisonable", "imprisoned", "improbable", "impromptu", "improper", "impropriate", "improvable", "improved", "improvident", "improving", "improvisational", "improvisatory", "improvised", "imprudent", "impudent", "impugnable", "impuissant", "impulsive", "impure", "imputable", "imputative", "in and in", "in between", "in built", "in car", "in depth", "in flight", "in house", "in service", "inaccessible", "inaccurate", "inactive", "inadaptable", "inadequate", "inadmissible", "inadvertent", "inadvisable", "inalienable", "inalterable", "inane", "inanimate", "inappeasable", "inappellable", "inappetent", "inapplicable", "inapposite", "inappreciable", "inappreciative", "inapprehensible", "inapprehensive", "inapproachable", "inappropriate", "inapt", "inarticulate", "inartificial", "inartistic", "inattentive", "inaudible", "inaugural", "inauspicious", "inauthentic", "inboard", "inborn", "inbound", "inbred", "inbreed", "inby", "incalculable", "incalescent", "incan", "incandescent", "incantational", "incantatory", "incapable", "incapacious", "incapacitated", "incapacitating", "incarcerate", "incarnadine", "incarnate", "incased", "incautious", "incendiary", "incensed", "incentive", "inceptive", "incertain", "incessant", "incestuous", "inchoate", "inchoative", "incident", "incidental", "incipient", "incised", "incisive", "incisory", "incitant", "incivil", "inclement", "inclinable", "inclinational", "inclinatory", "inclined", "includable", "included", "includible", "inclusive", "incoercible", "incog", "incogitable", "incogitant", "incognita", "incognito", "incognizable", "incognizant", "incognoscible", "incoherent", "incombustible", "incoming", "incommensurable", "incommensurate", "incommodious", "incommunicable", "incommunicado", "incommunicative", "incommutable", "incomparable", "incompatible", "incompetent", "incomplete", "incompliant", "incomprehensible", "incomprehensive", "incompressible", "incomputable", "inconceivable", "inconclusive", "incondensable", "incondite", "incongruent", "incongruous", "inconsecutive", "inconsequent", "inconsequential", "inconsiderable", "inconsiderate", "inconsistent", "inconsolable", "inconsonant", "inconspicuous", "inconstant", "inconsumable", "incontestable", "incontinent", "incontrollable", "incontrovertible", "inconvenient", "inconvertible", "inconvincible", "incoordinate", "incorporate", "incorporated", "incorporating", "incorporative", "incorporeal", "incorrect", "incorrigible", "incorrupt", "incorruptible", "incrassate", "incrassative", "increasable", "increased", "increasing", "increate", "incredible", "incredulous", "incremental", "increscent", "incriminating", "incriminatory", "incrust", "incubative", "incubatory", "incubous", "inculcative", "inculpable", "inculpatory", "incult", "incumbent", "incunabular", "incurable", "incurious", "incurrable", "incurrent", "incursive", "incurvate", "incurved", "incuse", "indagative", "indebted", "indecent", "indeciduate", "indeciduous", "indecipherable", "indecisive", "indeclinable", "indecomposable", "indecorous", "indefatigable", "indefeasible", "indefectible", "indefensible", "indefinable", "indefinite", "indehiscent", "indelible", "indelicate", "indemonstrable", "indented", "indentured", "independent", "indescribable", "indestructible", "indeterminable", "indeterminate", "indeterminism", "indeterminist", "index linked", "indexical", "indexless", "indian", "indic", "indicative", "indicatory", "indicial", "indictable", "indifferent", "indigenous", "indigent", "indigested", "indigestible", "indigestive", "indign", "indignant", "indigo blue", "indirect", "indiscernible", "indiscerptible", "indiscoverable", "indiscreet", "indiscrete", "indiscriminate", "indiscriminating", "indiscriminative", "indispensable", "indisposed", "indisputable", "indissoluble", "indistinct", "indistinctive", "indistinguishable", "indivertible", "individual", "individualist", "individualistic", "individualized", "indivisible", "indo aryan", "indo european", "indo germanic", "indo iranian", "indo pacific", "indocile", "indolent", "indomitable", "indonesian", "indoor", "indrawn", "indubitable", "induced", "inducible", "inductile", "inductive", "indulgent", "induplicate", "indurate", "indurative", "indusial", "indusiate", "industrial", "industrialized", "industrious", "indwelling", "inebriant", "inebriate", "inebriated", "inedible", "inedited", "ineducable", "ineffable", "ineffaceable", "ineffective", "ineffectual", "inefficacious", "inefficient", "inelaborate", "inelastic", "inelegant", "ineligible", "ineloquent", "ineluctable", "inenarrable", "inept", "inequable", "inequitable", "ineradicable", "inerasable", "inerrable", "inerrant", "inert", "inertial", "inescapable", "inessential", "inessive", "inestimable", "inevitable", "inexact", "inexcusable", "inexhaustible", "inexistent", "inexorable", "inexpedient", "inexpensive", "inexperienced", "inexpert", "inexpiable", "inexplainable", "inexplicable", "inexplicit", "inexpressible", "inexpressive", "inexpugnable", "inexpungible", "inextensible", "inextinguishable", "inextirpable", "inextricable", "infallible", "infamous", "infant", "infanticidal", "infantile", "infantine", "infatuate", "infatuated", "infeasible", "infect", "infected", "infectious", "infective", "infecund", "infelicitous", "infelt", "inferable", "inferential", "inferior", "infernal", "inferrible", "infertile", "infested", "infidel", "infiltrative", "infinite", "infinitesimal", "infinitival", "infinitive", "infirm", "inflamed", "inflammable", "inflammatory", "inflatable", "inflated", "inflationary", "inflationism", "inflected", "inflectional", "inflectionless", "inflective", "inflexed", "inflexible", "inflexional", "inflexionless", "inflictive", "inflorescent", "inflowing", "influent", "influential", "influenzal", "inform", "informal", "informational", "informative", "informatory", "informed", "infracostal", "infrahuman", "inframaxillary", "infrangible", "infrasonic", "infrequent", "infundibular", "infundibulate", "infundibuliform", "infuriate", "infuriated", "infuriating", "infuscate", "infusible", "infusive", "infusorial", "infusorian", "ingenerate", "ingenious", "ingenuous", "ingested", "ingestible", "ingestive", "inglorious", "ingoing", "ingrain", "ingrained", "ingrate", "ingratiating", "ingravescent", "ingressive", "ingrowing", "ingrown", "inguinal", "inhabitable", "inhabited", "inhalant", "inhaled", "inhaling", "inharmonic", "inharmonious", "inherent", "inheritable", "inherited", "inheriting", "inhibited", "inhibiting", "inhibitory", "inhomogeneous", "inhospitable", "inhuman", "inhumane", "inhumed", "inimical", "inimitable", "iniquitous", "initial", "initiate", "initiated", "initiative", "initiatory", "injectable", "injudicious", "injunctive", "injured", "injurious", "inkier", "inkiest", "inky", "inlaid", "inland", "inlying", "inmost", "innate", "inner", "inner directed", "innermost", "innocent", "innocuous", "innominate", "innovative", "innovatory", "innoxious", "innumerable", "innumerate", "innumerous", "innutritious", "inobservant", "inoculable", "inoculative", "inodorous", "inoffensive", "inofficious", "inoperable", "inoperative", "inopportune", "inordinate", "inorganic", "inotropic", "inphase", "inpouring", "inquiline", "inquilinous", "inquiring", "inquisitional", "inquisitive", "inquisitorial", "inrush", "inrushing", "insalubrious", "insane", "insanitary", "insatiable", "insatiate", "inscribable", "inscribed", "inscriptional", "inscriptive", "inscrutable", "insecticidal", "insectile", "insectivorous", "insecure", "inseminated", "insensate", "insensible", "insensitive", "insentient", "inseparable", "insertable", "inserted", "insertional", "insessorial", "inseverable", "inshore", "inside", "inside out", "insides", "insidious", "insightful", "insignificant", "insincere", "insinuating", "insinuative", "insipid", "insipient", "insistent", "insociable", "insolent", "insoluble", "insolvable", "insolvent", "insomniac", "insomnious", "insouciant", "inspectional", "inspective", "inspectorial", "inspirable", "inspirational", "inspirative", "inspiratory", "inspired", "inspiring", "inspiriting", "instable", "instant", "instantaneous", "instigative", "instinct", "instinctive", "instinctual", "institutional", "institutionalized", "institutionary", "institutive", "instructed", "instructible", "instructional", "instructive", "instrumental", "instrumentalist", "insubordinate", "insubstantial", "insufferable", "insufficient", "insular", "insultable", "insulted", "insulting", "insuperable", "insupportable", "insuppressible", "insurable", "insured", "insurgent", "insurmountable", "insurrection", "insurrectional", "insurrectionary", "insusceptible", "intact", "intangible", "integrable", "integral", "integrant", "integrate", "integrated", "integrative", "integumentary", "intellective", "intellectual", "intellectualism", "intelligent", "intelligential", "intelligible", "intemerate", "intemperate", "intended", "intense", "intensified", "intensifying", "intensional", "intensive", "intent", "intentional", "intentioned", "inter", "interactionist", "interactive", "interatomic", "interbank", "interbedded", "interbred", "intercalary", "intercalative", "intercellular", "interceptive", "intercessional", "intercessorial", "intercessory", "interchangeable", "intercity", "interclavicular", "intercollegiate", "intercolonial", "intercolumnar", "intercommunal", "intercommunicable", "intercommunity", "interconnected", "intercontinental", "interconvertible", "intercostal", "intercrossed", "intercrural", "intercurrent", "interdenominational", "interdental", "interdepartmental", "interdependent", "interdictory", "interdigital", "interdisciplinary", "interested", "interesting", "interfacial", "interfaith", "interfascicular", "interfemoral", "interferential", "interfering", "interferometric", "interfertile", "interfluent", "interfrontal", "intergalactic", "interglacial", "intergovernmental", "interim", "interior", "interior sprung", "interjacent", "interjaculatory", "interjectional", "interjectural", "interlaced", "interlacing", "interlaminar", "interlinear", "interlinking", "interlobular", "interlocking", "interlocutory", "interludial", "interlunar", "intermaxillary", "intermediary", "intermediate", "intermediatory", "intermetallic", "interminable", "intermingled", "intermissive", "intermittent", "intermolecular", "intermontane", "intermundane", "intern", "internal", "international", "internationalist", "internationalistic", "internecine", "interneural", "internodal", "internuncial", "interoceanic", "interoceptive", "interocular", "interorbital", "interosseous", "interparietal", "interpellant", "interpenetrable", "interpenetrant", "interpenetrative", "interpersonal", "interpetiolar", "interplanetary", "interpleural", "interpolable", "interpolar", "interpolative", "interpretable", "interpretative", "interpreted", "interpretive", "interprovincial", "interproximal", "interracial", "interradial", "interramal", "interred", "interrelated", "interrogable", "interrogative", "interrogatory", "interrupted", "interruptive", "interscapular", "interscholastic", "intersecting", "intersectional", "interseptal", "intersexual", "intersidereal", "interspatial", "interspecific", "interspinal", "interspinous", "interstadial", "interstate", "interstellar", "interstitial", "intersubjective", "intertarsal", "intertentacular", "interterritorial", "intertidal", "intertissued", "intertribal", "intertropical", "intertwined", "interunion", "interurban", "intervenient", "intervening", "interventionist", "intervocalic", "interwoven", "interwrought", "interzonal", "intestate", "intestinal", "intimate", "intime", "intimidated", "intimidating", "intimidatory", "intimist", "intimiste", "intoed", "intolerable", "intolerant", "intoned", "intown", "intoxicant", "intoxicated", "intoxicating", "intracardiac", "intracellular", "intracranial", "intractable", "intradermal", "intramolecular", "intramundane", "intramural", "intramuscular", "intranational", "intransigent", "intransitive", "intrastate", "intravascular", "intravenous", "intrepid", "intricate", "intriguing", "intrinsic", "intrinsical", "introducible", "introductory", "introjected", "intromissive", "intromittent", "introrse", "introspectionist", "introspective", "introversive", "introvert", "introverted", "introvertive", "intruding", "intrusive", "intuitional", "intuitionist", "intuitive", "intumescent", "intussusceptive", "inundant", "inundated", "inurbane", "inured", "invading", "invaginate", "invalid", "invalidated", "invalidating", "invaluable", "invariable", "invariant", "invasive", "invected", "invective", "inventable", "invented", "inventible", "inventive", "inventorial", "inverse", "inversive", "invertebrate", "inverted", "invested", "investigable", "investigative", "investigatory", "investitive", "inveterate", "inviable", "invidious", "invigorated", "invigorating", "invincible", "inviolable", "inviolate", "invisible", "invitation", "invitatory", "invited", "inviting", "invocatory", "involucral", "involucrate", "involuntary", "involute", "involutional", "involved", "invulnerable", "inward", "inwrought", "iodic", "iodized", "iodometric", "iodous", "ionian", "ionic", "ionized", "ionospheric", "ipsilateral", "iracund", "iranian", "iraqi", "irascible", "irate", "ireful", "irenic", "iridaceous", "iridescent", "iridic", "irish", "iritic", "irksome", "iron", "iron gray", "iron grey", "iron hearted", "iron sick", "ironclad", "ironed", "ironfisted", "ironic", "ironical", "irony", "iroquoian", "iroquois", "irradiant", "irradiative", "irrational", "irrationalist", "irrationalistic", "irrebuttable", "irreclaimable", "irreconcilable", "irrecoverable", "irrecusable", "irredeemable", "irredentist", "irreducible", "irreformable", "irrefragable", "irrefrangible", "irrefutable", "irregular", "irrelative", "irrelevant", "irrelievable", "irreligious", "irremeable", "irremediable", "irremissible", "irremovable", "irreparable", "irrepealable", "irreplaceable", "irrepleviable", "irreplevisable", "irrepressible", "irreproachable", "irreproducible", "irresistible", "irresoluble", "irresolute", "irresolvable", "irrespective", "irrespirable", "irresponsible", "irresponsive", "irretentive", "irretrievable", "irreverent", "irreversible", "irrevocable", "irrigable", "irrigational", "irrigative", "irriguous", "irritable", "irritant", "irritated", "irritating", "irritative", "irruptive", "isagogic", "ischaemic", "ischemic", "ischiadic", "isentropic", "ish", "ishmaelitish", "isiac", "isidorian", "islamic", "isobaric", "isobathic", "isobilateral", "isochasmic", "isocheimal", "isocheimenal", "isocheimic", "isochimal", "isochoric", "isochromatic", "isochronal", "isochronous", "isoclinal", "isocratic", "isocyclic", "isodiametric", "isodimorphic", "isodimorphous", "isodynamic", "isoelectric", "isoelectronic", "isogamous", "isogamy", "isogenous", "isogeothermal", "isogeothermic", "isoglossal", "isogonal", "isogonic", "isohyetal", "isolable", "isolate", "isolated", "isolating", "isolationism", "isolationist", "isolative", "isolecithal", "isologous", "isomagnetic", "isomeric", "isomerous", "isometric", "isometrical", "isomorphic", "isomorphous", "isonomic", "isonomous", "isoperimetrical", "isopod", "isopodan", "isopodous", "isorhythmic", "isosceles", "isoseismal", "isoseismic", "isostatic", "isostemonous", "isosteric", "isotactic", "isotheral", "isothermal", "isotonic", "isotopic", "isotropic", "isotropous", "israeli", "israelitish", "issuable", "issuant", "issueless", "isthmian", "italian", "italianate", "italic", "itchier", "itchiest", "itching", "itchy", "iterant", "iterative", "ithaca", "ithyphallic", "itinerant", "itinerary", "itty bitty", "ivied", "ivory towered", "jabbering", "jack", "jacketed", "jacksonian", "jacobean", "jacobethan", "jacobin", "jacobinic", "jacobinical", "jacobitic", "jacobitical", "jaculatory", "jade", "jaded", "jadish", "jagged", "jaggier", "jaggiest", "jaggy", "jailed", "jain", "jainism", "jake", "jalapic", "jalousied", "jam packed", "jamaica", "jamaican", "jamesian", "jammed", "jammy", "jangling", "jangly", "janiform", "janitorial", "jannock", "jansenism", "janus faced", "japan", "japanese", "japanesque", "japhetic", "jarring", "jasp", "jaspery", "jaundiced", "jauntier", "jauntiest", "jaunty", "java", "jawbreaking", "jazzier", "jazziest", "jazzy", "jealous", "jebusitic", "jeering", "jeffersonian", "jehovist", "jehovistic", "jejune", "jelled", "jellied", "jeopardous", "jerkier", "jerkiest", "jerking", "jerkwater", "jerky", "jerry built", "jessant", "jestful", "jesting", "jet", "jet black", "jet propelled", "jet propulsion", "jetting", "jetty", "jeweled", "jewelled", "jewish", "jiggered", "jiggish", "jiggly", "jilted", "jim crow", "jim dandy", "jimp", "jingling", "jingly", "jingoish", "jingoism", "jingoist", "jingoistic", "jinxed", "jittery", "jobless", "jocose", "jocular", "jocund", "johannine", "johnsonian", "joined", "joint", "jointed", "jointless", "jointured", "joking", "jollier", "jolliest", "jolly", "jolted", "joltier", "joltiest", "jolting", "jolty", "jonsonian", "jouncing", "journalistic", "jovial", "jovian", "jowled", "jowlier", "jowliest", "jowly", "joyce", "joycean", "joyful", "joyless", "joyous", "jubate", "jubilant", "judaean", "judaic", "judean", "judge made", "judgemental", "judgmental", "judicable", "judicative", "judicatory", "judicial", "judiciary", "judicious", "jugal", "jugate", "juglandaceous", "jugoslav", "jugoslavian", "jugular", "juiceless", "juicier", "juiciest", "juicy", "julian", "julienne", "jumbled", "jumbo", "jumpable", "jumpier", "jumpiest", "jumping", "jumpy", "juncaceous", "jungian", "jungly", "junior", "junked", "junoesque", "jural", "jurant", "jurassic", "juratory", "juridic", "juridical", "jurisdictional", "jurisdictive", "jurisprudent", "jurisprudential", "juristic", "jury", "jury rigged", "jussive", "just", "justiciable", "justiciary", "justifiable", "justificative", "justificatory", "justified", "jutting", "juvenal", "juvenalian", "juvenescent", "juvenile", "juxtaposed", "juxtapositional", "kacha", "kafka", "kaleidoscopic", "kantian", "kaput", "karaite", "karmic", "karoo", "karstic", "karyotypic", "kashmiri", "katabatic", "katabolic", "kayoed", "keeled", "keen", "keeperless", "keloidal", "keltic", "kempt", "kenotic", "kenspeckle", "kentish", "kenyan", "keplerian", "kept", "keramic", "keratinous", "keratogenous", "keratoid", "keratose", "kerchiefed", "kernelly", "kerygmatic", "key", "keyed", "keyless", "khaki", "khedival", "khedivial", "khmer", "kickable", "kid glove", "kidnapped", "kidney shaped", "killing", "kilted", "kin", "kinaesthetic", "kind", "kind hearted", "kindled", "kindless", "kindlier", "kindliest", "kindly", "kindred", "kinematic", "kinematical", "kinesthetic", "kinetic", "king size", "king sized", "kingdomless", "kingless", "kinglier", "kingliest", "kinglike", "kingly", "kinkier", "kinkiest", "kinky", "kinless", "kirtled", "kissable", "kitchen", "kitsch", "kittenish", "kittle", "kitty cornered", "klephtic", "klutzy", "knaggy", "knarred", "knavish", "knee deep", "knee high", "knee length", "kneeling", "knickered", "knifeless", "knightless", "knightly", "knitted", "knobbed", "knobbier", "knobbiest", "knobbly", "knobby", "knock down", "knock kneed", "knockabout", "knocked down", "knockout", "knotless", "knotted", "knottier", "knottiest", "knotty", "know it all", "know nothing", "knowable", "knowing", "knowledgeable", "known", "knuckleheaded", "knuckly", "knurled", "knurlier", "knurliest", "knurly", "kookie", "kookier", "kookiest", "kooky", "koranic", "korean", "kosher", "kraal", "kufic", "kurdish", "kutcha", "kuwaiti", "kwa", "kymographic", "kyphotic", "la di da", "labelled", "labelloid", "labial", "labialized", "labiate", "labile", "labiodental", "labiovelar", "labored", "laboring", "laborious", "labour saving", "laboured", "labouring", "labrid", "labroid", "labyrinthian", "labyrinthine", "laccolithic", "lace up", "laced", "lacerable", "lacerant", "lacerate", "lacerated", "lacerative", "lacertilian", "lachrymal", "lachrymatory", "lachrymose", "lacier", "laciest", "laciniate", "lackadaisical", "lacking", "lackluster", "lacklustre", "laconia", "laconian", "laconic", "laconical", "lacrimal", "lacrimatory", "lactating", "lacteal", "lacteous", "lactescent", "lactic", "lactiferous", "lactogenic", "lacunal", "lacunar", "lacunose", "lacustrine", "lacy", "laddery", "laddish", "laden", "lady killer", "ladyish", "ladylike", "laevorotatory", "lageniform", "laggard", "laggardly", "lagomorphic", "lagomorphous", "lagoonal", "lah di dah", "laic", "laid", "laid back", "laigh", "lairy", "laissez faire", "laith", "lakier", "lakiest", "laky", "lamaism", "lamarckian", "lambdoid", "lambent", "lamblike", "lame", "lamellar", "lamellate", "lamellibranch", "lamellicorn", "lamelliform", "lamellirostral", "lamellose", "lamentable", "lamented", "lamenting", "lamer", "lamest", "laminable", "laminar", "laminate", "laming", "laminose", "lamplit", "lamprophyric", "lanate", "lancastrian", "lanceolate", "lanceted", "lanciform", "lancinate", "land", "land poor", "landed", "landholding", "landless", "landowner", "landscaped", "landward", "lane", "lang", "langued", "languedocian", "languid", "languishing", "languorous", "laniary", "laniferous", "lank", "lanky", "lanose", "lantern jawed", "lanuginose", "lao", "laodicean", "laos", "laotian", "lap jointed", "lapelled", "lapidarian", "lapidary", "lapidific", "lapp", "lappeted", "lappish", "lapsable", "lapsed", "lapstrake", "laputan", "larboard", "larcenous", "lardaceous", "lardier", "lardiest", "lardy", "large", "large handed", "large hearted", "large minded", "large scale", "larger", "largest", "larghetto", "largish", "largo", "larine", "larkish", "larky", "larval", "larvicidal", "larviparous", "laryngeal", "laryngitic", "laryngological", "laryngoscopic", "lascivious", "lashed", "lashing", "last", "last minute", "lasting", "latched", "late", "lated", "lateen", "latent", "later", "lateral", "laterigrade", "lateritic", "lateritious", "latest", "lathery", "lathier", "lathiest", "lathlike", "lathy", "laticiferous", "latin", "latin american", "latinate", "latino", "latish", "latitudinal", "latitudinarian", "latitudinous", "latter", "latter day", "lattermost", "latticed", "latvian", "laudable", "laudatory", "laughable", "laughing", "lauraceous", "laureate", "laurelled", "laurentian", "lavender", "lavish", "law abiding", "lawful", "lawgiver", "lawless", "lawny", "lawrentian", "lawyerly", "lax", "laxative", "lay", "layered", "lazier", "laziest", "lazy", "leachier", "leachiest", "leachy", "lead free", "leaded", "leaden", "leaderless", "leadier", "leadiest", "leading", "leadless", "leady", "leafed", "leafier", "leafiest", "leafless", "leafy", "leaking", "leaky", "leal", "lean", "lean faced", "leaning", "leaping", "learnable", "learned", "leary", "leasable", "leased", "least", "leather", "leathered", "leathern", "leathery", "leaved", "leavened", "lecherous", "led", "ledgier", "ledgiest", "ledgy", "lee", "leerier", "leeriest", "leering", "leery", "leeward", "left", "left hand", "left handed", "left wing", "leftish", "leftist", "leftover", "leftward", "legal", "legalism", "legalistic", "legatine", "legato", "legendary", "legged", "leggier", "leggiest", "leggy", "legible", "legion", "legionary", "legislative", "legislatorial", "legit", "legitimate", "legitimist", "legless", "leguminous", "leibnitzian", "leibnizian", "leisurable", "leisure", "leisured", "leisurely", "lemnian", "lemony", "lemuroid", "lengthened", "lengthening", "lengthier", "lengthiest", "lengthways", "lengthwise", "lengthy", "lenient", "leninism", "leninist", "lenis", "lenitive", "lentando", "lenten", "lentic", "lenticellate", "lenticular", "lentiform", "lentiginous", "lentissimo", "lento", "lentoid", "leonine", "lepidopterous", "lepidote", "leporine", "leprose", "leprous", "leptodactylous", "leptophyllous", "leptorrhine", "leptosomatic", "leptosomic", "leptosporangiate", "lesbian", "less", "lessened", "lessening", "lesser", "let out", "lethal", "lethargic", "lethiferous", "letter perfect", "lettered", "letterless", "lettic", "lettish", "leucitic", "leucocratic", "leucocytic", "leucoderma", "leucopoiesis", "leukemic", "levantine", "level", "level headed", "leviable", "levigate", "leviratical", "levitical", "levorotatory", "lewd", "lexical", "lexicographic", "lexicographical", "liable", "lianoid", "liassic", "libellous", "libelous", "liberal", "liberalism", "liberalist", "liberalistic", "liberated", "liberating", "liberatory", "liberian", "libertarian", "liberticidal", "libertine", "libidinal", "libidinous", "librational", "libratory", "libyan", "licenced", "licensed", "licentious", "lichenoid", "lichenous", "licht", "licit", "licked", "lickerish", "lidded", "lidless", "lief", "liege", "lienal", "lienteric", "life", "life and death", "life giving", "life size", "life sized", "lifeful", "lifeless", "lifelike", "lifelong", "liftable", "lifted", "ligamentous", "light", "light armed", "light fingered", "light footed", "light handed", "light headed", "light hearted", "light minded", "light sensitive", "lighted", "lighter than air", "lightfast", "lightful", "lightish", "lightless", "lightsome", "lightweight", "ligneous", "lignified", "ligniform", "lignite", "lignitic", "lignivorous", "ligular", "ligulate", "liguloid", "ligurian", "likable", "like", "like minded", "likeable", "liked", "likelier", "likeliest", "likely", "lilac", "liliaceous", "lilied", "lilliputian", "lilting", "lily livered", "lily white", "limacine", "limbate", "limbed", "limber", "limbic", "limbless", "lime", "limey", "limicolous", "limier", "limiest", "liminal", "limitable", "limitary", "limitative", "limited", "limiting", "limitless", "limitrophe", "limnetic", "limnological", "limonitic", "limp", "limpid", "limy", "lineal", "linear", "lineate", "lined", "lineolate", "liney", "lingering", "lingual", "linguiform", "linguistic", "linguistical", "lingulate", "linked", "linnean", "lintier", "lintiest", "linty", "liny", "lion hearted", "lionly", "lipless", "lipogrammatic", "lipoid", "lipomatous", "lipped", "lippy", "liquefacient", "liquefiable", "liquefied", "liquescent", "liquid", "liquified", "liquorish", "lissom", "lissome", "lissotrichous", "listed", "listening", "listless", "lit", "lite", "literal", "literalistic", "literary", "literate", "lithe", "lither", "lithesome", "lithest", "lithic", "litho", "lithographic", "lithographical", "lithoid", "lithologic", "lithological", "lithophytic", "lithotomic", "lithotomical", "lithuanian", "litigable", "litigant", "litigious", "litten", "littered", "littery", "little", "littler", "littlest", "littoral", "liturgical", "livable", "live", "liveable", "lived", "livelier", "liveliest", "livelong", "lively", "liveried", "liverish", "liverpudlian", "livery", "livid", "living", "load bearing", "loaded", "loading", "loaferish", "loamy", "loanable", "loath", "loathful", "loathly", "loathsome", "lobar", "lobate", "lobed", "lobose", "lobular", "lobulate", "local", "localized", "locatable", "located", "locative", "lochial", "lockable", "locked", "loco", "locomobile", "locomotive", "locomotor", "locrian", "locular", "loculate", "loculicidal", "lodged", "loftier", "loftiest", "lofty", "log", "logaoedic", "logarithmic", "loggerheaded", "logical", "logistic", "logistical", "logographic", "logopedic", "logy", "lolling", "lomentaceous", "londonish", "londony", "lone", "lonelier", "loneliest", "lonely", "lonesome", "long", "long ago", "long dated", "long distance", "long drawn", "long drawn out", "long faced", "long haired", "long headed", "long lasting", "long legged", "long lived", "long playing", "long range", "long sighted", "long standing", "long suffering", "long term", "long tongued", "long waisted", "long winded", "longanimous", "longer", "longest", "longevous", "longhand", "longicorn", "longing", "longish", "longitudinal", "longshore", "longsome", "longwall", "longwise", "looking", "loonier", "loonies", "looniest", "loony", "looped", "loopy", "loose", "loose jointed", "loose leaf", "loose limbed", "loosened", "looser", "loosest", "looted", "lop eared", "lophobranch", "lophobranchiate", "lophodont", "lopped", "lopsided", "loquacious", "loral", "lordless", "lordlier", "lordliest", "lordly", "lordotic", "loricate", "lorn", "losable", "losel", "losing", "lossy", "lost", "loth", "lotic", "louche", "loud", "loud mouthed", "loudish", "lounging", "louring", "loury", "lousier", "lousiest", "lousy", "loutish", "louvered", "louvred", "lovable", "loveable", "loved", "loveless", "lovelier", "loveliest", "lovelorn", "lovely", "loverless", "loverly", "lovesick", "lovesome", "lovey dovey", "loving", "low", "low cal", "low cut", "low down", "low frequency", "low key", "low keyed", "low lying", "low minded", "low necked", "low pitched", "low pressure", "low rise", "low spirited", "low tension", "lower", "lower case", "lowered", "lowering", "lowermost", "lowery", "lowest", "lowland", "lowlier", "lowliest", "lowly", "lown", "lowse", "loxodromic", "loyal", "lozenged", "lozengy", "lubberly", "lubric", "lubricant", "lubricated", "lubricative", "lubricious", "lubricous", "lucan", "lucent", "lucid", "luciferous", "luckier", "luckiest", "luckless", "lucky", "lucrative", "luculent", "lucullan", "lucullean", "lucullian", "luddite", "ludicrous", "luetic", "lugubrious", "lukewarm", "lulling", "lumbar", "lumbering", "lumbricoid", "luminary", "luminescent", "luminiferous", "luminous", "lumpen", "lumpier", "lumpiest", "lumpish", "lumpy", "lunar", "lunate", "lunatic", "lunisolar", "lunitidal", "lunular", "lunulate", "lupercalian", "lupine", "lurching", "lurdan", "lurid", "lurking", "lusatian", "luscious", "lush", "lushy", "lusitanian", "lusterless", "lustful", "lustier", "lustiest", "lustral", "lustred", "lustreless", "lustrous", "lusty", "luteal", "luteous", "lutheran", "luxe", "luxuriant", "luxurious", "luxury", "lycanthropic", "lydian", "lying", "lying in", "lymphangial", "lymphatic", "lymphoid", "lyncean", "lynx eyed", "lyophilic", "lyophilised", "lyophilized", "lyophobic", "lyrate", "lyric", "lyrical", "lyriform", "lythraceous", "macabre", "macadam", "macadamized", "macaronic", "maccabean", "macedonian", "machiavellian", "machinable", "machine made", "macho", "macled", "macro", "macrobiotic", "macrocephalic", "macrocephalous", "macrocosmic", "macromolecular", "macropterous", "macroscopic", "macrurous", "macular", "maculate", "mad", "madagascan", "madagascar", "madcap", "maddened", "maddening", "maddest", "madding", "made", "made to order", "made up", "madrigalian", "maenadic", "maestoso", "magdalenian", "magenta", "maggoty", "magian", "magic", "magical", "magisterial", "magistral", "maglemosian", "magmatic", "magnanimous", "magnesian", "magnetic", "magnetized", "magnetomotive", "magnific", "magnificent", "magnified", "magniloquent", "magnoliaceous", "magyar", "mahdi", "mahometan", "mahratta", "maiden", "maidenish", "maidenlike", "maidenly", "maieutic", "maigre", "mail clad", "mailable", "mailed", "maimed", "main", "mainstream", "mainstreamed", "maintainable", "maintained", "mair", "majestic", "major", "majorcan", "majuscular", "majuscule", "makable", "make believe", "make or break", "makeless", "makeshift", "malacological", "malacophilous", "malacopterygian", "malacostracan", "maladapted", "maladaptive", "maladjusted", "maladroit", "malagasy", "malapert", "malapropos", "malar", "malarial", "malarian", "malarious", "malay", "malcontent", "male", "maledict", "maledictive", "maledictory", "malefic", "maleficent", "malevolent", "malfeasance", "malformed", "malfunctioning", "malicious", "malign", "malignant", "maligned", "malleable", "malnourished", "malodorous", "malpighian", "maltese", "malthusian", "maltreated", "malty", "malvaceous", "mammalian", "mammalogical", "mammary", "mammiferous", "mammonistic", "mammoth", "man", "man eating", "man made", "man sized", "man to man", "manageable", "managerial", "managing", "manchu", "manchurian", "manchus", "mancunian", "mandaean", "mandatory", "mande", "mandible", "mandibular", "mandibulate", "manducable", "manducatory", "maned", "maneless", "maneuverable", "manful", "manganic", "manganous", "mangey", "mangier", "mangiest", "mangled", "mangy", "maniac", "maniacal", "manic", "manic depressive", "manichean", "manifest", "manifestative", "manifold", "maniform", "manipulable", "manipular", "manipulatable", "manipulative", "manky", "manlier", "manliest", "manlike", "manly", "manned", "mannered", "manneristic", "mannerless", "mannerly", "mannish", "manoeuvrable", "manometric", "manometrical", "manorial", "mansard", "mantic", "mantled", "mantuan", "manual", "manubrial", "manufactural", "manufactured", "manx", "many", "many sided", "maoism", "maori", "marathi", "marathonian", "marauding", "marble", "marbled", "marcan", "marcescent", "marching", "mardy", "margaric", "marginal", "marginate", "marian", "marine", "mariolatrous", "marish", "marital", "maritime", "marked", "marketable", "marled", "marly", "marmalade", "marmoreal", "maroon", "marooned", "marquesan", "marred", "marriageable", "married", "marrowish", "marshier", "marshiest", "marshy", "marsipobranch", "marsupial", "martensitic", "martial", "martian", "martinique", "martyrological", "marvellous", "marvelous", "marxian", "marxist", "masculine", "masked", "masking", "masochistic", "masonic", "masoretic", "mass", "mass produced", "massed", "massier", "massiest", "massive", "massoretic", "massy", "masted", "master", "mastered", "masterful", "masterless", "masterly", "masticable", "masticatory", "mastigophoran", "mastless", "mastoid", "mastoidal", "masturbatory", "mat", "matchable", "matched", "matching", "matchless", "matchmaker", "matchmaking", "mated", "mateless", "material", "materialistic", "maternal", "matey", "mathematical", "matin", "matriarchal", "matrilineal", "matrilinear", "matrilocal", "matrimonial", "matroclinous", "matronal", "matronly", "matronymic", "matt", "matte", "matted", "matterful", "matterless", "mattery", "maturational", "maturative", "mature", "matured", "matutinal", "maudlin", "maungy", "mauretanian", "mauritania", "mauritanian", "mauritian", "mausolean", "mauve", "maverick", "mawkish", "maxi", "maxillary", "maxillofacial", "maximal", "maximizing", "maximum", "mayan", "mayoral", "mazed", "mazier", "maziest", "mazy", "mccarthyism", "meager", "meagerly", "meagre", "mealier", "mealiest", "mealy", "mealy mouthed", "mean", "meandering", "meandrous", "meaning", "meaningful", "meaningless", "measled", "measlier", "measliest", "measly", "measurable", "measured", "measureless", "meatal", "meatier", "meatiest", "meatless", "meaty", "mechanic", "mechanical", "mechanistic", "mechanized", "medal", "medallic", "meddlesome", "meddling", "mede", "mediaeval", "medial", "median", "mediastinal", "mediate", "mediated", "mediative", "mediatorial", "medicable", "medical", "medicamental", "medicative", "medicean", "medicinable", "medicinal", "medieval", "mediocre", "meditative", "mediterranean", "medium", "medium dated", "medium sized", "medley", "medullary", "medullated", "medusoid", "meek", "meet", "megalithic", "megalomaniacal", "megalopolitan", "megaphonic", "megascopic", "meiotic", "melancholic", "melancholy", "melanesian", "melanic", "melanistic", "melanous", "melbourne", "meliaceous", "melic", "meliorative", "meliorist", "melioristic", "melismatic", "melliferous", "mellifluent", "mellifluous", "mellow", "mellowed", "mellowing", "melodic", "melodious", "melodramatic", "melted", "melting", "membranous", "memnonian", "memorable", "memorial", "memoriter", "memphian", "memphite", "menacing", "mendacious", "mendelian", "mendicant", "menial", "meningeal", "meningococcal", "meningococcic", "meniscoid", "menispermaceous", "menopausal", "mensal", "menseful", "menseless", "menshevist", "menstrual", "menstruating", "mensurable", "mensural", "mental", "mentholated", "mentionable", "mephistophelean", "mephistophelian", "mephitic", "mercantile", "mercantilism", "mercenary", "merchantable", "merchantlike", "mercian", "merciful", "merciless", "mercurial", "mercuric", "merdivorous", "mere", "merest", "meretricious", "merged", "merging", "meridian", "meridional", "merino", "meristematic", "meristic", "merited", "meriting", "meritorious", "meroblastic", "merovingian", "merrier", "merriest", "merry", "mesarch", "mesencephalic", "mesenteric", "meshed", "meshuga", "mesial", "mesic", "mesmeric", "mesmerised", "mesmerized", "mesmerizing", "mesne", "mesoblastic", "mesocephalic", "mesolithic", "mesomorphic", "mesonic", "mesophytic", "mesopotamia", "mesopotamian", "mesothelial", "mesothoracic", "mesozoic", "messier", "messiest", "messy", "metabolic", "metacarpal", "metacentric", "metagalactic", "metagnathous", "metagrabolized", "metagrobolized", "metal", "metaleptic", "metaleptical", "metalinguistic", "metalled", "metallic", "metalliferous", "metalline", "metallographic", "metalloid", "metallurgic", "metallurgical", "metamere", "metameric", "metamorphic", "metaphoric", "metaphorical", "metaphrastic", "metaphysic", "metaphysical", "metapsychological", "metastable", "metastatic", "metatarsal", "metathetic", "metathetical", "metathoracic", "metazoan", "metazoic", "metempirical", "meteoric", "meteoritic", "meteoritical", "meteorologic", "meteorological", "methodical", "methodist", "methodological", "methylated", "methylic", "meticulous", "metonymic", "metonymical", "metopic", "metric", "metrical", "metrological", "metronymic", "metropolitan", "mettled", "mettlesome", "mexican", "mezzo rilievo", "miasmal", "miasmatic", "miasmic", "micawberish", "micellar", "mickle", "micro", "microanalytical", "microbial", "microbian", "microbic", "microbiological", "microcephalic", "microcephalous", "micrococcal", "microcosmic", "microcosmical", "microcrystalline", "microelectronic", "micrographic", "micrologic", "micrological", "micrometrical", "microminiature", "micronesian", "microphotographic", "microphytic", "microporous", "microscopic", "microscopical", "microseismic", "microseismical", "microsomal", "microtonal", "mid", "mid victorian", "middle", "middle aged", "middle distance", "middle of the road", "middlebrow", "middlemost", "middleweight", "middling", "midget", "midi", "midian", "midland", "midmost", "midnightly", "midship", "midships", "midway", "miffed", "miffier", "miffiest", "miffy", "mightier", "mightiest", "mighty", "mignon", "mignonette", "migrainous", "migrant", "migratory", "milanese", "milch", "mild", "mild mannered", "mildewy", "milesian", "miliary", "militant", "militaristic", "militarized", "military", "milk", "milk and water", "milk livered", "milk white", "milkier", "milkiest", "milkless", "milklike", "milky", "milled", "millenarian", "millenary", "millennial", "millesimal", "milliary", "milling", "million", "millionth", "millrun", "miltonic", "mim", "mimetic", "mimic", "mimical", "mimosaceous", "minacious", "minatory", "mincing", "mind altering", "mind bending", "mind blowing", "mind boggling", "mind expanding", "minded", "mindful", "mindless", "mined", "mineral", "mineralized", "mineralogical", "mingling", "mingy", "mini", "miniature", "minikin", "minim", "minimal", "minimized", "minimum", "minimus", "minion", "miniscule", "ministerial", "ministering", "ministrant", "ministrative", "minoan", "minor", "mint", "minus", "minuscular", "minuscule", "minute", "minutely", "miocene", "miotic", "miraculous", "mired", "mirier", "miriest", "mirkier", "mirkiest", "mirky", "mirrored", "mirthful", "mirthless", "miry", "mis", "misanthropic", "misanthropical", "misapplied", "misapprehensive", "misappropriated", "misbegot", "misbegotten", "miscellaneous", "mischief making", "mischievous", "miscible", "miscreant", "miscreate", "miscreated", "miscreative", "miserable", "miserly", "misfeatured", "misformed", "misguided", "mishnaic", "mishnic", "mislaid", "misleading", "mismatched", "mismated", "misogynistic", "misogynous", "misplaced", "misproud", "misrelated", "misrepresented", "missed", "misshapen", "missing", "mission", "mississippian", "missive", "missouri", "mistakable", "mistaken", "mistier", "mistiest", "mistreated", "mistrustful", "misty", "mistyped", "misunderstood", "misused", "mitered", "mithraism", "mitigable", "mitigated", "mitigative", "mitigatory", "mitochondrial", "mitotic", "mitrailleur", "mitral", "mixable", "mixed", "mixed up", "mixolydian", "mizzen", "mnemic", "mnemonic", "mnemotechnic", "moanful", "moaning", "moated", "mob", "mobbish", "mobile", "mobocratic", "mock", "mock heroic", "mocking", "mod", "modal", "model", "modeled", "moderate", "moderated", "moderating", "moderato", "modern", "modernism", "modernist", "modernistic", "modernized", "modest", "modifiable", "modified", "modiolar", "modish", "modular", "modulated", "mohammedan", "moire", "moist", "molal", "molar", "molded", "moldered", "moldering", "moldy", "molecular", "molested", "moline", "molluscoid", "molluscous", "molten", "molybdic", "molybdous", "momentaneous", "momentary", "momentous", "monachal", "monachist", "monacid", "monaco", "monadelphous", "monandrous", "monarch", "monarchal", "monarchial", "monarchian", "monarchic", "monarchical", "monarchist", "monarchistic", "monasterial", "monastic", "monastical", "monatomic", "monaural", "monaxial", "mondial", "monecious", "monegasque", "monetary", "money", "money grubbing", "moneyed", "moneyless", "monger", "mongol", "mongolian", "mongoloid", "mongrel", "monied", "moniliform", "monism", "monistic", "monistical", "monitorial", "monitory", "monkeyish", "monkish", "mono", "monoacid", "monobasic", "monocarpellary", "monocarpic", "monocarpous", "monochasial", "monochromatic", "monochrome", "monochromic", "monocled", "monoclinal", "monoclinic", "monoclinous", "monoclonal", "monocoque", "monocotyledonous", "monocular", "monocultural", "monocyclic", "monodic", "monodical", "monodramatic", "monoecious", "monogamic", "monogamous", "monogenetic", "monogenic", "monogenistic", "monogenous", "monogrammatic", "monographic", "monographical", "monogynous", "monohydric", "monolatrous", "monolingual", "monolithic", "monologic", "monological", "monomaniacal", "monomeric", "monometallic", "monomial", "monomolecular", "monomorphic", "mononuclear", "monopetalous", "monophagous", "monophonic", "monophthongal", "monophyletic", "monopodial", "monopolistic", "monopteral", "monosepalous", "monostichous", "monostrophic", "monosyllabic", "monosymmetric", "monotheism", "monotheistic", "monotheistical", "monotone", "monotonic", "monotonous", "monotypic", "monovalent", "monozygotic", "monsoonal", "monstrous", "montane", "monthly", "monticulate", "monticulous", "monumental", "mony", "monzonitic", "moodier", "moodiest", "moody", "moon eyed", "moon faced", "mooned", "moonish", "moonless", "moonlit", "moonshiny", "moonstruck", "moony", "moorish", "moory", "moot", "mop headed", "mopey", "mopier", "mopiest", "mopy", "moraceous", "morainal", "morainic", "moral", "moralistic", "moravian", "morbid", "morbific", "mordacious", "mordant", "more", "moreish", "moresco", "moresque", "morganatic", "moribund", "morisco", "morish", "mormon", "mornay", "morning", "moroccan", "moronic", "morose", "morphemic", "morphogenetic", "morphologic", "morphological", "morphophonemic", "morphotic", "mortal", "mortgaged", "mortiferous", "mortified", "mortifying", "mortuary", "mosaic", "moslem", "moss grown", "mossier", "mossiest", "mossy", "most", "motey", "moth eaten", "mother", "mother naked", "motherless", "motherlike", "motherly", "mothier", "mothiest", "mothy", "motile", "motional", "motionless", "motivated", "motivating", "motivational", "motive", "motiveless", "motley", "motor", "motor driven", "motorable", "motored", "motorized", "mottled", "mouldered", "mouldering", "mouldier", "mouldiest", "mouldy", "mountain", "mountainous", "mounted", "mournful", "mourning", "mousey", "mousier", "mousiest", "mousterian", "mousy", "mouth to mouth", "mouthier", "mouthiest", "mouthless", "mouthwatering", "mouthy", "movable", "moveable", "moved", "moveless", "moving", "mowburnt", "mown", "mozambican", "mozarabic", "mozart", "mozartean", "mozartian", "much", "mucic", "mucid", "muciferous", "mucilaginous", "muckier", "muckiest", "mucking", "muckle", "mucky", "mucoid", "mucopurulent", "mucous", "mucronate", "muddied", "muddier", "muddiest", "muddled", "muddleheaded", "muddy", "muffled", "muggier", "muggiest", "muggy", "muhammadan", "mulatto", "muley", "mulish", "mulley", "mullioned", "multangular", "multiarticulate", "multicapitate", "multicellular", "multicentral", "multicentric", "multicoloured", "multicostate", "multicultural", "multicuspidate", "multidentate", "multidenticulate", "multidigitate", "multidimensional", "multidirectional", "multidisciplinary", "multifaced", "multifaceted", "multifactorial", "multifarious", "multifid", "multiflorous", "multifoliate", "multiform", "multijugate", "multilateral", "multilineal", "multilinear", "multilingual", "multilobate", "multilobed", "multilobular", "multinational", "multinominal", "multinuclear", "multinucleate", "multinucleolate", "multiparous", "multipartite", "multiped", "multiphase", "multiple", "multiple choice", "multiplex", "multiplicate", "multiplicative", "multiplied", "multipolar", "multipurpose", "multiracial", "multiramified", "multiscreen", "multiseptate", "multiseriate", "multispiral", "multistorey", "multistory", "multisulcate", "multituberculate", "multitudinous", "multivalent", "multivariate", "multivocal", "multivoltine", "mum", "mumbling", "mumchance", "mundane", "municipal", "munificent", "mural", "murdered", "murderous", "muriatic", "muricate", "murine", "murk", "murky", "murmuring", "murmurous", "murrey", "murrhine", "musaceous", "muscid", "muscle bound", "muscly", "muscovite", "muscovitic", "muscular", "museful", "mushier", "mushiest", "mushy", "musical", "musicianly", "musicological", "musing", "muskier", "muskiest", "musky", "muslim", "mussier", "mussiest", "mussy", "must", "mustached", "mustachioed", "musteline", "mustier", "mustiest", "musty", "mutable", "mutagenic", "mutant", "mutational", "mutative", "mute", "muted", "muticous", "mutilated", "mutinous", "muttering", "muttony", "mutual", "mutualism", "muzzy", "myalgic", "myasthenic", "mycelial", "mycenaean", "mycologic", "mycological", "mydriatic", "myeloid", "mylohyoid", "myocardial", "myogenic", "myographic", "myoid", "myological", "myopic", "myotic", "myotonia", "myriad", "myriapod", "myriopod", "myrmecological", "myrmecophagous", "myrmecophilous", "myrtaceous", "mystagogic", "mystagogical", "mysterious", "mystic", "mystical", "mystified", "mystifying", "mythic", "mythical", "mythologic", "mythological", "mythomania", "mythomaniac", "mythopoeic", "myxomycete", "mzee", "n type", "nacred", "nacreous", "nae", "naevoid", "nagging", "naggy", "naiant", "naif", "nailless", "naissant", "naive", "naked", "namby pamby", "namby pambyish", "named", "nameless", "naming", "naphthalic", "napierian", "napiform", "napless", "napoleonic", "napped", "nappier", "nappiest", "napping", "nappy", "narcissistic", "narcoleptic", "narcotic", "narcotized", "narcotizing", "narial", "narratable", "narrative", "narrow", "narrow gauge", "narrow minded", "narrowed", "narrowing", "nary", "nasal", "nascent", "nasmyth", "nasofrontal", "nastier", "nastiest", "nasty", "natal", "natant", "natatorial", "natatory", "national", "nationalism", "nationalist", "nationalistic", "nationwide", "native", "native born", "nativism", "nativist", "nativistic", "nattier", "nattiest", "natty", "natural", "natural born", "naturalistic", "naturalized", "naturism", "naturistic", "naturopathic", "naught", "naughtier", "naughtiest", "naughty", "nauplioid", "nauseated", "nauseating", "nauseous", "nautical", "naval", "navicular", "navigable", "navigational", "nazarene", "nazi", "ne er do well", "neanderthal", "neanderthaloid", "neap", "neaped", "neapolitan", "near", "near hand", "near sighted", "nearby", "nearctic", "nearer", "nearest", "neat", "nebular", "nebule", "nebulous", "nebuly", "necessarian", "necessary", "necessitarianism", "necessitous", "necked", "necrologic", "necrological", "necromantic", "necromantical", "necrophiliac", "necrophilic", "necrophobic", "necrotic", "nectareous", "nectariferous", "nectarous", "needed", "needful", "needier", "neediest", "needless", "needy", "nefarious", "negative", "negativism", "neglected", "neglectful", "negligent", "negligible", "negotiable", "negro", "negroid", "neighbor", "neighboring", "neighborless", "neighborly", "neighbour", "neighbouring", "neighbourless", "neighbourly", "neither", "nematic", "nematocystic", "nemertean", "neo catholic", "neo darwinian", "neo gothic", "neo impressionist", "neo kantian", "neo lamarckian", "neoclassic", "neoclassical", "neoclassicist", "neogaean", "neogene", "neolithic", "neologic", "neological", "neologistic", "neologistical", "neonatal", "neophytic", "neoplastic", "neotenous", "neoteric", "neotropical", "neozoic", "nepalese", "nepali", "nepenthean", "nephological", "nephric", "nephritic", "nephrotic", "nepotic", "nepotistic", "neptunian", "neritic", "nerval", "nervate", "nerve racking", "nerve wracking", "nerveless", "nervine", "nervous", "nervy", "nescient", "nesh", "nested", "nestled", "nestlike", "nestorianism", "net", "nether", "netherlandic", "nethermost", "netherward", "nett", "netted", "nettled", "nettlelike", "nettlesome", "nettly", "neural", "neuralgic", "neurasthenic", "neuritic", "neuroanatomical", "neurobiological", "neurogenic", "neurological", "neuromuscular", "neuron", "neuronal", "neuronic", "neuropathic", "neurophysiological", "neuropsychiatric", "neuropterous", "neurosurgical", "neurotic", "neurotropic", "neurovascular", "neuter", "neutered", "neutral", "neutralism", "neutralized", "neutrophil", "never ending", "never never", "never say die", "new", "new fashioned", "new made", "new model", "new mown", "newborn", "newest", "newfangled", "newish", "newsier", "newsiest", "newsless", "newsworthy", "newsy", "next", "next door", "nibbed", "nicaean", "nice", "nicene", "nicer", "nicest", "nickel", "nickel and dime", "nickelic", "nickeliferous", "nickelous", "nicotined", "nicotinic", "niddering", "niddle noddle", "nidicolous", "nidifugous", "nietzschean", "niffy", "niftier", "niftiest", "nifty", "niger congo", "niggard", "niggardly", "niggling", "nigh", "nighted", "nightless", "nightlong", "nightly", "nightmarish", "nigrescent", "nihilism", "nihilist", "nihilistic", "nilotic", "nimble", "nimble fingered", "nimbused", "niminy piminy", "nine", "ninefold", "ninepenny", "nineteen", "nineteenth", "ninetieth", "ninety", "ninth", "niobean", "niobic", "niobous", "nipping", "nippy", "nisi", "nitid", "nitpicking", "nitric", "nitrogenous", "nitrous", "nittier", "nittiest", "nitty", "nitwitted", "nival", "niveous", "no account", "no fault", "no nonsense", "noachian", "nobbier", "nobbiest", "nobby", "nobiliary", "noble", "noble minded", "nobler", "noblest", "nocent", "nociceptive", "noctilucent", "noctuid", "nocturnal", "nocuous", "nodal", "nodding", "nodical", "nodose", "nodous", "nodular", "nodulated", "noduled", "nodulose", "noetic", "noiseless", "noisemaker", "noisette", "noisier", "noisiest", "noisome", "noisy", "nomadic", "nomenclatorial", "nomenclatural", "nominal", "nominalistic", "nominate", "nominated", "nominative", "nomistic", "nomographic", "nomographical", "nomological", "nomothetic", "non", "non christian", "non euclidean", "non iron", "non profit making", "non u", "nonabrasive", "nonabsorbent", "nonacademic", "nonaddictive", "nonadministrative", "nonaged", "nonagenarian", "nonagon", "nonary", "nonautomatic", "nonbelligerent", "nonbiological", "nonbreakable", "nonchalant", "nonchromosomal", "nonclassified", "nonclinical", "noncognizable", "noncommercial", "nonconclusive", "nonconcurrent", "nonconforming", "nonconformist", "noncontagious", "noncontroversial", "nondescript", "nondestructive", "nonexecutive", "nonflowering", "nonfunctional", "nonharmonic", "nonillionth", "nonionic", "nonjudgmental", "nonlethal", "nonnegotiable", "nonoperational", "nonpareil", "nonparous", "nonpathogenic", "nonpersistent", "nonplused", "nonplussed", "nonpoisonous", "nonpolar", "nonprofit", "nonracial", "nonscientific", "nonsense", "nonsensical", "nonstandard", "nonstick", "nontechnical", "nontoxic", "nonuple", "nonverbal", "nonvintage", "nonvolatile", "nordic", "normal", "norman", "norman french", "normanesque", "normative", "norse", "north", "northerly", "northern", "northernmost", "northmost", "northumbrian", "northward", "norwegian", "nosed", "noseless", "nosey", "nosier", "nosiest", "nosographic", "nosological", "nostalgic", "nostologic", "nosy", "notable", "notal", "notarial", "notational", "notched", "notchy", "noted", "noteless", "noteworthy", "noticeable", "noticed", "notifiable", "notional", "notochordal", "notogaea", "notorious", "notoungulate", "notour", "noumenal", "noumenon", "nourishable", "nourished", "nourishing", "novel", "novelettish", "novelistic", "novercal", "novice", "nowed", "noxious", "nth", "nubblier", "nubbliest", "nubbly", "nubby", "nubian", "nubile", "nubilous", "nuclear", "nucleate", "nucleolar", "nucleolated", "nucleophilic", "nucleoplasm", "nude", "nudicaul", "nudist", "nugatory", "nuggety", "null", "nullifidian", "nullified", "nulliparous", "numb", "numberless", "numbing", "numerable", "numeral", "numerary", "numerate", "numeric", "numerical", "numerous", "numidia", "numidian", "numinous", "nummary", "nummular", "nummulitic", "nuncupative", "nuptial", "nursed", "nurturable", "nurtural", "nutant", "nutational", "nutlike", "nutmegged", "nutrient", "nutrimental", "nutritional", "nutritious", "nutritive", "nuts", "nutty", "nyctaginaceous", "nyctitropic", "nymphaeaceous", "nymphal", "nymphalid", "nymphean", "nymphomania", "nymphomaniac", "nymphomaniacal", "nystagmic", "oafish", "oak", "oaken", "oared", "oarless", "oaten", "obbligato", "obconic", "obconical", "obcordate", "obdurate", "obedient", "obeisant", "obeliscal", "obese", "objectionable", "objective", "objectivist", "objectivistic", "objurgative", "objurgatory", "oblanceolate", "oblate", "oblatory", "obligate", "obligated", "obligational", "obligato", "obligatory", "obliged", "obliging", "oblique", "obliterate", "obliterated", "obliterating", "obliterative", "oblivious", "oblong", "obnoxious", "obovate", "obovoid", "obreptitious", "obscene", "obscurant", "obscurantist", "obscure", "obsequent", "obsequious", "observable", "observant", "observational", "observed", "observing", "obsessed", "obsessional", "obsessive", "obsessive compulsive", "obsolescent", "obsolete", "obstetric", "obstetrical", "obstinate", "obstreperous", "obstructed", "obstructive", "obstruent", "obtainable", "obtect", "obtrusive", "obtundent", "obtuse", "obtuse angled", "obtuse angular", "obumbrate", "obverse", "obviating", "obvious", "obvolute", "occasional", "occidental", "occidentalist", "occipital", "occluded", "occludent", "occlusal", "occlusive", "occult", "occultism", "occultist", "occupational", "occupative", "occupied", "occurrent", "ocean going", "oceanian", "oceanic", "oceanographic", "oceanographical", "ocellar", "ocellated", "oceloid", "ocher", "ocherous", "ochery", "ochlocratic", "ochlocratical", "ochre", "ochreous", "ocker", "ocreate", "octachordal", "octadic", "octagonal", "octahedral", "octal", "octamerous", "octangular", "octantal", "octastyle", "octaval", "octave", "octennial", "octennially", "octillionth", "octogenarian", "octonary", "octopod", "octosyllabic", "octuple", "octupled", "octuplet", "octupling", "ocular", "oculomotor", "odd", "odd job", "oddball", "odds on", "odious", "odontalgic", "odontoid", "odontological", "odontophorous", "odoriferous", "odorless", "odorous", "odourless", "oecumenic", "oecumenical", "oedipean", "oesophageal", "oestrous", "off", "off broadway", "off centre", "off key", "off line", "off off broadway", "off putting", "off road", "off site", "off street", "off the cuff", "off the peg", "off the shelf", "off white", "offbeat", "offenceless", "offended", "offending", "offensive", "offerable", "offhand", "offhanded", "official", "officinal", "officious", "offish", "offscreen", "offsetting", "offshore", "offside", "often", "ogreish", "ogygian", "ohmic", "oil fired", "oiled", "oilier", "oiliest", "oily", "ok", "ok d", "okay", "oke", "okey doke", "old", "old established", "old fashioned", "old fogeyish", "old fogyish", "old maidish", "old rose", "old time", "old womanish", "old world", "olde worlde", "olden", "older", "oldest", "oldfangled", "oldish", "oleaceous", "oleaginous", "oleic", "oleophilic", "olfactive", "olfactory", "olid", "oligarchic", "oligarchical", "oligocene", "oligochaete", "oligopolistic", "oligopsonistic", "oligotrophic", "olivaceous", "olivary", "olive", "olympian", "olympic", "omental", "ominous", "omissible", "omissive", "omnibus", "omnicompetent", "omnidirectional", "omnifarious", "omnific", "omnipotent", "omnipresent", "omniscient", "omnivorous", "omophagic", "on line", "on site", "on stream", "on the spot", "onagraceous", "onanistic", "once", "oncogenic", "oncoming", "one", "one armed", "one dimensional", "one eyed", "one handed", "one horse", "one man", "one on one", "one piece", "one sided", "one time", "one to one", "one track", "one up", "one way", "oneiric", "oneirocritical", "onerous", "ongoing", "oniony", "only", "only begotten", "onomastic", "onomatopoeic", "onomatopoetic", "onshore", "onside", "onstage", "ontogenetic", "ontogenic", "ontological", "onward", "onymous", "oogamous", "oogenetic", "oolitic", "oozier", "ooziest", "oozing", "oozy", "opalescent", "opaline", "opaque", "ope", "open", "open air", "open and shut", "open chain", "open door", "open end", "open ended", "open eyed", "open faced", "open field", "open handed", "open hearted", "open hearth", "open letter", "open minded", "open mouthed", "open plan", "open shop", "opencast", "opened", "opening", "operable", "operant", "operatic", "operating", "operational", "operative", "operculate", "operculated", "operose", "ophidian", "ophiolatrous", "ophiologic", "ophiological", "ophitic", "ophthalmic", "ophthalmological", "ophthalmoscopic", "ophthalmoscopical", "opiate", "opinionated", "opinionative", "opisthognathous", "oppidan", "opponent", "opportune", "opportunist", "opportunistic", "opposable", "opposed", "opposing", "opposite", "oppositional", "oppositive", "oppressed", "oppressive", "opprobrious", "oppugnant", "opsonic", "optative", "optic", "optical", "optimal", "optimistic", "optimum", "optional", "optometrical", "opulent", "opuscule", "oracular", "oral", "orange", "oratorical", "orbicular", "orbiculate", "orbital", "orcadian", "orchestral", "orchestrated", "orchidaceous", "orchitic", "ordainable", "ordained", "ordered", "orderly", "ordinaire", "ordinal", "ordinary", "ordinate", "ordovician", "ordurous", "orectic", "organic", "organicism", "organisable", "organisational", "organismal", "organismic", "organizable", "organizational", "organized", "organoleptic", "organometallic", "orgasmic", "orgastic", "orgiastic", "orgulous", "orient", "oriental", "orientated", "orientating", "oriented", "orienting", "origenistic", "original", "originative", "orinasal", "ornamental", "ornamented", "ornate", "ornery", "ornithic", "ornithischian", "ornithoid", "ornithological", "orobanchaceous", "orogenetic", "orogenic", "orological", "orotund", "orphan", "orphaned", "orphean", "orphic", "ortho", "orthochromatic", "orthodontic", "orthodontics", "orthodox", "orthogenetic", "orthogenic", "orthognathous", "orthogonal", "orthographic", "orthopaedic", "orthopedic", "orthopedical", "orthophosphoric", "orthophyric", "orthopterous", "orthoptic", "orthorhombic", "orthoscopic", "orthostichous", "orthotone", "orthotropic", "orthotropous", "oscan", "oscillating", "oscillatory", "oscine", "oscitant", "osculant", "oscular", "osculatory", "osiered", "osmanli", "osmic", "osmious", "osmotic", "osmous", "osseous", "ossianic", "ossicular", "ossie", "ossiferous", "ossified", "osteal", "ostensible", "ostensive", "ostentatious", "osteoarthritis", "osteogenetic", "osteoid", "osteological", "osteopathic", "osteophytic", "osteoplastic", "ostracodan", "ostracodous", "ostrogothic", "other", "othergates", "otherguess", "otherwise", "otherworldly", "otic", "otiose", "ottoman", "out", "out and out", "out of bounds", "out of date", "out of door", "out of fashion", "out of place", "out of pocket", "out of print", "out of stock", "out of the way", "out of town", "out of work", "outback", "outboard", "outbound", "outbred", "outcast", "outcaste", "outclassed", "outdated", "outdone", "outdoor", "outdoorsy", "outer", "outermost", "outfitted", "outflowing", "outgoing", "outland", "outlandish", "outlaw", "outlawed", "outlined", "outlying", "outmoded", "outmost", "outraged", "outrageous", "outremer", "outright", "outside", "outsize", "outsized", "outspoken", "outspread", "outstanding", "outstretched", "outward", "outward bound", "outworn", "oval", "ovarian", "ovate", "oven ready", "over", "over the counter", "overabundant", "overactive", "overall", "overambitious", "overarm", "overawed", "overbearing", "overblown", "overbold", "overburdened", "overburdensome", "overbusy", "overcareful", "overcast", "overcautious", "overcome", "overcorrect", "overcredulous", "overcritical", "overcurious", "overdelicate", "overdone", "overdressed", "overdue", "overeager", "overearnest", "overemotional", "overenthusiastic", "overexcitable", "overexcited", "overfar", "overfed", "overflowing", "overfond", "overforward", "overfraught", "overfree", "overfull", "overgenerous", "overglaze", "overgreat", "overgreedy", "overground", "overgrown", "overhand", "overhanded", "overhanging", "overhappy", "overhasty", "overhead", "overheated", "overindulgent", "overjoyed", "overkind", "overladen", "overland", "overlapping", "overlarge", "overloaded", "overlong", "overlooked", "overlooking", "overloud", "overlying", "overmerry", "overmodest", "overmuch", "overneat", "overnice", "overnight", "overoptimistic", "overpowered", "overpowering", "overpriced", "overproof", "overprotective", "overproud", "overrank", "overrash", "overreaching", "overriding", "overripe", "overrun", "overscrupulous", "oversea", "overseas", "oversensitive", "oversewn", "oversexed", "overshot", "oversimplified", "oversize", "oversized", "overspreading", "overstated", "overstayed", "overstrong", "overstrung", "overstuffed", "oversubscribed", "oversubtle", "oversuspicious", "overt", "overtedious", "overthrown", "overturned", "overviolent", "overweary", "overweening", "overweight", "overwhelmed", "overwhelming", "overwrought", "overzealous", "ovidian", "oviferous", "oviform", "ovine", "oviparous", "ovoid", "ovoviviparous", "ovular", "owed", "owing", "owlish", "owlishly", "owllike", "own", "owned", "owner occupied", "ownerless", "ox eyed", "oxalic", "oxblood", "oxidised", "oxidizable", "oxidized", "oxonian", "oxygenated", "oxytocic", "ozoniferous", "p type", "paced", "pachydermal", "pachydermatous", "pachydermic", "pachydermous", "pacific", "pacifical", "pacifist", "pacifying", "packaged", "packed", "pactional", "padded", "paddle wheel", "paduan", "paederastic", "paediatric", "paedophilia", "pagan", "paginal", "pagurian", "paid", "paid up", "pained", "painful", "painless", "painstaking", "paintable", "painted", "painterly", "paired", "pakistan", "palaeanthropic", "palaearctic", "palaeobotanic", "palaeobotanical", "palaeocene", "palaeoecological", "palaeogene", "palaeolithic", "palaeontological", "palaeozoic", "palaeozoological", "palaeozoology", "palaestral", "palaestric", "palatable", "palatal", "palatalized", "palatial", "palatine", "pale", "paleaceous", "paled", "paleolithic", "paler", "palest", "palimpsest", "palindromic", "palindromical", "paling", "palish", "palladian", "palladic", "palladous", "pallial", "palliative", "pallid", "pally", "palmaceous", "palmar", "palmary", "palmate", "palmatifid", "palmier", "palmiest", "palmitic", "palmy", "palpable", "palpate", "palpebral", "palpitant", "palpitating", "palsied", "palsy walsy", "paltrier", "paltriest", "paltry", "paludal", "paly", "palynological", "pampean", "pampered", "pampering", "pan", "pan african", "pan american", "pan arab", "pan arabic", "pan german", "pan slav", "pan slavic", "panamanian", "panathenaic", "panchromatic", "pancratic", "pancreatic", "pandanaceous", "pandean", "pandemic", "pandemoniacal", "pandurate", "panduriform", "paned", "panegyric", "panegyrical", "paneled", "pangenetic", "panhellenic", "panic stricken", "panic struck", "panicked", "panicky", "panicled", "paniculate", "panjabi", "panniered", "panoplied", "panoptic", "panoptical", "panoramic", "panpsychistic", "pansophic", "pansophical", "pantagruelian", "pantaletted", "pantalooned", "pantheist", "pantheistic", "pantheistical", "panting", "pantographic", "pantographical", "pantomimic", "pantomimical", "panzer", "papal", "papaveraceous", "paper", "paperback", "paperbacked", "paperbound", "papery", "paphian", "papilionaceous", "papillar", "papillary", "papillate", "papillomatous", "papillose", "papist", "papistic", "papistical", "pappose", "pappy", "papuan", "papular", "papulose", "papyraceous", "par", "parabolic", "parabolical", "paraboloid", "paraboloidal", "paracelsian", "paradigmatic", "paradigmatical", "paradisaic", "paradisaical", "paradisal", "paradisiac", "paradisiacal", "paradisial", "paradoxal", "paradoxical", "paraffinic", "paraffinoid", "paragenetic", "paraglossate", "paragogic", "paragogical", "paragraphic", "parallactic", "parallel", "parallelism", "paralytic", "paralyzed", "paramagnetic", "paramedic", "paramedical", "parametric", "paramilitary", "paramorphic", "paramount", "paranoiac", "paranoid", "paranormal", "parapeted", "paraphrastic", "paraplegic", "parapodial", "parapsychological", "parasitic", "parasitical", "parasiticide", "parasympathetic", "parasynthetic", "paratactic", "paratactical", "parathyroid", "paratyphoid", "paravail", "parcel gilt", "parched", "pardine", "pardonable", "pardonless", "parecious", "parenchymatous", "parental", "parented", "parenteral", "parenthetic", "parenthetical", "parentless", "paretic", "parheliacal", "parian", "parietal", "paripinnate", "paris", "parisyllabic", "parked", "parking", "parklike", "parky", "parlando", "parliamentarian", "parliamentary", "parlous", "parnassian", "parnell", "parochial", "parodic", "parodistic", "paroicous", "parol", "paronomastic", "paronymous", "parotic", "parotid", "paroxysmal", "paroxytone", "parricidal", "parsee", "parsimonious", "parsonic", "parsonical", "parsonish", "part", "part time", "parted", "parthenocarpic", "parthenogenetic", "parthia", "partial", "partible", "participant", "participating", "participatory", "participial", "particular", "particularised", "particularism", "particularistic", "particularized", "particulate", "parting", "partisan", "partite", "partitioned", "partitive", "partizan", "parturient", "party", "party spirited", "parvenu", "parvenue", "paschal", "pashto", "pass", "passable", "passant", "passed", "passerine", "passible", "passing", "passional", "passionate", "passionless", "passive", "passless", "past", "pasteboard", "pasted", "pastel", "pasteurian", "pasteurized", "pastier", "pasties", "pastiest", "pastoral", "pastural", "pastureless", "pasty", "pasty faced", "pat", "patchable", "patched", "patchier", "patchiest", "patchy", "patellar", "patellate", "patelliform", "patent", "patentable", "patented", "paternal", "paternalism", "paternalistic", "pathetic", "pathic", "pathless", "pathogenetic", "pathogenic", "pathognomonic", "pathologic", "pathological", "patient", "patriarchal", "patrician", "patricidal", "patrilineage", "patrilineal", "patrilinear", "patrilocal", "patrimonial", "patriotic", "patristic", "patristical", "patronal", "patronising", "patronized", "patronizing", "patronless", "patronymic", "patterned", "patulous", "pauline", "paulinistic", "paunchy", "pausal", "pauseful", "pauseless", "paved", "pavid", "pavonine", "pawky", "payable", "paying", "payoff", "pea green", "peaceable", "peaceful", "peaceless", "peacemaking", "peach blow", "peachier", "peachiest", "peachy", "peacock blue", "peacockish", "peacocky", "peak", "peaked", "peaky", "peanut", "pear shaped", "pearl", "pearl grey", "pearlier", "pearliest", "pearlized", "pearly", "peart", "peatier", "peatiest", "peaty", "pebble dashed", "pebbly", "peccable", "peccant", "peckish", "pecksniffian", "pectic", "pectinaceous", "pectinate", "pectoral", "peculiar", "pecuniary", "pedagogic", "pedagogical", "pedagoguish", "pedal", "pedantic", "pedantical", "pedate", "pedatifid", "peddling", "pederastic", "pedestrian", "pediatric", "pedicellate", "pedicular", "pediculate", "pediculous", "pedigree", "pedigreed", "pedimental", "pedimented", "pedological", "pedunculate", "peekaboo", "peeled", "peelie wally", "peeling", "peerless", "peeved", "peevish", "peewee", "peg top", "pegmatitic", "pejorative", "pekingese", "pelagian", "pelagic", "pelagius", "pelasgian", "pelitic", "pell mell", "pellicular", "pellucid", "peloponnesian", "peloric", "peltate", "pelting", "pelvic", "pemphigous", "penal", "penalized", "penannular", "pencilled", "pendant", "pendent", "pending", "pendulous", "penetrable", "penetralian", "penetrant", "penetrating", "penetrative", "penial", "penicillate", "penile", "peninsular", "penitent", "penitential", "penitentiary", "pennate", "penned", "pennied", "penniless", "pennoned", "pennsylvanian", "penny", "penny a line", "penny pincher", "penny pinching", "penny plain", "penny wise", "penological", "pensile", "pensionable", "pensionary", "pensive", "pent", "pent up", "pentadactyl", "pentagonal", "pentamerous", "pentameter", "pentangular", "pentastyle", "pentasyllabic", "pentatomic", "pentatonic", "pentavalent", "pentecostal", "pentelic", "pentelican", "pentomic", "penultimate", "penurious", "peopled", "pepper and salt", "peppercorny", "peppery", "peppier", "peppiest", "peppy", "peptic", "peptizing", "perambulating", "perambulatory", "perceivable", "perceived", "percent", "percental", "perceptible", "perceptional", "perceptive", "perceptual", "perched", "perchloric", "percipient", "percoid", "percurrent", "percussional", "percussive", "percutaneous", "perdu", "perdurable", "peregrinate", "peregrine", "peremptory", "perennial", "perfect", "perfected", "perfectible", "perfectionist", "perfectionistic", "perfective", "perfervid", "perfidious", "perfoliate", "perforable", "perforate", "perforated", "perforative", "performable", "performative", "performing", "perfumed", "perfumeless", "perfumy", "perfunctory", "perfusive", "pericardiac", "pericardial", "pericarpial", "pericentral", "pericentric", "perichaetial", "periclean", "periclinal", "pericranial", "peridermal", "peridial", "peridotic", "perigeal", "perigean", "periglacial", "perigonial", "perigordian", "perigynous", "perilous", "perimorphic", "perimorphous", "perinatal", "perineal", "perinephric", "period", "periodic", "periodical", "periodontal", "periosteal", "periostitic", "periotic", "peripatetic", "peripheral", "periphrastic", "peripteral", "periscopic", "perishable", "perished", "perishing", "perispomenon", "perissodactyl", "perissodactylous", "peristaltic", "peristomal", "peristomatic", "peristomial", "peristylar", "peritectic", "perithecial", "peritoneal", "peritonitic", "periwigged", "perjured", "perk", "perked", "perkier", "perkiest", "perky", "perlitic", "permanent", "permanganic", "permeable", "permeated", "permeating", "permeative", "permed", "permian", "permissible", "permissive", "permitted", "permutable", "pernicious", "pernickety", "peroneal", "peronist", "perpendicular", "perpetuable", "perpetual", "perplexed", "perplexing", "perse", "persecuted", "perseverant", "persevering", "persian", "persistent", "persisting", "persnickety", "person to person", "personable", "personal", "personalism", "personalistic", "personalized", "personate", "personative", "persons", "perspectival", "perspectivist", "perspicacious", "perspicuous", "perspirable", "perspiratory", "perspiring", "persuadable", "persuasible", "persuasive", "pert", "perthitic", "pertinacious", "pertinent", "perturbable", "perturbational", "perturbed", "perturbing", "pertussal", "peruked", "peruvian", "pervading", "pervasive", "perverse", "perversive", "perverted", "pervertible", "pervious", "peskier", "peskiest", "pesky", "pessimal", "pessimistic", "pessimum", "pestalozzian", "pestered", "pestering", "pesticidal", "pestiferous", "pestilent", "pestilential", "pet", "petaliferous", "petaline", "petalled", "petaloid", "petalous", "petechial", "petiolar", "petiolate", "petit", "petite", "petitionary", "petitory", "petrarchan", "petrified", "petrifying", "petrine", "petrochemical", "petrogenetic", "petrographic", "petrographical", "petroleous", "petrolic", "petrological", "petrosal", "petrous", "petticoated", "pettier", "pettiest", "pettifogging", "pettish", "petty", "petulant", "pewter", "phagedaenic", "phagedenic", "phagocytic", "phalangeal", "phalansterian", "phallic", "phanerogamic", "phanerogamous", "phanerozoic", "phantasmagorial", "phantasmagoric", "phantasmagorical", "phantasmal", "phantom", "pharaonic", "pharisaic", "pharisaical", "pharmaceutic", "pharmaceutical", "pharmacognostic", "pharmacological", "pharmacopoeial", "pharyngeal", "phaseless", "phasic", "phasmid", "phatic", "phellogenetic", "phenetic", "phenolic", "phenological", "phenomenal", "phenomenalism", "phenomenalistic", "phenomenize", "phenotypic", "phenotypical", "philanthropic", "philatelic", "philharmonic", "philhellene", "philhellenic", "philippian", "philippine", "philistine", "philologic", "philological", "philoprogenitive", "philosophic", "philosophical", "phlegethontic", "phlegmatic", "phlegmatical", "phlegmier", "phlegmiest", "phlegmy", "phlogistic", "phobic", "phocine", "phoebean", "phoenician", "phonal", "phonatory", "phonematic", "phonemic", "phonetic", "phoney", "phonic", "phonier", "phonies", "phoniest", "phonographic", "phonolitic", "phonological", "phonotypic", "phonotypical", "phony", "phosphorescent", "phosphoric", "phosphorous", "photic", "photoactive", "photochemical", "photochemistry", "photoconductive", "photoelastic", "photoelectric", "photogenic", "photographic", "photolithographic", "photoluminescent", "photolytic", "photomechanical", "photometric", "photoperiodic", "photophilous", "photopic", "photosensitive", "photospheric", "photostatic", "photosynthetic", "phototactic", "phototropic", "phototypic", "photovoltaic", "phrasal", "phraseologic", "phraseological", "phreatic", "phreatophytic", "phrenetic", "phrenic", "phrenitic", "phrenologic", "phrenological", "phrygian", "phthalic", "phthisic", "phthisical", "phycological", "phylacteric", "phylacterical", "phyletic", "phylloid", "phyllopod", "phyllotactic", "phyllotactical", "phylogenetic", "physic", "physical", "physicalism", "physicochemical", "physiocratic", "physiognomic", "physiologic", "physiological", "physiotherapeutic", "phytogenic", "phytogeographic", "phytographic", "phytological", "phytophagic", "phytophagous", "phytotoxic", "piacular", "pianissimo", "pianistic", "piano", "piazzian", "picaresque", "picayune", "piceous", "picked", "pickier", "pickiest", "pickled", "pickwickian", "picky", "picric", "pictographic", "pictorial", "pictural", "pictured", "picturesque", "piddling", "pie eyed", "piebald", "piecemeal", "pied", "pierceable", "pierced", "piercing", "pierian", "pieridine", "pietistic", "pietistical", "piezoelectric", "piffling", "pigeon breasted", "pigeon hearted", "pigeon toed", "piggie", "piggish", "piggy", "pigheaded", "pileate", "pileated", "piled", "pileous", "pilgarlicky", "piliferous", "piliform", "pillaged", "pillar box", "pillared", "pillowy", "pilose", "pilot", "pilotless", "pilous", "pimpled", "pimply", "pinacoidal", "pinchbeck", "pinched", "pinchpenny", "pindaric", "pineal", "piney", "pinguid", "pinier", "piniest", "pinioned", "pink", "pinkish", "pinnate", "pinnated", "pinnatifid", "pinnatipartite", "pinnatiped", "pinnatisect", "pinned", "pinniped", "pinnulate", "pinpoint", "pint sized", "pinto", "piny", "pious", "pipeless", "pipelike", "piperaceous", "pipier", "pipiest", "piping", "pipy", "piquant", "pique", "piratic", "piratical", "piscatorial", "piscatory", "piscicultural", "pisciculture", "pisciform", "piscine", "piscivorous", "pisiform", "pisolitic", "pissed", "pistachio", "pistillate", "pitch black", "pitch dark", "pitched", "pitchier", "pitchiest", "pitchy", "piteous", "pithecoid", "pithy", "pitiable", "pitiful", "pitiless", "pitted", "pituitary", "pitying", "pivotal", "pixilated", "pizzicato", "placable", "placating", "placatory", "placed", "placeless", "placental", "placid", "placoid", "plagal", "plagiarized", "plagued", "plaguey", "plaguy", "plaided", "plain", "plain spoken", "plaintive", "planar", "plane", "planet struck", "planetary", "planetoidal", "plangent", "planimetric", "planimetrical", "planktonic", "planless", "planned", "plano concave", "plano convex", "plantable", "plantar", "planted", "plantigrade", "plantless", "planular", "plashier", "plashiest", "plashy", "plasmodial", "plastered", "plastery", "plastic", "plastics", "plated", "platelike", "platier", "platiest", "platinic", "platiniferous", "platinoid", "platinous", "platitudinous", "platonic", "platy", "platycephalic", "platyrrhine", "platyrrhinian", "plausible", "plausive", "play", "playable", "played", "played out", "playful", "playing", "pleadable", "pleading", "pleasant", "pleased", "pleasing", "pleasurable", "pleasureful", "pleasureless", "pleated", "plebby", "plebeian", "plectognathic", "plectognathous", "pledgeable", "pledged", "plein air", "pleiocene", "pleiomerous", "pleistocene", "plenary", "plenipotent", "plenipotentiary", "plenteous", "plentiful", "plenty", "pleochroic", "pleomorphic", "pleonastic", "plethoric", "pleural", "pleuritic", "pleurodont", "plexiform", "pleximetric", "pliable", "pliant", "plical", "plicate", "pliocene", "plodding", "plosive", "plotful", "plotless", "plotted", "ploughed", "plucked", "pluckier", "pluckiest", "plucky", "plug ugly", "plum", "plumaged", "plumate", "plumb", "plumbaginaceous", "plumbaginous", "plumbed", "plumbeous", "plumbic", "plumbiferous", "plumbless", "plumbous", "plumed", "plumier", "plumiest", "plummier", "plummiest", "plummy", "plumose", "plump", "plumping", "plumular", "plumulose", "plumy", "plundered", "plundering", "pluperfect", "plural", "pluralism", "pluralistic", "pluriliteral", "plus", "plush", "plusher", "plushest", "plushy", "pluteal", "plutocratic", "plutonian", "plutonic", "pluvial", "pluviometric", "pluviometrical", "pluvious", "pneumatic", "pneumatological", "pneumogastric", "pneumonic", "po faced", "poaceous", "poached", "poachier", "poachiest", "poachy", "pocked", "pockier", "pockiest", "pockmarked", "pocky", "poco", "pococurante", "poculiform", "podgier", "podgiest", "podgy", "podsolic", "poetic", "poetical", "poignant", "poikilitic", "poikilothermic", "point blank", "point device", "point of sale", "pointed", "pointillism", "pointing", "pointless", "poised", "poison pen", "poisonous", "poker faced", "pokey", "pokier", "pokies", "pokiest", "poky", "polar", "polaroid", "polemic", "polemical", "polemoniaceous", "polish", "polished", "polite", "politic", "political", "polled", "pollened", "pollinic", "polliniferous", "polluted", "polo neck", "poltroon", "polyacid", "polyadelphous", "polyandrous", "polyatomic", "polybasic", "polycarpic", "polycarpous", "polychaete", "polychromatic", "polychrome", "polychromic", "polyconic", "polycrystalline", "polycyclic", "polydactyl", "polygalaceous", "polygamous", "polygenist", "polyglot", "polygonaceous", "polygonal", "polygraphic", "polygynous", "polyhedral", "polyhistoric", "polyhydric", "polyhydroxy", "polymeric", "polymerous", "polymorphic", "polymorphous", "polynesian", "polynomial", "polyonymous", "polypetalous", "polyphase", "polyphonic", "polyphyletic", "polyphyodont", "polyploid", "polypod", "polypoid", "polypous", "polysepalous", "polysyllabic", "polysynthetic", "polytechnic", "polytheistic", "polytheistical", "polytonal", "polytypic", "polyunsaturated", "polyvalent", "polyzoan", "polyzoarial", "polyzoic", "pomaceous", "pomaded", "pomeranian", "pomiferous", "pomological", "pompeian", "pompous", "ponceau", "ponderable", "pondering", "ponderous", "pongid", "pontific", "pontifical", "poor", "poor spirited", "poorest", "poorly", "pop", "pop up", "popish", "popliteal", "poppied", "pops", "popular", "populated", "populist", "populous", "porcine", "poriferous", "porkier", "porkiest", "porky", "pornographic", "poromeric", "porose", "porous", "porphyritic", "porrect", "port", "portable", "portative", "portentous", "porticoed", "portionless", "portlier", "portliest", "portly", "portrayed", "portuguese", "posh", "positional", "positioning", "positive", "positivism", "positivist", "positivistic", "posological", "possessed", "possessive", "possessory", "possible", "post", "post bellum", "post free", "post mortem", "post obit", "post tertiary", "postal", "postconsonantal", "posterior", "postern", "posthumous", "postiche", "posticous", "postmenopausal", "postmenstrual", "postoral", "postponed", "postpositional", "postpositive", "posttraumatic", "postulational", "postural", "postvocalic", "pot bound", "pot valiant", "potable", "potamic", "potassic", "potatory", "potent", "potential", "potentiometric", "potted", "pottier", "pottiest", "potty", "pouched", "pound foolish", "pourable", "pouring", "poverty stricken", "powder puff", "powdered", "powdery", "power", "power assisted", "powered", "powerful", "powerless", "pozzolanic", "practic", "practicable", "practical", "practiced", "practicing", "practised", "praedial", "praetorial", "praetorian", "pragmatic", "pragmatical", "pragmatism", "pragmatist", "praiseful", "praiseworthy", "praising", "prandial", "prankish", "prattling", "praxitelean", "prayerful", "prayerless", "pre", "pre columbian", "pre eminent", "pre emptive", "pre exilian", "pre existent", "pre raphaelite", "preachier", "preachiest", "preachy", "prearranged", "prebendal", "preborn", "precancerous", "precarious", "precast", "precative", "precatory", "precautional", "precautionary", "precautious", "precedent", "precedented", "precedential", "preceding", "preceptive", "precessional", "precious", "precipiced", "precipitant", "precipitate", "precipitating", "precipitative", "precipitous", "precise", "precisive", "preclassical", "preclinical", "preclusive", "precocial", "precocious", "precognitive", "precognizant", "preconceived", "preconcerted", "preconditioned", "preconscious", "preconsonantal", "precooked", "precooled", "precordial", "precritical", "precursory", "predaceous", "predacious", "predatory", "predestinarian", "predestinate", "predestined", "predeterminate", "predetermined", "predial", "predicable", "predicant", "predicate", "predicative", "predicatory", "predictable", "predicted", "predictive", "predigested", "predisposed", "predispositional", "predominant", "predominate", "prefab", "prefabricated", "prefatorial", "prefatory", "prefectorial", "prefectural", "preferable", "preferential", "preferred", "prefigurative", "prefrontal", "preggers", "pregnable", "pregnant", "prehensible", "prehensile", "prehistoric", "prehistorical", "prehuman", "prejudiced", "prejudicial", "prelatic", "preliminary", "prelingual", "preliterate", "preludial", "preludious", "premandibular", "premarital", "premature", "premaxillary", "premed", "premedical", "premeditated", "premeditative", "premenstrual", "premier", "premiere", "premillennial", "premium", "premolar", "premonitory", "premorse", "premosaic", "prenasal", "prenatal", "prenominate", "prenuptial", "preoccupied", "preocular", "preoral", "prepacked", "prepaid", "preparative", "preparatory", "prepared", "prepense", "preponderant", "preponderating", "prepositional", "prepositive", "prepossessing", "preposterous", "prepotent", "prepubertal", "prepubescent", "prepunctual", "preputial", "prerecorded", "prerequisite", "prerogative", "presageful", "presbyopic", "presbyteral", "presbyterial", "presbyterian", "preschool", "prescient", "prescientific", "prescribed", "prescript", "prescriptible", "prescription", "prescriptive", "present", "present day", "presentable", "presentational", "presentationism", "presentationist", "presentative", "presented", "presentient", "presentimental", "presentive", "preservable", "preservative", "preserved", "preserving", "preset", "presidential", "presidial", "presidiary", "pressed", "pressing", "pressor", "pressurized", "prest", "prestigious", "prestissimo", "presto", "presumable", "presumed", "presumptive", "presumptuous", "pretenceless", "pretend", "pretended", "pretentious", "preterhuman", "preterist", "preterit", "preterite", "preteritive", "preternatural", "prettier", "prettiest", "pretty", "pretty pretty", "prettyish", "prevailing", "prevalent", "prevenient", "preventable", "preventative", "preventive", "preverbal", "previous", "previsional", "prewar", "priapic", "priced", "priceless", "pricey", "pricklier", "prickliest", "prickling", "prickly", "pricy", "prideful", "prideless", "priest ridden", "priestlier", "priestliest", "priestly", "priggish", "prim", "prima", "primaeval", "primal", "primary", "primatal", "primate", "primatial", "prime", "primed", "primeval", "primigenial", "primitive", "primitivism", "primogenial", "primogenital", "primogenitary", "primordial", "primrose", "primsie", "primulaceous", "princelier", "princeliest", "princely", "principal", "principled", "print", "printable", "printed", "printless", "prior", "prismatic", "prissy", "pristine", "private", "privative", "privies", "privileged", "privy", "prize", "pro", "pro am", "probabilism", "probabilistic", "probable", "probationary", "probative", "probeable", "probing", "problematic", "problematical", "proboscidean", "procaryotic", "procedural", "proceleusmatic", "procephalic", "processed", "processional", "proclaimed", "proclitic", "proconsular", "procrastinative", "procrastinatory", "procreative", "procrustean", "procryptic", "proctodaeal", "procumbent", "procurable", "procuratorial", "prodigal", "prodigious", "prodromal", "produced", "productile", "productional", "productive", "proemial", "profanatory", "profane", "profaned", "professed", "professional", "professionalism", "professorial", "proficient", "profitable", "profitless", "profligate", "profluent", "profound", "profuse", "progenitive", "progenitorial", "prognathic", "prognathous", "prognostic", "prognosticative", "programmable", "programmatic", "progressional", "progressive", "prohibited", "prohibitionary", "prohibitive", "prohibitory", "projected", "projectile", "projecting", "projectional", "projective", "prokaryotic", "prolate", "proleptic", "proleptical", "proletarian", "proletary", "proliferative", "proliferous", "prolific", "prolificacy", "prolix", "prolonged", "prolusory", "prominent", "promiscuous", "promised", "promiseful", "promising", "promissory", "promotional", "promotive", "prompt", "promulgated", "prone", "pronephric", "pronged", "pronominal", "pronounceable", "pronounced", "proof", "proofed", "propaedeutic", "propagable", "propaganda", "propagandist", "propagandistic", "propagative", "proparoxytone", "propellant", "propellent", "propelling", "proper", "propertied", "prophetic", "prophetical", "prophylactic", "propitiable", "propitiative", "propitiatory", "propitious", "proportionable", "proportional", "proportionate", "proportioned", "proportionless", "proposable", "proposed", "propositional", "propraetorial", "propraetorian", "proprietary", "proprietorial", "proprioceptive", "propulsive", "propylic", "prosaic", "proscribed", "prosecutable", "prosenchymatous", "prosimian", "prosodic", "prosodical", "prospective", "prospering", "prosperous", "prostate", "prostatic", "prostomial", "prostrate", "prostyle", "prosy", "protandrous", "protanomalous", "protanopic", "protean", "protected", "protecting", "protective", "protectoral", "protectorless", "proteiform", "proteinaceous", "proteinic", "proteinous", "proteolytic", "proterandrous", "proterogynous", "proterozoic", "protestant", "protesting", "prothallium", "prothalloid", "prothetic", "prothoracic", "protistic", "proto", "protochordate", "protogynous", "protohuman", "protolithic", "protomorphic", "protonemal", "protonematal", "protonic", "protopathic", "protoplasmal", "protoplasmatic", "protoplasmic", "prototherian", "prototrophic", "prototypal", "prototypical", "protozoal", "protozoan", "protozoic", "protozoological", "protracted", "protractible", "protractile", "protractive", "protrudable", "protrudent", "protruding", "protrusible", "protrusile", "protrusive", "protuberant", "proud", "proustian", "provable", "proved", "proven", "proverbial", "providable", "provident", "providential", "provincial", "provisional", "provisionary", "provisory", "provocative", "provoked", "provoking", "prowessed", "proximal", "proximate", "proximo", "proxy", "prudent", "prudential", "prudish", "pruinose", "pruned", "prunted", "prurient", "pruriginous", "pruritic", "prussian", "prying", "psammophytic", "psephological", "pseud", "pseudo", "pseudo gothic", "pseudocarp", "pseudocubic", "pseudohexagonal", "pseudonymous", "psilanthropic", "psilotic", "psittacine", "psoriatic", "psychedelic", "psychiatric", "psychiatrical", "psychic", "psychical", "psycho", "psychoactive", "psychoanalytic", "psychoanalytical", "psychobiological", "psychochemical", "psychodelic", "psychogenetic", "psychogenic", "psychographic", "psychokinetic", "psycholinguistic", "psychological", "psychologist", "psychometric", "psychometrical", "psychomotor", "psychoneurotic", "psychopathic", "psychosexual", "psychosocial", "psychosomatic", "psychotic", "psychotomimetic", "psychotropic", "psychrometric", "psychrometrical", "psychrophilic", "pterygial", "pterygoid", "pterylographic", "pterylographical", "ptolemaic", "puberulent", "pubescent", "pubic", "public", "public spirited", "publicized", "publishable", "published", "pucka", "puckered", "puckery", "puckish", "puddly", "pudendal", "pudgy", "puerile", "puerperal", "puff", "puffed", "puffier", "puffiest", "puffing", "puffy", "pug nose", "pug nosed", "puggish", "puggy", "pugilistic", "pugilistical", "pugnacious", "puir", "puisne", "puissant", "pukka", "pulchritudinous", "puling", "pull in", "pulled", "pulmonary", "pulmonate", "pulmonic", "pulpier", "pulpiest", "pulpy", "pulsatile", "pulsating", "pulsatory", "pulsed", "pulseless", "pulsing", "pulverable", "pulverisable", "pulverizable", "pulverized", "pulverulent", "pulvinate", "pump action", "punch drunk", "punchy", "punctate", "punctilious", "punctual", "punctuative", "punctured", "pungent", "punic", "punier", "puniest", "punishable", "punished", "punishing", "punitive", "punitory", "punjabi", "punk", "punkah", "puny", "pupal", "pupillary", "pupiparous", "puppyish", "puranic", "purblind", "purchasable", "pure", "purer", "purest", "purgative", "purgatorial", "purging", "purified", "purifying", "puristic", "puristical", "puritan", "puritanic", "puritanical", "purloined", "purple", "purplish", "purported", "purpose built", "purposeful", "purposeless", "purposive", "purpure", "purpuric", "purse proud", "pursier", "pursiest", "pursuable", "pursuant", "pursued", "pursuing", "pursy", "purulent", "puseyism", "puseyistical", "push button", "pushed", "pushful", "pushier", "pushiest", "pushing", "pushto", "pushy", "pusillanimous", "pussy", "pustulant", "pustular", "pustulate", "pustulous", "put on", "put up", "putative", "putrefacient", "putrefactive", "putrefiable", "putrefied", "putrescent", "putrescible", "putrid", "puzzled", "puzzling", "pyaemic", "pycnostyle", "pyelitic", "pyelonephritic", "pygmoid", "pyknic", "pyloric", "pyogenic", "pyoid", "pyorrhoeal", "pyorrhoeic", "pyralid", "pyramidal", "pyramidical", "pyrenean", "pyretic", "pyrheliometric", "pyriform", "pyritic", "pyrochemical", "pyroclastic", "pyrogallic", "pyrogenic", "pyrogenous", "pyroligneous", "pyrolytic", "pyromaniacal", "pyromantic", "pyrophoric", "pyrotechnic", "pyrotechnical", "pyrotechnics", "pyroxenic", "pyrrhic", "pyrrho", "pythagorean", "pythian", "pythogenic", "quack", "quadragenarian", "quadrangular", "quadrantal", "quadraphonic", "quadrate", "quadratic", "quadrennial", "quadric", "quadricentennial", "quadricipital", "quadrifid", "quadrilateral", "quadrilingual", "quadripartite", "quadrivalent", "quadrivial", "quadrophonics", "quadrumanous", "quadruped", "quadrupedal", "quadruple", "quadruplex", "quadruplicate", "quadruplication", "quaggier", "quaggiest", "quaggy", "quaint", "quaker", "quakier", "quakiest", "quaking", "quaky", "qualifiable", "qualificatory", "qualified", "qualifying", "qualitative", "quality", "qualmish", "quantal", "quantifiable", "quantitative", "quaquaversal", "quarantined", "quare", "quarrelsome", "quarriable", "quartan", "quarter", "quarter bound", "quarter hour", "quartered", "quarterly", "quartic", "quartile", "quartziferous", "quartzitic", "quasi", "quaternary", "quaternate", "quavering", "quavery", "queasier", "queasiest", "queasy", "quechuan", "queen anne", "queen size", "queenless", "queenlier", "queenliest", "queenly", "queer", "quelled", "quenchable", "quenched", "quenchless", "querulous", "questionable", "questioning", "questionless", "quibbling", "quick", "quick change", "quick fire", "quick frozen", "quick sighted", "quick tempered", "quick witted", "quickset", "quicksilver", "quicksilvery", "quiescent", "quiet", "quietening", "quietism", "quietist", "quietistic", "quilted", "quinary", "quinate", "quincentenary", "quincentennial", "quincuncial", "quinoid", "quinoidal", "quinonoid", "quinquagenarian", "quinquefoliate", "quinquennial", "quinquevalent", "quinsied", "quintan", "quintessential", "quintic", "quintillionth", "quintuple", "quintuplicate", "quippish", "quirky", "quit", "quits", "quivering", "quivery", "quixotic", "quizzical", "quodlibetic", "quodlibetical", "quondam", "quotable", "quotidian", "rabbinic", "rabbinical", "rabbinism", "rabble rousing", "rabelaisian", "rabic", "rabid", "racemed", "racemic", "racemose", "rachidial", "rachidian", "rachitic", "racial", "racialism", "racialistic", "racier", "raciest", "racing", "racist", "rack and pinion", "rackety", "racking", "racy", "raddled", "radial", "radial ply", "radiant", "radiate", "radiating", "radiative", "radical", "radicant", "radiculose", "radio", "radio controlled", "radioactive", "radiogenic", "radiographic", "radiological", "radiometric", "radiopaque", "radiophonic", "radiosensitive", "radiotelegraphy", "radiotoxic", "radular", "raffish", "raftered", "ragged", "raggedy", "raggle taggle", "raging", "raglan", "raiding", "rainbowy", "rainier", "rainiest", "raining", "rainless", "rainproof", "rainy", "raisable", "raiseable", "raised", "raising", "raked", "rakehell", "rakish", "rallentando", "ralline", "rallying", "ramal", "rambling", "rambunctious", "ramiform", "rammish", "ramose", "rampageous", "rampant", "ramshackle", "ramstam", "ramulose", "rancid", "rancorous", "randie", "random", "randomized", "randy", "ranged", "rangier", "rangiest", "ranging", "rangy", "rank", "ranked", "rankine", "ranking", "ransacked", "ransomed", "ranunculaceous", "rapacious", "raped", "rapid", "rapid fire", "raploch", "rapt", "raptorial", "raptureless", "rapturous", "rare", "rarefactive", "rarefiable", "rarefied", "rarer", "rarest", "raring", "rascal", "rascally", "rash", "rasorial", "raspier", "raspiest", "rasping", "raspy", "rastafarian", "ratable", "rateable", "rath", "rathe", "ratified", "ratiocinative", "rational", "rationalist", "rationalistic", "rationed", "ratite", "ratlike", "rattier", "rattiest", "rattish", "rattled", "rattling", "rattly", "ratty", "raucous", "raunchy", "ravaged", "ravaging", "ravening", "ravenous", "raving", "ravishing", "raw", "rawboned", "rawish", "rayless", "razed", "razor sharp", "re entrant", "reachable", "reactionary", "reactionist", "reactive", "read", "readable", "readier", "readiest", "ready", "ready made", "ready to wear", "ready witted", "readying", "real", "real time", "realisable", "realistic", "realizable", "realized", "realizing", "reanimated", "rear", "rearing", "rearmost", "rearward", "reasonable", "reasoned", "reasoning", "reasonless", "reassured", "reassuring", "rebarbative", "rebel", "rebelling", "rebellious", "reboant", "reborn", "rebuilt", "rebuked", "rebuttable", "recalcitrant", "recallable", "recapitulative", "recapitulatory", "receding", "receivable", "received", "recent", "receptive", "recessed", "recessional", "recessive", "rechargeable", "recidivism", "recipient", "reciprocal", "reciprocating", "reciprocative", "recitative", "reckless", "reclaimable", "reclaimed", "reclinable", "reclinate", "reclining", "recluse", "reclusive", "recognisable", "recognizable", "recognized", "recoilless", "recollected", "recollective", "recommendable", "recommendatory", "recommended", "reconcilable", "reconciled", "reconciliatory", "reconciling", "recondite", "reconditioned", "reconstituted", "reconstructed", "reconstructional", "reconstructionary", "reconstructive", "record", "record breaking", "recordable", "recorded", "recoverable", "recovered", "recovering", "recreant", "recreational", "recreative", "recriminative", "recriminatory", "recrudescent", "rectal", "rectangular", "rectifiable", "rectified", "rectilineal", "rectilinear", "rectricial", "recumbent", "recuperative", "recurrent", "recursive", "recurved", "recusant", "recyclable", "red", "red blooded", "red faced", "red figure", "red headed", "red hot", "red letter", "red light", "reddened", "redder", "reddest", "reddish", "redeemable", "redeemed", "redeeming", "redemptive", "redemptory", "redirect", "redistributed", "redivivus", "redolent", "redoubled", "redoubtable", "redoubted", "reduced", "reducible", "reductionist", "reductive", "redundant", "reduplicate", "reduplicative", "reduviid", "reedier", "reediest", "reedy", "reeking", "reeky", "reel to reel", "refer", "referable", "referenced", "referential", "refillable", "refined", "reflected", "reflecting", "reflective", "reflex", "reflexive", "refluent", "reformable", "reformative", "reformatory", "reformed", "reformism", "reformist", "refractable", "refractive", "refractory", "refrangible", "refreshed", "refreshful", "refreshing", "refrigerant", "refrigerated", "refrigerating", "refrigerative", "refrigeratory", "refringent", "refulgent", "refundable", "refusable", "refutable", "regainable", "regal", "regardable", "regardant", "regardful", "regarding", "regardless", "regenerable", "regenerate", "regenerating", "regenerative", "regent", "regicidal", "regimental", "regimented", "regional", "regionalism", "regionalist", "registered", "registrable", "regnal", "regnant", "regressing", "regressive", "regretful", "regrettable", "regular", "regularized", "regulated", "regulating", "regulation", "regulative", "regulatory", "reguline", "regurgitate", "rehabilitated", "rehabilitative", "reheated", "reigning", "reincarnate", "reincarnation", "reincorporate", "reinforced", "reinvigorated", "reissuable", "reiterant", "reiterative", "rejectable", "rejected", "rejective", "rejoiceful", "rejoicing", "related", "relational", "relationless", "relative", "relativism", "relativistic", "relaxant", "relaxative", "relaxed", "relaxer", "relaxing", "releasable", "released", "releasing", "relegable", "relentless", "relevant", "reliable", "reliant", "reliefless", "relievable", "relieved", "religionism", "religiose", "religious", "relinquished", "relishable", "relivable", "relocated", "relucent", "reluctant", "remaining", "remanent", "remarkable", "rembrandtesque", "rembrandtish", "remediable", "remedial", "remediless", "remembered", "remigial", "remindful", "reminiscent", "remiss", "remissible", "remittent", "remnant", "remonstrant", "remonstrative", "remontant", "remorseful", "remorseless", "remote", "remote controlled", "remoter", "remotest", "removable", "removed", "remunerable", "remunerated", "remunerative", "renal", "renascent", "renderable", "rending", "renegade", "renegotiable", "renewable", "renewed", "renewing", "reniform", "renitent", "renounceable", "renovated", "renowned", "rent", "rent free", "rentable", "rental", "renunciative", "renunciatory", "reorganized", "reorient", "repairable", "repaired", "repand", "reparable", "reparative", "repayable", "repealable", "repeatable", "repeated", "repellant", "repellent", "repent", "repentant", "repetitious", "repetitive", "repining", "replaceable", "replete", "replicate", "reply paid", "reportable", "reported", "reportorial", "reposeful", "reprehensible", "representable", "representational", "representationalism", "representative", "represented", "repressed", "repressible", "repressing", "repressive", "reprimanded", "reproachable", "reproachful", "reproachless", "reprobate", "reprobative", "reprocessed", "reproducible", "reproductive", "reproved", "reproving", "reptant", "reptile", "reptilian", "reptiloid", "republican", "repudiated", "repudiative", "repugnant", "repulsive", "repurchase", "reputable", "reputed", "requested", "required", "requisite", "requisitionary", "requitable", "requited", "resalable", "rescissory", "rescued", "resealable", "resemblant", "resentful", "reservable", "reserve", "reserved", "resettled", "resident", "residential", "residentiary", "residual", "residuary", "resigned", "resilient", "resinated", "resiniferous", "resinoid", "resinous", "resistant", "resistible", "resistive", "resistless", "resoluble", "resolute", "resolutive", "resolvable", "resolved", "resolvent", "resonant", "resonating", "resorbent", "resorptive", "resounding", "resourceful", "resourceless", "respectable", "respected", "respectful", "respective", "respirable", "respiratory", "resplendent", "respondent", "responseless", "responsible", "responsive", "rested", "restful", "restiform", "resting", "restitutive", "restitutory", "restive", "restless", "restorable", "restorationism", "restorative", "restored", "restrainable", "restrained", "restricted", "restricting", "restriction", "restrictive", "resultant", "resulting", "resumable", "resumptive", "resupinate", "resupine", "resurgent", "resurrectional", "resurrectionary", "resurrective", "resuscitable", "resuscitated", "resuscitative", "retail", "retained", "retaining", "retaliative", "retaliatory", "retardant", "retardative", "retarded", "retentive", "retial", "retiary", "reticent", "reticular", "reticulate", "reticulated", "retiform", "retinal", "retinoscopy", "retired", "retirement", "retiring", "retractable", "retracted", "retractile", "retral", "retreating", "retributive", "retributory", "retrievable", "retro operative", "retroactive", "retrobulbar", "retrocessive", "retroflex", "retroflexed", "retrograde", "retrogressive", "retrolental", "retrorse", "retrospective", "returnable", "returning", "retuse", "reunionistic", "reusable", "revanchism", "revealable", "revealed", "revealing", "revelational", "revelative", "revelatory", "revengeful", "revengeless", "revenued", "reverable", "reverberant", "reverberating", "reverberative", "reverberatory", "revered", "reverenced", "reverend", "reverent", "reverential", "reverse", "reversed", "reversible", "reversionary", "revertible", "reverting", "revertive", "review", "reviewable", "reviled", "revised", "revisional", "revisionary", "revisionism", "revisionist", "revisory", "revitalized", "revitalizing", "revivable", "revivalist", "revivalistic", "revived", "reviving", "reviviscent", "revocable", "revokable", "revolting", "revolute", "revolutionary", "revolutionist", "revolved", "revolving", "revulsionary", "revulsive", "rewardable", "rewardful", "rewarding", "rhaetian", "rhaetic", "rhamnaceous", "rhapsodic", "rhematic", "rhemish", "rhenish", "rheologic", "rheological", "rheotropic", "rhetorical", "rheumatic", "rheumatoid", "rheumy", "rhinal", "rhinencephalic", "rhinocerotic", "rhinological", "rhinoplastic", "rhizocarpous", "rhizogenic", "rhizomatous", "rhizomorphous", "rhizophagous", "rhizopod", "rhodesian", "rhodian", "rhodic", "rhombic", "rhombohedral", "rhomboid", "rhomboidal", "rhonchial", "rhotic", "rhymed", "rhymeless", "rhyming", "rhythmic", "rhythmical", "riant", "ribald", "ribbed", "ribbony", "ribless", "riblike", "rich", "rickettsial", "rickety", "rid", "ridable", "ridden", "riddled", "rident", "riderless", "ridged", "ridgier", "ridgiest", "ridgy", "ridiculous", "riding", "riemannian", "rife", "rifled", "riftless", "rigged", "right", "right about", "right angled", "right down", "right hand", "right handed", "right minded", "right wing", "rightable", "righteous", "rightful", "rightish", "rightist", "rights", "rightward", "rigid", "rigorous", "riled", "rimed", "riming", "rimless", "rimmed", "rimose", "rimy", "rindless", "rindy", "ring necked", "ring tailed", "ringed", "ringent", "ringing", "ringless", "ringleted", "riotous", "rip roaring", "riparian", "ripe", "ripened", "ripped", "ripping", "ripple", "rippled", "ripply", "ripuarian", "risen", "risible", "rising", "riskier", "riskiest", "risky", "ritardando", "riteless", "ritenuto", "ritual", "ritualistic", "ritzier", "ritziest", "ritzy", "rival", "riven", "riverine", "riverless", "riverlike", "riveting", "road", "road hoggish", "roadless", "roadworthy", "roan", "roaring", "roast", "roasted", "roasting", "robed", "roborant", "robust", "robustious", "rock bottom", "rock bound", "rock ribbed", "rock steady", "rockier", "rockiest", "rocky", "rococo", "rodded", "rodless", "rodlike", "rogatory", "roguish", "roiled", "roilier", "roiliest", "roiling", "roily", "roll on", "roll top", "rollable", "rolled", "rollicking", "rolling", "rollneck", "roly poly", "romaic", "roman", "romance", "romanesque", "romanian", "romanic", "romansh", "romantic", "romanticist", "romish", "rommany", "rompish", "roofed", "roofless", "rooky", "roomier", "roomiest", "roomy", "root", "rooted", "rootless", "rootlike", "ropable", "ropeable", "ropey", "ropier", "ropiest", "ropy", "rosaceous", "roscian", "rose", "rose cheeked", "rose cut", "rose red", "roseate", "roseless", "roselike", "rosicrucian", "rosiny", "rostral", "rostrate", "rosy", "rosy cheeked", "rotarian", "rotary", "rotatable", "rotate", "rotated", "rotating", "rotational", "rotative", "rotatory", "rotiferal", "rotiferous", "rotted", "rotten", "rotting", "rotund", "rouged", "rough", "rough and ready", "rough and tumble", "rough dry", "rough spoken", "roughcast", "roughened", "roughish", "round", "round arm", "round backed", "round eyed", "round faced", "round shouldered", "round table", "round the clock", "round trip", "roundabout", "rounded", "rounding", "roundish", "roupy", "rousing", "routed", "routine", "rove over", "roving", "rowable", "rowdy", "rowdyish", "royal", "royalist", "rubber", "rubberised", "rubberized", "rubbery", "rubbishy", "rubblier", "rubbliest", "rubbly", "rubescent", "rubiaceous", "rubicund", "rubied", "rubify", "rubiginous", "rubious", "rubric", "rubricated", "ruby", "ruby red", "rudderless", "ruddier", "ruddiest", "ruddy", "rude", "ruderal", "rudimentary", "rudish", "rueful", "rufescent", "ruffed", "ruffianly", "ruffled", "rufous", "rugged", "rugose", "rugulose", "ruinable", "ruined", "ruinous", "ruled", "ruling", "ruly", "rum", "rumanian", "rumbling", "rumbly", "rumbustious", "ruminant", "ruminative", "rummy", "rumpled", "rumpless", "run down", "run in", "run of the mill", "run on", "runaway", "runcinate", "runed", "runic", "runnier", "runniest", "running", "runny", "runtier", "runtiest", "runtish", "runty", "rupicolous", "ruptured", "rural", "rush", "rushed", "rushier", "rushiest", "rushing", "rushy", "russ", "russet", "russety", "russian", "russky", "rust", "rusted", "rustic", "rustier", "rustiest", "rustless", "rustling", "rustred", "rusty", "rutaceous", "ruthenian", "ruthenic", "ruthenious", "ruthful", "ruthless", "rutilant", "rutilated", "rutted", "ruttier", "ruttiest", "ruttish", "rutty", "sabaean", "sabbatarian", "sabbathless", "sabbatical", "sabean", "sabellian", "sabine", "sable", "sabre toothed", "sabulous", "saccharic", "sacchariferous", "saccharine", "saccharoid", "saccular", "sacculate", "sacerdotal", "sachemic", "sacked", "saclike", "sacral", "sacramental", "sacred", "sacrificial", "sacrilegious", "sacroiliac", "sacrosanct", "sad", "saddening", "saddle backed", "saddle sore", "saddled", "sadducean", "sadist", "sadistic", "safe", "safe deposit", "safety deposit", "sagacious", "sage", "sage green", "sagging", "sagittal", "sagittarius", "sagittate", "sagittiform", "saharan", "said", "sailing", "sailorly", "saint simonianism", "sainted", "saintlier", "saintliest", "saintlike", "saintly", "saiva", "salable", "salacious", "salamandrine", "salaried", "saleable", "sales", "salian", "salic", "salicaceous", "salicylic", "salient", "salientian", "saliferous", "saline", "salique", "salishan", "salivary", "sallow", "sallowish", "sallowy", "salmonoid", "salopian", "salpiform", "salpingian", "salpingitic", "salt", "saltando", "saltant", "saltato", "saltatorial", "saltatory", "salted", "saltier", "saltigrade", "saltish", "saltless", "salty", "salubrious", "salutary", "salutational", "salutatory", "salvable", "salvageable", "salvationist", "salverform", "salving", "samariform", "samaritan", "same", "samian", "samnite", "samoa", "samoan", "samoyedic", "sanative", "sanatory", "sanctified", "sanctimonious", "sanctioned", "sanctioning", "sand blind", "sandalled", "sanded", "sandier", "sandiest", "sandy", "sane", "saner", "sanest", "sanguiferous", "sanguinary", "sanguine", "sanguineous", "sanguinolent", "sanguivorous", "sanious", "sanitarian", "sanitary", "sanitized", "sanskritic", "santalaceous", "sap", "sapheaded", "saphenous", "sapid", "sapient", "sapiential", "sapindaceous", "sapless", "saponaceous", "saponified", "saporous", "sapotaceous", "sapphic", "sapphire", "sapphirine", "sappier", "sappiest", "sappy", "saprogenic", "sapropelic", "saprophagous", "saprophytic", "saprozoic", "saracen", "sarcastic", "sarcoid", "sarcophagous", "sarcous", "sardinian", "sardonic", "sarky", "sarmatia", "sarmatian", "sarmentose", "saronic", "sarraceniaceous", "sartorial", "sassier", "sassy", "satanic", "sated", "satellite", "satem", "satiable", "satiate", "satiated", "satin", "satiny", "satiric", "satirical", "satisfactory", "satisfiable", "satisfied", "satisfying", "saturable", "saturant", "saturate", "saturated", "saturnalian", "saturnian", "saturniid", "saturnine", "satyric", "satyrical", "saucer eyed", "saucier", "sauciest", "saucy", "saurian", "saurischian", "saussuritic", "saut", "savable", "savage", "saved", "saving", "savings", "savorous", "savory", "savourless", "savoury", "savoyard", "savvy", "saw set", "saw toothed", "sawdusty", "sawed off", "sawn off", "saxatile", "saxicoline", "saxicolous", "saxifragaceous", "saxon", "saxonian", "saxonic", "sayable", "scabbardless", "scabbier", "scabbiest", "scabby", "scabious", "scabrous", "scalable", "scalar", "scalariform", "scald", "scaldic", "scalding", "scaled", "scaleless", "scalelike", "scalene", "scalier", "scaliest", "scalled", "scalloped", "scalpless", "scaly", "scampering", "scampish", "scandalmongering", "scandalous", "scandent", "scandinavian", "scannable", "scansorial", "scant", "scantier", "scantiest", "scanty", "scaphocephalic", "scaphocephalous", "scaphoid", "scapular", "scapulary", "scarabaeid", "scarabaeoid", "scarce", "scarcer", "scarcest", "scared", "scarey", "scarious", "scarless", "scarlet", "scarred", "scary", "scatheless", "scathing", "scatological", "scatophagous", "scatterable", "scattered", "scattering", "scattershot", "scatty", "scavenging", "scenic", "scenographic", "scenographical", "scented", "scentless", "sceptered", "scepterless", "sceptic", "sceptical", "sceptral", "sceptred", "scheduled", "schematic", "scheming", "scherzando", "schismatic", "schismatical", "schistose", "schizo", "schizocarpic", "schizocarpous", "schizogenetic", "schizogenous", "schizogonous", "schizoid", "schizomycetic", "schizomycetous", "schizophrenic", "schizophyceous", "schizophytic", "schizothymic", "schlock", "schmaltzy", "schmalzier", "schmalziest", "schmalzy", "scholarly", "scholastic", "scholiastic", "school age", "schoolboyish", "schooled", "schoolgirlish", "schorlaceous", "sciaenid", "sciaenoid", "sciatic", "sciential", "scientific", "scientistic", "scillonian", "scincoid", "scintillant", "scintillating", "scirrhoid", "scirrhous", "scissile", "sciurine", "sciuroid", "sclerenchymatous", "sclerodermatous", "scleroid", "sclerometric", "sclerophyllous", "sclerosal", "sclerosed", "sclerotial", "sclerotic", "sclerotized", "sclerous", "scolding", "scolopendrine", "scombrid", "scombroid", "scopate", "scorbutic", "scorched", "scorching", "score", "scoriaceous", "scorned", "scornful", "scorpaenid", "scorpaenoid", "scorpioid", "scorpionic", "scot free", "scotch", "scotch irish", "scotism", "scotistic", "scotomatous", "scotopic", "scots", "scottish", "scoundrelly", "scoured", "scowling", "scraggly", "scraggy", "scrambled", "scrannel", "scrap", "scraped", "scrappier", "scrappiest", "scrappy", "scratch", "scratched", "scratchier", "scratchiest", "scratching", "scratchless", "scratchy", "scrawled", "scrawlier", "scrawliest", "scrawly", "scrawnier", "scrawniest", "scrawny", "screaky", "screaming", "screeching", "screechy", "screw pine", "screw topped", "screwed", "screwy", "scriabin", "scribal", "scrimp", "scrimpier", "scrimpiest", "scrimpy", "scripted", "scriptural", "scrobiculate", "scroddled", "scrofulous", "scroggy", "scrophulariaceous", "scrotal", "scrub", "scrubbed", "scrubbier", "scrubbiest", "scrubby", "scruffier", "scruffiest", "scruffy", "scrumptious", "scrupulous", "scrutable", "sculpted", "sculptural", "sculptured", "sculpturesque", "scummier", "scummiest", "scummy", "scungy", "scurfy", "scurrile", "scurrilous", "scurry", "scurrying", "scurvy", "scutate", "scutellate", "scutiform", "scyphiform", "scyphozoan", "scythian", "sea", "sea foam", "sea green", "sea heath", "sea island", "sea level", "seaboard", "seaborne", "seafaring", "sealed", "sealed beam", "seamanlike", "seamanly", "seamed", "seamier", "seamiest", "seamless", "seamy", "sear", "searchable", "searching", "seared", "seasick", "seaside", "seasonable", "seasonal", "seasoned", "seasonless", "seated", "seatless", "seaward", "seaworthy", "sebaceous", "sebacic", "sebiferous", "seborrheic", "sec", "secernent", "secessional", "secessionist", "secluded", "seclusive", "second", "second best", "second class", "second rate", "second sighted", "second string", "secondary", "secret", "secretarial", "secretive", "secretory", "sectarian", "sectile", "sectional", "sectioned", "sectoral", "sectorial", "secular", "secularistic", "secularized", "secund", "securable", "secure", "secured", "sedate", "sedated", "sedative", "sedentary", "sedged", "sedgy", "sedimentary", "sedimentological", "sedition", "seditious", "seduced", "seductive", "sedulous", "see through", "seeable", "seeded", "seedier", "seediest", "seedless", "seedy", "seeing", "seeking", "seely", "seeming", "seemlier", "seemliest", "seemly", "seen", "seeping", "seething", "segmental", "segmentary", "segmentate", "segmented", "segreant", "segregable", "segregated", "seigneurial", "seismal", "seismic", "seismograph", "seismographic", "seismographical", "seismologic", "seismological", "seismoscopic", "seizable", "seized", "sejant", "selachian", "select", "selected", "selective", "selenic", "selenious", "selenitic", "selenodont", "selenographic", "selenographical", "selenous", "seleucid", "self", "self absorbed", "self accusatory", "self acting", "self addressed", "self adjusting", "self affrighted", "self aggrandizing", "self annealing", "self appointed", "self approving", "self asserting", "self assertive", "self assumed", "self assured", "self aware", "self balanced", "self begotten", "self blinded", "self born", "self catering", "self centred", "self cleaning", "self closing", "self cocking", "self collected", "self coloured", "self conceited", "self condemned", "self condemning", "self confessed", "self confident", "self conscious", "self consistent", "self constituted", "self consuming", "self contained", "self content", "self contradiction", "self contradictory", "self convicted", "self correcting", "self created", "self critical", "self deceived", "self defeating", "self denying", "self dependent", "self depraved", "self deprecating", "self destroying", "self destructive", "self determined", "self determining", "self developing", "self devoted", "self directed", "self directing", "self disciplined", "self disliked", "self displeased", "self distrust", "self drawing", "self drive", "self driven", "self educated", "self effacing", "self elected", "self employed", "self evident", "self evolved", "self excited", "self executing", "self exiled", "self existent", "self explanatory", "self figured", "self flattering", "self focusing", "self forgetful", "self fulfilling", "self giving", "self glazed", "self governing", "self harming", "self healing", "self important", "self imposed", "self induced", "self indulgent", "self inflicted", "self interested", "self invited", "self involved", "self justifying", "self killed", "self lighting", "self limited", "self liquidating", "self loading", "self locking", "self loving", "self luminous", "self made", "self moving", "self neglect", "self neglecting", "self occupied", "self opened", "self opening", "self operating", "self opinionated", "self ordained", "self perpetuating", "self pitying", "self planted", "self pleasing", "self possessed", "self proclaimed", "self produced", "self professed", "self propagating", "self propelled", "self propelling", "self raised", "self raising", "self recording", "self regarding", "self registering", "self regulating", "self reliant", "self repeating", "self respectful", "self respecting", "self revealing", "self reverent", "self righteous", "self rigorous", "self rising", "self sacrificing", "self satisfied", "self satisfying", "self schooled", "self sealing", "self seeded", "self seeking", "self service", "self serving", "self slain", "self sown", "self styled", "self subdued", "self sufficient", "self sufficing", "self supporting", "self surviving", "self sustained", "self sustaining", "self tapping", "self taught", "self tempted", "self tormenting", "self trained", "self willed", "self winding", "selfish", "selfishness", "selfless", "selfsame", "seljuk", "sellable", "semantic", "sematic", "semblable", "semeiotic", "semestral", "semestrial", "semi", "semi independent", "semiaquatic", "semiarid", "semibold", "semicircular", "semicomatose", "semiconducting", "semiconscious", "semicrystalline", "semifinished", "semifluid", "semiglobular", "semiliterate", "semilucent", "seminal", "seminarial", "seminary", "seminiferous", "semiotic", "semioviparous", "semipalmate", "semiparasitic", "semipermeable", "semipostal", "semiprofessional", "semisolid", "semitic", "semitonic", "semitransparent", "semitropical", "sempiternal", "semplice", "senary", "senatorial", "senecan", "senescent", "senile", "senior", "sensate", "sensational", "sensationalistic", "sensationist", "sensed", "senseless", "sensible", "sensitive", "sensitized", "sensitizing", "sensorial", "sensory", "sensual", "sensualistic", "sensuous", "sent", "sentential", "sententious", "sentient", "sentimental", "sepaloid", "separable", "separate", "separated", "separatist", "separative", "separatory", "sephardic", "sepia", "septal", "septarian", "septate", "septenary", "septennial", "septentrional", "septic", "septicemic", "septicidal", "septifragal", "septilateral", "septimal", "septuagenarian", "septuagenary", "septuagintal", "septuple", "sepulchral", "sequacious", "sequent", "sequential", "sequestered", "sequined", "seral", "seraphic", "seraphical", "serb", "serbian", "serbo croatian", "serbonian", "sere", "serene", "serfish", "serflike", "serial", "seriate", "sericeous", "sericitic", "sericultural", "seriocomic", "seriocomical", "serious", "serological", "serotinal", "serotine", "serous", "serpentiform", "serpentine", "serpiginous", "serranid", "serrate", "serrated", "serried", "serrulate", "servantless", "servian", "serviceable", "serviced", "servile", "servo", "servomechanical", "sesamoid", "sesquicentennial", "sesquipedalian", "sessile", "sessional", "set", "set aside", "set in", "set up", "setaceous", "setiform", "setigerous", "setose", "setting", "settleable", "settled", "setulose", "seven", "sevenfold", "seventeen", "seventeenth", "seventh", "seventieth", "seventy", "seventy eight", "severable", "several", "severe", "severed", "severer", "severest", "sewed", "sewn", "sex limited", "sex linked", "sex starved", "sexagenarian", "sexagenary", "sexagesimal", "sexcentenary", "sexed", "sexennial", "sexier", "sexiest", "sexism", "sexist", "sexivalent", "sexless", "sexological", "sexpartite", "sextan", "sextuple", "sexual", "sexy", "sforzando", "shabbier", "shabbiest", "shabby", "shabby genteel", "shackled", "shaded", "shadeless", "shadowed", "shadowing", "shadowless", "shadowy", "shady", "shaftless", "shagged", "shaggier", "shaggiest", "shaggy", "shakable", "shakeable", "shaken", "shakespearean", "shakier", "shakiest", "shaking", "shaky", "shallow", "shalwar", "sham", "shamanic", "shamanist", "shamanistic", "shamed", "shamefaced", "shameful", "shameless", "shang", "shapable", "shapeable", "shaped", "shapeless", "shapelier", "shapeliest", "shapely", "shaping", "shared", "sharing", "sharp", "sharp cut", "sharp edged", "sharp eyed", "sharp nosed", "sharp set", "sharp sighted", "sharp tongued", "sharp witted", "sharpened", "shattered", "shattering", "shaved", "shaven", "shavian", "shawlless", "sheared", "sheathed", "sheathy", "shed", "sheen", "sheenier", "sheeniest", "sheepish", "sheer", "shelfy", "shell", "shell less", "shell like", "shelled", "shellier", "shelliest", "shellproof", "shellshocked", "shelly", "sheltered", "shelterless", "shelvy", "sheraton", "shiah", "shickered", "shield shaped", "shielded", "shielding", "shieldless", "shieldlike", "shier", "shiest", "shiftier", "shiftiest", "shifting", "shiftless", "shifty", "shiite", "shill", "shillyshally", "shimmering", "shimmery", "shingly", "shinier", "shiniest", "shining", "shinto", "shintoist", "shiny", "ship rigged", "shipboard", "shipless", "shipshape", "shipwrecked", "shirtless", "shirty", "shivaistic", "shivering", "shivery", "shoal", "shoaly", "shock", "shock headed", "shockable", "shocked", "shocking", "shod", "shoddy", "shoed", "shoeless", "shogunal", "shopworn", "shore", "shoreless", "shoreward", "shorn", "short", "short dated", "short handed", "short lived", "short range", "short sighted", "short spoken", "short staffed", "short tempered", "short term", "short winded", "shortcut", "shortened", "shortest", "shorthand", "shortish", "shorty", "shot", "shotgun", "shotten", "shouldered", "shouted", "shouting", "showerless", "showery", "showier", "showiest", "showy", "shredded", "shredless", "shrewd", "shrewish", "shrieked", "shrieking", "shrieval", "shrill", "shrilling", "shrimpy", "shrinelike", "shrinkable", "shriveled", "shrivelled", "shroud laid", "shrouding", "shroudless", "shrubbier", "shrubbiest", "shrubby", "shrunk", "shrunken", "shuddering", "shuddery", "shuffling", "shunnable", "shunt wound", "shut", "shut in", "shuttered", "shy", "shyer", "shyest", "sialagogic", "sialoid", "siamese", "siberia", "siberian", "sibilant", "sibilation", "sibylic", "sibyllic", "sic", "sicanian", "sicilian", "sick", "sickening", "sicker", "sickish", "sickle shaped", "sicklied", "sicklier", "sickliest", "sickly", "side", "side by side", "side splitting", "side wheel", "sidearm", "sideling", "sidelong", "sidereal", "sideward", "sideways", "sienese", "sighful", "sightable", "sighted", "sightless", "sightlier", "sightliest", "sightly", "sigillary", "sigillate", "sigmate", "sigmoid", "sigmoidal", "sign", "signal", "signatory", "signed", "significant", "significative", "sikh", "silenced", "silent", "siliceous", "silicic", "silicious", "silicotic", "siliculose", "silken", "silkier", "silkiest", "silky", "silly", "siltier", "siltiest", "silty", "silurian", "silurid", "silvan", "silver", "silver tongued", "silvern", "silvery", "simaroubaceous", "simian", "similar", "simious", "simon pure", "simoniacal", "simpatico", "simple", "simple hearted", "simple minded", "simplex", "simplified", "simplistic", "simulant", "simular", "simulate", "simulated", "simulative", "simulatory", "simultaneous", "sincere", "sincipital", "sinewless", "sinewy", "sinful", "singable", "singhalese", "singing", "single", "single acting", "single breasted", "single entry", "single handed", "single hearted", "single minded", "single phase", "single spaced", "single tax", "singled", "singling", "singsong", "singular", "sinhalese", "sinister", "sinistral", "sinistrodextral", "sinistrorsal", "sinistrorse", "sinistrous", "sinkable", "sinless", "sinning", "sintered", "sinuate", "sinuous", "sinusoidal", "siphonal", "siphonic", "sipunculid", "sirenian", "sirenic", "sissified", "sissy", "sister", "sisterless", "sisterly", "sistine", "sisyphean", "sitting", "situate", "situated", "situational", "situla", "sivaistic", "siwash", "six", "sixfold", "sixpenny", "sixteen", "sixteenth", "sixth", "sixtieth", "sixty", "sizable", "size", "sizeable", "sized", "sizy", "sizzling", "skaldic", "skeigh", "skeletal", "skeptic", "skeptical", "sketchable", "sketchy", "skew", "skewbald", "skewed", "ski", "skiable", "skidproof", "skilful", "skilled", "skillful", "skim", "skimmed", "skimpy", "skin", "skin deep", "skinking", "skinless", "skinned", "skinnier", "skinniest", "skinny", "skint", "skirting", "skirtless", "skittish", "skulking", "sky blue", "sky high", "skyward", "slab sided", "slabbery", "slack", "slaggier", "slaggiest", "slaggy", "slain", "slaked", "slakeless", "slanderous", "slangier", "slangiest", "slangy", "slant", "slant eyed", "slanted", "slanting", "slantwise", "slap up", "slapped", "slapstick", "slashed", "slashing", "slate", "slate gray", "slatier", "slatiest", "slatternly", "slaty", "slaughterous", "slave", "slavic", "slavish", "slavonic", "slavophile", "sleazier", "sleaziest", "sleazy", "sledge hammer", "sleek", "sleekier", "sleekiest", "sleekit", "sleeky", "sleepier", "sleepiest", "sleeping", "sleepless", "sleepwalk", "sleepy", "sleetier", "sleetiest", "sleety", "sleeved", "sleeveless", "slender", "sliced", "slick", "slicked", "slickered", "sliding", "slier", "sliest", "slight", "slightest", "slighting", "slim", "slimed", "slimier", "slimiest", "slimline", "slimmer", "slimmest", "slimming", "slimsy", "slimy", "slinkier", "slinkiest", "slinky", "slip on", "slipover", "slippered", "slipperier", "slipperiest", "slippery", "slippier", "slippiest", "slipping", "slippy", "slipshod", "slit", "slithering", "slithery", "slobbery", "sloe eyed", "sloped", "sloping", "slopped", "sloppier", "sloppiest", "sloppy", "sloshed", "sloshier", "sloshiest", "sloshy", "slothful", "slouched", "slouchier", "slouchiest", "slouching", "slouchy", "sloughy", "slovak", "slovakian", "slovene", "slovenian", "slovenlier", "slovenliest", "slovenly", "slow", "slow motion", "slow moving", "slow witted", "slub", "slubbed", "sludgier", "sludgiest", "sludgy", "sluggard", "sluggish", "sluicing", "slum", "slumbering", "slumberless", "slumberous", "slumbery", "slumbrous", "slummier", "slummiest", "slummy", "slumped", "slung", "slurred", "slushier", "slushiest", "slushy", "sluttish", "sly", "smacking", "small", "small bore", "small minded", "small scale", "small time", "small town", "smaller", "smallest", "smallish", "smaragdine", "smarmy", "smart", "smart aleck", "smart alecky", "smarting", "smartish", "smarty", "smash and grab", "smashed", "smashing", "smeared", "smearier", "smeariest", "smeary", "smectic", "smell less", "smellier", "smelliest", "smelling", "smelly", "smileless", "smiling", "smirched", "smitten", "smoggy", "smoke dried", "smoked", "smokeless", "smokeproof", "smokier", "smokiest", "smoking", "smoky", "smooth", "smooth faced", "smooth spoken", "smooth tongued", "smoothed", "smoothened", "smorzando", "smothered", "smothering", "smothery", "smouldering", "smudged", "smudgy", "smug", "smugger", "smuggest", "smuggled", "smuttier", "smuttiest", "smutty", "snafu", "snaggy", "snail paced", "snake hipped", "snakelike", "snakier", "snakiest", "snaky", "snap brim", "snappier", "snappiest", "snapping", "snappish", "snappy", "snarled", "snarly", "snatchier", "snatchiest", "snatchy", "snazzier", "snazziest", "snazzy", "sneak", "sneakier", "sneakiest", "sneaking", "sneaky", "snecked", "sneering", "sneezy", "snide", "snider", "snidest", "sniffier", "sniffiest", "sniffling", "sniffy", "snippier", "snippiest", "snippy", "snobbish", "snobby", "snod", "snoopy", "snootier", "snootiest", "snooty", "snoozy", "snoring", "snorting", "snorty", "snotty", "snotty nosed", "snouted", "snow blind", "snow white", "snowier", "snowiest", "snowless", "snowlike", "snowy", "snub", "snub nosed", "snubbier", "snubbiest", "snubby", "snuff", "snuff brown", "snuffier", "snuffiest", "snuffling", "snuffly", "snuffy", "snug", "snugger", "snuggest", "snugging", "snuggled", "so called", "so so", "soaked", "soaking", "soapier", "soapiest", "soapless", "soapy", "soaring", "sober", "sober minded", "sobering", "sociable", "social", "socialist", "socialistic", "socialized", "societal", "socinian", "sociobiological", "socioeconomic", "sociolinguistic", "sociological", "sociologistic", "sociopathic", "socko", "socratic", "soda lime", "sodden", "sodding", "soft", "soft boiled", "soft centred", "soft cover", "soft finned", "soft footed", "soft headed", "soft hearted", "soft shell", "soft spoken", "softened", "softening", "softish", "softwood", "soggy", "soi disant", "soiled", "sola", "solanaceous", "solar", "sold", "soldierlike", "soldierly", "sole", "soled", "solemn", "solenoidal", "solfataric", "soli", "solicited", "solicitous", "solid", "solid state", "solidary", "solidifiable", "solidified", "solidungulate", "solipsism", "solitary", "solitudinous", "sollar", "solo", "solomonic", "solonian", "solstitial", "soluble", "solus", "solute", "solutional", "solutrean", "solvable", "solved", "solvent", "somali", "somalia", "somalian", "somatic", "somatogenic", "somatologic", "somatological", "somatotonic", "somber", "sombre", "sombrous", "some", "sometime", "somnambulant", "somnambulism", "somnambulistic", "somnifacient", "somniferous", "somnific", "somnolent", "sonant", "songful", "songless", "sonic", "sonless", "sonorous", "sonsie", "sonsy", "sooth", "soothfast", "soothing", "sooty", "sophistic", "sophistical", "sophisticated", "sophoclean", "sophomore", "sophomoric", "soporiferous", "soporific", "soppier", "soppiest", "sopping", "soppy", "sopranino", "soprano", "sorbed", "sorbefacient", "sorbian", "sorcerous", "sordid", "sore", "sorediate", "sorer", "sorest", "soricine", "soritic", "soritical", "sororal", "sorrel", "sorrier", "sorriest", "sorrowful", "sorrowing", "sorrowless", "sorry", "sortable", "sorted", "sostenuto", "sothic", "sotted", "sottish", "sottishness", "soughing", "sought", "sought after", "soul destroying", "soul searching", "soul stirring", "soulful", "soulless", "sound", "sounded", "sounding", "soundless", "soundproof", "soupier", "soupiest", "soupy", "sour", "soured", "sourish", "soused", "south", "southerly", "southern", "southernly", "southernmost", "southmost", "southpaw", "southward", "sovereign", "soviet", "sovietism", "sovran", "sown", "sozzled", "spaced", "spaceless", "spacial", "spacious", "spadelike", "spadiceous", "spagyric", "span new", "spanaemic", "spangled", "spangly", "spanish", "spanking", "spare", "sparid", "sparing", "sparkish", "sparkless", "sparkling", "sparkly", "sparoid", "sparry", "sparse", "sparser", "sparsest", "spartan", "spasmodic", "spastic", "spathaceous", "spathic", "spathose", "spathulate", "spatial", "spatiotemporal", "spattered", "spatulate", "spavined", "spayed", "speakable", "speaking", "spec", "special", "specialist", "specialistic", "specialized", "specifiable", "specific", "specified", "specious", "specked", "speckled", "speckless", "spectacled", "spectacular", "spectatorial", "spectral", "spectrographic", "spectrological", "spectrometric", "spectroscopic", "spectroscopical", "specular", "speculative", "speechless", "speedful", "speedier", "speediest", "speeding", "speedless", "speedy", "spelaean", "spellable", "spellbinding", "spellbound", "spencerian", "spendable", "spendthrift", "spenserian", "spent", "spermatic", "spermatozoal", "spermatozoan", "spermatozoic", "spermatozoon", "spermic", "spermicidal", "spermophytic", "spermous", "sphagnous", "sphenic", "sphenoid", "spheral", "sphereless", "spherelike", "spheric", "spherical", "spheroidal", "spherular", "spherulitic", "sphery", "sphincteral", "sphincterial", "sphinxlike", "sphygmic", "sphygmographic", "sphygmoid", "spicate", "spiccato", "spicier", "spiciest", "spick", "spiculate", "spicy", "spidery", "spiffier", "spiffiest", "spiffing", "spiffy", "spiflicated", "spiked", "spikier", "spikiest", "spiky", "spinaceous", "spinal", "spindle legged", "spindle shanked", "spindle shaped", "spindlier", "spindliest", "spindling", "spindly", "spined", "spineless", "spinescent", "spinier", "spiniest", "spiniferous", "spinning", "spinose", "spinous", "spinozistic", "spinulose", "spiny", "spiracular", "spiral", "spirant", "spired", "spireless", "spirillar", "spirited", "spiritistic", "spiritless", "spiritous", "spiritual", "spiritualist", "spiritualistic", "spirituel", "spirituous", "spiroid", "spirometric", "spiry", "spiteful", "splanchnic", "splashed", "splashier", "splashiest", "splashy", "splattered", "splay", "spleenful", "spleenish", "spleeny", "splendent", "splendid", "splendiferous", "splendorous", "splendrous", "splenetic", "splenial", "splenic", "splintered", "splintery", "split", "split level", "split second", "splitting", "splotched", "splurgy", "spluttering", "spoiled", "spoilt", "spoken", "spokewise", "spondaic", "spondylitic", "spongier", "spongiest", "spongy", "spontaneous", "spookier", "spookiest", "spooky", "spoon fed", "spoonier", "spooniest", "spoony", "sporadic", "sporangial", "sporocystic", "sporogenous", "sporophoric", "sporophytic", "sporozoan", "sport", "sportful", "sportier", "sportiest", "sporting", "sportive", "sportless", "sportsmanlike", "sporty", "sporular", "spot on", "spotless", "spotted", "spotty", "spousal", "spouseless", "spouted", "spouting", "spoutless", "sprawled", "sprawling", "sprawly", "spread", "spread eagle", "spreading", "spreathed", "sprigged", "spriggier", "spriggiest", "spriggy", "sprightful", "sprightlier", "sprightliest", "sprightly", "spring", "spring loaded", "springier", "springiest", "springing", "springless", "springlike", "springtime", "springy", "sprinkled", "sprouted", "spruce", "sprucer", "sprucest", "sprucing", "spry", "spryer", "spryest", "spumescent", "spumous", "spumy", "spun", "spunkier", "spunkiest", "spunky", "spurious", "spurless", "spurned", "spurred", "spurting", "sputtering", "squab", "squabbier", "squabbiest", "squabby", "squalid", "squallier", "squalliest", "squalling", "squally", "squamate", "squamosal", "squamous", "squamulose", "squandered", "square", "square built", "square rigged", "square shouldered", "square toed", "squared", "squarish", "squarrose", "squashed", "squashier", "squashiest", "squashy", "squat", "squatty", "squawky", "squeakier", "squeakiest", "squeaking", "squeaky", "squealing", "squeamish", "squeezable", "squelched", "squiffy", "squiggly", "squint", "squint eyed", "squinting", "squirarchal", "squirarchical", "squirearchal", "squirearchical", "squirming", "squirmy", "squirrelly", "squirting", "squishier", "squishiest", "squishy", "stabbed", "stabbing", "stabile", "stabilized", "stabilizing", "stable", "staccato", "stacked", "stage struck", "staged", "stagey", "staggering", "stagier", "stagiest", "stagnant", "stagy", "staid", "stained", "stainless", "stalactiform", "stalagmitic", "stalagmitical", "stalagmometer", "stale", "stalemated", "stalinism", "stalinist", "stalked", "stalking", "stalkless", "stalky", "stall fed", "stalwart", "stalworth", "staminal", "staminate", "staminiferous", "stammering", "stamped", "stanchable", "stand alone", "stand by", "stand off", "stand offish", "stand up", "standard", "standardized", "standing", "stannic", "stanniferous", "stannous", "stapedial", "staphylococcal", "staple", "stapled", "star", "star crossed", "star shaped", "star spangled", "star studded", "starboard", "starch reduced", "starchy", "staring", "stark", "stark naked", "starkers", "starless", "starlight", "starlike", "starlit", "starred", "starrier", "starriest", "starring", "starry", "starry eyed", "starting", "startled", "startling", "starved", "starveling", "starving", "statable", "statant", "state", "stated", "stateless", "statelier", "stateliest", "stately", "stateside", "statesmanlike", "statesmanly", "statewide", "static", "stational", "stationary", "statist", "statistical", "stative", "statuary", "statued", "statuesque", "status", "statutable", "statute", "statutory", "staunch", "staurolitic", "stay at home", "steadfast", "steadied", "steadier", "steadiest", "steady", "steady going", "steadying", "stealthier", "stealthiest", "stealthy", "steamed", "steamier", "steamiest", "steaming", "steamtight", "steamy", "stearic", "steatitic", "stedfast", "steel blue", "steel grey", "steel plated", "steely", "steep", "steepish", "steepled", "steerable", "stelar", "stellar", "stellate", "stelliferous", "stelliform", "stellular", "stemless", "stemmed", "stenographic", "stenographical", "stenophyllous", "stenosed", "stenotopic", "stenotropic", "stentorian", "step down", "step in", "step up", "stepwise", "stercoraceous", "stereo", "stereobatic", "stereographic", "stereographical", "stereoisomeric", "stereophonic", "stereoscopic", "stereospecific", "stereotactic", "stereotyped", "stereotypic", "stereotypical", "steric", "sterile", "sterilized", "sterling", "stern", "sternal", "sternitic", "sternmost", "sternutative", "sternutatory", "steroidal", "stertorous", "stethoscopic", "stewed", "stey", "sthenic", "stibial", "stichometric", "stichometrical", "stichomythic", "stick in the mud", "stickier", "stickiest", "sticking", "stickit", "sticky", "stiff", "stiff necked", "stiffened", "stiffish", "stifled", "stifling", "stigmatic", "still", "still life", "stilly", "stilted", "stimulable", "stimulant", "stimulated", "stimulating", "stimulative", "stinging", "stingless", "stingy", "stinking", "stinko", "stinky", "stinting", "stintless", "stipellate", "stipendiary", "stipitate", "stippled", "stipular", "stipulate", "stipulatory", "stirless", "stirred", "stirring", "stitched", "stochastic", "stock", "stocked", "stockier", "stockiest", "stocking", "stockinged", "stockingless", "stockish", "stockless", "stocky", "stodgier", "stodgiest", "stodgy", "stoic", "stoical", "stoichiometric", "stolen", "stolid", "stolidity", "stoloniferous", "stomachal", "stomachic", "stomachy", "stomatal", "stomatic", "stone", "stone blind", "stone broke", "stone cold", "stone dead", "stone deaf", "stoned", "stoneground", "stoneless", "stoneware", "stonier", "stoniest", "stonkered", "stony", "stony broke", "stony hearted", "stooped", "stooping", "stop go", "stop loss", "stopless", "stopped", "stoppered", "stopping", "storable", "store", "storeyed", "storiated", "storied", "storm beaten", "storm tossed", "stormbound", "stormier", "stormiest", "stormless", "stormproof", "stormy", "stoss", "stotious", "stout", "stoutish", "straggling", "straggly", "straight", "straight arm", "straight out", "straightaway", "straightforward", "strained", "straining", "strait", "strait laced", "stranded", "strange", "strangest", "strangled", "strapless", "strapped", "strapping", "strategic", "strategical", "straticulate", "stratified", "stratiform", "stratocratic", "stratospheric", "stratous", "straucht", "straw", "strawless", "strawlike", "strawy", "stray", "straying", "streaked", "streakier", "streakiest", "streaky", "streamier", "streamiest", "streaming", "streamless", "streamlined", "streamy", "street", "strengthened", "strengthening", "strenuous", "strepitous", "streptococcal", "stressed", "stressful", "stretch", "stretchable", "stretched", "stretchier", "stretchiest", "stretching", "stretchy", "strewn", "striate", "stricken", "strict", "strident", "stridulatory", "stridulous", "strifeful", "strifeless", "strigiform", "strigose", "striking", "stringed", "stringendo", "stringent", "stringless", "stringy", "strip", "strip mined", "striped", "stripeless", "stripier", "stripiest", "stripped", "stripped down", "stripy", "strobic", "strobilaceous", "strobiloid", "stroboscopic", "stromatic", "stromatous", "strong", "strong minded", "strong willed", "strongish", "strophic", "stroppy", "struck", "structural", "structuralism", "structuralist", "structured", "structureless", "struggling", "strung", "struthious", "strutting", "strychnic", "stubbled", "stubbly", "stubborn", "stubby", "stuck", "stuck up", "studded", "studied", "studious", "stuffed", "stuffy", "stumbling", "stumpier", "stumpiest", "stumpy", "stung", "stunned", "stunning", "stunted", "stupefacient", "stupefactive", "stupefied", "stupefying", "stupendous", "stupid", "stuporous", "sturdied", "sturdier", "sturdiest", "sturdy", "stutter", "stuttering", "stygian", "stylar", "styled", "styleless", "styliform", "stylised", "stylish", "stylistic", "stylized", "stylographic", "styloid", "stylolitic", "styptic", "styracaceous", "suable", "suasible", "suasory", "suave", "subacid", "subacidulous", "subacrid", "subacute", "subadult", "subaerial", "subaffluent", "subaggregate", "subalpine", "subaltern", "subalternate", "subangular", "subantarctic", "subapostolic", "subaqua", "subaquatic", "subaqueous", "subarachnoid", "subarboreal", "subarborescent", "subarctic", "subarcuate", "subarid", "subastral", "subatomic", "subaudible", "subaural", "subauricular", "subaverage", "subaxillary", "subbasal", "subcaliber", "subcalibre", "subcapsular", "subcardinal", "subcartilaginous", "subcelestial", "subclavian", "subclavicular", "subclinical", "subconscious", "subcontiguous", "subcontinental", "subcontrary", "subcordate", "subcortical", "subcostal", "subcranial", "subcritical", "subcultural", "subcutaneous", "subdermal", "subdiaconal", "subdivided", "subdominant", "subdorsal", "subduable", "subdued", "subdural", "subentire", "subequal", "subequatorial", "suberect", "subereous", "suberic", "subfreezing", "subfusc", "subgeneric", "subglacial", "subglobose", "subglobular", "subgrade", "subhedral", "subhuman", "subhumid", "subinfeudatory", "subjacent", "subject", "subjective", "subjugated", "subjunctive", "sublanceolate", "sublapsarianism", "sublethal", "sublimable", "sublimate", "sublimated", "sublime", "sublimed", "subliminal", "sublinear", "sublingual", "sublittoral", "sublunar", "sublunary", "sublunate", "submarginal", "submarine", "submaxillary", "submediant", "submental", "submerged", "submergible", "submersed", "submersible", "submicroscopic", "subminiature", "submiss", "submissive", "submontane", "submucous", "submultiple", "subnatural", "subneural", "subnormal", "suboceanic", "subocular", "suborbital", "subordinal", "subordinate", "subordinating", "subordinative", "subovate", "subparallel", "subphrenic", "subpolar", "subreptitious", "subsacral", "subscapular", "subscribable", "subscribed", "subscript", "subsequent", "subservient", "subsessile", "subsidiary", "subsiding", "subsidized", "subsistent", "subsolar", "subsonic", "subspinous", "substandard", "substantial", "substantiated", "substantiating", "substantival", "substantive", "substernal", "substituent", "substitutable", "substitute", "substitutional", "substitutionary", "substitutive", "substructural", "subsumable", "subsurface", "subtemperate", "subterminal", "subternatural", "subterranean", "subterrestrial", "subtile", "subtle", "subtorrid", "subtracted", "subtractive", "subtriangular", "subtriplicate", "subtropic", "subtropical", "subulate", "subungual", "suburban", "suburbanized", "suburbicarian", "subursine", "subventionary", "subversive", "subvertebral", "subvertical", "subvitreous", "subvocal", "subzero", "subzonal", "succedaneous", "succeeding", "successful", "successive", "successless", "succinct", "succinic", "succubous", "succulent", "succursal", "such", "suchlike", "sucking", "suckled", "suctorial", "sudanese", "sudatory", "sudden", "sudoriferous", "sudorific", "sudoriparous", "sudsy", "suety", "sufferable", "suffering", "sufficient", "suffixal", "suffocating", "suffocative", "suffragan", "suffruticose", "suffused", "suffusive", "sufistic", "sugar candy", "sugar cane", "sugar coated", "sugar loaf", "sugared", "sugarless", "sugary", "suggested", "suggestible", "suggestive", "suicidal", "suitable", "suited", "sulcate", "sulfa", "sulfinyl", "sulfuric", "sulkier", "sulkies", "sulkiest", "sulky", "sullen", "sullied", "sulpha", "sulphonic", "sulphureous", "sulphuretted", "sulphuric", "sulphurous", "sultanic", "sultrier", "sultriest", "sultry", "sumatran", "sumerian", "summary", "summational", "summative", "summer", "summerly", "summery", "summital", "summitless", "summonable", "sumptuary", "sumptuous", "sun cured", "sun drenched", "sun dried", "sunbaked", "sunbeamed", "sunbeamy", "sunburned", "sunburnt", "sunburst", "sunday go to meeting", "sundry", "sunfast", "sung", "sunk", "sunken", "sunless", "sunlike", "sunlit", "sunnier", "sunniest", "sunny", "sunproof", "sunray", "sunrise", "sunset", "sunshiny", "sunstruck", "suntanned", "sunward", "super", "super duper", "superable", "superabundant", "superactive", "superacute", "superadditional", "superambitious", "superannuated", "superb", "superbold", "supercelestial", "supercharged", "superciliary", "supercilious", "supercolumnar", "superconducting", "superconductive", "superconfident", "supercriminal", "supercritical", "superdainty", "supereminent", "supererogatory", "superevident", "superexcellent", "superfatted", "superfetate", "superficial", "superfine", "superfluid", "superfluous", "supergene", "superglacial", "superheterodyne", "superhuman", "superimportant", "superimposed", "superincumbent", "superintendent", "superior", "superjacent", "superlative", "superlunar", "superlunary", "supermundane", "supernal", "supernatant", "supernational", "supernatural", "supernaturalism", "supernaturalist", "supernaturalistic", "supernormal", "supernumerary", "superordinary", "superordinate", "superorganic", "superphysical", "superposable", "superrefined", "supersafe", "supersaturated", "superscript", "supersensible", "supersensitive", "supersensual", "superserviceable", "supersonic", "superstitious", "superstructural", "supersubstantial", "supersubtle", "supersweet", "superterrestrial", "supervenient", "supervirulent", "supervised", "supervisory", "supine", "supperless", "supple", "suppled", "supplemental", "supplementary", "suppler", "supplest", "suppletion", "suppletive", "suppletory", "suppliant", "supplicant", "supplicatory", "suppling", "supportable", "supported", "supporting", "supportive", "supportless", "supposable", "supposed", "suppositional", "suppositious", "supposititious", "suppositive", "suppressed", "suppressive", "suppurative", "supranational", "suprarenal", "suprasegmental", "supratemporal", "supremacist", "suprematism", "supreme", "sural", "surbased", "surculose", "surd", "sure", "sure enough", "sure fire", "surefooted", "surer", "surest", "surface", "surface active", "surface to air", "surface to surface", "surfeited", "surficial", "surfy", "surgeless", "surgical", "surging", "surgy", "surly", "surmisable", "surmountable", "surmounted", "surpassable", "surpassing", "surpliced", "surplus", "surprised", "surprising", "surreal", "surrealism", "surrealistic", "surrendered", "surreptitious", "surrogate", "surrounded", "surrounding", "surveillant", "survivable", "surviving", "susceptible", "susceptive", "suspect", "suspected", "suspectless", "suspended", "suspenseful", "suspensible", "suspensive", "suspensory", "suspicionless", "suspicious", "sustainable", "sustained", "sustentacular", "sustentative", "susurrant", "sutural", "svelte", "svelter", "sveltest", "swadeshi", "swagger", "swaggering", "swainish", "swallow tailed", "swallowed", "swamped", "swampier", "swampiest", "swampy", "swank", "swankier", "swankiest", "swanky", "swaraj", "swarajist", "swarming", "swart", "swarth", "swarthy", "swashbuckling", "sway backed", "swaying", "sweated", "sweatier", "sweatiest", "sweating", "sweaty", "swedenborgian", "swedenborgianism", "swedish", "sweeping", "sweer", "sweet", "sweet and sour", "sweet scented", "sweet tempered", "sweetened", "sweetish", "sweetmeal", "swell", "swelled", "swelled headed", "swelling", "sweltering", "sweltry", "swept", "sweptwing", "swift", "swift footed", "swimmable", "swimming", "swindled", "swing wing", "swingeing", "swinging", "swingy", "swinish", "swirlier", "swirliest", "swirling", "swirly", "swish", "swishier", "swishiest", "swishing", "swishy", "swiss", "switch", "swollen", "swollen headed", "swooning", "sword shaped", "swordless", "swordlike", "sworn", "sybarite", "sybaritic", "sycophantic", "sycophantical", "sycophantish", "syenitic", "syllabic", "syllabled", "syllogistic", "sylphic", "sylphid", "sylphish", "sylphy", "sylvan", "sylvatic", "symbiotic", "symbolic", "symbolical", "symbolist", "symbolistic", "symbolistical", "symmetric", "symmetrical", "sympathetic", "sympatholytic", "sympathomimetic", "sympatric", "sympetalous", "symphonic", "symphonious", "symphysial", "sympodial", "symposiac", "symptomatic", "symptomless", "synaesthetic", "synagogical", "synaptic", "syncarpous", "synchromesh", "synchronal", "synchronic", "synchronistic", "synchronistical", "synchronized", "synchronous", "synclastic", "synclinal", "syncopated", "syncretic", "syncytial", "syndactyl", "syndesmotic", "syndetic", "syndicalist", "syndicalistic", "syndromic", "synecdochic", "synecdochical", "synecologic", "synecological", "synergetic", "synergist", "synergistic", "syngamic", "synodal", "synodic", "synoecious", "synoicous", "synonymic", "synonymical", "synonymous", "synoptic", "synoptical", "synoptistic", "synovial", "syntactic", "syntactical", "synthetic", "synthetical", "syntonic", "syntonous", "syphilitic", "syphiloid", "syrian", "syringeal", "syrupy", "systaltic", "systematic", "systematized", "systemic", "systemless", "syzygial", "tabby", "tabernacular", "tabescent", "taboo", "tabu", "tabular", "tabulate", "tachistoscopic", "tachygraphic", "tachygraphical", "tacit", "taciturn", "tackier", "tackiest", "tacky", "tactful", "tactical", "tactile", "tactless", "tactual", "tagalog", "tagged", "tagmemic", "tahitian", "tai", "tail", "tailed", "tailing", "tailless", "taillike", "tailor made", "tailored", "tainted", "taintless", "take down", "take out", "takeaway", "taken", "taking", "talc", "talcose", "talented", "taligrade", "taliped", "talismanic", "talismanical", "talkable", "talkative", "talking", "talky", "tall", "tallish", "tallowy", "taloned", "tamable", "tame", "tameable", "tamed", "tameless", "tamer", "tamest", "tamil", "taming", "tan", "tanagrine", "tandem", "tangent", "tangential", "tangerine", "tangible", "tangier", "tangiest", "tangled", "tangy", "tanked", "tannable", "tanned", "tannic", "tantalic", "tantalizing", "tantalous", "taoism", "taoist", "taoistic", "taped", "tapeless", "tapelike", "tapered", "tapering", "tapestried", "tapetal", "tappable", "tapped", "tardenoisian", "tardier", "tardiest", "tardigrade", "tardy", "targumic", "tariffless", "tarmac", "tarmacadam", "tarnal", "tarnishable", "tarnished", "tarot", "tarry", "tarsal", "tart", "tartarean", "tartarian", "tartaric", "tartish", "tasimetric", "tasseled", "tasselled", "tasteful", "tasteless", "tasty", "tatar", "tatarian", "tattered", "tattling", "tatty", "taught", "taunt", "taunting", "tauriform", "taurine", "tauromachian", "taurus", "taut", "tautologic", "tautological", "tautomeric", "tawdrier", "tawdriest", "tawdry", "tawie", "tawney", "tawnier", "tawniest", "tawny", "tax deductible", "tax exempt", "tax free", "taxable", "taxaceous", "taxidermal", "taxidermic", "taxing", "taxonomic", "taxonomical", "taxpaying", "tea table", "teachable", "teacherless", "tearable", "tearaway", "tearful", "tearier", "teariest", "tearing", "tearless", "teary", "teased", "teasing", "techier", "techiest", "technical", "technocrat", "technological", "techy", "tectonic", "tectricial", "tedious", "teeming", "teen", "teenage", "teenier", "teeniest", "teensy", "teensy weensy", "teentsy", "teeny", "teeny weeny", "teetotal", "tegular", "teind", "teknonymous", "telaesthetic", "telangiectatic", "telautographic", "telegenic", "telegnostic", "telegonic", "telegrammatic", "telegrammic", "telegraphic", "telekinetic", "telemetered", "telencephalic", "teleological", "teleost", "teleostean", "telepathic", "telephonic", "telephotographic", "telescoped", "telescopic", "telesthetic", "televisional", "televisionary", "telial", "telic", "telling", "telltale", "tellurian", "telluric", "tellurous", "telocentric", "telophasic", "telugu", "temerarious", "temperamental", "temperate", "tempered", "tempering", "tempest tossed", "tempestuous", "templed", "temporal", "temporary", "temptable", "tempting", "ten", "tenable", "tenacious", "tenantable", "tenanted", "tenantless", "tendencious", "tendentious", "tender", "tender hearted", "tenderized", "tending", "tendinous", "tendrillar", "tenebrific", "tenebrious", "tenebrism", "tenebrous", "tenfold", "tenor", "tenpenny", "tense", "tensed", "tenseless", "tenser", "tensest", "tensible", "tensile", "tensing", "tensional", "tensionless", "tensive", "tentacled", "tentacular", "tentaculoid", "tentative", "tented", "tenth", "tentie", "tentier", "tentiest", "tentless", "tentorial", "tenty", "tenuous", "tenured", "tenurial", "tenuto", "tephritic", "tepid", "tepidity", "tepidness", "teratogenic", "teratoid", "terbic", "tercentenary", "terebinthine", "terefah", "terete", "tergal", "tergiversatory", "teriyaki", "terminable", "terminal", "terminated", "terminational", "terminative", "terminatory", "terminist", "terminological", "termless", "ternary", "ternate", "terpsichorean", "terraqueous", "terrene", "terrestrial", "terrible", "terrific", "terrified", "terrifying", "terrigenous", "territorial", "terror stricken", "terror struck", "terrorful", "terrorist", "terroristic", "terrorless", "terse", "tertial", "tertian", "tertiary", "tertius", "tervalent", "tessellated", "test", "test tube", "testable", "testaceous", "testamentary", "testate", "tested", "testicular", "testiculate", "testimonial", "testudinal", "testy", "tetanic", "tetartohedral", "tetchy", "tethered", "tetrabasic", "tetrabranchiate", "tetracid", "tetracyclic", "tetradynamous", "tetraethyl", "tetragonal", "tetrahedral", "tetramerous", "tetrandrous", "tetraploid", "tetrapodic", "tetrapterous", "tetrarchic", "tetrarchical", "tetrasporic", "tetrastichic", "tetrastichous", "tetrasyllabic", "tetrasyllabical", "tetratomic", "tetravalent", "teucrian", "teuton", "teutonic", "textbook", "textbookish", "textile", "textless", "textual", "textualism", "textuary", "textured", "thae", "thai", "thalamencephalic", "thalassic", "thalassographic", "thallic", "thalloid", "thallophytic", "thallous", "thank you", "thankful", "thankless", "thankworthy", "that", "thatchless", "thawed", "theaceous", "thearchic", "theatrical", "thebaic", "theban", "thecal", "thecate", "thecodont", "theism", "theist", "theistic", "theistical", "thelytokous", "thematic", "themeless", "then", "thenar", "theocentric", "theocratic", "theocratical", "theocritean", "theodicean", "theodolitic", "theogonic", "theological", "theomorphic", "theophanic", "theoretic", "theoretical", "theosophic", "theosophical", "theralite", "therapeutic", "theriacal", "therian", "therianthropic", "theriomorphic", "thermal", "thermic", "thermionic", "thermochemical", "thermoduric", "thermodynamic", "thermodynamical", "thermoelectrical", "thermogenetic", "thermogenic", "thermolabile", "thermoluminescent", "thermolytic", "thermometric", "thermonuclear", "thermophile", "thermoplastic", "thermoscopic", "thermosetting", "thermostable", "thermostatic", "thermotactic", "thermotaxic", "thermotropic", "theroid", "theropod", "thersitical", "these", "thespian", "thessalonian", "thetic", "theurgic", "theurgical", "thick", "thick skinned", "thick skulled", "thick witted", "thickened", "thickening", "thicketed", "thickety", "thickset", "thieving", "thievish", "thigmotactic", "thigmotropic", "thin", "thin skinned", "think", "thinkable", "thinking", "thinned", "thinnish", "thiocyanic", "third", "third class", "third rate", "thirdstream", "thirstier", "thirstiest", "thirstless", "thirsty", "thirteen", "thirteenth", "thirtieth", "thirty", "this", "thistly", "thixotropic", "thomism", "thomist", "thomistic", "thoracic", "thornier", "thorniest", "thornless", "thorny", "thorough", "thoroughbred", "thought out", "thoughtful", "thoughtless", "thousand", "thousandfold", "thousandth", "thowless", "thracian", "thrashing", "thrasonical", "thraw", "thrawn", "threadbare", "threadlike", "thready", "threatened", "threatening", "threatful", "three", "three cornered", "three dimensional", "three legged", "three masted", "three phase", "three piece", "three ply", "three quarter", "three sided", "three square", "three way", "threefold", "threepenny", "threescore", "threnodial", "thriftier", "thriftiest", "thriftless", "thrifty", "thrilled", "thrilling", "thriving", "throated", "throatier", "throatiest", "throaty", "throbbing", "throbless", "thrombolytic", "thrombosed", "thrombotic", "throneless", "thronged", "through", "through composed", "through other", "throwback", "thrown", "thru", "thudding", "thuggish", "thumbed", "thumbless", "thumblike", "thumping", "thundering", "thunderous", "thundery", "thwart", "thwarted", "thwarting", "thwartwise", "thymelaeaceous", "thymic", "thymier", "thymiest", "thymy", "thyroid", "thyrsoid", "thysanuran", "thysanurous", "tiaraed", "tibetan", "tibial", "tickety boo", "tickling", "ticklish", "tidal", "tiddley", "tiddly", "tideless", "tidied", "tidy", "tie in", "tied", "tierced", "tigerish", "tight", "tight fisted", "tight laced", "tight lipped", "tightened", "tightknit", "tightly knit", "tiled", "tiliaceous", "tillable", "tilled", "tilted", "timber framed", "timber line", "timbered", "time", "time consuming", "time honoured", "time sharing", "timed", "timeless", "timely", "timeous", "timid", "timocratic", "timocratical", "timorous", "tin", "tinct", "tinctorial", "tindery", "tineal", "tined", "tineid", "tinged", "tinglier", "tingliest", "tingling", "tingly", "tinhorn", "tinier", "tiniest", "tinklier", "tinkliest", "tinkling", "tinkly", "tinned", "tinnier", "tinniest", "tinny", "tinpot", "tinsel", "tinselly", "tinted", "tintless", "tiny", "tip and run", "tip tilted", "tip up", "tippable", "tipped", "tippier", "tippiest", "tippy", "tipsier", "tipsy", "tiptoe", "tiptop", "tired", "tireless", "tiresome", "tiring", "tirolean", "titanesque", "titanic", "titaniferous", "titanous", "tithable", "titianesque", "titillated", "titillating", "titillative", "titled", "titoism", "titoist", "tittering", "tittuppy", "titubant", "titular", "titulary", "to and fro", "to be", "toadyish", "toasted", "toe", "toed", "toeless", "toey", "toffee nosed", "togaed", "togate", "together", "togged", "togolese", "toilful", "toiling", "toilsome", "token", "told", "tolerable", "tolerant", "toltec", "toluic", "tombless", "tomboyish", "tomentose", "tomentous", "tomfoolish", "tomial", "ton up", "tonal", "tonalitive", "tone deaf", "toned", "toneless", "tonetic", "tongan", "tongue in cheek", "tongue lash", "tongue tied", "tongued", "tongueless", "tonguelike", "tonic", "tonier", "toniest", "tonish", "tonnish", "tonsillar", "tonsillary", "tonsillitic", "tonsorial", "tonsured", "tony", "too too", "toom", "toothed", "toothier", "toothiest", "toothless", "toothlike", "toothsome", "toothy", "top", "top down", "top drawer", "top flight", "top hat", "top heavy", "top hole", "top level", "top secret", "topazine", "topfull", "tophaceous", "topiary", "topical", "topless", "toplofty", "topmost", "topographic", "topographical", "topologic", "topological", "toponymic", "toponymical", "topped", "topping", "toppling", "tops", "toreutic", "toric", "tormented", "torn", "tornadic", "toroidal", "torose", "torpid", "torporific", "torquate", "torrent", "torrential", "torricellian", "torrid", "tortile", "tortious", "tortoise shell", "tortricid", "tortuous", "tortured", "torturesome", "torturing", "torturous", "torulose", "tory", "toryish", "tossing", "total", "totalitarian", "totemic", "tother", "totipalmate", "totipotent", "tottering", "tottery", "touch and go", "touchable", "touched", "touchier", "touchiest", "touching", "touchy", "tough", "tough minded", "toughened", "toughish", "touring", "tourist", "touristic", "touristy", "tousled", "tow headed", "towable", "toward", "towardly", "towered", "towering", "towerless", "towery", "townish", "townless", "towy", "toxemic", "toxic", "toxicant", "toxicogenic", "toxicologic", "toxicological", "toxophilite", "toxophilitic", "toyless", "toylike", "trabeate", "trabeated", "trabecular", "trabeculate", "traceable", "traced", "traceless", "traceried", "tracheal", "trachytic", "trachytoid", "trackable", "tracked", "trackless", "tractable", "tractile", "tractive", "tractrix", "trad", "trade", "trade in", "trade union", "traded", "traditional", "traditionalism", "traditionalist", "traditionalistic", "traditive", "traducianistic", "trafficless", "tragic", "tragical", "trailing", "trainable", "trained", "training", "trainless", "traitorous", "tralatitious", "tramontane", "tramping", "trampled", "trampling", "tranquil", "tranquilizing", "transactional", "transalpine", "transatlantic", "transcalent", "transcendent", "transcendental", "transcendentalism", "transcendentalist", "transcontinental", "transcribed", "transcriptional", "transcriptive", "transeunt", "transferable", "transferential", "transferrable", "transfinite", "transfixed", "transformable", "transformational", "transformative", "transformed", "transformistic", "transfusable", "transfusible", "transfusive", "transgressive", "transhuman", "transhumant", "transient", "transilient", "transisthmian", "transistorized", "transitional", "transitionary", "transitive", "transitory", "translatable", "translational", "translative", "translucent", "translucid", "translunar", "translunary", "transmarine", "transmigrant", "transmissible", "transmissive", "transmittable", "transmitted", "transmittible", "transmontane", "transmundane", "transmutable", "transmutation", "transnational", "transoceanic", "transonic", "transpacific", "transpadane", "transparent", "transpersonal", "transpicuous", "transpirable", "transpiratory", "transpiring", "transplantable", "transpolar", "transpontine", "transportable", "transported", "transportive", "transposable", "transposed", "transpositional", "transpositive", "transsexual", "transubstantial", "transudatory", "transuranic", "transversal", "transverse", "transvestic", "transvestite", "trap door", "trapezial", "trapeziform", "trapezohedral", "trapezoidal", "traplike", "trappean", "trapped", "trappy", "trashy", "traumatic", "travel sick", "travel soiled", "travel stained", "traveled", "traveling", "travelled", "traversable", "traverse", "treacherous", "treacly", "treasonable", "treasonous", "treasured", "treated", "treble", "treed", "treeless", "treen", "tref", "trembling", "trembly", "tremendous", "tremolant", "tremolitic", "tremulous", "trenchant", "trendy", "trepid", "trespassing", "tressed", "tressier", "tressiest", "tressured", "tressy", "triable", "triacid", "triadelphous", "triadic", "trial", "trial and error", "triangled", "triangular", "triangulate", "triapsidal", "triatomic", "triaxial", "tribadic", "tribal", "tribalism", "tribasic", "tribeless", "triboelectric", "triboluminescent", "tribrachic", "tribunicial", "tribunitial", "tributary", "tricarpellary", "tricentenary", "tricentennial", "trichinous", "trichitic", "trichoid", "trichotomous", "trichromatic", "trichrome", "trick", "trickier", "trickiest", "trickish", "trickless", "tricksier", "tricksiest", "tricksome", "tricksy", "tricky", "triclinic", "tricolor", "tricorn", "tricostate", "tricrotic", "tricuspid", "tricuspidate", "tricyclic", "tridactyl", "trident", "tridentate", "tridentine", "tridimensional", "triecious", "tried", "triennial", "triethyl", "trifacial", "trifid", "trifling", "trifocal", "trifoliate", "triform", "trifurcate", "trig", "trigamous", "trigeminal", "trigger happy", "trigonal", "trigonometric", "trigonometrical", "trigonous", "trihedral", "trihydric", "trilateral", "trilinear", "trilingual", "triliteral", "trilled", "trillion", "trillionth", "trilobate", "trilobated", "trilobed", "trilocular", "trim", "trimeric", "trimerous", "trimestrial", "trimeter", "trimetric", "trimmed", "trimonthly", "trimorphic", "trimorphous", "trinacrian", "trinal", "trinary", "trine", "trinidadian", "trinitarian", "trinomial", "trioecious", "tripartite", "tripedal", "tripersonal", "tripetalous", "triphibious", "triphthongal", "triphyllous", "tripinnate", "triple", "triplex", "triplicate", "triploid", "tripodal", "trippant", "tripping", "tripterous", "triquetrous", "triradiate", "trisomic", "triste", "tristful", "tristichic", "tristichous", "trisyllabic", "trisyllabical", "tritanopic", "trite", "triter", "tritest", "tritheism", "tritheist", "tritheistic", "tritheistical", "triumphal", "triumphant", "triumviral", "triune", "trivalent", "trivalve", "trivial", "trochaic", "trochal", "trochanteric", "trochlear", "trochoid", "trochoidal", "trodden", "troglodytic", "troglodytical", "trojan", "trollopean", "trollopian", "trollopy", "tromometric", "trompe l oeil", "trophallactic", "trophic", "trophied", "trophotropic", "tropic", "tropical", "tropistic", "tropologic", "tropological", "tropophilous", "tropospheric", "troppo", "trothless", "trotskyism", "trotskyite", "trouble free", "troubled", "troubleshooter", "troublesome", "troubling", "troublous", "trousered", "troy", "truant", "truceless", "truculent", "true", "true blue", "true born", "true life", "truer", "truffled", "truistic", "trumped up", "trumpery", "truncate", "truncated", "trunnioned", "trussed", "trusted", "trustful", "trusting", "trustless", "trustworthy", "trusty", "truthful", "truthless", "trying", "tryptic", "tsarism", "tsarist", "tubal", "tubate", "tubbier", "tubbiest", "tubby", "tubed", "tubeless", "tubelike", "tubercular", "tuberculate", "tuberculose", "tuberculous", "tuberous", "tubular", "tubulate", "tubuliflorous", "tubulous", "tucked", "tudor", "tufaceous", "tuffaceous", "tufted", "tuitional", "tuitionary", "tularaemic", "tularemic", "tum", "tumbling", "tumefacient", "tumescent", "tumid", "tumular", "tumultuous", "tunable", "tuneable", "tuned", "tuneful", "tuneless", "tungusic", "tunicate", "tunisian", "tupian", "tuppenny", "turanian", "turbaned", "turbellarian", "turbid", "turbinal", "turbinate", "turbo electric", "turbulent", "turdine", "turfier", "turfiest", "turfy", "turgent", "turgescent", "turgid", "turki", "turkish", "turkmenian", "turko tatar", "turkoman", "turned", "turning", "turnover", "turreted", "turtleneck", "tuscan", "tushed", "tuskless", "tussal", "tussive", "tutelar", "tutelary", "tutored", "tutorial", "tutti", "tutti frutti", "twaddly", "twee", "tweedier", "tweediest", "tweedy", "twelfth", "twelve", "twelve tone", "twelvefold", "twentieth", "twenty", "twenty first", "twenty five", "twenty four", "twenty one", "twenty twenty", "twenty two", "twentyfold", "twice laid", "twice told", "twiggier", "twiggiest", "twiggy", "twilight", "twilit", "twill", "twilled", "twin", "twin screw", "twined", "twinkling", "twinkly", "twinned", "twinning", "twistable", "twisted", "twisting", "twisty", "twittery", "two", "two a penny", "two bit", "two dimensional", "two edged", "two faced", "two fisted", "two footed", "two handed", "two masted", "two piece", "two ply", "two sided", "two timing", "two tone", "two way", "twofold", "twopenny", "twopenny halfpenny", "twp", "tympanic", "tympanitic", "typal", "type high", "typed", "typewritten", "typhoean", "typhoid", "typhonian", "typhonic", "typhous", "typic", "typical", "typographic", "typographical", "typological", "tyrannic", "tyrannical", "tyrannicidal", "tyrannous", "tyrian", "tyrolean", "tyrolese", "u shaped", "ubiquitarian", "ubiquitous", "ugandan", "ugly", "ugrian", "ugric", "ugro finnic", "ugsome", "ukrainian", "ulcerated", "ulcerative", "ulcerous", "uliginous", "ullaged", "ulmaceous", "ulnar", "ulotrichous", "ult", "ulterior", "ultimate", "ultimo", "ultra", "ultrabasic", "ultracentrifugal", "ultrahigh frequency", "ultraism", "ultraist", "ultramarine", "ultramicroscopic", "ultramontane", "ultramundane", "ultrared", "ultrashort", "ultrasonic", "ultraviolet", "ululant", "umbellar", "umbellate", "umbellated", "umbellately", "umbelliferous", "umber", "umbilical", "umbilicate", "umbonal", "umbonate", "umbrageous", "umbral", "umbrella", "umbrian", "umbrose", "umpteen", "umpteenth", "umptieth", "un american", "un english", "unabashed", "unabated", "unabbreviated", "unable", "unabolished", "unabridged", "unabrogated", "unabsolved", "unacademic", "unaccented", "unaccentuated", "unacceptable", "unaccommodated", "unaccommodating", "unaccompanied", "unaccomplished", "unaccountable", "unaccounted", "unaccounted for", "unaccredited", "unaccusable", "unaccused", "unaccustomed", "unachievable", "unaching", "unacknowledged", "unacquainted", "unactable", "unacted", "unactuated", "unadaptable", "unadapted", "unaddressed", "unadjusted", "unadmired", "unadmiring", "unadmitted", "unadmonished", "unadopted", "unadored", "unadorned", "unadulterate", "unadulterated", "unadventurous", "unadvertised", "unadvisable", "unadvised", "unaffected", "unaffecting", "unaffiliated", "unafraid", "unaidable", "unaided", "unaimed", "unaired", "unalienable", "unaligned", "unalike", "unallayed", "unallied", "unallotted", "unallowable", "unalloyed", "unalterable", "unaltered", "unaltering", "unamazed", "unambiguous", "unambitious", "unamenable", "unamendable", "unamended", "unamerced", "unamiable", "unamusable", "unamused", "unamusing", "unanalytic", "unanalytical", "unanalyzable", "unanalyzed", "unanchored", "unaneled", "unanimated", "unanimous", "unannealed", "unannotated", "unannounced", "unanswerable", "unanswered", "unanticipated", "unanxious", "unapologetic", "unappalled", "unapparelled", "unapparent", "unappealable", "unappealing", "unappeasable", "unappeased", "unappetising", "unappetizing", "unapplausive", "unapplicable", "unapplied", "unappointed", "unappreciated", "unappreciative", "unapprehended", "unapprehensible", "unapprehensive", "unapprised", "unapproachable", "unapproached", "unappropriated", "unapproved", "unapproving", "unapt", "unarguable", "unargued", "unarmed", "unarmoured", "unarranged", "unartful", "unarticulate", "unarticulated", "unartificial", "unartistic", "unary", "unascendable", "unascended", "unascertainable", "unascertained", "unashamed", "unasked", "unaspirated", "unaspiring", "unassailable", "unassailed", "unassayed", "unassertive", "unassignable", "unassigned", "unassimilable", "unassimilated", "unassisted", "unassisting", "unassociated", "unassuageable", "unassumed", "unassuming", "unassured", "unatoned", "unattached", "unattainable", "unattained", "unattainted", "unattempted", "unattended", "unattentive", "unattested", "unattired", "unattractive", "unaugmented", "unauspicious", "unauthentic", "unauthenticated", "unauthorised", "unauthoritative", "unauthorized", "unavailable", "unavailing", "unavenged", "unavoidable", "unavowed", "unawakened", "unawakening", "unaware", "unawed", "unbacked", "unbaffled", "unbagged", "unbailable", "unbaked", "unbalanced", "unbanded", "unbaptised", "unbaptized", "unbarbed", "unbarbered", "unbarking", "unbarred", "unbashful", "unbated", "unbathed", "unbattered", "unbearable", "unbearded", "unbearing", "unbeatable", "unbeaten", "unbeautiful", "unbecoming", "unbedimmed", "unbefitting", "unbefriended", "unbegged", "unbeguiled", "unbeguiling", "unbeholden", "unbeknown", "unbeknownst", "unbelievable", "unbelieving", "unbeloved", "unbelted", "unbendable", "unbending", "unbeneficed", "unbeneficial", "unbenefited", "unbenign", "unbenignant", "unbent", "unbeseeming", "unbesought", "unbespoken", "unbestowed", "unbetrayed", "unbettered", "unbewailed", "unbiased", "unbiassed", "unbid", "unbidden", "unblamable", "unblamed", "unbleached", "unblemished", "unblenched", "unblenching", "unblended", "unblent", "unblessed", "unblindfolded", "unblinding", "unblinking", "unblissful", "unblocked", "unbloodied", "unbloody", "unblotted", "unblown", "unblunted", "unblushing", "unboastful", "unbodied", "unboding", "unbolted", "unboned", "unbonneted", "unbooked", "unbookish", "unbooted", "unborn", "unborne", "unborrowed", "unbought", "unbound", "unbounded", "unbowed", "unbraced", "unbranched", "unbreachable", "unbreached", "unbreakable", "unbreathable", "unbreathed", "unbreathing", "unbred", "unbreeched", "unbribable", "unbridged", "unbridled", "unbroke", "unbroken", "unbrotherly", "unbruised", "unbrushed", "unbudgeted", "unbundled", "unburdened", "unburied", "unburned", "unburnished", "unburnt", "unburrowed", "unbusinesslike", "unbuttered", "unbuttoned", "uncaged", "uncalculated", "uncalculating", "uncalled", "uncalled for", "uncandid", "uncanny", "uncanonical", "uncapable", "uncapped", "uncapsizable", "uncared for", "uncaring", "uncarpeted", "uncarted", "uncashed", "uncatalogued", "uncaught", "uncaused", "unceasing", "uncelebrated", "uncensored", "uncensorious", "uncensured", "unceremonious", "uncertain", "uncertificated", "uncertified", "unchained", "unchallengeable", "unchallenged", "unchancy", "unchangeable", "unchanged", "unchanging", "unchaperoned", "uncharacteristic", "uncharge", "uncharged", "uncharitable", "uncharmed", "uncharming", "uncharted", "unchartered", "unchary", "unchaste", "unchastened", "unchastisable", "unchastised", "uncheckable", "unchecked", "uncheered", "uncheerful", "unchewed", "unchildlike", "unchivalrous", "unchosen", "unchristened", "unchristian", "unchristianly", "unchronicled", "uncial", "unciform", "uncinate", "uncircumcised", "uncircumscribed", "uncited", "uncivil", "uncivilized", "unclad", "unclaimed", "unclassed", "unclassical", "unclassifiable", "unclassified", "unclean", "uncleaned", "uncleanly", "uncleansed", "unclear", "uncleared", "unclerical", "unclimbable", "unclimbed", "unclipped", "unclogged", "uncloistered", "unclothed", "unclouded", "uncloudy", "uncloven", "unclutched", "uncluttered", "unco", "uncoated", "uncocked", "uncoiled", "uncoined", "uncollected", "uncoloured", "uncombed", "uncombined", "uncombining", "uncomely", "uncomfortable", "uncomforted", "uncommendable", "uncommercial", "uncommitted", "uncommon", "uncommunicative", "uncommuted", "uncompanionable", "uncompanioned", "uncompassionate", "uncompelled", "uncompensated", "uncompetitive", "uncomplaining", "uncomplaisant", "uncompleted", "uncompliant", "uncomplicated", "uncomplimentary", "uncomplying", "uncomposable", "uncompounded", "uncomprehended", "uncomprehending", "uncomprehensive", "uncompromising", "unconcealed", "unconcealing", "unconceived", "unconcerned", "unconcerted", "unconciliatory", "unconditional", "unconditioned", "unconfederated", "unconfessed", "unconfinable", "unconfined", "unconfining", "unconfirmed", "unconformable", "unconforming", "unconfused", "uncongenial", "unconjectured", "unconjugal", "unconjunctive", "unconnected", "unconniving", "unconquerable", "unconquered", "unconscientious", "unconscionable", "unconscious", "unconsecrated", "unconsentaneous", "unconsenting", "unconsidered", "unconsidering", "unconsoled", "unconsolidated", "unconstant", "unconstitutional", "unconstrainable", "unconstrained", "unconsumed", "unconsummated", "uncontaminated", "uncontemned", "uncontemplated", "uncontentious", "uncontestable", "uncontested", "uncontradicted", "uncontrived", "uncontrollable", "uncontrolled", "uncontroversial", "uncontroverted", "uncontrovertible", "unconventional", "unconversable", "unconversant", "unconverted", "unconvertible", "unconvicted", "unconvinced", "unconvincing", "uncooked", "uncooperative", "uncoordinated", "uncoquettish", "uncordial", "uncorrected", "uncorroborated", "uncorrupt", "uncorrupted", "uncorseted", "uncostly", "uncounselled", "uncountable", "uncounted", "uncoupled", "uncourtly", "uncouth", "uncovenanted", "uncovered", "uncrated", "uncreated", "uncreditable", "uncritical", "uncropped", "uncross", "uncrossed", "uncrowded", "uncrowned", "uncrumpled", "uncrumpling", "uncrushable", "uncrystallisable", "uncrystallizable", "uncrystallized", "unctuous", "unculled", "uncultivable", "uncultivatable", "uncultivated", "uncultured", "uncumbered", "uncurable", "uncurbable", "uncurbed", "uncurdled", "uncured", "uncurious", "uncurled", "uncurrent", "uncursed", "uncursing", "uncurtailed", "uncurtained", "uncurved", "uncustomary", "uncut", "undamaged", "undamped", "undated", "undaunted", "undawning", "undazzled", "undazzling", "undeaf", "undealt", "undebased", "undebauched", "undecayed", "undeceivable", "undeceived", "undecided", "undecipherable", "undecked", "undeclared", "undeclining", "undecomposable", "undecomposed", "undeeded", "undefaced", "undefeated", "undefended", "undefied", "undefiled", "undefinable", "undefined", "undeified", "undelayed", "undelaying", "undelectable", "undelegated", "undeliberate", "undelighted", "undelightful", "undeliverable", "undelivered", "undeluded", "undemanding", "undemocratic", "undemonstrable", "undemonstrative", "undeniable", "undenominational", "undependable", "undeplored", "undepraved", "undepreciated", "undepressed", "undeprived", "under", "under the counter", "underarm", "underbred", "underclad", "underclass", "underclothed", "undercoated", "undercover", "underdeveloped", "underdone", "underdressed", "underemployed", "underfed", "underfired", "underfloor", "underglaze", "undergraduette", "underground", "undergrown", "underhand", "underhanded", "underhung", "underlaid", "underlying", "undermanned", "undermasted", "undermentioned", "undermost", "undernamed", "underneath", "undernoted", "undernourished", "underpeopled", "underpowered", "underproof", "undersea", "undersealed", "undersexed", "undershot", "undersigned", "undersized", "underslung", "underspent", "understaffed", "understandable", "understanding", "understated", "understood", "underwater", "underweight", "underwrought", "undescendable", "undescended", "undescendible", "undescribable", "undescribed", "undescried", "undeserved", "undeserving", "undesigned", "undesigning", "undesirable", "undesired", "undesiring", "undesirous", "undespairing", "undespoiled", "undestroyed", "undetectable", "undetected", "undeterminable", "undetermined", "undeterred", "undeveloped", "undeviating", "undevout", "undiagnosed", "undifferentiated", "undigested", "undignified", "undiluted", "undiminishable", "undiminished", "undimmed", "undiplomatic", "undipped", "undirected", "undisappointing", "undiscerned", "undiscernible", "undiscerning", "undischarged", "undisciplinable", "undisciplined", "undisclosed", "undiscomfited", "undiscordant", "undiscording", "undiscouraged", "undiscoverable", "undiscovered", "undiscriminating", "undiscussable", "undiscussed", "undisguisable", "undisguised", "undismantled", "undismayed", "undisordered", "undispatched", "undispensed", "undisposed", "undisputed", "undissembled", "undissociated", "undissolved", "undissolving", "undistempered", "undistilled", "undistinguishable", "undistinguished", "undistinguishing", "undistorted", "undistracted", "undistracting", "undistributed", "undisturbed", "undisturbing", "undiversified", "undiverted", "undivested", "undividable", "undivided", "undivorced", "undivulged", "undocked", "undoctored", "undocumented", "undomestic", "undomesticated", "undone", "undoubtable", "undoubted", "undoubtful", "undoubting", "undrainable", "undrained", "undramatic", "undraped", "undrawn", "undreaded", "undreading", "undreamed", "undreamed of", "undreaming", "undreamt", "undress", "undressed", "undried", "undrilled", "undrinkable", "undriven", "undrooping", "undrossy", "undrowned", "undrunk", "undubbed", "undue", "undug", "undulant", "undulate", "undulatory", "undulled", "unduteous", "undutiful", "undyed", "undying", "unearned", "unearthly", "uneasy", "uneatable", "uneaten", "uneclipsed", "uneconomic", "uneconomical", "unedifying", "unedited", "uneducable", "uneducated", "uneffaced", "uneffected", "unelaborate", "unelaborated", "unelated", "unelected", "unelectrified", "unembarrassed", "unembellished", "unembittered", "unembodied", "unemotional", "unemotioned", "unemphatic", "unemployable", "unemployed", "unemptied", "unenchanted", "unenclosed", "unencumbered", "unendangered", "unendeared", "unending", "unendowed", "unendurable", "unenforceable", "unenforced", "unengaged", "unenjoyable", "unenlightened", "unenquiring", "unenriched", "unenslaved", "unentailed", "unentered", "unenterprising", "unentertained", "unentertaining", "unenthralled", "unenthusiastic", "unentitled", "unenviable", "unenvied", "unenvious", "unenvying", "unequable", "unequal", "unequaled", "unequalled", "unequipped", "unequivocal", "unerasable", "unerring", "unescapable", "unescorted", "unespied", "unessayed", "unessential", "unestablished", "unethical", "unevangelical", "uneven", "uneventful", "unevidenced", "unexacting", "unexaggerated", "unexalted", "unexamined", "unexampled", "unexcavated", "unexcelled", "unexceptionable", "unexceptional", "unexcitable", "unexcited", "unexciting", "unexcluded", "unexclusive", "unexecuted", "unexercised", "unexhausted", "unexpanded", "unexpectant", "unexpected", "unexperienced", "unexpiated", "unexpired", "unexplainable", "unexplained", "unexploited", "unexplored", "unexposed", "unexpressed", "unexpressible", "unexpressive", "unexpurgated", "unextended", "unextenuated", "unextinct", "unextinguishable", "unextinguished", "unextreme", "unfabled", "unfadable", "unfaded", "unfading", "unfailing", "unfair", "unfaithful", "unfallen", "unfaltering", "unfamiliar", "unfanned", "unfashionable", "unfashioned", "unfastened", "unfastidious", "unfathered", "unfatherly", "unfathomable", "unfathomed", "unfaulty", "unfavorable", "unfavourable", "unfeared", "unfearful", "unfearing", "unfeasible", "unfeathered", "unfeatured", "unfed", "unfeeling", "unfeigned", "unfeigning", "unfelled", "unfelt", "unfeminine", "unfenced", "unfermented", "unfertilised", "unfertilized", "unfettered", "unfeudal", "unfiled", "unfilial", "unfilled", "unfilmed", "unfilterable", "unfiltered", "unfine", "unfinished", "unfired", "unfirm", "unfished", "unfit", "unfitted", "unfitting", "unfixed", "unflagging", "unflappable", "unflattering", "unflavoured", "unflawed", "unfledged", "unfleshly", "unflinching", "unflushed", "unflustered", "unfocused", "unfocussed", "unfolded", "unfooled", "unfooling", "unforbidden", "unforced", "unforcible", "unfordable", "unforeboding", "unforeknowable", "unforeknown", "unforeseeable", "unforeseeing", "unforeseen", "unforested", "unforetold", "unforewarned", "unforfeited", "unforged", "unforgettable", "unforgivable", "unforgiven", "unforgiving", "unforgotten", "unformalised", "unformalized", "unformed", "unformidable", "unformulated", "unforsaken", "unfortified", "unfortunate", "unfossiliferous", "unfossilised", "unfossilized", "unfostered", "unfought", "unfound", "unfounded", "unframed", "unfranchised", "unfraught", "unfree", "unfrequent", "unfrequented", "unfretted", "unfriended", "unfriendly", "unfrighted", "unfrightened", "unfrozen", "unfructuous", "unfruitful", "unfuelled", "unfulfilled", "unfunded", "unfunny", "unfurnished", "unfurred", "unfurrowed", "ungainful", "ungainly", "ungainsaid", "ungallant", "ungalled", "ungarbled", "ungarmented", "ungarnered", "ungarnished", "ungathered", "ungauged", "ungeared", "ungenerous", "ungenial", "ungenteel", "ungentle", "ungentlemanlike", "ungentlemanly", "ungenuine", "ungermane", "ungetatable", "unghostly", "ungifted", "ungilded", "ungilt", "ungirthed", "ungiving", "unglad", "unglazed", "unglossed", "ungloved", "ungodlier", "ungodliest", "ungodlike", "ungodly", "ungored", "ungorged", "ungotten", "ungovernable", "ungoverned", "ungowned", "ungraced", "ungraceful", "ungracious", "ungraded", "ungrammatical", "ungrassed", "ungrateful", "ungratified", "ungrazed", "ungroomed", "unground", "ungrounded", "ungrown", "ungrudged", "ungrudging", "ungual", "unguarded", "unguentary", "unguerdoned", "unguessed", "unguiculate", "unguiculated", "unguided", "ungulate", "unguled", "unguligrade", "ungummed", "ungyved", "unhabitable", "unhabituated", "unhacked", "unhackneyed", "unhailed", "unhallowed", "unhampered", "unhandled", "unhandseled", "unhandsome", "unhanged", "unhanging", "unhappier", "unhappy", "unharboured", "unhardened", "unharmed", "unharmful", "unharming", "unharmonious", "unharvested", "unhasting", "unhasty", "unhatched", "unhaunted", "unhazarded", "unhazardous", "unheaded", "unhealable", "unhealed", "unhealthful", "unhealthier", "unhealthiest", "unhealthy", "unheard", "unheard of", "unheated", "unheeded", "unheedful", "unheeding", "unhelmeted", "unhelpable", "unhelped", "unhelpful", "unheralded", "unheroic", "unheroical", "unhesitating", "unhewn", "unhidden", "unhindered", "unhinged", "unhired", "unhistoric", "unhistorical", "unhoarded", "unhoarding", "unholy", "unhomely", "unhonoured", "unhooped", "unhoped", "unhoped for", "unhopeful", "unhorsed", "unhouseled", "unhuman", "unhumbled", "unhung", "unhunted", "unhurried", "unhurrying", "unhurt", "unhurtful", "unhusbanded", "unhusked", "unhygienic", "unhyphenated", "uniat", "uniaxial", "unicameral", "unicellular", "unicolor", "unicostate", "unideal", "unidealistic", "unidentifiable", "unidentified", "unidiomatic", "unidirectional", "unific", "unified", "unifilar", "uniflorous", "unifoliate", "unifoliolate", "uniform", "uniformed", "uniformitarian", "unifying", "unilateral", "unilateralist", "unilingual", "uniliteral", "unillumed", "unilluminated", "unilluminating", "unillustrated", "unilobed", "unilocular", "unimaginable", "unimaginative", "unimagined", "unimbued", "unimpaired", "unimparted", "unimpassioned", "unimpeachable", "unimpeached", "unimpeded", "unimplored", "unimportant", "unimportuned", "unimposed", "unimposing", "unimpregnated", "unimpressed", "unimpressible", "unimpressionable", "unimpressive", "unimprisoned", "unimproved", "unimpugnable", "uninaugurated", "unincited", "uninclosed", "unincorporated", "unincumbered", "unindexed", "uninfected", "uninflamed", "uninflammable", "uninflated", "uninflected", "uninfluenced", "uninfluential", "uninformative", "uninformed", "uninforming", "uninhabitable", "uninhabited", "uninhibited", "uninitiated", "uninjured", "uninquiring", "uninquisitive", "uninscribed", "uninspired", "uninspiring", "uninstructed", "uninstructive", "uninsured", "unintegrated", "unintellectual", "unintelligent", "unintelligible", "unintended", "unintentional", "uninterested", "uninteresting", "unintermitted", "unintermitting", "uninterpretable", "uninterrupted", "unintoxicating", "unintroduced", "uninucleate", "uninured", "uninventive", "uninvested", "uninvidious", "uninvited", "uninviting", "uninvolved", "union", "unionist", "unionized", "uniparous", "unipersonal", "uniplanar", "unipolar", "unique", "uniramous", "unironed", "unisex", "unisexual", "unitarian", "unitary", "united", "unitive", "univalent", "univalve", "universal", "universalist", "universalistic", "universitarian", "univocal", "unjaded", "unjaundiced", "unjealous", "unjointed", "unjoyful", "unjoyous", "unjust", "unjustifiable", "unjustified", "unkempt", "unkenned", "unkept", "unkind", "unkindled", "unkindly", "unkinged", "unkinglike", "unkingly", "unkissed", "unknelled", "unknighted", "unknightly", "unknowable", "unknowing", "unknown", "unlabelled", "unlaborious", "unlaboured", "unlabouring", "unlaced", "unladen", "unladylike", "unlaid", "unlamented", "unlatched", "unlawful", "unleaded", "unlearned", "unlearning", "unlearnt", "unleased", "unleavened", "unled", "unleisured", "unleisurely", "unlet", "unlettered", "unlibidinous", "unlicensed", "unlidded", "unlifelike", "unlighted", "unlightened", "unlikable", "unlike", "unlikeable", "unlikely", "unlimed", "unlimited", "unlineal", "unlined", "unliquefied", "unliquidated", "unlisted", "unlistening", "unlit", "unliterary", "unlivable", "unliveable", "unlively", "unliving", "unloaded", "unloading", "unlocated", "unlockable", "unlocked", "unlogical", "unlooked", "unlooked for", "unlopped", "unlosable", "unlost", "unlovable", "unloveable", "unloved", "unlovely", "unloving", "unluckier", "unluckiest", "unlucky", "unluxuriant", "unluxurious", "unmacadamized", "unmade", "unmaidenly", "unmailable", "unmailed", "unmaimed", "unmaintainable", "unmaintained", "unmakable", "unmalicious", "unmalleable", "unmanacled", "unmanageable", "unmanaged", "unmanlike", "unmanly", "unmanned", "unmannered", "unmannerly", "unmantled", "unmanufactured", "unmarked", "unmarketable", "unmarred", "unmarriageable", "unmarried", "unmarrying", "unmasculine", "unmasked", "unmasking", "unmastered", "unmatchable", "unmatched", "unmated", "unmaterial", "unmaterialised", "unmaterialized", "unmaternal", "unmathematical", "unmatriculated", "unmatured", "unmeaning", "unmeant", "unmeasurable", "unmeasured", "unmechanical", "unmechanised", "unmechanized", "unmeditated", "unmeet", "unmellowed", "unmelodious", "unmelted", "unmemorable", "unmentionable", "unmentioned", "unmercenary", "unmerchantable", "unmerciful", "unmeritable", "unmerited", "unmeriting", "unmet", "unmetalled", "unmetaphysical", "unmeted", "unmethodical", "unmethodised", "unmethodized", "unmetrical", "unmilitary", "unmilked", "unmilled", "unmindful", "unmingled", "unministerial", "unmiraculous", "unmiry", "unmissable", "unmissed", "unmistakable", "unmistrustful", "unmitigable", "unmitigated", "unmixed", "unmoaned", "unmodernised", "unmodernized", "unmodifiable", "unmodified", "unmodish", "unmodulated", "unmolested", "unmoral", "unmoralising", "unmoralizing", "unmortgaged", "unmortified", "unmotherly", "unmotivated", "unmounted", "unmounting", "unmourned", "unmovable", "unmoveable", "unmoved", "unmoving", "unmown", "unmunitioned", "unmurmuring", "unmusical", "unmutilated", "unnamable", "unnameable", "unnamed", "unnative", "unnatural", "unnaturalized", "unnavigable", "unnavigated", "unnecessariness", "unnecessary", "unneeded", "unneedful", "unneighbourly", "unnerved", "unnerving", "unnetted", "unnoted", "unnoticeable", "unnoticed", "unnoticing", "unnourished", "unnourishing", "unnumbered", "unnurtured", "unobeyed", "unobjectionable", "unobnoxious", "unobscured", "unobservable", "unobservant", "unobserved", "unobserving", "unobstructed", "unobstructive", "unobtainable", "unobtained", "unobtrusive", "unobvious", "unoccupied", "unoffended", "unoffending", "unoffensive", "unoffered", "unofficered", "unofficial", "unofficious", "unoiled", "unopened", "unoperative", "unopposed", "unoppressive", "unordained", "unordered", "unorderly", "unordinary", "unorganized", "unoriginal", "unornamental", "unornamented", "unorthodox", "unorthodoxy", "unossified", "unostentatious", "unovercome", "unoverthrown", "unowned", "unoxidised", "unoxidized", "unpaced", "unpacified", "unpaged", "unpaid", "unpained", "unpainful", "unpaintable", "unpainted", "unpaired", "unpalatable", "unpalsied", "unpampered", "unpanelled", "unpapered", "unparallel", "unparalleled", "unpardonable", "unpardoned", "unpardoning", "unpared", "unparental", "unparented", "unparliamentary", "unpassable", "unpassionate", "unpassioned", "unpasteurised", "unpasteurized", "unpastoral", "unpastured", "unpatented", "unpathetic", "unpatriotic", "unpatronized", "unpatterned", "unpaved", "unpavilioned", "unpayable", "unpaying", "unpeaceable", "unpeaceful", "unpedigreed", "unpeeled", "unpennied", "unpensioned", "unpent", "unpeopled", "unpeppered", "unperceivable", "unperceived", "unperceptive", "unperched", "unperfect", "unperforated", "unperformed", "unperforming", "unperfumed", "unperilous", "unperishable", "unperished", "unperishing", "unperjured", "unperpetrated", "unperplexed", "unperplexing", "unpersecuted", "unpersuadable", "unpersuaded", "unpersuasive", "unperturbed", "unperverted", "unphilosophic", "unphilosophical", "unphonetic", "unpickable", "unpicked", "unpierced", "unpillared", "unpillowed", "unpiloted", "unpitied", "unpitiful", "unpitying", "unplaced", "unplagued", "unplanked", "unplanned", "unplanted", "unplausible", "unplayable", "unplayed", "unpleasant", "unpleased", "unpleasing", "unpleasurable", "unpleated", "unpledged", "unpliable", "unpliant", "unploughed", "unplucked", "unplumb", "unplumbed", "unplumed", "unpoetic", "unpoetical", "unpointed", "unpoised", "unpoisoned", "unpolarised", "unpolarized", "unpoliced", "unpolishable", "unpolished", "unpolite", "unpolitic", "unpolitical", "unpolled", "unpolluted", "unpopular", "unpopulated", "unpopulous", "unportioned", "unposed", "unpossessed", "unpossessing", "unposted", "unpotable", "unpowdered", "unpracticable", "unpractical", "unpracticed", "unpractised", "unpraised", "unpraiseworthy", "unpraising", "unpraying", "unpreached", "unpreaching", "unprecedented", "unprecise", "unpredictable", "unpreferred", "unpregnant", "unprejudiced", "unpremeditated", "unpreoccupied", "unprepared", "unpreparing", "unprepossessing", "unprescribed", "unpresentable", "unpressed", "unpresuming", "unpresumptuous", "unpretentious", "unpretty", "unprevailing", "unpreventable", "unprevented", "unpriced", "unpriestly", "unprimed", "unprincely", "unprincipled", "unprintable", "unprinted", "unprivileged", "unprizable", "unprized", "unprocessed", "unproclaimed", "unprocurable", "unproduced", "unproductive", "unprofaned", "unprofessed", "unprofessional", "unprofitable", "unprofited", "unprofiting", "unprogressive", "unprohibited", "unprojected", "unprolific", "unpromised", "unpromising", "unprompted", "unpronounceable", "unpronounced", "unproper", "unpropertied", "unprophetic", "unprophetical", "unpropitious", "unproportionable", "unproportionate", "unproportioned", "unproposed", "unpropped", "unprosperous", "unprotected", "unprotested", "unprotesting", "unprovable", "unproved", "unproven", "unprovided", "unprovident", "unprovisioned", "unprovocative", "unprovoked", "unprovoking", "unpruned", "unpublished", "unpuckered", "unpunctual", "unpunctuated", "unpunishable", "unpunished", "unpurchasable", "unpurchased", "unpurged", "unpurified", "unpurposed", "unpursued", "unputdownable", "unqualifiable", "unqualified", "unqualifying", "unquantified", "unquarried", "unqueenly", "unquelled", "unquenchable", "unquenched", "unquestionable", "unquestioned", "unquestioning", "unquickened", "unquiet", "unquieted", "unquieting", "unquotable", "unquoted", "unraised", "unraked", "unraking", "unransomed", "unrated", "unratified", "unravished", "unrazored", "unreachable", "unreached", "unreactive", "unread", "unreadable", "unready", "unreal", "unrealistic", "unrealized", "unreaped", "unreasonable", "unreasoned", "unreasoning", "unreaving", "unrebated", "unrebuked", "unrecallable", "unrecalled", "unreceipted", "unreceptive", "unreciprocated", "unreckonable", "unreckoned", "unreclaimable", "unreclaimed", "unrecognisable", "unrecognizable", "unrecognized", "unrecognizing", "unrecollected", "unrecommendable", "unrecommended", "unrecompensed", "unreconcilable", "unreconciled", "unreconstructed", "unrecorded", "unrecounted", "unrecoverable", "unrectified", "unredeemable", "unredeemed", "unredressed", "unreduced", "unreducible", "unreeling", "unrefined", "unreflected", "unreflecting", "unreflective", "unreformable", "unreformed", "unrefracted", "unrefreshed", "unrefreshing", "unrefuted", "unregarded", "unregenerate", "unregenerated", "unregimented", "unregistered", "unregulated", "unrehearsed", "unreined", "unrejoiced", "unrejoicing", "unrelated", "unrelative", "unrelaxed", "unreleased", "unrelenting", "unreliable", "unrelievable", "unrelieved", "unreligious", "unrelished", "unreluctant", "unremaining", "unremarkable", "unremarked", "unremedied", "unremembered", "unremembering", "unremitted", "unremitting", "unremorseful", "unremovable", "unremoved", "unremunerative", "unrendered", "unrenewed", "unrenowned", "unrent", "unrepaid", "unrepaired", "unrepealable", "unrepealed", "unrepeatable", "unrepeated", "unrepelled", "unrepentant", "unrepented", "unrepenting", "unrepining", "unreplaceable", "unreplenished", "unreportable", "unreported", "unreposeful", "unreposing", "unrepresentative", "unrepresented", "unreprievable", "unreprieved", "unreprimanded", "unreproached", "unreproachful", "unreproaching", "unreproducible", "unreprovable", "unreproved", "unreproving", "unrepugnant", "unrequired", "unrequisite", "unrequited", "unrescinded", "unresented", "unresentful", "unresenting", "unreserved", "unresisted", "unresistible", "unresisting", "unresolvable", "unresolved", "unrespected", "unrespited", "unresponsive", "unrestful", "unresting", "unrestored", "unrestrainable", "unrestrained", "unrestricted", "unretarded", "unretentive", "unretouched", "unreturnable", "unreturned", "unreturning", "unrevealable", "unrevealed", "unrevealing", "unrevenged", "unrevengeful", "unreverent", "unreversed", "unreverted", "unrevised", "unrevoked", "unrewarded", "unrewarding", "unrhymed", "unrhythmical", "unribbed", "unridable", "unridden", "unriddled", "unrifled", "unrigged", "unrighteous", "unrightful", "unrimed", "unripe", "unripened", "unrisen", "unrivalled", "unriven", "unriveted", "unriveting", "unrolled", "unromantic", "unroofed", "unroped", "unrotted", "unrotten", "unrouged", "unrounded", "unroused", "unrubbed", "unrude", "unruffable", "unruffled", "unruled", "unruly", "unrumpled", "unsaddled", "unsafe", "unsaid", "unsailed", "unsainted", "unsaintly", "unsalable", "unsalaried", "unsaleable", "unsalted", "unsaluted", "unsalvageable", "unsanctified", "unsanctifying", "unsanctioned", "unsandalled", "unsanitary", "unsapped", "unsashed", "unsatable", "unsated", "unsatiable", "unsatiated", "unsatiating", "unsating", "unsatirical", "unsatisfactory", "unsatisfiable", "unsatisfied", "unsatisfying", "unsaturated", "unsaved", "unsavoury", "unsayable", "unscalable", "unscaled", "unscaling", "unscanned", "unscarred", "unscathed", "unscented", "unsceptred", "unscheduled", "unscholarlike", "unscholarly", "unschooled", "unscientific", "unscissored", "unscorched", "unscoured", "unscratched", "unscreened", "unscripted", "unscriptural", "unscrupled", "unscrupulous", "unscrutinised", "unscrutinized", "unsculptured", "unsealed", "unseamed", "unsearchable", "unsearched", "unseasonable", "unseasoned", "unseaworthy", "unseconded", "unsectarian", "unsecular", "unsecured", "unseduced", "unseeable", "unseeded", "unseeing", "unseemly", "unseen", "unsegmented", "unsegregated", "unseizable", "unseized", "unselfconscious", "unselfish", "unsensational", "unsensed", "unsensible", "unsensing", "unsensitive", "unsensualised", "unsensualized", "unsent", "unsentenced", "unsentimental", "unseparable", "unseparated", "unserious", "unserviceable", "unset", "unsetting", "unsettled", "unsevered", "unsexed", "unsexual", "unshackled", "unshaded", "unshadowable", "unshadowed", "unshakable", "unshakeable", "unshaken", "unshamed", "unshaped", "unshapely", "unshapen", "unshaping", "unshared", "unsharpened", "unshaved", "unshaven", "unsheathed", "unshed", "unshedding", "unsheltered", "unshielded", "unshifting", "unshingled", "unshipped", "unshockable", "unshocked", "unshod", "unshoed", "unshorn", "unshouted", "unshouting", "unshowered", "unshown", "unshrinkable", "unshrinking", "unshrived", "unshriven", "unshunnable", "unshunned", "unshut", "unshuttered", "unsicker", "unsifted", "unsighing", "unsight", "unsighted", "unsightly", "unsigned", "unsinewed", "unsinewing", "unsinkable", "unsistered", "unsisterly", "unsizable", "unsizeable", "unsized", "unskilful", "unskilled", "unskillful", "unskimmed", "unskinned", "unslain", "unslaked", "unsleeping", "unsliced", "unslipping", "unsluiced", "unslumbering", "unslumbrous", "unslung", "unsmiling", "unsmirched", "unsmitten", "unsmooth", "unsmoothed", "unsmotherable", "unsnarled", "unsnuffed", "unsoaped", "unsociable", "unsocial", "unsocialised", "unsocialized", "unsocially", "unsocketed", "unsoft", "unsoftening", "unsoiled", "unsolaced", "unsold", "unsoldierlike", "unsoldierly", "unsolemn", "unsolicited", "unsolicitous", "unsolid", "unsolvable", "unsolved", "unsonsy", "unsophisticated", "unsorted", "unsought", "unsound", "unsoundable", "unsounded", "unsoured", "unsown", "unspared", "unsparing", "unsparred", "unspeakable", "unspecialised", "unspecialized", "unspecific", "unspecified", "unspectacled", "unspectacular", "unspeculative", "unspelled", "unspent", "unspied", "unspilled", "unspilt", "unspirited", "unspiritual", "unspiritualised", "unspiritualising", "unspiritualized", "unspiritualizing", "unspoiled", "unspoilt", "unspoken", "unsporting", "unsportsmanlike", "unspotted", "unsprinkled", "unsprung", "unspun", "unsquared", "unstable", "unstack", "unstacked", "unstaid", "unstainable", "unstained", "unstamped", "unstanchable", "unstarched", "unstated", "unstatesmanlike", "unstaunchable", "unstaying", "unsteadfast", "unsteady", "unsterile", "unsterilized", "unstifled", "unstigmatised", "unstigmatized", "unstilled", "unstimulated", "unstinted", "unstinting", "unstirred", "unstitched", "unstitching", "unstocked", "unstockinged", "unstooping", "unstoppable", "unstopped", "unstoppered", "unstrained", "unstratified", "unstreamed", "unstrengthened", "unstressed", "unstriated", "unstringed", "unstriped", "unstripped", "unstructured", "unstrung", "unstuck", "unstudied", "unstuffed", "unstuffy", "unsubduable", "unsubdued", "unsubject", "unsubjected", "unsublimated", "unsublimed", "unsubmerged", "unsubmissive", "unsubmitting", "unsubscribed", "unsubsidized", "unsubstantial", "unsubstantiated", "unsubtle", "unsucceeded", "unsuccessful", "unsuccessive", "unsucked", "unsufferable", "unsuitable", "unsuited", "unsuiting", "unsullied", "unsummoned", "unsung", "unsunny", "unsuperfluous", "unsupervised", "unsupple", "unsupplied", "unsupportable", "unsupported", "unsupposable", "unsuppressed", "unsure", "unsurfaced", "unsurmised", "unsurmountable", "unsurpassable", "unsurpassed", "unsurprised", "unsurveyed", "unsusceptible", "unsuspected", "unsuspecting", "unsuspended", "unsuspicious", "unsustainable", "unsustained", "unsustaining", "unswaddled", "unswaddling", "unswallowed", "unswayable", "unswayed", "unsweet", "unsweetened", "unswept", "unswerving", "unsworn", "unsyllabled", "unsymmetrical", "unsymmetrized", "unsympathetic", "unsympathising", "unsympathizing", "unsystematic", "unsystematical", "unsystematised", "unsystematized", "untackling", "untailed", "untainted", "untainting", "untalented", "untamable", "untame", "untameable", "untamed", "untangible", "untangled", "untanned", "untapped", "untarnished", "untarred", "untasted", "untasteful", "untaught", "untaxed", "untaxing", "unteachable", "unteamed", "untearable", "untechnical", "untellable", "untempered", "untempering", "untempted", "untenable", "untenantable", "untenanted", "untended", "untendered", "unterminated", "unterrestrial", "unterrified", "unterrifying", "untested", "untethered", "untethering", "unthanked", "unthankful", "unthawed", "unthawing", "untheological", "unthinkable", "unthinking", "unthorough", "unthought", "unthought of", "unthoughtful", "unthreaded", "unthrifty", "untidied", "untidier", "untidiest", "untidy", "untidying", "untied", "untiled", "untillable", "untilled", "untimbered", "untimely", "untimeous", "untinctured", "untinged", "untinned", "untired", "untiring", "untitled", "untoiling", "untold", "untombed", "untoned", "untormented", "untorn", "untortured", "untouchable", "untouched", "untoward", "untraceable", "untraced", "untracked", "untractable", "untraded", "untrained", "untrammelled", "untrampled", "untranquil", "untransferable", "untransformed", "untranslatable", "untranslated", "untransmigrated", "untransmissible", "untransmitted", "untransmutable", "untransmuted", "untransparent", "untravelled", "untraversable", "untraversed", "untreasured", "untreatable", "untreated", "untrembling", "untremendous", "untremulous", "untrenched", "untrespassing", "untressed", "untried", "untrimmed", "untrod", "untrodden", "untroubled", "untrue", "untrustful", "untrustworthy", "untrusty", "untruthful", "untucked", "untumbled", "untumultuous", "untunable", "untuneable", "untuneful", "unturbid", "unturfed", "unturnable", "unturned", "unturning", "untutored", "untwisted", "untypical", "unurged", "unusable", "unused", "unuseful", "unushered", "unusual", "unutilized", "unutterable", "unuttered", "unvaccinated", "unvaluable", "unvalued", "unvanquishable", "unvanquished", "unvariable", "unvaried", "unvariegated", "unvarnished", "unvarying", "unveiled", "unvendible", "unvenerable", "unvented", "unventilated", "unveracious", "unverifiable", "unverified", "unversed", "unvexed", "unviable", "unviewed", "unviolated", "unvirtuous", "unvisitable", "unvisited", "unvisored", "unvital", "unvitiated", "unvitrifiable", "unvitrified", "unvizarded", "unvocal", "unvocalised", "unvocalized", "unvoiced", "unvulgar", "unvulnerable", "unwaked", "unwakened", "unwandering", "unwanted", "unwarlike", "unwarmed", "unwarned", "unwarped", "unwarrantable", "unwarranted", "unwary", "unwashed", "unwasted", "unwatched", "unwatchful", "unwatered", "unwatery", "unwavering", "unweakened", "unweaned", "unweaponed", "unwearable", "unwearied", "unweary", "unwearying", "unweathered", "unwebbed", "unwed", "unwedded", "unweeded", "unweened", "unweighed", "unweighing", "unwelcome", "unwelcomed", "unwell", "unwept", "unwet", "unwetted", "unwhipped", "unwholesome", "unwieldy", "unwifelike", "unwifely", "unwilled", "unwilling", "unwinding", "unwinged", "unwinking", "unwinnowed", "unwiped", "unwired", "unwise", "unwished", "unwished for", "unwishful", "unwitched", "unwithdrawing", "unwithered", "unwithering", "unwithheld", "unwithholding", "unwithstood", "unwitnessed", "unwitting", "unwitty", "unwomanly", "unwon", "unwonted", "unwooded", "unwooed", "unworkable", "unworked", "unworking", "unworkmanlike", "unworldly", "unworn", "unworried", "unworshipped", "unworthy", "unwound", "unwounded", "unwoven", "unwrapped", "unwrinkled", "unwriting", "unwritten", "unwrought", "unwrung", "unyielding", "unzealous", "up and coming", "up and down", "up and over", "up market", "up to date", "up to the minute", "upbeat", "upbound", "upbraiding", "upcast", "upcoming", "upcurved", "upended", "upgrade", "uphill", "upland", "uplifted", "upmost", "upper", "upper case", "upper class", "uppermost", "uppish", "uppity", "upraised", "upright", "upriver", "uproarious", "upscale", "upset", "upsetting", "upside down", "upstage", "upstaged", "upstaging", "upstair", "upstairs", "upstanding", "upstart", "upstate", "upstream", "uptight", "uptown", "upturned", "upward", "upwind", "uraemia", "ural altaic", "uralian", "uralic", "uranian", "uranic", "uranitic", "uranographic", "uranographical", "uranous", "uranylic", "urban", "urbane", "urbanistic", "urbanized", "urceolate", "urdy", "uredinial", "uremic", "ureteral", "ureteric", "urethral", "urethritic", "urethroscopic", "uretic", "urgent", "uric", "urinant", "urinary", "uriniferous", "urinogenital", "urinous", "urnfield", "urochord", "urochordal", "urodele", "urogenital", "urogenous", "urolithic", "uropygial", "ursine", "urticaceous", "urticant", "urticate", "uruguayan", "usable", "useable", "used", "used up", "useful", "useless", "usual", "usufruct", "usufructuary", "usurious", "usurpative", "usurped", "uterine", "utile", "utilitarian", "utility", "utilizable", "utilized", "utmost", "uto aztecan", "utopian", "utricular", "utter", "utterable", "uttered", "utterless", "uttermost", "uveal", "uveous", "uvular", "uxorial", "uxoricidal", "uxorilocal", "uxorious", "v shaped", "vacant", "vacationless", "vaccinal", "vaccinated", "vaccinial", "vacillant", "vacillating", "vacillatory", "vacuolar", "vacuolate", "vacuolated", "vacuous", "vacuum packed", "vadose", "vagabond", "vagabondish", "vagal", "vagarious", "vagile", "vaginal", "vaginate", "vagrant", "vagrom", "vague", "vaguer", "vaguest", "vain", "vainglorious", "valanced", "valedictory", "valerianaceous", "valetudinarian", "valgus", "valiant", "valid", "validated", "validating", "vallecular", "valleculate", "valorous", "valuable", "value added", "valued", "valueless", "valval", "valvar", "valvate", "valved", "valvular", "vambraced", "vampiric", "vanadic", "vanadous", "vaned", "vaneless", "vanished", "vanishing", "vanquishable", "vanquished", "vanward", "vapid", "vaporific", "vaporing", "vaporizable", "vaporized", "vaporous", "vapory", "vapouring", "vapourish", "vapoury", "variable", "variant", "variational", "variative", "varicelloid", "varicolored", "varicoloured", "varicose", "varied", "variegated", "varietal", "variform", "variolate", "variolitic", "varioloid", "variolous", "variorum", "various", "varnished", "varus", "varying", "vascular", "vasiform", "vasoconstrictive", "vasoconstrictor", "vasodilator", "vasomotor", "vassal", "vast", "vasty", "vatic", "vaticinal", "vaulted", "vaulting", "vaunted", "vaunting", "vaunty", "vectorial", "veddoid", "vedic", "vee", "vegetable", "vegetal", "vegetarian", "vegetative", "vegetive", "vehement", "vehicular", "veiled", "veilless", "veined", "veinier", "veiniest", "veiny", "velar", "velate", "vellum", "veloce", "velutinous", "velvet", "velvety", "venal", "venatic", "venational", "vendean", "vendible", "venerable", "venerated", "venerating", "venereal", "venetian", "venetianed", "venezuelan", "vengeful", "venial", "venomed", "venomous", "venose", "venous", "vented", "ventilable", "ventilated", "ventilative", "ventose", "ventral", "ventricose", "ventricous", "ventricular", "ventriloquial", "ventriloquistic", "venturesome", "venturous", "venusian", "veracious", "verbal", "verbalized", "verbatim", "verbenaceous", "verbless", "verbose", "verboten", "verdant", "verecund", "vergilian", "veridical", "verier", "veriest", "verifiable", "verificatory", "verified", "verifying", "verisimilar", "verism", "verist", "veristic", "veritable", "vermicidal", "vermicular", "vermiculate", "vermiculated", "vermiform", "vermifuge", "vermilion", "vermillion", "verminous", "vermivorous", "vernacular", "vernal", "verrucose", "verrucous", "versatile", "versed", "versicular", "versional", "vertebral", "vertebrate", "vertebrated", "vertical", "verticillate", "verticillated", "vertiginous", "very", "vesical", "vesicant", "vesicatory", "vesicular", "vesiculate", "vespertine", "vespine", "vestal", "vested", "vestiary", "vestibular", "vestigial", "vestmental", "vestmented", "vestral", "veteran", "veterinary", "vexatious", "vexed", "vexillary", "vexing", "viable", "vibrant", "vibrating", "vibrational", "vibrationless", "vibrative", "vibratory", "vibronic", "vicarial", "vicarious", "vice", "vice presidential", "vicegerent", "viceless", "vicenary", "vicennial", "vicinal", "vicious", "vicissitudinous", "victimized", "victorian", "victorious", "victoryless", "victualless", "viewable", "viewier", "viewiest", "viewless", "viewy", "vigesimal", "vigesimo quarto", "vigilant", "vigorous", "vile", "villager", "villainous", "villanovan", "villatic", "villiform", "villose", "villous", "vimineous", "vinaceous", "vinaigrette", "vincentian", "vincible", "vindicable", "vindicated", "vindicatory", "vindictive", "vinegarish", "vinegary", "vinicultural", "vinous", "vintage", "viny", "violable", "violaceous", "violate", "violated", "violative", "violent", "violet", "violinistic", "viperine", "viperish", "viperous", "viral", "virescent", "virgate", "virgilian", "virgin", "virginal", "virginian", "virgulate", "viricidal", "viridescent", "virile", "virological", "virtual", "virtueless", "virtuosic", "virtuosity", "virtuoso", "virtuous", "virucidal", "virulent", "visaged", "visceral", "viscerotonic", "viscid", "viscoelastic", "viscometric", "viscose", "viscosimetric", "viscous", "vishnu", "visible", "visigothic", "visional", "visionary", "visionless", "visitant", "visitatorial", "visiting", "visitorial", "visored", "vistaless", "visual", "visualized", "vital", "vitalism", "vitalizing", "vitelline", "vitiable", "vitiated", "vitreous", "vitrescent", "vitrescible", "vitreum", "vitric", "vitrifiable", "vitrified", "vitriform", "vitriolic", "vitruvian", "vituline", "vituperative", "vivace", "vivacious", "viverrine", "vivid", "viviparous", "vivisectional", "vivo", "vixen", "vixenish", "vixenly", "vizarded", "vizierial", "vizirial", "vocable", "vocal", "vocalic", "vocational", "vocative", "vociferant", "vociferous", "voetstoots", "vogie", "vogue", "voguish", "voiced", "voiceful", "voiceless", "void", "voidable", "voided", "volant", "volante", "volar", "volatile", "volatilisable", "volatilizable", "volatilized", "volcanic", "volcanological", "volitant", "volitational", "volitional", "volitionary", "volitionless", "volitive", "volscian", "voltaic", "voltairean", "voltairian", "voluble", "volumed", "volumetric", "volumetrical", "voluminous", "voluntarism", "voluntary", "volunteer", "voluptuary", "voluptuous", "volute", "voluted", "volvate", "vomerine", "vomitory", "voodooistic", "voracious", "vorant", "vortical", "vorticose", "vortiginous", "votary", "voteless", "votive", "vowelless", "voyeuristic", "vulcanian", "vulcanisable", "vulcanizable", "vulcanized", "vulcanological", "vulgar", "vulgate", "vulned", "vulnerable", "vulnerary", "vulpine", "vulturine", "vulturous", "vulval", "vulvar", "vying", "wackier", "wackiest", "wacky", "wafd", "wafer thin", "wafery", "wage earning", "wageless", "waggish", "waggly", "wailful", "wailing", "wainscoted", "waist deep", "waisted", "waiting", "wakeful", "wakeless", "wakerife", "waking", "walachian", "waldenses", "waldensian", "wale", "walk in", "walk on", "walk up", "walking", "wall less", "wall to wall", "wallachian", "walled", "walloon", "walloping", "wally", "walnut", "waltonian", "wambly", "wan", "wanchancy", "wandering", "wandle", "waney", "wanier", "waniest", "waning", "wanner", "wannest", "wanning", "wannish", "wanted", "wanting", "wanton", "war", "war torn", "war worn", "warded", "ware", "warier", "wariest", "warlike", "warm", "warm blooded", "warm hearted", "warmed", "warmed over", "warming", "warmish", "warning", "warped", "warragal", "warrantable", "warranted", "warrigal", "warring", "wartier", "wartiest", "wartless", "wartlike", "warty", "wary", "wash and wear", "washable", "washed", "washed out", "washed up", "washier", "washiest", "washy", "wasp waisted", "waspier", "waspiest", "waspish", "waspy", "wastable", "waste", "wasted", "wasteful", "wasting", "watchful", "water cooled", "water gas", "water repellent", "water resistant", "water soluble", "water supply", "watercress", "watered", "watered down", "waterish", "waterless", "waterlog", "waterlogged", "waterproof", "waterproofed", "watertight", "watery", "wattle", "waugh", "waur", "waved", "waveless", "wavelike", "wavering", "wavier", "waviest", "waving", "wavy", "waxed", "waxen", "waxier", "waxiest", "waxing", "waxy", "way out", "wayfarer", "wayfaring", "wayless", "wayward", "wayworn", "weak", "weak kneed", "weak minded", "weak willed", "weakened", "weakening", "weakly", "wealthier", "wealthiest", "wealthy", "weaned", "weaponed", "weaponless", "wearable", "wearied", "wearier", "weariest", "weariful", "weariless", "wearing", "wearish", "wearisome", "weary", "wearying", "weather", "weather beaten", "weather bound", "weather wise", "weathered", "weatherly", "weaving", "web footed", "web toed", "webbed", "webbier", "webbiest", "webby", "wed", "wedded", "wedge shaped", "wedged", "wedgwood", "wedgy", "wee", "weeded", "weedier", "weediest", "weedless", "weedy", "weekday", "weekly", "weeny", "weepier", "weepiest", "weeping", "weepy", "weer", "weest", "weighable", "weighted", "weightier", "weightiest", "weightless", "weightlessness", "weighty", "weird", "welcome", "welcomed", "welcoming", "weldable", "weldless", "welfare", "welfarist", "well", "well acquainted", "well advised", "well affected", "well aimed", "well appointed", "well balanced", "well becoming", "well behaved", "well beloved", "well bred", "well built", "well chosen", "well conditioned", "well conducted", "well connected", "well coupled", "well covered", "well defined", "well derived", "well deserved", "well desired", "well developed", "well directed", "well disposed", "well dressed", "well earned", "well educated", "well endowed", "well entered", "well established", "well favoured", "well fed", "well formed", "well found", "well founded", "well gotten", "well groomed", "well grounded", "well heeled", "well hung", "well informed", "well intentioned", "well judged", "well kept", "well knit", "well known", "well lined", "well made", "well mannered", "well marked", "well meaning", "well meant", "well off", "well oiled", "well ordered", "well paid", "well placed", "well prepared", "well preserved", "well proportioned", "well read", "well regulated", "well respected", "well rounded", "well set", "well spent", "well spoken", "well stacked", "well tempered", "well thought of", "well thought out", "well timed", "well to do", "well tried", "well trodden", "well turned", "well upholstered", "well warranted", "well wishing", "well won", "well worn", "welsh", "wendish", "wernerian", "wersh", "wertherian", "wesleyan", "west", "westbound", "westering", "westerly", "western", "westernmost", "westmost", "westphalian", "westward", "westwardly", "wet", "wetter", "wetting", "wettish", "whacked", "whackier", "whackiest", "whacking", "whacky", "whapping", "what", "whate er", "whatever", "whatsoe er", "whatsoever", "wheaten", "wheeled", "wheeling", "wheezier", "wheeziest", "wheezing", "wheezy", "whelked", "whelped", "wheyey", "which", "whiggish", "whilom", "whimsical", "whinier", "whiniest", "whining", "whinny", "whiny", "whip tailed", "whiplike", "whipping", "whippy", "whirling", "whirring", "whiskered", "whiskery", "whispered", "whispering", "whist", "whistleable", "white", "white collar", "white faced", "white haired", "white hot", "white livered", "whited", "whitened", "whitewashed", "whitish", "whitsun", "whittling", "whity", "whole", "whole souled", "whole wheat", "wholesale", "wholesome", "wholistic", "whopping", "whoreson", "whorish", "whorled", "wick", "wicked", "wicker", "wide", "wide angle", "wide awake", "wide eyed", "wide open", "wide ranging", "wide screen", "wider", "widespread", "widest", "widish", "widowed", "wieldable", "wieldier", "wieldiest", "wieldy", "wifeless", "wifely", "wigged", "wigglier", "wiggliest", "wiggling", "wiggly", "wight", "wigless", "wiglike", "wild", "wild eyed", "wilful", "wilier", "wiliest", "will less", "willable", "willed", "willful", "willing", "willowy", "willy nilly", "willyard", "wilted", "wily", "wimpish", "wimpy", "wind borne", "wind broken", "wind shaken", "windburned", "winded", "windier", "windiest", "winding", "windless", "windowless", "windproof", "windswept", "windward", "windy", "wine", "winey", "wing footed", "winged", "wingless", "winglike", "winier", "winiest", "winking", "winnable", "winning", "winsome", "winter", "winterier", "winteriest", "winterweight", "wintery", "wintrier", "wintriest", "wintry", "winy", "wire haired", "wired", "wireless", "wiretap", "wiring", "wiry", "wise", "wised", "wiser", "wisest", "wishful", "wishy washy", "wising", "wispier", "wispiest", "wispy", "wistful", "witch hunt", "witching", "witchlike", "witchy", "withdrawing", "withdrawn", "withered", "withering", "withy", "witless", "witnessed", "witted", "wittier", "wittiest", "witting", "witty", "wizard", "wizardly", "wizen", "wizened", "woaded", "wobbling", "wobbly", "wobegone", "woebegone", "woeful", "woesome", "wolfish", "womanish", "womanless", "womanly", "wombed", "won", "wonder stricken", "wonder struck", "wonderful", "wondering", "wondrous", "wonky", "wonted", "wood", "wooded", "wooden", "wooden headed", "woodier", "woodiest", "woodless", "woods", "woodsy", "woodwind", "woodworking", "woody", "wool stapler", "woolen", "woollen", "woolly", "woolly headed", "woozier", "wooziest", "woozy", "word blind", "word for word", "word of mouth", "word perfect", "wordier", "wordiest", "wordless", "wordsworthian", "wordy", "work", "work shy", "workable", "workaday", "worked", "working", "working class", "workless", "workmanlike", "world", "world beater", "world shaking", "world shattering", "world weary", "worldly", "worldly minded", "worldly wise", "worldwide", "worm eaten", "worm wheel", "wormy", "worn", "worn out", "worried", "worrisome", "worrying", "worse", "worsened", "worsening", "worser", "worshipful", "worshipless", "worshipped", "worshipping", "worst", "worth", "worthful", "worthless", "worthwhile", "worthy", "would be", "wound", "wound up", "wounded", "wounding", "woundless", "woven", "wraparound", "wrapped", "wrapround", "wrath", "wrathful", "wrathless", "wreathed", "wreathless", "wrecked", "wreckful", "wrenching", "wretched", "wrier", "wriest", "wriggling", "wriggly", "wrinkled", "wrinklier", "wrinkliest", "wrinkly", "write in", "writhed", "writhen", "writhing", "written", "wrong", "wrong headed", "wronged", "wrongful", "wroth", "wrought", "wrought iron", "wrought up", "wry", "wry necked", "wud", "wuthering", "wycliffite", "xanthic", "xanthochroid", "xanthous", "xenogenetic", "xenomorphic", "xenophobic", "xerarch", "xeric", "xerographic", "xeromorphic", "xerophilous", "xerophytic", "xerotic", "xiphoid", "xiphosuran", "xylic", "xylographic", "xylographical", "xyloid", "xylophagous", "xylotomous", "yankee", "yare", "yarer", "yarest", "yauld", "yawning", "yclept", "year end", "year round", "yearling", "yearlong", "yearly", "yearning", "yeastlike", "yeasty", "yeld", "yelled", "yelling", "yellow", "yellow bellied", "yellowed", "yellowish", "yemen", "yeomanly", "yester", "yestern", "yielding", "yogic", "yokelish", "yolky", "yon", "yonder", "yorkist", "yoruban", "young", "young eyed", "younger", "youngish", "youthful", "yttric", "yttriferous", "yucky", "yugoslav", "yugoslavian", "yugoslavic", "yuletide", "yummy", "zairean", "zanier", "zanies", "zaniest", "zany", "zarathustrian", "zarathustric", "zealous", "zebrine", "zenithal", "zeolitic", "zero", "zero rated", "zeroth", "zestful", "zesty", "zeugmatic", "zibeline", "zig", "zigzag", "zillion", "zinciferous", "zincky", "zincographic", "zincographical", "zincoid", "zincous", "zincy", "zingiberaceous", "zingy", "zinky", "zionism", "zionist", "zippered", "zippy", "zirconic", "zodiacal", "zoic", "zonal", "zonary", "zonate", "zoning", "zonked", "zonular", "zoochemical", "zoographic", "zoographical", "zoolatrous", "zoological", "zoometric", "zoomorphic", "zoonal", "zoophagous", "zoophilous", "zoophobous", "zoophoric", "zooplastic", "zoroastrian", "zwinglian", "zygodactyl", "zygomorphic", "zygomorphous", "zygophyllaceous", "zygotic", "zymogenic", "zymolysis", "zymolytic", "zymotic", "zyrian"];
    }
  });

  // res/js/src/words/adverbs.json
  var require_adverbs = __commonJS({
    "res/js/src/words/adverbs.json"(exports, module) {
      module.exports = ["aback", "abaft", "abandonedly", "abashedly", "abeam", "abed", "abhorrently", "abidingly", "abiogenetically", "abjectly", "ablaze", "ablins", "abloom", "ably", "abnormally", "aboard", "abominably", "aboriginally", "aborning", "abortively", "about", "above", "above board", "abreast", "abroach", "abroad", "abruptly", "absently", "absolutely", "absorbedly", "absorbingly", "abstemiously", "abstinently", "abstractedly", "abstractively", "abstractly", "abstrusely", "absurdly", "abundantly", "abusively", "abysmally", "academically", "accelerando", "accentually", "acceptably", "acceptedly", "accessibly", "accessorily", "accidentally", "accommodatingly", "accordantly", "accordingly", "accountably", "accumulatively", "accurately", "accursedly", "accusatively", "accusingly", "acervately", "achingly", "achromatically", "acidly", "acock", "acoustically", "acquiescently", "acquiescingly", "acquisitively", "acridly", "acrimoniously", "acrobatically", "acrogenously", "acromial", "acropetally", "across", "across the board", "acrostically", "actinally", "actinically", "actionably", "actively", "actually", "actuarially", "acutely", "ad lib", "adagio", "adamantly", "adaptively", "additionally", "additively", "adeptly", "adequately", "adhesively", "adiabatically", "adjacently", "adjectivally", "adjectively", "adjunctively", "adjunctly", "adjustably", "administratively", "admirably", "admiringly", "admissibly", "admittedly", "adorably", "adoringly", "adown", "adrift", "adroitly", "adscititiously", "adulterously", "adumbratively", "advantageously", "adventitiously", "adventurously", "adverbially", "adversely", "advertently", "advisably", "advisedly", "aerially", "aerobically", "aerobiologically", "aerobiotically", "aerodynamically", "aeronautically", "aesthetic", "aesthetically", "afar", "affably", "affectedly", "affectingly", "affectionately", "affettuoso", "affirmatively", "affirmingly", "affluently", "affrontingly", "afield", "afire", "aflame", "afloat", "aflutter", "afoot", "afore", "aforetime", "afoul", "afresh", "aft", "after", "afternoons", "afterward", "afterwards", "again", "agape", "aggravatingly", "aggregate", "aggressively", "agilely", "agitatedly", "agitato", "agnatically", "ago", "agog", "agone", "agonisingly", "agonistically", "agonizedly", "agonizingly", "agreeably", "agriculturally", "aground", "aguishly", "ahead", "ahold", "ahorse", "ahorseback", "aiblins", "aimlessly", "air mail", "airily", "ajar", "ajee", "akimbo", "alarmedly", "alarmingly", "alas", "alee", "alertly", "alfresco", "algebraically", "alias", "alight", "alike", "aliunde", "all", "all fired", "all in", "all out", "all over", "allargando", "allegedly", "allegorically", "allegretto", "allegro", "allopathically", "allowably", "allowedly", "alluringly", "allusively", "almighty", "almost", "aloft", "alone", "along", "alongshore", "alongside", "aloof", "aloofly", "aloud", "alow", "alphabetically", "alphamerically", "alphanumerically", "already", "alright", "also", "alternately", "alternatively", "although", "altogether", "altruistically", "alway", "always", "amain", "amateurishly", "amatorially", "amazedly", "amazingly", "ambidextrously", "ambiguously", "ambitiously", "ambrosially", "amenably", "amiably", "amicably", "amidships", "amiss", "amitotically", "amok", "amorally", "amoroso", "amorously", "amorphously", "amphitheatrically", "amply", "amuck", "amusedly", "amusingly", "ana", "anachronically", "anachronistically", "anachronously", "anaerobically", "anaerobiotically", "anagogically", "anagrammatically", "anally", "analogically", "analogously", "analytically", "anamnestically", "anarchically", "anarthrously", "anatomically", "ancestrally", "anciently", "andante", "andantino", "anear", "anecdotally", "anemographically", "anes", "anesthetically", "anew", "angelically", "angerly", "angrily", "animally", "animatedly", "animatingly", "annoyingly", "annually", "anomalistically", "anomalously", "anon", "anonymously", "answerably", "antagonistically", "antecedently", "anteriorly", "anthropologically", "antichristianly", "anticipatively", "anticipatorily", "anticlimactically", "anticlockwise", "antipathetically", "antiphonally", "antiphonically", "antiphrastically", "antiquely", "antiseptically", "antisocially", "antistrophically", "antithetically", "anxiously", "any", "anyhow", "anyplace", "anything", "anytime", "anyway", "anyways", "anywhere", "anywise", "apace", "apart", "apathetically", "apeak", "aphoristically", "apically", "apiece", "apishly", "aplenty", "apocalyptically", "apodeictically", "apodictically", "apogamously", "apogeotropically", "apolitically", "apologetically", "apomictically", "apoplectically", "aport", "apostolically", "apothegmatically", "appallingly", "apparently", "appassionato", "appealingly", "appeasingly", "appellatively", "appetizingly", "applaudingly", "applicably", "appreciably", "appreciatively", "apprehensively", "appropriately", "approvingly", "approximately", "apropos", "aptly", "arbitrarily", "archaeologically", "archaically", "architecturally", "archly", "arco", "ardently", "arduously", "arguably", "argumentatively", "aridly", "aright", "aristocratically", "arithmetically", "around", "around the clock", "arrantly", "arrogantly", "arsy versy", "artfully", "articulately", "artificially", "artistically", "artlessly", "as", "ascetic", "ascetically", "asexually", "ashamedly", "ashore", "aside", "askance", "askew", "aslant", "asleep", "aslope", "aspiringly", "asprawl", "asquint", "assai", "assembled", "assentingly", "assertively", "assiduously", "assumably", "assumedly", "assumingly", "assuredly", "astern", "asthmatically", "astigmatically", "astonishingly", "astoundingly", "astraddle", "astray", "astride", "astringently", "astrologically", "astronomically", "astuciously", "astutely", "asunder", "asymmetrically", "asymptomatically", "asymptotically", "asynchronously", "at home", "atheistically", "athletically", "athwart", "atilt", "atmospherically", "atomistically", "atoningly", "atop", "atremble", "atrociously", "attentively", "attractingly", "attractively", "attributively", "atwain", "atweel", "atypically", "audaciously", "audibly", "aught", "augustly", "aurally", "auricularly", "aurorally", "auspiciously", "austerely", "authentically", "authoritatively", "autobiographically", "autocratically", "autodidactically", "autographically", "automatically", "automorphically", "autonomously", "autumnally", "ava", "availably", "availingly", "avariciously", "aversely", "avertedly", "avidly", "avoidably", "avowedly", "awa", "awash", "away", "awesomely", "awful", "awfully", "awheel", "awhile", "awkwardly", "awry", "axially", "axiomatically", "back", "backhand", "backhanded", "backstage", "backward", "backwardly", "backwards", "bad", "badly", "bafflingly", "baggily", "baldly", "balefully", "balkingly", "balletically", "bally", "balmily", "banally", "banefully", "bang", "banteringly", "baptismally", "barbarously", "bareback", "barebacked", "barefacedly", "barefoot", "barefooted", "barehanded", "bareheaded", "bareknuckle", "barelegged", "barely", "baresark", "barometrically", "barratrously", "basely", "bashfully", "basically", "bawdily", "beadily", "beamily", "beamingly", "bearably", "bearishly", "beastly", "beatifically", "beauteously", "beautifully", "becomingly", "bedward", "befittingly", "before", "beforehand", "beforetime", "begetter", "begrudgingly", "behaviorally", "behind", "belatedly", "believably", "believingly", "belike", "belive", "bellicosely", "belligerently", "below", "ben", "bene", "beneath", "beneficently", "beneficially", "benevolently", "benignantly", "benignly", "beseechingly", "beside", "besides", "besiegingly", "besottedly", "best", "bestially", "betimes", "better", "between", "between decks", "betweentimes", "betweenwhiles", "betwixt", "bewilderingly", "bewitchingly", "beyond", "biannually", "bias", "biblically", "bibliographically", "bibulously", "biennially", "bifariously", "big", "bigamously", "bilaterally", "bilingually", "biliously", "bimanually", "bimonthly", "binaurally", "binocularly", "biochemically", "biographically", "biologically", "bis", "bisexually", "bitingly", "bitter", "bitterly", "biyearly", "bizarrely", "blackguardly", "blackly", "blamably", "blameably", "blamed", "blamefully", "blamelessly", "blandly", "blankety", "blankety blank", "blankly", "blasphemously", "blasted", "blatantly", "bleakly", "blearily", "bleeding", "blessedly", "blind", "blindfold", "blindingly", "blindly", "blinking", "blissfully", "blisteringly", "blithely", "blithesomely", "bloodily", "bloodlessly", "bloodthirstily", "bloody", "blooming", "bluely", "bluffly", "blunderingly", "bluntly", "blushingly", "blusteringly", "boastfully", "bodily", "boiling", "boisterously", "boldly", "bolt", "bombastically", "bonnily", "bonny", "boorishly", "bootlessly", "boozily", "boringly", "botanically", "both", "boundlessly", "bounteously", "bountifully", "bovinely", "boyishly", "braggartly", "braggingly", "brainlessly", "brainsickly", "brashly", "brassily", "bravely", "brawly", "brazenly", "breadthways", "breadthwise", "breast deep", "breast high", "breathlessly", "breezily", "briefly", "bright", "brightly", "brilliantly", "briskly", "broad", "broad mindedly", "broadcast", "broadly", "broadside", "broadwise", "brokenly", "bronchoscopically", "brotherly", "brusquely", "brutally", "brutishly", "buckishly", "bucolically", "bulgingly", "bulkily", "bullishly", "bumpily", "bumptiously", "bunglingly", "buoyantly", "bureaucratically", "burglariously", "burningly", "bushily", "busily", "but", "buzzingly", "by", "by and by", "byronically", "cagily", "cajolingly", "calamitously", "calculably", "calculatingly", "calligraphy", "callously", "calmly", "calumniously", "candidly", "cankeredly", "cannibally", "cannily", "canny", "canonically", "canorously", "cantabile", "cantankerously", "cap a pie", "capably", "capaciously", "capitally", "capitularly", "capriccioso", "capriciously", "captiously", "cardinally", "carefully", "carelessly", "caressingly", "carnally", "carnivorously", "carousingly", "carpingly", "cash and carry", "casually", "casuistically", "catachrestically", "cataclysmically", "catalytically", "catastrophically", "catch as catch can", "catechetically", "catechumenically", "categorically", "cattily", "cattishly", "caudad", "caudally", "causally", "causatively", "causelessly", "caustically", "cautiously", "cavalierly", "cavernously", "ceaselessly", "celestially", "censoriously", "censurably", "centennially", "centesimally", "centrally", "centrically", "centrifugally", "centripetally", "cephalad", "ceremonially", "ceremoniously", "certain", "certainly", "certes", "certifiably", "chaffingly", "challengingly", "champion", "changeably", "changefully", "chaotically", "characteristically", "chargeably", "charily", "charitably", "charmingly", "charmlessly", "chastely", "chattily", "chauvinistically", "cheap", "cheaply", "cheekily", "cheerfully", "cheerily", "cheerlessly", "cheerly", "chemically", "cherubically", "chicly", "chidingly", "chief", "chiefly", "childishly", "chillingly", "chimerically", "chirpily", "chivalrously", "chock", "chock a block", "choicely", "cholerically", "chop chop", "choppily", "chorally", "christian", "christianly", "chromatically", "chronically", "chronologically", "chummily", "churchward", "churlishly", "circuitously", "circularly", "circumspectly", "circumstantially", "civically", "civilly", "clamantly", "clammily", "clamorously", "clandestinely", "clangorously", "clannishly", "classically", "clatteringly", "clean", "cleanly", "clear", "clearly", "clemently", "clerically", "clerkly", "cleverly", "climactically", "climatically", "clinically", "cliquishly", "clockwise", "close", "close up", "closely", "closer", "closest", "cloudily", "cloudlessly", "clownishly", "clumsily", "coarsely", "coastward", "coastwise", "coaxingly", "cockily", "cod", "coequally", "coercively", "coevally", "cogently", "cognisably", "cognitively", "cognizably", "coherently", "cohesively", "coincidentally", "coincidently", "cold", "cold bloodedly", "coldly", "collaterally", "collect", "collectedly", "collectively", "colloquially", "collusively", "colonially", "colossally", "colourably", "combatively", "comfortably", "comfortingly", "comically", "commandingly", "commendable", "commendably", "commensally", "commensurably", "commensurately", "commercially", "commodiously", "commonly", "communally", "communicably", "communicatively", "commutatively", "compactedly", "compactly", "companionably", "comparably", "comparatively", "compartmentally", "compassionately", "compatibly", "compendiously", "competently", "competitively", "complacently", "complainingly", "complaisantly", "completely", "complexly", "compliantly", "complicatedly", "composedly", "compositely", "comprehensibly", "comprehensively", "compulsively", "compulsorily", "compunctiously", "con", "concavely", "conceitedly", "conceivably", "concentrically", "conceptually", "concernedly", "concertedly", "concisely", "conclusively", "concomitantly", "concordantly", "concretely", "concurrently", "condescendingly", "condignly", "conditionally", "conducingly", "confer", "confessedly", "confidentially", "confidently", "confidingly", "conformably", "confoundedly", "confoundingly", "confusedly", "confusingly", "congenially", "congenitally", "congruently", "congruously", "conically", "conjecturally", "conjointly", "conjugally", "conjunctionally", "conjunctively", "conjunctly", "connaturally", "connectedly", "connectively", "connubial", "connubially", "conqueringly", "conscientiously", "conscionably", "consciously", "consecutive", "consecutively", "consensually", "consentaneously", "consequentially", "consequently", "conservatively", "considerably", "considerately", "considering", "consistently", "consolingly", "consonantly", "conspicuously", "conspiratorially", "conspiringly", "constantly", "constitutionally", "constrainedly", "constructively", "consubstantially", "consumedly", "consummately", "consumptively", "contagiously", "contemplatively", "contemporaneously", "contemptibly", "contemptuously", "contentedly", "contentiously", "contently", "conterminously", "contestingly", "contextually", "contiguously", "continently", "contingently", "continually", "continuedly", "continuously", "contra", "contractedly", "contractually", "contradictiously", "contradictively", "contradictorily", "contrapuntally", "contrarily", "contrariously", "contrariwise", "contrary", "contrastingly", "contritely", "controversially", "controvertibly", "contumaciously", "contumeliously", "conveniently", "conventionally", "conversably", "conversationally", "conversely", "convertibly", "convexedly", "convexly", "convincingly", "convivially", "convulsively", "cooingly", "cool", "coolly", "cooperatively", "coordinately", "copiously", "coquettishly", "cordially", "cornerwise", "corporally", "corporately", "corporeally", "corpulently", "correctly", "correlatively", "correspondently", "correspondingly", "corrosively", "corruptibly", "corruptly", "cosily", "cosmetically", "cosmically", "costively", "counter", "counteractively", "counterclockwise", "counterfeitly", "courageously", "course", "courteously", "cousin", "cousinly", "covertly", "covetingly", "covetously", "coweringly", "coxcombically", "coyly", "cozily", "crabbedly", "crabwise", "cracking", "craftily", "crankily", "crassly", "cravenly", "crazily", "creakily", "creamily", "creatively", "credibly", "creditably", "credulously", "creepily", "creepingly", "crescendo", "criminally", "cringingly", "crispily", "crisply", "crisscross", "critically", "croakily", "crookedly", "cross country", "cross legged", "crossly", "crosstown", "crossways", "crosswise", "crousely", "crucially", "crudely", "cruelly", "crushingly", "crustily", "cryptically", "cryptography", "cubically", "cubistically", "culpably", "culturally", "cumbrously", "cumulatively", "cunningly", "curiously", "currently", "currishly", "cursedly", "cursively", "cursorily", "curtly", "cussedly", "customarily", "cutely", "cuttingly", "cyclically", "cylindrically", "cynically", "cytogenetically", "d accord", "dactylically", "daftly", "daily", "daintily", "dam", "damagingly", "damn", "damnably", "damned", "damply", "dandily", "dang", "dangerously", "dankly", "dapperly", "daringly", "darkling", "darkly", "darn", "darned", "dartingly", "dash", "dashed", "dashingly", "dauntingly", "dauntlessly", "dawdlingly", "daylong", "days", "dazedly", "dazzlingly", "dead", "dead set", "deadly", "deafeningly", "deafly", "dear", "dearly", "deathlessly", "deathly", "deathy", "debasingly", "debatingly", "debauchedly", "debonairly", "decadently", "decani", "deceitfully", "deceivably", "deceivingly", "decent", "decently", "deceptively", "decidedly", "decimally", "decisively", "declaratively", "declaredly", "decorative", "decoratively", "decorously", "decreasingly", "decumbently", "decurrently", "decussately", "deductively", "deep", "deeply", "defectively", "defencelessly", "defenseless", "defenselessly", "defensibly", "defensively", "deferentially", "defiantly", "deficiently", "definably", "definitely", "definitively", "deformedly", "deftly", "degenerately", "deictically", "deistically", "dejectedly", "delayingly", "delectably", "deleteriously", "deliberately", "deliberatively", "delicately", "deliciously", "delightedly", "delightfully", "delinquently", "deliriously", "deliverly", "delusively", "dementedly", "demiurgically", "democratically", "demographically", "demoniacally", "demonstrably", "demonstratively", "demurely", "denominationally", "denominatively", "denotatively", "densely", "denumerably", "departmentally", "dependably", "dependently", "deplorably", "deploringly", "depravedly", "depravingly", "deprecatingly", "deprecatorily", "depreciatingly", "depressingly", "deridingly", "derisively", "derivatively", "dern", "derogatively", "derogatorily", "descriptively", "deservedly", "deservingly", "designedly", "designingly", "desirably", "desirously", "desolately", "despairingly", "desperately", "despicably", "despitefully", "despondently", "despondingly", "despotically", "destructively", "desultorily", "detachedly", "determinably", "determinedly", "detestably", "detractingly", "detractively", "detrimentally", "deuced", "deucedly", "developmental", "developmentally", "devilish", "devilishly", "deviously", "devotedly", "devotionally", "devouringly", "devoutly", "dewily", "dexterously", "dextrally", "dextrously", "diabolically", "diagnostically", "diagonally", "diagrammatically", "dialectally", "dialectically", "diamagnetically", "diametrally", "diametrically", "diaphanously", "diatonically", "dichotomously", "dictatorially", "didactically", "differentially", "differently", "difficultly", "diffidently", "diffusedly", "diffusely", "diffusively", "digestedly", "digestively", "digitally", "digitately", "digressively", "dilatorily", "diligently", "diminishingly", "diminutively", "dimly", "dingily", "diplomatically", "direct", "directly", "direfully", "direly", "dirt cheap", "dirtily", "disadvantageously", "disaffectedly", "disagreeably", "disappointedly", "disappointingly", "disapprovingly", "disarmingly", "disastrously", "disbelievingly", "discernibly", "discerningly", "discommodiously", "disconcertingly", "disconnectedly", "disconsolately", "discontentedly", "discontinuously", "discordantly", "discouragingly", "discourteously", "discreditably", "discreetly", "discretely", "discretionally", "discretionarily", "discriminately", "discriminatingly", "discriminatively", "discursively", "disdainfully", "disgracefully", "disguisedly", "disgustedly", "disgustfully", "disgustingly", "dishearteningly", "dishonestly", "dishonorably", "dishonourably", "disingenuously", "disinterestedly", "disjointedly", "disjunctively", "disloyally", "dismally", "disobediently", "disobligingly", "disorderly", "disparagingly", "disparately", "dispassionately", "dispensatorily", "dispersedly", "dispiritedly", "dispiteously", "displeasingly", "disposedly", "disposingly", "dispraisingly", "disproportionably", "disproportionally", "disproportionately", "disputably", "disputatiously", "disquietingly", "disquietly", "disregardfully", "disregarding", "disreputably", "disrespectfully", "disruptively", "dissemblingly", "dissentingly", "dissimilarly", "dissipatedly", "dissolutely", "dissolutive", "dissonantly", "dissuasively", "dissymmetrically", "distally", "distantly", "distastefully", "distinctively", "distinctly", "distinguishably", "distractedly", "distractingly", "distractively", "distressfully", "distressingly", "distributively", "distrustfully", "disturbingly", "dithyrambically", "ditto", "diurnally", "divergently", "diversely", "divertingly", "dividedly", "divinely", "divisibly", "divisively", "dizzily", "docilely", "doctrinally", "documentarily", "dog cheap", "doggedly", "doggishly", "doggo", "doggone", "dogmatically", "dolce", "dolefully", "doloroso", "dolorously", "doltishly", "domestically", "dominantly", "domineeringly", "dooms", "door to door", "dorsally", "dotingly", "double", "double quick", "doubly", "doubtfully", "doubtingly", "doubtless", "doucely", "doughtily", "dourly", "dowdily", "down", "down the line", "downheartedly", "downhill", "downrange", "downright", "downriver", "downstage", "downstairs", "downstate", "downstream", "downtown", "downward", "downwardly", "downwards", "downwind", "drably", "draftily", "dramatically", "drastically", "drawlingly", "dreadfully", "dreamily", "dreamingly", "dreamlessly", "drearily", "dressily", "drily", "dripping", "drizzly", "drolly", "droningly", "droopingly", "drowsily", "drudgingly", "drunkenly", "dry", "dryer", "dryly", "dualistically", "dually", "dubiously", "dubitably", "dubitatively", "ducally", "due", "dully", "duly", "dumbly", "dumpishly", "durably", "duskily", "dustily", "duteously", "dutifully", "duty free", "dwarfishly", "dynamically", "dynastically", "dyslogistically", "dyspeptically", "e er", "each", "eagerly", "earlier", "earliest", "early", "earnestly", "earthward", "earthwards", "easily", "east", "east by north", "easterly", "eastward", "eastwardly", "eastwards", "easy", "eath", "ebulliently", "eccentrically", "ecclesiastically", "eclectically", "ecologically", "economically", "ecstatically", "ecumenically", "edgeways", "edgewise", "edgily", "edictally", "edifyingly", "editorially", "educationally", "eerily", "effectively", "effectually", "effeminately", "effervescently", "effervescingly", "effetely", "efficaciously", "efficiently", "effortlessly", "effulgently", "effusively", "eft", "eftsoons", "egoistically", "egotistically", "egregiously", "eightfold", "eighth", "eighthly", "either", "elaborately", "elastically", "elatedly", "electively", "electrically", "electrolytically", "electrometrically", "electronically", "electrostatically", "elegantly", "elementally", "elementarily", "eligibly", "elliptically", "eloquently", "else", "elsewhere", "elsewhither", "elusively", "embarrassingly", "emblematically", "emergently", "eminently", "emotionally", "emphatically", "empirically", "emptily", "emulously", "enchantingly", "enclitically", "encomiastically", "encouragingly", "end on", "endearingly", "endemic", "endemically", "endlessly", "endlong", "endosmotically", "endurably", "enduringly", "endways", "endwise", "energetically", "enforcedly", "engagingly", "enharmonically", "enigmatically", "enjoyably", "enlargedly", "enormously", "enough", "enow", "ensemble", "enterprisingly", "entertainingly", "enthusiastically", "enticingly", "entirely", "entomologically", "entreatingly", "enviably", "enviously", "environmentally", "envyingly", "epexegetically", "ephemerally", "epidemically", "epigrammatically", "episodically", "equably", "equally", "equanimously", "equatorially", "equidistantly", "equitably", "equivalently", "equivocally", "erectly", "erelong", "erenow", "erewhile", "ergo", "erotically", "errantly", "erratically", "erringly", "erroneously", "erst", "erstwhile", "eruditely", "esoterically", "especially", "essentially", "esthetically", "estimably", "esuriently", "eternally", "ethereally", "ethically", "ethnically", "ethnocentrically", "ethnologically", "ethologically", "etymologically", "eugenically", "euhemeristically", "eulogistically", "euphemistically", "euphoniously", "euphuistically", "evanescently", "evangelically", "evasively", "even", "even handedly", "evenings", "evenly", "evens", "eventfully", "eventually", "ever", "everlastingly", "evermore", "everyplace", "everyway", "everywhen", "everywhere", "evidentially", "evidently", "evil", "evil mindedly", "evilly", "evocatively", "exactingly", "exactly", "exaggeratedly", "exaltedly", "exceeding", "exceedingly", "excellently", "excelsior", "exceptionably", "exceptionally", "excessively", "exchangeably", "excitably", "excitedly", "excitingly", "exclusively", "excruciatingly", "excursively", "excusably", "execrably", "execratively", "executively", "exegetically", "exemplarily", "exhaustively", "exhibitively", "exhilaratingly", "exigently", "exiguously", "eximiously", "existentially", "exorbitantly", "exoterically", "exothermally", "exothermically", "exotically", "expansively", "expectably", "expectantly", "expectingly", "expediently", "expeditiously", "expensively", "experientially", "experimentally", "expertly", "explanatorily", "explicitly", "explosively", "exponentially", "express", "expressionlessly", "expressively", "expressly", "exquisitely", "extemporaneously", "extemporarily", "extempore", "extendedly", "extensionally", "extensively", "extenuatingly", "exteriorly", "externally", "extorsively", "extortionately", "extra", "extraneously", "extraordinarily", "extravagantly", "extremely", "extrinsically", "exuberantly", "exultantly", "exultingly", "fabulously", "facetiously", "facially", "facilely", "factiously", "factitiously", "factually", "facultatively", "fadedly", "fadelessly", "fain", "faintly", "fair", "fairily", "fairly", "faithfully", "faithlessly", "fallaciously", "fallalishly", "fallibly", "false", "falsely", "falteringly", "familiarly", "famously", "fanatically", "fancifully", "fantastically", "fanwise", "far", "far forth", "farcically", "farther", "farthest", "fascinatingly", "fashionably", "fast", "faster", "fastest", "fastidiously", "fatalistically", "fatally", "fatefully", "fatidically", "fatly", "fatuously", "faultily", "faultlessly", "favorably", "favourably", "fawningly", "fearfully", "fearlessly", "fearsomely", "feasible", "feasibly", "featly", "fecklessly", "feckly", "federally", "feeble mindedly", "feebly", "feelingly", "feignedly", "felicitously", "felly", "feloniously", "femininely", "fermentation", "ferociously", "fertilely", "fervently", "fervidly", "festally", "festinately", "festively", "fetchingly", "feudally", "feverishly", "fictionally", "fictitiously", "fiducially", "fiendishly", "fiercely", "fierily", "fifth", "fifthly", "fifty fifty", "figuratively", "filchingly", "filially", "filthily", "finally", "financially", "fine", "fined", "finely", "finest", "finically", "finitely", "firm", "firmly", "first", "first class", "first hand", "first rate", "firstly", "fiscally", "fishily", "fissiparously", "fitfully", "fitly", "fittingly", "fivefold", "fixedly", "flabbily", "flaccidly", "flagitiously", "flagrantly", "flamboyantly", "flamingly", "flaringly", "flashily", "flat", "flatling", "flatly", "flatteringly", "flatulently", "flatways", "flatwise", "flauntingly", "flawlessly", "fleeringly", "fleetly", "flexibly", "flickeringly", "flightily", "flimsily", "flinchingly", "flintily", "flip flap", "flip flop", "flippantly", "flipping", "flirtatiously", "flirtingly", "floatingly", "flop", "floppily", "florally", "floridly", "floristically", "flourishingly", "floutingly", "flowingly", "fluently", "fluidly", "flush", "flying", "foamily", "foamingly", "focally", "foggily", "fondly", "foolhardily", "foolishly", "foppishly", "forbearingly", "forbiddenly", "forbiddingly", "forby", "forcedly", "forcefully", "forcibly", "fore", "forebodingly", "forehand", "forehanded", "foreknowingly", "foremost", "forensically", "forever", "forevermore", "forgetfully", "forgivably", "forgivingly", "forkedly", "forlornly", "formally", "formerly", "formidably", "formlessly", "forrad", "forrader", "forsakenly", "forsooth", "forte", "forth", "forthright", "forthrightly", "forthwith", "fortissimo", "fortnightly", "fortuitously", "fortunately", "forward", "forwardly", "forwards", "forwhy", "forzando", "foul", "foully", "fourfold", "foursquare", "fourth", "fourth class", "fourthly", "foxily", "fractionally", "fractiously", "fragilely", "fragmentarily", "fragmentary", "fragrantly", "frailly", "frankly", "frantically", "franticly", "fraternally", "fraudfully", "fraudulently", "freakishly", "free", "free hand", "freely", "freest", "frenetically", "frenziedly", "frequently", "fresh", "freshly", "fretfully", "fridays", "frighteningly", "frightfully", "frigidly", "friskily", "friskingly", "frivolously", "fro", "frolicsomely", "frontally", "frontlessly", "frontward", "frontwards", "frostily", "frothily", "frowardly", "frowningly", "frugally", "fruitfully", "fruitlessly", "frumpily", "frumpishly", "fugally", "fugato", "fugitively", "fulgently", "fuliginously", "full", "full faced", "full sail", "full time", "fully", "fulsomely", "fumblingly", "functionally", "fundamentally", "funereally", "funnily", "funny", "furioso", "furiously", "further", "furthermore", "furthest", "furtively", "fussily", "fustily", "futilely", "fuzzily", "gaily", "gainfully", "gainly", "gallantly", "galley west", "gallice", "gallingly", "galvanically", "gamely", "gapingly", "garishly", "garrulously", "gaspingly", "gastronomically", "gauchely", "gaudily", "gauntly", "gawkily", "gelidly", "genealogically", "generally", "generically", "generously", "genetically", "genially", "geniculately", "genitivally", "genotypically", "genteelly", "gently", "genuinely", "geocentrically", "geodetically", "geognostically", "geographically", "geologically", "geometrically", "geopolitically", "geotactically", "geotropically", "germanely", "germanically", "gey", "ghastfully", "ghastly", "ghoulishly", "gibbously", "gibingly", "giddily", "giftedly", "gigantically", "gingerly", "giocoso", "girlishly", "giusto", "glacially", "gladly", "gladsomely", "glamorously", "glancingly", "glandularly", "glaringly", "glassily", "gleefully", "glibly", "glidingly", "glimmeringly", "glissando", "glisteringly", "glitteringly", "gloatingly", "globally", "globularly", "gloomily", "gloriously", "glossarially", "glossily", "gloweringly", "glowingly", "glumly", "glutinously", "gluttonously", "gnashingly", "gnathonically", "gnostically", "goddam", "goddamn", "goddamned", "godlessly", "goldarn", "goldenly", "goniometrically", "good", "good humouredly", "good naturedly", "goofily", "gorgeously", "gorily", "gracefully", "gracelessly", "graciously", "gradatim", "gradationally", "gradually", "grammatically", "gramophonically", "grandiloquently", "grandiosely", "grandioso", "grandly", "granularly", "graphemically", "graphically", "graphicly", "graspingly", "gratefully", "gratifyingly", "gratingly", "gratis", "gratuitously", "grave", "gravely", "gravitationally", "greasily", "great", "greatly", "greedily", "greenly", "gregariously", "greyly", "grievingly", "grievously", "grimily", "grimly", "grindingly", "grinningly", "gripingly", "groggily", "gropingly", "gross", "grossly", "grotesquely", "grouchily", "groundedly", "groundlessly", "growlingly", "grubbily", "grudgingly", "gruesomely", "gruffly", "grumblingly", "grumly", "grumpily", "gruntingly", "guardedly", "gude", "guessingly", "guilefully", "guilelessly", "guiltily", "guiltlessly", "gummy", "gushingly", "gustily", "gutturally", "gymnastically", "gyrally", "habitably", "habitually", "haggardly", "haggishly", "half", "half and half", "half heartedly", "half hourly", "half price", "half time", "half wittedly", "half yearly", "halfway", "haltingly", "hand to hand", "hand to mouth", "handily", "handsomely", "haphazard", "haphazardly", "haplessly", "haply", "happen", "happily", "harassedly", "harassingly", "hard", "hardheadedly", "hardily", "hardly", "harmfully", "harmlessly", "harmonically", "harmoniously", "harrowingly", "harshly", "harum scarum", "hastily", "hatefully", "haughtily", "hauntingly", "hazardously", "hazily", "head on", "headfirst", "headforemost", "headlong", "heads", "healingly", "healthfully", "healthily", "heap", "heaps", "heartily", "heartlessly", "heatedly", "heathenishly", "heavenward", "heavenwards", "heavily", "heavy", "hebdomadally", "hebraically", "hectically", "heedfully", "heedlessly", "heftily", "heigh", "heinously", "heliacally", "helically", "heliocentrically", "heliographically", "heliotropically", "hellish", "hellishly", "helluva", "helpfully", "helplessly", "helter skelter", "hence", "henceforth", "henceforward", "heraldically", "here", "hereabout", "hereabouts", "hereafter", "hereat", "hereby", "hereditarily", "herein", "hereinafter", "hereinbefore", "hereof", "hereon", "heretically", "hereto", "heretofore", "hereunder", "hereunto", "hereupon", "herewith", "heritably", "hermaphroditically", "hermeneutically", "hermetically", "heroically", "herpetologically", "hesitantly", "hesitatingly", "heterogeneously", "heuristically", "hexagonally", "hiddenly", "hideously", "hierarchically", "hieroglyphically", "higgledy piggledy", "high", "high handedly", "high mindedly", "high up", "higher up", "highly", "hilariously", "hinderingly", "hindward", "hissingly", "histogenetically", "histologically", "historically", "historiographically", "histrionically", "hitchily", "hither", "hitherto", "hitherward", "hoarily", "hoarsely", "hoggishly", "holily", "holistically", "hollowly", "holus bolus", "home", "homeopathically", "homeward", "homewards", "homiletically", "homoeopathically", "homogeneously", "homologically", "homologous", "homonymously", "honest", "honestly", "honorably", "honorifically", "honourably", "hooly", "hopefully", "hopelessly", "hopingly", "horizontally", "horrendously", "horribly", "horridly", "horrifically", "horrifyingly", "hortatively", "hortatorily", "hospitably", "hostilely", "hot", "hotfoot", "hotheadedly", "hotly", "hottest", "hourlong", "hourly", "hoveringly", "how", "howe er", "however", "howling", "howsoever", "huffily", "huffishly", "hugely", "hugeously", "hugger mugger", "humanely", "humanly", "humblingly", "humbly", "humidly", "humiliatingly", "humorously", "hundredfold", "hungrily", "hurriedly", "hurry scurry", "hurry skurry", "hurryingly", "hurtfully", "hurtlessly", "huskily", "hydraulically", "hydrographically", "hydrologically", "hydroponically", "hydrostatically", "hyetographically", "hygienically", "hyperbatically", "hyperbolically", "hypercritically", "hypnotically", "hypocoristically", "hypocritically", "hypodermically", "hypostatically", "hypothetically", "hysterically", "iambically", "ibidem", "ichnographically", "icily", "iconically", "idealistically", "ideally", "ideationally", "identically", "identifiably", "ideographically", "ideologically", "idiomatically", "idiopathically", "idiosyncratically", "idiotically", "idly", "idolatrously", "idyllically", "ignobly", "ignominiously", "ignorantly", "ill", "ill advisedly", "ill naturedly", "illatively", "illaudably", "illegally", "illegibly", "illegitimately", "illiberally", "illicitly", "illimitably", "illiterately", "illogically", "illuminatingly", "illusively", "illustratively", "illustriously", "illy", "imaginably", "imaginatively", "imbricately", "imitatively", "immaculately", "immanely", "immanence", "immanently", "immaterially", "immaturely", "immeasurably", "immediately", "immemorially", "immensely", "immethodically", "imminently", "immitigably", "immoderately", "immodestly", "immorally", "immortally", "immovably", "immunologically", "immutably", "impalpably", "impartially", "impartibly", "impassably", "impassibly", "impassively", "impatiently", "impavidly", "impeccably", "impecuniously", "impenetrably", "impenitently", "imperatively", "imperceptibly", "imperfectly", "imperialistically", "imperially", "imperiously", "imperishably", "impermanently", "impermeably", "impermissibly", "impersonally", "impertinently", "imperturbably", "imperviously", "impetuously", "impiously", "impishly", "implacably", "implausibly", "implicatively", "implicitly", "impliedly", "imploringly", "impolitely", "impoliticly", "importantly", "importunately", "importunely", "imposingly", "impossibly", "impotently", "impracticably", "imprecisely", "impregnably", "impressionistically", "impressively", "imprimis", "improbably", "impromptu", "improperly", "improvably", "improvidently", "improvingly", "imprudently", "impudently", "impulsively", "impurely", "imputably", "imputatively", "in flight", "in house", "inaccessibly", "inaccurately", "inactively", "inadequately", "inadmissibly", "inadvertently", "inadvisably", "inalienably", "inalterably", "inanely", "inanimately", "inapplicably", "inappositely", "inappreciably", "inappreciatively", "inapproachably", "inappropriately", "inaptly", "inarticulately", "inartificially", "inartistically", "inattentively", "inaudibly", "inauspiciously", "inboard", "inby", "incalculably", "incandescently", "incapably", "incautiously", "incessantly", "incestuously", "inchmeal", "inchoately", "incidentally", "incipiently", "incisively", "incitingly", "inclemently", "inclusively", "incog", "incognita", "incognito", "incoherently", "incombustibly", "incommensurably", "incommensurately", "incommodiously", "incommunicably", "incommunicado", "incommunicatively", "incommutably", "incomparably", "incompatibly", "incompetently", "incompletely", "incomprehensibly", "inconceivably", "inconclusively", "incongruously", "inconsequentially", "inconsequently", "inconsiderably", "inconsiderately", "inconsistently", "inconsolably", "inconsonantly", "inconspicuously", "inconstantly", "inconsumably", "incontestably", "incontinent", "incontinently", "incontrollably", "incontrovertibly", "inconveniently", "inconvertibly", "incorporeally", "incorrectly", "incorrigibly", "incorruptibly", "incorruptly", "increasingly", "incredibly", "incredulously", "inculpably", "incumbently", "incurably", "incuriously", "indecently", "indecisively", "indeclinably", "indecorously", "indeed", "indefatigably", "indefeasibly", "indefensibly", "indefinably", "indefinitely", "indelibly", "indelicately", "indemonstrably", "independently", "indescribably", "indestructibly", "indeterminably", "indeterminately", "indicatively", "indifferently", "indigenously", "indigently", "indigestibly", "indignantly", "indirectly", "indiscernibly", "indiscreetly", "indiscriminately", "indispensably", "indisputably", "indissolubly", "indistinctively", "indistinctly", "indistinguishably", "individualistically", "individually", "indivisibly", "indolently", "indomitably", "indoors", "indubitably", "inductively", "indulgently", "industrially", "industriously", "ineffably", "ineffaceably", "ineffectively", "ineffectually", "inefficaciously", "inefficiently", "inelegantly", "ineligibly", "ineloquently", "ineluctably", "ineptly", "inequitably", "ineradicably", "inerasably", "inerrable", "inerrably", "inertly", "inescapably", "inestimably", "inevitably", "inexactly", "inexcusably", "inexhaustibly", "inexorably", "inexpediently", "inexpensively", "inexpertly", "inexpiably", "inexplicably", "inexpressibly", "inexpugnably", "inextinguishably", "inextricably", "infallibly", "infamously", "infectiously", "inferentially", "inferiorly", "infernally", "infinitely", "infinitesimally", "infinitively", "infirmly", "inflammably", "inflexibly", "influentially", "informally", "informatively", "infra", "infrangibly", "infrequently", "infuriatingly", "ingeniously", "ingenuously", "ingloriously", "ingrately", "ingratiatingly", "inharmoniously", "inherently", "inhospitably", "inhumanely", "inhumanly", "inimically", "inimitably", "iniquitously", "initially", "injudiciously", "injunctively", "injuriously", "inland", "inly", "innately", "innocently", "innocuously", "innoxiously", "innumerably", "inodorously", "inoffensively", "inopportunely", "inordinately", "inorganically", "inquietly", "inquiringly", "inquisitively", "inquisitorially", "insalubriously", "insanely", "insatiably", "insatiately", "inscriptively", "inscrutably", "insecurely", "insensately", "insensibly", "insensitively", "inseparably", "inshore", "inside", "inside out", "insidiously", "insignificantly", "insincerely", "insinuatingly", "insipidly", "insipiently", "insistently", "insolently", "insolubly", "insolvably", "insomuch", "insouciantly", "inspectingly", "inspirationally", "inspiringly", "inspiritingly", "instant", "instantaneously", "instanter", "instantly", "instead", "instigatingly", "instinctively", "instinctually", "institutionally", "institutively", "instructively", "instrumentally", "insubordinately", "insubstantially", "insufferably", "insufficiently", "insularly", "insultingly", "insuperably", "insupportably", "insuppressibly", "insurmountably", "insusceptibly", "intangibly", "integrally", "intellectually", "intelligently", "intelligibly", "intemerately", "intemperately", "intendedly", "intensely", "intensively", "intentionally", "intently", "interchangeably", "intercolonially", "interdentally", "interdepartmental", "interdepartmentally", "interestedly", "interestingly", "interferingly", "interim", "interiorly", "interjectionally", "intermediately", "interminably", "intermittently", "intermittingly", "internally", "internationally", "interpretatively", "interpretively", "interradially", "interrogatively", "interruptedly", "interspatially", "interstate", "intertwine", "intertwiningly", "intertwistingly", "intimately", "intolerably", "intolerantly", "intractably", "intramuscularly", "intransigently", "intransitively", "intravenously", "intrepidly", "intricately", "intriguingly", "intrinsically", "introductorily", "introrsely", "introspectively", "intrusively", "intuitively", "inurbanely", "invalidly", "invaluably", "invariably", "invectively", "inventively", "inventorially", "inversely", "inveterately", "invidiously", "invigoratingly", "invincibly", "inviolably", "inviolately", "invisibly", "invitingly", "involuntarily", "invulnerably", "inward", "inwardly", "inwards", "irascibly", "irately", "irefully", "irenically", "iridescently", "irksomely", "ironically", "irrationally", "irreclaimably", "irreconcilably", "irrecoverably", "irrecusably", "irredeemably", "irreducibly", "irrefragably", "irrefrangibly", "irrefutably", "irregularly", "irrelatively", "irrelevantly", "irreligiously", "irremeably", "irremediably", "irremovably", "irreparably", "irrepealably", "irrepressibly", "irreproachably", "irresistibly", "irresolutely", "irrespective", "irrespectively", "irresponsibly", "irretrievably", "irreverently", "irreversibly", "irrevocably", "irritably", "irruptively", "isochronally", "isochronously", "isometrically", "isostatically", "isothermally", "issuably", "ita", "item", "iteratively", "itinerantly", "iwis", "jabberingly", "jacobinically", "jadedly", "jaggedly", "jarringly", "jauntily", "jawbreakingly", "jazzily", "jealously", "jeeringly", "jejunely", "jeopardously", "jerkily", "jestingly", "jesuitically", "jewishly", "jimply", "jingoistically", "jocosely", "jocular", "jocularly", "jocundly", "jointly", "jokingly", "jollily", "jolly", "joltingly", "journalistically", "jovially", "joyfully", "joylessly", "joyously", "jubilantly", "judaically", "judaistically", "judicially", "judiciously", "jugglingly", "juicily", "jumblingly", "jumpily", "jurally", "juridically", "juristically", "just", "just in time", "justifiably", "justly", "juttingly", "juvenilely", "kaleidoscopically", "keenly", "killingly", "kinda", "kindheartedly", "kindly", "kinetically", "kingly", "kinkily", "kitty cornered", "knavishly", "knee deep", "knee high", "knowingly", "knowledgably", "knowledgeably", "labially", "laboriously", "lachrymosely", "lackadaisically", "laconically", "laggardly", "laggingly", "laigh", "lambently", "lamely", "lamentably", "lamentingly", "lanceolately", "landward", "landwards", "languidly", "languishingly", "languorously", "lankily", "lankly", "larcenously", "large", "largely", "larghetto", "largo", "lark", "lasciviously", "last", "lastingly", "lastly", "late", "lately", "latently", "later", "laterally", "latest", "latterly", "laudably", "laughably", "laughingly", "lavishly", "lawfully", "lawlessly", "laxly", "lazily", "leadenly", "leally", "leanly", "learnedly", "least", "leastways", "leastwise", "lecherously", "leeringly", "leeward", "left", "left handed", "left handedly", "leftward", "leftwardly", "leftwards", "legalistically", "legally", "legato", "legibly", "legislatively", "legitimately", "leisurely", "lengthily", "lengthways", "lengthwise", "leniently", "lentamente", "lenticularly", "lentissimo", "lento", "less", "lest", "let alone", "lethally", "lethargically", "levelling", "levelly", "lewdly", "lexically", "libellously", "liberally", "libidinously", "licentiously", "licht", "lichtly", "licitly", "lickerishly", "lickety split", "lief", "lieve", "lifelessly", "light", "light headedly", "light heartedly", "lightly", "lightsomely", "like", "likely", "likewise", "limitedly", "limitlessly", "limpidly", "limpingly", "limply", "lineally", "linearly", "lingeringly", "lingually", "linguistically", "liquidly", "lispingly", "lissomely", "lissomly", "listlessly", "literalistically", "literally", "literarily", "literately", "literatim", "lithely", "litho", "lithographically", "litigiously", "little", "liturgically", "live", "livelily", "lively", "lividly", "loads", "loathingly", "loathly", "loathsomely", "locally", "loftily", "logarithmically", "logically", "logistically", "logographically", "loiteringly", "lollingly", "lonesomely", "long", "long ago", "long distance", "longer", "longest", "longingly", "longitudinally", "longly", "longways", "longwise", "loose", "loosely", "loosest", "lopsidedly", "loquaciously", "lordly", "losingly", "lot", "lots", "loud", "loudly", "loungingly", "louringly", "lousily", "loutishly", "lovably", "loveably", "lovelily", "lovingly", "low", "lower", "loweringly", "lowest", "lowlily", "lowse", "loyally", "lubber", "lubberly", "lucidly", "luckily", "lucklessly", "lucratively", "luculently", "ludicrously", "lugubriously", "lukewarmly", "lumberly", "luminously", "lumpily", "lumpishly", "luridly", "lusciously", "lushly", "lustfully", "lustily", "lustrously", "luxuriantly", "luxuriously", "lyingly", "lymphatically", "lyrically", "macaronically", "macroscopically", "madly", "maestoso", "magically", "magisterially", "magnanimously", "magnetically", "magnificently", "magniloquently", "mainly", "mair", "majestically", "maladroitly", "malapertly", "malaprop", "malapropos", "malcontentedly", "malevolently", "maliciously", "malignantly", "malignly", "man to man", "manageably", "manfully", "mangily", "maniacally", "manifestly", "manifoldly", "manly", "manneristically", "mannerly", "mannishly", "manually", "marginally", "maritally", "markedly", "martially", "marvellously", "marvelously", "masculinely", "masochistically", "massively", "masterfully", "matchlessly", "materialistically", "materially", "maternally", "mathematically", "matrilineally", "matrimonially", "maturely", "mawkishly", "maximally", "maybe", "mayhap", "mazily", "meagerly", "meagrely", "meanderingly", "meaningfully", "meaninglessly", "meaningly", "meanly", "meantime", "meanwhile", "measurably", "measuredly", "mechanically", "mechanistically", "medially", "mediately", "medically", "medicinally", "meditatively", "meekly", "meetly", "mellifluously", "mellow", "mellowly", "melodically", "melodiously", "melodramatically", "meltingly", "memorably", "memoriter", "menacingly", "mendaciously", "menially", "mentally", "mercenarily", "mercifully", "mercilessly", "mercurially", "merely", "meretriciously", "meritoriously", "meroblastically", "merrily", "mesally", "mesially", "messily", "metabolically", "metallically", "metaphorically", "metaphysically", "meteorically", "meteorologically", "methodically", "methodologically", "meticulously", "metonymically", "metrically", "mezzo", "mickle", "microscopically", "middling", "midmost", "midnight", "midnightly", "midships", "midway", "mightily", "mighty", "mildly", "mile", "militantly", "militarily", "milkily", "millesimally", "millionfold", "mincingly", "mindfully", "mindlessly", "mineralogically", "minimally", "ministerially", "minutely", "miraculously", "mirthfully", "mirthlessly", "misanthropically", "misapprehensively", "mischievously", "miserably", "misguidedly", "misleadingly", "mistakenly", "mistily", "mistrustfully", "mistrustingly", "mitotically", "mixedly", "mnemonically", "moanfully", "mobs", "mockingly", "moderately", "moderato", "modernly", "modestly", "modishly", "modulo", "moistly", "molecularly", "moltenly", "molto", "momentarily", "momently", "momentously", "monastically", "mondays", "monetarily", "mongrelly", "monopodially", "monotonously", "monstrously", "monthly", "monumentally", "moodily", "mopingly", "moralistically", "morally", "morbidly", "mordaciously", "mordantly", "more", "moreover", "morganatically", "morning", "mornings", "moronically", "morosely", "morphologically", "mortally", "mosaically", "mosso", "most", "mostly", "mother liquor", "motherless", "motherly", "motionlessly", "mournfully", "mourningly", "movably", "moveably", "movelessly", "movingly", "much", "mucking", "muckle", "muddily", "mulishly", "multifariously", "multilaterally", "multiply", "multitudinously", "mumblingly", "mundanely", "municipally", "munificently", "murderously", "murkily", "murmurously", "muscularly", "mushily", "musically", "musingly", "mustily", "mutably", "mutationally", "mutely", "mutinously", "mutteringly", "mutually", "muzzily", "mysteriously", "mystically", "mythically", "mythologically", "nae", "naething", "naively", "nakedly", "namely", "narcotically", "narratively", "narrow mindedly", "narrowly", "nary", "nasally", "nastily", "natch", "natheless", "nationalistically", "nationally", "nationwide", "natively", "nattily", "naturalistically", "naturally", "naught", "naughtily", "nauseatingly", "nauseously", "nautically", "navigably", "nay", "ne er", "near", "nearby", "nearer", "nearest", "nearly", "neatly", "nebulously", "necessarily", "necessitously", "necromantically", "needfully", "needily", "needlessly", "needs", "nefariously", "negatively", "neglectfully", "neglectingly", "negligently", "negligibly", "neither", "neologically", "nervelessly", "nervily", "nervously", "neurobiological", "neurotically", "neutrally", "never", "nevermore", "nevertheless", "new", "newfangledly", "newly", "next", "next door", "nicely", "niggardly", "nigh", "nightlong", "nightly", "nightmarishly", "nights", "nimbly", "ninefold", "ninth", "ninthly", "nippingly", "nobbily", "nobbut", "nobly", "nocturnally", "nocuously", "noddingly", "nohow", "noiselessly", "noisily", "noisomely", "nomadically", "nominally", "nominatively", "nomographically", "nonchalantly", "none", "nonetheless", "nonsensically", "nope", "nor east", "nor west", "normally", "normatively", "north", "northerly", "northward", "northwards", "nosily", "nostalgically", "not", "notably", "notarially", "notedly", "noteworthily", "nothing", "noticeably", "notionally", "notoriously", "notwithstanding", "noumenally", "nourishingly", "now", "nowadays", "noway", "nowhence", "nowhere", "nowhither", "nowise", "noxiously", "nudely", "numbingly", "numbly", "numerically", "numerously", "numismatically", "nutritionally", "nutritiously", "nutritively", "nuttily", "o clock", "o er", "oafishly", "obdurately", "obediently", "objectionably", "objectively", "obligatorily", "obligingly", "obliquely", "obliviously", "obnoxiously", "obscenely", "obscurely", "obsequiously", "observably", "observantly", "observingly", "obsessionally", "obsessively", "obsoletely", "obstetrically", "obstinately", "obstreperously", "obstructively", "obtrusively", "obtusely", "obviously", "occasionally", "occidentally", "occultly", "occupationally", "ochlocratically", "ocker", "octagonally", "oddly", "odiously", "odoriferously", "off", "off key", "off the cuff", "off the record", "offendedly", "offensively", "offhand", "offhanded", "offhandedly", "officially", "officiously", "offishly", "offshore", "offside", "oft", "often", "oftener", "oftentimes", "ok", "ok d", "okay", "okey doke", "ominously", "omnipotently", "omnisciently", "omnivorously", "on", "on the spot", "onboard", "once", "one handed", "one on one", "one sidedly", "one time", "onerously", "only", "onshore", "onside", "onstage", "ontogenetically", "ontogenically", "onward", "onwards", "opaquely", "open mindedly", "openly", "operationally", "operatively", "operosely", "opinionatively", "opportunely", "opposite", "oppositely", "oppressively", "opprobriously", "optatively", "optically", "optimally", "optimistically", "optionally", "opulently", "oracularly", "orally", "oratorically", "orbicularly", "orderly", "ordinarily", "organically", "organisationally", "organizationally", "orientally", "originally", "ornamentally", "ornately", "ornithologically", "orthogonally", "orthographically", "osmotically", "ostensibly", "ostensively", "ostentatiously", "other", "othergates", "otherwhere", "otherwhile", "otherwise", "ought", "out", "out of bounds", "out of date", "out of doors", "out of hand", "outboard", "outdoors", "outlandishly", "outrageously", "outright", "outside", "outstandingly", "outstation", "outward", "outwardly", "outwards", "ovally", "over", "overall", "overarm", "overbearingly", "overboard", "overfar", "overflowingly", "overfondly", "overfreely", "overhand", "overhastily", "overhead", "overland", "overleaf", "overlong", "overly", "overmuch", "overnight", "overpoweringly", "overrashly", "oversea", "overseas", "overside", "overtime", "overtly", "overwhelmingly", "oviparously", "owlishly", "pacifically", "painfully", "painlessly", "painstakingly", "palatably", "palatially", "palely", "palewise", "palingenetically", "pallidly", "palmately", "palpably", "paltrily", "paniculately", "pantingly", "pantomimically", "papally", "papistically", "parabolically", "paradigmatically", "paradoxically", "parallelly", "paramountly", "paraphrastically", "parasitically", "paratactically", "parcel", "parchedly", "pardi", "pardonably", "pardy", "parentally", "parenterally", "parenthetically", "parlando", "parliamentarily", "parlous", "parochially", "parrot fashion", "parsimoniously", "part", "part time", "partially", "participantly", "participially", "particularly", "partitively", "partly", "passably", "passim", "passing", "passionately", "passively", "past", "pastorally", "pat", "patchily", "patently", "paternally", "pathetically", "pathologically", "patiently", "patricianly", "patrilineally", "patrimonially", "patriotically", "patronisingly", "patronizingly", "pausefully", "pauselessly", "pausingly", "peaceably", "peacefully", "peartly", "peccantly", "pectinately", "peculiarly", "pecuniarily", "pedagogically", "pedantically", "pedately", "peerlessly", "peevishly", "pejoratively", "pell mell", "pellucidly", "penally", "pendently", "penetrably", "penetratingly", "penetratively", "penitentially", "penitently", "pensively", "pentagonally", "penumbral", "penuriously", "peradventure", "perceptibly", "perceptively", "perceptually", "perchance", "percussively", "perdie", "perdurably", "peremptorily", "perennially", "perfectively", "perfectly", "perfidiously", "perforce", "perfunctorily", "perhaps", "perilously", "periodically", "peripherally", "perishably", "peristaltically", "perkily", "permanently", "permeably", "permissibly", "permissively", "perniciously", "perpendicularly", "perpetually", "perplexedly", "perplexingly", "perseveringly", "persistently", "person to person", "personally", "perspectively", "perspicaciously", "perspicuously", "persuasively", "pertinaciously", "pertinently", "pertly", "perturbedly", "pervasively", "perversely", "peskily", "pessimistically", "pesteringly", "pestiferously", "pestilentially", "petrographically", "petrologically", "pettily", "pettishly", "petulantly", "pharmaceutically", "pharmacologically", "phenomenally", "philanthropically", "philologically", "philosophically", "phlegmatically", "phonemic", "phonetically", "phonologically", "phosphorescently", "photoelectrically", "photogenically", "photographically", "photomechanically", "phraseologically", "phrenetically", "phrenologically", "phut", "phylogenetically", "physically", "physiognomically", "physiologically", "pianissimo", "piano", "pickaback", "pictorially", "picturesquely", "piecemeal", "piercingly", "piggishly", "piggyback", "pillion", "pinnately", "piously", "piping", "piquantly", "piratically", "pitapat", "piteously", "pithily", "pithy", "pitiably", "pitifully", "pitilessly", "pitter patter", "pityingly", "pivotally", "pizzicato", "placidly", "plaguey", "plaguily", "plaguy", "plain", "plainly", "plaintively", "plausibly", "playfully", "pleadingly", "pleasantly", "please", "pleasingly", "pleasurably", "plenarily", "plenteously", "plentifully", "plenty", "pleonastically", "pliably", "pliantly", "ploddingly", "plop", "pluckily", "plum", "plumb", "plump", "plunk", "plurally", "pneumatically", "poco", "poetically", "poignantly", "point blank", "point device", "pointedly", "pointlessly", "poisonously", "pokily", "polemically", "politely", "politically", "politicly", "polygamously", "polygonally", "polysyllabically", "polytheistically", "pompously", "ponderously", "pontifically", "poorly", "pop", "popishly", "popularly", "populously", "portentously", "posh", "posingly", "positively", "possessively", "possibly", "post", "post free", "post haste", "post paid", "postally", "posthumously", "postpositively", "potentially", "potently", "poutingly", "powerful", "powerfully", "powerlessly", "practicably", "practically", "pragmatically", "praiseworthily", "prancingly", "pratingly", "pray", "prayerfully", "prayerlessly", "prayingly", "pre eminently", "precariously", "precious", "preciously", "precipitately", "precipitously", "precisely", "precociously", "preconcertedly", "predicatively", "predictably", "predictively", "predominantly", "preferably", "preferentially", "pregnantly", "prehistorically", "preliminarily", "prelusively", "prelusorily", "prematurely", "premeditatedly", "prenatal", "prenatally", "preparatively", "preparatorily", "preparedly", "preponderantly", "prepositionally", "prepositively", "prepossessingly", "preposterously", "presciently", "prescriptively", "presentably", "presently", "pressingly", "prestissimo", "presto", "presumably", "presumingly", "presumptively", "presumptuously", "pretendedly", "pretentiously", "preternaturally", "prettily", "pretty", "prevailingly", "prevalently", "previously", "pridefully", "priggishly", "primarily", "primevally", "primitively", "primly", "primordially", "princely", "principally", "prismatically", "prissily", "privately", "privatively", "privily", "pro", "probabilistically", "probably", "problematically", "prodigally", "prodigiously", "productively", "profanely", "professedly", "professionally", "professorially", "proficiently", "profitably", "profitlessly", "profligately", "profoundly", "profusely", "progressively", "prohibitively", "prolately", "proleptically", "prolixly", "prominently", "promiscuously", "promisingly", "promissorily", "prompt", "promptly", "pronely", "pronominally", "pronouncedly", "pronto", "proper", "properly", "prophetically", "propitiatorily", "propitiously", "proportionably", "proportionally", "proportionately", "proprietorially", "prosaically", "proscriptively", "prosily", "prosperously", "protectingly", "protectively", "protestingly", "protractedly", "protuberantly", "proud", "proudly", "provably", "proverbially", "providentially", "providently", "provincially", "provisionally", "provisorily", "provocatively", "provokingly", "proximally", "proximately", "proximo", "prudently", "prudishly", "pruriently", "pryingly", "pseudonymously", "psychically", "psychologically", "publicly", "puffingly", "pugilistically", "pugnaciously", "puissantly", "pulingly", "punctiliously", "punctually", "pungently", "punily", "punishingly", "punitively", "purblindly", "purely", "purgatively", "puristically", "puritanically", "purportedly", "purposefully", "purposelessly", "purposely", "purringly", "purulently", "pushing", "pushingly", "pusillanimously", "putridly", "puzzlingly", "pyramidally", "pyramidically", "pyrotechnically", "quadrennially", "quadruply", "quaintly", "quakingly", "qualifiedly", "qualitatively", "qualmishly", "quantitatively", "quantitively", "quarrelsomely", "quarterly", "quaveringly", "queasily", "queenly", "queerly", "quenchlessly", "querulously", "queryingly", "questingly", "questionably", "questioningly", "quibblingly", "quick", "quicker", "quickest", "quickly", "quiescently", "quiet", "quietly", "quincuncially", "quintessentially", "quirkily", "quite", "quiveringly", "quixotically", "quizzically", "rabidly", "racially", "racily", "radially", "radiantly", "radically", "radioactively", "raffishly", "raggedly", "railingly", "rakishly", "rallentando", "ramblingly", "rampantly", "rancorously", "randomly", "rankly", "rantingly", "rapaciously", "rapidly", "rapturously", "rarely", "rascally", "rashly", "raspingly", "ratably", "rateably", "rather", "rationally", "rattling", "raucously", "ravenously", "raving", "ravingly", "ravishingly", "rawly", "reactively", "readably", "readily", "real", "realistically", "really", "rearward", "rearwards", "reasonably", "reassuringly", "rebelliously", "rebukingly", "recently", "receptively", "recessively", "reciprocally", "recklessly", "recognizably", "recollectedly", "recollectively", "reconcilably", "recreantly", "rectangularly", "recurrently", "redeemably", "redly", "redolently", "reductively", "redundantly", "refinedly", "reflectingly", "reflectively", "reflexively", "reflexly", "refractorily", "refreshfully", "refreshingly", "refutably", "regally", "regardfully", "regardless", "regeneratively", "regionally", "regressively", "regretfully", "regrettably", "regularly", "relatively", "relentlessly", "relevantly", "reliably", "religiously", "reluctantly", "remarkably", "reminiscently", "remissly", "remittently", "remonstratingly", "remorsefully", "remorselessly", "remotely", "removably", "rent free", "reparably", "repeatedly", "repellantly", "repellently", "repellingly", "repentantly", "repetitively", "reportedly", "reposedly", "reposefully", "reprehensibly", "reprehensively", "representatively", "repressively", "reproachfully", "reproductively", "reprovingly", "repulsively", "reputably", "reputed", "reputedly", "resentfully", "reservedly", "reshuffling", "resignedly", "resiliently", "resinously", "resistibly", "resistingly", "resistively", "resistlessly", "resolutely", "resolvedly", "resonantly", "resoundingly", "resourcefully", "respectably", "respectfully", "respectively", "resplendently", "responsibly", "responsively", "restfully", "restively", "restlessly", "restrainedly", "restrictedly", "restrictively", "resumptively", "retail", "retentively", "reticently", "reticularly", "reticulately", "retiredly", "retractively", "retrally", "retributively", "retroactively", "retrorsely", "retrospectively", "revealingly", "revengefully", "revengingly", "reverentially", "reverently", "reversedly", "reversely", "reversibly", "revilingly", "revivably", "revivingly", "revocably", "revoltingly", "rhapsodically", "rhetorically", "rheumatically", "rhythmically", "richly", "ridiculously", "rifely", "right", "right about", "right down", "righteously", "rightfully", "rightly", "rightward", "rightwards", "rigidly", "rigorously", "ringingly", "riotously", "ripely", "rippingly", "riskily", "ritenuto", "ritualistically", "ritually", "roaring", "roaringly", "robustiously", "robustly", "roguishly", "rolling", "romantically", "romeward", "rompingly", "rompishly", "roomily", "ropily", "rosily", "rottenly", "rotundly", "rough", "roughly", "round", "round arm", "round the clock", "roundabout", "roundly", "rousingly", "routinely", "rowdily", "royally", "rubrically", "ruddily", "ruddy", "rudely", "rudimentarily", "ruefully", "ruggedly", "rugosely", "ruinously", "rumblingly", "ruminantly", "rurally", "rustically", "rustily", "rustlingly", "ruthfully", "ruthlessly", "sacramentally", "sacredly", "sacrilegiously", "sadistically", "sadly", "safe", "safely", "sagaciously", "sagely", "sagittally", "salably", "salaciously", "saleably", "saliently", "saltando", "saltato", "saltily", "saltirewise", "saltishly", "salubriously", "salutarily", "salutatorily", "same", "sanctifyingly", "sanctimoniously", "sanely", "sanguinarily", "sanguinely", "sanitarily", "sapientially", "sapiently", "saprophytically", "sarcastically", "sardonically", "sartorially", "satanically", "satirically", "satisfactorily", "satisfyingly", "saturdays", "saucily", "savagely", "savingly", "savourily", "say", "scabrously", "scampishly", "scandalously", "scant", "scantily", "scantly", "scarce", "scarcely", "scathingly", "scatteredly", "scatteringly", "scenically", "scenographically", "sceptically", "schematically", "scherzando", "schismatically", "scholastically", "scienter", "scientifically", "scoffingly", "scoldingly", "scorching", "scorchingly", "scornfully", "scot free", "scowlingly", "scraggily", "scrappily", "screamingly", "scribblingly", "scripturally", "scrumptiously", "scrupulously", "scrutinizingly", "scurrilously", "scurvily", "seaman", "searchingly", "seasonably", "seasonally", "seaward", "seawards", "secantly", "secludedly", "second", "second best", "second class", "secondarily", "secondly", "secretively", "secretly", "sectionally", "secularly", "securely", "sedately", "sedentarily", "seditiously", "seducingly", "seductively", "sedulously", "see", "seedily", "seemingly", "seemly", "segmentally", "seldom", "selectively", "self confidently", "self consciously", "self denyingly", "self forgetfully", "self righteously", "selfishly", "selflessly", "semantically", "semasiologically", "semblably", "semicircularly", "semplice", "sempre", "senatorially", "sensationally", "senselessly", "sensibly", "sensitively", "sensually", "sensuously", "sententially", "sententiously", "sentimentally", "separably", "separately", "septennially", "septically", "sequentially", "seraphically", "serenely", "serially", "seriatim", "seriously", "serologically", "serviceably", "servilely", "sevenfold", "seventh", "seventhly", "severally", "severely", "sexennially", "sexily", "sexually", "sforzando", "shabbily", "shadily", "shaggily", "shakily", "shallowly", "shamefacedly", "shamefully", "shamelessly", "shapelessly", "sharp", "sharply", "sheepishly", "sheer", "shiftily", "shillyshally", "shily", "shiningly", "shipshape", "shockingly", "shoddily", "shoreward", "short", "shortly", "showily", "showmanly", "shrewdly", "shrewishly", "shriekingly", "shrilly", "shrinkingly", "shudderingly", "shufflingly", "shyly", "sibilantly", "sic", "sickeningly", "sicker", "sickly", "side saddle", "sidearm", "sideling", "sidelong", "sideward", "sidewards", "sideways", "sidewise", "sightlessly", "sigmoidally", "signally", "significantly", "significatively", "silently", "silkily", "sillily", "silverly", "similarly", "simoniacally", "simperingly", "simplistically", "simply", "simul", "simultaneously", "since", "sincerely", "sinfully", "singingly", "single handed", "single handedly", "single heartedly", "single mindedly", "singly", "singularly", "sinisterly", "sinistrally", "sinistrorsely", "sinlessly", "sinuately", "sinuously", "sinusoidally", "sith", "sixfold", "sixth", "sixthly", "sizzlingly", "skeigh", "skeptically", "sketchily", "skilfully", "skillfully", "skimpily", "skin deep", "skippingly", "skittishly", "skulkingly", "sky high", "skyward", "skywards", "slack", "slackly", "slam bang", "slanderously", "slangily", "slantingly", "slantly", "slantwise", "slap", "slap bang", "slaughterously", "slavishly", "sleazily", "sleekly", "sleepily", "sleeplessly", "slenderly", "slickly", "slidingly", "slier", "slightingly", "slightly", "slily", "slimly", "slopingly", "sloppily", "slothfully", "slouchingly", "slovenly", "slow", "slower", "slowest", "slowly", "slubberingly", "sluggishly", "slumberously", "sluttishly", "slyly", "smack", "small", "small mindedly", "smarmily", "smart", "smartly", "smash", "smatteringly", "smilingly", "smirkingly", "smokelessly", "smooth", "smoothly", "smudgily", "smugly", "smuttily", "snakily", "snap", "snappily", "snappingly", "snappishly", "snarlingly", "snatchily", "snatchingly", "sneakily", "sneakingly", "sneeringly", "snidely", "sniffily", "sniffingly", "sniggeringly", "snobbishly", "snootily", "snortingly", "snottily", "snowily", "snubbingly", "snugly", "so", "so so", "soaking", "soakingly", "soapily", "soaringly", "sobbingly", "soberingly", "soberly", "sociably", "socialistically", "socially", "sociologically", "socratically", "soddenly", "sodomitically", "soever", "soft", "softly", "solely", "solemnly", "solenoidally", "soli", "solicitously", "solidly", "solitarily", "solo", "somberly", "sombrely", "some", "someday", "somedeal", "somehow", "someplace", "somerville", "something", "sometime", "sometimes", "someway", "someways", "somewhat", "somewhere", "somewhile", "somewhither", "somewhy", "somewise", "somnolently", "songfully", "sonorously", "soon", "sooner", "soonest", "soothfastly", "soothingly", "soothly", "sootily", "sophistically", "soporiferously", "sopping", "sordidly", "sore", "sorely", "sorrily", "sorrowfully", "sostenuto", "sottishly", "soulfully", "soullessly", "sound", "soundingly", "soundlessly", "soundly", "sourly", "south", "southerly", "southernly", "southward", "southwards", "sovereignly", "spaciously", "spang", "spankingly", "sparely", "sparingly", "sparkishly", "sparklessly", "sparsely", "spasmodically", "spatially", "specially", "specifically", "speciously", "spectacularly", "spectrally", "spectrologically", "spectroscopically", "speculatively", "speechlessly", "speedfully", "speedily", "spellingly", "spherically", "spiccato", "spicily", "spikily", "spinally", "spinelessly", "spirally", "spiritedly", "spiritlessly", "spiritoso", "spiritually", "spitefully", "splendidly", "splenetically", "spokewise", "spontaneously", "spookily", "spoonily", "sporadically", "sportfully", "sportily", "sportingly", "sportively", "spotlessly", "spottily", "sprightly", "springily", "sprucely", "spryly", "spuriously", "squalidly", "square", "squarely", "squashily", "squeakingly", "squeamishly", "squintingly", "stabbingly", "stably", "staccato", "stag", "staggeringly", "stagily", "stagnantly", "staidly", "stalactitically", "stalagmitically", "stalely", "stalwartly", "stammeringly", "standoffishly", "starchily", "staring", "staringly", "stark", "starkly", "starrily", "startingly", "startlingly", "statedly", "stately", "stateside", "statewide", "statically", "statistically", "statutorily", "staunchly", "steadfastly", "steadily", "steady", "stealthily", "steamily", "steaming", "steeply", "stellately", "stepwise", "stereophonically", "sternly", "sternward", "sternwards", "stertorously", "stethoscopically", "stichometrically", "stickily", "stiff", "stiffly", "still", "stilly", "stiltedly", "stingily", "stingingly", "stinking", "stintedly", "stintingly", "stirringly", "stochastically", "stockily", "stodgily", "stoically", "stolidly", "stone", "stonily", "stoopingly", "stormily", "stout heartedly", "stoutly", "stownlins", "stragglingly", "straight", "straightaway", "straightforward", "straightforwardly", "straightly", "straightway", "strainedly", "straitly", "strange", "strangely", "strategically", "streakily", "streamingly", "strenuously", "strictly", "stridently", "strikingly", "stringendo", "stringently", "strivingly", "strong", "strongly", "structurally", "strugglingly", "struttingly", "stubbornly", "studiedly", "studiously", "stuffily", "stumpily", "stunningly", "stupendously", "stupidly", "sturdily", "stutteringly", "stylishly", "stylistically", "stylographically", "suably", "suasive", "suasively", "suavely", "subacutely", "subaerially", "subconsciously", "subcutaneously", "subduedly", "subglacially", "subito", "subject", "subjectively", "subjunctively", "sublimely", "subliminally", "submissively", "subordinately", "subsequently", "subserviently", "subsidiarily", "substantially", "substantivally", "substantively", "substitutionally", "substitutively", "subterraneously", "subtilely", "subtly", "subversively", "successfully", "successively", "successlessly", "succinctly", "succulently", "such", "sudden", "suddenly", "sufferably", "sufficiently", "suggestively", "suicidally", "suitably", "sulkily", "sullenly", "sultrily", "summarily", "summer", "sumptuously", "sundays", "sunnily", "sunward", "sunwards", "sunwise", "super", "superably", "superabundantly", "superbly", "superciliously", "supereminently", "superficially", "superfluously", "superhumanly", "superincumbently", "superlatively", "supernally", "supernaturally", "supernormally", "supersensibly", "superserviceably", "superstitiously", "supinely", "supplely", "supplementally", "suppliantly", "supply", "supportably", "supposedly", "suppositionally", "supra", "supremely", "sure", "sure enough", "surely", "surgically", "surlily", "surpassing", "surpassingly", "surprisedly", "surprisingly", "surreptitiously", "suspensively", "suspiciously", "sustainedly", "suturally", "swaggeringly", "swankily", "sweepingly", "sweet", "sweetly", "swift", "swiftly", "swimmingly", "swingeingly", "swingingly", "swinishly", "swith", "sycophantically", "sycophantishly", "syllabically", "syllogistically", "symbiotically", "symbolically", "symmetrically", "sympathetically", "sympodially", "symptomatically", "synchronically", "synchronistically", "synchronously", "syndetically", "syne", "synecdochically", "synecologically", "synergistically", "synodically", "synonymously", "syntactically", "synthetically", "systematically", "tabularly", "tacitly", "taciturnly", "tactfully", "tactically", "tactlessly", "tactually", "tails", "taintlessly", "talkatively", "tamely", "tandem", "tangentially", "tangibly", "tangly", "tantalisingly", "tantalizingly", "tantivy", "tanto", "taperingly", "tardily", "tarnal", "tartly", "tasselly", "tastefully", "tastelessly", "tastily", "tattily", "tattlingly", "tauntingly", "tautly", "tautologically", "tautologously", "tawdrily", "taxably", "taxonomically", "tearfully", "teasingly", "techily", "technically", "technologically", "tectonically", "tediously", "teetotally", "tegularly", "telegraphically", "telepathically", "telephonically", "telescopically", "tellingly", "temerariously", "temperamentally", "temperately", "tempestuously", "temporally", "temporarily", "temporisingly", "temporizingly", "temptingly", "tenably", "tenaciously", "tendentiously", "tender heartedly", "tenderly", "tenfold", "tensely", "tentatively", "tenth", "tenthly", "tenuously", "tenurially", "tenuto", "tepidly", "terminably", "terminally", "terminatively", "terminologically", "termly", "ternately", "terrestrially", "terribly", "terrifically", "terrifyingly", "territorially", "tersely", "testily", "tetanically", "tetchily", "tetragonally", "tetrahedrally", "thankfully", "thanklessly", "that", "the", "theatrically", "thematically", "then", "thence", "thenceforth", "thenceforward", "theocratically", "theologically", "theoretically", "theosophically", "therapeutically", "there", "thereabout", "thereabouts", "thereafter", "thereagainst", "thereat", "thereby", "therefor", "therefore", "therefrom", "therein", "thereinafter", "thereinto", "thereof", "thereon", "thereout", "thereto", "theretofore", "thereunder", "thereupon", "therewith", "therewithal", "thermally", "thermochemically", "thermometrically", "thermoscopically", "thermostatically", "thetically", "thick", "thick wittedly", "thickly", "thievishly", "thin", "thinkingly", "thinly", "third", "third class", "thirdly", "thirstily", "this", "thither", "tho", "thoroughgoingly", "thoroughly", "though", "thoughtfully", "thoughtlessly", "thousandfold", "thrasonically", "threateningly", "threefold", "thrice", "thriftily", "thriftlessly", "thrillingly", "thrivingly", "throatily", "through", "throughly", "throughout", "thru", "thuddingly", "thumpingly", "thunderously", "thursdays", "thus", "thwart", "thwartedly", "ticklishly", "tidally", "tidily", "tigerishly", "tight", "tightly", "timely", "timeously", "timidly", "timorously", "tinklingly", "tipsily", "tiptoe", "tiptop", "tiredly", "tirelessly", "tiresomely", "titillatingly", "titularly", "to and fro", "today", "together", "toilsomely", "tolerably", "tolerantly", "tomorrow", "ton", "tonally", "tonelessly", "tonetically", "tongue in cheek", "tonight", "tonishly", "tonnishly", "too", "too too", "toothsomely", "topically", "toploftily", "topographically", "topologically", "toppingly", "torpidly", "torridly", "tortiously", "tortuously", "totally", "touchily", "touchingly", "tough", "toughly", "tourist", "tout", "toxically", "toxicologically", "tracelessly", "tracklessly", "traditionally", "tragically", "trailingly", "traitorously", "trancedly", "tranquilly", "transactionally", "transcendentally", "transcontinentally", "transcriptionally", "transcriptively", "transgressively", "transiently", "transitionally", "transitively", "transitorily", "translationally", "translucently", "transmutably", "transparently", "transversally", "transversely", "trashily", "traverse", "treacherously", "treasonably", "trebly", "tremendously", "tremulously", "trenchantly", "triangularly", "triangulately", "triatomically", "tribally", "tributarily", "trichotomously", "trickily", "trickishly", "triennially", "trigonometrically", "trilaterally", "trim", "trimly", "trimonthly", "triply", "trippingly", "trisyllabically", "tritely", "triumphantly", "trivially", "tropically", "tropologically", "troppo", "troubledly", "troublesomely", "troublously", "truculently", "true", "truly", "truncately", "trustfully", "trustily", "trustingly", "trustworthily", "truthfully", "tryingly", "tuesdays", "tumidly", "tumultuously", "tunably", "tunefully", "tunelessly", "turbidly", "turbulently", "turgently", "turgidly", "tutorially", "tutti", "tween", "tween decks", "twelvefold", "twentyfold", "twice", "twitteringly", "two facedly", "two times", "twofold", "typically", "typographically", "tyrannically", "tyrannously", "ubique", "uglily", "ulcerously", "ulteriorly", "ultimately", "ultimo", "ultrasonically", "umbrageously", "unaccompanied", "unaccountably", "unadvisedly", "unalike", "unalterably", "unambiguously", "unambitiously", "unamusingly", "unanimously", "unanswerably", "unapprovingly", "unaptly", "unarguably", "unartfully", "unartificially", "unashamedly", "unaspiringly", "unassumingly", "unattainably", "unattractively", "unavailably", "unavailingly", "unavoidably", "unaware", "unawares", "unbearably", "unbecomingly", "unbeknown", "unbeknownst", "unbelievably", "unbelievingly", "unbendingly", "unbenignly", "unbiasedly", "unblamably", "unblinkingly", "unblushingly", "unboundedly", "unbrokenly", "unbrotherly", "uncandidly", "uncannily", "unceasingly", "unceremoniously", "uncertainly", "unchallengeably", "unchangeably", "unchangingly", "uncharitably", "unchastely", "uncheerfully", "uncivilly", "uncleanly", "unclearly", "unco", "uncomfortably", "uncommendably", "uncommon", "uncommonly", "uncomplainingly", "uncomplaisantly", "uncompromisingly", "unconcernedly", "unconditionally", "unconformably", "unconfusedly", "unconquerably", "unconscientiously", "unconscionably", "unconsciously", "unconstitutionally", "uncontrollably", "unconventionally", "uncooperatively", "uncouthly", "uncritically", "unctuously", "undauntedly", "undemonstratively", "undeniably", "undenominational", "under", "underarm", "underfoot", "underground", "underhand", "underhandedly", "undermost", "underneath", "undersea", "understandably", "understandingly", "underwater", "undeservedly", "undeservingly", "undesignedly", "undesirably", "undespairingly", "undeviatingly", "undisputedly", "undistractedly", "undoubtedly", "unduly", "undutifully", "undyingly", "uneasily", "unemotionally", "unendingly", "unendurably", "unenviably", "unequally", "unequivocally", "unerringly", "unevenly", "uneventfully", "unexceptionably", "unexceptionally", "unexclusively", "unexpectedly", "unfailingly", "unfairly", "unfaithfully", "unfalteringly", "unfashionably", "unfavorably", "unfavourably", "unfearfully", "unfeelingly", "unfeignedly", "unfilially", "unfitly", "unfittingly", "unflaggingly", "unflatteringly", "unflinchingly", "unforcedly", "unforgettably", "unfortunately", "unfoundedly", "unfrequently", "unfriendly", "ungainly", "ungallantly", "ungenerously", "ungently", "ungodlily", "ungovernably", "ungracefully", "ungraciously", "ungrammatically", "ungratefully", "ungravely", "ungrudgingly", "unguardedly", "unhandsomely", "unhappily", "unharmfully", "unhealthily", "unheededly", "unheedfully", "unheedingly", "unheroically", "unhesitatingly", "unhopefully", "unhurriedly", "unhurtfully", "uniaxially", "unidiomatically", "uniformly", "unilaterally", "unimaginably", "unimaginatively", "unintelligibly", "unintentionally", "uninterestingly", "uninterruptedly", "uniquely", "unisexually", "unitedly", "universally", "unjustifiably", "unjustly", "unkindly", "unkingly", "unknightly", "unknowingly", "unlawfully", "unlearnedly", "unlimitedly", "unlively", "unluckily", "unmanageably", "unmanfully", "unmanly", "unmannerly", "unmeaningly", "unmeasurably", "unmercifully", "unmeritedly", "unmindfully", "unmistakably", "unmitigatedly", "unmixedly", "unmurmuringly", "unmusically", "unnaturally", "unnecessarily", "unneedfully", "unobtrusively", "unofficially", "unorthodoxly", "unostentatiously", "unpalatably", "unpardonably", "unpatriotically", "unpeacefully", "unperceivably", "unphilosophically", "unpitifully", "unplausibly", "unpleasantly", "unpliably", "unpoetically", "unpolitely", "unpopularly", "unpractically", "unprecedentedly", "unpredictably", "unpreparedly", "unpriestly", "unprincely", "unproductively", "unprofessionally", "unprofitably", "unprogressively", "unproperly", "unpropitiously", "unproportionably", "unproportionately", "unprosperously", "unqualifiedly", "unquestionably", "unquietly", "unreally", "unreasonably", "unreasoningly", "unrecognisable", "unrecognisably", "unrecognizably", "unreconcilably", "unreflectingly", "unrelentingly", "unremittently", "unremittingly", "unremorsefully", "unrepentingly", "unreservedly", "unresponsively", "unrestrainedly", "unrestrictedly", "unrhythmically", "unrighteously", "unrightfully", "unromantically", "unsafely", "unsatisfactorily", "unsavourily", "unscholarly", "unscientifically", "unscripturally", "unscrupulously", "unsearchably", "unseasonably", "unseemly", "unselfconsciously", "unselfishly", "unsensibly", "unshakably", "unshrinkingly", "unskilfully", "unskillfully", "unsmilingly", "unsociably", "unsocially", "unsolidly", "unsoundly", "unsparingly", "unspeakably", "unspiritually", "unsteadfastly", "unsteadily", "unstoppably", "unsuccessfully", "unsuitably", "unsupportedly", "unsuspectedly", "unsuspectingly", "unsuspiciously", "unswervingly", "unsymmetrically", "unsympathetically", "unsystematically", "untenderly", "unthankfully", "unthinkably", "unthinking", "unthinkingly", "unthoughtfully", "unthriftily", "untidily", "untimely", "untiringly", "untremblingly", "untruly", "untrustworthily", "untruthfully", "untunably", "untunefully", "unusably", "unusefully", "unusually", "unutterably", "unvirtuously", "unwarily", "unwarrantably", "unwarrantedly", "unwatchfully", "unwaveringly", "unweariedly", "unwholesomely", "unwieldily", "unwillingly", "unwisely", "unwittingly", "unwomanly", "unwontedly", "unworthily", "unyieldingly", "up", "up and down", "up country", "upgrade", "uphill", "uppermost", "uppishly", "upright", "uprightly", "upriver", "uproariously", "upside down", "upsides", "upspringing", "upstage", "upstaged", "upstaging", "upstairs", "upstate", "upstream", "uptown", "upward", "upwardly", "upwards", "upwind", "urbanely", "urgently", "urinative", "usefully", "uselessly", "usually", "usuriously", "usurpingly", "usward", "utterly", "uvularly", "uxorially", "uxoriously", "vacantly", "vacillatingly", "vacuously", "vaguely", "vaingloriously", "vainly", "valiantly", "validly", "valorously", "valuably", "vanishingly", "vanward", "vapidly", "vaporously", "vapouringly", "variably", "variedly", "varietally", "variously", "vascularly", "vastly", "vauntingly", "vectorially", "veeringly", "vegetably", "vehemently", "veloce", "venally", "vendibly", "vengefully", "venially", "venomous", "venomously", "ventrally", "ventriloquially", "venturesomely", "venturously", "veraciously", "verbally", "verbatim", "verbosely", "verdantly", "veridically", "verily", "verisimilarly", "veritably", "vernacularly", "vernally", "versatilely", "vertebrally", "vertically", "very", "vestigially", "vexatiously", "vexedly", "vexingly", "vibrantly", "vicariously", "viciously", "victoriously", "videlicet", "viewlessly", "vigilantly", "vigorously", "vilely", "villainously", "vindictively", "violably", "violently", "violinistically", "viperously", "virtually", "virtuously", "virulently", "viscerally", "visibly", "visionally", "visually", "vitalistically", "vitally", "vite", "vivace", "vivaciously", "vividly", "viviparously", "vivo", "vixenishly", "vocally", "vocationally", "vociferously", "voetstoots", "voicelessly", "volante", "volcanically", "volitionally", "volubly", "volumetrically", "voluminously", "voluntarily", "voluptuously", "voraciously", "vortically", "vowelly", "vulgarly", "vulnerably", "vyingly", "waggishly", "wailingly", "waist deep", "waist high", "waitingly", "wakefully", "wamblingly", "wanly", "wantonly", "war", "warily", "warmly", "warningly", "waspishly", "wastefully", "watchfully", "waur", "waveringly", "wavily", "waxily", "way", "ways", "weak kneedly", "weak mindedly", "weakly", "wealthily", "wearifully", "wearily", "wearisomely", "wearyingly", "week", "weekdays", "weekends", "weekly", "weightily", "weirdly", "well", "well nigh", "well timed", "west", "westerly", "westward", "westwardly", "westwards", "wetly", "whacking", "wham", "what", "whatever", "wheezily", "when", "whence", "whencesoever", "whene er", "whenever", "whensoever", "where", "where er", "whereabout", "whereabouts", "whereat", "whereby", "wherefor", "wherefore", "wherefrom", "wherein", "whereinto", "whereof", "whereon", "wheresoever", "whereto", "whereunto", "whereupon", "wherever", "wherewith", "wherewithal", "whiggishly", "whiles", "whilom", "whimperingly", "whimsically", "whiningly", "whisperingly", "whistlingly", "whitely", "whither", "whithersoever", "whitherward", "whizzingly", "whole", "wholesale", "wholesomely", "wholly", "whopping", "why", "wickedly", "widdershins", "wide", "widely", "widthwise", "wild", "wildly", "wilfully", "wilily", "will lessly", "willingly", "willy nilly", "windily", "windingly", "windward", "wingedly", "winkingly", "winningly", "winsomely", "wisely", "wishfully", "wistfully", "wit", "witchingly", "withal", "witheringly", "withershins", "within", "without", "withoutdoors", "witlessly", "wittily", "wittingly", "woefully", "wofully", "wolfishly", "womanishly", "wonderfully", "wonderingly", "wondrous", "wondrously", "woodenly", "wooingly", "woozily", "word for word", "wordily", "wordlessly", "worldly", "worriedly", "worryingly", "worse", "worshipfully", "worst", "worthily", "worthlessly", "woundingly", "wrathfully", "wretchedly", "writhingly", "wrong", "wrong headedly", "wrongfully", "wrongly", "wryly", "yare", "yarely", "yea", "yeah", "yearly", "yearningly", "yeomanly", "yep", "yes", "yesterday", "yestereve", "yesternight", "yesteryear", "yestreen", "yet", "yieldingly", "yon", "yonder", "yore", "youthfully", "ywis", "zealously", "zestfully", "zigzag", "zonally", "zoologically"];
    }
  });

  // res/js/src/words/conjunctions.json
  var require_conjunctions = __commonJS({
    "res/js/src/words/conjunctions.json"(exports, module) {
      module.exports = ["a minute later", "accordingly", "actually", "after", "after a short time", "afterwards", "also", "and", "another", "as a consequence", "as a result", "as an example", "as soon as", "at last", "at lenght", "because", "because of this", "before", "besides", "briefly", "but", "consequently", "conversely", "equally important", "finally", "first", "for example", "for instance", "for this purpose", "for this reason", "fourth", "from here on", "further", "furthermore", "gradually", "hence", "however", "in addition", "in conclusion", "in contrast", "in fact", "in short", "in spite of", "in spite of this", "in summary", "in the end", "in the meantime", "in the meanwhile", "in the same manner", "in the same way", "just as important", "last", "last of all", "lastly", "later", "least", "meanwhile", "moreover", "nevertheless", "next", "nonetheless", "nor", "now", "of equal importance", "on the contrary", "on the following day", "on the other hand", "or", "other hand", "presently", "second", "similarly", "since", "so", "soon", "still", "subsequently", "such as", "the next week", "then", "thereafter", "therefore", "third", "thus", "to be specific", "to begin with", "to illustrate", "to repeat", "to sum up", "too", "ultimately", "what", "whatever", "when", "whereas", "while", "whoever", "whomever", "with this in mind", "yet"];
    }
  });

  // res/js/src/words/interjections.json
  var require_interjections = __commonJS({
    "res/js/src/words/interjections.json"(exports, module) {
      module.exports = ["agh", "ahem", "ahh", "alright", "awesome", "cool", "ew", "gah", "gotcha", "great", "ha", "hey", "hmm", "huh", "jeez", "like", "nice", "noo", "oh dear", "oh man", "oh my", "oh no", "oops", "ouch", "really", "so\uFFFD", "sure", "sweet", "ugh", "uh oh", "um", "what", "whoops", "win", "woah", "woohoo", "wow", "yay", "yeah", "yikes", "yup", "\uFFFDok"];
    }
  });

  // res/js/src/words/nouns.json
  var require_nouns = __commonJS({
    "res/js/src/words/nouns.json"(exports, module) {
      module.exports = ["a", "a bomb", "a bombs", "a frame", "aachen", "aardvark", "aardvarks", "aardwolf", "aarhus", "aaron", "aba", "abac", "abaca", "abacas", "abacs", "abacus", "abacuses", "abadan", "abaddon", "abalone", "abalones", "abampere", "abamperes", "abandon", "abandonee", "abandonees", "abandonment", "abandonments", "abandons", "abas", "abasement", "abasements", "abashment", "abashments", "abatement", "abatements", "abatis", "abator", "abators", "abattis", "abattises", "abattoir", "abattoirs", "abb", "abba", "abbacies", "abbacy", "abbas", "abbasid", "abbasids", "abbess", "abbesses", "abbevillian", "abbey", "abbeys", "abbot", "abbots", "abbotsford", "abbotship", "abbotships", "abbott", "abbreviation", "abbreviations", "abbreviator", "abbreviators", "abbs", "abby", "abc", "abdicant", "abdication", "abdications", "abdicator", "abdicators", "abdomen", "abdomens", "abducent", "abduction", "abductions", "abductor", "abductors", "abdul", "abe", "abecedarian", "abecedarians", "abednego", "abel", "abelard", "abele", "abeles", "abelia", "aberdare", "aberdeen", "aberdeenshire", "aberrance", "aberrancies", "aberrancy", "aberrant", "aberration", "aberrations", "aberystwyth", "abessive", "abetment", "abetments", "abettal", "abettals", "abetter", "abetters", "abettor", "abettors", "abeyance", "abeyances", "abhorrence", "abhorrences", "abhorrer", "abhorrers", "abib", "abidance", "abidances", "abidjan", "abies", "abieses", "abigail", "abigails", "abilities", "ability", "abingdon", "abiogenesis", "abiogenist", "abiogenists", "abiosis", "abjection", "abjections", "abjectness", "abjunction", "abjunctions", "abjuration", "abjurations", "abjurer", "abjurers", "ablactation", "ablation", "ablations", "ablative", "ablatives", "ablator", "ablators", "ablaut", "ablauts", "able", "ablution", "ablutions", "abnegation", "abnegations", "abnegator", "abnegators", "abnormalities", "abnormality", "abnormities", "abnormity", "abode", "abodes", "aboideau", "aboideaus", "abolisher", "abolishers", "abolishment", "abolishments", "abolition", "abolitionism", "abolitionist", "abolitionists", "abolitions", "abolla", "abollas", "abomasum", "abomasus", "abomasuses", "abominableness", "abomination", "abominations", "abominator", "abominators", "abondance", "abondances", "aboriginal", "aboriginality", "aboriginals", "aborigine", "aborigines", "aborticide", "aborticides", "abortifacient", "abortifacients", "abortion", "abortionist", "abortionists", "abortions", "abortiveness", "aboulia", "about face", "about faces", "above", "abracadabra", "abracadabras", "abradant", "abradants", "abrader", "abraders", "abraham", "abrahams", "abrasion", "abrasions", "abrasive", "abrasiveness", "abrasives", "abraxas", "abraxases", "abrazo", "abrazos", "abreaction", "abreactions", "abridgement", "abridgements", "abridger", "abridgers", "abridgment", "abridgments", "abroad", "abrogation", "abrogations", "abrogator", "abrogators", "abruption", "abruptions", "abruptness", "absalom", "abscess", "abscesses", "abscissa", "abscissas", "abscission", "abscissions", "absconder", "absconders", "abseil", "abseils", "absence", "absences", "absent mindedness", "absentee", "absenteeism", "absentees", "absinth", "absinthe", "absinthes", "absinthism", "absinths", "absolute", "absoluteness", "absolution", "absolutions", "absolutism", "absolutist", "absolutists", "absolver", "absolvers", "absorbability", "absorbance", "absorbate", "absorbates", "absorbefacient", "absorbefacients", "absorbencies", "absorbency", "absorbent", "absorbents", "absorber", "absorbers", "absorptiometer", "absorptiometers", "absorption", "absorptions", "absorptiveness", "absorptivity", "abstainer", "abstainers", "abstemiousness", "abstention", "abstentions", "abstersion", "abstersions", "abstinence", "abstinences", "abstinent", "abstract", "abstractedness", "abstracter", "abstracters", "abstraction", "abstractionism", "abstractionist", "abstractionists", "abstractions", "abstractness", "abstractor", "abstractors", "abstracts", "abstriction", "abstrictions", "abstruseness", "absurdities", "absurdity", "absurdness", "absurdnesses", "abulia", "abundance", "abundances", "abusage", "abusages", "abuse", "abuser", "abusers", "abuses", "abusiveness", "abutilon", "abutilons", "abutment", "abutments", "abuttal", "abuttals", "abutter", "abutters", "abvolt", "abvolts", "abydos", "abysm", "abysms", "abyss", "abysses", "abyssinia", "abyssinian", "abyssinians", "acacia", "acacias", "academe", "academes", "academia", "academic", "academical", "academicals", "academician", "academicians", "academicism", "academics", "academies", "academism", "academy", "acadia", "acadian", "acadians", "acajou", "acajous", "acaleph", "acalephes", "acalephs", "acanthocephalan", "acanthopterygian", "acanthus", "acanthuses", "acapnia", "acapulco", "acariasis", "acaricide", "acaricides", "acarid", "acaridan", "acaridans", "acarids", "acarine", "acarologist", "acarologists", "acarology", "acarus", "acatalectic", "acatalectics", "accadian", "accedence", "accedences", "acceder", "acceders", "accelerando", "accelerandos", "accelerant", "accelerants", "acceleration", "accelerations", "accelerator", "accelerators", "accelerometer", "accelerometers", "accent", "accenting", "accentor", "accentors", "accents", "accentuality", "accentuation", "accentuations", "acceptabilities", "acceptability", "acceptableness", "acceptance", "acceptances", "acceptancy", "acceptation", "acceptations", "accepter", "accepters", "acceptor", "acceptors", "access", "accessaries", "accessary", "accesses", "accessibilities", "accessibility", "accession", "accessions", "accessories", "accessory", "acciaccatura", "acciaccaturas", "accidence", "accident", "accidental", "accidentalism", "accidentality", "accidentals", "accidents", "accidie", "accipiter", "accipiters", "acclaim", "acclaims", "acclamation", "acclamations", "acclimation", "acclimations", "acclimatisation", "acclimatisations", "acclimatiser", "acclimatisers", "acclimatization", "acclimatizations", "acclivities", "acclivity", "accolade", "accolades", "accommodation", "accommodations", "accommodativeness", "accommodator", "accommodators", "accompanier", "accompaniers", "accompaniment", "accompaniments", "accompanist", "accompanists", "accompanyist", "accompanyists", "accomplice", "accomplices", "accomplisher", "accomplishers", "accomplishment", "accomplishments", "accompt", "accompts", "accord", "accordance", "accordances", "accorder", "accorders", "accordion", "accordionist", "accordionists", "accordions", "accords", "accost", "accosts", "accouchement", "accouchements", "accoucheur", "accoucheurs", "accoucheuse", "accoucheuses", "account", "accountabilities", "accountability", "accountableness", "accountancies", "accountancy", "accountant", "accountants", "accountantship", "accounting", "accountings", "accounts", "accouterment", "accouterments", "accoutrement", "accoutrements", "accra", "accreditation", "accreditations", "accretion", "accretions", "accrington", "accrual", "accruals", "acculturation", "accumbency", "accumulation", "accumulations", "accumulativeness", "accumulator", "accumulators", "accuracies", "accuracy", "accurateness", "accursedness", "accusal", "accusals", "accusation", "accusations", "accusative", "accusatives", "accused", "accuser", "accusers", "accustomedness", "ace", "aced", "acedia", "acerbities", "acerbity", "aces", "acescence", "acescency", "acetabulum", "acetal", "acetaldehyde", "acetals", "acetamide", "acetate", "acetates", "acetification", "acetone", "acetones", "acetyl", "acetylcholine", "acetylene", "achaea", "achaean", "achaeans", "achates", "ache", "achene", "achenes", "achernar", "acheron", "aches", "acheson", "acheulian", "achievement", "achievements", "achiever", "achievers", "achillea", "achilleas", "achilles", "achimenes", "aching", "achings", "achitophel", "achkan", "achkans", "achondroplasia", "achromat", "achromaticity", "achromatin", "achromatins", "achromatisation", "achromatism", "achromatization", "achromats", "acid", "acidification", "acidifier", "acidifiers", "acidimeter", "acidimeters", "acidimetry", "acidity", "acidness", "acidosis", "acids", "acidulent", "acieration", "acing", "acinus", "acis", "ack ack", "ackee", "ackees", "acknowledgement", "acknowledgements", "acknowledgment", "acknowledgments", "acme", "acmes", "acmite", "acmites", "acne", "acol", "acolyte", "acolytes", "aconite", "aconites", "aconitum", "aconitums", "acorn", "acorns", "acosmism", "acosmist", "acosmists", "acotyledon", "acotyledons", "acouchi", "acouchies", "acoustic", "acoustician", "acousticians", "acoustics", "acquaintance", "acquaintances", "acquaintanceship", "acquaintanceships", "acquest", "acquests", "acquiescence", "acquiescences", "acquirability", "acquirement", "acquirements", "acquiring", "acquisition", "acquisitions", "acquisitiveness", "acquittal", "acquittals", "acquittance", "acquittances", "acre", "acre foot", "acreage", "acres", "acridine", "acridity", "acridness", "acriflavine", "acrilan", "acrimoniousness", "acrimony", "acrobat", "acrobatics", "acrobats", "acrogen", "acrogens", "acrolein", "acrolith", "acroliths", "acromegalic", "acromegaly", "acromion", "acronym", "acronyms", "acrophobia", "acrophony", "acropolis", "acropolises", "acrosome", "acrosomes", "acrospire", "acrospires", "acrostic", "acrostics", "acroter", "acroterion", "acroterium", "acroteriums", "acroters", "acrotism", "acrylic", "acrylics", "acrylonitrile", "act", "actability", "actaeon", "actin", "acting", "actings", "actinia", "actinian", "actinians", "actinias", "actinide", "actinides", "actinism", "actinium", "actinobacillosis", "actinobacillus", "actinolite", "actinometer", "actinometers", "actinomycosis", "actinon", "actinotherapy", "action", "actions", "actium", "activating", "activation", "activations", "activator", "activators", "active", "activeness", "activism", "activist", "activists", "activities", "activity", "acton", "actons", "actor", "actors", "actress", "actresses", "acts", "actualisation", "actualisations", "actualist", "actualists", "actualities", "actuality", "actualization", "actualizations", "actuaries", "actuary", "actuation", "actuations", "actuator", "actuators", "acuity", "aculeus", "acumen", "acumens", "acumination", "acupressure", "acupuncture", "acute", "acuteness", "acutenesses", "acyclovir", "acyl", "ad", "ad lib", "ad libs", "ada", "adage", "adages", "adagio", "adagios", "adam", "adamant", "adamants", "adamic", "adamite", "adams", "adana", "adaptability", "adaptableness", "adaptation", "adaptations", "adapter", "adapters", "adaptiveness", "adaptor", "adaptors", "adar", "addams", "addax", "addaxes", "addend", "addends", "addendum", "adder", "adder s tongue", "adders", "addict", "addictedness", "addiction", "addictions", "addicts", "addie", "addison", "additament", "additaments", "addition", "additions", "additive", "additives", "address", "addressee", "addressees", "addresser", "addressers", "addresses", "addressograph", "addressographs", "addressor", "addressors", "adducer", "adducers", "adducing", "adduction", "adductions", "adductor", "adductors", "addy", "adela", "adelaide", "adelantado", "adelantados", "adele", "ademption", "ademptions", "aden", "adenauer", "adenectomies", "adenectomy", "adenine", "adenitis", "adenocarcinoma", "adenocarcinomas", "adenohypophysis", "adenoid", "adenoidectomies", "adenoidectomy", "adenoids", "adenoma", "adenomas", "adenosine", "adenovirus", "adept", "adeptness", "adepts", "adequacies", "adequacy", "adequateness", "adermin", "adessive", "adherence", "adherences", "adherent", "adherents", "adherer", "adherers", "adhesion", "adhesions", "adhesive", "adhesiveness", "adhesives", "adhibition", "adhibitions", "adiabatic", "adiaphorism", "adiaphorist", "adiaphorists", "adiathermancy", "adie", "adieu", "adieus", "adipocere", "adipose", "adiposity", "adirondack", "adit", "adits", "adjacency", "adjacent", "adjective", "adjectives", "adjoint", "adjournment", "adjournments", "adjudication", "adjudications", "adjudicator", "adjudicators", "adjunct", "adjunction", "adjunctions", "adjuncts", "adjuration", "adjurations", "adjuster", "adjusters", "adjustment", "adjustments", "adjustor", "adjustors", "adjutancies", "adjutancy", "adjutant", "adjutants", "adjuvant", "adjuvants", "adler", "admass", "admasses", "admeasurement", "admeasurements", "admin", "adminicle", "adminicles", "administration", "administrations", "administrator", "administrators", "administratorship", "administratrix", "administratrixes", "admins", "admirableness", "admiral", "admirals", "admiralship", "admiralships", "admiralties", "admiralty", "admiration", "admirer", "admirers", "admissibilities", "admissibility", "admissibleness", "admission", "admissions", "admittance", "admittances", "admixture", "admixtures", "admonishment", "admonishments", "admonition", "admonitions", "admonitor", "admonitors", "adnation", "adnominal", "adnoun", "adnouns", "ado", "adobe", "adobes", "adolescence", "adolescences", "adolescent", "adolescents", "adolf", "adonai", "adonais", "adonia", "adonic", "adonis", "adopter", "adopters", "adoption", "adoptions", "adorableness", "adoration", "adorations", "adorer", "adorers", "adornment", "adornments", "ados", "adrenal", "adrenalin", "adrenaline", "adrenals", "adrenocorticotrophin", "adrenocorticotropin", "adrian", "adrianne", "adriatic", "adrienne", "adroitness", "ads", "adscript", "adscription", "adscriptions", "adscripts", "adsorbability", "adsorbate", "adsorbates", "adsorbent", "adsorbents", "adsorption", "adsorptions", "adularia", "adulation", "adulations", "adulator", "adulators", "adullamite", "adult", "adulterant", "adulterants", "adulteration", "adulterations", "adulterator", "adulterators", "adulterer", "adulterers", "adulteress", "adulteresses", "adulteries", "adultery", "adulthood", "adults", "adumbration", "adumbrations", "aduncity", "advance", "advancement", "advancements", "advances", "advantage", "advantageousness", "advantages", "advection", "advections", "advent", "adventist", "adventists", "adventive", "adventives", "advents", "adventure", "adventurer", "adventurers", "adventures", "adventuress", "adventuresses", "adventurism", "adventurousness", "adverb", "adverbial", "adverbs", "adversaries", "adversary", "adversative", "adverseness", "adversities", "adversity", "advert", "advertence", "advertency", "advertisement", "advertisements", "advertiser", "advertisers", "advertising", "advertizer", "advertizing", "adverts", "advice", "advices", "advisability", "advisableness", "advisedness", "advisement", "advisements", "adviser", "advisers", "advisership", "advisor", "advisors", "advocaat", "advocaats", "advocacies", "advocacy", "advocate", "advocates", "advocation", "advocations", "advowson", "advowsons", "adynamia", "adytum", "adz", "adze", "adzes", "aecidium", "aeciospore", "aeciospores", "aecium", "aedes", "aedile", "aediles", "aedileship", "aedileships", "aegirite", "aegis", "aegises", "aegisthus", "aegrotat", "aegrotats", "aeneas", "aeneid", "aeolian", "aeolic", "aeolipile", "aeolipiles", "aeolotropy", "aeon", "aeons", "aepyornis", "aeration", "aerations", "aerator", "aerators", "aerenchyma", "aerenchymas", "aerial", "aerialist", "aerialists", "aeriality", "aerials", "aerie", "aeries", "aero", "aerobatics", "aerobe", "aerobes", "aerobics", "aerobiologist", "aerobiologists", "aerobiology", "aerobiosis", "aerodrome", "aerodromes", "aerodynamicist", "aerodynamicists", "aerodynamics", "aerodyne", "aerodynes", "aeroembolism", "aerofoil", "aerofoils", "aerogenerator", "aerogenerators", "aerogram", "aerogramme", "aerogrammes", "aerograms", "aerograph", "aerographs", "aerography", "aerolite", "aerolites", "aerologist", "aerologists", "aerology", "aeromancy", "aerometer", "aerometers", "aerometry", "aeronaut", "aeronautics", "aeronauts", "aeroneurosis", "aeronomy", "aerophobia", "aerophone", "aerophones", "aerophyte", "aerophytes", "aeroplane", "aeroplanes", "aeroplankton", "aerosol", "aerosols", "aerospace", "aerostat", "aerostatics", "aerostation", "aerostats", "aerotropism", "aery", "aesc", "aesces", "aeschylus", "aesculin", "aesir", "aesop", "aesthesia", "aesthete", "aesthetes", "aesthetic", "aesthetician", "aestheticians", "aestheticism", "aesthetics", "aestivation", "aestivations", "aether", "aetiology", "afar", "affability", "affair", "affaire", "affairs", "affect", "affectation", "affectations", "affectedness", "affecter", "affecters", "affection", "affectionateness", "affections", "affective", "affectivities", "affectivity", "affects", "affenpinscher", "affenpinschers", "affiance", "affiances", "affiche", "affiches", "afficionado", "afficionados", "affidavit", "affidavits", "affiliate", "affiliates", "affiliation", "affiliations", "affinities", "affinity", "affirmant", "affirmants", "affirmation", "affirmations", "affirmative", "affirmatives", "affirmer", "affirmers", "affix", "affixes", "afflatus", "afflatuses", "affliction", "afflictions", "affluence", "affluent", "affluents", "afflux", "affluxes", "afforestation", "affranchisement", "affray", "affrays", "affreightment", "affreightments", "affricate", "affricates", "affrication", "affrications", "affricative", "affright", "affrights", "affront", "affronts", "affusion", "affusions", "afghan", "afghani", "afghanis", "afghanistan", "afghans", "aficionado", "aficionados", "aflatoxin", "afreet", "afreets", "africa", "african", "africander", "africanism", "africanist", "africanization", "africans", "afrikaans", "afrikander", "afrikaner", "afrikanerdom", "afrikaners", "afrit", "afrits", "afro", "afro american", "afro americans", "afrormosia", "afrormosias", "afros", "afterbirth", "afterbirths", "afterburner", "afterburners", "afterburning", "aftercare", "afterdeck", "afterdecks", "afterglow", "afterglows", "aftergrowth", "aftergrowths", "afterheat", "aftermath", "aftermaths", "afternoon", "afternoons", "afterpains", "afterpiece", "afterpieces", "afters", "aftershaft", "aftershafts", "aftershock", "aftershocks", "aftertaste", "aftertastes", "afterthought", "afterthoughts", "aftertime", "aftertimes", "afterword", "afterwords", "afterworld", "afterworlds", "aga", "agalactia", "agalloch", "agallochs", "agalmatolite", "agama", "agamas", "agamemnon", "agamid", "agamids", "agamogenesis", "aganippe", "agapanthus", "agapanthuses", "agape", "agar", "agar agar", "agaric", "agarics", "agars", "agas", "agate", "agates", "agateware", "agatha", "agave", "agaves", "age", "aged", "agedness", "ageing", "ageings", "ageism", "agelessness", "agencies", "agency", "agenda", "agendas", "agendum", "agendums", "agent", "agent general", "agentive", "agents", "ageratum", "ages", "agger", "aggers", "aggie", "aggiornamento", "agglomerate", "agglomerates", "agglomeration", "agglomerations", "agglutinant", "agglutinants", "agglutination", "agglutinations", "agglutinin", "agglutinogen", "aggradation", "aggradations", "aggrandisement", "aggrandisements", "aggrandizement", "aggrandizements", "aggravation", "aggravations", "aggregate", "aggregates", "aggregation", "aggregations", "aggression", "aggressions", "aggressiveness", "aggressor", "aggressors", "aggro", "aggros", "agha", "aghas", "agility", "agincourt", "aging", "agings", "agio", "agios", "agiotage", "agism", "agister", "agisters", "agistment", "agistments", "agitation", "agitations", "agitator", "agitators", "agitprop", "aglaia", "aglet", "aglets", "aglossia", "agma", "agmas", "agnail", "agnails", "agnate", "agnates", "agnation", "agnes", "agnew", "agnomen", "agnomens", "agnosia", "agnostic", "agnosticism", "agnostics", "agogics", "agon", "agonies", "agonist", "agonistes", "agonists", "agons", "agony", "agora", "agoraphobia", "agoras", "agostini", "agouta", "agoutas", "agouti", "agoutis", "agouty", "agra", "agraffe", "agraffes", "agranulocytosis", "agranulosis", "agrapha", "agraphia", "agrarian", "agrarianism", "agreeability", "agreeableness", "agreement", "agreements", "agribusiness", "agricola", "agriculture", "agriculturist", "agriculturists", "agrimonies", "agrimony", "agriology", "agrippa", "agrippina", "agrobiologist", "agrobiologists", "agrobiology", "agrology", "agronomics", "agronomist", "agronomists", "agronomy", "agrostologist", "agrostologists", "agrostology", "aguardiente", "aguardientes", "ague", "agues", "ahab", "ahern", "ahimsa", "ahithophel", "ahmad", "ahmed", "ahold", "ahriman", "ahwaz", "aid", "aida", "aidan", "aide", "aide de camp", "aiden", "aider", "aiders", "aides", "aids", "aiglet", "aiglets", "aigret", "aigrets", "aigrette", "aigrettes", "aiguille", "aiguilles", "aiguillette", "aiguillettes", "aikido", "ail", "ailanthus", "ailanthuses", "aileen", "aileron", "ailerons", "ailette", "ailettes", "ailment", "ailments", "ails", "ailsa", "ailurophile", "ailurophiles", "ailurophilia", "ailurophobe", "ailurophobes", "ailurophobia", "aim", "aimlessness", "aims", "ain", "ain t", "ainu", "air", "air conditioning", "air intake", "air intakes", "air mail", "air mails", "airbrush", "airbrushes", "airburst", "airbursts", "airbus", "airbuses", "aircraft", "aircraftman", "aircraftsman", "aircraftswoman", "aircrew", "aircrews", "airdrie", "airdrome", "airdromes", "aire", "airedale", "airedales", "airfield", "airfields", "airflow", "airflows", "airfoil", "airfoils", "airframe", "airframes", "airgraph", "airgraphs", "airhead", "airheads", "airiness", "airing", "airings", "airlift", "airlifts", "airline", "airliner", "airliners", "airlines", "airman", "airmanship", "airplane", "airplanes", "airport", "airports", "airs", "airscrew", "airscrews", "airship", "airships", "airsickness", "airspace", "airspaces", "airspeed", "airstream", "airstrip", "airstrips", "airt", "airts", "airwave", "airwaves", "airway", "airways", "airwoman", "airworthiness", "aisha", "aisle", "aisles", "aisne", "ait", "aitch", "aitchbone", "aitchbones", "aitches", "aitken", "aits", "aix en provence", "aix la chapelle", "aix les bains", "ajaccio", "ajax", "akaba", "akaryote", "akaryotes", "ake", "akee", "akees", "akela", "akelas", "akene", "akenes", "akes", "akhenaten", "akhmatova", "akihito", "akinesia", "akinesias", "akinesis", "akkadian", "akron", "akvavit", "akvavits", "ala", "alabama", "alabaman", "alabamans", "alabamian", "alabamians", "alabamine", "alabandite", "alabaster", "alabasters", "alacrity", "aladdin", "alae", "alain fournier", "alalia", "alameda", "alamedas", "alamein", "alamo", "alamode", "alan", "alanbrooke", "alanine", "alap", "alapa", "alar", "alaric", "alarm", "alarmism", "alarmist", "alarmists", "alarms", "alarum", "alarums", "alas", "alasdair", "alaska", "alaskan", "alaskans", "alastair", "alastrim", "alb", "albacore", "albacores", "alban", "albania", "albanian", "albanians", "albany", "albarello", "albarellos", "albata", "albatross", "albatrosses", "albedo", "albedos", "albergo", "alberich", "albert", "alberta", "alberti", "albertina", "albertine", "albertite", "alberts", "albescence", "albi", "albigensian", "albigensianism", "albinism", "albino", "albinoni", "albinos", "albion", "albite", "albs", "albugo", "albugos", "album", "albumen", "albumin", "albuminate", "albuminates", "albuminoid", "albuminoids", "albuminuria", "albums", "albuquerque", "alburnum", "alcahest", "alcaic", "alcaics", "alcaide", "alcaides", "alcalde", "alcaldes", "alcatraz", "alcayde", "alcaydes", "alcestis", "alchemist", "alchemists", "alchemy", "alcheringa", "alcibiades", "alcides", "alcock", "alcohol", "alcoholic", "alcoholics", "alcoholisation", "alcoholism", "alcoholization", "alcoholometer", "alcoholometers", "alcoholometry", "alcohols", "alcoran", "alcott", "alcove", "alcoves", "alcuin", "alcyonarian", "alcyonarians", "alda", "aldebaran", "aldehyde", "alder", "alderman", "aldermanry", "aldermanship", "aldermanships", "aldermaston", "alderney", "alders", "aldershot", "aldine", "aldohexose", "aldose", "aldoses", "aldous", "aldrin", "ale", "alec", "alecost", "alecosts", "alecto", "alegar", "alegars", "alekhine", "alemannic", "alembic", "alembics", "alencon", "aleph", "alephs", "aleppo", "alerce", "alerces", "alerion", "alerions", "alert", "alerting", "alertness", "alerts", "ales", "alessandria", "aleurone", "aleut", "aleuts", "alevin", "alevins", "alewife", "alex", "alexander", "alexanders", "alexandra", "alexandria", "alexandrian", "alexandrine", "alexandrines", "alexandrite", "alexia", "alexic", "alexin", "alexins", "alexipharmic", "alexis", "alf", "alfa", "alfalfa", "alfalfas", "alfas", "alfie", "alfonso", "alforja", "alforjas", "alfred", "alfreda", "alfredo", "alfs", "alga", "algae", "algarroba", "algarrobas", "algebra", "algebraist", "algebraists", "algebras", "algeria", "algerian", "algerians", "algerine", "algerines", "algernon", "algesia", "algicide", "algicides", "algidity", "algiers", "algin", "alginate", "alginates", "algol", "algolagnia", "algologist", "algologists", "algology", "algonkian", "algonkians", "algonkin", "algonkins", "algonquian", "algonquians", "algonquin", "algonquins", "algophobia", "algorism", "algorithm", "algorithms", "algy", "alhambra", "ali", "alias", "aliases", "alibi", "alibis", "alicante", "alice", "alicia", "alidade", "alidades", "alien", "alienability", "alienage", "alienation", "alienator", "alienators", "alienee", "alienees", "alienism", "alienist", "alienists", "alienor", "alienors", "aliens", "alignment", "alignments", "aliment", "alimentation", "alimentations", "aliments", "alimonies", "alimony", "alinement", "alinements", "aliped", "alipeds", "aliquant", "aliquot", "alisma", "alismas", "alison", "alistair", "alister", "aliveness", "aliyah", "alizarin", "alizarine", "alkahest", "alkalescence", "alkalescences", "alkalescencies", "alkalescency", "alkali", "alkalies", "alkalimeter", "alkalimeters", "alkalimetry", "alkalinities", "alkalinity", "alkalis", "alkaloid", "alkaloids", "alkalosis", "alkane", "alkanes", "alkanet", "alkanets", "alkene", "alkenes", "alkies", "alkoran", "alky", "alkyd", "alkyds", "alkyl", "alkyls", "alkyne", "alkynes", "all", "all rounder", "all rounders", "allah", "allahabad", "allan", "allantoid", "allantoids", "allantois", "allantoises", "allative", "allayer", "allayers", "allegation", "allegations", "alleger", "allegers", "allegiance", "allegiances", "allegories", "allegorisation", "allegorisations", "allegoriser", "allegorisers", "allegorist", "allegorists", "allegorization", "allegorizations", "allegorizer", "allegorizers", "allegory", "allegretto", "allegrettos", "allegro", "allegros", "allele", "alleles", "allelomorph", "allelomorphism", "allelomorphs", "alleluia", "alleluias", "allemande", "allemandes", "allen", "allenby", "allende", "allergen", "allergens", "allergies", "allergist", "allergists", "allergy", "alleviation", "alleviations", "alleviative", "alleviator", "alleviators", "alley", "alleyn", "alleys", "alleyway", "alleyways", "allheal", "allheals", "alliance", "alliances", "allice", "allices", "allie", "allier", "allies", "alligator", "alligators", "allis", "allises", "allison", "alliteration", "alliterations", "allness", "alloa", "allocation", "allocations", "allocution", "allocutions", "allodium", "allodiums", "allogamy", "allograft", "allografts", "allograph", "allographs", "allometry", "allomorph", "allomorphs", "allonge", "allonges", "allonym", "allonyms", "allopath", "allopaths", "allopathy", "allophone", "allophones", "alloplasm", "alloplasms", "allopurinol", "allosaur", "allosaurs", "allotment", "allotments", "allotrope", "allotropes", "allotropism", "allotropy", "allottee", "allottees", "allowableness", "allowance", "allowances", "alloy", "alloys", "allseed", "allseeds", "allspice", "allure", "allurement", "allurements", "allurer", "allurers", "allures", "allusion", "allusions", "allusiveness", "alluvial", "alluvion", "alluvions", "alluvium", "alluviums", "ally", "allyl", "alma ata", "alma tadema", "almagest", "almagests", "almah", "almahs", "almanac", "almanacs", "almandine", "almandines", "almeria", "almeries", "almery", "almighty", "almirah", "almirahs", "almond", "almonds", "almoner", "almoners", "almonries", "almonry", "almous", "alms", "almucantar", "almucantars", "almuce", "almuces", "almug", "almugs", "alodium", "alodiums", "aloe", "aloes", "aloeswood", "aloeswoods", "alogia", "aloha", "alohas", "aloneness", "alonso", "aloofness", "alopecia", "aloysius", "alp", "alpaca", "alpacas", "alpenhorn", "alpenhorns", "alpenstock", "alpenstocks", "alpha", "alphabet", "alphabetisation", "alphabetization", "alphabets", "alphanumerics", "alphas", "alphonsine", "alphorn", "alphorns", "alpinism", "alpinist", "alpinists", "alps", "als", "alsace", "alsace lorraine", "alsatia", "alsatian", "alsatians", "alsike", "alsikes", "also ran", "also rans", "alstroemeria", "alstroemerias", "alt", "altaic", "altair", "altar", "altarage", "altarpiece", "altarpieces", "altars", "altazimuth", "altazimuths", "altdorfer", "alterability", "alterant", "alterants", "alteration", "alterations", "alterative", "altercation", "altercations", "altering", "alternate", "alternates", "alternation", "alternations", "alternative", "alternatives", "alternator", "alternators", "althaea", "althaeas", "althea", "althing", "althorn", "althorns", "altimeter", "altimeters", "altimetry", "altiplano", "altissimo", "altitude", "altitudes", "altman", "alto", "alto relievo", "alto relievos", "alto rilievo", "altocumulus", "altogether", "altos", "altostratus", "altricial", "altrincham", "altruism", "altruist", "altruists", "alts", "aludel", "aludels", "alula", "alulas", "alum", "alumina", "aluminate", "aluminates", "aluminium", "aluminum", "alumna", "alumnus", "alums", "alunite", "alure", "alveolar", "alveolitis", "alveolus", "alwyn", "alyssum", "alyssums", "amabel", "amadavat", "amadavats", "amadeus", "amadou", "amadous", "amah", "amahs", "amalgam", "amalgamation", "amalgamations", "amalgams", "amanda", "amanita", "amanitas", "amanuensis", "amaranth", "amaranths", "amarillo", "amaryllis", "amaryllises", "amassment", "amateur", "amateurishness", "amateurism", "amateurs", "amati", "amatis", "amativeness", "amatol", "amaurosis", "amaze", "amazedness", "amazement", "amazes", "amazon", "amazonas", "amazonite", "amazons", "ambage", "ambages", "ambassador", "ambassador at large", "ambassadors", "ambassadorship", "ambassadorships", "ambassadress", "ambassadresses", "ambatch", "ambatches", "amber", "ambergris", "ambergrises", "amberjack", "amberjacks", "amberoid", "amberoids", "ambers", "ambiance", "ambidexter", "ambidexterity", "ambidexters", "ambidextrousness", "ambience", "ambiguities", "ambiguity", "ambiguousness", "ambisexual", "ambit", "ambition", "ambitions", "ambitiousness", "ambits", "ambivalence", "ambivalences", "ambivalencies", "ambivalency", "ambiversion", "ambivert", "ambiverts", "amble", "ambler", "amblers", "ambles", "amblyopia", "ambo", "amboceptor", "ambos", "amboyna", "ambries", "ambroid", "ambrose", "ambrosia", "ambrotype", "ambrotypes", "ambry", "ambulacrum", "ambulance", "ambulances", "ambulation", "ambulations", "ambulator", "ambulators", "ambulatory", "ambuscade", "ambuscades", "ambuscado", "ambuscadoes", "ambuscados", "ambush", "ambusher", "ambushers", "ambushes", "ameba", "amebas", "ameer", "ameers", "ameiosis", "amelia", "amelioration", "ameliorations", "amen", "amenabilities", "amenability", "amenableness", "amender", "amenders", "amendment", "amendments", "amends", "amenities", "amenity", "amenorrhea", "amenorrhoea", "amens", "ament", "amentia", "aments", "amercement", "amercements", "america", "american", "americana", "americanism", "americanisms", "americanist", "americanization", "americans", "americas", "americium", "amerind", "amerindian", "amerindians", "amerinds", "amethyst", "amethysts", "amharic", "ami", "amiability", "amiableness", "amianthus", "amicabilities", "amicability", "amicableness", "amice", "amices", "amide", "amides", "amidol", "amie", "amiens", "amigo", "amigos", "amin", "amine", "amines", "amir", "amirs", "amis", "amish", "amities", "amitosis", "amity", "amman", "ammans", "ammeter", "ammeters", "ammo", "ammonal", "ammonia", "ammoniac", "ammonite", "ammonites", "ammonium", "ammonoid", "ammunition", "ammunitions", "amnesia", "amnesiac", "amnesiacs", "amnesic", "amnesics", "amnesties", "amnesty", "amniocentesis", "amnion", "amnios", "amoeba", "amoebas", "amoebiasis", "amok", "amontillado", "amontillados", "amoralism", "amoralist", "amoralists", "amorality", "amoretto", "amorino", "amorist", "amorists", "amorosity", "amoroso", "amorosos", "amorousness", "amorphism", "amorphousness", "amortisation", "amortisations", "amortization", "amortizations", "amortizement", "amos", "amosite", "amount", "amounts", "amour", "amour propre", "amours", "amp", "ampelopsis", "amperage", "amperages", "ampere", "amperes", "ampersand", "ampersands", "amphetamine", "amphetamines", "amphibia", "amphibian", "amphibians", "amphibole", "amphiboles", "amphibolies", "amphibolite", "amphibology", "amphiboly", "amphibrach", "amphibrachs", "amphictyon", "amphigories", "amphigory", "amphimacer", "amphimacers", "amphimixis", "amphioxus", "amphioxuses", "amphipod", "amphipods", "amphisbaena", "amphisbaenas", "amphitheater", "amphitheaters", "amphitheatre", "amphitheatres", "amphitryon", "ampholyte", "ampholytes", "amphora", "ampleness", "ampliation", "ampliations", "amplification", "amplifications", "amplifier", "amplifiers", "amplitude", "amplitudes", "ampoule", "ampoules", "amps", "ampul", "ampule", "ampules", "ampulla", "ampuls", "amputation", "amputations", "amputator", "amputators", "amputee", "amputees", "amrita", "amritas", "amritsar", "amsterdam", "amuck", "amulet", "amulets", "amundsen", "amusement", "amusements", "amuser", "amusers", "amusiveness", "amy", "amygdala", "amygdalas", "amygdale", "amygdales", "amygdalin", "amygdaloid", "amygdaloids", "amygdule", "amygdules", "amyl", "amylase", "amylases", "amylene", "amylenes", "amyloid", "amyloidosis", "amylopsin", "amylum", "amyotrophy", "amytal", "ana", "anabaptism", "anabaptisms", "anabaptist", "anabaptists", "anabas", "anabases", "anabasis", "anabiosis", "anableps", "anablepses", "anabolism", "anabolite", "anabolites", "anabranch", "anabranches", "anacardium", "anacardiums", "anachronism", "anachronisms", "anacoluthia", "anacoluthias", "anacoluthon", "anaconda", "anacondas", "anacreon", "anacreontic", "anacrusis", "anadem", "anadems", "anadiplosis", "anaemia", "anaerobe", "anaerobes", "anaerobiosis", "anaesthesia", "anaesthesias", "anaesthesiologist", "anaesthesiologists", "anaesthesiology", "anaesthetic", "anaesthetics", "anaesthetist", "anaesthetists", "anaglyph", "anaglyphs", "anaglypta", "anaglyptas", "anagnorisis", "anagoge", "anagoges", "anagram", "anagrammatism", "anagrammatist", "anagrammatists", "anagrams", "anaheim", "analcite", "analecta", "analects", "analemma", "analemmas", "analeptic", "analgesia", "analgesic", "analgesics", "analog", "analogies", "analogist", "analogists", "analogousness", "analogs", "analogue", "analogues", "analogy", "analphabetic", "analysand", "analysands", "analyser", "analysers", "analysis", "analyst", "analysts", "analytics", "analyzer", "analyzers", "anamnesis", "anamorphosis", "ananas", "ananases", "ananias", "anapaest", "anapaests", "anapest", "anapests", "anaphase", "anaphora", "anaphoras", "anaphrodisiac", "anaphrodisiacs", "anaphylaxis", "anaplasty", "anaplerosis", "anaptyxis", "anarch", "anarchies", "anarchism", "anarchisms", "anarchist", "anarchists", "anarchs", "anarchy", "anarthrousness", "anas", "anasarca", "anasazi", "anasazis", "anastasia", "anastasis", "anastigmat", "anastigmats", "anastomosis", "anastrophe", "anastrophes", "anatase", "anathema", "anathemas", "anathematisation", "anathematization", "anatole", "anatolia", "anatolian", "anatomical", "anatomies", "anatomist", "anatomists", "anatomy", "anatta", "anattas", "anatto", "anattos", "anburies", "anbury", "ancestor", "ancestors", "ancestress", "ancestresses", "ancestries", "ancestry", "anchor", "anchorage", "anchorages", "anchoress", "anchoresses", "anchoret", "anchorets", "anchorite", "anchorites", "anchorman", "anchors", "anchoveta", "anchovies", "anchovy", "anchylosis", "ancient", "ancientness", "ancientry", "ancients", "ancile", "ancillaries", "ancillary", "ancon", "ancona", "ancones", "and", "andalusia", "andalusian", "andalusite", "andante", "andantes", "andantino", "andantinos", "anderlecht", "andersen", "anderson", "andes", "andesine", "andesite", "andiron", "andirons", "andorra", "andorran", "andorrans", "andre", "andrea", "andrew", "andrews", "androcles", "androdioecism", "androecium", "androgen", "androgens", "androgyne", "androgynes", "androgyny", "android", "androids", "andromache", "andromeda", "andromedas", "andromonoecism", "androphore", "androphores", "androsterone", "ands", "andy", "ane", "anecdotage", "anecdotalist", "anecdotalists", "anecdote", "anecdotes", "anecdotist", "anecdotists", "anelace", "anelaces", "anemia", "anemogram", "anemograms", "anemograph", "anemographs", "anemography", "anemology", "anemometer", "anemometers", "anemometry", "anemone", "anemones", "anemophily", "anencephalia", "anencephaly", "aneroid", "aneroids", "anes", "anesthesia", "anesthesias", "anesthesiologist", "anesthesiologists", "anesthesiology", "anesthetic", "anesthetics", "anesthetist", "anesthetists", "anesthetization", "anestrum", "anestrus", "aneuploid", "aneurin", "aneurysm", "aneurysms", "anfractuosities", "anfractuosity", "angary", "angel", "angela", "angeleno", "angelenos", "angelhood", "angelhoods", "angelica", "angelicas", "angelico", "angelina", "angelo", "angelology", "angels", "angels on horseback", "angelus", "angeluses", "anger", "angers", "angevin", "angie", "angina", "angiogram", "angiograms", "angiography", "angioma", "angiomas", "angioplasty", "angiosperm", "angiosperms", "angiotensin", "angle", "angledozer", "angledozers", "angler", "anglers", "angles", "anglesey", "anglesite", "anglia", "anglian", "anglican", "anglicanism", "anglicans", "anglicisation", "anglicism", "anglicisms", "anglicization", "angling", "anglings", "anglistics", "anglo", "anglo american", "anglo catholic", "anglo catholics", "anglo french", "anglo indian", "anglo irish", "anglo norman", "anglo saxon", "anglo saxons", "anglomania", "anglophil", "anglophile", "anglophiles", "anglophilia", "anglophils", "anglophobe", "anglophobes", "anglophobia", "anglos", "angola", "angora", "angoras", "angostura", "angriness", "angst", "angsts", "anguilla", "anguis", "anguish", "anguishes", "angularities", "angularity", "angulation", "angus", "angwantibo", "angwantibos", "anhedonia", "anhedral", "anhydride", "anhydrides", "anhydrite", "anhydrites", "ani", "aniconism", "aniconisms", "anil", "aniline", "anility", "anils", "anima", "animadversion", "animadversions", "animadverter", "animadverters", "animal", "animal worship", "animalcule", "animalcules", "animalisation", "animalism", "animalisms", "animalist", "animalists", "animality", "animalization", "animals", "animas", "animation", "animations", "animatism", "animator", "animators", "animatronics", "anime", "animes", "animism", "animist", "animists", "animosities", "animosity", "animus", "animuses", "anion", "anionic", "anions", "anis", "anise", "aniseed", "aniseeds", "anises", "anisette", "anisettes", "anisotropy", "anita", "anjou", "ankara", "ankerite", "ankh", "ankhs", "ankle", "anklebone", "anklebones", "ankles", "anklet", "anklets", "anklung", "anklungs", "ankus", "ankuses", "ankylosaur", "ankylosaurs", "ankylosis", "ankylostomiasis", "anlace", "anlaces", "anlage", "anlages", "ann", "anna", "annabel", "annabelle", "annabergite", "annal", "annalist", "annalists", "annals", "annam", "annapolis", "annapurna", "annas", "annatto", "annattos", "anne", "anneal", "annealer", "annealers", "annealing", "annealings", "anneals", "annecy", "annelid", "annelida", "annelids", "annette", "annex", "annexation", "annexationist", "annexationists", "annexations", "annexe", "annexes", "annexment", "annexments", "annie", "annihilation", "annihilationism", "annihilations", "annihilator", "annihilators", "annis", "anniversaries", "anniversary", "annotating", "annotation", "annotations", "annotator", "annotators", "announcement", "announcements", "announcer", "announcers", "annoyance", "annoyances", "annoyer", "annoyers", "annoying", "anns", "annual", "annuals", "annuitant", "annuitants", "annuities", "annuity", "annularities", "annularity", "annulation", "annulations", "annulet", "annulets", "annulment", "annulments", "annulus", "annunciation", "annunciations", "annunciator", "annunciators", "anoa", "anoas", "anobiidae", "anode", "anodes", "anodyne", "anodynes", "anoesis", "anoestrum", "anoestrus", "anointer", "anointers", "anointing", "anointment", "anointments", "anomalies", "anomaly", "anomie", "anon", "anons", "anonym", "anonymity", "anonyms", "anopheles", "anopheleses", "anopheline", "anophelines", "anorak", "anoraks", "anorectic", "anorectics", "anorexia", "anorthite", "anorthosite", "anosmia", "anouilh", "anoxia", "anschauung", "anschluss", "anselm", "ansermet", "answer", "answerability", "answerer", "answerers", "answers", "ant", "anta", "antabuse", "antacid", "antacids", "antaeus", "antagonisation", "antagonisations", "antagonism", "antagonist", "antagonists", "antagonization", "antagonizations", "antananarivo", "antarctic", "antarctica", "antares", "antarthritic", "antasthmatic", "ante", "antecedence", "antecedences", "antecedent", "antecedents", "antecessor", "antecessors", "antechamber", "antechambers", "antechapel", "antechapels", "antechoir", "antechoirs", "antedate", "antedates", "antediluvian", "antediluvians", "antefix", "antefixes", "antelope", "antelopes", "antenatal", "antenna", "antennas", "antennule", "antennules", "antepast", "antependium", "antependiums", "antepenult", "antepenultimate", "antepenults", "anterior", "anteriority", "anteroom", "anterooms", "antes", "anteversion", "anthea", "anthelion", "anthelix", "anthelminthic", "anthelminthics", "anthelmintic", "anthelmintics", "anthem", "anthemion", "anthems", "anther", "antheridium", "antheridiums", "antherozoid", "antherozoids", "anthers", "anthesis", "anthesteria", "anthocyanin", "anthologies", "anthologist", "anthologists", "anthology", "anthony", "anthophore", "anthophores", "anthophyllite", "anthozoa", "anthracene", "anthracite", "anthracnose", "anthracosis", "anthrax", "anthraxes", "anthropogenesis", "anthropogeny", "anthropogeography", "anthropography", "anthropoid", "anthropolatry", "anthropologist", "anthropologists", "anthropology", "anthropometry", "anthropomorphism", "anthropomorphist", "anthropomorphosis", "anthropopathy", "anthropophagite", "anthropophagy", "anthroposophy", "anthurium", "anthuriums", "anti", "anti aircraft", "anti novel", "anti semite", "anti semitism", "antiar", "antiarrhythmic", "antiars", "antibacchius", "antibacchiuses", "antibacterial", "antibes", "antibiosis", "antibiotic", "antibiotics", "antibodies", "antibody", "antic", "anticathode", "anticathodes", "antichlor", "antichlors", "anticholinergic", "antichrist", "antichristian", "anticipant", "anticipants", "anticipation", "anticipations", "anticipator", "anticipators", "anticlerical", "anticlericalism", "anticlericals", "anticlimax", "anticlimaxes", "anticline", "anticlines", "anticlinorium", "anticlinoriums", "anticoagulant", "anticoagulants", "anticonvulsant", "anticonvulsants", "anticorrosive", "antics", "anticyclone", "anticyclones", "antidepressant", "antidepressants", "antidisestablishmentarianism", "antidiuretic", "antidote", "antidotes", "antietam", "antifouling", "antifreeze", "antifriction", "antigen", "antigens", "antigone", "antigua", "antiguan", "antiguans", "antihalation", "antihalations", "antihelix", "antihero", "antiheroes", "antihistamine", "antihistamines", "antihypertensive", "antihypertensives", "antiknock", "antiknocks", "antilegomena", "antilog", "antilogarithm", "antilogarithms", "antilogies", "antilogs", "antilogy", "antimacassar", "antimacassars", "antimalarial", "antimasque", "antimasques", "antimicrobial", "antimodernist", "antimodernists", "antimonarchist", "antimonarchists", "antimonate", "antimonates", "antimonial", "antimonide", "antimonides", "antimonies", "antimony", "antineutrino", "antineutrinos", "antineutron", "antineutrons", "anting", "antings", "antinode", "antinodes", "antinomian", "antinomianism", "antinomians", "antinomies", "antinomy", "antioch", "antiochian", "antiochus", "antiodontalgic", "antioxidant", "antioxidants", "antiparticle", "antiparticles", "antipasto", "antipastos", "antipathies", "antipathist", "antipathists", "antipathy", "antiperiodic", "antiperiodics", "antiperistalsis", "antiperspirant", "antiperspirants", "antiphlogistic", "antiphon", "antiphonal", "antiphonals", "antiphonaries", "antiphonary", "antiphonies", "antiphons", "antiphony", "antiphrasis", "antipodal", "antipode", "antipodean", "antipodes", "antipole", "antipoles", "antipope", "antipopes", "antiproton", "antiprotons", "antipruritic", "antipruritics", "antipsychotic", "antipyretic", "antipyretics", "antiquarian", "antiquarianism", "antiquarians", "antiquaries", "antiquark", "antiquarks", "antiquary", "antiquation", "antiquations", "antique", "antiqueness", "antiques", "antiquities", "antiquity", "antirachitic", "antirachitics", "antirrhinum", "antirrhinums", "antirust", "antis", "antiscorbutic", "antisepsis", "antiseptic", "antiseptics", "antiserum", "antiserums", "antisociality", "antispasmodic", "antistrophe", "antistrophes", "antithesis", "antitoxin", "antitoxins", "antitrade", "antitrades", "antitragus", "antitussive", "antitussives", "antitype", "antitypes", "antivaccinationist", "antivaccinationists", "antivenin", "antivenins", "antiviral", "antler", "antlers", "antlia", "antofagasta", "antoinette", "anton", "antonia", "antoninianus", "antoninianuses", "antoninus", "antonio", "antonomasia", "antony", "antonym", "antonyms", "antonymy", "antre", "antres", "antrim", "antrum", "antrums", "ants", "antwerp", "anubis", "anuria", "anus", "anuses", "anvil", "anvils", "anxieties", "anxiety", "anxiolytic", "anxiolytics", "anxiousness", "anybody", "anything", "anywhere", "anzac", "anzio", "aorist", "aorists", "aorta", "aortas", "aortitis", "aoudad", "aoudads", "apache", "apaches", "apadana", "apagoge", "apanage", "apanages", "aparejo", "aparejos", "apartheid", "apartment", "apartments", "apartness", "apathy", "apatite", "ape", "apeldoorn", "apeman", "aperient", "aperients", "aperies", "aperiodicity", "aperitif", "aperitifs", "aperitive", "aperture", "apertures", "apery", "apes", "apetaly", "apex", "apexes", "aphaeresis", "aphagia", "aphanite", "aphanites", "aphasia", "aphasiac", "aphasic", "aphelion", "apheliotropism", "apheresis", "aphesis", "aphid", "aphides", "aphidian", "aphidians", "aphids", "aphis", "aphonia", "aphoriser", "aphorisers", "aphorism", "aphorisms", "aphorist", "aphorists", "aphorizer", "aphorizers", "aphrodisia", "aphrodisiac", "aphrodisiacs", "aphrodite", "aphtha", "aphylly", "apia", "apiaries", "apiarist", "apiarists", "apiary", "apices", "apiculture", "apiculturist", "apiculturists", "apis", "apishness", "aplanogamete", "aplanogametes", "aplanospore", "aplanospores", "aplasia", "aplite", "aplomb", "aplustre", "aplustres", "apnea", "apneas", "apnoea", "apnoeas", "apocalypse", "apocalypses", "apocatastasis", "apochromat", "apochromatism", "apochromats", "apocopation", "apocope", "apocrypha", "apodosis", "apoenzyme", "apoenzymes", "apogamy", "apogee", "apogees", "apogeotropism", "apograph", "apographs", "apollinaire", "apollinaris", "apollo", "apollonius", "apollos", "apollyon", "apologetics", "apologia", "apologias", "apologies", "apologiser", "apologisers", "apologist", "apologists", "apologizer", "apologizers", "apologue", "apologues", "apology", "apomixis", "apomorphine", "aponeurosis", "apopemptic", "apophasis", "apophthegm", "apophthegms", "apophyge", "apophyges", "apophyllite", "apophysis", "apoplectic", "apoplexy", "aporia", "aposiopesis", "apospory", "apostasies", "apostasy", "apostate", "apostates", "apostil", "apostils", "apostle", "apostles", "apostleship", "apostolate", "apostolates", "apostolicism", "apostolicity", "apostrophe", "apostrophes", "apothecaries", "apothecary", "apothecium", "apothegm", "apothegms", "apothem", "apotheosis", "apotheosises", "apotropaism", "appalachia", "appalling", "appaloosa", "appaloosas", "appanage", "appanages", "apparatchik", "apparatchiks", "apparatus", "apparatuses", "apparel", "apparels", "apparencies", "apparency", "apparentness", "apparition", "apparitions", "apparitor", "apparitors", "appeal", "appealingness", "appeals", "appearance", "appearances", "appearing", "appeasement", "appeaser", "appeasers", "appel", "appellant", "appellants", "appellation", "appellations", "appellative", "appels", "appendage", "appendages", "appendant", "appendants", "appendectomies", "appendectomy", "appendicectomies", "appendicectomy", "appendicitis", "appendix", "appendixes", "apperception", "apperceptions", "appestat", "appestats", "appetence", "appetency", "appetite", "appetites", "appetizer", "appetizers", "applauder", "applauders", "applause", "apple", "appleby", "applecart", "applecarts", "apples", "applet", "appleton", "applets", "appliance", "appliances", "applicabilities", "applicability", "applicant", "applicants", "application", "applications", "applicator", "applicators", "applier", "appliers", "appoggiatura", "appoggiaturas", "appointee", "appointees", "appointment", "appointments", "appointor", "appointors", "apportioning", "apportionment", "apportionments", "apposer", "apposers", "appositeness", "apposition", "appositions", "appositive", "appraisal", "appraisals", "appraiser", "appraisers", "appreciation", "appreciations", "appreciator", "appreciators", "apprehensibility", "apprehension", "apprehensions", "apprehensiveness", "apprentice", "apprenticehood", "apprentices", "apprenticeship", "apprenticeships", "apprizer", "apprizers", "appro", "approach", "approachability", "approaches", "approaching", "approbation", "approbations", "appropriateness", "appropriation", "appropriations", "appropriativeness", "appropriator", "appropriators", "approval", "approvals", "approver", "approvers", "approving", "approximation", "approximations", "appulse", "appulses", "appurtenance", "appurtenances", "appurtenant", "appurtenants", "apraxia", "apricot", "apricots", "april", "apriorism", "apriorisms", "apriorist", "apriorists", "apriorities", "apriority", "apron", "aprons", "apse", "apses", "apsidiole", "apsidioles", "apsis", "apterium", "apteryx", "apteryxes", "aptitude", "aptitudes", "aptness", "apuleius", "apulia", "apus", "aqaba", "aqua", "aquacade", "aquacades", "aquaculture", "aqualung", "aqualungs", "aquamanale", "aquamanales", "aquamanile", "aquamaniles", "aquamarine", "aquamarines", "aquanaut", "aquanauts", "aquaphobia", "aquaplane", "aquaplaner", "aquaplaners", "aquaplanes", "aquarelle", "aquarelles", "aquarellist", "aquarellists", "aquarist", "aquarists", "aquarium", "aquariums", "aquarius", "aquatic", "aquatics", "aquatint", "aquatints", "aquavit", "aquavits", "aqueduct", "aqueducts", "aquiculture", "aquifer", "aquifers", "aquila", "aquilegia", "aquilegias", "aquinas", "aquitaine", "ara", "arab", "arabella", "arabesque", "arabesques", "arabia", "arabian", "arabians", "arabic", "arabinose", "arabist", "arabists", "arable", "arabs", "araby", "araceae", "arachis", "arachises", "arachne", "arachnid", "arachnida", "arachnidan", "arachnidans", "arachnids", "arachnoid", "arafat", "aragon", "aragonite", "arak", "araks", "aralia", "aralias", "aramaic", "araneid", "araneids", "arapaho", "arapahos", "arapaima", "arapaimas", "ararat", "araroba", "araucaria", "araucarias", "arawakan", "arawakans", "arb", "arbalest", "arbalester", "arbalesters", "arbalests", "arbalister", "arbalisters", "arbiter", "arbiters", "arbitrage", "arbitrager", "arbitragers", "arbitrages", "arbitrageur", "arbitrageurs", "arbitrament", "arbitraments", "arbitrariness", "arbitrary", "arbitration", "arbitrations", "arbitrator", "arbitrators", "arbitrement", "arbitrements", "arbitress", "arbitresses", "arbor", "arborescence", "arborescences", "arboretum", "arboretums", "arboriculture", "arboriculturist", "arborist", "arborists", "arborization", "arborizations", "arbors", "arborvitae", "arbour", "arbours", "arbroath", "arbs", "arbuthnot", "arbutus", "arbutuses", "arc", "arcade", "arcades", "arcadia", "arcadian", "arcadianism", "arcadians", "arcady", "arcana", "arcanist", "arcanists", "arcanum", "arch", "archaeologist", "archaeologists", "archaeology", "archaeomagnetism", "archaeopteryx", "archaeopteryxes", "archaicism", "archaiser", "archaisers", "archaism", "archaisms", "archaist", "archaists", "archaizer", "archaizers", "archangel", "archangels", "archbishop", "archbishopric", "archbishoprics", "archbishops", "archdeacon", "archdeaconries", "archdeaconry", "archdeacons", "archdiocese", "archdioceses", "archduchess", "archduchesses", "archduchies", "archduchy", "archduke", "archdukes", "archegonium", "archenteron", "archenterons", "archeology", "archer", "archeries", "archers", "archery", "arches", "archetype", "archetypes", "archibald", "archie", "archiepiscopacy", "archiepiscopate", "archil", "archilochus", "archils", "archimage", "archimages", "archimandrite", "archimandrites", "archimedes", "arching", "archipelago", "archipelagoes", "archipelagos", "archipenko", "architect", "architectonics", "architects", "architecture", "architectures", "architrave", "architraves", "archive", "archives", "archivist", "archivists", "archivolt", "archivolts", "archlute", "archlutes", "archness", "archon", "archons", "archonship", "archonships", "archway", "archways", "archy", "arcs", "arcsecond", "arcseconds", "arctic", "arctiid", "arctiids", "arctogaea", "arcturus", "arcuation", "arcuations", "arcus", "arcuses", "ardeb", "ardebs", "arden", "ardency", "ardennes", "ardor", "ardors", "ardour", "ardours", "arduousness", "are", "area", "areas", "areaway", "areaways", "areca", "arecas", "areg", "aren t", "arena", "arenas", "arendt", "areography", "areola", "areolation", "areole", "areoles", "areopagite", "areopagus", "arere", "ares", "aretha", "arethusa", "arezzo", "arfvedsonite", "argal", "argali", "argalis", "argemone", "argemones", "argent", "argentina", "argentine", "argentines", "argentite", "argents", "argentum", "argil", "argillite", "argillites", "argils", "arginine", "argive", "argle bargle", "argo", "argol", "argols", "argon", "argonaut", "argonauts", "argos", "argosies", "argosy", "argot", "argots", "arguer", "arguers", "argufier", "argufiers", "arguing", "argument", "argumentation", "argumentations", "argumentativeness", "arguments", "argumentum", "argus", "arguses", "argy bargy", "argyle", "argyles", "argyll", "argyrodite", "arhythmia", "aria", "ariadne", "arian", "ariane", "arianism", "arianna", "arianne", "arias", "aridity", "aridness", "ariel", "ariels", "aries", "arietta", "ariettas", "aril", "arillode", "arillodes", "arils", "arimathaea", "arimathea", "arioso", "ariosos", "ariosto", "arista", "aristarchus", "aristas", "aristides", "aristippus", "aristocracies", "aristocracy", "aristocrat", "aristocrats", "aristophanes", "aristotelian", "aristotelianism", "aristotle", "arita", "arithmetic", "arithmetician", "arithmeticians", "arizona", "arizonan", "arizonans", "arizonian", "arizonians", "ark", "arkansan", "arkansans", "arkansas", "arkose", "arks", "arkwright", "arlington", "arm", "armada", "armadas", "armadillo", "armadillos", "armageddon", "armagh", "armagnac", "armament", "armamentarium", "armamentariums", "armaments", "armature", "armatures", "armband", "armbands", "armchair", "armchairs", "armco", "armenia", "armenian", "armenians", "armenoid", "armet", "armets", "armful", "armfuls", "armhole", "armholes", "armies", "armiger", "armigers", "armilla", "armillaria", "armillas", "arming", "arminian", "arminianism", "armistice", "armistices", "armlet", "armlets", "armoire", "armoires", "armor", "armorer", "armorers", "armorial", "armorican", "armories", "armorist", "armorists", "armors", "armory", "armour", "armour bearer", "armourer", "armourers", "armouries", "armours", "armoury", "armpit", "armpits", "armrest", "armrests", "arms", "arms runner", "arms runners", "armstrong", "armstrong jones", "armure", "armures", "army", "arne", "arnhem", "arnica", "arnicas", "arno", "arnold", "aroid", "aroids", "aroma", "aromas", "aromatic", "aromatics", "arousal", "arousals", "arouser", "arousers", "arp", "arpeggiation", "arpeggiations", "arpeggio", "arpeggios", "arpent", "arpents", "arquebus", "arquebuses", "arquebusier", "arquebusiers", "arrack", "arracks", "arraigner", "arraigners", "arraignment", "arraignments", "arran", "arrangement", "arrangements", "arranger", "arrangers", "arranging", "arras", "arrases", "arrau", "array", "arrayal", "arrayals", "arrays", "arrear", "arrearage", "arrearages", "arrears", "arrest", "arrester", "arresters", "arrestment", "arrestments", "arrests", "arrhenius", "arrhenotoky", "arrhythmia", "arris", "arrises", "arrival", "arrivals", "arrivederci", "arrivisme", "arriviste", "arrivistes", "arroba", "arrobas", "arrogance", "arrogances", "arrogation", "arrogations", "arrondissement", "arrondissements", "arrow", "arrowhead", "arrowheads", "arrowroot", "arrowroots", "arrows", "arrowwood", "arroyo", "arroyos", "arsenal", "arsenals", "arsenate", "arsenic", "arsenical", "arsenide", "arsenides", "arsenite", "arsenites", "arshin", "arshines", "arshins", "arsine", "arsines", "arsis", "arson", "arsonist", "arsonists", "arsphenamine", "art", "artal", "artaud", "artefact", "artefacts", "artel", "artels", "artemis", "artemisia", "artemisias", "arterialisation", "arterialization", "arteries", "arteriography", "arteriole", "arterioles", "arteriosclerosis", "arteriotomies", "arteriotomy", "arteritis", "artery", "artfulness", "arthralgia", "arthritis", "arthromere", "arthromeres", "arthroplasty", "arthropod", "arthropoda", "arthropods", "arthroscopy", "arthrospore", "arthrospores", "arthur", "artic", "artichoke", "artichokes", "article", "articles", "artics", "articulacy", "articulateness", "articulation", "articulations", "articulator", "articulators", "artie", "artifact", "artifacts", "artifice", "artificer", "artificers", "artifices", "artificialities", "artificiality", "artificialness", "artilleries", "artillery", "artiness", "artiodactyl", "artiodactyls", "artisan", "artisans", "artist", "artiste", "artistes", "artistries", "artistry", "artists", "artlessness", "artocarpus", "artocarpuses", "arts", "artwork", "artworks", "aruba", "arugula", "arum", "arums", "arundel", "arvo", "arvos", "aryan", "aryans", "aryballos", "aryballoses", "aryl", "aryls", "arytaenoid", "arytaenoids", "arytenoid", "arytenoids", "asa", "asafetida", "asafoetida", "asana", "asanas", "asarabacca", "asarabaccas", "asarum", "asarums", "asbestos", "asbestosis", "ascariasis", "ascarid", "ascarides", "ascarids", "ascaris", "ascendance", "ascendances", "ascendancies", "ascendancy", "ascendant", "ascendants", "ascendence", "ascendences", "ascendencies", "ascendency", "ascendent", "ascendents", "ascender", "ascenders", "ascending", "ascension", "ascensions", "ascensiontide", "ascent", "ascents", "ascertainment", "ascesis", "ascetic", "asceticism", "ascetics", "asci", "ascidian", "ascidians", "ascidium", "ascites", "asclepiad", "asclepiadean", "asclepiads", "asclepias", "asclepiases", "asclepius", "ascomycete", "ascomycetes", "ascospore", "ascospores", "ascot", "ascription", "ascriptions", "ascus", "aseity", "asepsis", "asepticism", "asexuality", "asgard", "ash", "ash key", "ash keys", "ash pan", "ash pans", "ashamedness", "ashanti", "ashcroft", "ashdown", "ashe", "asher", "ashes", "ashet", "ashets", "ashford", "ashkenazi", "ashkhabad", "ashlar", "ashlaring", "ashlarings", "ashlars", "ashleigh", "ashley", "ashling", "ashram", "ashrams", "ashton", "ashton under lyne", "ashtoreth", "asia", "asian", "asians", "asiatic", "aside", "asides", "asininities", "asininity", "ask", "askari", "askaris", "asker", "askers", "asking", "asmara", "asmodeus", "asp", "asparagine", "asparagus", "asparaguses", "aspartame", "aspasia", "aspect", "aspects", "aspen", "aspens", "asper", "aspergill", "aspergillosis", "aspergills", "aspergillum", "aspergillums", "aspergillus", "asperities", "asperity", "aspers", "aspersion", "aspersions", "aspersorium", "asphalt", "asphalts", "asphaltum", "asphodel", "asphodels", "asphyxia", "asphyxiant", "asphyxiants", "asphyxiation", "asphyxiations", "asphyxiator", "asphyxiators", "aspic", "aspics", "aspidistra", "aspidistras", "aspirant", "aspirants", "aspirate", "aspirates", "aspiration", "aspirations", "aspirator", "aspirators", "aspirin", "aspirins", "asps", "asquith", "ass", "assad", "assafetida", "assagai", "assagais", "assai", "assailant", "assailants", "assailer", "assailers", "assailment", "assailments", "assais", "assam", "assamese", "assassin", "assassination", "assassinations", "assassinator", "assassinators", "assassins", "assault", "assaulter", "assaulters", "assaults", "assay", "assayer", "assayers", "assays", "assegai", "assegais", "assemblage", "assemblages", "assembler", "assemblers", "assemblies", "assembling", "assembly", "assemblyman", "assemblywoman", "assent", "assentation", "assentient", "assenting", "assentiveness", "assentor", "assentors", "assents", "asserter", "asserters", "assertion", "assertions", "assertiveness", "assertor", "assertors", "asses", "assessment", "assessments", "assessor", "assessors", "assessorship", "assessorships", "asset", "asset stripping", "assets", "asseveration", "asseverations", "assibilation", "assibilations", "assiduities", "assiduity", "assiduousness", "assign", "assignat", "assignation", "assignations", "assignats", "assignee", "assignees", "assigning", "assignment", "assignments", "assignor", "assignors", "assigns", "assimilation", "assimilationist", "assimilationists", "assimilations", "assisi", "assist", "assistance", "assistances", "assistant", "assistants", "assistantship", "assistantships", "assists", "assize", "assizes", "associability", "associate", "associates", "association", "associationism", "associations", "assonance", "assonances", "assonant", "assorter", "assorters", "assortment", "assortments", "assuagement", "assuagements", "assumpsit", "assumpsits", "assumption", "assumptions", "assurance", "assurances", "assured", "assuredness", "assureds", "assurer", "assurgency", "assyria", "assyrian", "assyrians", "assyriologist", "assyriology", "astaire", "astarte", "astatine", "aster", "asterisk", "asterisks", "asterism", "asteroid", "asteroidea", "asteroids", "asters", "asthenia", "asthenic", "asthenosphere", "asthma", "asthmatic", "asti", "astigmatic", "astigmatism", "astigmia", "astilbe", "astilbes", "aston", "astonishment", "astonishments", "astor", "astragal", "astragals", "astragalus", "astragaluses", "astrakhan", "astrakhans", "astraphobia", "astriction", "astrictions", "astrictive", "astrid", "astringencies", "astringency", "astringent", "astringents", "astringer", "astringers", "astrocyte", "astrodome", "astrodomes", "astrodynamics", "astrogeology", "astroid", "astroids", "astrolabe", "astrolabes", "astrolatry", "astrologer", "astrologers", "astrology", "astrometry", "astronaut", "astronautics", "astronauts", "astronavigation", "astronomer", "astronomers", "astronomy", "astrophysicist", "astrophysicists", "astrophysics", "astucity", "astuteness", "aswan", "asylum", "asylums", "asymmetries", "asymmetry", "asymptote", "asymptotes", "asynchronism", "asynchrony", "asyndeton", "asyndetons", "asynergia", "asynergy", "asystole", "at home", "at homes", "atabal", "atabals", "atacamite", "ataghan", "ataghans", "atalanta", "ataman", "atamans", "ataractic", "ataraxia", "ataraxic", "atavism", "ataxia", "ataxy", "ate", "atebrin", "atelectasis", "ateleiosis", "atelier", "ateliers", "aten", "athabaska", "athanasian", "atharva veda", "atheism", "atheist", "atheists", "atheling", "athelings", "athelstan", "athena", "athenaeum", "athenaeums", "athene", "atheneum", "atheneums", "athenian", "athenians", "athens", "atherine", "atherines", "athermancy", "atheroma", "atheromas", "atherosclerosis", "atherton", "athetosis", "athlete", "athletes", "athleticism", "athletics", "athos", "athrocyte", "athrocytes", "athrocytosis", "atkinson", "atlanta", "atlantic", "atlantis", "atlas", "atlases", "atman", "atmans", "atmolysis", "atmometer", "atmometers", "atmosphere", "atmospheres", "atmospherics", "atoll", "atolls", "atom", "atomicities", "atomicity", "atomies", "atomisation", "atomisations", "atomiser", "atomisers", "atomism", "atomist", "atomists", "atomization", "atomizations", "atomizer", "atomizers", "atoms", "atomy", "aton", "atonalism", "atonality", "atonement", "atonements", "atoner", "atoners", "atonic", "atonicity", "atony", "atopies", "atopy", "atresia", "atreus", "atrium", "atriums", "atrociousness", "atrocities", "atrocity", "atrophies", "atrophy", "atropine", "atropism", "atropos", "attach", "attachment", "attachments", "attack", "attacker", "attackers", "attacks", "attainability", "attainableness", "attainder", "attainders", "attainment", "attainments", "attaint", "attaints", "attainture", "attaintures", "attar", "attempt", "attemptability", "attempter", "attempts", "attenborough", "attendance", "attendances", "attendant", "attendants", "attender", "attenders", "attending", "attention", "attentions", "attentiveness", "attenuant", "attenuants", "attenuation", "attenuations", "attenuator", "attenuators", "attestation", "attestations", "attester", "attesters", "attestor", "attestors", "attic", "attica", "atticism", "attics", "attila", "attire", "attirement", "attirements", "attires", "attitude", "attitudes", "attitudinarian", "attitudinarians", "attitudiniser", "attitudinisers", "attitudinizer", "attitudinizers", "attlee", "attorney", "attorney at law", "attorneys", "attorneyship", "attorneyships", "attornment", "attornments", "attractant", "attractants", "attraction", "attractions", "attractiveness", "attractor", "attractors", "attribute", "attributes", "attribution", "attributions", "attributive", "attrition", "atwood", "aubade", "aubades", "aube", "auber", "auberge", "auberges", "aubergine", "aubergines", "aubergiste", "aubergistes", "auberon", "aubrey", "aubrietia", "aubrietias", "auburn", "auckland", "auction", "auctioneer", "auctioneers", "auctions", "audaciousness", "audacity", "aude", "auden", "audibility", "audibleness", "audience", "audiences", "audile", "audiles", "audio", "audiocassette", "audiocassettes", "audiogram", "audiograms", "audiology", "audiometer", "audiometers", "audiophile", "audiophiles", "audios", "audiotape", "audiotapes", "audiotypist", "audiotypists", "audiovisual", "audiphone", "audiphones", "audit", "audition", "auditions", "auditor", "auditories", "auditorium", "auditoriums", "auditors", "auditorship", "auditorships", "auditory", "auditress", "auditresses", "audits", "audrey", "audubon", "auer", "auerbach", "auger", "augers", "aught", "aughts", "augite", "augment", "augmentation", "augmentations", "augmentative", "augmenter", "augmenters", "augments", "augsburg", "augur", "auguries", "augurs", "augury", "august", "augusta", "augustan", "augustine", "augustinian", "augustinianism", "augustness", "augusts", "augustus", "auk", "auklet", "auklets", "auks", "aulos", "aumbries", "aumbry", "aune", "aunes", "aunt", "auntie", "aunties", "aunts", "aunty", "aura", "auras", "aurelia", "aurelian", "aurelias", "aurelius", "aureole", "aureoles", "aureomycin", "aureus", "auricle", "auricles", "auricula", "auricular", "auriculas", "auriga", "auriscope", "auriscopes", "aurist", "aurists", "aurochs", "aurochses", "aurora", "auroras", "aurum", "auschwitz", "auscultation", "auscultator", "auscultators", "ausgleich", "auslese", "auspice", "auspices", "auspiciousness", "aussie", "aussies", "austen", "austenite", "austenites", "auster", "austereness", "austerities", "austerity", "austerlitz", "austin", "austral", "australasia", "australasian", "australes", "australia", "australian", "australianism", "australians", "australite", "australoid", "australoids", "australopithecine", "australopithecus", "australorp", "austria", "austrian", "austrians", "austringer", "austringers", "austroasiatic", "austronesian", "autacoid", "autacoids", "autarchies", "autarchist", "autarchists", "autarchy", "autarkist", "autarkists", "autarky", "autecology", "auteur", "auteurs", "authentication", "authentications", "authenticator", "authenticators", "authenticity", "author", "authoress", "authoresses", "authorisation", "authorisations", "authoritarian", "authoritarianism", "authoritarians", "authoritativeness", "authorities", "authority", "authorization", "authorizations", "authors", "authorship", "authorships", "autism", "auto", "autoantibodies", "autoantibody", "autobiographer", "autobiographers", "autobiographies", "autobiography", "autobus", "autobuses", "autocade", "autocades", "autocatalysis", "autocephaly", "autochanger", "autochangers", "autochthon", "autochthones", "autochthonism", "autochthons", "autochthony", "autoclave", "autoclaves", "autocracies", "autocracy", "autocrat", "autocrats", "autocross", "autocrosses", "autocue", "autocues", "autocycle", "autocycles", "autodidact", "autodidacts", "autodyne", "autoeroticism", "autoerotism", "autogamy", "autogenesis", "autogenics", "autogeny", "autogiro", "autogiros", "autograft", "autografts", "autograph", "autographs", "autography", "autogyro", "autogyros", "autoharp", "autoharps", "autohypnosis", "autokinesis", "autolatry", "autolycus", "autolysis", "automat", "automata", "automates", "automatic", "automaticity", "automatics", "automation", "automations", "automatism", "automatist", "automatists", "automaton", "automatons", "automats", "automobile", "automobiles", "automobilist", "automobilists", "automorphism", "autonomies", "autonomist", "autonomists", "autonomy", "autonym", "autonyms", "autopilot", "autopilots", "autopista", "autopistas", "autoplasty", "autopsies", "autopsy", "autoradiograph", "autoradiographs", "autoradiography", "autoroute", "autoroutes", "autos", "autosome", "autosomes", "autostrada", "autostradas", "autotimer", "autotimers", "autotomy", "autotoxin", "autotoxins", "autotroph", "autotrophs", "autotype", "autotypes", "autumn", "autumns", "autunite", "auvergne", "auxanometer", "auxanometers", "auxesis", "auxetic", "auxiliaries", "auxiliary", "auxin", "auxins", "avadavat", "avadavats", "avail", "availability", "availableness", "avails", "avalanche", "avalanches", "avalon", "avant garde", "avant gardism", "avarice", "avarices", "avariciousness", "avatar", "avatars", "avebury", "avenger", "avengers", "avens", "avenses", "aventail", "aventailes", "aventails", "aventurine", "avenue", "avenues", "average", "averages", "averment", "averments", "avernus", "averroism", "averroist", "averseness", "aversion", "aversions", "avertin", "averting", "aves", "avesta", "avestan", "aveyron", "aviaries", "aviary", "aviation", "aviator", "aviators", "aviatress", "aviatresses", "aviatrix", "aviculture", "avidin", "avidins", "avidity", "avidness", "aviemore", "avifauna", "avifaunas", "avignon", "avion", "avionics", "aviso", "avisos", "avitaminosis", "avizandum", "avizandums", "avocado", "avocados", "avocation", "avocations", "avocet", "avocets", "avogadro", "avoidance", "avoidances", "avoirdupois", "avon", "avoset", "avosets", "avouchment", "avowal", "avowals", "avower", "avowers", "avowries", "avowry", "avril", "avulsion", "avulsions", "awakening", "awakenings", "award", "awarding", "awards", "awareness", "away", "aways", "awe", "awelessness", "awes", "awesomeness", "awfulness", "awkwardness", "awl", "awls", "awmous", "awn", "awner", "awners", "awning", "awnings", "awns", "axe", "axe breaker", "axe breakers", "axel", "axels", "axerophthol", "axes", "axiality", "axil", "axilla", "axillar", "axillary", "axils", "axinite", "axinomancy", "axiologist", "axiologists", "axiology", "axiom", "axioms", "axis", "axises", "axle", "axles", "axman", "axolotl", "axolotls", "axon", "axons", "axoplasm", "ayah", "ayahs", "aycliffe", "aye", "aye aye", "ayer", "ayes", "ayesha", "aylesbury", "aymara", "aymaras", "ayr", "ayre", "ayres", "ayrshire", "ayurveda", "azalea", "azaleas", "azan", "azans", "azathioprine", "azeotrope", "azeotropes", "azerbaijan", "azerbaijani", "azerbaijanis", "azide", "azides", "azidothymidine", "azilian", "azimuth", "azimuths", "azine", "azines", "azobenzene", "azolla", "azote", "azoth", "azoturia", "azrael", "aztec", "aztecs", "azulejo", "azulejos", "azure", "azures", "azurite", "baa", "baa lamb", "baa lambs", "baal", "baalbek", "baalism", "baalite", "baas", "bab", "baba", "babar", "babas", "babassu", "babassus", "babbage", "babbie", "babbitry", "babbitt", "babbitting", "babbittry", "babbitts", "babble", "babblement", "babbler", "babblers", "babbles", "babbling", "babblings", "babe", "babel", "baber", "babes", "babesia", "babesiosis", "babi", "babiche", "babies", "babiroussa", "babiroussas", "babirusa", "babirusas", "babirussa", "babirussas", "babis", "babism", "babist", "babists", "baboo", "baboon", "babooneries", "baboonery", "baboons", "baboos", "babs", "babu", "babul", "babuls", "babus", "babushka", "babushkas", "baby", "baby bouncer", "baby bouncers", "baby face", "baby sitter", "baby sitters", "baby walker", "baby walkers", "babyhood", "babylon", "babylonia", "babylonian", "babylonians", "bacardi", "bacardis", "bacca", "baccalaureate", "baccalaureates", "baccarat", "baccas", "bacchanal", "bacchanalia", "bacchanalianism", "bacchanals", "bacchant", "bacchante", "bacchantes", "bacchants", "bacchius", "bacchus", "baccies", "baccy", "bach", "bachelor", "bachelor s buttons", "bachelordom", "bachelorhood", "bachelorism", "bachelors", "bachs", "bacillemia", "bacilli", "bacillus", "bacitracin", "back", "back cloth", "back cloths", "back formation", "back number", "back to back", "backache", "backaches", "backband", "backbands", "backbencher", "backbenchers", "backbiter", "backbiters", "backboard", "backboards", "backbone", "backbones", "backbreaker", "backbreakers", "backchat", "backcourt", "backcross", "backcrosses", "backdown", "backdowns", "backdrop", "backdrops", "backer", "backers", "backfall", "backfalls", "backfield", "backfill", "backfills", "backfire", "backfires", "backgammon", "background", "backgrounds", "backhand", "backhander", "backhanders", "backhands", "backhoe", "backhoes", "backing", "backings", "backlash", "backlashes", "backlog", "backlogs", "backpack", "backpacker", "backpackers", "backpacking", "backpacks", "backplate", "backplates", "backrest", "backrests", "backroom", "backs", "backsaw", "backsaws", "backscatter", "backscatters", "backscratcher", "backscratchers", "backseat", "backset", "backsets", "backsheesh", "backsheeshes", "backside", "backsides", "backsight", "backsights", "backslapping", "backslider", "backsliders", "backsliding", "backspace", "backspacer", "backspacers", "backspaces", "backspin", "backspins", "backstabber", "backstabbers", "backstage", "backstairs", "backstitch", "backstop", "backstops", "backstroke", "backstrokes", "backswing", "backsword", "backswordman", "backswords", "backveld", "backwardation", "backwardness", "backwash", "backwashes", "backwater", "backwaters", "backwoods", "backwoodsman", "backyard", "backyards", "baclava", "baclavas", "bacon", "baconer", "baconers", "baconian", "baconianism", "bacons", "bacteraemia", "bacteremia", "bacteria", "bactericide", "bactericides", "bacteriochlorophyll", "bacterioid", "bacterioids", "bacteriologist", "bacteriologists", "bacteriology", "bacteriolysis", "bacteriolytic", "bacteriophage", "bacteriophages", "bacteriostasis", "bacteriostat", "bacteriostats", "bacterium", "bacteroid", "bacteroids", "bactria", "bactrian", "baculite", "baculites", "baculum", "bad", "badajoz", "badalona", "baddeleyite", "baddie", "baddies", "bade", "baden", "baden baden", "baden powell", "badge", "badger", "badgering", "badgers", "badges", "badinage", "badlands", "badman", "badminton", "badmintons", "badness", "baedeker", "baedekers", "bael", "baels", "baetyl", "baetyls", "baez", "baff", "baffies", "baffin", "baffle", "baffled", "bafflement", "bafflements", "baffler", "bafflers", "baffles", "baffs", "baffy", "bag", "bagasse", "bagassosis", "bagatelle", "bagatelles", "bagdad", "bagehot", "bagel", "bagels", "bagful", "bagfuls", "baggage", "baggages", "bagged", "baggies", "bagginess", "bagging", "baggings", "baggy", "baghdad", "bagheera", "bagley", "bagman", "bagnio", "bagnios", "bagpipe", "bagpiper", "bagpipers", "bagpipes", "bags", "baguette", "baguettes", "baguio", "baguios", "bagwash", "bagwashes", "bagwig", "bagwigs", "bahai", "bahaism", "bahamas", "bahamian", "bahamians", "bahia", "bahrain", "baht", "bahts", "bahut", "bahuts", "bahuvrihi", "bahuvrihis", "baikal", "bail", "bailee", "bailees", "bailey", "baileys", "bailie", "bailies", "bailiff", "bailiffs", "bailiwick", "bailiwicks", "bailment", "bailments", "bailor", "bailors", "bails", "bailsman", "bain marie", "bainite", "bairam", "baird", "bairn", "bairns", "bait", "baiter", "baiters", "baiting", "baitings", "baits", "baize", "baizes", "bajada", "bajadas", "bake", "bakeapple", "bakeapples", "bakehouse", "bakehouses", "bakelite", "bakemeat", "baker", "bakeries", "bakers", "bakery", "bakes", "bakeware", "baking", "bakings", "baklava", "baklavas", "baksheesh", "baksheeshes", "bakst", "baku", "bala", "balaam", "balaamite", "balakirev", "balaklava", "balalaika", "balalaikas", "balance", "balancer", "balancers", "balances", "balanchine", "balancing", "balanitis", "balas", "balases", "balata", "balboa", "balboas", "balconet", "balconets", "balconies", "balcony", "baldachin", "baldachins", "balder", "balderdash", "balderdashes", "baldies", "baldmoney", "baldmoneys", "baldness", "baldpate", "baldpates", "baldric", "baldrick", "baldricks", "baldrics", "baldwin", "baldy", "bale", "baleen", "balefulness", "baler", "balers", "bales", "balfour", "bali", "balibuntal", "balibuntals", "balinese", "balk", "balker", "balkers", "balkiness", "balkline", "balklines", "balks", "balky", "ball", "ballad", "ballade", "balladeer", "balladeers", "ballades", "balladist", "balladists", "balladmonger", "balladmongers", "balladry", "ballads", "ballarat", "ballard", "ballast", "ballasts", "ballcock", "ballcocks", "ballerina", "ballerinas", "ballet", "balletomane", "balletomanes", "balletomania", "ballets", "balliol", "ballista", "ballistas", "ballistics", "ballistite", "ballistocardiogram", "ballistocardiograph", "ballistocardiography", "ballium", "ballon", "ballonet", "ballonets", "balloon", "ballooning", "balloonings", "balloonist", "balloonists", "balloons", "ballot", "balloting", "ballots", "ballpen", "ballpens", "ballplayer", "ballplayers", "balls", "ballup", "ballyhoo", "ballyhoos", "balm", "balmacaan", "balmacaans", "balminess", "balmoral", "balmorals", "balms", "balneologist", "balneologists", "balneology", "baloney", "balsa", "balsam", "balsams", "balsas", "balt", "balthazar", "balthazars", "baltic", "baltimore", "baluchi", "baluchistan", "baluster", "balusters", "balustrade", "balustrades", "balzac", "bamako", "bambi", "bambino", "bambinos", "bamboo", "bamboos", "bamboozlement", "ban", "banalities", "banality", "banana", "bananaland", "bananas", "banat", "banbury", "banc", "bancs", "band", "bandage", "bandages", "bandaging", "bandana", "bandanas", "bandanna", "bandannas", "bandeau", "bandelet", "bandelets", "banderilla", "banderillas", "banderillero", "banderilleros", "banderole", "banderoles", "bandersnatch", "bandersnatches", "bandicoot", "bandicoots", "bandies", "banding", "bandings", "bandit", "banditry", "bandits", "bandleader", "bandleaders", "bandmaster", "bandmasters", "bandog", "bandogs", "bandoleer", "bandoleers", "bandolier", "bandoliers", "bandoline", "bandolines", "bandore", "bandores", "bands", "bandsman", "bandstand", "bandstands", "bandung", "bandura", "banduras", "bandwagon", "bandwagons", "bandwidth", "bandy", "bane", "baneberries", "baneberry", "banefulness", "banes", "banff", "bang", "bangalore", "banger", "bangers", "banging", "bangkok", "bangladesh", "bangle", "bangles", "bangor", "bangs", "bangui", "bani", "bania", "banian", "banians", "banias", "banishment", "banister", "banisters", "banjo", "banjoes", "banjoist", "banjoists", "banjos", "banjul", "bank", "banker", "bankers", "banket", "bankhead", "banking", "bankroll", "bankrolls", "bankrupt", "bankruptcies", "bankruptcy", "bankrupts", "banks", "banksia", "banksias", "banlieue", "banner", "banneret", "bannerets", "bannerol", "bannerols", "banners", "banning", "bannister", "bannisters", "bannock", "bannockburn", "bannocks", "banns", "banquet", "banqueter", "banqueters", "banqueting", "banquets", "banquette", "banquettes", "banquo", "bans", "banshee", "banshees", "bant", "bantam", "bantams", "banteng", "bantengs", "banter", "banterer", "banterers", "banters", "banting", "bantings", "bantling", "bantlings", "bants", "bantu", "bantus", "bantustan", "banyan", "banyans", "banzai", "banzais", "baobab", "baobabs", "bap", "baps", "baptism", "baptisms", "baptist", "baptisteries", "baptistery", "baptistries", "baptistry", "baptists", "bar", "barabbas", "barathea", "baraza", "barazas", "barb", "barbadian", "barbadians", "barbados", "barbara", "barbarian", "barbarians", "barbarisation", "barbarisations", "barbarism", "barbarisms", "barbarities", "barbarity", "barbarization", "barbarizations", "barbarossa", "barbarousness", "barbary", "barbasco", "barbascos", "barbe", "barbecue", "barbecues", "barbecuing", "barbel", "barbels", "barbeque", "barbeques", "barber", "barber surgeon", "barber surgeons", "barberries", "barberry", "barbers", "barbes", "barbet", "barbets", "barbette", "barbettes", "barbican", "barbicans", "barbicel", "barbicels", "barbirolli", "barbital", "barbitone", "barbitones", "barbiturate", "barbiturates", "barbotine", "barbour", "barbours", "barbs", "barbuda", "barbule", "barbules", "barbusse", "barcarole", "barcaroles", "barcarolle", "barcarolles", "barcelona", "barchan", "barchanes", "barchans", "barclay", "bard", "bardolatry", "bardot", "bards", "bardship", "barefacedness", "barege", "barenboim", "bareness", "bares", "baresark", "barflies", "barfly", "bargain", "bargainer", "bargainers", "bargaining", "bargains", "barge", "bargeboard", "bargeboards", "bargee", "bargees", "bargello", "bargellos", "bargeman", "bargepole", "bargepoles", "barges", "barghest", "barghests", "bari", "barilla", "baring", "barish", "barite", "baritone", "baritones", "barium", "bark", "barkeeper", "barkeepers", "barkentine", "barkentines", "barker", "barkers", "barkhan", "barkhans", "barks", "barley", "barley bree", "barley sugar", "barley sugars", "barleycorn", "barleycorns", "barleys", "barm", "barmaid", "barmaids", "barman", "barmbrack", "barmbracks", "barms", "barn", "barnabas", "barnaby", "barnacle", "barnacles", "barnard", "barnardo", "barndoor", "barndoors", "barnes", "barnet", "barney", "barneys", "barns", "barnsley", "barnstormer", "barnstormers", "barnum", "barnyard", "barnyards", "barogram", "barograms", "barograph", "barographs", "barometer", "barometers", "barometries", "barometry", "baron", "baronage", "baronages", "baroness", "baronesses", "baronet", "baronetage", "baronetages", "baronetcies", "baronetcy", "baronets", "barong", "barongs", "baronies", "barons", "barony", "baroque", "baroques", "baroreceptor", "baroreceptors", "baroscope", "baroscopes", "barostat", "barostats", "barotse", "barotses", "barouche", "barouches", "barque", "barquentine", "barquentines", "barques", "barquisimeto", "barra", "barrack", "barracker", "barrackers", "barracking", "barrackings", "barracks", "barracoon", "barracoons", "barracouta", "barracoutas", "barracuda", "barracudas", "barrage", "barrages", "barramunda", "barramundas", "barramundi", "barramundis", "barranca", "barranquilla", "barrator", "barrators", "barratry", "barrault", "barre", "barred", "barrel", "barrelful", "barrelfuls", "barrels", "barren", "barrenness", "barrenwort", "barrenworts", "barres", "barret", "barrets", "barrette", "barretter", "barretters", "barrettes", "barricade", "barricades", "barricado", "barricadoes", "barricados", "barrie", "barrier", "barriers", "barring", "barrings", "barrio", "barrios", "barrister", "barristers", "barrow", "barrow boy", "barrow boys", "barrow in furness", "barrows", "barrulet", "barrulets", "barry", "barrymore", "bars", "barsac", "barstool", "barstools", "bart", "bartender", "bartenders", "barter", "barterer", "barterers", "barters", "bartholdi", "bartholomew", "bartizan", "bartizans", "bartlett", "barton", "bartons", "baruch", "barye", "baryes", "baryon", "baryons", "barysphere", "baryta", "barytes", "baryton", "barytone", "barytones", "barytons", "bas relief", "bas rhin", "basalt", "basalts", "basanite", "basanites", "bascule", "bascules", "base", "baseball", "baseballs", "baseboard", "baseboards", "basel", "baseliner", "baseman", "basement", "basements", "baseness", "basenji", "basenjis", "baseplate", "baseplates", "bases", "bash", "bashaw", "bashaws", "bashes", "bashfulness", "basic", "basicity", "basics", "basidiospore", "basidiospores", "basidium", "basie", "basil", "basildon", "basilian", "basilica", "basilicas", "basilisk", "basilisks", "basils", "basin", "basinet", "basinets", "basinful", "basinfuls", "basingstoke", "basins", "basis", "baskerville", "basket", "basketball", "basketballs", "basketful", "basketfuls", "basketry", "baskets", "basketwork", "basle", "basnet", "basnets", "bason", "basons", "basophil", "basophils", "basotho", "basothos", "basque", "basques", "basra", "bass", "basses", "basset", "bassets", "bassinet", "bassinets", "bassist", "bassists", "basso", "basso relievo", "basso rilievo", "bassoon", "bassoonist", "bassoonists", "bassoons", "bassos", "basswood", "basswoods", "bast", "bastard", "bastardisation", "bastardisations", "bastardization", "bastardizations", "bastards", "bastardy", "baste", "baster", "basters", "bastes", "bastide", "bastides", "bastille", "bastilles", "bastinade", "bastinades", "bastinado", "bastinadoes", "bastinados", "basting", "bastings", "bastion", "bastions", "bastnaesite", "basts", "basuto", "basutoland", "basutos", "bat", "batata", "batatas", "batavia", "batch", "batches", "bate", "bateau", "bateleur", "bateleurs", "bates", "batfish", "bath", "bathe", "bather", "bathers", "bathes", "bathhouse", "bathhouses", "bathing", "batholite", "batholites", "batholith", "batholiths", "bathometer", "bathometers", "bathos", "bathrobe", "bathrobes", "bathroom", "bathrooms", "baths", "bathsheba", "bathtub", "bathtubs", "bathurst", "bathymeter", "bathymeters", "bathymetry", "bathyscape", "bathyscapes", "bathyscaphe", "bathyscaphes", "bathysphere", "bathyspheres", "batik", "batiks", "batista", "batiste", "batley", "batman", "baton", "batons", "batrachia", "batrachian", "batrachians", "bats", "bats in the belfry", "batsman", "batsmanship", "batswing", "batswings", "batt", "batta", "battalia", "battalias", "battalion", "battalions", "battas", "battel", "batteler", "battelers", "battels", "battement", "battements", "batten", "battenburg", "battens", "batter", "batterie", "batteries", "battering", "batters", "battersea", "battery", "batting", "battings", "battle", "battle ax", "battle axe", "battle axes", "battledore", "battledores", "battlefield", "battlefields", "battleground", "battlegrounds", "battlement", "battlements", "battleplane", "battler", "battlers", "battles", "battleship", "battleships", "battologies", "battology", "batts", "battue", "battues", "battuta", "batwing", "batwoman", "bauble", "baubles", "baud", "baudekin", "baudekins", "baudelaire", "bauds", "bauhaus", "baulk", "baulks", "baum", "bauxite", "bavardage", "bavardages", "bavaria", "bavarian", "bawbee", "bawbees", "bawcock", "bawcocks", "bawd", "bawdiness", "bawdry", "bawds", "bawdy", "bawl", "bawler", "bawlers", "bawling", "bawlings", "bawls", "bax", "bay", "bayard", "bayberries", "bayberry", "bayern", "bayonet", "bayonets", "bayonne", "bayou", "bayous", "bayreuth", "bays", "bazaar", "bazaars", "bazar", "bazars", "bazooka", "bazookas", "bdellium", "bea", "beach", "beach la mar", "beachcomber", "beachcombers", "beaches", "beachhead", "beachheads", "beachwear", "beacon", "beacons", "beaconsfield", "bead", "beadiness", "beading", "beadings", "beadle", "beadledom", "beadledoms", "beadles", "beads", "beadsman", "beadswoman", "beagle", "beagles", "beagling", "beaglings", "beak", "beaker", "beakers", "beaks", "beale", "beam", "beam ends", "beaminess", "beams", "bean", "bean bag", "bean bags", "beaneries", "beanery", "beanfeast", "beanfeasts", "beanie", "beanies", "beano", "beanos", "beanpole", "beanpoles", "beans", "beanstalk", "beanstalks", "beany", "bear", "bear s breech", "bear s ear", "bear s foot", "bear baiting", "bearableness", "beard", "bearding", "beards", "beardsley", "bearer", "bearers", "bearing", "bearings", "bearishness", "bears", "bearskin", "bearskins", "beast", "beastie", "beasties", "beastings", "beastliness", "beastly", "beasts", "beat", "beat up", "beater", "beaters", "beatification", "beatifications", "beating", "beatings", "beatitude", "beatitudes", "beatnik", "beatniks", "beaton", "beatrice", "beatrix", "beats", "beatty", "beau", "beaufort", "beaujolais", "beaulieu", "beaumarchais", "beaumont", "beaune", "beaut", "beauteousness", "beautician", "beauticians", "beauties", "beautification", "beautifications", "beautifier", "beautifiers", "beautiful", "beauts", "beauty", "beauvais", "beauvoir", "beaux", "beaver", "beaver tree", "beaverbrook", "beavers", "bebeerine", "bebeerines", "bebeeru", "bebeerus", "bebington", "bebop", "bebopper", "beboppers", "bebops", "beccafico", "beccaficos", "bechamel", "bechamels", "bechuana", "bechuanaland", "beck", "becker", "becket", "beckets", "beckett", "beckford", "beckmann", "beckon", "beckons", "becks", "becky", "becoming", "becomingness", "bed", "bed sitter", "bed sitters", "bed wetting", "bedazzlement", "bedbug", "bedbugs", "bedchamber", "bedchambers", "bedclothes", "bedcover", "bedcovers", "bedder", "bedders", "bedding", "beddings", "bedeguar", "bedeguars", "bedel", "bedels", "bedeman", "bedesman", "bedevilment", "bedfellow", "bedfellows", "bedford", "bedfordshire", "bedivere", "bedizenment", "bedlam", "bedlamite", "bedlamites", "bedlams", "bedlington", "bedlingtons", "bedmaker", "bedmakers", "bedouin", "bedouins", "bedpan", "bedpans", "bedpost", "bedposts", "bedrock", "bedrocks", "bedroom", "bedrooms", "beds", "bedside", "bedsides", "bedsit", "bedsits", "bedsock", "bedsocks", "bedsore", "bedsores", "bedspread", "bedspreads", "bedstead", "bedsteads", "bedstraw", "bedstraws", "bedtick", "bedticks", "bedtime", "bedtimes", "beduin", "beduins", "bedwarmer", "bedwarmers", "bee", "bee eater", "bee eaters", "beeb", "beech", "beecham", "beecher", "beeches", "beef", "beefalo", "beefaloes", "beefalos", "beefburger", "beefburgers", "beefcake", "beefcakes", "beefeater", "beefeaters", "beefiness", "beefs", "beefsteak", "beefsteaks", "beehive", "beehives", "beekeeper", "beekeepers", "beekeeping", "beeline", "beelines", "beelzebub", "beep", "beeper", "beepers", "beeps", "beer", "beer up", "beerbohm", "beeriness", "beers", "beersheba", "bees", "beestings", "beeswax", "beeswaxes", "beeswing", "beet", "beethoven", "beetle", "beetle crusher", "beetle crushers", "beetlehead", "beetleheads", "beetles", "beetroot", "beetroots", "beets", "beeves", "befooling", "beg", "begar", "begetter", "begetters", "beggar", "beggar s lice", "beggar my neighbour", "beggardom", "beggardoms", "beggarliness", "beggarman", "beggars", "beggarwoman", "beggary", "begging", "beggings", "beginner", "beginners", "beginning", "beginnings", "begonia", "begonias", "begs", "beguilement", "beguilements", "beguiler", "beguilers", "beguine", "beguines", "begum", "begums", "behalf", "behan", "behavior", "behaviorism", "behaviorist", "behaviorists", "behaviors", "behaviour", "behaviourism", "behaviourist", "behaviourists", "behaviours", "beheadal", "beheadals", "beheading", "behemoth", "behemoths", "behest", "behests", "behind", "behinds", "behn", "beholder", "beholders", "beholding", "behoof", "behoofs", "behrens", "behring", "beiderbecke", "beige", "beigel", "beigels", "beiges", "being", "beingness", "beings", "beirut", "bel", "belah", "belahs", "belatedness", "belay", "belays", "belch", "belcher", "belchers", "belches", "belching", "beldam", "beldame", "beldames", "beldams", "beleaguering", "belemnite", "belemnites", "belfast", "belfries", "belfry", "belga", "belgas", "belgian", "belgians", "belgium", "belgrade", "belgravia", "belgravian", "belial", "belief", "beliefs", "belier", "beliers", "believer", "believers", "believing", "belinda", "belisarius", "belittlement", "belittling", "belize", "bell", "bell ringer", "bell ringers", "bella", "belladonna", "belladonnas", "bellamy", "bellarmine", "bellarmines", "bellatrix", "belle", "bellerophon", "belles", "belles lettres", "belletrist", "belletrists", "bellicosity", "bellies", "belligerence", "belligerency", "belligerent", "belligerents", "belling", "bellini", "bellman", "belloc", "bellona", "bellow", "bellower", "bellowers", "bellowing", "bellows", "bellpull", "bellpulls", "bells", "bellwether", "bellwethers", "bellwort", "bellworts", "belly", "bellyache", "bellyacher", "bellyachers", "bellyaches", "bellyful", "bellyfuls", "belomancies", "belomancy", "belonging", "belongings", "belorussia", "belorussian", "beloved", "bels", "belshazzar", "belshazzars", "belt", "beltane", "belting", "beltings", "beltman", "belts", "beltway", "beltways", "beluga", "belugas", "belvedere", "belvederes", "bema", "bemas", "bemusement", "ben", "ben gurion", "benares", "bench", "bencher", "benchers", "benches", "bend", "bender", "benders", "bendigo", "bending", "bendings", "bendlet", "bendlets", "bends", "bene", "benedicite", "benedicites", "benedick", "benedict", "benedictine", "benedictines", "benediction", "benedictional", "benedictions", "benedictus", "benefaction", "benefactions", "benefactor", "benefactors", "benefactress", "benefactresses", "benefice", "beneficence", "beneficences", "benefices", "beneficialness", "beneficiaries", "beneficiary", "beneficiation", "beneficiations", "benefit", "benefits", "benelux", "benes", "benevolence", "benevolences", "benfleet", "bengal", "bengalese", "bengali", "bengaline", "bengalines", "bengalis", "bengals", "benghazi", "benightedness", "benignancy", "benignity", "benin", "benison", "benisons", "benjamin", "benjamins", "benjy", "benn", "benne", "bennes", "bennet", "bennets", "bennett", "benni", "bennis", "benny", "bens", "benson", "bent", "bentham", "benthamite", "benthos", "benthoses", "bentinck", "bentley", "bentonite", "bents", "bentwood", "benumbedness", "benumbment", "benzaldehyde", "benzedrine", "benzene", "benzidine", "benzine", "benzoate", "benzocaine", "benzodiazepine", "benzoin", "benzol", "benzoyl", "benzoyls", "benzyl", "beograd", "beowulf", "bequeathal", "bequeathals", "bequeathment", "bequeathments", "bequest", "bequests", "berating", "berber", "berberine", "berberines", "berberis", "berberises", "berbers", "berceuse", "berceuses", "berchtesgaden", "berdache", "berdaches", "berean", "bereavement", "bereavements", "berenice", "beret", "berets", "berg", "bergamo", "bergamot", "bergamots", "bergen", "bergenia", "bergenias", "bergerac", "bergman", "bergs", "bergschrund", "bergschrunds", "bergson", "bergsonian", "bergsonism", "beria", "beriberi", "bering", "berio", "berk", "berkeleian", "berkeleianism", "berkeley", "berkelium", "berks", "berkshire", "berley", "berlin", "berliner", "berliners", "berlines", "berlins", "berlioz", "berm", "berms", "bermuda", "bermudan", "bermudans", "bermudas", "bermudian", "bermudians", "bern", "bernadette", "bernadine", "bernard", "bernardine", "berne", "bernhardt", "bernice", "bernie", "bernini", "bernoulli", "bernstein", "berries", "berry", "bersagliere", "berserk", "berserker", "berserkers", "berserks", "bert", "berth", "bertha", "berthage", "berthas", "berthes", "berthold", "berths", "bertie", "bertolucci", "bertram", "bertrand", "berwick", "berwick upon tweed", "beryl", "beryllium", "beryls", "besant", "beseecher", "beseechers", "beseechingness", "besetment", "besetments", "besetter", "besetters", "besiegement", "besiegements", "besieger", "besiegers", "besieging", "besiegings", "besom", "besoms", "besottedness", "bess", "bessarabia", "bessarabian", "bessel", "bessemer", "bessie", "bessy", "best", "bestiality", "bestiaries", "bestiary", "bestowal", "bestowals", "bestowment", "bestowments", "bests", "bestsellerdom", "bet", "beta", "betaine", "betas", "betatron", "betatrons", "betel", "betelgeuse", "betels", "betes", "beth", "bethany", "bethel", "bethels", "bethesda", "bethlehem", "beths", "betjeman", "betonies", "betony", "betrayal", "betrayals", "betrayer", "betrayers", "betrothal", "betrothals", "betrothed", "betrotheds", "bets", "betsy", "better", "betterment", "betterments", "betters", "betties", "bettina", "bettor", "bettors", "betty", "between maid", "betweenness", "beulah", "bevan", "bevatron", "bevatrons", "bevel", "beveler", "bevelers", "bevels", "bever", "beverage", "beverages", "beveridge", "beverley", "bevers", "bevies", "bevin", "bevvies", "bevvy", "bevy", "bewick", "bewilderment", "bewitchery", "bewitchment", "bewitchments", "bexley", "bey", "beyond", "beys", "bezant", "bezants", "bezel", "bezels", "bezique", "beziques", "bezoar", "bezoars", "bezonian", "bhajan", "bhajans", "bhakti", "bhaktis", "bhang", "bharal", "bharals", "bharat", "bheesties", "bheesty", "bhindi", "bhopal", "bhutan", "bhutto", "biafra", "biafran", "biafrans", "bialystok", "bianca", "biarritz", "bias", "biases", "biathlon", "biathlons", "bib", "bibber", "bibbers", "bibcock", "bibcocks", "bibelot", "bibelots", "bible", "bibles", "bibliographer", "bibliographers", "bibliographies", "bibliography", "bibliolater", "bibliolaters", "bibliolatrist", "bibliolatrists", "bibliolatry", "bibliologies", "bibliologist", "bibliologists", "bibliology", "bibliomancy", "bibliomania", "bibliomaniac", "bibliomaniacs", "bibliopegist", "bibliopegists", "bibliopegy", "bibliophile", "bibliophiles", "bibliophilism", "bibliophily", "bibliophobia", "bibliopole", "bibliopoles", "bibliopolist", "bibliopolists", "bibliopoly", "bibliotheca", "bibliothecas", "bibs", "bibulousness", "bicameralism", "bicameralist", "bicameralists", "bicarb", "bicarbonate", "bicarbonates", "bice", "bicentenaries", "bicentenary", "bicentennial", "bicentennials", "biceps", "bicepses", "bichromate", "bicker", "bickerer", "bickerers", "bickering", "bickers", "bicorn", "bicorne", "bicuspid", "bicuspids", "bicycle", "bicycler", "bicyclers", "bicycles", "bicycling", "bicyclist", "bicyclists", "bid", "bidarka", "bidarkas", "bidder", "bidders", "biddies", "bidding", "biddings", "biddy", "bides", "bidet", "bidets", "bids", "bield", "bields", "bielefeld", "biennial", "biennials", "bier", "bierce", "bierkeller", "bierkellers", "biers", "biestings", "biff", "biffin", "biffins", "biffs", "bifurcation", "bifurcations", "big", "biga", "bigamies", "bigamist", "bigamists", "bigamy", "bigarade", "bigarades", "bigener", "bigeners", "bigfoot", "bigg", "biggie", "biggies", "biggin", "bigging", "biggins", "biggs", "biggy", "bighead", "bigheads", "bigheartedness", "bighorn", "bighorns", "bight", "bights", "bigmouth", "bigness", "bigot", "bigotries", "bigotry", "bigots", "biguanide", "bigwig", "bigwigs", "bihar", "bihari", "biharis", "bijection", "bijou", "bijouterie", "bike", "bikes", "bikie", "bikies", "bikini", "bikinis", "bilabial", "bilabials", "bilander", "bilanders", "bilateralism", "bilbao", "bilberries", "bilberry", "bilbo", "bilboes", "bilbos", "bildungsroman", "bile", "biles", "bilge", "bilges", "bilharzia", "bilharziasis", "bilimbi", "bilimbis", "bilingual", "bilingualism", "bilinguist", "bilinguists", "biliousness", "bilirubin", "biliverdin", "bilk", "bilker", "bilkers", "bilks", "bill", "bill broker", "billabong", "billboard", "billboards", "billet", "billet doux", "billets", "billfish", "billfold", "billfolds", "billhead", "billheads", "billhook", "billhooks", "billiard", "billiards", "billies", "billing", "billings", "billingsgate", "billion", "billionaire", "billionaires", "billions", "billionth", "billionths", "billiton", "billman", "billon", "billons", "billow", "billows", "billposter", "billposters", "bills", "billy", "billyboy", "billyboys", "billycock", "billycocks", "bilocation", "biltong", "bim", "bimbo", "bimbos", "bimetallism", "bimetallist", "bimetallists", "bimillenaries", "bimillenary", "bimillennium", "bimillenniums", "bimodality", "bimonthly", "bin", "binaries", "binary", "bind", "binder", "binderies", "binders", "bindery", "bindi eye", "binding", "bindings", "binds", "bindweed", "bindweeds", "bine", "bines", "bing", "binge", "bingen", "binges", "bingies", "bingle", "bingles", "bingo", "bingos", "bings", "bingy", "binnacle", "binnacles", "binocle", "binocles", "binocular", "binoculars", "binomial", "binomials", "binominal", "bins", "binturong", "binturongs", "bioassay", "bioastronautics", "biocatalyst", "biochemical", "biochemist", "biochemistry", "biochemists", "biocide", "biocides", "bioclimatology", "biodynamics", "bioecology", "bioelectricity", "bioengineering", "biofeedback", "bioflavonoid", "biog", "biogen", "biogenesis", "biogens", "biogeny", "biogeochemistry", "biogeography", "biographee", "biographer", "biographers", "biographies", "biography", "biogs", "biological", "biologist", "biologists", "biology", "bioluminescence", "biolysis", "biomass", "biomasses", "biome", "biomedicine", "biomes", "biometrician", "biometricians", "biometrics", "biometry", "bionics", "bionomics", "biont", "bionts", "biophysicist", "biophysicists", "biophysics", "bioplasm", "biopoiesis", "biopsies", "biopsy", "bioscope", "biosphere", "biospheres", "biosynthesis", "biosystematics", "biota", "biotas", "biotechnology", "biotin", "biotite", "biotype", "biotypes", "bipartisanship", "bipartition", "bipartitions", "biped", "bipeds", "biphenyl", "bipinnaria", "bipinnarias", "biplane", "biplanes", "bipod", "bipods", "bipolarity", "bipropellant", "bipyramid", "bipyramids", "biquadratic", "biracialism", "birch", "birches", "bird", "bird s eye", "bird s foot", "bird nesting", "bird watcher", "bird watchers", "birdbath", "birdbaths", "birdbrain", "birdbrains", "birdcage", "birdcages", "birdcall", "birdcalls", "birder", "birders", "birdhouse", "birdhouses", "birdie", "birdies", "birdman", "birds", "birdseed", "birdseeds", "birefringence", "bireme", "biremes", "biretta", "birettas", "biriani", "birianis", "birk", "birkbeck", "birkenhead", "birks", "birl", "birles", "birling", "birlings", "birls", "birmingham", "biro", "biros", "birr", "birrs", "birse", "birses", "birth", "birthday", "birthdays", "birthing", "birthmark", "birthmarks", "birthnight", "birthnights", "birthplace", "birthplaces", "birthright", "birthrights", "births", "birthstone", "birthstones", "birthwort", "birthworts", "biscay", "biscuit", "biscuits", "bise", "bisection", "bisections", "bisector", "bisectors", "bises", "bisexual", "bisexuality", "bisexuals", "bish", "bishes", "bishop", "bishop s cap", "bishopric", "bishoprics", "bishops", "bisk", "bisks", "bismarck", "bismuth", "bison", "bisons", "bisque", "bisques", "bissau", "bissextile", "bissextiles", "bister", "bistort", "bistorts", "bistouries", "bistoury", "bistre", "bistro", "bistros", "bisulphate", "bisulphide", "bit", "bitch", "bitcheries", "bitchery", "bitches", "bitchiness", "bite", "biter", "biters", "bites", "bitmap", "bitmaps", "bitonality", "bits", "bitt", "bitter", "bittercress", "bitterling", "bitterlings", "bittern", "bitterness", "bitterns", "bitters", "bittersweet", "bittersweets", "bitterwood", "bitterwoods", "bitting", "bittock", "bittocks", "bitts", "bitumen", "bitumens", "bituminisation", "bivalence", "bivalences", "bivalencies", "bivalency", "bivalent", "bivalents", "bivalve", "bivalves", "bivouac", "bivouacking", "bivouacs", "bivvies", "bivvy", "biz", "bizarreness", "bizet", "bizone", "bizones", "blab", "blabber", "blabbermouth", "blabbermouths", "blabbers", "blabs", "black", "black and white", "blackamoor", "blackamoors", "blackball", "blackballs", "blackbeard", "blackberries", "blackberry", "blackbird", "blackbirder", "blackbirders", "blackbirding", "blackbirdings", "blackbirds", "blackboard", "blackboards", "blackbody", "blackboy", "blackboys", "blackbuck", "blackbucks", "blackburn", "blackbutt", "blackcap", "blackcaps", "blackcock", "blackcocks", "blackcurrant", "blackcurrants", "blackdamp", "blackening", "blackface", "blackfellow", "blackfellows", "blackfish", "blackfishes", "blackfly", "blackfoot", "blackguard", "blackguardism", "blackguards", "blackhead", "blackheads", "blackheart", "blackhearts", "blacking", "blackings", "blackjack", "blackjacks", "blackleg", "blacklegs", "blacklist", "blacklists", "blackmail", "blackmailer", "blackmailers", "blackmails", "blackmore", "blackness", "blacknesses", "blackout", "blackouts", "blackpool", "blacks", "blackshirt", "blackshirts", "blacksmith", "blacksmiths", "blackthorn", "blackthorns", "blacktop", "blacktops", "blackwater", "blackwood", "blackwoods", "bladder", "bladders", "bladderwort", "bladderworts", "blade", "blades", "blaeberries", "blaeberry", "blague", "blagues", "blah", "blahs", "blain", "blains", "blair", "blake", "blamableness", "blame", "blameableness", "blamefulness", "blamelessness", "blames", "blameworthiness", "blanche", "blancmange", "blancmanges", "blandishment", "blandishments", "blandness", "blandnesses", "blank", "blanket", "blanketing", "blanketings", "blankets", "blankness", "blanknesses", "blanks", "blanquette", "blare", "blares", "blaring", "blarney", "blarneys", "blasphemer", "blasphemers", "blasphemies", "blasphemy", "blast", "blast off", "blast offs", "blastema", "blastemas", "blaster", "blasters", "blasting", "blastings", "blastment", "blastocoel", "blastocyst", "blastocysts", "blastoderm", "blastoderms", "blastogenesis", "blastomere", "blastomeres", "blastopore", "blastopores", "blastosphere", "blastospheres", "blasts", "blastula", "blastulas", "blatancy", "blather", "blathers", "blatherskite", "blatherskites", "blaubok", "blauboks", "blaze", "blazer", "blazers", "blazes", "blazing", "blazon", "blazoner", "blazoners", "blazonry", "blazons", "bleach", "bleacher", "bleacheries", "bleachers", "bleachery", "bleaches", "bleak", "bleakness", "bleaknesses", "bleaks", "bleariness", "bleat", "bleater", "bleaters", "bleats", "bleb", "blebs", "bleed", "bleeder", "bleeders", "bleeding", "bleedings", "bleeds", "bleep", "bleeps", "blemish", "blemishes", "blend", "blende", "blender", "blenders", "blending", "blendings", "blends", "blenheim", "blennies", "blenny", "blepharitis", "blepharospasm", "blesbok", "blesboks", "blessed", "blessedness", "blessing", "blessings", "blet", "blether", "blethers", "blets", "bletting", "blewits", "blewitses", "bligh", "blight", "blighter", "blighters", "blighties", "blights", "blighty", "blimp", "blimps", "blind", "blindage", "blindages", "blinder", "blinders", "blindfish", "blindfishes", "blindfold", "blindfolds", "blinding", "blindings", "blindness", "blindnesses", "blinds", "blindworm", "blindworms", "blini", "blinis", "blink", "blinkard", "blinkards", "blinker", "blinkers", "blinks", "blinkses", "blintz", "blintze", "blintzes", "blip", "blips", "bliss", "blissfulness", "blister", "blisters", "blitheness", "blithesomeness", "blitz", "blitzes", "blitzkrieg", "blitzkriegs", "blizzard", "blizzards", "bloat", "bloatedness", "bloater", "bloaters", "bloats", "blob", "blobs", "bloc", "bloch", "block", "blockade", "blockade runner", "blockade runners", "blockader", "blockaders", "blockades", "blockage", "blockages", "blockboard", "blockbuster", "blockbusters", "blockbusting", "blocker", "blockers", "blockhead", "blockheads", "blockhouse", "blockhouses", "blocking", "blockings", "blocks", "blocs", "bloemfontein", "blois", "bloke", "blokes", "blond", "blonde", "blondeness", "blondes", "blondie", "blondness", "blonds", "blood", "bloodhound", "bloodhounds", "bloodiness", "blooding", "bloodlessness", "bloodletter", "bloodletters", "bloodletting", "bloodlettings", "bloodline", "bloodlines", "bloodlust", "bloodlusts", "bloodmobile", "bloodmobiles", "bloodroot", "bloodroots", "bloods", "bloodshed", "bloodsheds", "bloodstain", "bloodstains", "bloodstock", "bloodstone", "bloodstones", "bloodstream", "bloodstreams", "bloodsucker", "bloodsuckers", "bloodthirstiness", "bloom", "bloomer", "bloomeries", "bloomers", "bloomery", "bloomfield", "blooming", "bloomington", "blooms", "bloomsbury", "blooper", "bloopers", "blossom", "blossoming", "blossomings", "blossoms", "blot", "blotch", "blotches", "blots", "blotter", "blotters", "blouse", "blouses", "blouson", "blousons", "blow", "blow by blow", "blowback", "blowbacks", "blowball", "blowballs", "blower", "blowers", "blowfish", "blowflies", "blowfly", "blowgun", "blowguns", "blowhard", "blowhards", "blowhole", "blowholes", "blowie", "blowies", "blowing", "blowlamp", "blowlamps", "blowoff", "blowoffs", "blowpipe", "blowpipes", "blows", "blowtorch", "blowtorches", "blubber", "blubberer", "blubberers", "blubbers", "blucher", "bluchers", "bludge", "bludgeon", "bludgeons", "bludges", "blue", "blue green", "bluebeard", "bluebeards", "bluebell", "bluebells", "blueberries", "blueberry", "bluebird", "bluebirds", "bluebottle", "bluebottles", "bluecoat", "bluecoats", "bluefish", "bluefishes", "bluegill", "bluegills", "bluegrass", "bluegrasses", "blueing", "blueings", "bluejacket", "bluejackets", "blueness", "bluenose", "bluenoses", "blueprint", "blueprints", "bluer", "blues", "bluest", "bluestocking", "bluestockings", "bluestone", "bluestones", "bluet", "bluethroat", "bluethroats", "bluetit", "bluetits", "blueweed", "blueweeds", "bluewing", "bluewings", "bluey", "blueys", "bluff", "bluffer", "bluffers", "bluffness", "bluffnesses", "bluffs", "bluing", "bluings", "blunder", "blunderbuss", "blunderbusses", "blunderer", "blunderers", "blunders", "blunger", "blungers", "bluntness", "bluntnesses", "blur", "blurb", "blurbs", "blurriness", "blurs", "blush", "blusher", "blushers", "blushes", "bluster", "blusterer", "blusterers", "blusters", "blyth", "bo peep", "boa", "boadicea", "boanerges", "boar", "board", "boarder", "boarders", "boarding", "boardings", "boardroom", "boardrooms", "boards", "boardwalk", "boardwalks", "boarfish", "boarfishes", "boarhound", "boarhounds", "boars", "boart", "boarts", "boas", "boast", "boaster", "boasters", "boastfulness", "boasting", "boastings", "boasts", "boat", "boatbill", "boatbills", "boatel", "boatels", "boater", "boaters", "boathouse", "boathouses", "boating", "boatman", "boats", "boatswain", "boatswains", "boattail", "boattails", "boaz", "bob", "bobberies", "bobbery", "bobbie", "bobbies", "bobbin", "bobbinet", "bobbinets", "bobbing", "bobbins", "bobble", "bobbles", "bobby", "bobby dazzler", "bobby dazzlers", "bobbysock", "bobbysocks", "bobbysoxer", "bobbysoxers", "bobcat", "bobcats", "bobolink", "bobolinks", "bobs", "bobsled", "bobsleds", "bobsleigh", "bobsleighs", "bobstay", "bobstays", "bobtail", "bobtails", "bocage", "bocages", "boccaccio", "bocce", "boccherini", "boche", "bochum", "bock", "bocks", "bod", "bodega", "bodegas", "bodement", "bodements", "bodes", "bodgie", "bodgies", "bodhisattva", "bodice", "bodices", "bodied", "bodies", "boding", "bodings", "bodkin", "bodkins", "bodleian", "bodmin", "bodoni", "bods", "body", "bodyguard", "bodyguards", "bodying", "bodywork", "bodyworks", "boeotia", "boeotian", "boer", "boers", "boethius", "boff", "boffin", "boffins", "boffo", "boffs", "bog", "bogan", "bogans", "bogarde", "bogart", "bogbean", "bogbeans", "bogey", "bogeyman", "bogeys", "boggart", "boggarts", "bogginess", "boggler", "bogglers", "bogie", "bogies", "bogle", "bogles", "bogong", "bogongs", "bogor", "bogs", "bogtrotter", "bogtrotters", "bogy", "bohea", "bohemia", "bohemian", "bohemianism", "bohemians", "bohol", "bohr", "bohunk", "bohunks", "boil", "boileau", "boiler", "boilermaker", "boilermakers", "boilerplate", "boilers", "boilersuit", "boilersuits", "boiling", "boilings", "boils", "boise", "boisterousness", "boito", "bokhara", "boko", "bokos", "bola", "bolas", "bold", "boldness", "boldo", "bole", "bolection", "bolections", "bolero", "boleros", "boles", "boletus", "boletuses", "boleyn", "bolide", "bolides", "bolingbroke", "bolivar", "bolivars", "bolivia", "bolivian", "boliviano", "bolivianos", "bolivians", "boll", "bollandist", "bollard", "bollards", "bollock", "bollocks", "bolls", "bolo", "bologna", "bolometer", "bolometers", "boloney", "bolos", "bolshevik", "bolsheviks", "bolshevism", "bolster", "bolsters", "bolt", "bolter", "bolters", "bolton", "bolts", "boltzmann", "bolus", "boluses", "bolzano", "boma", "bomas", "bomb", "bombard", "bombardier", "bombardiers", "bombardment", "bombardments", "bombardon", "bombardons", "bombards", "bombast", "bombasts", "bombax", "bombaxes", "bombay", "bombazine", "bombazines", "bombe", "bomber", "bombers", "bombes", "bombing", "bombora", "bomboras", "bombproof", "bombs", "bombshell", "bombshells", "bombsight", "bombsights", "bombycid", "bombycids", "bonanza", "bonanzas", "bonaparte", "bonapartism", "bonapartist", "bonbon", "bonbons", "bonce", "bonces", "bond", "bondage", "bonder", "bonders", "bonding", "bondings", "bondmaid", "bondmaids", "bondman", "bonds", "bondservant", "bondservants", "bondsman", "bondstone", "bondstones", "bondswoman", "bonduc", "bonducs", "bone", "bonefish", "bonehead", "boneheads", "boner", "boners", "bones", "boneset", "bonesets", "bonesetter", "bonesetters", "boneshaker", "boneshakers", "boneyard", "boneyards", "bonfire", "bonfires", "bong", "bongo", "bongoes", "bongos", "bongrace", "bongraces", "bongs", "bonhoeffer", "bonhomie", "boniness", "bonington", "bonism", "bonito", "bonitos", "bonn", "bonnard", "bonne", "bonnet", "bonnets", "bonniness", "bonsai", "bonspiel", "bonspiels", "bontebok", "bonteboks", "bonus", "bonuses", "bonxie", "bonxies", "bonze", "bonzes", "boo", "boob", "boobies", "boobook", "boobooks", "boobs", "booby", "boodle", "boodles", "boogie", "boogie woogie", "boogies", "boohoo", "boohoos", "book", "book learning", "bookbinder", "bookbinderies", "bookbinders", "bookbindery", "bookbinding", "bookbindings", "bookcase", "bookcases", "booker", "bookie", "bookies", "booking", "bookings", "bookishness", "bookkeeper", "bookkeepers", "bookkeeping", "booklet", "booklets", "booklouse", "bookmaker", "bookmakers", "bookmaking", "bookman", "bookmark", "bookmarker", "bookmarkers", "bookmarks", "bookmobile", "bookmobiles", "bookplate", "bookplates", "bookrest", "bookrests", "books", "bookseller", "booksellers", "bookshelf", "bookshop", "bookshops", "bookstall", "bookstalls", "bookstand", "bookstands", "bookstore", "bookwork", "bookworks", "bookworm", "bookworms", "boole", "boom", "boomer", "boomerang", "boomerangs", "boomers", "boomlet", "boomlets", "booms", "boon", "boondocks", "boondoggle", "boondoggler", "boondogglers", "boondoggles", "boone", "boons", "boor", "boorishness", "boorman", "boors", "boos", "boost", "booster", "boosters", "boosts", "boot", "bootblack", "bootblacks", "bootee", "bootees", "booth", "boothose", "booths", "bootie", "booties", "bootlace", "bootlaces", "bootle", "bootleg", "bootlegged", "bootlegger", "bootleggers", "bootlegging", "bootlegs", "bootlessness", "bootlicker", "bootlickers", "bootmaker", "bootmakers", "boots", "bootses", "bootstrap", "bootstraps", "booty", "booze", "booze up", "booze ups", "boozer", "boozers", "boozes", "booziness", "boozing", "bop", "bophuthatswana", "bopper", "boppers", "bops", "bor", "bora", "boracite", "borage", "borages", "borak", "borane", "boranes", "boras", "borate", "borates", "borax", "borazon", "borborygmus", "bord", "bordeaux", "bordel", "bordello", "bordellos", "bordels", "border", "bordereau", "borderer", "borderers", "borderland", "borderlands", "borderline", "borderlines", "borders", "bordet", "bordure", "bordures", "bore", "boreas", "borecole", "borecoles", "boredom", "boree", "borehole", "boreholes", "borer", "borers", "bores", "borg", "borges", "borghese", "borgia", "boride", "borides", "boring", "borings", "boris", "borneo", "bornholm", "bornite", "borodin", "borodino", "boron", "boronia", "boronias", "borosilicate", "borough", "borough english", "boroughs", "borrow", "borrower", "borrowers", "borrowing", "borrowings", "borrows", "bors", "borsch", "borsches", "borscht", "borschts", "borstal", "borstals", "bort", "borts", "bortsch", "bortsches", "borzoi", "borzois", "bos", "bos n", "bos ns", "boscage", "boscages", "bosch", "boschbok", "bose", "bosh", "boshes", "bosk", "boskage", "boskages", "bosket", "boskets", "boskiness", "bosks", "bosnia", "bosom", "bosoms", "boson", "bosons", "bosquet", "bosquets", "boss", "bosses", "bossiness", "bossism", "boston", "bostons", "bosun", "bosuns", "boswell", "boswellism", "bot", "botanical", "botanist", "botanists", "botanomancy", "botany", "botargo", "botargoes", "botargos", "botch", "botcher", "botcheries", "botchers", "botchery", "botches", "botel", "botels", "botflies", "botfly", "botha", "bother", "botheration", "bothers", "bothies", "bothy", "bots", "botswana", "bott", "botte", "bottega", "bottegas", "botticelli", "bottle", "bottle o", "bottle washer", "bottle washers", "bottlebrush", "bottlebrushes", "bottleful", "bottlefuls", "bottleneck", "bottlenecks", "bottler", "bottlers", "bottles", "bottom", "bottomry", "bottoms", "bottrop", "botts", "botulism", "botvinnik", "bouche", "boucher", "boudicca", "boudoir", "boudoirs", "bouffant", "bougainvillaea", "bougainvillaeas", "bougainville", "bough", "boughpot", "boughpots", "boughs", "bougie", "bougies", "bouillabaisse", "bouillabaisses", "bouillon", "bouillons", "bouk", "bouks", "boulanger", "boulder", "boulders", "boule", "boules", "boulevard", "boulevardier", "boulevardiers", "boulevards", "bouleversement", "bouleversements", "boulez", "boulle", "boulles", "boulogne", "bounce", "bouncer", "bouncers", "bounces", "bounciness", "bouncing", "bound", "boundaries", "boundary", "bounder", "bounders", "boundlessness", "bounds", "bounteousness", "bounties", "bountifulness", "bounty", "bouquet", "bouquets", "bourbaki", "bourbon", "bourbonism", "bourbonist", "bourbons", "bourdon", "bourdons", "bourg", "bourgeois", "bourgeoise", "bourgeoisie", "bourgeoisies", "bourgeon", "bourgeons", "bourgs", "bourguignon", "bourn", "bourne", "bournemouth", "bournes", "bourns", "bourse", "bourses", "bourtree", "bourtrees", "boustrophedon", "bout", "boutique", "boutiques", "bouts", "bouzouki", "bouzoukis", "bovate", "bovates", "bovid", "bovine", "bovril", "bovver", "bow", "bowdlerisation", "bowdlerisations", "bowdlerism", "bowdlerisms", "bowdlerization", "bowdlerizations", "bowel", "bowels", "bowen", "bower", "bowers", "bowery", "bowfin", "bowfins", "bowhead", "bowheads", "bowie", "bowing", "bowknot", "bowknots", "bowl", "bowlder", "bowlders", "bowler", "bowlers", "bowles", "bowlful", "bowlfuls", "bowline", "bowlines", "bowling", "bowlings", "bowls", "bowman", "bowpot", "bowpots", "bows", "bowser", "bowsers", "bowshot", "bowshots", "bowsprit", "bowsprits", "bowstring", "bowstrings", "bowwow", "bowwows", "bowyang", "bowyangs", "bowyer", "bowyers", "box", "boxer", "boxers", "boxes", "boxful", "boxfuls", "boxing", "boxings", "boxroom", "boxrooms", "boxwood", "boxwoods", "boy", "boyar", "boyars", "boyce", "boycott", "boycotter", "boycotters", "boycotts", "boyd", "boyer", "boyfriend", "boyfriends", "boyhood", "boyhoods", "boyishness", "boyle", "boyo", "boyos", "boys", "boysenberries", "boysenberry", "boz", "bozo", "bozos", "br er", "bra", "brabant", "brabble", "brabblement", "brabbles", "braccio", "brace", "bracelet", "bracelets", "bracer", "bracers", "braces", "brach", "braches", "brachiation", "brachiations", "brachiopod", "brachiopods", "brachiosaurus", "brachiosauruses", "brachistochrone", "brachium", "brachycephalic", "brachycephaly", "brachydome", "brachydomes", "brachylogy", "bracing", "bracken", "brackens", "bracket", "bracketing", "brackets", "brackishness", "bracknell", "bract", "bracteate", "bracteates", "bracteole", "bracteoles", "bracts", "brad", "bradawl", "bradawls", "bradbury", "bradburys", "bradford", "bradley", "bradman", "brads", "bradshaw", "bradycardia", "brae", "braes", "brag", "bragg", "braggadocio", "braggadocios", "braggart", "braggartism", "braggarts", "bragger", "braggers", "bragging", "brags", "brahe", "brahma", "brahman", "brahmanism", "brahmaputra", "brahmi", "brahmin", "brahminism", "brahmins", "brahms", "braid", "braider", "braiding", "braidings", "braids", "brail", "braille", "braillist", "braillists", "brails", "brain", "brain teaser", "brain teasers", "braincase", "braincases", "brainchild", "braininess", "brainlessness", "brainpan", "brainpans", "brainpower", "brains", "brainsickness", "brainstorm", "brainstorming", "brainstorms", "brainwashing", "brainwave", "brainwaves", "braising", "brake", "brake van", "brakeman", "brakes", "bram", "bramante", "bramble", "brambles", "brambling", "bramblings", "bramley", "bramleys", "bran", "branch", "branches", "branchia", "branching", "branchings", "branchiopod", "branchiopods", "branchlet", "branchlets", "brancusi", "brand", "brandenburg", "brander", "brandering", "branders", "brandies", "branding", "brandish", "brandishes", "brandling", "brandlings", "brando", "brandreth", "brandreths", "brands", "brandt", "brandy", "brangle", "brangles", "branle", "branles", "brans", "bransle", "bransles", "brant", "brants", "braque", "bras", "brash", "brashes", "brashness", "brasier", "brasiers", "brass", "brassard", "brassards", "brasserie", "brasseries", "brasses", "brassica", "brassicas", "brassie", "brassiere", "brassieres", "brassies", "brassiness", "brat", "bratislava", "brats", "brattice", "brattices", "brattishing", "brattishings", "brattle", "brattles", "bratwurst", "bratwursts", "braun", "braunite", "braunschweig", "brava", "bravado", "bravadoes", "bravados", "bravas", "brave", "braveness", "braveries", "bravery", "braves", "bravest", "braving", "bravo", "bravoes", "bravos", "bravura", "bravuras", "brawl", "brawler", "brawlers", "brawls", "brawn", "brawniness", "braxies", "braxy", "bray", "brayer", "brays", "brazenness", "brazer", "brazers", "brazier", "braziers", "brazil", "brazilein", "brazilian", "brazilians", "brazilin", "brazils", "brazzaville", "breach", "breaches", "bread", "breadfruit", "breadfruits", "breadline", "breadlines", "breadnut", "breadnuts", "breadroot", "breadroots", "breads", "breadstuff", "breadstuffs", "breadth", "breadths", "breadwinner", "breadwinners", "break", "break in", "break ins", "breakable", "breakableness", "breakage", "breakages", "breakaway", "breakaways", "breakdown", "breakdowns", "breaker", "breakers", "breakfast", "breakfasts", "breaking", "breakings", "breakpoint", "breakpoints", "breaks", "breakthrough", "breakthroughs", "breakwater", "breakwaters", "bream", "breams", "breast", "breastbone", "breastbones", "breasting", "breastpin", "breastpins", "breastplate", "breastplates", "breasts", "breaststroke", "breaststrokes", "breastsummer", "breastsummers", "breastwork", "breastworks", "breath", "breathalyser", "breathalysers", "breathalyzer", "breathalyzers", "breather", "breathers", "breathes", "breathiness", "breathing", "breathings", "breathlessness", "breaths", "breccia", "breccias", "brecht", "brecon", "breconshire", "breda", "brede", "bredes", "bree", "breech", "breechblock", "breechblocks", "breeches", "breeching", "breechings", "breed", "breeder", "breeders", "breeding", "breedings", "breeds", "brees", "breeze", "breezes", "breezeway", "breeziness", "bregenz", "bregma", "breloque", "breloques", "bremen", "bremerhaven", "bremsstrahlung", "bren", "brenda", "brendan", "brens", "brent", "brentwood", "brescia", "bressummer", "bressummers", "brest", "bretagne", "breton", "bretons", "brett", "breughel", "breve", "breves", "brevet", "brevets", "breviaries", "breviary", "breviate", "breviates", "brevier", "breviers", "brevity", "brew", "brewage", "brewages", "brewer", "breweries", "brewers", "brewery", "brewing", "brewings", "brewis", "brewises", "brewmaster", "brews", "brezhnev", "brian", "briar", "briard", "briars", "bribe", "briber", "briberies", "bribers", "bribery", "bribes", "bric a brac", "brick", "brickbat", "brickbats", "brickfield", "brickfielder", "brickfields", "brickkiln", "brickkilns", "bricklayer", "bricklayers", "bricklaying", "brickmaker", "brickmakers", "brickmaking", "bricks", "brickwork", "brickworks", "brickyard", "brickyards", "bricole", "bricoles", "bridal", "bridals", "bride", "bridecake", "bridecakes", "bridegroom", "bridegrooms", "brides", "bridesmaid", "bridesmaids", "bridewell", "bridewells", "bridge", "bridgeboard", "bridgeboards", "bridgehead", "bridgeheads", "bridgeport", "bridges", "bridget", "bridgetown", "bridgework", "bridging", "bridgings", "bridgwater", "bridie", "bridies", "bridle", "bridler", "bridlers", "bridles", "bridoon", "bridoons", "brie", "brief", "briefcase", "briefcases", "briefing", "briefings", "briefness", "briefs", "brier", "briers", "brig", "brigade", "brigades", "brigadier", "brigadiers", "brigalow", "brigalows", "brigand", "brigandage", "brigandine", "brigandines", "brigands", "brigantine", "brigantines", "briggs", "brighouse", "bright", "brightener", "brighteners", "brightness", "brightnesses", "brighton", "brights", "brightwork", "brigid", "brigit", "brigs", "brill", "brilliance", "brilliances", "brilliancies", "brilliancy", "brilliant", "brilliantine", "brilliantness", "brilliants", "brills", "brim", "brimfulness", "brimmer", "brimmers", "brims", "brimstone", "brimstones", "brindle", "brine", "brines", "bringer", "bringers", "bringing", "bringings", "brininess", "brinjal", "brinjals", "brink", "brinkmanship", "brinks", "briny", "brio", "brioche", "brioches", "brionies", "briony", "briquet", "briquets", "briquette", "briquettes", "brisbane", "brise soleil", "brise soleils", "brisket", "briskets", "briskness", "brisling", "brislings", "bristle", "bristles", "bristliness", "bristol", "bristow", "brisure", "brisures", "brit", "britain", "britannia", "britches", "briticism", "british", "britisher", "britishers", "britishism", "britishness", "briton", "britons", "brits", "britska", "britskas", "brittany", "britten", "brittle", "brittle star", "brittle stars", "brittleness", "brittonic", "britzka", "britzkas", "brno", "bro", "broach", "broacher", "broachers", "broaches", "broad", "broad mindedness", "broad spectrum", "broadbill", "broadcast", "broadcaster", "broadcasters", "broadcasting", "broadcastings", "broadcasts", "broadcloth", "broadcloths", "broadening", "broadloom", "broadmoor", "broadness", "broads", "broadsheet", "broadsheets", "broadside", "broadsides", "broadsword", "broadswords", "broadtail", "broadtails", "broadway", "broadways", "brobdingnag", "brocade", "brocades", "brocatel", "brocatelle", "broccoli", "broccolis", "broch", "brochette", "brochettes", "brochs", "brochure", "brochures", "brock", "brockage", "brocket", "brockets", "brocks", "broederbond", "brogan", "brogans", "brogh", "broghs", "broglie", "brogue", "brogues", "broiderer", "broiderers", "broidery", "broil", "broiler", "broilers", "broiling", "broils", "brokage", "brokages", "brokenheartedness", "brokenness", "broker", "broker dealer", "broker dealers", "brokerage", "brokerages", "brokers", "brolga", "brolgas", "brollies", "brolly", "bromate", "bromates", "bromelia", "bromeliad", "bromeliads", "bromelias", "bromide", "bromides", "bromidrosis", "bromination", "bromine", "bromism", "bromley", "bromoform", "bromsgrove", "bronchi", "bronchiectasis", "bronchiole", "bronchioles", "bronchitis", "broncho", "bronchos", "bronchoscope", "bronchoscopes", "bronchoscopies", "bronchoscopy", "bronchus", "bronco", "broncos", "bronson", "brontosaur", "brontosaurs", "brontosaurus", "brontosauruses", "bronwen", "bronx", "bronze", "bronzed", "bronzes", "bronzing", "bronzings", "bronzite", "broo", "brooch", "brooches", "brood", "brooder", "brooders", "broodiness", "brooding", "broods", "broody", "brook", "brooke", "brookite", "brooklet", "brooklets", "brooklime", "brooklimes", "brooklyn", "brookner", "brooks", "brookweed", "brookweeds", "broom", "broomrape", "broomrapes", "brooms", "broomstick", "broomsticks", "broos", "bros", "brose", "broses", "broth", "brothel", "brothels", "brother", "brother in law", "brotherhood", "brotherhoods", "brotherliness", "brothers", "broths", "brough", "brougham", "broughams", "broughs", "brouhaha", "brouhahas", "brow", "browband", "browbeater", "browbeaters", "brown", "brown nose", "brown noses", "browne", "brownie", "brownies", "browning", "brownings", "brownness", "brownout", "brownouts", "browns", "brows", "browse", "browser", "browsers", "browses", "browsing", "browsings", "brubeck", "bruce", "brucellosis", "bruch", "brucine", "brucite", "bruckner", "brueghel", "bruges", "bruise", "bruiser", "bruisers", "bruises", "bruit", "bruits", "brulyie", "brulyies", "brumaire", "brumbies", "brumby", "brume", "brumes", "brummagem", "brummell", "brummie", "brummies", "brunch", "brunches", "brundisium", "brunei", "brunel", "brunella", "brunelleschi", "brunet", "brunets", "brunette", "brunettes", "brunhild", "bruno", "brunswick", "brunt", "brunts", "brush", "brush off", "brush offs", "brusher", "brushers", "brushes", "brushing", "brushings", "brushwood", "brushwoods", "brushwork", "brushworks", "brusqueness", "brusquerie", "brusqueries", "brussels", "brutalisation", "brutalisations", "brutalities", "brutality", "brutalization", "brutalizations", "brute", "bruteness", "brutes", "brutishness", "brutus", "bruxelles", "bruxism", "bryan", "bryant", "bryn", "brynhild", "bryologist", "bryologists", "bryology", "bryonies", "bryony", "bryophyte", "bryophytes", "bryozoa", "brython", "brythonic", "bub", "bubal", "bubals", "bubbies", "bubble", "bubbles", "bubbly", "bubbly jock", "bubby", "bubo", "buboes", "bubonocele", "bubonoceles", "bubs", "buccaneer", "buccaneering", "buccaneers", "buccinator", "buccinators", "bucephalus", "buchan", "buchanan", "bucharest", "buchenwald", "buchmanism", "buchmanite", "buchner", "buchu", "buchus", "buck", "buckaroo", "buckaroos", "buckayro", "buckayros", "buckbean", "buckbeans", "buckboard", "buckboards", "buckeen", "buckeens", "bucker", "buckers", "bucket", "bucketful", "bucketfuls", "buckets", "buckhorn", "buckhorns", "buckhound", "buckhounds", "buckingham", "buckinghamshire", "buckle", "buckler", "bucklers", "buckles", "buckling", "bucklings", "bucko", "buckoes", "buckra", "buckram", "buckrams", "buckras", "bucks", "buckshot", "buckshots", "buckskin", "buckskins", "buckthorn", "buckthorns", "bucktooth", "buckwheat", "buckwheats", "bucolic", "bucolics", "bucuresti", "bud", "budapest", "buddenbrooks", "buddha", "buddhism", "buddhist", "buddhists", "buddies", "budding", "buddings", "buddle", "buddleia", "buddleias", "buddles", "buddy", "budge", "budger", "budgerigar", "budgerigars", "budgers", "budges", "budget", "budgets", "budgie", "budgies", "buds", "budweis", "buff", "buffa", "buffalo", "buffaloes", "buffer", "buffers", "buffet", "buffeting", "buffetings", "buffets", "bufflehead", "buffleheads", "buffo", "buffoon", "buffoonery", "buffoons", "buffs", "bufo", "bufotenine", "bug", "bug hunter", "bug hunters", "bugaboo", "bugaboos", "bugbane", "bugbanes", "bugbear", "bugbears", "buggies", "buggy", "bughouse", "bugle", "bugler", "buglers", "bugles", "bugleweed", "bugloss", "buglosses", "bugong", "bugongs", "bugs", "buhl", "buhls", "buhrstone", "buhrstones", "build", "build up", "build ups", "builder", "builders", "building", "buildings", "builds", "built in", "bukovina", "bulawayo", "bulb", "bulbil", "bulbils", "bulbs", "bulbul", "bulbuls", "bulgar", "bulgaria", "bulgarian", "bulgarians", "bulge", "bulges", "bulghur", "bulginess", "bulgur", "bulimia", "bulk", "bulkhead", "bulkheads", "bulkiness", "bulks", "bull", "bull s eye", "bull s eyes", "bulla", "bullace", "bullaces", "bullaries", "bullary", "bullas", "bullbat", "bulldog", "bulldogs", "bulldozer", "bulldozers", "bullet", "bulletin", "bulletins", "bullets", "bullfight", "bullfighter", "bullfighters", "bullfights", "bullfinch", "bullfinches", "bullfrog", "bullfrogs", "bullhead", "bullheads", "bullied", "bullies", "bullion", "bullionist", "bullionists", "bullions", "bullishness", "bullnose", "bullock", "bullocks", "bullocky", "bullroarer", "bullroarers", "bulls", "bullwhip", "bullwhips", "bully", "bully off", "bully offs", "bullying", "bulnbuln", "bulnbulns", "bulrush", "bulrushes", "bulwark", "bulwarks", "bulwer lytton", "bum", "bumbailiff", "bumbailiffs", "bumbershoot", "bumbershoots", "bumble", "bumble puppy", "bumbler", "bumblers", "bumbles", "bumbling", "bumf", "bumfs", "bumkin", "bumkins", "bummalo", "bummaree", "bummarees", "bummed", "bummer", "bummers", "bumming", "bump", "bumper", "bumpers", "bumph", "bumphs", "bumpiness", "bumpkin", "bumpkins", "bumps", "bumptiousness", "bums", "bun", "buna", "bunce", "bunces", "bunch", "bunches", "bunchiness", "bunco", "buncombe", "buncos", "bund", "bundesrat", "bundestag", "bundle", "bundles", "bundling", "bundlings", "bundobust", "bundobusts", "bunds", "bundu", "bung", "bungalow", "bungalows", "bungee", "bungees", "bungle", "bungler", "bunglers", "bungles", "bungs", "bunion", "bunions", "bunk", "bunker", "bunkers", "bunkhouse", "bunkhouses", "bunko", "bunkos", "bunks", "bunkum", "bunnies", "bunny", "bunraku", "buns", "bunsen", "bunsens", "bunt", "buntal", "bunter", "bunters", "bunting", "buntings", "buntline", "buntlines", "bunts", "bunyan", "bunyip", "bunyips", "buonaparte", "buonarroti", "buoy", "buoyage", "buoyages", "buoyancy", "buoys", "buprestid", "bur", "buran", "burans", "burberries", "burberry", "burble", "burbler", "burblers", "burbles", "burbot", "burbots", "burd", "burden", "burdens", "burdock", "burdocks", "burds", "bureau", "bureaucracies", "bureaucracy", "bureaucrat", "bureaucratization", "bureaucrats", "bureaus", "burette", "burettes", "burg", "burgage", "burgages", "burgee", "burgees", "burgeon", "burgeons", "burger", "burgers", "burgess", "burgesses", "burgh", "burgher", "burghers", "burghley", "burghs", "burglar", "burglaries", "burglars", "burglary", "burgomaster", "burgomasters", "burgonet", "burgonets", "burgoo", "burgoos", "burgos", "burgoyne", "burgrave", "burgraves", "burgs", "burgundian", "burgundies", "burgundy", "burhel", "burhels", "burial", "burials", "burin", "burins", "burk", "burka", "burkas", "burkes", "burks", "burl", "burlap", "burlaps", "burler", "burlers", "burlesque", "burlesques", "burletta", "burlettas", "burley", "burliness", "burlington", "burls", "burma", "burman", "burmese", "burn", "burn up", "burn ups", "burne jones", "burner", "burners", "burnet", "burnets", "burnett", "burney", "burnham", "burning", "burnings", "burnish", "burnisher", "burnishers", "burnishes", "burnishment", "burnley", "burnous", "burnouse", "burnouses", "burns", "burnside", "burnsides", "buroo", "buroos", "burp", "burping", "burps", "burr", "burrawang", "burrawangs", "burrhel", "burrhels", "burrito", "burritos", "burro", "burros", "burroughs", "burrow", "burrower", "burrowers", "burrows", "burrs", "burrstone", "burrstones", "burs", "bursa", "bursar", "bursaries", "bursars", "bursary", "burschenschaft", "burse", "burses", "bursitis", "burst", "burster", "bursters", "bursts", "burt", "burthen", "burthens", "burton", "burton upon trent", "burtons", "burundi", "burweed", "burweeds", "burying", "bus", "busbies", "busboy", "busboys", "busby", "buses", "bush", "bushbabies", "bushbaby", "bushcraft", "bushcrafts", "bushel", "busheller", "bushellers", "bushels", "bushes", "bushfire", "bushfires", "bushiness", "bushing", "bushman", "bushmaster", "bushmasters", "bushranger", "bushrangers", "bushwalking", "bushwhacker", "bushwhackers", "bushwhacking", "bushy", "business", "businesses", "businessman", "businessmen", "businesswoman", "busk", "busker", "buskers", "buskin", "buskins", "busks", "busman", "busoni", "buss", "busses", "bust", "bust up", "bust ups", "bustard", "bustards", "bustee", "bustees", "buster", "busters", "bustle", "bustler", "bustlers", "bustles", "busts", "busybodies", "busybody", "busyness", "but", "butadiene", "butane", "butanol", "butch", "butcher", "butcher s broom", "butcheries", "butchering", "butcherings", "butchers", "butchery", "butches", "butene", "butler", "butlerage", "butlerages", "butleries", "butlers", "butlership", "butlerships", "butlery", "buts", "butt", "butte", "butter", "butter and eggs", "butter print", "butterball", "butterbur", "butterburs", "buttercup", "buttercups", "butterfield", "butterflies", "butterfly", "butterfly flower", "butteries", "butterine", "butterines", "butteriness", "buttermere", "butternut", "butternuts", "butters", "butterscotch", "butterwort", "butterworth", "butterworts", "buttery", "buttes", "butties", "butting", "buttock", "buttocks", "button", "buttonhole", "buttonholer", "buttonholers", "buttonholes", "buttonmould", "buttons", "buttonses", "buttress", "buttresses", "buttressing", "butts", "butty", "butyl", "butylene", "butyrate", "buxomness", "buxtehude", "buxton", "buy", "buyer", "buyers", "buying", "buyout", "buyouts", "buys", "buzz", "buzzard", "buzzards", "buzzer", "buzzers", "buzzes", "bwana", "bwanas", "by and by", "by blow", "by blows", "by election", "by elections", "by name", "by play", "by plot", "by product", "by products", "by street", "by your leave", "bye", "bye bye", "bye byes", "byelorussia", "byelorussian", "byelorussians", "byes", "bygone", "bygones", "bylaw", "bylaws", "bypass", "bypasses", "bypath", "bypaths", "byrd", "byre", "byres", "byrnie", "byrnies", "byroad", "byroads", "byron", "byssinosis", "byssus", "byssuses", "bystander", "bystanders", "byte", "bytes", "bytownite", "byway", "byways", "bywoner", "bywoners", "byword", "bywords", "byzant", "byzantine", "byzantinism", "byzantium", "byzants", "caaba", "cab", "cabal", "cabala", "cabalism", "cabalist", "cabalists", "caballer", "caballero", "caballeros", "caballers", "cabals", "cabana", "cabaret", "cabarets", "cabbage", "cabbages", "cabbagetown", "cabbageworm", "cabbageworms", "cabbala", "cabbalism", "cabbalist", "cabbalists", "cabbies", "cabby", "caber", "cabernet", "cabers", "cabin", "cabinet", "cabinetmaker", "cabinetmakers", "cabinets", "cabinetwork", "cabins", "cable", "cablegram", "cablegrams", "cables", "cablet", "cablets", "cableway", "cableways", "cabman", "cabob", "cabobs", "cabochon", "cabochons", "caboodle", "caboose", "cabooses", "cabot", "cabotage", "cabretta", "cabriole", "cabrioles", "cabriolet", "cabriolets", "cabs", "cacao", "cacaos", "cachalot", "cachalots", "cache", "caches", "cachet", "cachets", "cachexia", "cachexy", "cachinnation", "cachou", "cachous", "cachucha", "cachuchas", "cacique", "caciques", "caciquism", "cackle", "cackler", "cacklers", "cackles", "cacodaemon", "cacodaemons", "cacodemon", "cacodemons", "cacodyl", "cacoepies", "cacoepy", "cacoethes", "cacogenics", "cacographer", "cacographers", "cacography", "cacology", "cacomistle", "cacomistles", "cacophonies", "cacophony", "cactus", "cactuses", "cacuminal", "cad", "cadastre", "cadastres", "cadaver", "cadaverousness", "cadavers", "caddice", "caddices", "caddie", "caddies", "caddis", "caddises", "caddishness", "caddy", "cade", "cadees", "cadelle", "cadelles", "cadence", "cadences", "cadencies", "cadency", "cadenza", "cadenzas", "cades", "cadet", "cadets", "cadetship", "cadetships", "cadge", "cadger", "cadgers", "cadges", "cadi", "cadies", "cadillac", "cadillacs", "cadis", "cadiz", "cadmium", "cadmus", "cadre", "cadres", "cads", "caduceus", "caducities", "caducity", "caecilian", "caecilians", "caecum", "caedmon", "caelum", "caen", "caenogenesis", "caerleon", "caernarfon", "caernarvon", "caernarvonshire", "caerphilly", "caesar", "caesarea", "caesarean", "caesareans", "caesarism", "caesarist", "caesaropapism", "caesars", "caesium", "caesura", "caesuras", "cafard", "cafards", "cafeteria", "cafeterias", "caff", "caffein", "caffeine", "caffeinism", "caffeism", "caffs", "caftan", "caftans", "cage", "cageling", "cagelings", "cages", "caginess", "cagliari", "cagney", "cagoule", "cagoules", "cahier", "cahiers", "caiman", "caimans", "cain", "caine", "cainite", "cains", "caique", "caiques", "caird", "cairds", "cairene", "cairn", "cairngorm", "cairngorms", "cairns", "cairo", "caisson", "caissons", "caithness", "caitiff", "caitiffs", "caitlin", "caius", "cajeput", "cajolement", "cajoler", "cajolers", "cajolery", "cajun", "cajuns", "cajuput", "cake", "cakes", "cakewalk", "cakewalker", "cakewalkers", "cakewalks", "calabar", "calabash", "calabashes", "calaboose", "calabooses", "calabria", "calabrian", "calabrians", "caladium", "caladiums", "calais", "calamanco", "calamancoes", "calamancos", "calamander", "calamanders", "calamari", "calamaries", "calamary", "calamine", "calamint", "calamints", "calamite", "calamites", "calamities", "calamitousness", "calamity", "calamus", "calamuses", "calandria", "calandrias", "calanthe", "calanthes", "calash", "calashes", "calathus", "calc sinter", "calc tufa", "calcaneum", "calcaneums", "calcaneus", "calcar", "calcars", "calcedonies", "calcedony", "calceolaria", "calceolarias", "calces", "calcicole", "calciferol", "calcification", "calcifuge", "calcimine", "calcimines", "calcination", "calcinations", "calcite", "calcitonin", "calcium", "calcspar", "calculation", "calculations", "calculator", "calculators", "calculus", "calculuses", "calcutta", "caldarium", "calder", "caldera", "calderas", "caldron", "caldrons", "caldwell", "caledonia", "caledonian", "caledonians", "calefacient", "calefacients", "calefaction", "calefactions", "calefactories", "calefactory", "calendar", "calendars", "calender", "calenders", "calendula", "calendulas", "calenture", "calentures", "calescence", "calf", "calfs", "calfskin", "calfskins", "calgary", "cali", "caliban", "caliber", "calibers", "calibration", "calibrations", "calibrator", "calibrators", "calibre", "calibres", "calices", "caliche", "calicle", "calicles", "calico", "calicoes", "calicos", "calif", "california", "californian", "californians", "californium", "califs", "caligula", "calipash", "calipashes", "calipee", "calipees", "caliper", "calipers", "caliph", "caliphate", "caliphates", "caliphs", "calisaya", "calisayas", "calisthenics", "calix", "calk", "calker", "calkers", "calkin", "calkins", "calks", "call", "call up", "call ups", "calla", "callaghan", "callant", "callants", "callas", "caller", "callers", "callet", "calligrapher", "calligraphers", "calligraphist", "calligraphists", "calligraphy", "callimachus", "calling", "callings", "calliope", "calliper", "callipers", "callisthenics", "callisto", "callosities", "callosity", "callousness", "calloway", "callowness", "calls", "callum", "callus", "calluses", "calm", "calmative", "calmatives", "calming", "calmness", "calms", "calomel", "calorescence", "caloric", "caloricity", "calorie", "calories", "calorimeter", "calorimeters", "calorimetry", "calory", "calotte", "calottes", "caloyer", "caloyers", "calpac", "calpacs", "calque", "calques", "caltha", "calthas", "caltrop", "caltrops", "calumet", "calumets", "calumniation", "calumniations", "calumniator", "calumniators", "calumnies", "calumny", "calutron", "calutrons", "calvados", "calvaria", "calvary", "calvert", "calves", "calvin", "calving", "calvinism", "calvinist", "calvinists", "calvities", "calx", "calxes", "calycanthus", "calycanthuses", "calyces", "calycle", "calycles", "calyculus", "calypso", "calypsos", "calyptra", "calyptras", "calyptrogen", "calyptrogens", "calyx", "calyxes", "cam", "camaraderie", "camarilla", "camarillas", "camas", "camases", "camash", "camashes", "camass", "camasses", "camber", "cambers", "camberwell", "cambist", "cambistries", "cambistry", "cambists", "cambium", "cambiums", "cambodia", "cambodian", "cambodians", "cambrai", "cambrel", "cambrels", "cambria", "cambrian", "cambric", "cambridge", "cambridgeshire", "camden", "came", "camel", "cameleer", "cameleers", "camellia", "camellias", "camelopard", "camelopardalis", "camelopards", "camelopardus", "camelot", "camels", "camembert", "camemberts", "cameo", "cameos", "camera", "cameraman", "cameras", "camerlengo", "camerlengos", "camerlingo", "camerlingos", "cameron", "cameronian", "cameroon", "cameroons", "cameroun", "cames", "camilla", "camille", "camion", "camions", "camisado", "camisados", "camise", "camises", "camisole", "camisoles", "camlet", "camlets", "camomile", "camomiles", "camorra", "camouflage", "camouflages", "camouflet", "camouflets", "camoufleur", "camoufleurs", "camp", "campagna", "campaign", "campaigner", "campaigners", "campaigning", "campaigns", "campana", "campanas", "campanile", "campaniles", "campanologist", "campanologists", "campanology", "campbell", "campbellite", "campeche", "camper", "campers", "campesino", "campesinos", "campground", "campgrounds", "camphene", "camphire", "camphor", "camphors", "campinas", "camping", "campion", "campions", "campo", "campodeid", "camporee", "camporees", "campos", "camps", "campsite", "campsites", "campus", "campuses", "cams", "camshaft", "camshafts", "can", "can opener", "can openers", "cana", "canaan", "canaanite", "canaanites", "canadian", "canadians", "canaigre", "canaigres", "canaille", "canailles", "canakin", "canakins", "canal", "canaletto", "canaliculus", "canalisation", "canalisations", "canalization", "canalizations", "canals", "canard", "canards", "canarese", "canaries", "canary", "canasta", "canastas", "canaster", "canaveral", "canberra", "cancan", "cancans", "cancel", "canceler", "cancelers", "cancellation", "cancellations", "canceller", "cancellers", "cancels", "cancer", "cancers", "cancroid", "candace", "candela", "candelabra", "candelabras", "candelabrum", "candelas", "candelilla", "candelillas", "candescence", "candescences", "candice", "candida", "candidacies", "candidacy", "candidas", "candidate", "candidates", "candidateship", "candidateships", "candidature", "candidatures", "candide", "candidiasis", "candidness", "candies", "candle", "candle tree", "candlemas", "candlepin", "candlepins", "candler", "candlers", "candles", "candlewick", "candlewicks", "candor", "candour", "candy", "candytuft", "candytufts", "cane", "canella", "canephora", "canephoras", "caner", "caners", "canes", "canescence", "canescences", "canfield", "canful", "canfuls", "cangue", "cangues", "canicula", "canid", "canids", "canikin", "canikins", "canine", "canines", "caning", "canings", "caninity", "canister", "canisters", "canker", "cankeredness", "cankers", "canna", "cannabin", "cannabis", "cannae", "cannelloni", "cannelure", "cannelures", "canner", "canneries", "canners", "cannery", "cannes", "cannibal", "cannibalism", "cannibalization", "cannibals", "cannikin", "cannikins", "canniness", "canning", "cannock", "cannon", "cannonade", "cannonades", "cannonball", "cannonballs", "cannoneer", "cannoneers", "cannonry", "cannons", "cannula", "cannulas", "canoe", "canoeist", "canoeists", "canoes", "canon", "canoness", "canonesses", "canonicate", "canonicity", "canonisation", "canonisations", "canonist", "canonists", "canonization", "canonizations", "canonries", "canonry", "canons", "canopies", "canopus", "canopy", "canorousness", "canova", "cans", "cant", "cantab", "cantabile", "cantabrigian", "cantala", "cantaloup", "cantaloupe", "cantaloupes", "cantaloups", "cantankerousness", "cantata", "cantatas", "cantatrice", "cantatrices", "canteen", "canteens", "canter", "canterburies", "canterbury", "canterburys", "canters", "cantharus", "canthus", "canticle", "canticles", "cantilena", "cantilenas", "cantilever", "cantilevers", "cantillation", "cantillations", "cantina", "cantinas", "cantiness", "cantle", "cantles", "cantling", "canto", "canton", "cantonese", "cantonment", "cantonments", "cantons", "cantor", "cantors", "cantos", "cantrip", "cantrips", "cants", "cantus", "canuck", "canucks", "canula", "canulas", "canute", "canvas", "canvases", "canvass", "canvasser", "canvassers", "canvasses", "canvassing", "canyon", "canyons", "canzona", "canzonas", "canzone", "canzonet", "canzonets", "caoutchouc", "cap", "capa", "capabilities", "capability", "capablanca", "capableness", "capaciousness", "capacitance", "capacitation", "capacitations", "capacities", "capacitor", "capacitors", "capacity", "caparison", "caparisons", "capas", "cape", "caped", "capek", "capelin", "capeline", "capelines", "capelins", "capella", "caper", "capercaillie", "capercaillies", "capercailzie", "capercailzies", "caperer", "caperers", "capers", "capes", "capeskin", "capet", "capetian", "capias", "capiases", "capillaries", "capillarities", "capillarity", "capillary", "caping", "capita", "capital", "capitalisation", "capitalisations", "capitalism", "capitalist", "capitalists", "capitalization", "capitalizations", "capitals", "capitate", "capitation", "capitations", "capitol", "capitulant", "capitulants", "capitularies", "capitulary", "capitulation", "capitulations", "capitulum", "capiz", "caplin", "caplins", "capo", "capon", "capone", "capons", "caporal", "caporals", "capos", "capot", "capotasto", "capotastos", "capote", "capotes", "capots", "capp", "cappadocia", "capper", "cappers", "capping", "cappings", "cappuccino", "cappuccinos", "capri", "capriccio", "capriccios", "caprice", "caprices", "capriciousness", "capricorn", "capricorns", "capricornus", "caprification", "caprifig", "caprifigs", "capriole", "caprioles", "capris", "caproate", "caps", "capsaicin", "capsian", "capsicum", "capsicums", "capsid", "capsids", "capsizing", "capstan", "capstans", "capstone", "capstones", "capsule", "capsules", "captain", "captaincies", "captaincy", "captains", "captainship", "captainships", "caption", "captions", "captiousness", "captivation", "captivator", "captivators", "captive", "captives", "captivities", "captivity", "captor", "captors", "capture", "capturer", "capturers", "captures", "capuche", "capuches", "capuchin", "capuchins", "capulet", "capulets", "caput", "capybara", "capybaras", "car", "car ferries", "car ferry", "cara", "carabao", "carabaos", "carabid", "carabids", "carabin", "carabineer", "carabineers", "carabiner", "carabiners", "carabines", "carabinier", "carabiniere", "carabiniers", "caracal", "caracals", "caracara", "caracaras", "caracas", "carack", "caracks", "caracol", "caracole", "caracoles", "caracols", "caractacus", "caracul", "caraculs", "carafe", "carafes", "carambola", "carambolas", "caramel", "caramelisation", "caramelisations", "caramelization", "caramelizations", "caramels", "carangid", "carangids", "carangoid", "carapace", "carapaces", "carat", "carats", "caravaggio", "caravan", "caravaner", "caravaners", "caravanning", "caravans", "caravansaries", "caravansary", "caravanserai", "caravanserais", "caravel", "caravels", "caraway", "caraways", "carbamate", "carbamates", "carbamide", "carbamides", "carbanion", "carbanions", "carbazole", "carbide", "carbides", "carbies", "carbine", "carbineer", "carbineers", "carbines", "carbohydrate", "carbohydrates", "carbon", "carbonade", "carbonades", "carbonado", "carbonadoes", "carbonados", "carbonarism", "carbonate", "carbonates", "carbonation", "carboniferous", "carbonisation", "carbonisations", "carbonization", "carbonizations", "carbons", "carbonyl", "carbonylation", "carborundum", "carboxyl", "carboy", "carboys", "carbuncle", "carbuncles", "carburation", "carburetion", "carburetor", "carburetors", "carburettor", "carburettors", "carburisation", "carburisations", "carburization", "carburizations", "carby", "carcajou", "carcajous", "carcanet", "carcanets", "carcase", "carcases", "carcass", "carcasses", "carcassonne", "carcinogen", "carcinogenicity", "carcinogens", "carcinoma", "carcinomas", "carcinomatosis", "card", "cardamine", "cardamines", "cardamom", "cardamoms", "cardamon", "cardamons", "cardamum", "cardamums", "cardboard", "cardboards", "carder", "carders", "cardiac", "cardiacs", "cardialgia", "cardiff", "cardigan", "cardigans", "cardiganshire", "cardin", "cardinal", "cardinal bishop", "cardinal deacon", "cardinal priest", "cardinalate", "cardinals", "cardinalship", "cardinalships", "carding", "cardiogram", "cardiograms", "cardiograph", "cardiographs", "cardiography", "cardioid", "cardioids", "cardiologist", "cardiologists", "cardiology", "cardiomyopathy", "carditis", "cardoon", "cardoons", "cards", "carduus", "care", "careen", "careenage", "careenages", "careens", "career", "careerism", "careerist", "careerists", "careers", "carefulness", "caregiver", "caregivers", "carelessness", "carer", "carers", "cares", "caress", "caresses", "caressing", "caressings", "caret", "caretaker", "caretakers", "caretaking", "carets", "carex", "carey", "carfare", "carfares", "carfax", "carfaxes", "carfuffle", "carfuffles", "cargo", "cargoes", "carhop", "carhops", "cariama", "cariamas", "carib", "caribbean", "caribe", "caribes", "caribou", "caribous", "caricature", "caricatures", "caricaturist", "caricaturists", "caries", "carillon", "carillonneur", "carillonneurs", "carillons", "carina", "carinas", "carinate", "caring", "carioca", "cariocas", "cariole", "carioles", "caritas", "cark", "carks", "carl", "carla", "carlene", "carlie", "carline", "carlines", "carling", "carlings", "carlisle", "carlism", "carlist", "carload", "carlos", "carlovingian", "carlow", "carls", "carlsbad", "carlton", "carly", "carlyle", "carmagnole", "carmagnoles", "carman", "carmarthen", "carmarthenshire", "carmel", "carmelite", "carmelites", "carmichael", "carminative", "carminatives", "carmine", "carnac", "carnage", "carnages", "carnalism", "carnalisms", "carnalities", "carnality", "carnallite", "carnap", "carnarvon", "carnassial", "carnatic", "carnation", "carnations", "carnauba", "carnaubas", "carnegie", "carnelian", "carnelians", "carnet", "carnets", "carney", "carneys", "carnification", "carnival", "carnivals", "carnivora", "carnivore", "carnivores", "carnivorousness", "carnosities", "carnosity", "carnot", "carnotite", "caro", "carob", "carobs", "caroche", "caroches", "carol", "carole", "caroler", "carolers", "carolina", "caroling", "carolingian", "carolinian", "caroller", "carollers", "carols", "carolus", "caroluses", "carolyn", "carom", "caroms", "carotene", "carotenoid", "carotenoids", "carotid", "carotin", "carousal", "carousals", "carouse", "carousel", "carousels", "carouser", "carousers", "carouses", "carp", "carpaccio", "carpal", "carpals", "carpel", "carpels", "carpenter", "carpentering", "carpenters", "carpentry", "carper", "carpers", "carpet", "carpet sweeper", "carpet sweepers", "carpetbag", "carpetbagger", "carpetbaggers", "carpeting", "carpetings", "carpets", "carphology", "carpi", "carping", "carpings", "carpogonium", "carpogoniums", "carpology", "carpometacarpus", "carpophore", "carpophores", "carport", "carports", "carpospore", "carpospores", "carps", "carpus", "carpuses", "carracci", "carrack", "carracks", "carrageen", "carrageenan", "carrageenin", "carrageens", "carragheen", "carragheens", "carrara", "carrefour", "carrefours", "carrel", "carrell", "carrells", "carrels", "carriage", "carriages", "carriageway", "carriageways", "carrie", "carrier", "carriers", "carries", "carrington", "carriole", "carrioles", "carrion", "carrions", "carritch", "carritches", "carroll", "carronade", "carronades", "carrot", "carrots", "carrousel", "carrousels", "carry", "carry back", "carry on", "carry ons", "carryall", "carryalls", "carrycot", "carrycots", "carrying on", "cars", "carse", "carses", "carsickness", "carson", "cart", "cartage", "cartagena", "cartages", "carte", "cartel", "cartelism", "cartelist", "cartelists", "cartelization", "cartelizations", "cartels", "carter", "carters", "cartes", "cartesian", "cartesianism", "carthage", "carthaginian", "carthusian", "carthusians", "cartier", "cartier bresson", "cartilage", "cartilages", "carting", "cartload", "cartloads", "cartogram", "cartograms", "cartographer", "cartographers", "cartography", "cartomancy", "carton", "carton pierre", "cartons", "cartoon", "cartoonist", "cartoonists", "cartoons", "cartouch", "cartouche", "cartouches", "cartridge", "cartridges", "carts", "cartularies", "cartulary", "cartwheel", "cartwheels", "cartwright", "cartwrights", "carucate", "carucates", "caruncle", "caruncles", "caruso", "carvacrol", "carvacrols", "carvel", "carvels", "carver", "carvers", "carving", "carvings", "cary", "caryatid", "caryatides", "caryatids", "caryopsis", "carys", "casa", "casaba", "casabas", "casabianca", "casablanca", "casals", "casanova", "casas", "casaubon", "casbah", "casbahs", "cascabel", "cascabels", "cascade", "cascades", "cascara", "cascaras", "cascarilla", "cascarillas", "caschrom", "caschroms", "case", "caseation", "casebook", "casebooks", "casein", "caseinogen", "casemaker", "casemakers", "casemate", "casemates", "casement", "casements", "casern", "casernes", "caserns", "caserta", "cases", "casey", "cash", "cash book", "cash books", "cashaw", "cashaws", "cashbox", "cashboxes", "cashes", "cashew", "cashews", "cashier", "cashiers", "cashmere", "cashmeres", "casimere", "casimir", "casing", "casings", "casino", "casinos", "cask", "casket", "caskets", "casks", "caslon", "caspar", "casper", "caspian", "casque", "casques", "cassandra", "cassareep", "cassareeps", "cassata", "cassatas", "cassation", "cassations", "cassatt", "cassava", "cassavas", "casserole", "casseroles", "cassette", "cassettes", "cassia", "cassias", "cassidy", "cassie", "cassimere", "cassimeres", "cassini", "cassino", "cassinos", "cassiopeia", "cassis", "cassises", "cassiterite", "cassius", "cassock", "cassocks", "cassolette", "cassolettes", "cassone", "cassones", "cassoulet", "cassowaries", "cassowary", "cast", "cast off", "cast offs", "castanet", "castanets", "castaway", "castaways", "caste", "castellan", "castellans", "castellum", "castellums", "caster", "casters", "castes", "castigation", "castigations", "castigator", "castigators", "castile", "castilian", "castilla", "casting", "castings", "castle", "castleford", "castlereagh", "castles", "castling", "castor", "castoreum", "castoreums", "castors", "castrametation", "castrate", "castrates", "castration", "castrations", "castrato", "castro", "casts", "casual", "casualism", "casualisms", "casualness", "casuals", "casualties", "casualty", "casuist", "casuistries", "casuistry", "casuists", "cat", "cat s ear", "cat s eye", "cat s eyes", "cat s foot", "cat s paw", "cat s paws", "cat s tail", "cat lap", "cat o mountain", "cat o nine tails", "catabasis", "catabolism", "catacaustic", "catacaustics", "catachresis", "cataclasis", "cataclysm", "cataclysms", "catacomb", "catacombs", "catafalque", "catafalques", "catalan", "catalase", "catalepsy", "cataleptic", "cataleptics", "catalo", "cataloes", "catalog", "cataloger", "catalogers", "catalogs", "catalogue", "cataloguer", "cataloguers", "catalogues", "catalonia", "catalos", "catalpa", "catalpas", "catalysis", "catalyst", "catalysts", "catalytic", "catalyzer", "catalyzers", "catamaran", "catamarans", "catamenia", "catamite", "catamites", "catamount", "catamountain", "catamountains", "catamounts", "catananche", "catania", "cataphoresis", "cataphract", "cataphracts", "cataphyll", "cataphylls", "cataplasm", "cataplasms", "cataplexy", "catapult", "catapults", "cataract", "cataracts", "catarrh", "catarrhine", "catarrhs", "catastasis", "catastrophe", "catastrophes", "catastrophism", "catastrophist", "catastrophists", "catatonia", "catatonic", "catatonics", "catawba", "catawbas", "catbird", "catbirds", "catboat", "catboats", "catcall", "catcalls", "catch", "catch all", "catch as catch can", "catcher", "catchers", "catches", "catchflies", "catchfly", "catchiness", "catching", "catchings", "catchline", "catchlines", "catchment", "catchments", "catchpennies", "catchpenny", "catchpole", "catchpoles", "catchup", "catchups", "catchweed", "catchweeds", "catchword", "catchwords", "cate", "catechesis", "catechiser", "catechisers", "catechism", "catechisms", "catechist", "catechists", "catechizer", "catechizers", "catechol", "catecholamine", "catechu", "catechumen", "catechumenate", "catechumenates", "catechumenism", "catechumens", "categoricalness", "categories", "categorisation", "categorisations", "categorist", "categorists", "categorization", "categorizations", "category", "catena", "catenane", "catenanes", "catenaries", "catenary", "catenas", "catenation", "catenations", "cater cousin", "cateran", "caterans", "caterer", "caterers", "catering", "caterings", "caterpillar", "caterpillars", "caterwaul", "caterwauls", "cates", "catesby", "catfish", "catfishes", "catgut", "catguts", "cathar", "catharine", "catharism", "cathars", "catharsis", "cathartic", "cathartics", "cathay", "cathead", "catheads", "cathedra", "cathedral", "cathedrals", "cathedras", "catherina", "catherine", "catheter", "catheterisation", "catheterization", "catheters", "cathetus", "cathetuses", "cathexis", "cathisma", "cathismas", "cathode", "cathodes", "catholic", "catholicism", "catholicity", "catholicization", "catholicon", "catholicons", "catholicos", "catholics", "cathouse", "cathouses", "cathy", "catiline", "cation", "cations", "catkin", "catkins", "catling", "catlings", "catmint", "catmints", "catnap", "catnaps", "catnip", "catnips", "cato", "catoptrics", "catriona", "cats", "catsup", "catsups", "cattalo", "cattaloes", "cattalos", "catteries", "cattery", "catties", "cattiness", "cattishness", "cattle", "cattle grid", "cattle grids", "cattleman", "cattleya", "cattleyas", "catty", "catullus", "caucasia", "caucasian", "caucasians", "caucasoid", "caucasoids", "caucasus", "caucus", "caucuses", "caudate", "caudex", "caudexes", "caudillo", "caudillos", "caudle", "caudles", "caul", "cauld", "cauldron", "cauldrons", "caulds", "caules", "caulicle", "caulicles", "cauliculus", "cauliculuses", "cauliflory", "cauliflower", "cauliflowers", "caulis", "caulker", "caulkers", "caulome", "caulomes", "cauls", "causa", "causalities", "causality", "causation", "causationism", "causationist", "causationists", "causations", "causative", "causatives", "cause", "causelessness", "causer", "causerie", "causeries", "causers", "causes", "causeway", "causeways", "causey", "causeys", "causing", "caustic", "causticities", "causticity", "causticness", "caustics", "cauterant", "cauterants", "cauteries", "cauterisation", "cauterisations", "cauterization", "cauterizations", "cautery", "caution", "cautioner", "cautioners", "cautions", "cautious", "cautiousness", "cavafy", "cavalcade", "cavalcades", "cavalier", "cavalierism", "cavaliers", "cavalla", "cavallas", "cavallies", "cavally", "cavalries", "cavalry", "cavalryman", "cavan", "cavatina", "cavatinas", "cave", "cave in", "cave ins", "caveat", "caveats", "cavefish", "cavefishes", "cavel", "cavell", "cavels", "caveman", "cavendish", "cavendishes", "caver", "cavern", "caverns", "cavers", "caves", "cavesson", "cavessons", "cavetto", "caviar", "caviare", "caviares", "caviars", "cavie", "cavies", "cavil", "caviler", "cavilers", "caviller", "cavillers", "cavils", "caving", "cavings", "cavitation", "cavitations", "cavities", "cavity", "cavo rilievo", "cavo rilievos", "cavy", "caw", "cawley", "caws", "caxton", "cay", "cayenne", "cayennes", "cayman", "caymans", "cays", "cayuse", "cayuses", "cazique", "caziques", "cease", "cease fire", "ceases", "ceausescu", "cecil", "cecilia", "cecily", "cecity", "cecum", "cedar", "cedars", "cedarwood", "ceder", "ceders", "cedi", "cedilla", "cedillas", "ceding", "cedis", "cedric", "cedula", "cedulas", "ceilidh", "ceilidhs", "ceiling", "ceilings", "ceilometer", "celadon", "celadons", "celandine", "celandines", "celeb", "celebes", "celebrant", "celebrants", "celebration", "celebrations", "celebrator", "celebrators", "celebrities", "celebrity", "celebs", "celeriac", "celeriacs", "celeries", "celerity", "celery", "celesta", "celestas", "celestine", "celestite", "celia", "celibacy", "celibate", "celibates", "celina", "cell", "cella", "cellar", "cellarage", "cellarages", "cellarer", "cellarers", "cellaret", "cellarets", "cellarman", "cellars", "cellini", "cellist", "cellists", "cello", "cellobiose", "cellophane", "cellos", "cells", "cellulase", "cellule", "cellules", "cellulite", "cellulites", "cellulitis", "celluloid", "celluloids", "cellulose", "celluloses", "cellulosic", "celom", "celoms", "celt", "celtic", "celticism", "celticist", "celticists", "celts", "cembalist", "cembalists", "cembalo", "cembalos", "cement", "cementation", "cementations", "cementer", "cementers", "cementite", "cements", "cementum", "cemeteries", "cemetery", "cenacle", "cenacles", "cenesthesia", "cenobite", "cenobites", "cenogenesis", "cenospecies", "cenotaph", "cenotaphs", "cenote", "cenotes", "cenozoic", "censer", "censers", "censor", "censoring", "censoriousness", "censors", "censorship", "censorships", "censurableness", "censure", "censurer", "censurers", "censures", "census", "censuses", "cent", "cental", "centals", "centare", "centares", "centas", "centaur", "centaurea", "centaureas", "centauries", "centaurs", "centaurus", "centaury", "centavo", "centavos", "centenarian", "centenarians", "centenaries", "centenary", "centennial", "centennials", "center", "centerboard", "centerboards", "centering", "centerings", "centers", "centesimal", "centesimo", "centesis", "centiare", "centiares", "centigrade", "centigram", "centigrams", "centiliter", "centiliters", "centilitre", "centilitres", "centillion", "centillions", "centillionth", "centillionths", "centime", "centimes", "centimeter", "centimetre", "centimetre gram second", "centimetre gram seconds", "centimetres", "centimo", "centipede", "centipedes", "centner", "centners", "cento", "centos", "central", "centralisation", "centralisations", "centraliser", "centralisers", "centralism", "centralist", "centralists", "centralities", "centrality", "centralization", "centralizations", "centralizer", "centralizers", "centre", "centreboard", "centreboards", "centred", "centrefold", "centrefolds", "centres", "centricities", "centricity", "centrifugal", "centrifugation", "centrifuge", "centrifuges", "centring", "centrings", "centriole", "centrioles", "centripetalism", "centrist", "centrists", "centroid", "centroids", "centromere", "centrosome", "centrosomes", "centrosphere", "centrum", "centrums", "cents", "centuplicate", "centuplicates", "centuplication", "centuplications", "centuries", "centurion", "centurions", "century", "ceorl", "ceorls", "cep", "cephalalgia", "cephalin", "cephalitis", "cephalization", "cephalochordate", "cephalometry", "cephalonia", "cephalopod", "cephalopoda", "cephalopods", "cephalosporin", "cephalothorax", "cepheus", "ceps", "ceramal", "ceramals", "ceramic", "ceramicist", "ceramicists", "ceramics", "ceramist", "ceramists", "cerargyrite", "cerastes", "cerate", "cerates", "ceratitis", "ceratodus", "ceratoduses", "ceratopsian", "cerberus", "cercaria", "cercarian", "cercarias", "cercus", "cercuses", "cere", "cereal", "cereals", "cerebellum", "cerebellums", "cerebral", "cerebration", "cerebrations", "cerebritis", "cerebroside", "cerebrotonia", "cerebrotonic", "cerebrum", "cerebrums", "cerement", "cerements", "ceremonial", "ceremonialism", "ceremonials", "ceremonies", "ceremoniousness", "ceremony", "cerenkov", "ceres", "ceresin", "ceria", "cerise", "cerite", "cerium", "cermet", "cermets", "cerograph", "cerographist", "cerographists", "cerographs", "cerography", "ceroplastics", "cerotype", "cerotypes", "cert", "certainties", "certainty", "certes", "certificate", "certificates", "certification", "certifications", "certifier", "certifiers", "certiorari", "certioraris", "certitude", "certitudes", "certs", "cerulean", "cerumen", "ceruse", "cerussite", "cervantes", "cervelat", "cervelats", "cervices", "cervicitis", "cervid", "cervix", "cervixes", "cesium", "cess", "cessation", "cessations", "cesser", "cesses", "cession", "cessionaries", "cessionary", "cessions", "cesspit", "cesspits", "cesspool", "cesspools", "cestode", "cestodes", "cestus", "cestuses", "cesura", "cesuras", "cetacea", "cetacean", "cetaceans", "cetane", "cete", "ceterach", "ceterachs", "cetes", "cetology", "cetus", "ceylon", "ceylonese", "ceylonite", "cha cha", "cha cha cha", "chabazite", "chablis", "chabouk", "chabouks", "chabrier", "chabrol", "chacma", "chacmas", "chaconne", "chaconnes", "chad", "chadic", "chads", "chadwick", "chaenomeles", "chaeta", "chaetodon", "chaetodons", "chaetognath", "chaetopod", "chaetopods", "chafe", "chafer", "chafers", "chafes", "chaff", "chaffer", "chafferer", "chafferers", "chaffers", "chaffinch", "chaffinches", "chaffs", "chafing", "chagall", "chagrin", "chagrins", "chaim", "chain", "chainman", "chainplate", "chainplates", "chains", "chainsaw", "chainsaws", "chainwork", "chainworks", "chair", "chairladies", "chairlady", "chairlift", "chairlifts", "chairman", "chairmanship", "chairmanships", "chairperson", "chairpersons", "chairs", "chairwoman", "chaise", "chaises", "chakra", "chakras", "chalaza", "chalazas", "chalazion", "chalazions", "chalcanthite", "chalcedony", "chalcid", "chalcids", "chalcocite", "chalcographer", "chalcographers", "chalcographist", "chalcographists", "chalcography", "chalcopyrite", "chaldaic", "chaldea", "chaldean", "chaldee", "chaldron", "chaldrons", "chalet", "chalets", "chaliapin", "chalice", "chalices", "chalicothere", "chalicotheres", "chalk", "chalkboard", "chalkboards", "chalkpit", "chalkpits", "chalks", "chalkstone", "chalkstones", "challah", "challenge", "challenger", "challengers", "challenges", "challis", "chalone", "chalones", "chalumeau", "chalutz", "chalybeate", "chalybeates", "chalybite", "cham", "chamade", "chamades", "chamaeleon", "chamaeleons", "chamaephyte", "chamaephytes", "chamber", "chamberer", "chamberers", "chamberlain", "chamberlains", "chambermaid", "chambermaids", "chamberpot", "chamberpots", "chambers", "chambertin", "chambray", "chambrays", "chameleon", "chameleons", "chamfer", "chamfers", "chamfron", "chamfrons", "chamiso", "chamisos", "chamois", "chamomile", "chamomiles", "chamonix", "champ", "champac", "champacs", "champagne", "champagne ardenne", "champagnes", "champaign", "champaigns", "champers", "champerses", "champerties", "champerty", "champignon", "champignons", "champion", "champions", "championship", "championships", "champlain", "champs", "chams", "chance", "chance medley", "chanced", "chancel", "chancelleries", "chancellery", "chancellor", "chancellors", "chancellorship", "chancellorships", "chancels", "chances", "chancing", "chancre", "chancres", "chancroid", "chancroids", "chandelier", "chandeliers", "chandelle", "chandelles", "chandler", "chandlers", "chandlery", "chandra", "chandragupta", "chanel", "chaney", "changchun", "change", "change ringing", "changeability", "changeableness", "changefulness", "changeling", "changelings", "changer", "changers", "changes", "changsha", "channel", "channeler", "channelers", "channels", "chanoyu", "chanoyus", "chanson", "chansonnier", "chansonniers", "chansons", "chant", "chantage", "chantal", "chantarelle", "chantarelles", "chanter", "chanterelle", "chanterelles", "chanters", "chanteuse", "chanteuses", "chantey", "chanteys", "chanticleer", "chanticleers", "chanties", "chantilly", "chanting", "chantress", "chantresses", "chantries", "chantry", "chants", "chanty", "chanukah", "chaos", "chap", "chaparral", "chaparrals", "chapati", "chapatis", "chapatti", "chapattis", "chapbook", "chapbooks", "chape", "chapeau", "chapeaus", "chapel", "chapels", "chaperon", "chaperonage", "chaperonages", "chaperone", "chaperones", "chaperons", "chapes", "chapiter", "chapiters", "chaplain", "chaplaincies", "chaplaincy", "chaplainries", "chaplainry", "chaplains", "chaplainship", "chaplainships", "chaplet", "chaplets", "chaplin", "chapman", "chappal", "chappell", "chappie", "chappies", "chaps", "chapstick", "chaptalization", "chaptalizations", "chapter", "chapters", "chaptrel", "chaptrels", "char", "chara", "charabanc", "charabancs", "characid", "characids", "characin", "characins", "character", "characteries", "characterisation", "characterisations", "characteristic", "characteristics", "characterization", "characterizations", "characters", "charactery", "charade", "charades", "charango", "charangos", "charas", "charcoal", "charcuterie", "charcuteries", "chard", "chardin", "chardonnay", "chards", "charente", "charente maritime", "chares", "charge", "chargeableness", "charger", "chargers", "charges", "chariness", "chariot", "charioteer", "charioteers", "chariots", "charisma", "charismas", "charitableness", "charites", "charities", "charity", "charivari", "charivaris", "chark", "charkha", "charkhas", "charks", "charladies", "charlady", "charlatan", "charlatanism", "charlatanry", "charlatans", "charlemagne", "charlene", "charles", "charleston", "charley", "charlie", "charlock", "charlocks", "charlotte", "charlottes", "charlottetown", "charlton", "charm", "charmaine", "charmer", "charmers", "charmeuse", "charmeuses", "charmian", "charms", "charnel", "charollais", "charon", "charoseth", "charpentier", "charpoy", "charpoys", "charqui", "charr", "charrs", "chars", "chart", "charta", "chartas", "charter", "charterer", "charterers", "charterhouse", "charteris", "charters", "chartism", "chartist", "chartists", "chartography", "chartres", "charts", "chartularies", "chartulary", "charwoman", "charybdis", "chase", "chased", "chaser", "chasers", "chases", "chasid", "chasidism", "chasing", "chasm", "chasmogamy", "chasms", "chasseur", "chasseurs", "chassis", "chastener", "chasteners", "chasteness", "chastening", "chastenment", "chastenments", "chastisement", "chastisements", "chastiser", "chastisers", "chastity", "chasuble", "chasubles", "chat", "chatham", "chaton", "chatons", "chatoyancy", "chatoyant", "chats", "chattanooga", "chattel", "chattels", "chatter", "chatterbox", "chatterboxes", "chatterer", "chatterers", "chattering", "chatterings", "chatters", "chatterton", "chattiness", "chaucer", "chaucerian", "chaudfroid", "chaudfroids", "chauffer", "chauffers", "chauffeur", "chauffeurs", "chauffeuse", "chauffeuses", "chaulmoogra", "chaulmoogras", "chaulmugra", "chaulmugras", "chaunt", "chaunter", "chaunters", "chaunts", "chautauqua", "chauvinism", "chauvinist", "chauvinists", "chaw", "chaws", "chay", "chayote", "chayotes", "chays", "chazan", "chazans", "cheap", "cheap jack", "cheapener", "cheapeners", "cheapness", "cheapside", "cheapskate", "cheapskates", "cheat", "cheater", "cheaters", "cheating", "cheats", "chechako", "chechakoes", "chechakos", "chechen", "chechens", "check", "check in", "check ins", "checkbook", "checkbooks", "checker", "checkers", "checklist", "checklists", "checkmate", "checkmates", "checkout", "checkouts", "checkpoint", "checkpoints", "checkroom", "checkrooms", "checks", "cheddar", "cheddite", "cheechako", "cheechakoes", "cheechakos", "cheek", "cheekiness", "cheekpiece", "cheeks", "cheep", "cheeper", "cheepers", "cheeps", "cheer", "cheerer", "cheerers", "cheerfulness", "cheeriness", "cheering", "cheerio", "cheerios", "cheerlessness", "cheers", "cheese", "cheeseboard", "cheeseboards", "cheeseburger", "cheeseburgers", "cheesecake", "cheesecakes", "cheesecloth", "cheesecloths", "cheeseparer", "cheeseparers", "cheeses", "cheesewood", "cheesiness", "cheetah", "cheetahs", "cheewink", "cheewinks", "chef", "chef d oeuvre", "chefs", "cheilitis", "cheiron", "chekhov", "chela", "chelas", "chelaship", "chelate", "chelates", "chelation", "chelations", "chelicera", "chelicerate", "cheliped", "chelipeds", "chellean", "chelmsford", "cheloid", "cheloids", "chelone", "chelones", "chelonian", "chelonians", "chelsea", "chelsey", "cheltenham", "chemical", "chemicals", "chemiluminescence", "chemise", "chemises", "chemisette", "chemisettes", "chemism", "chemisorption", "chemist", "chemistries", "chemistry", "chemists", "chemmy", "chemnitz", "chemoprophylaxis", "chemoreceptor", "chemoreceptors", "chemosphere", "chemostat", "chemostats", "chemosynthesis", "chemotaxis", "chemotherapeutics", "chemotherapy", "chemotropism", "chemurgy", "chenille", "chenopod", "cheops", "cheque", "chequebook", "chequebooks", "chequer", "chequerboard", "chequers", "cheques", "cher", "cherbourg", "chere", "cherenkov", "cherie", "cherimoya", "cherimoyas", "chernozem", "cherokee", "cherokees", "cheroot", "cheroots", "cherries", "cherry", "cherry pie", "chersonese", "chersoneses", "chert", "chertsey", "cherub", "cherubini", "cherubs", "chervil", "chervils", "cheryl", "cheshire", "cheshunt", "cheshvan", "chess", "chessboard", "chessboards", "chessel", "chessels", "chesses", "chessman", "chest", "chester", "chesterfield", "chesterfields", "chesterton", "chestiness", "chestnut", "chestnuts", "chests", "chetah", "chetahs", "cheval de frise", "chevalier", "chevaliers", "chevaux de frise", "chevet", "chevies", "cheville", "chevilles", "cheviot", "cheviots", "chevrette", "chevrettes", "chevron", "chevrons", "chevrotain", "chevrotains", "chevy", "chew", "chewer", "chewers", "chewie", "chewing", "chewink", "chewinks", "chews", "cheyenne", "cheyennes", "chi", "chian", "chiao", "chiaroscuro", "chiaroscuros", "chiasm", "chiasma", "chiasmas", "chiasms", "chiasmus", "chiasmuses", "chiastolite", "chiaus", "chiauses", "chiba", "chibouk", "chibouks", "chic", "chicago", "chicane", "chicaner", "chicaneries", "chicaners", "chicanery", "chicanes", "chicano", "chicanos", "chiccories", "chiccory", "chicha", "chichas", "chichester", "chichewa", "chichi", "chichis", "chick", "chickadee", "chickadees", "chickaree", "chickarees", "chicken", "chickenpox", "chickens", "chicks", "chickweed", "chickweeds", "chicle", "chicles", "chico", "chicories", "chicory", "chider", "chiding", "chidings", "chief", "chiefdom", "chiefdoms", "chiefs", "chieftain", "chieftaincies", "chieftaincy", "chieftains", "chieftainship", "chieftainships", "chield", "chields", "chiffon", "chiffonier", "chiffoniers", "chiffons", "chigger", "chiggers", "chignon", "chignons", "chigoe", "chigoes", "chigwell", "chihuahua", "chihuahuas", "chilblain", "chilblains", "child", "childbearing", "childbed", "childbirth", "childcare", "childe", "childermas", "childers", "childhood", "childhoods", "childishness", "childlessness", "childness", "children", "chile", "chilean", "chileans", "chiles", "chili", "chiliad", "chiliads", "chiliarch", "chiliarchs", "chiliarchy", "chiliasm", "chiliast", "chiliasts", "chilies", "chilis", "chill", "chiller", "chilli", "chillies", "chilliness", "chilling", "chillings", "chillis", "chillness", "chillon", "chills", "chillum", "chillums", "chilly", "chilopod", "chilopods", "chimaera", "chimaeras", "chimb", "chimbs", "chime", "chimer", "chimera", "chimeras", "chimere", "chimeres", "chimers", "chimes", "chimney", "chimneys", "chimp", "chimpanzee", "chimpanzees", "chimps", "chin", "china", "chinagraph", "chinaman", "chinar", "chinars", "chinas", "chinatown", "chincapin", "chincapins", "chinch", "chincherinchee", "chincherinchees", "chinches", "chinchilla", "chinchillas", "chincough", "chindit", "chindits", "chine", "chinee", "chines", "chinese", "chink", "chinkapin", "chinkapins", "chinks", "chino", "chinoiserie", "chinook", "chinooks", "chinos", "chinquapin", "chinquapins", "chins", "chintz", "chintzes", "chinwag", "chinwags", "chionodoxa", "chionodoxas", "chios", "chip", "chipboard", "chipboards", "chipmunk", "chipmunks", "chipolata", "chipolatas", "chippendale", "chippendales", "chippewa", "chippewas", "chippie", "chippies", "chipping", "chippings", "chippy", "chips", "chirac", "chirico", "chirimoya", "chirimoyas", "chirm", "chirms", "chirographer", "chirographers", "chirography", "chiromancy", "chiron", "chiropodist", "chiropodists", "chiropody", "chiropractic", "chiropractor", "chiropractors", "chiroptera", "chiropteran", "chiropterans", "chirp", "chirper", "chirpers", "chirpiness", "chirps", "chirr", "chirre", "chirres", "chirrs", "chirrup", "chirrups", "chirurgeon", "chirurgeons", "chirurgery", "chis", "chisel", "chiseller", "chisellers", "chisels", "chit", "chita", "chital", "chitals", "chitarrone", "chitchat", "chitin", "chitlings", "chiton", "chitons", "chits", "chitterling", "chitterlings", "chiv", "chivalrousness", "chivalry", "chivaree", "chivarees", "chive", "chives", "chivies", "chivs", "chivy", "chladni", "chlamydia", "chlamydospore", "chlamydospores", "chlamys", "chlamyses", "chloanthite", "chloasma", "chloe", "chloracne", "chloral", "chlorambucil", "chloramphenicol", "chlorargyrite", "chlorate", "chlorates", "chlordane", "chloride", "chlorides", "chlorination", "chlorinator", "chlorine", "chlorite", "chlorites", "chlorofluorocarbon", "chlorofluorocarbons", "chloroform", "chloroforms", "chloromycetin", "chlorophyl", "chlorophyll", "chloroplast", "chloroplasts", "chloroprene", "chloroquine", "chlorosis", "chlorpromazine", "choanocyte", "choc", "choc ice", "choc ices", "chocho", "chochos", "chock", "chocks", "chockstone", "chockstones", "choco", "chocolate", "chocolate box", "chocolates", "chocos", "chocs", "choctaw", "choctaws", "chogyal", "choice", "choiceness", "choices", "choir", "choirboy", "choirboys", "choirgirl", "choirgirls", "choirmaster", "choirmasters", "choirs", "choke", "chokeberries", "chokeberry", "chokebore", "chokebores", "chokecherries", "chokecherry", "chokedamp", "choker", "chokers", "chokes", "chokey", "chokeys", "chokies", "choking", "choko", "chokos", "choky", "cholagogue", "cholagogues", "cholangiography", "cholecalciferol", "cholecyst", "cholecystectomy", "cholecystitis", "cholecystography", "cholecystostomy", "cholecystotomies", "cholecystotomy", "cholecysts", "cholelith", "cholelithiasis", "choleliths", "cholent", "choler", "cholera", "cholesterol", "cholesterolemia", "choli", "choline", "cholinesterase", "cholis", "chomp", "chomping", "chomps", "chomsky", "chon", "chondriosome", "chondriosomes", "chondrite", "chondrites", "chondrule", "chondrules", "chondrus", "choo choo", "choo choos", "chook", "chooks", "choom", "chooms", "chooser", "choosers", "chop", "chopin", "chopine", "chopines", "chopins", "chopper", "choppers", "choppiness", "chops", "chopstick", "chopsticks", "choragus", "choraguses", "choral", "chorale", "chorales", "chorals", "chord", "chordamesoderm", "chordata", "chordate", "chordates", "chordee", "chording", "chordophone", "chordophones", "chords", "chore", "chorea", "chorees", "choregus", "choreguses", "choreographer", "choreographers", "choreography", "chores", "choriamb", "choriambs", "choriambus", "chorine", "chorines", "choriocarcinoma", "chorioid", "chorioids", "chorion", "chorister", "choristers", "chorizo", "chorizos", "chorley", "chorographer", "chorography", "choroid", "choroiditis", "choroids", "chorology", "chortle", "chortler", "chortlers", "chortles", "chorus", "choruses", "chorusmaster", "chorusmasters", "chose", "chosen", "choses", "chott", "chotts", "chou", "chough", "choughs", "choultries", "choultry", "chouse", "chouses", "chow", "chow chow", "chow chows", "chowder", "chowders", "chows", "chrestomathies", "chrestomathy", "chris", "chrism", "chrismatories", "chrismatory", "chrisms", "chrisom", "chrisoms", "chrissie", "christ", "christ s thorn", "christabel", "christadelphian", "christchurch", "christendom", "christening", "christenings", "christhood", "christian", "christiana", "christiania", "christianisation", "christianiser", "christianisers", "christianism", "christianity", "christianization", "christianizer", "christianizers", "christians", "christie", "christies", "christina", "christine", "christliness", "christmas", "christogram", "christograms", "christologist", "christology", "christopher", "christy", "chroma", "chromas", "chromate", "chromates", "chromaticism", "chromaticity", "chromatics", "chromatid", "chromatin", "chromatogram", "chromatograms", "chromatography", "chromatophore", "chromatophores", "chrome", "chromes", "chrominance", "chrominances", "chromite", "chromium", "chromo", "chromogen", "chromolithograph", "chromolithography", "chromomere", "chromophil", "chromophore", "chromoplast", "chromoplasts", "chromos", "chromosome", "chromosomes", "chromosphere", "chronaxie", "chronicity", "chronicle", "chronicler", "chroniclers", "chronicles", "chronobiology", "chronogram", "chronograms", "chronograph", "chronographer", "chronographers", "chronographs", "chronologies", "chronologist", "chronologists", "chronology", "chronometer", "chronometers", "chronometry", "chronon", "chronons", "chronoscope", "chronoscopes", "chrysalid", "chrysalides", "chrysalids", "chrysalis", "chrysalises", "chrysanthemum", "chrysanthemums", "chrysarobin", "chrysler", "chryslers", "chrysoberyl", "chrysocolla", "chrysolite", "chrysoprase", "chrysostom", "chrysotile", "chrysotiles", "chrystal", "chub", "chubb", "chubbiness", "chubs", "chuck", "chuck farthing", "chuck will s widow", "chuck will s widows", "chucker out", "chuckhole", "chuckholes", "chuckle", "chuckles", "chucks", "chuckwalla", "chuckwallas", "chuddar", "chuddars", "chufa", "chufas", "chuff", "chuffiness", "chuffs", "chug", "chugs", "chukar", "chukars", "chukker", "chukkers", "chum", "chumminess", "chump", "chumping", "chumps", "chums", "chunder", "chunders", "chunk", "chunkiness", "chunks", "chunnel", "chupatti", "chupattis", "chuppah", "church", "churches", "churchill", "churchman", "churchmanship", "churchwoman", "churchyard", "churchyards", "churinga", "churingas", "churl", "churlishness", "churls", "churn", "churner", "churners", "churning", "churnings", "churns", "churr", "churrs", "chute", "chutes", "chutist", "chutists", "chutney", "chutneys", "chutzpah", "chyle", "chyme", "chymotrypsin", "chypre", "chypres", "ciao", "ciaos", "cibber", "ciborium", "cicada", "cicadas", "cicala", "cicalas", "cicatrice", "cicatrices", "cicatricle", "cicatricles", "cicatrisation", "cicatrisations", "cicatrix", "cicatrixes", "cicatrization", "cicatrizations", "cicelies", "cicely", "cicero", "cicerone", "cicerones", "ciceronianism", "cichlid", "cichlids", "cicisbeism", "cicisbeo", "cicuta", "cicutas", "cid", "cider", "ciders", "cig", "cigar", "cigarette", "cigarettes", "cigarillo", "cigarillos", "cigars", "cigs", "cilantro", "cilia", "ciliata", "ciliate", "ciliates", "cilice", "cilices", "cilicia", "ciliophora", "cilium", "cilla", "cimarosa", "cimbalom", "cimbaloms", "cimetidine", "cimex", "cimmerian", "cinch", "cinches", "cinchonine", "cinchonisation", "cinchonisations", "cinchonism", "cinchonization", "cinchonizations", "cincinnati", "cincinnatus", "cincture", "cinctures", "cinder", "cinderella", "cinderellas", "cinders", "cindy", "cineaste", "cineastes", "cinema", "cinemas", "cinemascope", "cinematheque", "cinematheques", "cinematograph", "cinematographer", "cinematographist", "cinematographs", "cinematography", "cineol", "cineole", "cinerama", "cineraria", "cinerarias", "cinerarium", "cineration", "cinerations", "cinerator", "cinerators", "cinerin", "cinerins", "cingalese", "cingulum", "cinna", "cinnabar", "cinnamon", "cinnamons", "cinquain", "cinquains", "cinque", "cinquecento", "cinques", "cinzano", "cion", "cions", "cipher", "ciphers", "cipolin", "cipolins", "cippus", "circassia", "circassian", "circe", "circinus", "circle", "circler", "circlers", "circles", "circlet", "circlets", "circuit", "circuities", "circuitousness", "circuitries", "circuitry", "circuits", "circuity", "circular", "circularities", "circularity", "circulars", "circulation", "circulations", "circulator", "circulators", "circumambience", "circumambiency", "circumambulation", "circumbendibus", "circumbendibuses", "circumciser", "circumcisers", "circumcision", "circumcisions", "circumduction", "circumference", "circumferences", "circumferential", "circumferentor", "circumferentors", "circumflex", "circumflexes", "circumfluence", "circumfluences", "circumfusion", "circumfusions", "circumgyration", "circumgyrations", "circumincession", "circumjacency", "circumlocution", "circumlocutionist", "circumlocutions", "circumnavigation", "circumnavigations", "circumnavigator", "circumnutation", "circumnutations", "circumscriber", "circumscribers", "circumscription", "circumscriptions", "circumspection", "circumspections", "circumspectness", "circumstance", "circumstances", "circumstantiality", "circumvallation", "circumvallations", "circumvention", "circumventions", "circumvolution", "circumvolutions", "circus", "circuses", "cirencester", "cirque", "cirques", "cirrhosis", "cirri", "cirriped", "cirripede", "cirripedes", "cirripeds", "cirrus", "cisco", "ciscoes", "ciscos", "ciseleur", "ciseleurs", "ciselure", "ciselures", "ciskei", "cissoid", "cissoids", "cist", "cistercian", "cistern", "cisterna", "cisterns", "cistron", "cistrons", "cists", "cistus", "cistuses", "cistvaen", "cistvaens", "cit", "citadel", "citadels", "citation", "citations", "citer", "citers", "cites", "cithara", "citharas", "citharist", "citharists", "cither", "cithers", "cities", "citification", "citizen", "citizenries", "citizenry", "citizens", "citizenship", "citizenships", "citole", "citoles", "citrange", "citranges", "citrate", "citrates", "citrin", "citrine", "citrines", "citron", "citronella", "citronellal", "citronellas", "citrons", "citronwood", "citrulline", "citrus", "citruses", "cits", "cittern", "citterns", "city", "cityscape", "cityscapes", "cive", "cives", "civet", "civets", "civics", "civies", "civilian", "civilians", "civilisation", "civilisations", "civiliser", "civilisers", "civilities", "civility", "civilization", "civilizations", "civilizer", "civilizers", "civism", "civvies", "civvy", "clabber", "clabbers", "clachan", "clachans", "clack", "clacker", "clackers", "clackmannan", "clacks", "clacton", "clactonian", "cladding", "claddings", "clade", "cladistics", "cladode", "cladodes", "cladogram", "cladograms", "claim", "claim jumper", "claimant", "claimants", "claimer", "claimers", "claims", "clair", "clair obscure", "clairaudience", "claire", "clairvoyance", "clairvoyant", "clairvoyants", "clam", "clambake", "clambakes", "clamber", "clamberer", "clamberers", "clambers", "clamjamfry", "clamminess", "clamor", "clamorousness", "clamour", "clamourer", "clamourers", "clamouring", "clamours", "clamp", "clampdown", "clampdowns", "clamper", "clampers", "clamps", "clams", "clan", "clancy", "clandestineness", "clandestinity", "clang", "clanger", "clangers", "clangor", "clangors", "clangour", "clangours", "clangs", "clank", "clanks", "clannishness", "clans", "clansman", "clanswoman", "clap", "clapboard", "clapboards", "clapper", "clapperboard", "clapperboards", "clapperclawer", "clapperclawers", "clappers", "clapping", "clappings", "claps", "clapton", "claptrap", "claptraps", "claque", "claques", "claqueur", "claqueurs", "clara", "clarabella", "clarabellas", "clarain", "clare", "clarence", "clarences", "clarenceux", "clarendon", "claret", "clarets", "clarice", "claries", "clarification", "clarifications", "clarifier", "clarifiers", "clarinda", "clarinet", "clarinetist", "clarinetists", "clarinets", "clarinettist", "clarinettists", "clarino", "clarinos", "clarion", "clarions", "clarissa", "clarity", "clark", "clarke", "clarkia", "clarkias", "claro", "claroes", "claros", "clarsach", "clarsachs", "clary", "clash", "clasher", "clashers", "clashes", "clasp", "clasped", "clasper", "claspers", "clasps", "class", "classes", "classic", "classicality", "classicalness", "classicism", "classicist", "classicists", "classics", "classification", "classifications", "classifier", "classifiers", "classiness", "classis", "classmate", "classmates", "classroom", "classrooms", "clathrate", "clatter", "clatterer", "clatterers", "clatters", "claud", "claude", "claudette", "claudia", "claudian", "claudication", "claudine", "claudio", "claudius", "claus", "clause", "clauses", "clausewitz", "clausius", "claustrophobe", "claustrophobia", "claustrum", "clausula", "clave", "claves", "clavicembalo", "clavicembalos", "clavichord", "clavichords", "clavicle", "clavicles", "clavicorn", "clavicorns", "clavicytherium", "clavicytheriums", "clavier", "claviers", "claw", "clawback", "clawbacks", "claws", "claxon", "claxons", "clay", "claymore", "claymores", "claypan", "claypans", "clays", "claytonia", "clean", "cleaner", "cleaners", "cleaning", "cleanings", "cleanliness", "cleanness", "cleans", "cleanser", "cleansers", "cleansing", "cleansings", "cleanskin", "cleanskins", "clear", "clear sightedness", "clearance", "clearances", "clearcole", "clearcoles", "clearer", "clearers", "clearing", "clearings", "clearness", "clears", "clearway", "clearways", "clearwing", "clearwings", "cleat", "cleats", "cleavage", "cleavages", "cleaver", "cleavers", "cleck", "clecks", "cleek", "cleeks", "cleethorpes", "clef", "clefs", "cleft", "clefts", "cleg", "clegs", "cleistogamy", "clematis", "clematises", "clemenceau", "clemency", "clemens", "clementina", "clementine", "clementines", "clench", "clenches", "cleo", "cleopatra", "clepsydra", "clepsydras", "cleptomania", "clerestories", "clerestory", "clergies", "clergy", "clergyman", "cleric", "clericalism", "clericalist", "clericalists", "clerics", "clerihew", "clerihews", "clerisies", "clerisy", "clerk", "clerkess", "clerkesses", "clerking", "clerks", "clerkship", "clerkships", "clermont ferrand", "cleruch", "cleruchs", "cleruchy", "cleveite", "cleveland", "cleverness", "clevis", "clevises", "clew", "clews", "clianthus", "clianthuses", "click", "click clack", "clicker", "clickers", "clickety clack", "clickety click", "clicks", "client", "clientage", "clientages", "clients", "cliff", "cliffhanger", "cliffhangers", "clifford", "cliffs", "clift", "clifts", "climacteric", "climate", "climates", "climatologist", "climatologists", "climatology", "climax", "climaxes", "climb", "climb down", "climb downs", "climber", "climbers", "climbing", "climbings", "climbs", "clime", "climes", "clinch", "clincher", "clinchers", "clinches", "cline", "clines", "cling", "clinger", "clingers", "clinginess", "clings", "clingstone", "clingstones", "clinic", "clinician", "clinicians", "clinics", "clink", "clinker", "clinkers", "clinks", "clinkstone", "clinometer", "clinometers", "clinometry", "clinquant", "clinquants", "clinton", "clio", "clip", "clip clop", "clip clops", "clipper", "clippers", "clippie", "clippies", "clipping", "clippings", "clips", "clique", "cliques", "cliquishness", "cliquism", "clishmaclaver", "clitellum", "clitic", "clitoris", "clitorises", "clive", "clivers", "cloaca", "cloak", "cloak and dagger", "cloakroom", "cloakrooms", "cloaks", "clobber", "clobbers", "cloche", "cloches", "clock", "clock watcher", "clock watchers", "clock watching", "clocker", "clockers", "clocking", "clockmaker", "clockmakers", "clocks", "clockwork", "clockworks", "clod", "cloddishness", "clodhopper", "clodhoppers", "clodpoll", "clodpolls", "clods", "clofibrate", "clog", "clogginess", "clogs", "cloison", "cloisons", "cloister", "cloisters", "cloistress", "cloke", "clokes", "clomiphene", "clomp", "clomps", "clone", "clones", "clonicity", "clonk", "clonks", "clonus", "clonuses", "cloot", "cloots", "clop", "clops", "close", "close stool", "close up", "close ups", "closeness", "closer", "closers", "closes", "closet", "closets", "closing", "closings", "clostridia", "clostridium", "closure", "closures", "clot", "clotbur", "clotburs", "clotes", "cloth", "clothes", "clothes peg", "clothes pegs", "clothes press", "clothes presses", "clothier", "clothiers", "clothing", "clothings", "clotho", "cloths", "clots", "clotting", "clottings", "cloture", "clotures", "clou", "cloud", "cloud cuckoo land", "cloudage", "cloudberries", "cloudberry", "cloudburst", "cloudbursts", "cloudiness", "clouding", "cloudings", "cloudland", "cloudlands", "cloudlet", "cloudlets", "clouds", "cloudscape", "clouet", "clough", "cloughs", "clous", "clout", "clouter", "clouters", "clouts", "clove", "clover", "cloverleaf", "clovers", "cloves", "clovis", "clowder", "clowders", "clown", "clowneries", "clownery", "clowning", "clownings", "clownishness", "clowns", "club", "clubability", "clubbability", "clubbed", "clubber", "clubbing", "clubbings", "clubhouse", "clubhouses", "clubland", "clubman", "clubroom", "clubrooms", "clubroot", "clubs", "clubwoman", "cluck", "clucks", "clue", "clues", "clumber", "clumbers", "clump", "clumps", "clumsiness", "clunch", "clunches", "clunk", "clunks", "cluny", "clupeid", "clupeids", "clupeoid", "clusia", "clusias", "cluster", "clusters", "clutch", "clutches", "clutter", "clutters", "clwyd", "clyde", "clydebank", "clydesdale", "clypeus", "clypeuses", "clyster", "clysters", "clytemnestra", "cnida", "cnidarian", "cnidoblast", "cnidoblasts", "cnut", "co driver", "co drivers", "co optation", "co option", "co respondent", "co respondents", "co star", "co stars", "co worker", "co workers", "coacervate", "coacervates", "coacervation", "coacervations", "coach", "coachbuilder", "coachbuilders", "coachbuilding", "coacher", "coachers", "coaches", "coaching", "coachings", "coachman", "coachwhip", "coachwhips", "coachwood", "coachwork", "coachworks", "coaction", "coactivities", "coactivity", "coadjutant", "coadjutants", "coadjutor", "coadjutors", "coadjutress", "coadjutresses", "coadjutrix", "coadjutrixes", "coadunation", "coadunations", "coagulability", "coagulant", "coagulants", "coagulase", "coagulate", "coagulates", "coagulation", "coagulations", "coagulum", "coagulums", "coahuila", "coal", "coaler", "coalers", "coalescence", "coalescences", "coalfield", "coalfields", "coalfish", "coalfishes", "coalition", "coalitioner", "coalitioners", "coalitionist", "coalitionists", "coalitions", "coalman", "coalport", "coals", "coaming", "coamings", "coaptation", "coarctation", "coarctations", "coarseness", "coarsening", "coast", "coaster", "coasters", "coastguard", "coastguards", "coastguardsman", "coastline", "coastlines", "coasts", "coat", "coatbridge", "coatee", "coatees", "coates", "coati", "coati mondi", "coati mondis", "coati mundi", "coati mundis", "coating", "coatings", "coatis", "coatrack", "coatracks", "coats", "coattail", "coattails", "coax", "coaxer", "coaxers", "coaxes", "coaxing", "cob", "cobalamin", "cobalt", "cobaltite", "cobb", "cobber", "cobbers", "cobbett", "cobble", "cobbler", "cobblers", "cobbles", "cobblestone", "cobblestones", "cobbling", "cobblings", "cobbs", "cobden", "cobia", "cobias", "coble", "coblenz", "cobles", "cobnut", "cobnuts", "cobra", "cobras", "cobs", "coburg", "coburgs", "cobweb", "cobwebs", "coca", "coca cola", "cocaine", "cocainisation", "cocainism", "cocainization", "cocas", "cocci", "coccid", "coccidia", "coccidioidomycosis", "coccidiosis", "coccidium", "coccids", "coccoid", "coccolith", "coccoliths", "coccus", "coccyx", "cochabamba", "cochin", "cochin china", "cochineal", "cochineals", "cochlea", "cochleas", "cock", "cock a doodle doo", "cock a doodle doos", "cock of the rock", "cockade", "cockades", "cockaigne", "cockalorum", "cockalorums", "cockateel", "cockateels", "cockatiel", "cockatiels", "cockatoo", "cockatoos", "cockatrice", "cockatrices", "cockayne", "cockboat", "cockboats", "cockchafer", "cockchafers", "cockcroft", "cocker", "cockerel", "cockerels", "cockers", "cockeye", "cockeyes", "cockfight", "cockfighting", "cockfights", "cockhorse", "cockhorses", "cockiness", "cockle", "cockleboat", "cockles", "cockleshell", "cockleshells", "cockloft", "cocklofts", "cockney", "cockneydom", "cockneyfication", "cockneyism", "cockneys", "cockpit", "cockpits", "cockroach", "cockroaches", "cocks", "cockscomb", "cockscombs", "cocksfoot", "cocksfoots", "cockshies", "cockshut", "cockshy", "cockspur", "cockspurs", "cockswain", "cockswains", "cocktail", "cocktails", "cocky", "coco", "cocoa", "cocoanut", "cocoanuts", "cocoas", "coconsciousness", "coconut", "coconuts", "cocoon", "cocoons", "cocopan", "cocopans", "cocos", "cocotte", "cocottes", "cocteau", "cod", "coda", "codas", "codder", "coddle", "coddles", "code", "codeclination", "codeine", "coder", "coders", "codes", "codetta", "codettas", "codex", "codfish", "codfishes", "codger", "codgers", "codices", "codicil", "codicils", "codicology", "codification", "codifications", "codifier", "codifiers", "coding", "codling", "codlings", "codomain", "codon", "codons", "cods", "codswallop", "cody", "coe", "coed", "coeditor", "coeditors", "coeds", "coeducation", "coefficient", "coefficients", "coehorn", "coehorns", "coelacanth", "coelacanths", "coelenterata", "coelenterate", "coelenterates", "coelom", "coelomate", "coelomates", "coeloms", "coelostat", "coelostats", "coemption", "coemptions", "coenesthesia", "coenobite", "coenobites", "coenobitism", "coenocyte", "coenocytes", "coenosarc", "coenosarcs", "coenzyme", "coenzymes", "coequal", "coequalities", "coequality", "coequals", "coercer", "coercers", "coercion", "coercionist", "coercionists", "coercions", "coerciveness", "coercivity", "coeval", "coevals", "cofactor", "cofactors", "coffee", "coffees", "coffer", "coffers", "coffin", "coffinite", "coffins", "coffle", "coffles", "coffret", "coffrets", "cog", "cogency", "cogitation", "cogitations", "cogitator", "cogitators", "cognac", "cognate", "cognateness", "cognates", "cognation", "cognisance", "cognition", "cognitions", "cognizance", "cognomen", "cognomens", "cognoscenti", "cognovit", "cognovits", "cogs", "cohabitant", "cohabitants", "cohabitation", "cohabitations", "coherence", "coherences", "coherencies", "coherency", "coherer", "coherers", "cohesion", "cohesions", "cohesiveness", "coho", "cohoe", "cohoes", "cohort", "cohorts", "cohos", "cohune", "cohunes", "coif", "coiffeur", "coiffeurs", "coiffeuse", "coiffeuses", "coiffure", "coiffures", "coifs", "coign", "coigne", "coignes", "coigns", "coil", "coils", "coin", "coin op", "coinage", "coinages", "coincidence", "coincidences", "coiner", "coiners", "coins", "cointreau", "coir", "coistrel", "coistrels", "coit", "coition", "coitus", "coituses", "coke", "cokernut", "cokernuts", "cokes", "col", "cola", "colander", "colanders", "colas", "colatitude", "colatitudes", "colbert", "colcannon", "colcannons", "colchester", "colchicine", "colchicum", "colchicums", "colcothar", "cold", "cold bloodedness", "coldheartedness", "coldness", "colds", "coldslaw", "coldstream", "cole", "colectomy", "coleman", "colemanite", "coleoptera", "coleopteran", "coleopteron", "coleoptile", "coleoptiles", "coleorhiza", "coleorhizas", "coleridge", "coleridge taylor", "coles", "colette", "coleus", "coleuses", "coley", "coleys", "colic", "coliform", "coliforms", "colima", "colin", "colins", "coliseum", "coliseums", "colitis", "coll", "collaboration", "collaborationism", "collaborationist", "collaborationists", "collaborations", "collaborator", "collaborators", "collage", "collagen", "collagenase", "collages", "collagist", "collagists", "collapsability", "collapsar", "collapsars", "collapse", "collapses", "collapsibility", "collar", "collard", "collards", "collarette", "collarettes", "collars", "collateral", "collaterals", "collation", "collations", "collator", "collators", "colleague", "colleagues", "colleagueship", "colleagueships", "collect", "collectedness", "collecting", "collectings", "collection", "collections", "collective", "collectives", "collectivisation", "collectivism", "collectivist", "collectivists", "collectivity", "collectivization", "collector", "collectorate", "collectorates", "collectors", "collectorship", "collectorships", "collects", "colleen", "colleens", "college", "colleger", "collegers", "colleges", "collegian", "collegiate", "collegium", "collegiums", "collembolan", "collembolans", "collenchyma", "collet", "collets", "collider", "colliders", "collie", "collier", "collieries", "colliers", "colliery", "collies", "collieshangie", "collieshangies", "colligation", "colligations", "collimation", "collimations", "collimator", "collimators", "collinearity", "collins", "collinses", "collision", "collisions", "collocation", "collocations", "collocutor", "collocutors", "collodion", "colloid", "colloids", "collop", "collops", "colloquialism", "colloquialisms", "colloquialist", "colloquialists", "colloquies", "colloquist", "colloquists", "colloquium", "colloquiums", "colloquy", "collotype", "colluder", "colluders", "collusion", "collusions", "colly", "collyrium", "collyriums", "colmar", "colobus", "colobuses", "colocynth", "colocynths", "cologarithm", "cologarithms", "cologne", "colombia", "colombian", "colombians", "colombo", "colon", "colonel", "colonelcies", "colonelcy", "colonels", "colones", "colonial", "colonialism", "colonialisms", "colonialist", "colonialists", "colonials", "colonic", "colonies", "colonisation", "colonisations", "coloniser", "colonisers", "colonist", "colonists", "colonitis", "colonization", "colonizations", "colonizer", "colonizers", "colonnade", "colonnades", "colons", "colonsay", "colony", "colophon", "colophons", "colophony", "coloquintida", "coloquintidas", "color", "colorado", "colorant", "colorants", "coloration", "colorations", "coloratura", "coloraturas", "colored", "coloreds", "colorimeter", "colorimeters", "colorimetry", "coloring", "colorings", "colorist", "colorists", "colorman", "colors", "colosseum", "colosseums", "colossian", "colossians", "colossus", "colossuses", "colostomies", "colostomy", "colostrum", "colostrums", "colotomies", "colotomy", "colour", "colouration", "colourations", "colourer", "colourers", "colouring", "colourings", "colourist", "colourists", "colours", "colportage", "colportages", "colporteur", "colporteurs", "cols", "colt", "colter", "colters", "coltrane", "colts", "coltsfoot", "coltsfoots", "coluber", "colubers", "colubrid", "colubrids", "colugo", "colugos", "colum", "columba", "columbaries", "columbarium", "columbary", "columbate", "columbia", "columbian", "columbine", "columbines", "columbite", "columbium", "columbus", "columella", "columellas", "column", "columnarity", "columniation", "columniations", "columnist", "columnists", "columns", "colure", "colures", "colza", "colzas", "coma", "comal", "comanche", "comanches", "comaneci", "comas", "comatulid", "comatulids", "comb", "comb out", "comb outs", "combat", "combatant", "combatants", "combativeness", "combats", "combe", "comber", "combers", "combes", "combination", "combinations", "combine", "combiner", "combiners", "combines", "combing", "combings", "combining", "combo", "combos", "combretum", "combretums", "combs", "combustibility", "combustible", "combustibleness", "combustibles", "combustion", "combustions", "combustor", "combustors", "come on", "come ons", "comeback", "comecon", "comedian", "comedians", "comedienne", "comediennes", "comedies", "comedietta", "comediettas", "comedo", "comedos", "comedown", "comedowns", "comedy", "comeliness", "comer", "comers", "comes", "comestible", "comestibles", "comet", "comether", "comethers", "comets", "comeuppance", "comeuppances", "comfit", "comfits", "comfort", "comfortable", "comfortableness", "comforter", "comforters", "comfortlessness", "comforts", "comfrey", "comfreys", "comic", "comicalities", "comicality", "comicalness", "comices", "comics", "cominform", "cominformist", "coming", "comings", "comintern", "comitative", "comitatives", "comitia", "comity", "comma", "command", "commandant", "commandants", "commander", "commanderies", "commanders", "commandership", "commanderships", "commandery", "commandment", "commandments", "commando", "commandoes", "commandos", "commands", "commas", "commemoration", "commemorations", "commemorative", "commencement", "commencements", "commendableness", "commendam", "commendams", "commendation", "commendations", "commensal", "commensalism", "commensalities", "commensality", "commensals", "commensurability", "commensurableness", "commensurateness", "commensuration", "commensurations", "comment", "commentaries", "commentary", "commentator", "commentators", "commenter", "commenters", "comments", "commerce", "commerces", "commercial", "commercialisation", "commercialism", "commercialist", "commercialists", "commercialization", "commercials", "commie", "commies", "commination", "comminations", "comminution", "comminutions", "commis", "commiseration", "commiserations", "commiserator", "commiserators", "commissar", "commissariat", "commissariats", "commissaries", "commissars", "commissary", "commission", "commissionaire", "commissionaires", "commissioner", "commissioners", "commissionership", "commissionerships", "commissioning", "commissions", "commissure", "commissures", "commitment", "commitments", "committal", "committals", "committee", "committeeman", "committees", "committeeship", "committeeships", "committeewoman", "commixture", "commixtures", "commo", "commode", "commodes", "commodiousness", "commodities", "commodity", "commodore", "commodores", "common", "commonage", "commonages", "commonalities", "commonality", "commonalties", "commonalty", "commoner", "commoners", "commonness", "commonplace", "commonplaces", "commons", "commonweal", "commonweals", "commonwealth", "commonwealths", "commos", "commotion", "commotions", "communalisation", "communalism", "communalist", "communalists", "communalization", "communard", "communards", "commune", "communes", "communicability", "communicableness", "communicant", "communicants", "communicating", "communication", "communications", "communicativeness", "communicator", "communicators", "communion", "communions", "communique", "communiques", "communism", "communisms", "communist", "communists", "communitarian", "communitarians", "communities", "community", "commutability", "commutation", "commutations", "commutator", "commutators", "commuter", "commuters", "commuting", "commy", "como", "comorin", "comp", "compact", "compactedness", "compactification", "compaction", "compactions", "compactness", "compacts", "compadre", "compadres", "compander", "companders", "companies", "companion", "companionableness", "companions", "companionship", "companionships", "company", "comparability", "comparableness", "comparative", "comparator", "comparators", "compare", "compares", "comparing", "comparison", "comparisons", "compartment", "compartmentalization", "compartmentalizations", "compartments", "compass", "compasses", "compassion", "compassionateness", "compassions", "compatibilities", "compatibility", "compatibleness", "compatriot", "compatriotism", "compatriots", "compeer", "compeers", "compellation", "compellations", "compeller", "compellers", "compelling", "compendiousness", "compendium", "compendiums", "compensation", "compensations", "compensator", "compensators", "competence", "competences", "competencies", "competency", "competition", "competitions", "competitiveness", "competitor", "competitors", "compilation", "compilations", "compiler", "compilers", "compiling", "complacence", "complacency", "complainant", "complainants", "complainer", "complainers", "complaint", "complaints", "complaisance", "complanation", "complanations", "complement", "complementarity", "complementation", "complements", "completeness", "completion", "completions", "complex", "complexes", "complexion", "complexions", "complexities", "complexity", "complexness", "compliance", "compliances", "compliancies", "compliancy", "complicacy", "complicatedness", "complicating", "complication", "complications", "complice", "complicities", "complicity", "complier", "compliers", "compliment", "complimenter", "complimenters", "compliments", "complin", "compline", "complines", "complins", "complot", "complots", "compluvium", "compluviums", "compo", "component", "components", "comportment", "compos", "composedness", "composer", "composers", "composing", "composite", "compositeness", "composites", "composition", "compositions", "compositor", "compositors", "compossibility", "compost", "composts", "composure", "composures", "compotation", "compotations", "compotator", "compotators", "compote", "compotes", "compotier", "compotiers", "compound", "compounder", "compounders", "compounding", "compounds", "comprador", "compradores", "compradors", "comprehensibility", "comprehensibleness", "comprehension", "comprehensions", "comprehensive", "comprehensiveness", "comprehensives", "compress", "compresses", "compressibility", "compressing", "compression", "compressions", "compressor", "compressors", "comprisal", "comprisals", "comprising", "compromise", "compromises", "comps", "compsognathus", "compt", "comptometer", "compton", "compton burnett", "comptroller", "comptrollers", "compulsion", "compulsions", "compulsive", "compulsiveness", "compulsoriness", "compunction", "compunctions", "compurgation", "compurgations", "compurgator", "compurgators", "computation", "computations", "compute", "computer", "computerization", "computers", "computes", "computist", "computists", "comrade", "comrades", "comradeship", "comsat", "comstockery", "comte", "comtism", "comtist", "con", "conakry", "conan", "conation", "conatus", "concatenation", "concatenations", "concaveness", "concavities", "concavity", "concealer", "concealers", "concealing", "concealment", "concealments", "conceder", "conceders", "conceding", "conceit", "conceitedness", "conceits", "conceivability", "conceivableness", "concelebration", "concelebrations", "concent", "concentrate", "concentrates", "concentration", "concentrations", "concentrativeness", "concentrator", "concentrators", "concentricities", "concentricity", "concents", "concept", "conceptacle", "conception", "conceptions", "concepts", "conceptualisation", "conceptualism", "conceptualist", "conceptualists", "conceptualization", "conceptus", "conceptuses", "concern", "concernedness", "concernment", "concernments", "concerns", "concert", "concertante", "concertantes", "concertgoer", "concertgoers", "concertina", "concertinas", "concertino", "concertinos", "concerto", "concertos", "concerts", "concession", "concessionaire", "concessionaires", "concessionary", "concessions", "conch", "concha", "conchas", "conches", "conchie", "conchies", "conchiolin", "conchoid", "conchoids", "conchologist", "conchologists", "conchology", "conchs", "conchy", "concierge", "concierges", "conciliation", "conciliations", "conciliator", "conciliators", "concinnity", "conciseness", "concision", "conclave", "conclaves", "conclavist", "conclavists", "conclusion", "conclusions", "conclusiveness", "concocter", "concocters", "concoction", "concoctions", "concoctor", "concoctors", "concomitance", "concomitant", "concomitants", "concord", "concordance", "concordances", "concordat", "concordats", "concorde", "concords", "concourse", "concourses", "concrescence", "concrescences", "concrete", "concreteness", "concretes", "concretion", "concretions", "concretism", "concubinage", "concubinary", "concubine", "concubines", "concupiscence", "concurrence", "concurrences", "concurrent", "concurrents", "concussion", "concussions", "cond", "condemnation", "condemnations", "condemner", "condemners", "condensability", "condensate", "condensates", "condensation", "condensations", "condenser", "condenseries", "condensers", "condensery", "condensing", "condescendence", "condescendences", "condescension", "condescensions", "condiment", "condiments", "condisciple", "condisciples", "condition", "conditionality", "conditioner", "conditioners", "conditioning", "conditionings", "conditions", "condo", "condolence", "condolences", "condom", "condominium", "condominiums", "condoms", "condonation", "condonations", "condor", "condors", "condos", "condottiere", "conduct", "conductance", "conductances", "conductibility", "conducting", "conduction", "conductions", "conductivities", "conductivity", "conductor", "conductors", "conductorship", "conductorships", "conductress", "conductresses", "conducts", "conduit", "conduits", "condyle", "condyles", "condyloma", "condylomas", "cone", "cones", "coney", "coneys", "confab", "confabs", "confabulation", "confabulations", "confabulator", "confabulators", "confarreation", "confarreations", "confection", "confectionaries", "confectionary", "confectioner", "confectioneries", "confectioners", "confectionery", "confections", "confederacies", "confederacy", "confederate", "confederates", "confederation", "confederations", "conferee", "conferees", "conference", "conferences", "conferment", "conferments", "conferral", "conferrals", "conferrer", "conferrers", "conferva", "confervas", "confervoid", "confessant", "confession", "confessional", "confessionalism", "confessionals", "confessionaries", "confessionary", "confessions", "confessor", "confessors", "confetti", "confidant", "confidante", "confidantes", "confidants", "confidence", "confidences", "confident", "confidentiality", "confider", "confiders", "configuration", "configurations", "confine", "confinement", "confinements", "confiner", "confines", "confirmand", "confirmands", "confirmation", "confirmations", "confirmer", "confirmers", "confirmor", "confirmors", "confiscation", "confiscations", "confiscator", "confiscators", "confiture", "conflagration", "conflagrations", "conflation", "conflations", "conflict", "confliction", "conflictions", "conflicts", "confluence", "confluences", "confluent", "confluents", "conflux", "confluxes", "conformability", "conformance", "conformation", "conformations", "conformer", "conformers", "conformist", "conformists", "conformities", "conformity", "confounding", "confraternities", "confraternity", "confrontation", "confrontations", "confronting", "confrontment", "confrontments", "confucian", "confucianism", "confucianist", "confucians", "confucius", "confusedness", "confusion", "confusions", "confutation", "confutations", "confuting", "conga", "congas", "congealableness", "congealment", "congealments", "congee", "congees", "congelation", "congelations", "congener", "congeners", "congenialities", "congeniality", "conger", "congeries", "congers", "congestion", "congestions", "congius", "conglobation", "conglobations", "conglomerate", "conglomerates", "conglomeration", "conglomerations", "conglutination", "conglutinations", "congo", "congolese", "congos", "congou", "congous", "congratulant", "congratulants", "congratulation", "congratulations", "congratulator", "congratulators", "congregant", "congregants", "congregating", "congregation", "congregationalism", "congregations", "congress", "congresses", "congressman", "congresswoman", "congreve", "congruence", "congruences", "congruencies", "congruency", "congruities", "congruity", "congruousness", "conic", "conics", "conidiophore", "conidiophores", "conidiospore", "conidiospores", "conidium", "conies", "conifer", "conifers", "coniine", "conima", "conjecture", "conjecturer", "conjectures", "conjoiner", "conjoiners", "conjugality", "conjugant", "conjugate", "conjugates", "conjugation", "conjugations", "conjunct", "conjunction", "conjunctions", "conjunctiva", "conjunctivas", "conjunctive", "conjunctivitis", "conjuncture", "conjunctures", "conjuration", "conjurations", "conjurator", "conjurators", "conjurer", "conjurers", "conjuries", "conjuring", "conjurings", "conjuror", "conjurors", "conjury", "conk", "conker", "conkers", "conks", "conn", "connacht", "connation", "connaturalness", "connaught", "connecter", "connecters", "connecticut", "connecting", "connection", "connectionism", "connections", "connective", "connectives", "connectivity", "connector", "connectors", "connemara", "connexion", "connexions", "connie", "conniption", "conniptions", "connivance", "conniver", "connivers", "connoisseur", "connoisseurs", "connoisseurship", "connolly", "connor", "connors", "connotation", "connotations", "conns", "connubiality", "conodont", "conodonts", "conoid", "conoids", "conquerableness", "conquering", "conqueror", "conquerors", "conquest", "conquests", "conquistador", "conquistadores", "conquistadors", "conrad", "cons", "consanguinity", "conscience", "consciences", "conscientiousness", "conscionableness", "consciousness", "conscript", "conscription", "conscriptionist", "conscriptions", "conscripts", "consecratedness", "consecration", "consecrations", "consecrator", "consecrators", "consecution", "consecutions", "consecutiveness", "consensus", "consensuses", "consent", "consentaneity", "consentaneousness", "consentience", "consents", "consequence", "consequences", "consequent", "consequents", "conservancies", "conservancy", "conservation", "conservationist", "conservationists", "conservations", "conservatism", "conservative", "conservativeness", "conservatives", "conservatoire", "conservatoires", "conservator", "conservatories", "conservatorium", "conservatoriums", "conservators", "conservatory", "conserve", "conserver", "conservers", "conserves", "conserving", "consett", "considerance", "considerateness", "consideration", "considerations", "consignation", "consignations", "consignee", "consignees", "consigner", "consigners", "consignment", "consignments", "consignor", "consignors", "consist", "consistence", "consistences", "consistencies", "consistency", "consistories", "consistory", "consociate", "consociates", "consociation", "consociations", "consocies", "consolation", "consolations", "console", "consoler", "consolers", "consoles", "consolidation", "consolidations", "consolidator", "consolidators", "consonance", "consonances", "consonant", "consonants", "consort", "consorter", "consorters", "consortium", "consortiums", "consorts", "conspectus", "conspectuses", "conspicuity", "conspicuousness", "conspiracies", "conspiracy", "conspirator", "conspirators", "conspiratress", "conspiratresses", "constable", "constables", "constableship", "constableships", "constabularies", "constabulary", "constance", "constancies", "constancy", "constant", "constantan", "constantia", "constantine", "constantinople", "constants", "constatation", "constatations", "constellation", "constellations", "consternation", "consternations", "constipation", "constituencies", "constituency", "constituent", "constituents", "constitution", "constitutional", "constitutionalism", "constitutionalist", "constitutionalists", "constitutionality", "constitutionals", "constitutions", "constitutor", "constraint", "constraints", "constriction", "constrictions", "constrictor", "constrictors", "constringencies", "constringency", "construability", "construct", "constructer", "constructers", "construction", "constructionism", "constructionist", "constructionists", "constructions", "constructiveness", "constructivism", "constructor", "constructors", "constructs", "construe", "construer", "construers", "construes", "consubstantialism", "consubstantialist", "consubstantiality", "consubstantiation", "consuetude", "consuetudes", "consuetudinaries", "consuetudinary", "consul", "consulate", "consulates", "consuls", "consulship", "consulships", "consultant", "consultants", "consultation", "consultations", "consulter", "consulters", "consumable", "consumables", "consumer", "consumerism", "consumers", "consummation", "consummations", "consummator", "consummators", "consumption", "consumptions", "consumptive", "consumptiveness", "consumptives", "contact", "contacting", "contactor", "contactors", "contacts", "contadino", "contagion", "contagions", "contagiousness", "contagium", "contagiums", "container", "containerization", "containers", "containment", "containments", "contaminant", "contaminants", "contamination", "contaminations", "contaminator", "contaminators", "contango", "contangos", "conte", "contemner", "contemners", "contemplation", "contemplations", "contemplative", "contemplativeness", "contemplator", "contemplators", "contemporaneity", "contemporaneousness", "contemporaries", "contemporariness", "contemporary", "contempt", "contemptibility", "contemptibleness", "contempts", "contemptuousness", "contender", "contenders", "content", "contentedness", "contention", "contentions", "contentiousness", "contentment", "contents", "contes", "contest", "contestant", "contestants", "contestation", "contestations", "contester", "contests", "context", "contexts", "contexture", "contextures", "contiguities", "contiguity", "contiguousness", "continence", "continency", "continent", "continental", "continentalism", "continentalisms", "continentalist", "continentalists", "continentals", "continents", "contingence", "contingences", "contingencies", "contingency", "contingent", "contingents", "continuance", "continuances", "continuant", "continuants", "continuation", "continuations", "continuative", "continuator", "continuators", "continuedness", "continuer", "continuers", "continuities", "continuity", "continuo", "continuos", "continuousness", "continuum", "continuums", "conto", "contortion", "contortionist", "contortionists", "contortions", "contos", "contour", "contours", "contraband", "contrabandism", "contrabandist", "contrabandists", "contrabands", "contrabass", "contrabasses", "contrabassoon", "contrabassoons", "contraception", "contraceptions", "contraceptive", "contraceptives", "contract", "contractedness", "contractibility", "contractility", "contracting", "contraction", "contractions", "contractor", "contractors", "contracts", "contracture", "contractures", "contradance", "contradiction", "contradictions", "contradictor", "contradictoriness", "contradictors", "contradictory", "contradistinction", "contradistinctions", "contrafagotto", "contrafagottos", "contrail", "contrails", "contraindicant", "contraindicants", "contraindication", "contralto", "contraltos", "contraposition", "contrapositions", "contrapositive", "contrapositives", "contrapposto", "contrappostos", "contraprop", "contraprops", "contraption", "contraptions", "contrapuntist", "contrapuntists", "contraries", "contrarieties", "contrariety", "contrariness", "contrary", "contrast", "contrasts", "contravallation", "contravention", "contraventions", "contrayerva", "contrayervas", "contrecoup", "contrecoups", "contretemps", "contribution", "contributions", "contributor", "contributors", "contributory", "contriteness", "contrition", "contrivance", "contrivances", "contriver", "contrivers", "control", "controllability", "controller", "controllers", "controllership", "controllerships", "controlling", "controls", "controversialist", "controversialists", "controversies", "controversy", "controvertist", "controvertists", "contumacies", "contumaciousness", "contumacities", "contumacity", "contumacy", "contumelies", "contumeliousness", "contumely", "contusion", "contusions", "conundrum", "conundrums", "conurbation", "conurbations", "conure", "convalescence", "convalescences", "convalescent", "convalescents", "convection", "convections", "convector", "convectors", "convenance", "convenances", "convener", "conveners", "convenience", "conveniences", "conveniencies", "conveniency", "convening", "convent", "conventicle", "conventicler", "conventiclers", "conventicles", "convention", "conventional", "conventionalism", "conventionalist", "conventionalities", "conventionality", "conventioneer", "conventioneers", "conventioner", "conventioners", "conventions", "convents", "conventual", "conventuals", "convergence", "convergences", "convergencies", "convergency", "converging", "conversance", "conversancy", "conversation", "conversationalist", "conversationalists", "conversations", "conversazione", "conversaziones", "converse", "converses", "conversion", "conversions", "convert", "converter", "converters", "convertibility", "convertible", "convertibles", "converting", "convertiplane", "convertiplanes", "convertite", "convertites", "convertor", "convertors", "converts", "convexities", "convexity", "convexness", "conveyance", "conveyancer", "conveyancers", "conveyances", "conveyancing", "conveyer", "conveyers", "conveying", "conveyor", "conveyors", "convict", "conviction", "convictions", "convicts", "convincing", "convive", "convives", "convivialist", "convivialists", "convivialities", "conviviality", "convocation", "convocations", "convolution", "convolutions", "convolvulus", "convolvuluses", "convoy", "convoys", "convulsant", "convulsants", "convulsion", "convulsionary", "convulsions", "convulsiveness", "conway", "cony", "coo", "cooey", "cooeys", "coof", "coofs", "cook", "cook general", "cooker", "cookers", "cookery", "cookhouse", "cookhouses", "cookie", "cookies", "cooking", "cookout", "cookouts", "cooks", "cookshop", "cookshops", "cookware", "cooky", "cool", "coolabah", "coolabahs", "coolamon", "coolamons", "coolant", "coolants", "cooler", "coolers", "coolidge", "coolie", "coolies", "cooling", "coolness", "cools", "coolth", "cooly", "coom", "coomb", "coombes", "coombs", "cooms", "coon", "coondog", "coondogs", "coonhound", "coonhounds", "coons", "coonskin", "coontie", "coonties", "coop", "cooper", "cooperage", "cooperages", "cooperation", "cooperations", "cooperative", "cooperativeness", "cooperatives", "cooperator", "cooperators", "cooperies", "coopers", "coopery", "coops", "coordinate", "coordinates", "coordination", "coordinator", "coordinators", "coos", "coot", "cootie", "cooties", "coots", "cop", "copaiba", "copal", "coparcenaries", "coparcenary", "coparcener", "coparceners", "copartner", "copartners", "copartnership", "copartnerships", "cope", "copeck", "copecks", "copemate", "copemates", "copenhagen", "copepod", "copepods", "coper", "copernicus", "copers", "copes", "copier", "copiers", "copies", "copilot", "copilots", "coping", "copings", "copiousness", "copita", "copitas", "coplanarity", "copland", "copolymerization", "copolymerizations", "copper", "copperas", "copperhead", "copperheads", "copperplate", "copperplates", "coppers", "coppersmith", "coppersmiths", "coppice", "coppices", "copping", "coppola", "copra", "copras", "coprolalia", "coprolite", "coprolites", "coprology", "coprophagist", "coprophagists", "coprophagy", "coprophilia", "coprosma", "coprosmas", "coprosterol", "cops", "copse", "copses", "copt", "copter", "copters", "coptic", "copts", "copula", "copulas", "copulation", "copulations", "copulative", "copulatives", "copy", "copybook", "copybooks", "copycat", "copycats", "copyhold", "copyholder", "copyholders", "copyholds", "copying", "copyist", "copyists", "copyreader", "copyreaders", "copyright", "copyrights", "copywriter", "copywriters", "coquelicot", "coquetries", "coquetry", "coquette", "coquettes", "coquettishness", "coquille", "coquilles", "coquina", "coquinas", "coquito", "coquitos", "cor", "cora", "coracle", "coracles", "coracoid", "coracoids", "coral", "coralline", "corallines", "corallite", "corallites", "corals", "coranto", "corantoes", "corantos", "corban", "corbans", "corbeil", "corbeille", "corbeilles", "corbeils", "corbel", "corbeling", "corbelling", "corbellings", "corbels", "corbett", "corbetts", "corbicula", "corbiculas", "corbie", "corbie step", "corbie steps", "corbies", "corbusier", "corby", "cord", "cordage", "cordages", "cordelia", "cordelier", "cordial", "cordialities", "cordiality", "cordialness", "cordials", "cordierite", "cordillera", "cordilleras", "cording", "cordings", "cordite", "cordon", "cordons", "cordova", "cordovan", "cordovans", "cords", "corduroy", "corduroys", "cordwain", "cordwainer", "cordwainers", "cordwainery", "cordwains", "cordyline", "cordylines", "core", "corella", "corellas", "corelli", "coreopsis", "corer", "corers", "cores", "corf", "corfam", "corfu", "corgi", "corgis", "coriander", "corianders", "corin", "coring", "corinna", "corinne", "corinth", "corinthian", "corinthians", "coriolanus", "corium", "coriums", "cork", "corkage", "corkages", "corkboard", "corker", "corkers", "corkiness", "corks", "corkwood", "corkwoods", "corm", "cormel", "cormels", "cormophyte", "cormophytes", "cormorant", "cormorants", "corms", "corn", "corn cracker", "corncockle", "corncockles", "corncrake", "corncrakes", "corncrib", "corncribs", "cornea", "corneas", "corneille", "cornel", "cornelia", "cornelian", "cornelians", "cornels", "cornemuse", "cornemuses", "corner", "corners", "cornet", "cornetcies", "cornetcy", "cornetist", "cornetists", "cornets", "cornett", "cornetto", "cornetts", "cornfield", "cornfields", "cornflower", "cornflowers", "cornhusk", "cornhusker", "cornhuskers", "cornhusking", "cornhuskings", "cornice", "cornices", "corniche", "corniches", "cornicle", "cornicles", "cornish", "cornishman", "corns", "cornstalk", "cornstalks", "cornstarch", "cornstone", "cornstones", "cornu", "cornucopia", "cornucopias", "cornuto", "cornutos", "cornwall", "cornwallis", "corodies", "corody", "corolla", "corollaries", "corollary", "corollas", "corona", "coronach", "coronachs", "coronagraph", "coronagraphs", "coronal", "coronaries", "coronary", "coronas", "coronation", "coronations", "coroner", "coroners", "coronet", "coronets", "coronograph", "coronographs", "corot", "corozo", "corozos", "corpora", "corporal", "corporality", "corporals", "corporalship", "corporalships", "corporas", "corporateness", "corporation", "corporations", "corporatism", "corporator", "corporators", "corporeality", "corporeities", "corporeity", "corposant", "corposants", "corps", "corpse", "corpses", "corpsman", "corpulence", "corpus", "corpuscle", "corpuscles", "corpuscularity", "corral", "corrals", "corrasion", "corrasions", "correcting", "correction", "corrections", "correctitude", "correctitudes", "corrective", "correctives", "correctness", "corrector", "correctors", "correggio", "corregidor", "corregidors", "correlate", "correlates", "correlation", "correlations", "correlative", "correlativeness", "correlatives", "correlativity", "correspondence", "correspondences", "correspondencies", "correspondency", "correspondent", "correspondents", "corrida", "corridas", "corridor", "corridors", "corrie", "corries", "corrigenda", "corrigendum", "corrigibility", "corrival", "corrivalry", "corrivals", "corroborant", "corroboration", "corroborations", "corroborator", "corroborators", "corroboree", "corroborees", "corrodies", "corroding", "corrody", "corrosion", "corrosions", "corrosive", "corrosiveness", "corrosives", "corrugation", "corrugations", "corrugator", "corrugators", "corrupter", "corrupters", "corruptibility", "corruptibleness", "corruption", "corruptionist", "corruptionists", "corruptions", "corruptness", "cors", "corsac", "corsacs", "corsage", "corsages", "corsair", "corsairs", "corse", "corselet", "corselets", "corses", "corset", "corsetry", "corsets", "corsica", "corsican", "corslet", "corslets", "cortes", "cortex", "cortexes", "cortez", "corticoid", "corticoids", "corticosteroid", "corticosteroids", "corticotrophin", "cortisol", "cortisone", "cortisones", "cortot", "corundum", "corunna", "coruscation", "coruscations", "corves", "corvette", "corvettes", "corvus", "corvuses", "corydon", "corylopsis", "corymb", "corymbs", "coryphaeus", "coryza", "coryzas", "cos", "cose", "cosec", "cosecant", "cosecants", "coseismal", "cosenza", "coses", "coset", "cosets", "cosh", "coshes", "cosies", "cosine", "cosines", "cosiness", "cosmetic", "cosmetician", "cosmeticians", "cosmetics", "cosmetologist", "cosmetologists", "cosmetology", "cosmism", "cosmist", "cosmists", "cosmo", "cosmochemistry", "cosmodrome", "cosmodromes", "cosmogonies", "cosmogonist", "cosmogonists", "cosmogony", "cosmographer", "cosmographers", "cosmography", "cosmolatry", "cosmologies", "cosmologist", "cosmologists", "cosmology", "cosmonaut", "cosmonautics", "cosmonauts", "cosmopolis", "cosmopolises", "cosmopolitan", "cosmopolitanism", "cosmopolitans", "cosmopolite", "cosmopolites", "cosmopolitism", "cosmorama", "cosmoramas", "cosmos", "cosmoses", "cosmotron", "cosmotrons", "coss", "cossack", "cossacks", "cosses", "cosset", "cossets", "cossie", "cossies", "cost", "cost plus", "costa", "costalgia", "costard", "costards", "costello", "coster", "costermonger", "costermongers", "costers", "costes", "costing", "costiveness", "costliness", "costmaries", "costmary", "costrel", "costrels", "costs", "costume", "costumer", "costumers", "costumes", "costumier", "costumiers", "cosy", "cot", "cotangent", "cotangents", "cote", "coteau", "coterie", "coteries", "cotes", "coth", "coths", "cothurnus", "cothurnuses", "cotillion", "cotillions", "cotillon", "cotillons", "cotinga", "cotingas", "cotise", "cotises", "cotoneaster", "cotoneasters", "cotopaxi", "cotquean", "cots", "cotswold", "cotswolds", "cotta", "cottage", "cottager", "cottagers", "cottages", "cottar", "cottars", "cottas", "cottbus", "cotter", "cotters", "cottidae", "cottier", "cottiers", "cotton", "cottonade", "cottonades", "cottonmouth", "cottonmouths", "cottons", "cottonseed", "cottonseeds", "cottontail", "cottontails", "cottus", "cotwal", "cotwals", "cotyledon", "cotyledons", "cotyloid", "cou cou", "coucal", "coucals", "couch", "couches", "couchette", "couchettes", "couching", "cougar", "cougars", "cough", "cougher", "coughers", "coughing", "coughings", "coughs", "couldn t", "coulibiaca", "coulisse", "coulisses", "couloir", "couloirs", "coulomb", "coulombs", "coulometer", "coulometers", "coulter", "coulters", "coumarin", "council", "councillor", "councillors", "councilman", "councilor", "councils", "councilwoman", "counsel", "counsellor", "counsellors", "counsellorship", "counsellorships", "counselor", "counselors", "counselorship", "counsels", "count", "countdown", "countenance", "countenancer", "countenancers", "countenances", "counter", "counter reformation", "counter revolution", "counter revolutionaries", "counter revolutionary", "counter revolutions", "counteraction", "counteractions", "counterbalance", "counterbalances", "counterbore", "countercharge", "countercharges", "countercheck", "counterchecks", "counterculture", "counterexample", "counterexamples", "counterfeit", "counterfeiter", "counterfeiters", "counterfeits", "counterfoil", "counterfoils", "counterinsurgency", "counterlight", "counterlights", "countermand", "countermands", "countermarch", "countermarches", "countermark", "countermarks", "countermine", "countermines", "counteroffer", "counteroffers", "counterpane", "counterpanes", "counterpart", "counterparts", "counterplot", "counterplots", "counterpoint", "counterpoints", "counterpoise", "counterpoises", "counterproof", "counterproofs", "counterpunch", "counters", "counterscarp", "counterscarps", "countershading", "countershaft", "countershafts", "countersign", "countersigns", "countersink", "countersinks", "counterstroke", "counterstrokes", "countess", "countesses", "counties", "counting", "countries", "country", "countryman", "countryside", "countrywoman", "counts", "countship", "countships", "county", "coup", "coupe", "coupees", "couperin", "coupes", "couple", "couplement", "couplements", "coupler", "couplers", "couples", "couplet", "couplets", "coupling", "couplings", "coupon", "coupons", "coups", "courage", "courageousness", "courant", "courante", "courantes", "courants", "courbaril", "courbarils", "courbet", "courgette", "courgettes", "courier", "couriers", "courlan", "courlans", "course", "courser", "coursers", "courses", "coursing", "coursings", "court", "court baron", "court leet", "court martial", "court martials", "courtelle", "courteousness", "courtesan", "courtesans", "courtesies", "courtesy", "courtier", "courtiers", "courting", "courtings", "courtliness", "courtney", "courtroom", "courtrooms", "courts", "courtship", "courtships", "courtyard", "courtyards", "couscous", "couscouses", "cousin", "cousin german", "cousinage", "cousinages", "cousinhood", "cousinry", "cousins", "cousinship", "cousteau", "couter", "couters", "coutil", "coutils", "couture", "couturier", "couturiers", "couvade", "covalencies", "covalency", "covariance", "covariances", "cove", "covellite", "coven", "covenant", "covenantee", "covenantees", "covenanter", "covenanters", "covenantor", "covenantors", "covenants", "covens", "coventry", "cover", "cover up", "cover ups", "coverage", "coverall", "coveralls", "coverer", "coverers", "covering", "coverings", "coverlet", "coverlets", "covers", "covert", "covertness", "coverts", "coverture", "covertures", "coves", "covetousness", "covey", "coveys", "covin", "covins", "cow", "cowage", "cowages", "coward", "cowardice", "cowardliness", "cowards", "cowbane", "cowbanes", "cowbell", "cowbells", "cowberries", "cowberry", "cowbird", "cowbirds", "cowboy", "cowboys", "cowcatcher", "cowcatchers", "cowes", "cowfish", "cowfishes", "cowgirl", "cowgirls", "cowhage", "cowhages", "cowhand", "cowhands", "cowherb", "cowherd", "cowherds", "cowhide", "cowhides", "cowhouse", "cowhouses", "cowitch", "cowitches", "cowl", "cowley", "cowlick", "cowlicks", "cowling", "cowlings", "cowls", "cowman", "cowpat", "cowpats", "cowper", "cowpoke", "cowpox", "cowpuncher", "cowpunchers", "cowrie", "cowries", "cowry", "cows", "cowshed", "cowsheds", "cowslip", "cowslips", "cox", "coxa", "coxalgia", "coxcomb", "coxcombries", "coxcombry", "coxcombs", "coxes", "coxswain", "coxswains", "coyishness", "coyness", "coyote", "coyotes", "coyotillo", "coyotillos", "coypu", "coypus", "coz", "coze", "cozenage", "cozener", "cozeners", "cozes", "coziness", "cozy", "crab", "crabbe", "crabbedness", "crabber", "crabbers", "crabbiness", "crabbing", "crabs", "crabstick", "crabsticks", "crack", "crackajack", "crackajacks", "crackbrain", "crackbrains", "crackdown", "crackdowns", "cracker", "crackerjack", "crackerjacks", "crackers", "cracking", "crackjaw", "crackle", "crackles", "crackleware", "crackling", "cracklings", "cracknel", "cracknels", "crackpot", "crackpots", "cracks", "cracksman", "cracovienne", "cracoviennes", "cracow", "cradle", "cradles", "cradlesong", "cradlesongs", "cradling", "cradlings", "craft", "craftiness", "crafts", "craftsman", "craftsmanship", "craftwork", "crag", "crag and tail", "craggedness", "cragginess", "crags", "cragsman", "crake", "crakes", "cram", "crambo", "cramboes", "crammer", "crammers", "cramoisies", "cramoisy", "cramp", "crampon", "crampons", "cramps", "crams", "cran", "cranage", "cranages", "cranberries", "cranberry", "crane", "cranes", "cranesbill", "cranesbills", "cranford", "craniata", "craniate", "craniologist", "craniology", "craniometer", "craniometers", "craniometry", "cranioscopist", "cranioscopists", "cranioscopy", "craniotomies", "craniotomy", "cranium", "craniums", "crank", "crankcase", "crankcases", "crankiness", "crankle", "crankles", "crankness", "cranko", "crankpin", "cranks", "crankshaft", "crankshafts", "cranmer", "crannies", "crannog", "crannogs", "cranny", "cranreuch", "cranreuchs", "crans", "cranwell", "crap", "crapaud", "crapauds", "crape", "crapehanger", "crapehangers", "crapes", "craps", "crapshooter", "crapshooters", "crapulence", "craquelure", "craquelures", "crare", "crares", "crash", "crash landing", "crash landings", "crashes", "crasis", "crassitude", "crassness", "crassus", "cratch", "cratches", "crate", "crater", "craters", "crates", "craton", "cratons", "cravat", "cravats", "craven", "cravenness", "cravens", "craver", "cravers", "craving", "cravings", "craw", "crawfish", "crawfishes", "crawford", "crawl", "crawler", "crawlers", "crawley", "crawling", "crawlings", "crawls", "craws", "cray", "crayer", "crayers", "crayfish", "crayfishes", "crayon", "crayons", "crays", "craze", "crazes", "crazies", "craziness", "crazy", "creak", "creakiness", "creaking", "creaks", "cream", "creamer", "creameries", "creamers", "creamery", "creaminess", "creams", "creamware", "creance", "creances", "crease", "creases", "creatin", "creatine", "creatinine", "creation", "creationism", "creationist", "creationists", "creations", "creative", "creativeness", "creativity", "creator", "creators", "creatorship", "creatorships", "creature", "creatures", "credence", "credences", "credendum", "credential", "credentials", "credenza", "credibility", "credibleness", "credit", "creditableness", "crediting", "creditor", "creditors", "credits", "creditworthiness", "credo", "credos", "credulities", "credulity", "credulousness", "cree", "creed", "creeds", "creek", "creeks", "creel", "creels", "creep", "creeper", "creepers", "creepie", "creepies", "creepiness", "creeping", "creeps", "creepy crawlies", "creepy crawly", "crees", "creese", "creeses", "creesh", "creeshes", "cremaster", "cremasters", "cremation", "cremationist", "cremationists", "cremations", "cremator", "crematories", "crematorium", "crematoriums", "cremators", "crematory", "crenation", "crenations", "crenature", "crenatures", "crenel", "crenelation", "crenelations", "crenellation", "crenellations", "crenelle", "crenelles", "crenels", "creodont", "creodonts", "creole", "creoles", "creolization", "creon", "creosol", "creosote", "creosotes", "crepe", "crepehanger", "crepehangers", "crepes", "crepitation", "crepitations", "crepitus", "crepituses", "crepon", "crepuscle", "crepuscule", "crepuscules", "crescendo", "crescendoes", "crescendos", "crescent", "crescents", "cresol", "cress", "cresses", "cresset", "cressets", "cressida", "crest", "cresting", "crests", "cretaceous", "cretan", "cretans", "crete", "cretic", "cretics", "cretin", "cretinism", "cretins", "cretonne", "creuse", "crevasse", "crevasses", "crevice", "crevices", "crew", "crewel", "crewelist", "crewelists", "crewels", "crewelwork", "crewman", "crews", "crib", "crib biting", "cribbage", "cribber", "cribbers", "cribbing", "cribellum", "cribellums", "cribs", "cribwork", "crichton", "crick", "cricket", "cricketer", "cricketers", "crickets", "cricks", "cricoid", "cricoids", "crier", "criers", "cries", "crime", "crimea", "crimes", "criminal", "criminalist", "criminalistics", "criminalists", "criminality", "criminals", "crimination", "criminations", "criminologist", "criminologists", "criminology", "crimmer", "crimmers", "crimp", "crimper", "crimpers", "crimplene", "crimps", "crimson", "crimsons", "crine", "crines", "cringe", "cringer", "cringers", "cringes", "cringle", "cringles", "crinite", "crinites", "crinkle", "crinkles", "crinkum crankum", "crinoid", "crinoidea", "crinoids", "crinoline", "crinolines", "crinum", "crinums", "criollo", "criollos", "crippen", "cripple", "crippler", "cripplers", "cripples", "cripps", "crisis", "crisp", "crispation", "crispations", "crispbread", "crispbreads", "crisper", "crispers", "crispiness", "crispness", "crisps", "crisscross", "crisscrosses", "crissum", "crista", "cristas", "cristobalite", "crit", "criterion", "criterions", "crith", "criths", "critic", "criticality", "criticalness", "criticaster", "criticasters", "criticiser", "criticisers", "criticism", "criticisms", "criticizer", "criticizers", "critics", "critique", "critiques", "crits", "critter", "critters", "cro magnon", "croak", "croaker", "croakers", "croakiness", "croaking", "croakings", "croaks", "croat", "croatia", "croatian", "crocein", "croceins", "crochet", "crocheter", "crocheters", "crocheting", "crochetings", "crochets", "crocidolite", "crock", "crockery", "crocket", "crockets", "crockett", "crockford", "crocking", "crocks", "crocodile", "crocodiles", "crocodilian", "crocodilians", "crocoite", "crocus", "crocuses", "croesus", "croft", "crofter", "crofters", "crofts", "croissant", "croissants", "cromer", "cromlech", "cromlechs", "cromorne", "cromornes", "crompton", "cromwell", "crone", "crones", "cronies", "cronin", "crony", "cronyism", "crook", "crookback", "crookedness", "crookes", "crooks", "croon", "crooner", "crooners", "crooning", "croonings", "croons", "crop", "crop dusting", "cropland", "cropper", "croppers", "crops", "croquet", "croquets", "croquette", "croquettes", "crore", "crores", "crosby", "crosier", "crosiers", "cross", "cross bedding", "cross buttock", "cross check", "cross checks", "cross country", "cross cousin", "cross crosslet", "cross dating", "cross division", "cross dresser", "cross dressers", "cross examination", "cross examinations", "cross examiner", "cross examiners", "cross eye", "cross fertilisation", "cross fertilization", "cross garnet", "cross index", "cross indexes", "cross pollination", "cross purpose", "cross purposes", "cross question", "cross questions", "cross reference", "cross references", "cross staff", "cross stitch", "crossband", "crossbanding", "crossbar", "crossbars", "crossbeam", "crossbeams", "crossbench", "crossbencher", "crossbenchers", "crossbenches", "crossbill", "crossbills", "crossbones", "crossbow", "crossbowman", "crossbows", "crossbred", "crossbreed", "crossbreeding", "crossbreeds", "crosscut", "crosscuts", "crosse", "crosses", "crossette", "crossettes", "crossfire", "crossfires", "crosshatch", "crosshatches", "crossing", "crossings", "crossjack", "crossjacks", "crosslet", "crosslets", "crosslight", "crosslights", "crossness", "crossopterygian", "crossover", "crossovers", "crosspatch", "crosspatches", "crosspiece", "crosspieces", "crossroad", "crossroads", "crosstown", "crosstree", "crosstrees", "crosswalk", "crosswalks", "crossway", "crossways", "crosswind", "crosswinds", "crossword", "crosswords", "crosswort", "crossworts", "crotal", "crotalaria", "crotalarias", "crotals", "crotch", "crotches", "crotchet", "crotchets", "croton", "crotons", "crottle", "crottles", "crouch", "crouches", "croup", "croupade", "croupades", "croupe", "croupes", "croupier", "croupiers", "croupiness", "croups", "crow", "crow s foot", "crow s nest", "crow bill", "crowboot", "crowboots", "crowd", "crowding", "crowds", "crowfoot", "crowfoots", "crowing", "crowkeeper", "crown", "crown of thorns", "crowner", "crowners", "crownet", "crownets", "crowns", "crownwork", "crownworks", "crows", "croydon", "croze", "crozes", "crozier", "croziers", "cru", "cruces", "crucian", "crucians", "crucible", "crucibles", "crucifer", "crucifers", "crucifier", "crucifiers", "crucifix", "crucifixes", "crucifixion", "crucifixions", "cruciform", "cruck", "crucks", "crud", "crude", "crudeness", "crudities", "crudity", "cruds", "cruelness", "cruelties", "cruelty", "cruet", "cruet stand", "cruet stands", "cruets", "cruikshank", "cruise", "cruiser", "cruisers", "cruises", "cruiseway", "cruiseways", "cruller", "crumb", "crumble", "crumbles", "crumbliness", "crumbs", "crumhorn", "crumhorns", "crummies", "crummy", "crump", "crumpet", "crumpets", "crumple", "crumples", "crumps", "crunch", "crunches", "crunchiness", "cruor", "cruores", "crupper", "cruppers", "crusade", "crusader", "crusaders", "crusades", "crusado", "crusados", "cruse", "cruses", "crush", "crusher", "crushers", "crushes", "crushing", "crusoe", "crust", "crustacea", "crustacean", "crustaceans", "crustiness", "crusts", "crutch", "crutches", "crux", "cruxes", "cruyff", "cruzado", "cruzadoes", "cruzados", "cruzeiro", "cruzeiros", "crwth", "crwths", "cry", "crying", "cryings", "crymotherapy", "cryobiology", "cryogen", "cryogenics", "cryogens", "cryogeny", "cryolite", "cryometer", "cryometers", "cryonics", "cryoscope", "cryoscopes", "cryoscopy", "cryostat", "cryostats", "cryosurgery", "cryotherapy", "cryotron", "cryotrons", "crypt", "cryptaesthesia", "cryptanalysis", "cryptanalyst", "cryptanalysts", "cryptococcosis", "cryptogam", "cryptogamist", "cryptogamists", "cryptogams", "cryptogamy", "cryptogram", "cryptograms", "cryptograph", "cryptographer", "cryptographers", "cryptographist", "cryptographists", "cryptographs", "cryptography", "cryptologist", "cryptologists", "cryptology", "cryptonym", "cryptonyms", "cryptorchid", "cryptorchidism", "crypts", "crystal", "crystallinity", "crystallisation", "crystallite", "crystallization", "crystallographer", "crystallographers", "crystallography", "crystalloid", "crystals", "ctene", "ctenes", "ctenophora", "ctenophoran", "ctenophorans", "ctenophore", "ctenophores", "ctesiphon", "cuadrilla", "cub", "cuba", "cubage", "cubages", "cuban", "cubans", "cubature", "cubatures", "cubbies", "cubbing", "cubbings", "cubby", "cube", "cubeb", "cubebs", "cubes", "cubic", "cubicalness", "cubicle", "cubicles", "cubism", "cubist", "cubists", "cubit", "cubits", "cubitus", "cubituses", "cuboid", "cuboids", "cubs", "cuckold", "cuckoldries", "cuckoldry", "cuckolds", "cuckoo", "cuckoo spit", "cuckoos", "cucumber", "cucumbers", "cucurbit", "cucurbits", "cud", "cudbear", "cuddies", "cuddle", "cuddles", "cuddling", "cuddy", "cudgel", "cudgeller", "cudgellers", "cudgels", "cuds", "cudweed", "cudweeds", "cue", "cueist", "cueists", "cuernavaca", "cues", "cuesta", "cuestas", "cuff", "cufflink", "cufflinks", "cuffs", "cufic", "cuif", "cuifs", "cuir bouilli", "cuirass", "cuirasses", "cuirassier", "cuirassiers", "cuisine", "cuisines", "cuisse", "cuisses", "cul de sac", "cul de sacs", "culch", "culches", "culdee", "culet", "culets", "culex", "culicid", "culicids", "cull", "cullender", "cullenders", "culler", "cullers", "cullet", "cullets", "cullies", "cullion", "cullions", "cullis", "cullises", "culloden", "culls", "cully", "culm", "culmination", "culminations", "culms", "culottes", "culpabilities", "culpability", "culpableness", "culpeper", "culprit", "culprits", "cult", "cultch", "cultches", "cultigen", "cultigens", "cultism", "cultist", "cultists", "cultivar", "cultivars", "cultivation", "cultivations", "cultivator", "cultivators", "cults", "culture", "cultures", "culturist", "culturists", "cultus", "cultuses", "culver", "culverin", "culverins", "culvers", "culvert", "culverts", "cumarin", "cumber", "cumberer", "cumberers", "cumberland", "cumberment", "cumberments", "cumbernauld", "cumbers", "cumbersomeness", "cumbrance", "cumbrances", "cumbria", "cumbrousness", "cumin", "cumins", "cummer", "cummerbund", "cummerbunds", "cummers", "cummings", "cummingtonite", "cumquat", "cumquats", "cumshaw", "cumshaws", "cumulation", "cumulations", "cumulostratus", "cumulus", "cunctation", "cunctations", "cunctator", "cunctators", "cuneiform", "cuneo", "cunjevoi", "cunner", "cunners", "cunnilinctus", "cunnilingus", "cunning", "cunningham", "cunningness", "cunnings", "cup", "cupbearer", "cupbearers", "cupboard", "cupboards", "cupcake", "cupcakes", "cupel", "cupellation", "cupels", "cupful", "cupfuls", "cupid", "cupidity", "cupids", "cupola", "cupolas", "cuppa", "cuppas", "cupper", "cuppers", "cupping", "cuppings", "cuprammonium", "cuprite", "cups", "cupule", "cupules", "cur", "curability", "curableness", "curacies", "curacy", "curare", "curarine", "curassow", "curassows", "curate", "curates", "curateship", "curateships", "curative", "curator", "curators", "curatorship", "curatorships", "curatrix", "curatrixes", "curb", "curbing", "curbs", "curbside", "curbsides", "curbstone", "curbstones", "curch", "curches", "curculio", "curculionidae", "curculios", "curcuma", "curcumas", "curd", "curdiness", "curdling", "curds", "cure", "cure all", "cure alls", "curer", "curers", "cures", "curettage", "curettages", "curette", "curettement", "curettes", "curfew", "curfews", "curia", "curias", "curie", "curies", "curio", "curios", "curiosa", "curiosities", "curiosity", "curiousness", "curitiba", "curium", "curl", "curler", "curlers", "curlew", "curlews", "curlicue", "curlicues", "curliness", "curling", "curls", "curmudgeon", "curmudgeons", "curn", "curns", "currach", "currachs", "currajong", "currant", "currants", "currawong", "currawongs", "currencies", "currency", "current", "currentness", "currents", "curricle", "curricles", "curriculum", "curriculums", "currie", "currier", "curriers", "curries", "currishness", "curry", "curs", "curse", "cursedness", "curser", "cursers", "curses", "cursive", "cursor", "cursores", "cursoriness", "cursors", "curstness", "curtailment", "curtailments", "curtain", "curtain raiser", "curtains", "curtal", "curtals", "curtana", "curtanas", "curtesy", "curtilage", "curtilages", "curtness", "curtsey", "curtseys", "curtsies", "curtsy", "curvature", "curvatures", "curve", "curved", "curves", "curvet", "curvets", "curvilinearity", "curving", "curzon", "cusack", "cuscus", "cuscuses", "cusec", "cusecs", "cushat", "cushats", "cushaw", "cushaws", "cushing", "cushion", "cushioning", "cushions", "cushitic", "cusk", "cusks", "cusp", "cuspid", "cuspidor", "cuspidores", "cuspidors", "cusps", "cuss", "cussedness", "cusses", "custard", "custards", "custer", "custodes", "custodial", "custodian", "custodians", "custodianship", "custodianships", "custodies", "custody", "custom", "customaries", "customariness", "customary", "customer", "customers", "customs", "custos", "cut", "cut and cover", "cut and thrust", "cutaway", "cutaways", "cutback", "cutbacks", "cutch", "cutcheries", "cutcherries", "cutcherry", "cutchery", "cutches", "cuteness", "cutes", "cutey", "cuteys", "cuthbert", "cuticle", "cuticles", "cutie", "cuties", "cutin", "cutinisation", "cutinization", "cutis", "cutises", "cutlass", "cutlasses", "cutler", "cutleries", "cutlers", "cutlery", "cutlet", "cutlets", "cutline", "cutlines", "cutpurse", "cutpurses", "cuts", "cutter", "cutters", "cutties", "cutting", "cuttings", "cuttle", "cuttlefish", "cuttlefishes", "cuttles", "cutty", "cutwork", "cutworm", "cutworms", "cuvette", "cuvettes", "cuxhaven", "cuyp", "cuzco", "cwm", "cwmbran", "cwms", "cyan", "cyanamide", "cyanamides", "cyanate", "cyanates", "cyanide", "cyanides", "cyanine", "cyanines", "cyanite", "cyanocobalamin", "cyanogen", "cyanometer", "cyanometers", "cyanosis", "cyanotype", "cyanotypes", "cyans", "cyathium", "cyathiums", "cyathus", "cyathuses", "cybele", "cyberneticist", "cyberneticists", "cybernetics", "cyberspace", "cyborg", "cyborgs", "cycad", "cycads", "cyclamate", "cyclamates", "cyclamen", "cyclamens", "cycle", "cycles", "cyclicity", "cycling", "cyclist", "cyclists", "cyclo", "cyclo cross", "cyclograph", "cyclographs", "cyclohexane", "cycloid", "cycloids", "cyclometer", "cyclometers", "cyclone", "cyclones", "cyclonite", "cyclopaedia", "cyclopaedias", "cyclopedia", "cyclopedias", "cyclopes", "cycloplegia", "cyclopropane", "cyclops", "cyclopses", "cyclorama", "cycloramas", "cyclos", "cycloserine", "cyclosis", "cyclostome", "cyclostomes", "cyclostyle", "cyclostyles", "cyclothymia", "cyclotron", "cyclotrons", "cyder", "cyders", "cyesis", "cygnet", "cygnets", "cygnus", "cylinder", "cylinders", "cylindrite", "cylindroid", "cylindroids", "cylix", "cyma", "cymar", "cymars", "cymas", "cymatium", "cymatiums", "cymbal", "cymbalist", "cymbalists", "cymbalo", "cymbaloes", "cymbalom", "cymbaloms", "cymbalos", "cymbals", "cymbeline", "cymbidium", "cymbidiums", "cyme", "cymes", "cymograph", "cymographs", "cymophane", "cymophanes", "cymotrichy", "cymric", "cymry", "cynewulf", "cynghanedd", "cynic", "cynicalness", "cynicism", "cynics", "cynophobia", "cynosure", "cynosures", "cynthia", "cypher", "cyphers", "cypress", "cypresses", "cyprian", "cyprians", "cyprinid", "cyprinids", "cyprinoid", "cypriot", "cypriote", "cypriots", "cypripedia", "cypripedium", "cyproheptadine", "cyprus", "cypsela", "cyrano", "cyrenaic", "cyrenaica", "cyrene", "cyril", "cyrillic", "cyrus", "cyst", "cystectomies", "cystectomy", "cysteine", "cysticercus", "cystine", "cystitis", "cystocarp", "cystocarps", "cystocele", "cystoceles", "cystoid", "cystoids", "cystolith", "cystoliths", "cystoscope", "cystoscopes", "cystoscopy", "cystostomy", "cystotomies", "cystotomy", "cysts", "cytisus", "cytochemistry", "cytochrome", "cytochromes", "cytogenesis", "cytogeneticist", "cytogenetics", "cytologist", "cytologists", "cytology", "cytolysis", "cytomegalovirus", "cyton", "cytons", "cytopathology", "cytopenia", "cytoplasm", "cytoplasms", "cytosine", "cytosome", "cytotoxin", "cytotoxins", "czar", "czardas", "czardases", "czardom", "czarevitch", "czarevitches", "czarevna", "czarevnas", "czarina", "czarinas", "czarism", "czarist", "czarists", "czaritza", "czaritzas", "czars", "czech", "czechoslovak", "czechoslovakia", "czechoslovakian", "czechoslovakians", "czechoslovaks", "czechs", "d annunzio", "d day", "d notice", "d notices", "dab", "dabber", "dabbers", "dabbler", "dabblers", "dabchick", "dabchicks", "dabs", "dabster", "dabsters", "dacca", "dace", "daces", "dacha", "dachas", "dachshund", "dachshunds", "dacia", "dacoit", "dacoities", "dacoits", "dacoity", "dacron", "dactyl", "dactylic", "dactylogram", "dactylograms", "dactylography", "dactylology", "dactyls", "dad", "dada", "dadaism", "dadaist", "dadaists", "daddies", "daddy", "dado", "dadoes", "dados", "dads", "daedalus", "daemon", "daemons", "daff", "daffadowndillies", "daffadowndilly", "daffing", "daffings", "daffodil", "daffodillies", "daffodilly", "daffodils", "daffs", "daftness", "dag", "dagenham", "dagga", "daggas", "dagger", "daggers", "daglock", "daglocks", "dagoba", "dagobas", "dagon", "dags", "daguerre", "daguerreotype", "daguerreotyper", "daguerreotypers", "daguerreotypes", "daguerreotypist", "daguerreotypy", "dah", "dahl", "dahlia", "dahlias", "dahls", "dahomey", "dahs", "daikon", "daikons", "dailies", "daily", "daimon", "daimons", "dainties", "daintiness", "dainty", "daiquiri", "daiquiris", "dairies", "dairy", "dairying", "dairyings", "dairymaid", "dairymaids", "dairyman", "dairywoman", "dais", "daises", "daisies", "daisy", "daisy cutter", "dak", "dakar", "dakoit", "dakoits", "dakota", "daks", "dal", "dale", "dales", "dalesman", "dalhousie", "dallapiccola", "dallas", "dalliance", "dalliances", "dallier", "dalliers", "dalmatia", "dalmatian", "dalmatians", "dalmatic", "dalmatics", "dals", "dalton", "dam", "damage", "damageability", "damages", "daman", "damans", "damar", "damars", "damascene", "damascenes", "damascus", "damask", "damaskeening", "damasks", "dame", "dame school", "dames", "damfool", "damian", "damien", "dammar", "dammars", "damn", "damnability", "damnableness", "damnation", "damnations", "damned", "damnedest", "damns", "damocles", "damon", "damosel", "damosels", "damozel", "damozels", "damp", "dampener", "dampeners", "dampening", "damper", "dampers", "dampier", "dampishness", "dampness", "damps", "dams", "damsel", "damselfish", "damselflies", "damselfly", "damsels", "damson", "damsons", "dan", "dana", "dance", "dancer", "dancers", "dances", "dancette", "dancettes", "dancing", "dancings", "dandelion", "dandelions", "dander", "danders", "dandies", "dandiprat", "dandiprats", "dandler", "dandlers", "dandruff", "dandy", "dandy brush", "dandyism", "dane", "danegeld", "danelaw", "danes", "danger", "dangerousness", "dangers", "dangle", "dangler", "danglers", "dangles", "dangling", "danglings", "daniel", "daniela", "daniella", "danielle", "danio", "danios", "danish", "danite", "dankness", "danmark", "danny", "dans", "danseur", "danseurs", "danseuse", "danseuses", "dante", "dantean", "danton", "danube", "danzig", "dap", "daphne", "daphnes", "daphnia", "daphnis", "dapperness", "dapple", "dapple grey", "dapples", "daps", "daraf", "darafs", "darbyite", "dardan", "dardanelles", "dardic", "dare", "daredevil", "darer", "darers", "dares", "darg", "dargs", "dari", "daric", "darics", "darien", "daring", "dariole", "darioles", "daris", "darius", "darjeeling", "dark", "darkener", "darkeners", "darkening", "darkness", "darks", "darling", "darlings", "darlington", "darmstadt", "darn", "darnel", "darnels", "darner", "darners", "darning", "darnings", "darnley", "darns", "darren", "dart", "dartboard", "dartboards", "darter", "darters", "dartford", "dartmoor", "dartmouth", "darts", "darwin", "darwinian", "darwinians", "darwinism", "darwinist", "darwinists", "das", "dash", "dash pot", "dashboard", "dashboards", "dasheen", "dasheens", "dasher", "dashers", "dashes", "dashiki", "dashikis", "dassie", "dassies", "dastard", "dastardliness", "dastards", "dasyure", "dasyures", "data", "database", "databases", "dataries", "datary", "date", "dateline", "datelines", "dater", "daters", "dates", "dative", "datives", "datolite", "datuk", "datuks", "datum", "datura", "daturas", "daub", "daube", "dauber", "dauberies", "daubers", "daubery", "daubigny", "daubing", "daubings", "daubs", "daud", "daudet", "dauds", "daughter", "daughter in law", "daughterliness", "daughters", "daumier", "dauntlessness", "dauphin", "dauphine", "dauphines", "dauphiness", "dauphinesses", "dauphins", "dautie", "dauties", "davao", "dave", "davenport", "davenports", "david", "davie", "davies", "davina", "davis", "davit", "davits", "davy", "daw", "dawdler", "dawdlers", "dawdling", "dawk", "dawkins", "dawks", "dawn", "dawning", "dawnings", "dawns", "daws", "dawson", "dawtie", "dawties", "day", "day lewis", "dayak", "dayaks", "daybreak", "daybreaks", "daydream", "daydreamer", "daydreamers", "daydreams", "daylight", "daylights", "daymark", "daymarks", "days", "daysman", "dayspring", "daysprings", "daystar", "daystars", "daytime", "daytimes", "dayton", "daze", "dazes", "dazzle", "dazzler", "dazzlers", "dazzles", "de escalation", "de escalations", "de icer", "de icers", "de stalinization", "deacon", "deaconess", "deaconesses", "deaconries", "deaconry", "deacons", "deaconship", "deaconships", "deactivation", "deactivations", "dead", "dead nettle", "deadener", "deadeners", "deadening", "deadenings", "deadhead", "deadheads", "deadlight", "deadlights", "deadline", "deadlines", "deadliness", "deadlock", "deadlocks", "deadness", "deaf", "deaf aid", "deaf aids", "deaf mute", "deaf mutism", "deafening", "deafenings", "deafness", "deal", "dealer", "dealers", "dealership", "dealerships", "dealfish", "dealfishes", "dealing", "dealings", "deals", "deambulatories", "deambulatory", "dean", "deaneries", "deanery", "deanna", "deans", "deanship", "deanships", "dear", "dearest", "dearie", "dearies", "dearness", "dears", "dearth", "dearths", "deary", "death", "death s head", "death roll", "deathlessness", "deathliness", "deaths", "deathsman", "deauville", "deb", "debacle", "debacles", "debarkation", "debarkations", "debarment", "debarments", "debarring", "debasedness", "debasement", "debasements", "debaser", "debasers", "debate", "debater", "debaters", "debates", "debauch", "debauchedness", "debauchee", "debauchees", "debaucher", "debaucheries", "debauchers", "debauchery", "debauches", "debauchment", "debauchments", "debbie", "debenture", "debentures", "debilitation", "debilitations", "debility", "debit", "debitor", "debitors", "debits", "debonairness", "deborah", "debouch", "debouches", "debouchment", "debouchments", "debra", "debriefing", "debris", "debs", "debt", "debtor", "debtors", "debts", "debug", "debugger", "debuggers", "debugs", "debunking", "debussy", "debut", "debuts", "debye", "decade", "decadence", "decadences", "decadent", "decadents", "decades", "decaf", "decafs", "decagon", "decagons", "decagram", "decagrams", "decahedron", "decahedrons", "decal", "decalcification", "decalcomania", "decalcomanias", "decalescence", "decalitre", "decalitres", "decalogue", "decalogues", "decals", "decametre", "decametres", "decampment", "decampments", "decane", "decantation", "decantations", "decanter", "decanters", "decapitation", "decapitations", "decapitator", "decapitators", "decapod", "decapods", "decapolis", "decarbonation", "decarbonations", "decarbonisation", "decarbonization", "decarbonize", "decarbonizes", "decarboxylase", "decarburisation", "decarburization", "decare", "decares", "decastere", "decasteres", "decastyle", "decastyles", "decasyllable", "decasyllables", "decathlon", "decathlons", "decatur", "decay", "decays", "decca", "decease", "deceased", "deceases", "decedent", "deceit", "deceitfulness", "deceits", "deceivability", "deceivableness", "deceiver", "deceivers", "deceleration", "decelerator", "decelerators", "decelerometer", "decelerometers", "december", "decembrist", "decemvir", "decemvirate", "decemvirates", "decemvirs", "decencies", "decency", "decennaries", "decennary", "decennial", "decennium", "decenniums", "decentralisation", "decentralization", "deception", "deceptions", "deceptiveness", "decerebrate", "decerebrates", "decerebration", "deciare", "deciares", "decibel", "decibels", "decider", "deciders", "deciding", "decidua", "deciduas", "deciduousness", "decigram", "decigrams", "decile", "deciles", "deciliter", "deciliters", "decilitre", "decilitres", "decillion", "decillions", "decillionth", "decillionths", "decimal", "decimalisation", "decimalisations", "decimalization", "decimalizations", "decimals", "decimation", "decimations", "decimator", "decimators", "decimeter", "decimeters", "decimetre", "decimetres", "decipherability", "decipherer", "decipherers", "decipherment", "decipherments", "decision", "decisions", "decisiveness", "decistere", "decisteres", "deck", "deck house", "decker", "deckers", "decking", "deckle", "deckles", "decks", "declaimer", "declaimers", "declamation", "declamations", "declarant", "declarants", "declaration", "declarations", "declarative", "declarator", "declarators", "declarer", "declarers", "declassification", "declassifications", "declension", "declensions", "declination", "declinations", "declinature", "declinatures", "decline", "decliner", "decliners", "declines", "declinometer", "declinometers", "declivities", "declivity", "decoction", "decoctions", "decoder", "decoders", "decoding", "decollation", "decollations", "decollator", "decolonisation", "decolonisations", "decolonization", "decolonizations", "decolorant", "decolorants", "decoloration", "decolorations", "decolorisation", "decolorisations", "decolorization", "decolorizations", "decolourisation", "decolourization", "decolourizations", "decomposability", "decomposer", "decomposers", "decomposition", "decompositions", "decompressing", "decompression", "decompressions", "decongestant", "decongestants", "deconsecration", "deconsecrations", "deconstruction", "decontamination", "decontaminator", "decontaminators", "decor", "decoration", "decorations", "decorativeness", "decorator", "decorators", "decorousness", "decors", "decortication", "decorum", "decorums", "decoupage", "decoupling", "decoy", "decoys", "decrease", "decreases", "decree", "decrees", "decreet", "decreets", "decrement", "decrements", "decrepitation", "decrepitude", "decrescendo", "decrescendos", "decretal", "decretals", "decretist", "decretists", "decrial", "decrials", "decrier", "decryption", "decryptions", "decubitus", "decubituses", "decumbence", "decumbences", "decumbencies", "decumbency", "decuple", "decuples", "decuries", "decurion", "decurions", "decurrencies", "decurrency", "decury", "decussation", "decussations", "dedans", "dedication", "dedications", "dedicator", "dedicators", "dedifferentiation", "deducibility", "deducibleness", "deductibility", "deductible", "deduction", "deductions", "dee", "deed", "deeds", "deejay", "deejays", "deemster", "deemsters", "deep", "deep sea", "deepening", "deepness", "deeps", "deer", "deerberries", "deerberry", "deerskin", "deerskins", "deerstalker", "deerstalkers", "deerstalking", "dees", "def", "defacement", "defacements", "defacer", "defacers", "defalcation", "defalcations", "defalcator", "defalcators", "defamation", "defamations", "defamer", "defamers", "default", "defaulter", "defaulters", "defaults", "defeasance", "defeasances", "defeasibility", "defeasibleness", "defeat", "defeated", "defeater", "defeaters", "defeatism", "defeatist", "defeatists", "defeats", "defeature", "defecation", "defecations", "defect", "defectibility", "defection", "defections", "defectiveness", "defector", "defectors", "defects", "defence", "defencelessness", "defences", "defendant", "defendants", "defender", "defenders", "defenestration", "defenestrations", "defense", "defenselessness", "defenseman", "defenses", "defensibility", "defensive", "defensiveness", "deferable", "deference", "deferences", "deferent", "deferents", "deferment", "deferments", "deferrable", "deferral", "deferrals", "deferrer", "deferrers", "defervescence", "defiance", "defiances", "defiantness", "defibrillation", "defibrillator", "defibrillators", "deficience", "deficiences", "deficiencies", "deficiency", "deficit", "deficits", "defier", "defiers", "defilade", "defilades", "defile", "defilement", "defilements", "defiler", "defilers", "defiles", "definabilities", "definability", "definer", "definers", "definiendum", "definiens", "defining", "definiteness", "definition", "definitions", "definitive", "definitiveness", "definitives", "definitude", "deflagrability", "deflagration", "deflagrations", "deflation", "deflationist", "deflationists", "deflations", "deflator", "deflators", "deflection", "deflections", "deflector", "deflectors", "deflexion", "deflexions", "defloration", "deflorations", "deflowerer", "deflowerers", "defluxion", "defoe", "defoliant", "defoliants", "defoliation", "defoliations", "defoliator", "defoliators", "deforcement", "deforcements", "deforciant", "deforciants", "deforest", "deforestation", "deforests", "deformability", "deformation", "deformations", "deformedness", "deformer", "deformers", "deformities", "deformity", "defraudation", "defraudations", "defrauder", "defrauders", "defraudment", "defraudments", "defrayal", "defrayals", "defrayer", "defrayers", "defrayment", "defrayments", "defroster", "defrosters", "deftness", "defusing", "degas", "degaussing", "degeneracies", "degeneracy", "degenerate", "degenerateness", "degenerates", "degeneration", "degenerations", "deglutination", "deglutinations", "deglutition", "deglutitions", "degradation", "degradations", "degree", "degrees", "degression", "degressions", "degustation", "degustations", "dehiscence", "dehiscences", "dehorner", "dehorners", "dehortation", "dehortations", "dehortative", "dehortatory", "dehorter", "dehorters", "dehumanisation", "dehumanization", "dehumidification", "dehumidifier", "dehumidifiers", "dehydration", "dehydrations", "dehydrator", "dehydrators", "deicide", "deicides", "deictic", "deictics", "deification", "deifications", "deifier", "deifiers", "deil", "deils", "deipnosophist", "deipnosophists", "deirdre", "deism", "deist", "deists", "deities", "deity", "deixis", "dejectedness", "dejection", "dejections", "dekker", "dekko", "dekkos", "del", "delacroix", "delaine", "delamination", "delation", "delator", "delators", "delaunay", "delaware", "delay", "delayer", "delayers", "delays", "dele", "delectability", "delectableness", "delectation", "delectations", "delegacies", "delegacy", "delegate", "delegates", "delegating", "delegation", "delegations", "deleteriousness", "deletion", "deletions", "delf", "delfs", "delft", "delhi", "deli", "delia", "delian", "deliberateness", "deliberation", "deliberations", "deliberativeness", "deliberator", "deliberators", "delibes", "delicacies", "delicacy", "delicate", "delicateness", "delicates", "delicatessen", "delicatessens", "delicious", "deliciousness", "delict", "delicts", "delight", "delightedness", "delightfulness", "delights", "delilah", "delimitation", "delimitations", "delimitative", "delineation", "delineations", "delineator", "delineators", "delineavit", "delinquencies", "delinquency", "delinquent", "delinquents", "deliquescence", "deliration", "delirations", "deliriousness", "delirium", "deliriums", "delis", "delitescence", "delius", "deliverance", "deliverances", "deliverer", "deliverers", "deliveries", "delivery", "dell", "della", "dells", "delos", "delphi", "delphian", "delphinium", "delphiniums", "delphinus", "dels", "delta", "deltas", "deltiology", "deltoid", "delubrum", "delubrums", "deluder", "deluders", "deluge", "deluges", "delusion", "delusions", "delusiveness", "delver", "delvers", "demagnetisation", "demagnetiser", "demagnetisers", "demagnetization", "demagnetize", "demagnetizer", "demagnetizers", "demagnetizes", "demagog", "demagogs", "demagogue", "demagoguery", "demagogues", "demagoguism", "demagogy", "demand", "demandant", "demandants", "demander", "demanders", "demands", "demantoid", "demarcation", "demarcations", "dematerialisation", "dematerialization", "deme", "demeanor", "demeanors", "demeanour", "demeanours", "dementedness", "dementia", "dementias", "demerara", "demerit", "demerits", "demes", "demesne", "demesnes", "demeter", "demetrius", "demi cannon", "demi cannons", "demi culverin", "demi pension", "demies", "demigod", "demigods", "demijohn", "demijohns", "demilitarisation", "demilitarization", "demineralization", "demipique", "demipiques", "demirep", "demireps", "demise", "demises", "demission", "demissions", "demister", "demisters", "demitasse", "demitasses", "demiurge", "demiurges", "demivolt", "demivoltes", "demivolts", "demo", "demob", "demobilisation", "demobilisations", "demobilization", "demobilizations", "demobs", "democracies", "democracy", "democrat", "democratisation", "democratization", "democrats", "democritus", "demodulation", "demodulations", "demodulator", "demogorgon", "demographer", "demographers", "demographic", "demographics", "demography", "demoiselle", "demoiselles", "demolisher", "demolishers", "demolishing", "demolishment", "demolishments", "demolition", "demolitions", "demon", "demonetisation", "demonetisations", "demonetization", "demonetizations", "demoniac", "demoniacs", "demonism", "demonist", "demonists", "demonolater", "demonolaters", "demonolatry", "demonologies", "demonologist", "demonologists", "demonology", "demons", "demonstrability", "demonstrableness", "demonstration", "demonstrations", "demonstrative", "demonstrativeness", "demonstrator", "demonstrators", "demoralisation", "demoralisations", "demoralization", "demos", "demosthenes", "demotic", "demotion", "demotions", "dempsey", "dempster", "dempsters", "demulcent", "demulcents", "demulsification", "demulsifier", "demulsifiers", "demur", "demureness", "demurrage", "demurrages", "demurral", "demurrals", "demurrer", "demurrers", "demurs", "demy", "demythologisation", "demythologisations", "demythologization", "demythologizations", "den", "denarius", "denationalisation", "denationalization", "denaturalisation", "denaturalization", "denaturant", "denaturants", "denazification", "denbighshire", "dendrite", "dendrites", "dendrobium", "dendrobiums", "dendrochronologist", "dendrochronologists", "dendrochronology", "dendrologist", "dendrologists", "dendrology", "dendron", "dendrons", "dene", "deneb", "denebola", "denegation", "denegations", "denes", "dengue", "denial", "denials", "denier", "deniers", "denigration", "denigrations", "denigrator", "denigrators", "denim", "denims", "denis", "denise", "denitration", "denitrations", "denitrification", "denitrificator", "denitrificators", "denization", "denizations", "denizen", "denizens", "denizenship", "denmark", "dennis", "denny", "denomination", "denominationalism", "denominationalist", "denominations", "denominator", "denominators", "denotation", "denotations", "denotement", "denouement", "denouements", "denouncement", "denouncements", "denouncer", "denouncers", "dens", "denseness", "densifier", "densimeter", "densimeters", "densimetry", "densities", "densitometer", "densitometers", "densitometry", "density", "dent", "dental", "dentalium", "dentaliums", "dentals", "dentaria", "dentarias", "dentaries", "dentary", "dentation", "dentations", "dentelle", "dentex", "dentexes", "denticle", "denticles", "denticulation", "dentifrice", "dentifrices", "dentil", "dentilingual", "dentils", "dentin", "dentine", "dentist", "dentistry", "dentists", "dentition", "dentitions", "dents", "denture", "dentures", "denudation", "denudations", "denunciation", "denunciations", "denunciator", "denunciators", "denver", "denys", "denzil", "deodand", "deodands", "deodar", "deodars", "deodorant", "deodorants", "deodorisation", "deodorisations", "deodoriser", "deodorisers", "deodorization", "deodorizations", "deodorizer", "deodorizers", "deontologist", "deontologists", "deontology", "deoxidisation", "deoxidisations", "deoxidiser", "deoxidisers", "deoxidization", "deoxidizations", "deoxidizer", "deoxidizers", "deoxyribose", "departed", "departer", "departers", "department", "departmentalisation", "departmentalism", "departmentalization", "departments", "departure", "departures", "dependability", "dependance", "dependant", "dependants", "dependence", "dependences", "dependencies", "dependency", "dependent", "dependents", "depersonalization", "depicter", "depicters", "depicting", "depiction", "depictions", "depictor", "depictors", "depilation", "depilations", "depilator", "depilatories", "depilators", "depilatory", "depletion", "depletions", "deplorability", "deplorableness", "deploration", "deplorations", "deployment", "deployments", "deplumation", "depolarisation", "depolarisations", "depolarization", "depolarizations", "depolymerization", "deponent", "deponents", "depopulation", "depopulations", "depopulator", "depopulators", "deportation", "deportations", "deportee", "deportees", "deportment", "deportments", "deposal", "deposals", "deposer", "deposers", "deposit", "depositaries", "depositary", "deposition", "depositions", "depositor", "depositories", "depositors", "depository", "deposits", "depot", "depots", "depravation", "depravations", "depravedness", "depravities", "depravity", "deprecation", "deprecations", "deprecator", "deprecators", "depreciation", "depreciations", "depreciator", "depreciators", "depredation", "depredations", "depredator", "depredators", "depressant", "depressants", "depression", "depressions", "depressive", "depressives", "depressor", "depressors", "deprival", "deprivals", "deprivation", "deprivations", "depside", "depsides", "deptford", "depth", "depths", "depuration", "depurations", "depurative", "depuratives", "depurator", "depurators", "deputation", "deputations", "deputies", "deputy", "deracination", "deracinations", "derail", "derailment", "derailments", "derails", "derangement", "derangements", "deray", "derbies", "derby", "derbyshire", "deregulating", "deregulation", "deregulations", "derek", "derelict", "dereliction", "derelictions", "derelicts", "derequisition", "derequisitions", "derider", "deriders", "derision", "derisions", "derisiveness", "derivation", "derivations", "derivative", "derivatives", "deriving", "derma", "dermabrasion", "dermas", "dermatitis", "dermatogen", "dermatogens", "dermatographia", "dermatologist", "dermatologists", "dermatology", "dermatome", "dermatophyte", "dermatophytes", "dermatoplasty", "dermatosis", "dermis", "dermises", "dermoid", "dermoptera", "dermot", "derogation", "derogations", "derogatoriness", "derrick", "derricks", "derring do", "derringer", "derringers", "derris", "derrises", "derry", "derv", "dervish", "dervishes", "derwent", "derwentwater", "desai", "desalination", "desalinisation", "desalinization", "descant", "descants", "descartes", "descendant", "descendants", "descendent", "descender", "descenders", "descension", "descensions", "descent", "descents", "describer", "describers", "description", "descriptions", "descriptiveness", "descriptivism", "desdemona", "desecrater", "desecraters", "desecration", "desecrations", "desecrator", "desecrators", "desegregation", "desegregations", "desensitisation", "desensitisations", "desensitization", "desensitizations", "desensitizer", "desensitizers", "desert", "deserter", "deserters", "desertion", "desertions", "deserts", "deservedness", "deserver", "deservers", "deserving", "desiccant", "desiccants", "desiccation", "desiccations", "desiccator", "desiccators", "desideration", "desiderative", "desideratum", "design", "designation", "designations", "designator", "designators", "designer", "designers", "designing", "designment", "designments", "designs", "desinence", "desinences", "desirability", "desirable", "desirableness", "desire", "desirer", "desirers", "desires", "desirousness", "desistance", "desistances", "desistence", "desistences", "desk", "desks", "desktop", "desman", "desmans", "desmid", "desmids", "desmodium", "desmodiums", "desmoid", "desmond", "desolateness", "desolater", "desolaters", "desolation", "desolations", "desolator", "desolators", "desorption", "desorptions", "despair", "despairs", "despatch", "despatches", "desperado", "desperadoes", "desperados", "desperate", "desperateness", "desperation", "despicability", "despicableness", "despisal", "despiser", "despisers", "despising", "despite", "despitefulness", "despites", "despoiler", "despoilers", "despoilment", "despoliation", "despond", "despondence", "despondency", "desponds", "despot", "despoticalness", "despotism", "despotisms", "despots", "despumation", "despumations", "desquamation", "dessalines", "dessau", "dessert", "desserts", "dessertspoon", "dessertspoonful", "dessertspoonfuls", "dessertspoons", "dessiatine", "dessiatines", "destination", "destinations", "destinies", "destiny", "destitution", "destrier", "destriers", "destroyer", "destroyers", "destruct", "destructibility", "destructibleness", "destruction", "destructionist", "destructionists", "destructions", "destructiveness", "destructivities", "destructivity", "destructor", "destructors", "destructs", "desuetude", "desuetudes", "desulphuration", "desulphurations", "desultoriness", "detachedness", "detachment", "detachments", "detail", "detailing", "details", "detainee", "detainees", "detainer", "detainers", "detainment", "detainments", "detecting", "detection", "detections", "detective", "detectives", "detector", "detectors", "detent", "detention", "detentions", "detents", "detergence", "detergency", "detergent", "detergents", "deterioration", "deteriorationist", "deteriorations", "determent", "determents", "determinability", "determinableness", "determinant", "determinants", "determination", "determinations", "determinative", "determinatives", "determiner", "determiners", "determinism", "determinist", "determinists", "deterrence", "deterrences", "deterrent", "deterrents", "detersive", "detersives", "detestability", "detestableness", "detestation", "detestations", "detester", "detesters", "dethronement", "dethronements", "dethroner", "dethroners", "detinue", "detinues", "detonation", "detonations", "detonator", "detonators", "detour", "detours", "detox", "detoxicant", "detoxicants", "detoxicate", "detoxicates", "detoxication", "detoxications", "detoxification", "detoxifications", "detraction", "detractions", "detractor", "detractors", "detrainment", "detrainments", "detribalisation", "detribalization", "detriment", "detriments", "detrition", "detritions", "detritus", "detroit", "detruncation", "detruncations", "detrusion", "detumescence", "deucalion", "deuce", "deuce ace", "deuces", "deuteragonist", "deuteranope", "deuteranopes", "deuteranopia", "deuteride", "deuterium", "deuterogamist", "deuterogamists", "deuterogamy", "deuteron", "deuteronomist", "deuteronomy", "deuterons", "deuton", "deutons", "deutoplasm", "deutoplasms", "deutschland", "deutzia", "deutzias", "dev", "deva", "devaluation", "devaluations", "devanagari", "devas", "devastation", "devastations", "devastator", "devastators", "devel", "developer", "developers", "developing", "development", "developments", "devels", "devereux", "devi", "deviance", "deviances", "deviant", "deviants", "deviate", "deviates", "deviation", "deviationism", "deviationist", "deviationists", "deviations", "deviator", "deviators", "device", "devices", "devil", "devil worship", "devilish", "devilishness", "devilkin", "devilkins", "devilment", "devilments", "devilries", "devilry", "devils", "devils on horseback", "deviltry", "deviousness", "devisal", "devisals", "devise", "devisee", "devisees", "deviser", "devisers", "devises", "devising", "devisor", "devisors", "devitalisation", "devitalisations", "devitalization", "devitalizations", "devitrification", "devoir", "devoirs", "devolution", "devolutions", "devolvement", "devolvements", "devon", "devonian", "devonshire", "devotedness", "devotee", "devotees", "devotement", "devotion", "devotional", "devotionality", "devotionalness", "devotions", "devourer", "devourers", "devoutness", "dew", "dew worm", "dew worms", "dewan", "dewans", "dewar", "dewars", "dewey", "dewi", "dewiness", "dewlap", "dewlaps", "dews", "dewsbury", "dexedrine", "dexter", "dexterities", "dexterity", "dexterousness", "dexters", "dextrality", "dextran", "dextrin", "dextroamphetamine", "dextrocardia", "dextrorotation", "dextrose", "dextrousness", "dey", "deys", "dhahran", "dhak", "dhaks", "dhal", "dhals", "dharma", "dharmas", "dharna", "dharnas", "dhobi", "dhobis", "dhole", "dholes", "dhoolies", "dhooly", "dhoti", "dhotis", "dhow", "dhows", "dhurrie", "diabase", "diabases", "diabetes", "diabetic", "diabetics", "diablerie", "diableries", "diablery", "diabolism", "diabolisms", "diabolist", "diabolo", "diacaustic", "diacetylmorphine", "diachylon", "diachylons", "diacid", "diaconate", "diaconates", "diaconicon", "diaconicons", "diacritic", "diacritics", "diadem", "diadems", "diaeresis", "diagenesis", "diageotropism", "diaghilev", "diaglyph", "diaglyphs", "diagnosing", "diagnosis", "diagnostic", "diagnostician", "diagnosticians", "diagnostics", "diagonal", "diagonals", "diagram", "diagrams", "diagraph", "diagraphs", "diakinesis", "dial", "dialect", "dialectic", "dialectician", "dialecticians", "dialecticism", "dialectics", "dialectologist", "dialectologists", "dialectology", "dialects", "dialing", "diallage", "diallages", "dialler", "diallers", "dialog", "dialogist", "dialogists", "dialogite", "dialogue", "dialogues", "dials", "dialyser", "dialysers", "dialysis", "dialyzer", "dialyzers", "diamagnet", "diamagnetism", "diamagnets", "diameter", "diameters", "diamond", "diamondback", "diamonds", "diamorphine", "dian", "diana", "diane", "dianetics", "dianne", "dianthus", "dianthuses", "diapason", "diapasons", "diapause", "diapauses", "diapedesis", "diapente", "diapentes", "diaper", "diapers", "diaphaneity", "diaphanometer", "diaphanometers", "diaphanousness", "diaphone", "diaphones", "diaphoresis", "diaphoretic", "diaphoretics", "diaphototropism", "diaphragm", "diaphragms", "diaphysis", "diapir", "diapirs", "diapophysis", "diapositive", "diarchies", "diarchy", "diaries", "diarist", "diarists", "diarrhea", "diarrhoea", "diarthrosis", "diary", "dias", "diascope", "diascopes", "diaspora", "diasporas", "diaspore", "diastase", "diastasis", "diastema", "diaster", "diastole", "diastoles", "diastrophism", "diastyle", "diastyles", "diatessaron", "diatessarons", "diathermancy", "diathermy", "diathesis", "diatom", "diatomite", "diatoms", "diatribe", "diatribes", "diatropism", "diaz", "diazepam", "diazo", "diazoes", "diazonium", "diazos", "dibber", "dibbers", "dibble", "dibbles", "dibranchiate", "dicast", "dicasteries", "dicastery", "dicasts", "dice", "dicentra", "dicentras", "dicer", "dicers", "dices", "dichasium", "dichlorodiphenyltrichloroethane", "dichogamies", "dichogamy", "dichotomies", "dichotomist", "dichotomists", "dichotomy", "dichroism", "dichroite", "dichromat", "dichromate", "dichromatism", "dichromats", "dichroscope", "dichroscopes", "dicing", "dicings", "dick", "dickcissel", "dickcissels", "dickens", "dickenses", "dicker", "dickers", "dickey", "dickeys", "dickie", "dickies", "dickinson", "dicks", "dicky", "diclinism", "dicot", "dicots", "dicotyledon", "dicotyledons", "dicrotism", "dict", "dicta", "dictaphone", "dictaphones", "dictate", "dictates", "dictation", "dictations", "dictator", "dictators", "dictatorship", "dictatorships", "diction", "dictionaries", "dictionary", "dictions", "dictograph", "dictum", "dictums", "dicynodont", "dicynodonts", "didacticism", "didactics", "didapper", "didappers", "diddler", "diddlers", "diderot", "didgeridoo", "didgeridoos", "didicoy", "didicoys", "didn t", "dido", "didoes", "didos", "didrachm", "didrachms", "didymium", "die", "die hard", "die hards", "dieback", "diebacks", "diego", "dieldrin", "dielectric", "dielectrics", "diencephalon", "diencephalons", "diene", "dienes", "dieppe", "dieresis", "dies", "diesel", "diesel electric", "diesel hydraulic", "dieselization", "diesels", "dieses", "diesis", "diestrus", "diet", "dietary", "dieter", "dieters", "dietetics", "dietician", "dieticians", "dieting", "dietitian", "dietitians", "dietrich", "diets", "difference", "differences", "differentia", "differential", "differentials", "differentiation", "differentiations", "differentiator", "differentiators", "difficulties", "difficulty", "diffidence", "diffraction", "diffractions", "diffractometer", "diffractometers", "diffusedness", "diffuseness", "diffuser", "diffusers", "diffusibility", "diffusion", "diffusions", "diffusiveness", "diffusivity", "dig", "digamies", "digamma", "digammas", "digamy", "digastric", "digby", "digest", "digester", "digesters", "digestibility", "digestif", "digestion", "digestions", "digestive", "digestives", "digests", "digger", "diggers", "digging", "diggings", "digit", "digital", "digitalin", "digitalisation", "digitalization", "digitals", "digitation", "digitations", "digitigrade", "digitisation", "digitization", "digitizer", "digitizers", "digits", "diglot", "diglots", "diglyph", "diglyphs", "dignitaries", "dignitary", "dignities", "dignity", "digraph", "digraphs", "digression", "digressions", "digs", "dihedral", "dihedrals", "dihedron", "dihedrons", "dihybrid", "dihybrids", "dijon", "dik dik", "dik diks", "dika", "dikas", "dike", "diker", "dikers", "dikes", "dikkop", "dikkops", "diktat", "diktats", "dilaceration", "dilapidation", "dilapidator", "dilapidators", "dilatability", "dilatancy", "dilatant", "dilatation", "dilatations", "dilater", "dilaters", "dilation", "dilations", "dilator", "dilatoriness", "dilators", "dildo", "dildoes", "dildos", "dilemma", "dilemmas", "dilettante", "dilettantes", "dilettantism", "diligence", "diligences", "dill", "dillies", "dills", "dilly", "diluent", "diluents", "diluteness", "diluting", "dilution", "dilutions", "diluvium", "diluviums", "dim out", "dimaggio", "dimashq", "dime", "dimension", "dimensions", "dimer", "dimerism", "dimers", "dimes", "dimeter", "dimeters", "dimethyl", "dimidiation", "dimidiations", "diminuendo", "diminuendoes", "diminuendos", "diminution", "diminutions", "diminutive", "diminutiveness", "diminutives", "dimitry", "dimity", "dimmer", "dimmers", "dimness", "dimorph", "dimorphism", "dimorphs", "dimple", "dimples", "dimwit", "dimwits", "din", "dinah", "dinanderie", "dinar", "dinars", "dindle", "dindles", "diner", "diners", "dines", "dinesen", "dinette", "dinettes", "ding", "ding dong", "ding dongs", "dingbat", "dingbats", "dinge", "dinges", "dingey", "dingeys", "dinghies", "dinghy", "dinginess", "dingle", "dingles", "dingo", "dingoes", "dings", "dingus", "dinguses", "dining", "dinitrobenzene", "dinmont", "dinmonts", "dinner", "dinner dance", "dinner dances", "dinners", "dinoceras", "dinoflagellate", "dinoflagellates", "dinosaur", "dinosaurs", "dinothere", "dinotheres", "dins", "dint", "dints", "diocesan", "diocesans", "diocese", "dioceses", "diocletian", "diode", "diodes", "dioestrus", "dioestruses", "diogenes", "diomedes", "dione", "dionne", "dionysia", "dionysius", "dionysus", "diophantus", "diopside", "dioptase", "diopter", "diopters", "dioptre", "dioptres", "dioptrics", "dior", "diorama", "dioramas", "diorite", "diorthosis", "diosgenin", "dioxan", "dioxane", "dioxide", "dioxides", "dioxin", "dip", "dipeptide", "diphenyl", "diphtheria", "diphthong", "diphthongs", "diplegia", "diplococcus", "diploe", "diploes", "diploid", "diploma", "diplomacies", "diplomacy", "diplomas", "diplomat", "diplomate", "diplomates", "diplomatics", "diplomatist", "diplomatists", "diplomats", "diplont", "diplonts", "diplopia", "dipnoan", "dipnoans", "dipodidae", "dipodies", "dipody", "dipole", "dipoles", "dipper", "dippers", "diprotodont", "diprotodonts", "dips", "dipso", "dipsomania", "dipsomaniac", "dipsomaniacs", "dipsos", "diptera", "dipteran", "dipterans", "dipterocarp", "dipterocarpaceae", "dipterocarps", "dipteros", "dipteroses", "diptych", "diptychs", "dirac", "direction", "directions", "directive", "directives", "directivity", "directness", "directoire", "director", "director general", "directorate", "directorates", "directories", "directors", "directorship", "directorships", "directory", "directress", "directresses", "directrix", "directrixes", "direfulness", "direness", "dirge", "dirges", "dirham", "dirhams", "dirhem", "dirhems", "dirigible", "dirigibles", "dirk", "dirks", "dirndl", "dirndls", "dirt", "dirtiness", "dirts", "dirtying", "dis", "disabilities", "disability", "disabled", "disablement", "disablements", "disaccharide", "disaccharides", "disaccord", "disadvantage", "disadvantageousness", "disadvantages", "disaffectedness", "disaffection", "disaffiliation", "disaffiliations", "disaffirmance", "disaffirmation", "disaffirmations", "disafforestation", "disafforestment", "disagreeability", "disagreeableness", "disagreement", "disagreements", "disallowance", "disallowances", "disannuller", "disannullers", "disannulment", "disannulments", "disappearance", "disappearances", "disappearing", "disappointing", "disappointment", "disappointments", "disapprobation", "disapprobations", "disapproval", "disapprovals", "disarmament", "disarmer", "disarmers", "disarming", "disarrangement", "disarrangements", "disarray", "disarrays", "disarticulation", "disassembly", "disassociation", "disassociations", "disaster", "disasters", "disavowal", "disavowals", "disbandment", "disbandments", "disbarment", "disbarments", "disbelief", "disbeliefs", "disbeliever", "disbelievers", "disbursal", "disbursals", "disbursement", "disbursements", "disc", "discant", "discants", "discard", "discarding", "discards", "disceptation", "disceptations", "discerner", "discerners", "discernment", "discharge", "discharger", "dischargers", "discharges", "disciple", "disciples", "discipleship", "discipleships", "disciplinant", "disciplinants", "disciplinarian", "disciplinarians", "discipline", "discipliner", "discipliners", "disciplines", "discission", "discissions", "disclaimer", "disclaimers", "disclamation", "disclamations", "disclosure", "disclosures", "disco", "discobolus", "discographer", "discographers", "discographies", "discography", "discoid", "discoloration", "discolorations", "discolouration", "discolourations", "discomfit", "discomfited", "discomfits", "discomfiture", "discomfitures", "discomfort", "discomforts", "discommodities", "discommodity", "discomposure", "discomycete", "discomycetes", "disconcertion", "disconcertions", "disconcertment", "disconcertments", "disconformities", "disconformity", "disconnectedness", "disconnection", "disconnections", "disconsolateness", "disconsolation", "discontent", "discontentedness", "discontentment", "discontentments", "discontents", "discontinuance", "discontinuances", "discontinuation", "discontinuities", "discontinuity", "discophile", "discophiles", "discord", "discordance", "discordances", "discordancies", "discordancy", "discords", "discos", "discotheque", "discotheques", "discount", "discountenance", "discountenances", "discounter", "discounters", "discounts", "discouragement", "discouragements", "discourse", "discourser", "discourses", "discourteousness", "discourtesies", "discourtesy", "discoverer", "discoverers", "discoveries", "discoverture", "discovertures", "discovery", "discredit", "discredits", "discreetness", "discrepancies", "discrepancy", "discreteness", "discretion", "discretions", "discriminant", "discriminants", "discrimination", "discriminations", "discriminator", "discriminators", "discs", "discursion", "discursions", "discursiveness", "discus", "discuses", "discuss", "discussion", "discussions", "discutient", "disdain", "disdainfulness", "disdains", "disease", "diseasedness", "diseases", "disembarkation", "disembarkations", "disembarkment", "disembarkments", "disembarrassment", "disembarrassments", "disembodiment", "disembodiments", "disemboguement", "disemboguements", "disembowelment", "disembowelments", "disenchanter", "disenchanters", "disenchantment", "disenchantments", "disendowment", "disenfranchisement", "disengagedness", "disengagement", "disengagements", "disentail", "disentails", "disentanglement", "disentanglements", "disenthrallment", "disenthralment", "disenthralments", "disentrancement", "disequilibrium", "disestablishment", "disesteem", "disesteems", "diseur", "diseurs", "diseuse", "diseuses", "disfavor", "disfavors", "disfavour", "disfavourer", "disfavourers", "disfavours", "disfigurement", "disfigurements", "disfranchisement", "disfranchisements", "disfurnishment", "disgorgement", "disgorgements", "disgrace", "disgracefulness", "disgracer", "disgracers", "disgraces", "disgregation", "disgruntlement", "disguise", "disguisedness", "disguiser", "disguisers", "disguises", "disgust", "disgustedness", "disgustingness", "disgusts", "dish", "dishabille", "dishabilles", "disharmonies", "disharmony", "disherison", "disheritor", "disheritors", "dishes", "dishevelment", "dishful", "dishfuls", "dishonesties", "dishonesty", "dishonor", "dishonorableness", "dishonorer", "dishonorers", "dishonors", "dishonour", "dishonourableness", "dishonourer", "dishonourers", "dishonours", "dishpan", "dishpans", "dishwasher", "dishwashers", "disillusion", "disillusionment", "disillusionments", "disillusions", "disimprisonment", "disincentive", "disincentives", "disinclination", "disinclinations", "disinfectant", "disinfectants", "disinfection", "disinfections", "disinfector", "disinfectors", "disinfestation", "disinfestations", "disinflation", "disingenuousness", "disinheritance", "disinheritances", "disinhibition", "disinhibitions", "disintegration", "disintegrations", "disintegrator", "disintegrators", "disinterest", "disinterestedness", "disinterment", "disinterments", "disinvestment", "disinvestments", "disjection", "disjections", "disjointedness", "disjunct", "disjunction", "disjunctions", "disjunctive", "disjunctives", "disjuncture", "disjunctures", "disjune", "disjunes", "disk", "diskette", "diskettes", "disks", "dislike", "dislikes", "dislocation", "dislocations", "dislodgement", "dislodgements", "dislodgment", "dislodgments", "disloyalties", "disloyalty", "dismality", "dismalness", "dismantlement", "dismantler", "dismantlers", "dismantling", "dismastment", "dismastments", "dismay", "dismayedness", "dismays", "dismemberment", "dismemberments", "dismissal", "dismissals", "dismount", "dismounts", "disney", "disneyland", "disobedience", "disobligingness", "disoperation", "disoperations", "disorder", "disorderliness", "disorders", "disorganization", "disorientation", "disorientations", "disowning", "disownment", "disownments", "disparagement", "disparagements", "disparager", "disparagers", "disparate", "disparateness", "disparates", "disparities", "disparity", "dispassion", "dispassionateness", "dispatch", "dispatcher", "dispatchers", "dispatches", "dispensability", "dispensableness", "dispensaries", "dispensary", "dispensation", "dispensations", "dispensator", "dispensatories", "dispensators", "dispensatory", "dispenser", "dispensers", "dispensing", "dispersal", "dispersals", "dispersant", "dispersants", "disperser", "dispersers", "dispersion", "dispersions", "dispersoid", "dispersoids", "dispiritedness", "dispiteousness", "displacement", "displacements", "display", "displayer", "displayers", "displays", "displeasingness", "displeasure", "displeasures", "disport", "disports", "disposability", "disposable", "disposableness", "disposal", "disposals", "dispose", "disposer", "disposers", "disposes", "disposition", "dispositions", "dispossession", "dispossessions", "dispossessor", "dispossessors", "disposure", "disposures", "dispraise", "dispraiser", "dispraisers", "dispraises", "disproof", "disproofs", "disproportion", "disproportionableness", "disproportionateness", "disproportions", "disproving", "disputability", "disputableness", "disputant", "disputants", "disputation", "disputations", "disputatiousness", "dispute", "disputer", "disputers", "disputes", "disqualification", "disqualifications", "disqualifying", "disquiet", "disquiets", "disquietude", "disquisition", "disquisitions", "disraeli", "disregard", "disregards", "disrelish", "disrelishes", "disrepair", "disreputability", "disreputableness", "disreputation", "disrepute", "disrespect", "disrespectfulness", "disrupter", "disrupters", "disruption", "disruptions", "disruptor", "disruptors", "dissatisfaction", "dissatisfactoriness", "dissection", "dissections", "dissector", "dissectors", "disseisin", "disseisins", "disseisor", "disseisors", "disseizin", "disseizins", "disseizor", "disseizors", "dissemblance", "dissemblances", "dissembler", "dissemblers", "dissembling", "dissemination", "disseminations", "disseminator", "disseminators", "disseminule", "disseminules", "dissension", "dissensions", "dissent", "dissenter", "dissenters", "dissentient", "dissentients", "dissents", "dissepiment", "dissepiments", "dissertation", "dissertations", "dissertator", "dissertators", "disservice", "disservices", "disseverance", "disseverances", "disseveration", "disseverations", "disseverment", "disseverments", "dissidence", "dissidences", "dissident", "dissidents", "dissilience", "dissimilarities", "dissimilarity", "dissimilation", "dissimilations", "dissimilitude", "dissimulation", "dissimulations", "dissimulator", "dissimulators", "dissipation", "dissipations", "dissociability", "dissociableness", "dissociality", "dissociation", "dissociations", "dissolubility", "dissolubleness", "dissoluteness", "dissolution", "dissolutions", "dissolvability", "dissolvableness", "dissolve", "dissolvent", "dissolvents", "dissolves", "dissonance", "dissonances", "dissonancies", "dissonancy", "dissuader", "dissuaders", "dissuasion", "dissuasions", "dissyllable", "dissyllables", "dissymmetry", "distaff", "distaffs", "distance", "distances", "distantness", "distaste", "distastefulness", "distastes", "distemper", "distemperature", "distemperatures", "distempers", "distensibility", "distension", "distensions", "distention", "distentions", "distich", "distichs", "distilland", "distillands", "distillate", "distillates", "distillation", "distillations", "distiller", "distilleries", "distillers", "distillery", "distinction", "distinctions", "distinctiveness", "distinctness", "distinguisher", "distinguishers", "distinguishment", "distortion", "distortions", "distractedness", "distractibility", "distraction", "distractions", "distrail", "distrails", "distrainee", "distrainees", "distrainer", "distrainers", "distrainment", "distrainments", "distrainor", "distrainors", "distraint", "distraints", "distress", "distresses", "distressfulness", "distributaries", "distributary", "distributee", "distributees", "distributer", "distributers", "distribution", "distributions", "distributive", "distributiveness", "distributor", "distributors", "district", "districts", "distringas", "distringases", "distrust", "distruster", "distrusters", "distrustfulness", "distrusts", "disturbance", "disturbances", "disturber", "disturbers", "disulfiram", "disulphate", "disulphates", "disulphide", "disulphides", "disunion", "disunionist", "disunionists", "disunions", "disunities", "disunity", "disuse", "disuses", "disutilities", "disutility", "disvalue", "disvalues", "disyllabism", "disyllable", "disyllables", "dit", "dita", "ditas", "ditch", "ditcher", "ditchers", "ditches", "ditheism", "ditheist", "ditheists", "dither", "dithering", "dithers", "dithionate", "dithionates", "dithyramb", "dithyrambs", "ditriglyph", "ditriglyphs", "dits", "dittander", "dittanders", "dittanies", "dittany", "ditties", "ditto", "dittography", "dittos", "ditty", "diuresis", "diuretic", "diuretics", "diurnal", "diurnals", "div", "diva", "divagation", "divagations", "divalent", "divalents", "divali", "divan", "divans", "divarication", "divarications", "divas", "dive", "dive bombing", "dived", "diver", "divergence", "divergences", "divergencies", "divergency", "divers", "diverseness", "diversification", "diversion", "diversionist", "diversionists", "diversions", "diversities", "diversity", "diverticulitis", "diverticulosis", "diverticulum", "divertimento", "divertimentos", "divertissement", "divertissements", "dives", "divestiture", "divi", "divide", "dividend", "dividends", "divider", "dividers", "divides", "divies", "divination", "divinations", "divine", "divineness", "diviner", "diviners", "divines", "diving", "divings", "divinities", "divinity", "divisibilities", "divisibility", "divisibleness", "division", "divisionism", "divisions", "divisiveness", "divisor", "divisors", "divorce", "divorcement", "divorcements", "divorcer", "divorcers", "divorces", "divot", "divots", "divs", "divulgation", "divulgations", "divulgement", "divulgence", "divulgences", "divulsion", "divulsions", "divvies", "divvy", "diwali", "diwan", "diwans", "dixie", "dixieland", "dixies", "dixon", "dixy", "dizziness", "djakarta", "djebel", "djebels", "djellabah", "djellabahs", "djibbah", "djibbahs", "djibouti", "djinni", "do all", "do gooder", "do gooders", "do goodism", "do it yourself", "do it yourselfer", "do it yourselfers", "do nothing", "do nothingism", "doab", "doabs", "doater", "doaters", "dobber", "dobber in", "dobbers", "dobbies", "dobbin", "dobbins", "dobby", "dobra", "dobras", "dobro", "dobros", "doc", "docent", "docents", "docetism", "docility", "dock", "dockage", "dockages", "docker", "dockers", "docket", "dockets", "docking", "dockings", "dockland", "docks", "dockside", "docksides", "dockyard", "dockyards", "docs", "doctor", "doctorate", "doctorates", "doctors", "doctorship", "doctorships", "doctrinaire", "doctrinaires", "doctrinairism", "doctrine", "doctrines", "docudrama", "docudramas", "document", "documentaries", "documentary", "documentation", "documentations", "documents", "dod", "dodder", "dodderer", "dodderers", "dodders", "doddle", "doddles", "dodecagon", "dodecagons", "dodecahedron", "dodecahedrons", "dodecaphonism", "dodecaphonist", "dodecaphonists", "dodecasyllabic", "dodecasyllable", "dodecasyllables", "dodge", "dodgem", "dodgems", "dodger", "dodgers", "dodges", "dodging", "dodgson", "dodo", "dodoes", "dodoma", "dodonian", "dodos", "dods", "doe", "doek", "doeks", "doer", "doers", "does", "doesn t", "doffer", "doffers", "dog", "dog s ear", "dog s tongue", "dog catcher", "dog catchers", "dog ear", "dog eat dog", "dog end", "dog ends", "dogbane", "dogbanes", "dogberries", "dogberry", "dogcart", "dogcarts", "doge", "doges", "dogeship", "dogfish", "dogfishes", "doggedness", "dogger", "doggerel", "doggeries", "doggers", "doggery", "doggie", "doggies", "doggishness", "doggy", "dogie", "dogma", "dogman", "dogmas", "dogmatics", "dogmatiser", "dogmatisers", "dogmatism", "dogmatist", "dogmatists", "dogmatizer", "dogmatizers", "dogs", "dogshore", "dogshores", "dogsled", "dogsleds", "dogtooth", "dogtrot", "dogtrots", "dogvane", "dogvanes", "dogwood", "dogwoods", "dogy", "doh", "dohs", "doilies", "doily", "doing", "doings", "doit", "doits", "dojo", "dojos", "dolby", "doldrums", "dole", "dolefulness", "dolerite", "doles", "dolichocephalic", "dolichocephalism", "dolichocephaly", "dolichos", "dolichoses", "dolin", "doline", "dolium", "doll", "dollar", "dollars", "dollhouse", "dollies", "dollishness", "dollop", "dollops", "dolls", "dolly", "dolman", "dolmans", "dolmas", "dolmen", "dolmens", "dolomite", "dolomites", "dolomitization", "dolomitizations", "dolor", "dolores", "dolorousness", "dolors", "dolour", "dolours", "dolphin", "dolphins", "dolt", "doltishness", "dolts", "dom", "domain", "domains", "dome", "domes", "domestic", "domestication", "domestications", "domesticator", "domesticators", "domesticity", "domestics", "domicile", "domiciles", "domiciliation", "domiciliations", "dominance", "dominances", "dominant", "dominants", "domination", "dominations", "dominator", "dominators", "dominee", "dominees", "domingo", "dominic", "dominica", "dominican", "dominicans", "dominick", "dominie", "dominies", "dominion", "dominions", "domino", "dominoes", "dominos", "dominus", "domitian", "don", "don t", "don t know", "don t knows", "dona", "donald", "donas", "donatello", "donation", "donations", "donatist", "donative", "donatives", "donator", "donatories", "donators", "donatory", "donatus", "donau", "doncaster", "donee", "donees", "donegal", "donets", "donetsk", "dong", "donga", "dongas", "dongs", "donizetti", "donjon", "donjons", "donkey", "donkey work", "donkeys", "donna", "donnie", "donnism", "donor", "donors", "dons", "donut", "donuts", "donzel", "doob", "doodad", "doodads", "doodah", "doodahs", "doodle", "doodlebug", "doodlebugs", "doodler", "doodlers", "doodles", "doohickey", "doohickeys", "dook", "dooks", "doolie", "doolies", "doolittle", "doom", "doomed", "dooms", "doomsday", "doomsdays", "doomwatcher", "doomwatchers", "door", "doorbell", "doorbells", "doorframe", "doorframes", "doorhandle", "doorhandles", "doorjamb", "doorjambs", "doorknob", "doorknobs", "doormat", "doormats", "doornail", "doornails", "doorpost", "doorposts", "doors", "doorstep", "doorsteps", "doorstop", "doorstopper", "doorstoppers", "doorstops", "doorway", "doorways", "dop", "dopa", "dopamine", "dopant", "dopants", "dopatta", "dopattas", "dope", "doper", "dopers", "dopes", "doppler", "dops", "dor", "dora", "dorado", "dorados", "doras", "dorcas", "dorchester", "dordogne", "dordrecht", "doreen", "dorian", "doric", "dories", "doris", "dork", "dorking", "dorks", "dorm", "dormancy", "dormer", "dormers", "dormitories", "dormitory", "dormobile", "dormobiles", "dormouse", "dorms", "dornick", "doronicum", "dorothea", "dorothy", "dorp", "dorps", "dorr", "dorris", "dorrs", "dors", "dorse", "dorser", "dorsers", "dorses", "dorset", "dorsiflexion", "dorsiventrality", "dorsum", "dorsums", "dorter", "dorters", "dortmund", "dory", "dos", "dosage", "dosages", "dose", "doses", "dosimeter", "dosimeters", "dosimetry", "doss", "dossal", "dossals", "dosser", "dossers", "dosses", "dossier", "dossiers", "dossil", "dossils", "dostoevsky", "dot", "dotage", "dotages", "dotard", "dotards", "dotation", "dotations", "doter", "doters", "dotes", "dots", "dotterel", "dotterels", "dottie", "dottiness", "dottle", "dottles", "douai", "douala", "douane", "double", "double check", "double checks", "double cross", "double crosser", "double crossers", "double crosses", "double crossing", "double dealer", "double dealers", "double dealing", "double decker", "double deckers", "double facedness", "double header", "double headers", "double mindedness", "double spacing", "double talk", "doubled", "doubleness", "doubler", "doublers", "doubles", "doublespeak", "doublet", "doubleton", "doubletons", "doubletree", "doubletrees", "doublets", "doubling", "doublings", "doubloon", "doubloons", "doublure", "doublures", "doubs", "doubt", "doubter", "doubters", "doubtfulness", "doubts", "douc", "douceness", "doucepere", "douceur", "douceurs", "douche", "douches", "doucs", "doug", "dougal", "dough", "doughiness", "doughnut", "doughnuts", "doughs", "doughtiness", "douglas", "douglas home", "doukhobor", "doukhobors", "douma", "doumas", "doup", "doups", "doura", "douras", "dourine", "dourness", "douro", "douroucouli", "douroucoulis", "douse", "douser", "dousers", "douses", "dousing", "douter", "douters", "dove", "dovecote", "dovecotes", "dovekie", "dovekies", "dover", "dovers", "doves", "dovetail", "dovetails", "dowager", "dowagers", "dowdies", "dowdiness", "dowding", "dowdy", "dowdyism", "dowel", "dowels", "dower", "dowers", "dowitcher", "dowitchers", "dowland", "down", "down and out", "down and outs", "down easter", "downbeat", "downbeats", "downcome", "downcomer", "downcomers", "downcomes", "downer", "downers", "downfall", "downfalls", "downgrade", "downgrades", "downheartedness", "downhill", "downhills", "downiness", "downpatrick", "downpipe", "downpipes", "downpour", "downpours", "downright", "downrightness", "downs", "downsizing", "downspout", "downspouts", "downstage", "downstairs", "downstate", "downstroke", "downstrokes", "downswing", "downswings", "downtime", "downtimes", "downtrend", "downtrends", "downturn", "downturns", "downwardness", "dowries", "dowry", "dowse", "dowser", "dowsers", "dowses", "dowsing", "dowson", "doxies", "doxographer", "doxographers", "doxologies", "doxology", "doxy", "doyen", "doyenne", "doyennes", "doyens", "doyle", "doyley", "doyleys", "doylies", "doyly", "doze", "dozen", "dozens", "dozer", "dozers", "dozes", "doziness", "drab", "drabbet", "drabbler", "drabblers", "drabness", "drabs", "drachm", "drachma", "drachmas", "drachms", "draco", "dracone", "dracones", "dracula", "dracunculus", "dracunculuses", "draff", "draffs", "draft", "draftee", "draftees", "drafter", "drafters", "draftiness", "drafting", "drafts", "draftsman", "draftsmanship", "drag", "dragline", "draglines", "dragoman", "dragomans", "dragon", "dragoness", "dragonesses", "dragonet", "dragonets", "dragonflies", "dragonfly", "dragonhead", "dragonheads", "dragonnade", "dragonnades", "dragons", "dragoon", "dragoons", "drags", "dragster", "dragsters", "drail", "drails", "drain", "drainage", "drainages", "drainboard", "drainboards", "drainer", "drainers", "drains", "drake", "drakes", "dram", "drama", "dramamine", "dramas", "dramatics", "dramatisation", "dramatisations", "dramatist", "dramatists", "dramatization", "dramatizations", "dramaturge", "dramaturges", "dramaturgist", "dramaturgists", "dramaturgy", "drambuie", "drammock", "drammocks", "drams", "drape", "draper", "draperies", "drapers", "drapery", "drapes", "draught", "draughtboard", "draughtboards", "draughter", "draughters", "draughtiness", "draughts", "draughtsman", "draughty", "dravidian", "draw", "draw sheet", "drawback", "drawbacks", "drawbridge", "drawbridges", "drawee", "drawees", "drawer", "drawers", "drawing", "drawings", "drawl", "drawler", "drawlers", "drawlingness", "drawls", "draws", "dray", "drayage", "drayman", "drays", "drayton", "dread", "dreadfulness", "dreadnaught", "dreadnaughts", "dreadnought", "dreadnoughts", "dreads", "dream", "dreamboat", "dreamboats", "dreamer", "dreamers", "dreaminess", "dreaming", "dreamings", "dreamland", "dreamlands", "dreamlessness", "dreams", "dreariness", "dreck", "dredge", "dredger", "dredgers", "dredges", "dreg", "dregs", "drench", "drencher", "drenchers", "drenches", "drenching", "dresden", "dress", "dressage", "dresser", "dressers", "dresses", "dressiness", "dressing", "dressing down", "dressings", "dressmaker", "dressmakers", "dressmaking", "dreyfus", "dreyfuss", "drib", "dribble", "dribbler", "dribblers", "dribbles", "dribbling", "driblet", "driblets", "dribs", "drier", "driers", "dries", "drift", "driftage", "driftages", "drifter", "drifters", "drifting", "driftpin", "driftpins", "drifts", "drill", "driller", "drillers", "drilling", "drills", "drink", "drinkable", "drinkableness", "drinker", "drinkers", "drinking", "drinkings", "drinks", "drip", "dripping", "drippings", "drips", "drive", "drive in", "drive ins", "drivel", "driveler", "drivelers", "driveller", "drivellers", "drivels", "driver", "drivers", "drives", "driveway", "driveways", "driving", "drizzle", "drizzles", "drogheda", "drogher", "droghers", "drogue", "drogues", "droit", "droits", "drolleries", "drollery", "drollness", "dromedaries", "dromedary", "dromond", "dromonds", "dromos", "drone", "drones", "drongo", "drongoes", "drongos", "droning", "droob", "droobs", "drool", "drools", "droop", "droopiness", "droops", "drop", "drop kicker", "drop kickers", "droplet", "dropper", "droppers", "dropping", "droppings", "drops", "dropsy", "drosera", "droseras", "droshkies", "droshky", "droskies", "drosky", "drosometer", "drosometers", "drosophila", "drosophilas", "dross", "drossiness", "drought", "droughtiness", "droughts", "drove", "drover", "drovers", "droves", "drowner", "drowners", "drowse", "drowses", "drowsiness", "drub", "drubbing", "drubbings", "drubs", "drudge", "drudger", "drudgeries", "drudgers", "drudgery", "drudges", "drug", "drugget", "druggets", "drugging", "druggist", "druggists", "drugs", "druid", "druidism", "druids", "drum", "drumbeat", "drumbeats", "drumfire", "drumfish", "drumfishes", "drumhead", "drumheads", "drumlin", "drumlins", "drummer", "drummers", "drumming", "drummock", "drummocks", "drummond", "drums", "drumstick", "drumsticks", "drunk", "drunkard", "drunkards", "drunkenness", "drunkometer", "drunkometers", "drunks", "drupe", "drupelet", "drupelets", "drupes", "druse", "druses", "druthers", "druze", "dry", "dry blowing", "dryad", "dryades", "dryads", "dryden", "dryer", "dryers", "dryness", "drysalter", "drysalteries", "drysalters", "drysaltery", "drysdale", "duad", "duads", "dual", "duala", "dualism", "dualisms", "dualist", "dualists", "dualities", "duality", "duals", "duane", "duarchies", "duarchy", "dub", "dubai", "dubbin", "dubbing", "dubbings", "dubbins", "dubcek", "dubiety", "dubiousness", "dubitation", "dubitations", "dublin", "dubliners", "dubois", "dubonnet", "dubrovnik", "dubs", "dubuffet", "ducat", "ducatoon", "ducatoons", "ducats", "duce", "duces", "duchamp", "duchess", "duchesse", "duchesses", "duchies", "duchy", "duck", "duckbill", "duckbills", "ducker", "duckers", "duckies", "ducking", "duckings", "duckling", "ducklings", "ducks", "duckweed", "duckweeds", "ducky", "duct", "ductileness", "ductility", "ducts", "dud", "dude", "dudeen", "dudeens", "dudes", "dudgeon", "dudgeons", "dudley", "duds", "due", "duel", "dueller", "duellers", "duellist", "duellists", "duello", "duellos", "duels", "duenna", "duennas", "dues", "duet", "duets", "duettist", "duettists", "duff", "duffel", "duffer", "duffers", "duffle", "duffs", "dufy", "dug", "dugong", "dugongs", "dugout", "dugouts", "dugs", "duiker", "duikers", "duisburg", "dukas", "duke", "dukedom", "dukedoms", "dukes", "dulciana", "dulcianas", "dulcie", "dulcification", "dulcimer", "dulcimers", "dulcinea", "dulia", "dullard", "dullards", "dulles", "dullness", "dullsville", "dulness", "dulocracies", "dulocracy", "dulosis", "dulse", "dulses", "duluth", "duma", "dumas", "dumb cane", "dumbarton", "dumbbell", "dumbbells", "dumbness", "dumbwaiter", "dumbwaiters", "dumdum", "dumdums", "dumfries", "dumka", "dummies", "dummkopf", "dummkopfs", "dummy", "dumortierite", "dump", "dumper", "dumpers", "dumpiness", "dumping", "dumpishness", "dumpling", "dumplings", "dumps", "dun", "dunbar", "duncan", "dunce", "dunces", "dunch", "dunches", "dundalk", "dundee", "dunder", "dunderhead", "dunderheadedness", "dunderheads", "dunders", "dune", "dunedin", "dunes", "dunfermline", "dung", "dungaree", "dungarees", "dungeness", "dungeon", "dungeons", "dunghill", "dunghills", "dungs", "duniewassal", "duniewassals", "dunite", "duniwassal", "duniwassals", "dunk", "dunker", "dunkerque", "dunkirk", "dunks", "dunlin", "dunlins", "dunlop", "dunnage", "dunnages", "dunnakin", "dunnakins", "dunnies", "dunnite", "dunno", "dunnock", "dunnocks", "dunny", "dunoon", "duns", "dunsany", "dunsinane", "dunstable", "dunstan", "dunt", "dunts", "duo", "duodecimal", "duodecimo", "duodecimos", "duodenitis", "duodenum", "duodenums", "duologue", "duologues", "duomo", "duomos", "duopolies", "duopoly", "duos", "duotone", "duotones", "dupability", "dupatta", "dupattas", "dupe", "duper", "duperies", "dupers", "dupery", "dupes", "dupion", "dupions", "duplet", "duplets", "duplex", "duplexer", "duplexers", "duplexes", "duplicate", "duplicates", "duplicating", "duplication", "duplications", "duplicator", "duplicators", "duplicature", "duplicatures", "duplicities", "duplicity", "dupondius", "dupondiuses", "duppies", "duppy", "dura", "durability", "durableness", "durables", "duralumin", "duramen", "duramens", "durance", "durante", "duras", "duration", "durations", "durative", "duratives", "durban", "durbar", "durbars", "duress", "duresses", "durex", "durham", "durian", "durians", "durion", "durions", "durmast", "durmasts", "duro", "duros", "durra", "durras", "durrell", "durrie", "durum", "durums", "durzi", "durzis", "dushanbe", "dusk", "duskiness", "dusks", "dust", "dust bath", "dust baths", "dust up", "dust ups", "dustbin", "dustbins", "duster", "dusters", "dustin", "dustiness", "dusting", "dustman", "dusts", "dutch", "dutches", "dutchman", "duteousness", "duties", "dutifulness", "duty", "duumvir", "duumvirate", "duumvirates", "duumvirs", "duvet", "duvets", "duvetyn", "duvetynes", "duvetyns", "dux", "duxes", "duyker", "duykers", "dvandva", "dvandvas", "dwale", "dwales", "dwalm", "dwalms", "dwarf", "dwarfishness", "dwarfism", "dwarfs", "dweeb", "dweebs", "dwell", "dweller", "dwellers", "dwelling", "dwellings", "dwells", "dwight", "dwindling", "dyad", "dyadic", "dyads", "dyak", "dyaks", "dyarchies", "dyarchy", "dybbuk", "dybbuks", "dye", "dye works", "dyeing", "dyeings", "dyer", "dyer s broom", "dyer s greenweed", "dyer s weed", "dyers", "dyes", "dyestuff", "dyestuffs", "dyfed", "dying", "dyings", "dyke", "dykes", "dylan", "dynamic", "dynamics", "dynamism", "dynamist", "dynamists", "dynamite", "dynamiter", "dynamiters", "dynamites", "dynamo", "dynamogenesis", "dynamometer", "dynamometers", "dynamometry", "dynamos", "dynamotor", "dynamotors", "dynast", "dynasties", "dynasts", "dynasty", "dynatron", "dynatrons", "dyne", "dynes", "dynode", "dynodes", "dysarthria", "dyscrasia", "dysentery", "dysfunction", "dysfunctions", "dysgenics", "dysgraphia", "dyskinesia", "dyslexia", "dysmenorrhea", "dysmenorrhoea", "dyspareunia", "dyspathy", "dyspepsia", "dyspeptic", "dyspeptics", "dysphagia", "dysphasia", "dysphemism", "dysphemisms", "dysphonia", "dysphoria", "dysplasia", "dyspnea", "dyspnoea", "dyspraxia", "dysprosium", "dysrhythmia", "dysteleologist", "dysteleologists", "dysteleology", "dysthymia", "dystonia", "dystonias", "dystopia", "dystopias", "dystrophy", "dysuria", "dytiscid", "dytiscids", "dziggetai", "dziggetais", "dzo", "dzos", "e boat", "e boats", "e mail", "eager", "eagerness", "eagle", "eagle hawk", "eagles", "eaglet", "eaglets", "eaglewood", "eaglewoods", "eagre", "eagres", "ealdorman", "ealing", "eanling", "ear", "ear shell", "earache", "earaches", "earbash", "earbashes", "earbob", "earbobs", "eardrop", "eardrops", "eardrum", "eardrums", "earflap", "earflaps", "earful", "earfuls", "earhart", "earing", "earings", "earl", "earlap", "earlaps", "earldom", "earldoms", "earliness", "earlobe", "earlobes", "earls", "earmark", "earmarks", "earmuff", "earmuffs", "earner", "earners", "earnest", "earnestness", "earning", "earnings", "earp", "earphone", "earphones", "earpiece", "earpieces", "earplug", "earplugs", "earring", "earrings", "ears", "earth", "earth closet", "earth closets", "eartha", "earthenware", "earthiness", "earthing", "earthliness", "earthling", "earthlings", "earthman", "earthmover", "earthmovers", "earthquake", "earthquakes", "earthrise", "earths", "earthwork", "earthworks", "earthworm", "earthworms", "earwax", "earwig", "earwigs", "ease", "easel", "easels", "easement", "eases", "easiness", "easing", "east", "eastbourne", "easter", "easterlies", "easterling", "easterlings", "easterly", "easterner", "easterners", "eastertide", "easting", "eastings", "eastleigh", "eastman", "easts", "eastward", "eastwards", "eat", "eatable", "eatables", "eatage", "eater", "eateries", "eaters", "eatery", "eath", "eating", "eatings", "eats", "eau", "eaus", "eaves", "eavesdropper", "eavesdroppers", "ebb", "ebbing", "ebbs", "eblis", "ebon", "ebonies", "ebonist", "ebonists", "ebonite", "ebons", "ebony", "eboracum", "ebro", "ebullience", "ebulliences", "ebullioscopy", "ebullition", "ebullitions", "eburnation", "eburnations", "ecad", "ecads", "ecbolic", "ecbolics", "eccentric", "eccentricities", "eccentricity", "eccentrics", "ecchymosis", "eccles", "ecclesia", "ecclesiarch", "ecclesiarchs", "ecclesias", "ecclesiastes", "ecclesiastic", "ecclesiasticism", "ecclesiastics", "ecclesiasticus", "ecclesiolater", "ecclesiolaters", "ecclesiolatry", "ecclesiologist", "ecclesiologists", "ecclesiology", "eccrinology", "ecdysiast", "ecdysiasts", "ecdysis", "echelon", "echelons", "echeveria", "echidna", "echidnas", "echinococcus", "echinoderm", "echinodermata", "echinoderms", "echinoid", "echinoidea", "echinoids", "echinus", "echinuses", "echo", "echoer", "echoers", "echoes", "echogram", "echograms", "echoism", "echolalia", "echolocation", "echopraxia", "echovirus", "echoviruses", "eckhardt", "eclampsia", "eclectic", "eclecticism", "eclectics", "eclipse", "eclipses", "ecliptic", "ecliptics", "eclogite", "eclogue", "eclogues", "eclosion", "ecocide", "ecocides", "ecologist", "ecologists", "ecology", "econometrician", "econometricians", "econometrics", "econometrist", "econometrists", "economics", "economies", "economiser", "economisers", "economist", "economists", "economizer", "economizers", "economy", "ecospecies", "ecosphere", "ecospheres", "ecosystem", "ecosystems", "ecotype", "ecotypes", "ecphonesis", "ecru", "ecstasies", "ecstasy", "ecstatic", "ectasis", "ecthlipsis", "ecthyma", "ectoblast", "ectoblasts", "ectocrine", "ectocrines", "ectoderm", "ectoderms", "ectoenzyme", "ectogenesis", "ectomorph", "ectomorphs", "ectomorphy", "ectoparasite", "ectoparasites", "ectophyte", "ectophytes", "ectopia", "ectoplasm", "ectoplasms", "ectosarc", "ectosarcs", "ectozoa", "ectozoan", "ectozoon", "ectropion", "ectropions", "ectype", "ectypes", "ecu", "ecuador", "ecuadoran", "ecuadorans", "ecuadorian", "ecuadorians", "ecumenicalism", "ecumenicism", "ecumenics", "ecumenism", "ecus", "eczema", "edacity", "edam", "edda", "eddie", "eddies", "eddington", "eddo", "eddoes", "eddy", "eddystone", "edelweiss", "edelweisses", "edema", "edemas", "eden", "edentate", "edgar", "edge", "edgebone", "edgebones", "edgehill", "edger", "edgers", "edges", "edginess", "edging", "edgings", "edh", "edibility", "edible", "edibleness", "edibles", "edict", "edicts", "edie", "edification", "edifice", "edifices", "edifier", "edifiers", "edile", "ediles", "edinburgh", "edison", "edit", "edith", "editing", "edition", "editions", "editor", "editorial", "editorialization", "editorials", "editors", "editorship", "editorships", "editress", "editresses", "edits", "edmonton", "edmund", "edna", "edom", "edomite", "edomites", "educability", "educatability", "education", "educationalist", "educationalists", "educationist", "educationists", "educations", "educator", "educators", "educt", "eduction", "eductions", "eductor", "eductors", "educts", "edulcoration", "edward", "edwardianism", "edwin", "edwina", "eel", "eelgrass", "eelgrasses", "eelpout", "eelpouts", "eels", "eelworm", "eelworms", "eeriness", "effacement", "effacements", "effect", "effecter", "effecters", "effective", "effectiveness", "effector", "effectors", "effects", "effectuality", "effectualness", "effectuation", "effectuations", "effeminacy", "effeminateness", "effendi", "effendis", "effervescence", "effervescences", "effervescencies", "effervescency", "effeteness", "efficaciousness", "efficacy", "efficiencies", "efficiency", "effigies", "effigy", "effleurage", "effleurages", "efflorescence", "efflorescences", "effluence", "effluences", "effluent", "effluents", "effluvium", "effluviums", "efflux", "effluxes", "effort", "effortlessness", "efforts", "effronteries", "effrontery", "effulgence", "effulgences", "effusiometer", "effusiometers", "effusion", "effusions", "effusiveness", "efik", "eft", "efts", "egalitarian", "egalitarianism", "egalitarians", "egbert", "egeria", "egestion", "egg", "egg and anchor", "egg and dart", "egg and tongue", "eggar", "eggars", "eggcup", "eggcups", "egger", "eggers", "egghead", "eggheads", "eggnog", "eggnogs", "eggs", "eggshell", "eggshells", "egham", "egis", "egises", "eglantine", "eglantines", "egmont", "ego", "egocentric", "egocentricities", "egocentricity", "egocentrism", "egoism", "egoist", "egoists", "egomania", "egomaniac", "egomaniacs", "egon", "egos", "egotism", "egotist", "egotists", "egregiousness", "egress", "egresses", "egression", "egressions", "egret", "egrets", "egypt", "egyptian", "egyptians", "egyptologist", "egyptology", "ehrlich", "eider", "eiderdown", "eiderdowns", "eiders", "eidolon", "eiffel", "eigenfunction", "eigenvalue", "eigenvalues", "eiger", "eight", "eighteen", "eighteenmo", "eighteenmos", "eighteens", "eighteenth", "eighteenths", "eighth", "eighths", "eighties", "eightieth", "eightieths", "eightpence", "eightpences", "eights", "eightsome", "eightsomes", "eightvo", "eightvos", "eighty", "eikon", "eikons", "eilat", "eild", "eileen", "eindhoven", "einkorn", "einstein", "einsteinium", "eire", "eirenicon", "eirenicons", "eisenhower", "eisenstadt", "eisenstein", "eisteddfod", "eisteddfods", "ejaculate", "ejaculates", "ejaculation", "ejaculations", "ejection", "ejections", "ejective", "ejectment", "ejectments", "ejector", "ejectors", "ekaterinburg", "ekistics", "elaborateness", "elaboration", "elaborations", "elaborator", "elaborators", "elaine", "elam", "elamite", "elamites", "eland", "elands", "elasmobranch", "elasmobranchs", "elastance", "elastances", "elastic", "elasticity", "elastics", "elastin", "elastomer", "elastomers", "elastoplast", "elastoplasts", "elatedness", "elater", "elaterin", "elaterite", "elaterium", "elaters", "elation", "elative", "elatives", "elba", "elbe", "elbow", "elbowing", "elbows", "elche", "eld", "elder", "elderberries", "elderberry", "elderliness", "elders", "eldership", "elderships", "eldest", "elding", "eldings", "eldorado", "elds", "elea", "eleanor", "eleanore", "eleatic", "elecampane", "elecampanes", "elect", "election", "electioneer", "electioneerer", "electioneerers", "electioneering", "electioneerings", "electioneers", "elections", "elector", "electorate", "electorates", "electors", "electra", "electress", "electresses", "electret", "electrets", "electric", "electrician", "electricians", "electricity", "electrics", "electrification", "electrifier", "electrifiers", "electro", "electroacoustics", "electroanalysis", "electrobiologist", "electrobiologists", "electrobiology", "electrocardiogram", "electrocardiograms", "electrocardiograph", "electrocardiographs", "electrocardiography", "electrochemist", "electrochemistry", "electrochemists", "electrocution", "electrocutions", "electrode", "electrodeposition", "electrodes", "electrodialysis", "electrodynamics", "electrodynamometer", "electroencephalogram", "electroencephalograph", "electroencephalography", "electroextraction", "electroforming", "electrograph", "electrographs", "electrography", "electrokinetics", "electrolier", "electroliers", "electroluminescence", "electrolysis", "electrolyte", "electrolytes", "electrolytic", "electromagnet", "electromagnetic", "electromagnetism", "electromagnets", "electromerism", "electrometallurgist", "electrometallurgy", "electrometer", "electrometers", "electrometry", "electromotor", "electromotors", "electromyograph", "electromyography", "electron", "electron volt", "electron volts", "electronegativity", "electronics", "electrons", "electrophoresis", "electrophorus", "electrophotography", "electrophysiologist", "electrophysiology", "electroplate", "electroplater", "electroplates", "electros", "electroscope", "electroscopes", "electroshock", "electroshocks", "electrostatics", "electrotechnics", "electrotechnology", "electrotherapeutics", "electrotherapy", "electrothermics", "electrotonus", "electrotype", "electrotyper", "electrotypers", "electrotypes", "electrotypist", "electrotypists", "electrotypy", "electrovalency", "electrowinning", "electrowinnings", "electrum", "elects", "electuaries", "electuary", "elegance", "elegancy", "elegiac", "elegiacs", "elegies", "elegist", "elegists", "elegit", "elegits", "elegy", "element", "elemental", "elementals", "elementariness", "elements", "elemi", "elenchus", "elephant", "elephant s ear", "elephant s ears", "elephant s foot", "elephantiasis", "elephants", "eleusinian", "elevation", "elevations", "elevator", "elevators", "eleven", "eleven plus", "elevens", "eleventh", "elevenths", "elevon", "elevons", "elf", "elfin", "elfins", "elfish", "elfland", "elflock", "elflocks", "elgar", "elgin", "eli", "elia", "elias", "elicitation", "elicitations", "elicitor", "elicitors", "eligibility", "elijah", "eliminant", "eliminants", "elimination", "eliminations", "eliminator", "eliminators", "elinor", "eliot", "elisabeth", "elisha", "elision", "elisions", "elite", "elites", "elitism", "elitist", "elitists", "elixir", "elixirs", "eliza", "elizabeth", "elizabethan", "elizabethans", "elk", "elkhound", "elkhounds", "elks", "ell", "ella", "ellen", "ellie", "ellington", "ellipse", "ellipses", "ellipsis", "ellipsograph", "ellipsographs", "ellipsoid", "ellipsoids", "ellipticities", "ellipticity", "ellis", "ells", "elm", "elma", "elmo", "elms", "elmwood", "elo", "elocution", "elocutionist", "elocutionists", "elocutions", "elodea", "elohim", "elohist", "eloigner", "eloigners", "eloignment", "eloignments", "eloiner", "eloiners", "eloisa", "eloise", "elongation", "elongations", "elopement", "elopements", "eloper", "elopers", "elops", "eloquence", "eloquences", "elroy", "elsa", "elsan", "elsie", "elsinore", "elspet", "elspeth", "elton", "eluant", "eluants", "eluate", "eluates", "elucidation", "elucidations", "elucidator", "elucidators", "eluder", "eluders", "eluding", "eluent", "eluents", "elul", "elusion", "elusions", "elusiveness", "elution", "elutriation", "elutriator", "elutriators", "eluvium", "eluviums", "elver", "elvers", "elves", "elvira", "elvis", "elwyn", "ely", "elysium", "elytra", "elytron", "elytrons", "elytrum", "elzevir", "emaciation", "emanation", "emanations", "emancipation", "emancipationist", "emancipations", "emancipator", "emancipators", "emancipist", "emancipists", "emargination", "emarginations", "emasculation", "emasculations", "emasculator", "emasculators", "embalmer", "embalmers", "embalmment", "embalmments", "embankment", "embankments", "embarcation", "embarcations", "embargo", "embargoes", "embargos", "embarkation", "embarkations", "embarkment", "embarkments", "embarrassment", "embarrassments", "embassador", "embassage", "embassages", "embassies", "embassy", "embattlement", "embattlements", "embayment", "embayments", "embedding", "embedment", "embedments", "embellisher", "embellishers", "embellishment", "embellishments", "ember", "embers", "embezzlement", "embezzlements", "embezzler", "embezzlers", "embitterer", "embitterers", "embitterment", "embitterments", "emblazoner", "emblazoners", "emblazonment", "emblazonments", "emblazonry", "emblem", "emblematist", "emblematists", "emblems", "embodiment", "embodiments", "embolies", "embolism", "embolisms", "embolus", "emboluses", "emboly", "embonpoint", "embosser", "embossers", "embossment", "embossments", "embouchure", "embouchures", "embrace", "embracement", "embracements", "embraceor", "embraceors", "embracer", "embracers", "embracery", "embraces", "embracing", "embranchment", "embranglement", "embranglements", "embrasure", "embrasures", "embrittlement", "embrocation", "embrocations", "embroiderer", "embroiderers", "embroideries", "embroidery", "embroilment", "embroilments", "embryo", "embryogeny", "embryologist", "embryologists", "embryology", "embryos", "embryotomies", "embryotomy", "embryulcia", "embryulcias", "emcee", "emcees", "emden", "eme", "emeer", "emeers", "emendation", "emendations", "emendator", "emendators", "emerald", "emeralds", "emergence", "emergences", "emergencies", "emergency", "emergent", "emeries", "emeritus", "emersion", "emersions", "emerson", "emery", "emes", "emesis", "emetic", "emetics", "emetine", "emeu", "emeus", "emiction", "emigrant", "emigrants", "emigration", "emigrations", "emilia", "emilia romagna", "emily", "eminence", "eminences", "eminencies", "eminency", "emir", "emirate", "emirates", "emirs", "emissaries", "emissary", "emission", "emissions", "emissivity", "emitter", "emitters", "emlyn", "emmanuel", "emmeline", "emmenagogue", "emmenagogues", "emmenthal", "emmenthaler", "emmer", "emmet", "emmetrope", "emmetropes", "emmetropia", "emmets", "emmies", "emmy", "emmys", "emollient", "emollients", "emollition", "emollitions", "emolument", "emoluments", "emotion", "emotionalism", "emotionality", "emotions", "emotivism", "empalement", "empalements", "empathies", "empathy", "empedocles", "empennage", "empennages", "emperies", "emperor", "emperors", "emperorship", "emperorships", "empery", "emphasis", "emphasises", "emphasizing", "emphatic", "emphaticalness", "emphysema", "emphysemas", "empire", "empire builder", "empire builders", "empires", "empiric", "empiricism", "empiricist", "empiricists", "empirics", "emplacement", "emplacements", "employ", "employee", "employees", "employer", "employers", "employment", "employments", "employs", "empoisonment", "emporium", "emporiums", "empowerment", "empress", "empressement", "empresses", "emprise", "emprises", "empson", "emptier", "emptiers", "empties", "emptiness", "empty", "emptying", "emptyings", "empurpled", "empyema", "empyrean", "empyreans", "empyreuma", "empyreumas", "emsworth", "emu", "emu wren", "emulation", "emulations", "emulator", "emulators", "emulousness", "emulsification", "emulsifications", "emulsifier", "emulsifiers", "emulsion", "emulsions", "emulsoid", "emulsoids", "emunctories", "emunctory", "emus", "ena", "enabler", "enablers", "enactment", "enactments", "enactor", "enactors", "enallage", "enamel", "enameler", "enamelers", "enamelist", "enamelists", "enameller", "enamellers", "enamellist", "enamellists", "enamels", "enantiomer", "enantiomorph", "enantiomorphism", "enantiomorphs", "enantiosis", "enantiotropy", "enarthrosis", "enate", "enation", "enations", "encaenia", "encampment", "encampments", "encapsulation", "encapsulations", "encarpus", "encarpuses", "encasement", "encasements", "encaustic", "encaustics", "enceinte", "enceintes", "enceladus", "encephalin", "encephalins", "encephalitis", "encephalogram", "encephalograms", "encephalograph", "encephalographs", "encephalography", "encephalon", "encephalons", "encephalopathy", "encephalotomies", "encephalotomy", "enchainment", "enchainments", "enchanter", "enchanters", "enchantment", "enchantments", "enchantress", "enchantresses", "enchilada", "enchiladas", "enchiridion", "enchiridions", "enchondroma", "enchondromas", "encincture", "encinctures", "encirclement", "encirclements", "enclave", "enclaves", "enclitic", "enclitics", "encloser", "enclosers", "enclosing", "enclosure", "enclosures", "encoder", "encoders", "encoding", "encoignure", "encoignures", "encolpion", "encolpions", "encomiast", "encomiasts", "encomienda", "encomium", "encomiums", "encompassment", "encompassments", "encore", "encores", "encounter", "encounters", "encouragement", "encouragements", "encourager", "encouragers", "encrinite", "encrinites", "encroacher", "encroachers", "encroachment", "encroachments", "encrust", "encrustation", "encrustations", "encrusts", "encryption", "encryptions", "encumbrance", "encumbrancer", "encumbrancers", "encumbrances", "encyclical", "encyclicals", "encyclopaedia", "encyclopaedias", "encyclopedia", "encyclopedias", "encyclopedism", "encyclopedist", "encyclopedists", "encystation", "encystations", "encystment", "encystments", "end", "end all", "endamagement", "endamoeba", "endangerment", "endearment", "endearments", "endeavor", "endeavors", "endeavour", "endeavours", "endemic", "endemics", "endemism", "enders", "endgame", "endgames", "ending", "endings", "endive", "endives", "endlessness", "endoblast", "endoblasts", "endocarditis", "endocardium", "endocardiums", "endocarp", "endocarps", "endocrine", "endocrinologist", "endocrinologists", "endocrinology", "endoderm", "endodermis", "endoderms", "endogamies", "endogamy", "endogen", "endogens", "endogeny", "endolymph", "endolymphs", "endometriosis", "endometritis", "endometrium", "endometriums", "endomorph", "endomorphs", "endomorphy", "endoparasite", "endoparasites", "endophyte", "endophytes", "endoplasm", "endoplasms", "endopodite", "endopodites", "endorphin", "endorphins", "endorsee", "endorsees", "endorsement", "endorsements", "endorser", "endorsers", "endosarc", "endosarcs", "endoscope", "endoscopes", "endoscopies", "endoscopy", "endoskeleton", "endoskeletons", "endosmosis", "endosperm", "endosperms", "endospore", "endospores", "endosteum", "endosteums", "endothelium", "endower", "endowers", "endowment", "endowments", "endozoa", "endpaper", "endpapers", "endplay", "ends", "endurableness", "endurance", "endurances", "endurer", "endurers", "endymion", "ene", "enema", "enemas", "enemies", "enemy", "energetics", "energid", "energids", "energies", "energiser", "energisers", "energizer", "energizers", "energizing", "energumen", "energumens", "energy", "enervation", "enfacement", "enfacements", "enfeeblement", "enfeoffment", "enfeoffments", "enfield", "enfilade", "enfilades", "enfolding", "enfoldment", "enfoldments", "enforcement", "enforcements", "enforcer", "enforcers", "enfranchisement", "enfranchisements", "engagement", "engagements", "engagingness", "engelbert", "engels", "engenderer", "engenderment", "engine", "engineer", "engineering", "engineers", "enginery", "engines", "england", "englander", "englanders", "english", "englisher", "englishism", "englishman", "englishness", "englishry", "englishwoman", "engobe", "engorgement", "engorgements", "engraftation", "engraftment", "engraftments", "engrailment", "engrailments", "engram", "engrams", "engraver", "engravers", "engraving", "engravings", "engrosser", "engrossers", "engrossment", "engrossments", "engulfment", "engulfments", "enhancement", "enhancements", "enhancer", "enhancers", "enid", "enigma", "enigmas", "enjambement", "enjambements", "enjambment", "enjambments", "enjoiner", "enjoiners", "enjoining", "enjoinment", "enjoinments", "enjoyableness", "enjoyer", "enjoyers", "enjoyment", "enjoyments", "enkephalin", "enkephalins", "enlacement", "enlacements", "enlargedness", "enlargement", "enlargements", "enlarger", "enlargers", "enlightened", "enlightenment", "enlightenments", "enlisting", "enlistment", "enlistments", "enlivener", "enliveners", "enlivenment", "enlivenments", "enmeshment", "enmities", "enmity", "ennage", "ennead", "enneads", "enneagon", "enneagons", "enneahedron", "enneahedrons", "ennis", "enniskillen", "ennius", "ennoblement", "ennoblements", "ennui", "ennuis", "enoch", "enology", "enormities", "enormity", "enormousness", "enos", "enosis", "enough", "enoughs", "enquirer", "enquirers", "enquiries", "enquiry", "enragement", "enragements", "enrichment", "enrichments", "enroller", "enrollers", "enrollment", "enrollments", "enrolment", "enrolments", "ens", "ensample", "ensamples", "enschede", "ensemble", "ensembles", "enshrinement", "enshrinements", "ensign", "ensigncies", "ensigncy", "ensigns", "ensignship", "ensignships", "ensilage", "ensilages", "enslavement", "enslavements", "enslaver", "enslavers", "enslaving", "ensnarement", "enstatite", "enstatites", "ensure", "ensurer", "ensurers", "ensures", "enswathement", "entablature", "entablatures", "entablement", "entablements", "entail", "entailer", "entailers", "entailment", "entailments", "entails", "entanglement", "entanglements", "entasis", "entebbe", "entelechies", "entelechy", "entellus", "entelluses", "entente", "ententes", "enterectomies", "enterectomy", "enterer", "enterers", "entering", "enterings", "enteritis", "enteron", "enteropneust", "enteropneusts", "enterostomies", "enterostomy", "enterotomies", "enterotomy", "enterovirus", "enteroviruses", "enterprise", "enterpriser", "enterprisers", "enterprises", "entertainer", "entertainers", "entertainment", "entertainments", "enthalpy", "enthrallment", "enthrallments", "enthralment", "enthralments", "enthronement", "enthronements", "enthronization", "enthronizations", "enthusiasm", "enthusiasms", "enthusiast", "enthusiasts", "enthymeme", "enthymemes", "enticement", "enticements", "entire", "entireness", "entires", "entirety", "entities", "entitlement", "entitlements", "entity", "entoblast", "entoblasts", "entoderm", "entoderms", "entombment", "entombments", "entomologist", "entomologists", "entomology", "entomophily", "entomostracan", "entomostracans", "entophyte", "entophytes", "entourage", "entourages", "entozoa", "entozoon", "entr acte", "entr actes", "entrails", "entrance", "entrancement", "entrancements", "entrances", "entrant", "entrants", "entrapment", "entrapments", "entrapper", "entrappers", "entre deux mers", "entreaties", "entreatment", "entreatments", "entreaty", "entrechat", "entrechats", "entremets", "entrenchment", "entrenchments", "entrepot", "entrepots", "entrepreneur", "entrepreneurs", "entrepreneurship", "entrepreneuse", "entrepreneuses", "entresol", "entresols", "entries", "entropy", "entrustment", "entrustments", "entry", "enucleation", "enucleations", "enumeration", "enumerations", "enumerator", "enumerators", "enunciation", "enunciations", "enunciator", "enunciators", "enuresis", "envelope", "envelopes", "enveloping", "envelopment", "envelopments", "enviableness", "envier", "enviers", "envies", "enviousness", "environment", "environmentalism", "environmentalist", "environments", "environs", "envisagement", "envisagements", "envisioning", "envoi", "envois", "envoy", "envoys", "envy", "enzed", "enzootic", "enzootics", "enzyme", "enzymes", "enzymologist", "enzymologists", "enzymology", "eocene", "eoin", "eolian", "eolic", "eolipile", "eolipiles", "eolith", "eoliths", "eon", "eonism", "eons", "eosin", "eosinophil", "eosinophilia", "epacris", "epacrises", "epact", "epacts", "epagoge", "epanalepsis", "epanaphora", "epanodos", "epanorthosis", "eparch", "eparchies", "eparchs", "eparchy", "epaulet", "epaulets", "epaulette", "epaulettes", "epeirogeny", "epencephalon", "epencephalons", "epenthesis", "epergne", "epergnes", "epexegesis", "epha", "ephah", "ephahs", "ephas", "ephebe", "ephebes", "ephebos", "ephebus", "ephedra", "ephedras", "ephedrine", "ephemera", "ephemeral", "ephemerality", "ephemerals", "ephemeras", "ephemerid", "ephemerides", "ephemerids", "ephemeris", "ephemeron", "ephemerons", "ephesian", "ephesians", "ephesus", "ephod", "ephods", "ephor", "ephors", "ephraim", "epiblast", "epic", "epicalyx", "epicalyxes", "epicanthus", "epicanthuses", "epicarp", "epicarps", "epicedium", "epicene", "epicenes", "epicenter", "epicenters", "epicentre", "epicentres", "epicist", "epicists", "epiclesis", "epicondyle", "epicotyl", "epicotyls", "epics", "epictetus", "epicure", "epicurean", "epicureanism", "epicures", "epicurus", "epicycle", "epicycles", "epicycloid", "epicycloids", "epidaurus", "epidemic", "epidemicity", "epidemics", "epidemiologist", "epidemiologists", "epidemiology", "epidendrum", "epidendrums", "epidermis", "epidermises", "epidiascope", "epidiascopes", "epididymis", "epidiorite", "epidote", "epidotes", "epidural", "epidurals", "epigastrium", "epigastriums", "epigenesis", "epigenesist", "epigenesists", "epiglottis", "epiglottises", "epigon", "epigone", "epigones", "epigons", "epigram", "epigrammatist", "epigrammatists", "epigrams", "epigraph", "epigrapher", "epigraphers", "epigraphies", "epigraphist", "epigraphists", "epigraphs", "epigraphy", "epigyny", "epilation", "epilations", "epilator", "epilators", "epilepsy", "epileptic", "epileptics", "epilimnion", "epilimnions", "epilobium", "epilobiums", "epilog", "epilogist", "epilogists", "epilogs", "epilogue", "epilogues", "epimer", "epimers", "epinasty", "epinephrine", "epiphany", "epiphenomenalism", "epiphenomenalist", "epiphenomenon", "epiphonema", "epiphonemas", "epiphragm", "epiphragms", "epiphysis", "epiphyte", "epiphytes", "epiploon", "epiploons", "episcopacies", "episcopacy", "episcopalian", "episcopalianism", "episcopalians", "episcopalism", "episcopate", "episcopates", "episcope", "episcopes", "episiotomy", "episode", "episodes", "episome", "episomes", "epispastic", "epispastics", "episperm", "episperms", "epistasis", "epistaxis", "epistemologist", "epistemologists", "epistemology", "episternum", "epistle", "epistles", "epistoler", "epistolers", "epistolography", "epistrophe", "epistyle", "epistyles", "epitaph", "epitaphist", "epitaphists", "epitaphs", "epitasis", "epitaxies", "epitaxy", "epithalamion", "epithalamium", "epithelioma", "epitheliomas", "epithelium", "epitheliums", "epithet", "epithets", "epitome", "epitomes", "epitomiser", "epitomisers", "epitomist", "epitomists", "epitomizer", "epitomizers", "epitrachelion", "epitrachelions", "epizoa", "epizoon", "epizootic", "epizootics", "epoch", "epochs", "epode", "epodes", "eponychium", "eponychiums", "eponym", "eponyms", "epopee", "epopees", "epos", "eposes", "epoxide", "epoxides", "epoxies", "epoxy", "epsilon", "epsom", "epsomite", "epstein", "epuration", "epurations", "epyllion", "epyllions", "equabilities", "equability", "equableness", "equal", "equalisation", "equalisations", "equaliser", "equalisers", "equalitarian", "equalitarianism", "equalitarians", "equalities", "equality", "equalization", "equalizations", "equalizer", "equalizers", "equals", "equanimities", "equanimity", "equating", "equation", "equations", "equator", "equatorial", "equators", "equerries", "equerry", "equestrian", "equestrianism", "equestrians", "equestrienne", "equestriennes", "equiangularity", "equid", "equidistance", "equidistances", "equids", "equilateral", "equilibration", "equilibrator", "equilibrators", "equilibrist", "equilibrists", "equilibrium", "equilibriums", "equine", "equinity", "equinoctial", "equinox", "equinoxes", "equipage", "equipages", "equipment", "equipoise", "equipoises", "equipollence", "equipollences", "equipollencies", "equipollency", "equipollent", "equiponderance", "equipotential", "equipping", "equiprobability", "equisetum", "equisetums", "equitableness", "equitation", "equities", "equity", "equivalence", "equivalences", "equivalencies", "equivalency", "equivalent", "equivalents", "equivocality", "equivocalness", "equivocation", "equivocations", "equivocator", "equivocators", "equivoque", "equivoques", "equuleus", "era", "eradiation", "eradication", "eradications", "eradicator", "eradicators", "eras", "eraser", "erasers", "erasion", "erasions", "erasmus", "erastian", "erastianism", "erastians", "erastus", "erasure", "erasures", "erato", "eratosthenes", "erbium", "erda", "erebus", "erectility", "erecting", "erection", "erections", "erectness", "erector", "erectors", "eremite", "eremites", "eremitism", "erepsin", "erethism", "erewhon", "erfurt", "erg", "ergate", "ergates", "ergative", "ergatocracies", "ergatocracy", "ergodicity", "ergograph", "ergographs", "ergometer", "ergometers", "ergonomics", "ergosterol", "ergot", "ergotism", "ergs", "eric", "erica", "ericas", "erics", "ericsson", "eridanus", "erie", "erigeron", "erigerons", "erin", "eringo", "eringoes", "eringos", "erinys", "eriophorum", "eriophorums", "eristic", "eritrea", "eritrean", "eritreans", "erk", "erks", "erlangen", "ermine", "ermines", "ern", "erne", "ernes", "ernest", "ernestine", "ernie", "erns", "ernst", "eroding", "erodium", "erodiums", "eros", "erosion", "erosions", "erotesis", "erotic", "erotica", "eroticism", "erotics", "erotism", "erotology", "erotomania", "erotomaniac", "errand", "errands", "errantry", "errata", "erratic", "erratum", "errhine", "errhines", "errol", "erroneousness", "error", "errors", "ers", "ersatz", "ersatzes", "erse", "erses", "erskine", "erubescence", "erubescences", "eructation", "eructations", "erudition", "eruption", "eruptions", "eruptiveness", "eruptivity", "eryngium", "eryngiums", "eryngo", "eryngoes", "eryngos", "erysipelas", "erythema", "erythrina", "erythrinas", "erythrism", "erythrite", "erythrites", "erythroblast", "erythroblasts", "erythrocyte", "erythrocytes", "erythromycin", "erythrophobia", "erythropoiesis", "esau", "escadrille", "escadrilles", "escalade", "escalades", "escalation", "escalations", "escalator", "escalators", "escallonia", "escallonias", "escallop", "escallops", "escalope", "escalopes", "escapade", "escapades", "escape", "escapee", "escapees", "escapement", "escapements", "escaper", "escapers", "escapes", "escapism", "escapist", "escapists", "escapologist", "escapologists", "escargot", "escargots", "escarole", "escaroles", "escarp", "escarpment", "escarpments", "escarps", "eschalot", "eschalots", "eschar", "escharotic", "eschars", "eschatologist", "eschatologists", "eschatology", "escheat", "escheatage", "escheatages", "escheator", "escheators", "escheats", "escherichia", "eschewal", "eschewals", "eschewer", "eschewers", "eschscholtzia", "escolar", "escolars", "escorial", "escort", "escorts", "escritoire", "escritoires", "escrow", "escrows", "escuage", "escuages", "escudo", "escudos", "esculapian", "esculent", "esculents", "escutcheon", "escutcheons", "esdras", "esher", "esker", "eskers", "eskies", "eskimo", "eskimos", "esky", "esmeralda", "esne", "esnecy", "esnes", "esophagus", "esophaguses", "esoterica", "esotericism", "esoteries", "esoterism", "esotery", "espada", "espadas", "espadrille", "espadrilles", "espagnole", "espagnolette", "espagnolettes", "espalier", "espaliers", "esparto", "espartos", "esperance", "esperantist", "esperanto", "espial", "espials", "espionage", "espionages", "esplanade", "esplanades", "espousal", "espousals", "espouser", "espousers", "espresso", "espressos", "esprit", "esquimau", "esquire", "esquires", "ess", "essay", "essayer", "essayers", "essayist", "essayists", "essays", "esse", "essen", "essence", "essences", "essene", "essenes", "essential", "essentialism", "essentialist", "essentialists", "essentiality", "essentialness", "essentials", "essequibo", "esses", "essex", "essive", "essonite", "essonne", "est", "establisher", "establishers", "establishment", "establishmentarian", "establishmentarianism", "establishments", "estafette", "estafettes", "estaminet", "estaminets", "estancia", "estancias", "estanciero", "estancieros", "estate", "estates", "esteem", "esteems", "estella", "estelle", "ester", "esterification", "esterifications", "esters", "esth", "esther", "esthesia", "esthete", "esthetes", "esthetic", "esthetics", "esthonia", "esthonian", "esthonians", "estimate", "estimates", "estimation", "estimations", "estimator", "estimators", "estivation", "estoc", "estocs", "estoile", "estoiles", "estonia", "estonian", "estonians", "estoppage", "estoppages", "estoppel", "estoppels", "estrade", "estrades", "estrangedness", "estrangement", "estrangements", "estranger", "estrangers", "estray", "estrays", "estreat", "estreats", "estrogen", "estrus", "estuaries", "estuary", "esurience", "esuriences", "esuriencies", "esuriency", "eta", "etaerio", "etaerios", "etalon", "etalons", "etas", "etchant", "etchants", "etcher", "etchers", "etching", "etchings", "eternalness", "eternisation", "eternities", "eternity", "eternization", "eth", "ethal", "ethane", "ethanol", "ethel", "ethelbert", "ethene", "ether", "etherealisation", "ethereality", "etherealization", "etherification", "etherifications", "etherization", "ethers", "ethic", "ethicality", "ethicalness", "ethics", "ethiopia", "ethiopian", "ethiopians", "ethiopic", "ethmoid", "ethnarch", "ethnarchies", "ethnarchs", "ethnarchy", "ethnicity", "ethnobotany", "ethnocentrism", "ethnographer", "ethnographers", "ethnographies", "ethnography", "ethnolinguist", "ethnolinguistics", "ethnolinguists", "ethnologist", "ethnologists", "ethnology", "ethnomusicologist", "ethnomusicology", "ethologist", "ethologists", "ethology", "ethos", "ethoses", "ethyl", "ethylate", "ethylates", "ethylene", "ethyls", "ethyne", "etiologies", "etiology", "etiquette", "etiquettes", "etna", "etnas", "eton", "etonian", "etonians", "etons", "etruria", "etruscan", "etruscans", "etruscologist", "etruscology", "etymologies", "etymologist", "etymologists", "etymologizing", "etymology", "etymon", "etymons", "eubacteria", "eubacterium", "eucaine", "eucalypt", "eucalyptol", "eucalypts", "eucalyptus", "eucalyptuses", "eucaryote", "eucaryotes", "eucharis", "eucharises", "eucharist", "eucharists", "euchlorine", "euchologies", "euchologion", "euchologions", "euchology", "euchre", "euchres", "euclase", "euclid", "eucrite", "eucrites", "eudaemonist", "eudaemonists", "eudemonics", "eudemonism", "eudiometer", "eugene", "eugenia", "eugenicist", "eugenicists", "eugenics", "eugenie", "eugenol", "euglena", "euhemerism", "euhemerist", "euhemerists", "eukaryote", "eukaryotes", "eulachon", "eulachons", "euler", "eulogia", "eulogies", "eulogiser", "eulogisers", "eulogist", "eulogists", "eulogium", "eulogiums", "eulogizer", "eulogizers", "eulogy", "eumelanin", "eumelanins", "eunice", "eunuch", "eunuchism", "eunuchoid", "eunuchoidism", "eunuchs", "euonymus", "euonymuses", "eupatrid", "eupatrids", "eupepsia", "euphausiid", "euphausiids", "euphemia", "euphemism", "euphemisms", "euphonia", "euphonies", "euphonium", "euphoniums", "euphony", "euphorbia", "euphorbias", "euphorbium", "euphoria", "euphoriant", "euphoriants", "euphrasies", "euphrasy", "euphrates", "euphroe", "euphroes", "euphrosyne", "euphuism", "euphuisms", "euphuist", "euphuists", "eurasia", "eurasian", "eurasians", "euratom", "eure", "eure et loir", "eureka", "eurekas", "eurhythmics", "eurhythmies", "eurhythmy", "euripides", "euripus", "euripuses", "euroclydon", "eurocommunism", "eurocrat", "eurocrats", "eurodollar", "eurodollars", "europa", "europe", "european", "europeanisation", "europeanism", "europeanization", "europeans", "europium", "eurovision", "eurus", "eurydice", "eurypterid", "eurypterids", "eurythmics", "eurythmies", "eurythmy", "eusebius", "eusol", "eustace", "eustacy", "eutaxy", "eutectic", "euterpe", "euthanasia", "euthanasias", "euthenics", "euthenist", "euthenists", "eutherian", "eutrophication", "eutrophy", "euxenite", "eva", "evacuant", "evacuants", "evacuation", "evacuations", "evacuator", "evacuators", "evacuee", "evacuees", "evader", "evaders", "evadne", "evagination", "evaginations", "evaluation", "evaluations", "evan", "evanescence", "evanescences", "evangel", "evangeliary", "evangelical", "evangelicalism", "evangelicalness", "evangelicals", "evangeline", "evangelisation", "evangelisations", "evangelism", "evangelist", "evangelistaries", "evangelistary", "evangelists", "evangelization", "evangelizations", "evangels", "evans", "evansville", "evaporability", "evaporate", "evaporates", "evaporation", "evaporations", "evaporator", "evaporators", "evaporimeter", "evaporimeters", "evaporite", "evaporometer", "evapotranspiration", "evasion", "evasions", "evasiveness", "eve", "evection", "evections", "evelyn", "even", "even handedness", "evener", "evenfall", "evenfalls", "evening", "evenings", "evenness", "evens", "evensong", "evensongs", "event", "eventfulness", "eventide", "eventides", "eventration", "eventrations", "events", "eventualities", "eventuality", "everest", "everglade", "everglades", "evergreen", "evergreens", "everlasting", "everlastingness", "eversion", "eversions", "everting", "evertor", "evertors", "everybody", "everydayness", "everyman", "everything", "eves", "evesham", "eviction", "evictions", "evictor", "evictors", "evidence", "evidences", "evie", "evil", "evil mindedness", "evildoer", "evildoers", "evildoing", "evilness", "evils", "evisceration", "eviscerations", "eviscerator", "eviscerators", "evita", "evocation", "evocations", "evocativeness", "evocator", "evocators", "evoker", "evokers", "evolute", "evolutes", "evolution", "evolutionism", "evolutionist", "evolutionists", "evolutions", "evolvement", "evolvements", "evolver", "evolvers", "evulsion", "evulsions", "evzone", "evzones", "ewe", "ewe neck", "ewen", "ewer", "ewers", "ewes", "ex serviceman", "exacerbation", "exacerbations", "exacter", "exacters", "exaction", "exactions", "exactitude", "exactitudes", "exactness", "exactor", "exactors", "exaggeration", "exaggerations", "exaggerator", "exaggerators", "exaltation", "exaltations", "exaltedness", "exam", "examen", "examens", "examinant", "examinants", "examination", "examinations", "examinee", "examinees", "examiner", "examiners", "example", "examples", "exams", "exanimation", "exanthem", "exanthema", "exanthemas", "exanthems", "exarch", "exarchate", "exarchates", "exarchs", "exasperation", "exasperations", "excalibur", "excavation", "excavations", "excavator", "excavators", "excellence", "excellences", "excellencies", "excellency", "excelsior", "excelsiors", "excentric", "exception", "exceptions", "excerpt", "excerption", "excerptions", "excerptor", "excerptors", "excerpts", "excess", "excesses", "excessiveness", "exchange", "exchangeability", "exchanger", "exchangers", "exchanges", "exchequer", "exchequers", "excipient", "excipients", "excise", "exciseman", "excises", "excision", "excisions", "excitability", "excitableness", "excitant", "excitants", "excitation", "excitations", "excitedness", "excitement", "excitements", "exciter", "exciters", "exciton", "excitons", "excitor", "excitors", "exclaiming", "exclamation", "exclamations", "exclaustration", "exclaustrations", "exclave", "exclaves", "exclosure", "exclosures", "excluder", "excluders", "exclusion", "exclusionism", "exclusionist", "exclusionists", "exclusions", "exclusive", "exclusiveness", "exclusives", "exclusivism", "exclusivist", "exclusivists", "exclusivity", "excogitation", "excogitations", "excogitator", "excommunicate", "excommunicates", "excommunication", "excommunications", "excommunicator", "excommunicators", "excoriation", "excoriations", "excrement", "excrescence", "excrescences", "excrescencies", "excrescency", "excreta", "excreter", "excreters", "excreting", "excretion", "excretions", "excruciation", "excruciations", "excudit", "exculpation", "exculpations", "excursion", "excursionist", "excursionists", "excursions", "excursiveness", "excursus", "excursuses", "excusableness", "excusal", "excusals", "excuse", "excuse me", "excuse mes", "excuser", "excusers", "excuses", "exeat", "exeats", "execrableness", "execration", "execrations", "executant", "executants", "executer", "executers", "executing", "execution", "executioner", "executioners", "executions", "executive", "executives", "executor", "executors", "executorship", "executorships", "executrix", "executrixes", "exedra", "exegesis", "exegete", "exegetes", "exegetics", "exemplar", "exemplariness", "exemplarity", "exemplars", "exemplification", "exemplifications", "exemplifier", "exemplifiers", "exemplum", "exempt", "exemption", "exemptions", "exempts", "exenteration", "exenterations", "exequatur", "exequaturs", "exequies", "exequy", "exercise", "exerciser", "exercisers", "exercises", "exercising", "exercitation", "exercitations", "exergue", "exergues", "exertion", "exertions", "exeter", "exfoliation", "exhalant", "exhalants", "exhalation", "exhalations", "exhaust", "exhauster", "exhausters", "exhaustibility", "exhaustion", "exhaustions", "exhaustiveness", "exhausts", "exhedra", "exhibit", "exhibiter", "exhibiters", "exhibition", "exhibitioner", "exhibitioners", "exhibitionism", "exhibitionist", "exhibitionists", "exhibitions", "exhibitor", "exhibitors", "exhibits", "exhilarant", "exhilarants", "exhilaration", "exhilarations", "exhilarator", "exhortation", "exhortations", "exhorter", "exhorters", "exhumation", "exhumations", "exhumer", "exhumers", "exigencies", "exigency", "exiguity", "exiguousness", "exile", "exiles", "exine", "exines", "existence", "existences", "existent", "existentialism", "existentialist", "existentialists", "exit", "exitance", "exits", "exmoor", "exobiologist", "exobiologists", "exobiology", "exocarp", "exocarps", "exocrine", "exode", "exoderm", "exodermis", "exodermises", "exoderms", "exodes", "exodus", "exoduses", "exoenzyme", "exogamy", "exogen", "exon", "exoneration", "exonerations", "exonerator", "exonerators", "exons", "exonym", "exonyms", "exophthalmos", "exoplasm", "exoplasms", "exopodite", "exopodites", "exorability", "exorbitance", "exorbitances", "exorciser", "exorcisers", "exorcism", "exorcisms", "exorcist", "exorcists", "exorcizer", "exorcizers", "exordium", "exordiums", "exoskeleton", "exoskeletons", "exosmosis", "exosphere", "exospheres", "exospore", "exospores", "exostosis", "exotericism", "exothermicity", "exotic", "exoticism", "exoticisms", "exoticness", "exotics", "exotoxin", "exotoxins", "expandability", "expander", "expanders", "expanse", "expanses", "expansibility", "expansion", "expansionism", "expansionist", "expansionists", "expansions", "expansiveness", "expansivity", "expatiation", "expatiations", "expatiator", "expatiators", "expatriate", "expatriates", "expatriation", "expatriations", "expectancies", "expectancy", "expectant", "expectants", "expectation", "expectations", "expecter", "expecters", "expectorant", "expectorants", "expectoration", "expectorations", "expectorator", "expectorators", "expedience", "expediences", "expediencies", "expediency", "expedient", "expedients", "expeditation", "expeditations", "expediter", "expediters", "expedition", "expeditions", "expeditiousness", "expeditor", "expeditors", "expellant", "expellants", "expellee", "expellees", "expeller", "expellers", "expelling", "expendability", "expendable", "expendables", "expender", "expenders", "expending", "expenditure", "expenditures", "expense", "expenses", "expensiveness", "experience", "experiences", "experientialism", "experientialist", "experiment", "experimentalism", "experimentalist", "experimentation", "experimenter", "experimenters", "experiments", "expert", "expertise", "expertises", "expertness", "experts", "expiation", "expiations", "expiator", "expiators", "expiration", "expirations", "expiries", "expiry", "explainer", "explainers", "explanation", "explanations", "explant", "explantation", "explantations", "explants", "expletive", "expletives", "explication", "explications", "explicator", "explicators", "explicitness", "exploder", "exploders", "exploit", "exploitation", "exploitations", "exploiter", "exploiters", "exploits", "exploration", "explorations", "explorer", "explorers", "explosion", "explosions", "explosive", "explosiveness", "explosives", "expo", "exponent", "exponential", "exponentials", "exponents", "export", "exportation", "exportations", "exporter", "exporters", "exporting", "exports", "expos", "exposal", "exposals", "expose", "exposedness", "exposer", "exposers", "exposes", "exposition", "expositions", "expositor", "expositors", "expostulation", "expostulations", "expostulator", "expostulators", "exposure", "exposures", "expounder", "expounders", "expounding", "express", "expressage", "expressages", "expresses", "expression", "expressionism", "expressionist", "expressionists", "expressions", "expressiveness", "expressivities", "expressivity", "expressman", "expresso", "expressway", "expressways", "expropriation", "expropriations", "expropriator", "expropriators", "expulsion", "expulsions", "expunction", "expunctions", "expunger", "expungers", "expunging", "expurgation", "expurgations", "expurgator", "expurgators", "exquisite", "exquisiteness", "exquisites", "exsanguination", "exsanguinity", "exsection", "exsections", "exsertion", "exsertions", "exsiccation", "exsiccations", "exsiccator", "exsiccators", "extemporaneity", "extemporaneousness", "extemporariness", "extemporisation", "extemporization", "extendability", "extender", "extenders", "extendibility", "extensibility", "extensimeter", "extensimeters", "extension", "extensionalism", "extensionality", "extensions", "extensities", "extensity", "extensiveness", "extensometer", "extensometers", "extensor", "extensors", "extent", "extents", "extenuation", "extenuations", "extenuator", "extenuators", "exterior", "exteriorisation", "exteriorization", "exteriors", "extermination", "exterminations", "exterminator", "exterminators", "extern", "external", "externalisation", "externalism", "externalist", "externalists", "externalities", "externality", "externalization", "externals", "externes", "externs", "exteroceptor", "exteroceptors", "exterritoriality", "extinction", "extinctions", "extine", "extines", "extinguishant", "extinguishants", "extinguisher", "extinguishers", "extinguishing", "extinguishment", "extinguishments", "extirpation", "extirpations", "extirpator", "extirpators", "extoller", "extollers", "extolment", "extolments", "extortion", "extortioner", "extortioners", "extortionist", "extortionists", "extortions", "extra", "extract", "extractability", "extractant", "extractants", "extraction", "extractions", "extractive", "extractives", "extractor", "extractors", "extracts", "extradition", "extraditions", "extrados", "extradoses", "extraneousness", "extraordinariness", "extrapolation", "extrapolations", "extrapolator", "extrapolators", "extraposition", "extras", "extravagance", "extravagances", "extravagancies", "extravagancy", "extravaganza", "extravaganzas", "extravasate", "extravasates", "extravasation", "extravasations", "extraversion", "extraversions", "extravert", "extraverts", "extreme", "extremeness", "extremes", "extremism", "extremist", "extremists", "extremities", "extremity", "extrication", "extrications", "extroversion", "extroversions", "extrovert", "extroverts", "extruder", "extruders", "extrusion", "extrusions", "exuberance", "exuberances", "exudate", "exudates", "exudation", "exudations", "exultation", "exultations", "exurb", "exurbanite", "exurbanites", "exurbia", "exurbs", "exuviae", "exuviation", "exuviations", "eyalet", "eyalets", "eyas", "eyases", "eye", "eye opener", "eye openers", "eyeball", "eyeballs", "eyeblack", "eyebolt", "eyebolts", "eyebright", "eyebrights", "eyebrow", "eyebrows", "eyecup", "eyecups", "eyeful", "eyefuls", "eyeglass", "eyeglasses", "eyehook", "eyehooks", "eyelash", "eyelashes", "eyelet", "eyeleteer", "eyeleteers", "eyelets", "eyelid", "eyelids", "eyeliner", "eyeliners", "eyepatch", "eyepatches", "eyes", "eyeshade", "eyeshades", "eyesight", "eyesore", "eyesores", "eyestalk", "eyestalks", "eyestrain", "eyestrains", "eyetie", "eyeties", "eyne", "eyot", "eyots", "eyra", "eyras", "eyre", "eyres", "eyrie", "eyries", "eyry", "eysenck", "ezekiel", "ezra", "f hole", "fa la", "fabian", "fabianism", "fabians", "fable", "fabler", "fablers", "fables", "fabliau", "fabric", "fabricant", "fabricants", "fabrication", "fabrications", "fabricator", "fabricators", "fabrics", "fabulist", "fabulists", "fabulousness", "faburden", "faburdens", "facade", "facades", "face", "face ache", "face lift", "face lifts", "face off", "facer", "facers", "faces", "facet", "facetiousness", "facets", "facia", "facial", "facials", "facias", "facies", "facileness", "facilitation", "facilitator", "facilitators", "facilities", "facility", "facing", "facings", "facsimile", "facsimiles", "fact", "fact finding", "factice", "faction", "factionalism", "factionalist", "factionalists", "factions", "factiousness", "factitiousness", "factoid", "factoids", "factor", "factorability", "factorage", "factorages", "factorial", "factorials", "factories", "factoring", "factorisation", "factorisations", "factorization", "factorizations", "factors", "factorship", "factorships", "factory", "factotum", "factotums", "facts", "factualities", "factuality", "factualness", "facture", "factures", "facula", "faculas", "faculties", "faculty", "fad", "faddishness", "faddism", "faddist", "faddists", "fade", "fade in", "fade out", "fadedness", "fader", "faders", "fades", "fading", "fadings", "fado", "fados", "fads", "faeces", "faerie", "faeries", "faeroese", "faery", "fafnir", "fag", "faggot", "faggoting", "faggotings", "faggots", "fagin", "fagins", "fagot", "fagoting", "fagots", "fags", "fahlband", "fahlbands", "fahrenheit", "fail", "failing", "failings", "faille", "fails", "failure", "failures", "faineancy", "faint", "fainter", "faintishness", "faintness", "faints", "fair", "fairbanks", "fairfax", "fairground", "fairgrounds", "fairies", "fairing", "fairings", "fairness", "fairs", "fairway", "fairways", "fairy", "fairyhood", "fairyism", "fairyland", "fairylands", "faisal", "faith", "faithful", "faithfulness", "faithlessness", "faiths", "faitour", "faitours", "fake", "fakement", "faker", "fakers", "fakery", "fakes", "fakir", "fakirs", "falafel", "falafels", "falange", "falasha", "falashas", "falbala", "falbalas", "falchion", "falchions", "falcon", "falcon gentil", "falcon gentils", "falcon gentle", "falcon gentles", "falconer", "falconers", "falconet", "falconets", "falconry", "falcons", "falderal", "falderals", "faldstool", "faldstools", "falk", "falkirk", "fall", "falla", "fallacies", "fallaciousness", "fallacy", "fallal", "fallaleries", "fallalery", "fallals", "faller", "fallers", "fallfish", "fallfishes", "fallibilism", "fallibilist", "fallibilists", "fallibility", "fallibleness", "falling", "fallings", "fallow", "fallowness", "fallows", "falls", "falmouth", "falsehood", "falsehoods", "falseness", "falsetto", "falsettos", "falsework", "falseworks", "falsie", "falsies", "falsifiability", "falsification", "falsifications", "falsifier", "falsifiers", "falsifying", "falsities", "falsity", "falstaff", "faltboat", "faltboats", "falter", "faltering", "falterings", "falters", "falx", "fame", "fames", "familiar", "familiarisation", "familiarities", "familiarity", "familiarization", "familiars", "families", "familism", "familist", "famille", "family", "famine", "famines", "famishment", "famousness", "famulus", "famuluses", "fan", "fan tan", "fanagalo", "fanatic", "fanaticism", "fanaticisms", "fanatics", "fancier", "fanciers", "fancies", "fancifulness", "fanciness", "fancy", "fancywork", "fandangle", "fandangles", "fandango", "fandangos", "fandom", "fane", "fanes", "fanfare", "fanfares", "fanfaron", "fanfaronade", "fanfaronades", "fanfarons", "fanfold", "fang", "fangio", "fangle", "fango", "fangos", "fangs", "fanion", "fanions", "fanlight", "fanlights", "fanner", "fanners", "fannies", "fanny", "fanon", "fanons", "fans", "fantail", "fantails", "fantasia", "fantasias", "fantasies", "fantasist", "fantasists", "fantasm", "fantasms", "fantast", "fantastic", "fantasticality", "fantasticalness", "fantasts", "fantasy", "fanti", "fantigue", "fantod", "fantods", "fantom", "fantoms", "faqir", "faqirs", "faquir", "faquirs", "far", "farad", "faraday", "faradays", "faradisation", "faradisations", "faradism", "faradization", "faradizations", "farads", "farandole", "farandoles", "farawayness", "farce", "farces", "farceur", "farceurs", "farceuse", "farceuses", "farcicality", "farcy", "fard", "fardel", "fardels", "fards", "fare", "fare stage", "fare stages", "fares", "farewell", "farewells", "fargo", "farina", "farinas", "farl", "farles", "farls", "farm", "farmer", "farmer general", "farmeries", "farmers", "farmery", "farmhouse", "farmhouses", "farming", "farmings", "farmland", "farms", "farmstead", "farmsteads", "farmyard", "farmyards", "farnborough", "farnesol", "farness", "farnham", "faro", "faroes", "faroese", "farquhar", "farrago", "farragoes", "farragos", "farrell", "farrier", "farriers", "farriery", "farrow", "farrowing", "farrows", "farsightedness", "farthing", "farthingale", "farthingales", "farthings", "fartlek", "faruq", "fascia", "fascias", "fasciation", "fasciations", "fascicle", "fascicles", "fasciculation", "fascicule", "fascicules", "fasciculus", "fascination", "fascinations", "fascinator", "fascinators", "fascine", "fascines", "fasciola", "fasciolas", "fascism", "fascist", "fascista", "fascists", "fash", "fashes", "fashion", "fashionableness", "fashioner", "fashioners", "fashioning", "fashions", "fassbinder", "fast", "fastback", "fastbacks", "fastball", "fastballs", "fastener", "fasteners", "fastening", "fastenings", "fastidiousness", "fastigium", "fastigiums", "fasting", "fastings", "fastness", "fastnesses", "fasts", "fat", "fatalism", "fatalist", "fatalists", "fatalities", "fatality", "fatback", "fate", "fatefulness", "fates", "father", "father in law", "fatherhood", "fatherland", "fatherlands", "fatherliness", "fathers", "fathom", "fathometer", "fathometers", "fathoms", "fatigableness", "fatigue", "fatigues", "fatima", "fatimid", "fatling", "fatlings", "fatness", "fats", "fattener", "fatteners", "fattest", "fatties", "fattiness", "fatty", "fatuities", "fatuity", "fatuousness", "fatwa", "fatwas", "faubourg", "faubourgs", "fauces", "faucet", "faucets", "faulkner", "fault", "fault finding", "faultiness", "faultlessness", "faults", "faun", "fauna", "faunas", "fauns", "faunus", "faust", "faustus", "fauteuil", "fauteuils", "fauve", "fauves", "fauvism", "fauvist", "fauvists", "fauxbourdon", "fauxbourdons", "favism", "favor", "favorableness", "favoredness", "favorer", "favorers", "favorite", "favorites", "favoritism", "favors", "favour", "favourableness", "favouredness", "favourer", "favourers", "favourite", "favourites", "favouritism", "favours", "favus", "fawkes", "fawn", "fawner", "fawners", "fawningness", "fawns", "fax", "faxes", "fay", "fayalite", "faye", "fays", "fazenda", "fazendas", "fealties", "fealty", "fear", "feares", "fearfulness", "fearlessness", "fearnought", "fears", "feasibility", "feasibleness", "feast", "feaster", "feasters", "feasting", "feastings", "feasts", "feat", "feather", "featherbed", "featherbedding", "featherbeds", "featheriness", "feathering", "featherings", "feathers", "feats", "feature", "features", "febricities", "febricity", "febricula", "febriculas", "febrifacient", "febrifuge", "febrifuges", "febrilities", "febrility", "february", "feces", "feck", "fecklessness", "fecks", "fecula", "feculence", "fecundation", "fecundities", "fecundity", "fed", "fedayee", "fedelini", "federacies", "federacy", "federal", "federalisation", "federalisations", "federalism", "federalist", "federalists", "federalization", "federalizations", "federals", "federation", "federations", "fedora", "fedoras", "feds", "fee", "feeble mindedness", "feebleness", "feed", "feedback", "feedbag", "feedbags", "feeder", "feeders", "feeding", "feedings", "feedlot", "feedlots", "feeds", "feedstuff", "feedstuffs", "feel", "feeler", "feelers", "feeling", "feelings", "feels", "fees", "feet", "feeze", "feezes", "feignedness", "feigning", "feignings", "feint", "feints", "felafel", "felafels", "feldsher", "feldshers", "feldspar", "feldspars", "feldspathoid", "feldspathoids", "felice", "felicia", "felicitation", "felicitations", "felicities", "felicity", "felid", "feline", "felines", "felinity", "felix", "fell", "fella", "fellah", "fellahs", "fellas", "fellatio", "fellation", "fellations", "fellatios", "feller", "fellers", "fellies", "fellini", "fellmonger", "fellmongers", "fellness", "felloe", "felloes", "fellow", "fellow man", "fellows", "fellowship", "fellowships", "fells", "felly", "felo de se", "felon", "felonies", "feloniousness", "felonries", "felonry", "felons", "felony", "felsite", "felspar", "felspars", "felt", "felting", "feltings", "felts", "felucca", "feluccas", "felwort", "felworts", "female", "femaleness", "females", "feme", "femes", "femineity", "feminine", "feminineness", "feminines", "femininity", "feminisation", "feminism", "feminist", "feminists", "feminization", "femme", "femmes", "femur", "femurs", "fen", "fence", "fencer", "fencers", "fences", "fencible", "fencibles", "fencing", "fencings", "fend", "fender", "fenders", "fends", "fenella", "fenestella", "fenestellas", "fenestra", "fenestras", "fenestration", "fenestrations", "fenian", "fenianism", "fenians", "fenland", "fenlands", "fenman", "fennec", "fennecs", "fennel", "fennels", "fenrir", "fens", "fenugreek", "fenugreeks", "feod", "feodaries", "feodary", "feods", "feoff", "feoffee", "feoffees", "feoffer", "feoffers", "feoffment", "feoffments", "feoffor", "feoffors", "feoffs", "fer de lance", "feracity", "ferdinand", "fere", "feres", "feretories", "feretory", "fergus", "ferguson", "ferity", "fermanagh", "fermat", "fermata", "fermatas", "ferment", "fermentability", "fermentation", "fermentations", "fermentativeness", "fermenting", "ferments", "fermi", "fermion", "fermions", "fermis", "fermium", "fern", "ferneries", "fernery", "ferns", "ferociousness", "ferocity", "ferrari", "ferrate", "ferrates", "ferret", "ferreter", "ferreters", "ferrets", "ferriage", "ferriages", "ferricyanide", "ferries", "ferrimagnetism", "ferris", "ferrite", "ferrites", "ferritin", "ferrochromium", "ferroconcrete", "ferrocyanide", "ferroelectric", "ferroelectricity", "ferromagnetism", "ferronickel", "ferrotype", "ferrotypes", "ferrule", "ferrules", "ferry", "ferrying", "ferryman", "fertilisation", "fertilisations", "fertiliser", "fertilisers", "fertility", "fertilization", "fertilizations", "fertilizer", "fertilizers", "ferula", "ferulas", "ferule", "ferules", "fervency", "fervidity", "fervidness", "fervor", "fervour", "fescue", "fescues", "fess", "fesse", "fesses", "festa", "fester", "festering", "festers", "festination", "festinations", "festival", "festivals", "festiveness", "festivities", "festivity", "festoon", "festoonery", "festoons", "festschrift", "festschrifts", "feta", "fetas", "fetch", "fetcher", "fetchers", "fetches", "fetial", "fetich", "fetiches", "fetichism", "fetichisms", "fetichist", "fetichists", "feticide", "feticides", "fetidness", "fetish", "fetishes", "fetishism", "fetishisms", "fetishist", "fetishists", "fetlock", "fetlocks", "fetor", "fetter", "fetterlock", "fetterlocks", "fetters", "fettle", "fettles", "fettling", "fettlings", "fettuccine", "fettucine", "fettucini", "fetus", "fetuses", "feu", "feuar", "feuars", "feuchtwanger", "feud", "feudalisation", "feudalism", "feudalist", "feudalists", "feudality", "feudalization", "feudatories", "feudatory", "feudist", "feudists", "feuds", "feuerbach", "feuilleton", "feuilletonism", "feuilletonist", "feuilletonists", "feuilletons", "feus", "fever", "feverfew", "feverfews", "feverishness", "fevers", "few", "fewness", "feydeau", "feynman", "fez", "fezes", "fiacre", "fiacres", "fianchetto", "fianchettoes", "fianna", "fiar", "fiars", "fiasco", "fiascoes", "fiascos", "fiat", "fiats", "fib", "fibber", "fibbers", "fibbing", "fiber", "fiberboard", "fiberboards", "fiberglass", "fibers", "fiberscope", "fiberscopes", "fibre", "fibreboard", "fibreboards", "fibreglass", "fibres", "fibril", "fibrilla", "fibrillation", "fibrillations", "fibrils", "fibrin", "fibrinogen", "fibrinogens", "fibrinolysin", "fibro", "fibroblast", "fibroblasts", "fibrocartilage", "fibrocement", "fibroid", "fibroids", "fibroin", "fibrolite", "fibrolites", "fibroma", "fibromas", "fibros", "fibrosis", "fibrositis", "fibs", "fibster", "fibsters", "fibula", "fibulas", "fiche", "fiches", "fichu", "fichus", "fickleness", "fico", "ficos", "fiction", "fictionalisation", "fictionalisations", "fictionalization", "fictionalizations", "fictionist", "fictionists", "fictions", "ficus", "fid", "fiddle", "fiddle back", "fiddle faddle", "fiddle faddler", "fiddlehead", "fiddleheads", "fiddler", "fiddlers", "fiddles", "fiddlestick", "fiddlesticks", "fiddlewood", "fiddlewoods", "fideism", "fidelio", "fidelities", "fidelity", "fidget", "fidgetiness", "fidgets", "fido", "fids", "fiduciaries", "fiduciary", "fief", "fiefs", "field", "fielder", "fielders", "fieldfare", "fieldfares", "fielding", "fieldings", "fieldmouse", "fieldpiece", "fieldpieces", "fields", "fieldsman", "fieldstone", "fieldstones", "fieldwork", "fieldworker", "fieldworkers", "fieldworks", "fiend", "fiendishness", "fiends", "fierceness", "fieriness", "fiesta", "fiestas", "fife", "fifer", "fifers", "fifes", "fifteen", "fifteens", "fifteenth", "fifteenths", "fifth", "fifths", "fifties", "fiftieth", "fiftieths", "fifty", "fig", "fig bird", "fig birds", "fight", "fighter", "fighter bomber", "fighter bombers", "fighters", "fighting", "fightings", "fights", "figment", "figments", "figs", "figuline", "figulines", "figurant", "figurantes", "figurants", "figuration", "figurations", "figurativeness", "figure", "figurehead", "figureheads", "figures", "figurine", "figurines", "figuring", "figwort", "figworts", "fiji", "fijian", "fijians", "fil", "filagree", "filagrees", "filament", "filaments", "filariasis", "filasse", "filature", "filatures", "filbert", "filberts", "filcher", "filchers", "file", "filename", "filenames", "filer", "filers", "files", "filet", "filiation", "filiations", "filibeg", "filibegs", "filibuster", "filibusterer", "filibusterers", "filibusterism", "filibusters", "filicide", "filicides", "filigree", "filigrees", "filing", "filings", "filioque", "filipino", "filipinos", "fill", "fille", "filler", "fillers", "filles", "fillet", "filleting", "fillets", "fillies", "filling", "fillings", "fillip", "fillipeen", "fillips", "fillister", "fillisters", "fillmore", "fills", "filly", "film", "filmdom", "filmgoer", "filmgoers", "filminess", "filming", "filmland", "filmographies", "filmography", "films", "filmsetting", "filmstrip", "filoplume", "filoplumes", "filoselle", "filoselles", "fils", "filter", "filterability", "filters", "filth", "filthiness", "filtrability", "filtrate", "filtrates", "filtration", "filtrations", "fimble", "fimbles", "fimbria", "fimbrias", "fimbriation", "fimbriations", "fin", "finagler", "finaglers", "final", "finale", "finales", "finalisation", "finalism", "finalist", "finalists", "finalities", "finality", "finalization", "finals", "finance", "finances", "financier", "financiers", "financing", "finback", "finbacks", "finbar", "finch", "finches", "finchley", "find", "finder", "finders", "finding", "findings", "finds", "fine", "fineness", "fineries", "finery", "fines", "finesse", "finesses", "finger", "fingerboard", "fingerboards", "fingering", "fingerings", "fingerling", "fingerlings", "fingermark", "fingermarks", "fingernail", "fingernails", "fingerpost", "fingerposts", "fingerprint", "fingerprinting", "fingerprints", "fingers", "fingerstall", "fingerstalls", "fingertip", "fingertips", "finial", "finials", "finicalities", "finicality", "finicalness", "fining", "finings", "finis", "finises", "finish", "finisher", "finishers", "finishes", "finishing", "finishings", "finisterre", "finiteness", "finitude", "fink", "finks", "finland", "finlander", "finlandia", "finlay", "finley", "finn", "finnan", "finnans", "finner", "finners", "finney", "finnic", "finnish", "finno ugrian", "finno ugric", "finns", "fino", "finocchio", "finochio", "finos", "fins", "fiona", "fiord", "fiords", "fiorin", "fiorins", "fioritura", "fipple", "fipples", "fir", "firbank", "fire", "fire eater", "fire eaters", "fire extinguisher", "fire extinguishers", "fire plow", "fire raiser", "fire raising", "fire worship", "fireboat", "fireboats", "firebomb", "firebombs", "firebox", "fireboxes", "firebrand", "firebrands", "firebrat", "firebrats", "firebrick", "firebricks", "firebug", "firebugs", "firecrest", "firecrests", "firedamp", "firedog", "firedogs", "fireflies", "firefly", "fireguard", "fireguards", "firehouse", "firehouses", "firelight", "firelighter", "firelighters", "firelights", "fireman", "firenze", "firepan", "firepans", "fireplace", "fireplaces", "fireproofing", "firer", "firers", "fires", "fireside", "firesides", "firestone", "firestones", "firetrap", "firetraps", "firewall", "firewalls", "fireweed", "fireweeds", "firewood", "firework", "fireworks", "fireworm", "fireworms", "firing", "firings", "firkin", "firkins", "firm", "firmament", "firmaments", "firman", "firmans", "firmness", "firms", "firmware", "firn", "firns", "firs", "first", "first aider", "first aiders", "first born", "first borns", "first foot", "first foots", "first nighter", "first nighters", "firstling", "firstlings", "firsts", "firth", "firths", "fisc", "fiscal", "fiscals", "fischer", "fischer dieskau", "fiscs", "fish", "fish hook", "fish hooks", "fishbowl", "fishbowls", "fisher", "fisheries", "fisherman", "fishers", "fishery", "fishes", "fisheye", "fisheyes", "fishgig", "fishgigs", "fishiness", "fishing", "fishings", "fishmonger", "fishmongers", "fishpond", "fishponds", "fishtail", "fishtails", "fishwife", "fishyback", "fission", "fissions", "fissiparousness", "fissiped", "fissure", "fissures", "fist", "fistfight", "fistfights", "fistful", "fistfuls", "fistiana", "fisticuff", "fisticuffs", "fistmele", "fists", "fistula", "fistulas", "fistulous", "fit", "fitch", "fitches", "fitchew", "fitchews", "fitfulness", "fitment", "fitments", "fitness", "fits", "fitter", "fitters", "fitting", "fittings", "fittipaldi", "fitzgerald", "fitzroy", "five", "five eighth", "five finger", "fivepence", "fivepences", "fivepins", "fiver", "fivers", "fives", "fix", "fixation", "fixations", "fixative", "fixatives", "fixedness", "fixer", "fixers", "fixes", "fixing", "fixings", "fixity", "fixture", "fixtures", "fixure", "fizgig", "fizgigs", "fizz", "fizzer", "fizzers", "fizzes", "fizzle", "fizzles", "fjord", "fjords", "flab", "flabbiness", "flabellum", "flabellums", "flabs", "flaccidity", "flaccidness", "flack", "flacks", "flacon", "flacons", "flag", "flag waver", "flag wavers", "flag waving", "flagella", "flagellant", "flagellantism", "flagellants", "flagellate", "flagellates", "flagellation", "flagellations", "flagellator", "flagellators", "flagellum", "flageolet", "flageolets", "flagging", "flagitiousness", "flagman", "flagon", "flagons", "flagpole", "flagpoles", "flagrance", "flagrances", "flagrancies", "flagrancy", "flags", "flagship", "flagships", "flagstad", "flagstaff", "flagstaffs", "flagstone", "flagstones", "flail", "flails", "flair", "flairs", "flak", "flake", "flakes", "flakiness", "flaks", "flam", "flambeau", "flambeaus", "flamboyance", "flamboyancy", "flamboyant", "flamboyantes", "flamboyants", "flame", "flame tree", "flamen", "flamenco", "flamencos", "flamens", "flames", "flamethrower", "flamethrowers", "flaming", "flamingo", "flamingoes", "flamingos", "flaminius", "flammability", "flams", "flan", "flanch", "flanches", "flanders", "flange", "flanges", "flank", "flanker", "flankers", "flanks", "flannel", "flannelboard", "flannelboards", "flannelette", "flannels", "flans", "flap", "flapdoodle", "flapjack", "flapjacks", "flapper", "flappers", "flapping", "flaps", "flare", "flare up", "flare ups", "flares", "flash", "flashcube", "flashcubes", "flasher", "flashers", "flashes", "flashiness", "flashing", "flashings", "flashlight", "flashlights", "flask", "flasket", "flaskets", "flasks", "flat", "flatboat", "flatboats", "flatcar", "flatcars", "flatfish", "flatfishes", "flathead", "flatheads", "flatiron", "flatirons", "flatlet", "flatlets", "flatmate", "flatmates", "flatness", "flats", "flatter", "flatterer", "flatterers", "flatteries", "flatters", "flattery", "flattest", "flattie", "flatties", "flatting", "flattop", "flattops", "flatulence", "flatulency", "flatus", "flatuses", "flatware", "flatwares", "flaubert", "flaunch", "flaunches", "flaunt", "flaunter", "flaunters", "flaunting", "flaunts", "flautist", "flautists", "flavia", "flavian", "flavin", "flavine", "flavone", "flavones", "flavor", "flavoring", "flavorings", "flavors", "flavour", "flavouring", "flavourings", "flavours", "flaw", "flawlessness", "flaws", "flax", "flaxes", "flaxman", "flayer", "flayers", "flea", "fleam", "fleams", "fleas", "fleawort", "fleck", "flecks", "flection", "flections", "fledgeling", "fledgelings", "fledgling", "fledglings", "fleece", "fleecer", "fleecers", "fleeces", "fleeciness", "fleer", "fleers", "fleet", "fleetingly", "fleetingness", "fleetness", "fleets", "fleetwood", "flemish", "flensburg", "flesh", "flesher", "fleshers", "fleshes", "fleshiness", "fleshliness", "fletcher", "fletchers", "fleur", "fleur de lis", "fleur de lys", "fleurette", "fleurettes", "fleuron", "fleurons", "flew", "flews", "flex", "flexes", "flexibility", "flexibleness", "flexion", "flexions", "flexitime", "flexography", "flexor", "flexors", "flexure", "flexures", "flibbertigibbet", "flibbertigibbets", "flick", "flick knife", "flicker", "flickers", "flickertail", "flicks", "flier", "fliers", "flies", "flight", "flightiness", "flights", "flimsies", "flimsiness", "flimsy", "flinch", "flincher", "flinchers", "flinches", "flinders", "flindersia", "flindersias", "fling", "flinger", "flingers", "flings", "flint", "flintiness", "flintlock", "flintlocks", "flints", "flintshire", "flip", "flip flop", "flip flops", "flippancy", "flippant", "flippantness", "flipper", "flippers", "flips", "flirt", "flirtation", "flirtations", "flirtatiousness", "flirting", "flirtings", "flirts", "flit", "flitch", "flitches", "flite", "flites", "fliting", "flits", "flivver", "flivvers", "flo", "float", "floatage", "floatages", "floatation", "floatations", "floater", "floaters", "floatplane", "floats", "floccillation", "flocculation", "floccule", "flocculence", "floccules", "flocculus", "floccus", "flock", "flocks", "flodden", "floe", "floes", "flogger", "floggers", "flogging", "floggings", "flong", "flongs", "flood", "floodgate", "floodgates", "flooding", "floodings", "floodlight", "floodlights", "floods", "floodwater", "floodwaters", "floor", "floorboard", "floorboards", "floorcloth", "floorcloths", "floorer", "floorers", "flooring", "floorings", "floors", "floorwalker", "floorwalkers", "floozie", "floozies", "floozy", "flop", "flophouse", "flophouses", "floppies", "floppiness", "flopping", "floppy", "flops", "flor", "flora", "floras", "florence", "florences", "flores", "florescence", "florescences", "floret", "florets", "florey", "floribunda", "floribundas", "floriculture", "floriculturist", "floriculturists", "florida", "floridity", "floridness", "florigen", "florigens", "florilegium", "florin", "florins", "florist", "floristics", "florists", "florrie", "floss", "flosses", "flossie", "flotage", "flotages", "flotation", "flotations", "flotilla", "flotillas", "flotow", "flotsam", "flounce", "flounces", "flouncing", "flouncings", "flounder", "flounders", "flour", "flourish", "flourishes", "flours", "flouter", "flouters", "flow", "flow on", "flow ons", "flowage", "flowages", "flower", "flower de luce", "flowerage", "flowerages", "flowerer", "flowerers", "floweret", "flowerets", "floweriness", "flowering", "flowerings", "flowerpot", "flowerpots", "flowers", "flowing", "flowingness", "flows", "floyd", "flu", "flub", "flubs", "fluctuation", "fluctuations", "flue", "fluency", "fluentness", "flues", "fluff", "fluffiness", "fluffs", "flugelhorn", "flugelhorns", "flugelman", "fluid", "fluidics", "fluidisation", "fluidisations", "fluidity", "fluidization", "fluidizations", "fluidness", "fluids", "fluke", "flukes", "flume", "flumes", "flummeries", "flummery", "flump", "flumps", "flunk", "flunkey", "flunkeyism", "flunkeys", "flunkies", "flunks", "flunky", "fluor", "fluorescein", "fluorescence", "fluoridation", "fluoride", "fluorides", "fluorimeter", "fluorimeters", "fluorination", "fluorine", "fluorite", "fluorocarbon", "fluorocarbons", "fluorochrome", "fluorometer", "fluorometers", "fluoroscope", "fluoroscopes", "fluoroscopy", "fluorosis", "fluorspar", "flurries", "flurry", "flus", "flush", "flusher", "flushers", "flushes", "flushness", "fluster", "flusters", "flute", "fluter", "fluters", "flutes", "fluting", "flutings", "flutist", "flutists", "flutter", "fluttering", "flutters", "flux", "fluxes", "fluxion", "fluxions", "fly", "fly by night", "fly fishing", "flyaway", "flyback", "flybelt", "flybelts", "flyblow", "flyblows", "flyboat", "flyboats", "flybook", "flybooks", "flycatcher", "flycatchers", "flyer", "flyers", "flying", "flyings", "flyleaf", "flynn", "flyover", "flyovers", "flypaper", "flypapers", "flypast", "flypasts", "flysch", "flyspeck", "flyway", "flyways", "flyweight", "flyweights", "flywheel", "flywheels", "fo c s le", "fo c s les", "foal", "foals", "foam", "foaminess", "foams", "fob", "fobs", "focalisation", "focalization", "foch", "foci", "focus", "focuses", "focusing", "focussing", "fodder", "fodders", "foe", "foehn", "foehns", "foeman", "foes", "foeticide", "foeticides", "foetor", "foetus", "foetuses", "fog", "fogey", "fogeys", "fogg", "foggage", "foggages", "foggia", "fogginess", "foghorn", "foghorns", "fogies", "fogram", "fograms", "fogs", "fogsignal", "fogsignals", "fogy", "fogyism", "foible", "foibles", "foil", "foiling", "foilings", "foils", "foin", "foins", "foison", "fokine", "fokker", "folacin", "folate", "fold", "foldboat", "foldboats", "folder", "folderol", "folderols", "folders", "folding", "foldings", "folds", "folia", "foliage", "foliages", "foliation", "foliations", "foliature", "foliatures", "folie", "folio", "foliole", "folioles", "folios", "folium", "folk", "folk rock", "folkestone", "folketing", "folklore", "folklorist", "folklorists", "folkmoot", "folkmoots", "folks", "folksiness", "folktale", "folktales", "follicle", "follicles", "follies", "follow", "follow my leader", "follow on", "follow ons", "follow through", "follow throughs", "follow up", "follow ups", "follower", "followers", "following", "followings", "follows", "folly", "fomalhaut", "fomentation", "fomentations", "fomenter", "fomenters", "fomes", "fond", "fondant", "fondants", "fondler", "fondlers", "fondling", "fondlings", "fondness", "fonds", "fondue", "fondues", "font", "fontainebleau", "fontanel", "fontanelle", "fontanelles", "fontanels", "fontange", "fontanges", "fonteyn", "fonts", "food", "foods", "foodstuff", "foodstuffs", "fool", "fooleries", "foolery", "foolhardiness", "foolishness", "fools", "foolscap", "foot", "foot candle", "foot lambert", "foot pound", "foot pounds", "foot ton", "footage", "footages", "football", "footballer", "footballers", "footballs", "footbath", "footbaths", "footboard", "footboards", "footboy", "footboys", "footbridge", "footbridges", "footcloth", "footcloths", "footer", "footfall", "footfalls", "footgear", "foothill", "foothills", "foothold", "footholds", "footie", "footing", "footings", "footle", "footles", "footlight", "footlights", "footman", "footmark", "footmarks", "footnote", "footnotes", "footpace", "footpaces", "footpad", "footpads", "footpath", "footpaths", "footplate", "footplates", "footprint", "footprints", "footrest", "footrests", "foots", "footsie", "footslogger", "footsloggers", "footstalk", "footstalks", "footstep", "footsteps", "footstool", "footstools", "footway", "footways", "footwear", "footwork", "footy", "foozle", "foozles", "fop", "fopperies", "foppery", "foppishness", "fops", "forage", "forager", "foragers", "forages", "foraging", "foramen", "foraminifer", "foraminifers", "foray", "forayer", "forayers", "forays", "forb", "forbear", "forbearance", "forbears", "forbiddance", "forbiddances", "forbidder", "forbidding", "forbiddingness", "forbiddings", "forbs", "force", "force feed", "force feeds", "forcedness", "forcefulness", "forcemeat", "forcemeats", "forceps", "forcepses", "forcer", "forcers", "forces", "forcibility", "forcibleness", "ford", "fording", "fords", "fore", "fore and after", "fore and afters", "fore edge", "fore topsail", "forearm", "forearms", "forebear", "forebears", "foreboder", "foreboders", "foreboding", "forebodings", "forecast", "forecaster", "forecasters", "forecasting", "forecastle", "forecastles", "forecasts", "foreclosure", "foreclosures", "forecourse", "forecourses", "forecourt", "forecourts", "foredeck", "foredecks", "forefather", "forefathers", "forefeel", "forefeels", "forefinger", "forefingers", "forefoot", "forefront", "forefronts", "foregoer", "foregoers", "foregoneness", "foreground", "foregrounds", "foregut", "foreguts", "forehand", "forehands", "forehead", "foreheads", "forehock", "foreigner", "foreigners", "foreignism", "foreignness", "foreknowledge", "forel", "foreland", "forelands", "foreleg", "forelegs", "forelimb", "forelimbs", "forelock", "forelocks", "forels", "foreman", "foremast", "foremasts", "forename", "forenames", "forenoon", "forenoons", "forensicality", "forensics", "foreordination", "foreordinations", "forepart", "foreparts", "forepaw", "forepaws", "forepeak", "forepeaks", "foreplay", "forequarter", "forequarters", "forerunner", "forerunners", "fores", "foresail", "foresails", "foreseeability", "foreseer", "foreseers", "foreshadowing", "foreshadowings", "foresheet", "foresheets", "foreshock", "foreshocks", "foreshore", "foreshores", "foreside", "foresides", "foresight", "foresightedness", "foresights", "foreskin", "foreskins", "forest", "forestage", "forestages", "forestaller", "forestallers", "forestalling", "forestallings", "forestalment", "forestalments", "forestation", "forestations", "forestay", "forestays", "forester", "foresters", "forestry", "forests", "foretaste", "foretastes", "foreteller", "foretellers", "foretelling", "forethought", "forethoughts", "foretime", "foretimes", "foretoken", "foretokens", "foretooth", "foretop", "foretops", "forever", "forewarning", "forewarnings", "forewind", "forewinds", "forewing", "forewings", "forewoman", "foreword", "forewords", "foreyard", "foreyards", "forfar", "forfeit", "forfeiter", "forfeits", "forfeiture", "forfeitures", "forge", "forger", "forgeries", "forgers", "forgery", "forges", "forget me not", "forget me nots", "forgetfulness", "forgetter", "forgetters", "forgettery", "forging", "forgings", "forgiveness", "forgiver", "forgivers", "forgivingness", "forgoer", "forgoers", "forgoing", "forint", "forints", "fork", "forkedness", "forkiness", "forking", "forklift", "forklifts", "forks", "forlana", "forlanas", "forlornness", "form", "formal", "formaldehyde", "formalin", "formalisation", "formalisations", "formalism", "formalisms", "formalist", "formalists", "formalities", "formality", "formalization", "formalizations", "formant", "formants", "format", "formate", "formates", "formation", "formations", "formative", "formats", "formatting", "forme", "former", "formers", "formes", "formica", "formicaries", "formicarium", "formicary", "formication", "formications", "formidability", "formidableness", "formlessness", "formol", "formosa", "forms", "formula", "formularies", "formularisation", "formularising", "formularization", "formularizing", "formulary", "formulas", "formulation", "formulations", "formulator", "formulators", "formulism", "formulist", "formulists", "formwork", "fornax", "fornent", "fornication", "fornications", "fornicator", "fornicators", "fornicatress", "fornicatresses", "fornix", "fornixes", "forsakenness", "forsaking", "forsakings", "forster", "forswearing", "forswornness", "forsyth", "forsythia", "forsythias", "fort", "fortaleza", "fortalice", "fortalices", "forte", "fortepiano", "fortepianos", "fortes", "forthrightness", "forties", "fortieth", "fortieths", "fortification", "fortifications", "fortifier", "fortifiers", "fortis", "fortissimo", "fortissimos", "fortitude", "fortitudes", "fortnight", "fortnightlies", "fortnightly", "fortnights", "fortress", "fortresses", "forts", "fortuitism", "fortuitist", "fortuitists", "fortuitousness", "fortuity", "fortuna", "fortunateness", "fortune", "fortune hunter", "fortune hunters", "fortune teller", "fortune tellers", "fortunes", "forty", "forty five", "forty niner", "forum", "forums", "forward", "forwarder", "forwarders", "forwarding", "forwardings", "forwardness", "forwards", "forzando", "forzandos", "fossa", "fossas", "fosse", "fosses", "fossette", "fossettes", "fossicker", "fossil", "fossilisation", "fossilisations", "fossilization", "fossilizations", "fossils", "fossor", "fossors", "fossula", "fossulas", "fosterage", "fosterages", "fosterer", "fosterers", "fostering", "fosterings", "fosterling", "fosterlings", "fostress", "fostresses", "fother", "fothergilla", "fothergillas", "fotheringhay", "fothers", "foucault", "foul", "foul up", "foul ups", "foulard", "foulards", "foulmart", "foulmarts", "foulness", "fouls", "foumart", "foumarts", "found", "foundation", "foundations", "founder", "foundering", "founders", "founding", "foundings", "foundling", "foundlings", "foundress", "foundresses", "foundries", "foundry", "founds", "fount", "fountain", "fountains", "founts", "four", "four ball", "four in hand", "four in hands", "four poster", "four posters", "four pounder", "four pounders", "four wheeler", "four wheelers", "fourchette", "fourchettes", "fourgon", "fourgons", "fourier", "fourierism", "fourpence", "fourpences", "fours", "fourscore", "fourscores", "foursome", "foursomes", "foursquare", "fourteen", "fourteener", "fourteeners", "fourteens", "fourteenth", "fourteenths", "fourth", "fourths", "fouter", "fouters", "fovea", "foveola", "foveolas", "foveole", "foveoles", "fowey", "fowl", "fowler", "fowlers", "fowling", "fowlings", "fowls", "fox", "fox hunting", "foxberries", "foxberry", "foxe", "foxes", "foxfire", "foxglove", "foxgloves", "foxhole", "foxholes", "foxhound", "foxhounds", "foxiness", "foxing", "foxings", "foxtrot", "foxtrots", "foy", "foyer", "foyers", "foys", "foziness", "fracas", "fractal", "fractals", "fraction", "fractionation", "fractionations", "fractionator", "fractionators", "fractionisation", "fractionization", "fractions", "fractiousness", "fracture", "fractures", "fraenum", "fragging", "fraggings", "fragileness", "fragility", "fragment", "fragmentariness", "fragmentary", "fragmentation", "fragmentations", "fragments", "fragonard", "fragrance", "fragrances", "fragrancies", "fragrancy", "fragrantness", "frail", "frailness", "frails", "frailties", "frailty", "fraise", "fraises", "fraktur", "framboesia", "framboise", "framboises", "frame", "frame up", "frame ups", "framer", "framers", "frames", "framework", "frameworks", "framing", "framings", "franc", "franc tireur", "france", "frances", "francesca", "franchise", "franchisees", "franchisement", "franchisements", "franchiser", "franchisers", "franchises", "francine", "francis", "franciscan", "franciscans", "francium", "franck", "franco", "francolin", "francolins", "francophil", "francophile", "francophiles", "francophils", "francophobe", "francophobes", "francophobia", "francophone", "francophones", "francs", "frangibility", "frangipane", "frangipanes", "frangipani", "frangipanis", "franglais", "frank", "frankalmoign", "frankenstein", "frankensteins", "franker", "frankfort", "frankfurt", "frankfurter", "frankfurters", "frankie", "frankincense", "frankish", "franklin", "franklinite", "franklins", "frankness", "franks", "franticness", "franz", "fraser", "frass", "frat", "fratch", "fratches", "fratching", "frater", "fraternisation", "fraternisations", "fraterniser", "fraternisers", "fraternities", "fraternity", "fraternization", "fraternizations", "fraternizer", "fraternizers", "fraters", "fratricide", "fratricides", "fratries", "fratry", "frats", "frau", "fraud", "frauds", "fraudulence", "fraudulency", "fraught", "fraunhofer", "fraus", "fray", "frays", "frazer", "frazier", "frazil", "frazils", "frazzle", "frazzles", "freak", "freak out", "freak outs", "freakiness", "freakishness", "freaks", "freckle", "freckles", "fred", "freda", "freddie", "freddy", "frederic", "frederica", "frederick", "fredericton", "frederiksberg", "free", "free for all", "free for alls", "free liver", "free livers", "free living", "free reed", "free spokenness", "free trader", "free traders", "freebie", "freebies", "freebooter", "freebooters", "freebooty", "freedman", "freedom", "freedoms", "freedwoman", "freehold", "freeholder", "freeholders", "freeholds", "freeing", "freeloader", "freeloaders", "freeloading", "freeloadings", "freeman", "freemartin", "freemartins", "freemason", "freemasonry", "freemasons", "freeness", "freer", "freers", "frees", "freesheet", "freesheets", "freesia", "freesias", "freestone", "freestones", "freetown", "freeware", "freeway", "freeways", "freewheel", "freewheels", "freewoman", "freeze", "freeze up", "freezer", "freezers", "freezes", "freezing", "freiburg", "freight", "freightage", "freightages", "freighter", "freighters", "freightliner", "freightliners", "freights", "fremantle", "fremitus", "fremituses", "french", "frenchification", "frenchiness", "frenchman", "frenchwoman", "frenchy", "frenulum", "frenum", "frenzies", "frenzy", "freon", "frequence", "frequences", "frequencies", "frequency", "frequentation", "frequentations", "frequentative", "frequenter", "frequenters", "frequentness", "fresco", "frescobaldi", "frescoer", "frescoers", "frescoes", "frescos", "fresh", "freshener", "fresheners", "fresher", "freshers", "freshes", "freshet", "freshets", "freshman", "freshmanship", "freshmanships", "freshness", "freshwater", "fresnel", "fresnels", "fresno", "fret", "fretfulness", "frets", "fretsaw", "fretsaws", "fretwork", "freud", "freudian", "freudians", "frey", "freya", "friability", "friableness", "friar", "friarbird", "friarbirds", "friaries", "friars", "friary", "fribble", "fribbler", "fribblers", "fribbles", "fricandeau", "fricassee", "fricassees", "fricative", "fricatives", "friction", "frictions", "friday", "fridays", "fridge", "fridges", "frieda", "friedcake", "friedman", "friedrich", "friend", "friendlessness", "friendlies", "friendliness", "friendly", "friends", "friendship", "friendships", "frier", "friers", "fries", "friesian", "friesland", "frieze", "friezes", "friezing", "frigate", "frigates", "frigger", "friggers", "fright", "frightener", "frighteners", "frightening", "frightfulness", "frights", "frigidaire", "frigidaires", "frigidarium", "frigidity", "frigidness", "frijol", "frijole", "frijoles", "frill", "frilling", "frillings", "frills", "frimaire", "friml", "fringe", "fringes", "fringillid", "fripperies", "frippery", "frippet", "frippets", "fris", "frisbee", "frisbees", "frisch", "frises", "frisette", "frisettes", "friseur", "friseurs", "frisian", "frisk", "frisker", "friskers", "frisket", "friskets", "friskiness", "frisking", "friskings", "frisks", "frisson", "frissons", "frit", "frith", "friths", "frithstool", "frithstools", "fritillaries", "fritillary", "frits", "fritter", "fritterer", "fritterers", "fritters", "fritz", "frivolities", "frivolity", "frivolousness", "friz", "frizes", "frizz", "frizzes", "frizzle", "frizzles", "frobisher", "frock", "frocking", "frocks", "froe", "froes", "frog", "frogbit", "frogbits", "frogfish", "frogfishes", "frogging", "frogman", "frogmarch", "frogmarches", "frogmouth", "frogmouths", "frogs", "froissart", "frolic", "frolicker", "frolickers", "frolics", "frolicsomeness", "frome", "fromenties", "fromenty", "frond", "fronde", "frondescence", "fronds", "front", "front page", "front runner", "front runners", "frontage", "frontages", "frontal", "frontals", "frontier", "frontiers", "frontiersman", "frontispiece", "frontispieces", "frontlet", "frontlets", "frontogenesis", "frontolysis", "fronton", "frontons", "fronts", "frost", "frostbite", "frostbites", "frostiness", "frosting", "frosts", "frostwork", "frostworks", "froth", "frothiness", "froths", "frottage", "frottages", "frotteur", "frotteurs", "frounce", "frow", "frowardness", "frown", "frowns", "frows", "frowst", "frowstiness", "frowsts", "fructidor", "fructification", "fructifications", "fructose", "frugalities", "frugality", "fruit", "fruitage", "fruitarian", "fruitarians", "fruiter", "fruiterer", "fruiterers", "fruiteries", "fruitery", "fruitfulness", "fruitiness", "fruition", "fruitions", "fruitlessness", "fruitlet", "fruitlets", "fruits", "fruitwood", "fruitwoods", "frumenties", "frumenty", "frump", "frumpiness", "frumpishness", "frumps", "frustrating", "frustration", "frustrations", "frustule", "frustules", "frustum", "frustums", "fry", "fryer", "fryers", "frying", "fryings", "fuchs", "fuchsia", "fuchsias", "fuchsite", "fucoid", "fucoids", "fucus", "fucuses", "fuddle", "fuddles", "fuddy duddies", "fuddy duddy", "fudge", "fudges", "fuehrer", "fuel", "fueller", "fuellers", "fuels", "fug", "fugaciousness", "fugacity", "fugato", "fugatos", "fughetta", "fughettas", "fugitive", "fugitiveness", "fugitives", "fugleman", "fugs", "fugue", "fugues", "fuguist", "fuguists", "fuji", "fukuoka", "fula", "fulah", "fulahs", "fulani", "fulanis", "fulas", "fulbright", "fulcrum", "fulcrums", "fulfiller", "fulfillers", "fulfillment", "fulfillments", "fulfilment", "fulfilments", "fulgor", "fulguration", "fulgurations", "fulgurite", "fulham", "fulhams", "full", "full frontal", "full length", "full scale", "fullam", "fullams", "fullback", "fullbacks", "fuller", "fullers", "fullness", "fulls", "fulmar", "fulmars", "fulminate", "fulminates", "fulmination", "fulminations", "fulness", "fulsomeness", "fumage", "fumages", "fumarole", "fumaroles", "fumatories", "fumatorium", "fumatoriums", "fumatory", "fumble", "fumbler", "fumblers", "fumbles", "fume", "fumes", "fumet", "fumets", "fumigant", "fumigants", "fumigation", "fumigations", "fumigator", "fumigators", "fumitories", "fumitory", "fun", "funambulist", "funambulists", "function", "functional", "functionalism", "functionalist", "functionalists", "functionaries", "functionary", "functioning", "functions", "fund", "fundament", "fundamental", "fundamentalism", "fundamentalist", "fundamentalists", "fundamentality", "fundamentals", "fundaments", "fundi", "fundies", "funding", "fundings", "funds", "fundus", "funeral", "funerals", "funfair", "funfairs", "fungi", "fungible", "fungibles", "fungicide", "fungicides", "fungosity", "fungus", "funguses", "funicle", "funicles", "funicular", "funiculars", "funiculus", "funk", "funkia", "funkias", "funks", "funned", "funnel", "funnel web", "funnel webs", "funnels", "funnies", "funniness", "funning", "funny", "funs", "funster", "funsters", "fur", "furan", "furane", "furanes", "furans", "furbelow", "furbelows", "furbisher", "furbishers", "furcation", "furcations", "furcula", "furculas", "furfur", "furfural", "furfuraldehyde", "furfuran", "furfurol", "furfurs", "furies", "furioso", "furiosos", "furiousness", "furl", "furlana", "furlanas", "furlong", "furlongs", "furlough", "furloughs", "furls", "furmenties", "furmenty", "furnace", "furnaces", "furness", "furnisher", "furnishers", "furnishing", "furnishings", "furniture", "furor", "furore", "furores", "furors", "furphies", "furphy", "furrier", "furrieries", "furriers", "furriery", "furriness", "furring", "furrings", "furrow", "furrows", "furs", "furtherance", "furtherances", "furtherer", "furtherers", "furtiveness", "furuncle", "furuncles", "furunculosis", "fury", "furze", "fusain", "fusains", "fusarole", "fusaroles", "fuse", "fusee", "fusees", "fuselage", "fuselages", "fuseli", "fuses", "fushun", "fusibility", "fusil", "fusilier", "fusiliers", "fusillade", "fusillades", "fusils", "fusion", "fusionism", "fusionist", "fusionists", "fusions", "fuss", "fuss budget", "fusser", "fussers", "fusses", "fussiness", "fustanella", "fustanellas", "fustet", "fustets", "fustian", "fustians", "fustic", "fustics", "fustigation", "fustigations", "fustiness", "futhark", "futilitarian", "futilitarians", "futilities", "futility", "futon", "futons", "futtock", "futtocks", "future", "futures", "futurism", "futurist", "futurists", "futurities", "futurity", "futurology", "fuze", "fuzee", "fuzees", "fuzes", "fuzz", "fuzzes", "fuzziness", "fyke", "fykes", "fylde", "fylfot", "fylfots", "fyodor", "fyrd", "fyrds", "fytte", "fyttes", "g man", "g string", "g strings", "g suit", "g suits", "gab", "gabardine", "gabardines", "gabbard", "gabbards", "gabber", "gabbers", "gabble", "gabbler", "gabblers", "gabbles", "gabbro", "gabbros", "gabelle", "gabelles", "gaberdine", "gaberdines", "gaberlunzie", "gaberlunzies", "gabfest", "gabfests", "gabies", "gabion", "gabionade", "gabionades", "gabions", "gable", "gables", "gablet", "gablets", "gabon", "gabriel", "gabrieli", "gabrielle", "gabs", "gaby", "gad", "gadabout", "gadabouts", "gaddafi", "gadder", "gadders", "gades", "gadflies", "gadfly", "gadget", "gadgeteer", "gadgeteers", "gadgetry", "gadgets", "gadhelic", "gadling", "gadoid", "gadoids", "gadolinite", "gadolinium", "gadroon", "gadrooning", "gadroonings", "gadroons", "gads", "gadwall", "gadwalls", "gaea", "gaekwar", "gael", "gaelic", "gaels", "gaeltacht", "gaff", "gaff topsail", "gaffe", "gaffer", "gaffers", "gaffes", "gaffs", "gag", "gag bit", "gagarin", "gage", "gages", "gagger", "gaggers", "gaggle", "gaggles", "gagman", "gags", "gagster", "gagsters", "gahnite", "gaia", "gaiety", "gaikwar", "gail", "gaillard", "gaillards", "gain", "gainer", "gainers", "gainfulness", "gainlessness", "gains", "gainsayer", "gainsayers", "gainsborough", "gait", "gaiter", "gaiters", "gaits", "gaitskell", "gaius", "gal", "gala", "galactagogue", "galactagogues", "galactometer", "galactometers", "galactopoietic", "galactose", "galago", "galagos", "galah", "galahad", "galahads", "galahs", "galangal", "galangals", "galantine", "galantines", "galapagos", "galas", "galashiels", "galatea", "galatia", "galatian", "galatians", "galaxies", "galaxy", "galba", "galbanum", "galbraith", "gale", "galea", "galeas", "galen", "galena", "galenism", "galenist", "galenite", "gales", "galicia", "galician", "galicians", "galilean", "galilee", "galilees", "galileo", "galimatias", "galimatiases", "galingale", "galingales", "galiot", "galiots", "galipot", "gall", "gallant", "gallantness", "gallantries", "gallantry", "gallants", "gallate", "gallates", "galleass", "galleasses", "galleon", "galleons", "galleria", "gallerias", "galleries", "gallery", "galleryite", "galleryites", "gallet", "galleting", "gallets", "galley", "galleys", "galliambic", "galliambics", "galliard", "galliardise", "galliardises", "galliards", "galliass", "gallican", "gallicanism", "gallicism", "gallicisms", "gallimaufries", "gallimaufry", "gallinule", "gallinules", "galliot", "galliots", "gallipoli", "gallipot", "gallipots", "gallium", "galliwasp", "galliwasps", "galloglass", "galloglasses", "gallon", "gallonage", "gallonages", "gallons", "galloon", "galloons", "gallop", "gallopade", "gallopades", "galloper", "gallopers", "gallops", "galloway", "gallowglass", "gallowglasses", "gallows", "gallowses", "galls", "gallup", "gallus", "galluses", "galoot", "galoots", "galop", "galops", "galosh", "galoshes", "gals", "galsworthy", "galton", "galvani", "galvanisation", "galvanisations", "galvaniser", "galvanisers", "galvanism", "galvanization", "galvanizations", "galvanize", "galvanizer", "galvanizers", "galvanizes", "galvanizing", "galvanometer", "galvanometers", "galvanometry", "galvanoplasty", "galvanoscope", "galvanoscopes", "galway", "galwegian", "gam", "gamal", "gamb", "gamba", "gambado", "gambadoes", "gambados", "gambas", "gambeson", "gambesons", "gambia", "gambier", "gambit", "gambits", "gamble", "gambler", "gamblers", "gambles", "gambling", "gamboge", "gambol", "gambols", "gambrel", "gambrels", "gambs", "game", "gamecock", "gamecocks", "gamekeeper", "gamekeepers", "gamelan", "gamelans", "gameness", "gamer", "games", "gamesmanship", "gamesomeness", "gamest", "gamester", "gamesters", "gametangium", "gamete", "gametes", "gametocyte", "gametocytes", "gametogenesis", "gametophyte", "gametophytes", "gamin", "gamine", "gamines", "gaminess", "gaming", "gamings", "gamins", "gamma", "gammadion", "gammas", "gammer", "gammers", "gammexane", "gammon", "gammoner", "gammoners", "gammoning", "gammonings", "gammons", "gamogenesis", "gamp", "gamps", "gams", "gamut", "gamuts", "gander", "ganders", "gandhi", "gandhiism", "gandhist", "ganesa", "ganesha", "gang", "gangbang", "gangbangs", "gangboard", "gangboards", "ganger", "gangers", "ganges", "gangland", "ganglands", "ganglia", "ganglion", "ganglions", "gangplank", "gangplanks", "gangrel", "gangrels", "gangrene", "gangrenes", "gangs", "gangster", "gangsters", "gangue", "gangues", "gangway", "gangways", "ganister", "ganja", "gannet", "gannets", "ganoid", "ganoids", "ganoin", "ganoine", "gansey", "ganseys", "gantlet", "gantlets", "gantline", "gantlines", "gantlope", "gantries", "gantry", "ganymede", "gaol", "gaoler", "gaolers", "gaols", "gap", "gape", "gaper", "gapers", "gapes", "gapeseed", "gapeseeds", "gapeworm", "gapeworms", "gapping", "gaps", "gar", "garage", "garages", "garamond", "garb", "garbage", "garbages", "garbanzo", "garbanzos", "garbes", "garble", "garbler", "garblers", "garbles", "garbo", "garboard", "garboards", "garboil", "garbology", "garbos", "garbs", "garcia", "gard", "garden", "gardener", "gardeners", "gardenia", "gardenias", "gardening", "gardens", "garderobe", "garderobes", "gardner", "gare", "garefowl", "garefowls", "gareth", "garfield", "garfish", "garfishes", "garganey", "garganeys", "gargantua", "garget", "gargle", "gargles", "gargoyle", "gargoyles", "gargoylism", "garibaldi", "garibaldis", "garishness", "garland", "garlands", "garlic", "garlics", "garment", "garments", "garner", "garners", "garnet", "garnets", "garnett", "garnierite", "garnish", "garnishee", "garnishees", "garnisher", "garnishers", "garnishes", "garnishment", "garnishments", "garniture", "garnitures", "garonne", "garotte", "garotter", "garotters", "garottes", "garpike", "garpikes", "garret", "garreteer", "garreteers", "garrets", "garrick", "garrison", "garrisons", "garrot", "garrote", "garrotes", "garrots", "garrotte", "garrotter", "garrotters", "garrottes", "garrulity", "garrulousness", "garry", "garrya", "garryas", "gars", "garter", "garters", "garth", "garths", "garuda", "garudas", "gary", "gas", "gas plant", "gascoigne", "gascon", "gascons", "gascony", "gaseity", "gaselier", "gaseliers", "gaseousness", "gases", "gash", "gashes", "gasification", "gasifier", "gasifiers", "gaskell", "gasket", "gaskets", "gaskin", "gaskins", "gaslight", "gaslights", "gasman", "gasogene", "gasohol", "gasohols", "gasolene", "gasolier", "gasoliers", "gasoline", "gasometer", "gasometers", "gasometry", "gasp", "gasper", "gaspereau", "gaspers", "gasps", "gasser", "gassers", "gassiness", "gassing", "gassings", "gaster", "gasteropod", "gasteropods", "gaston", "gastralgia", "gastralgic", "gastrectomies", "gastrectomy", "gastrin", "gastritis", "gastrocnemius", "gastroenteritis", "gastroenterologist", "gastroenterology", "gastrology", "gastronome", "gastronomes", "gastronomy", "gastropod", "gastropoda", "gastropods", "gastroscope", "gastroscopes", "gastrostomies", "gastrostomy", "gastrotomies", "gastrotomy", "gastrula", "gastrulas", "gastrulation", "gat", "gate", "gateau", "gateaus", "gatecrasher", "gatecrashers", "gatefold", "gatefolds", "gatehouse", "gatehouses", "gateman", "gatepost", "gateposts", "gates", "gateshead", "gateway", "gateways", "gath", "gather", "gatherer", "gatherers", "gathering", "gatherings", "gathers", "gator", "gators", "gats", "gaucheness", "gaucherie", "gaucheries", "gaucho", "gauchos", "gaud", "gaudeamus", "gaudery", "gaudies", "gaudiness", "gauds", "gaudy", "gauffer", "gauffering", "gauffers", "gaugamela", "gauge", "gauger", "gaugers", "gauges", "gauguin", "gaul", "gaulish", "gaulle", "gaullism", "gaullist", "gauls", "gaultheria", "gaultherias", "gauntlet", "gauntlets", "gauntness", "gauntries", "gauntry", "gaur", "gaurs", "gauss", "gausses", "gauze", "gauzes", "gauziness", "gavage", "gavages", "gavel", "gavelkind", "gavelkinds", "gavelock", "gavelocks", "gavels", "gavial", "gavials", "gavin", "gavotte", "gavottes", "gawain", "gawk", "gawkiness", "gawks", "gay", "gay lussac", "gaya", "gayal", "gayals", "gaye", "gayety", "gayness", "gaynor", "gays", "gaza", "gazania", "gazanias", "gaze", "gazebo", "gazeboes", "gazebos", "gazelle", "gazelles", "gazer", "gazers", "gazes", "gazette", "gazetteer", "gazetteers", "gazettes", "gaziantep", "gazogene", "gazogenes", "gazpacho", "gazpachos", "gazump", "gazumps", "gdansk", "gean", "geans", "geanticlinal", "geanticline", "geanticlines", "gear", "gearbox", "gearboxes", "gearing", "gears", "gearstick", "gearsticks", "geck", "gecko", "geckoes", "geckos", "gecks", "gee", "gee gee", "gee gees", "geebung", "geebungs", "geegaw", "geegaws", "geek", "geeks", "gees", "geese", "geezer", "geezers", "gegenschein", "gehenna", "geiger", "geisha", "geishas", "geitonogamy", "gel", "gelada", "geladas", "gelatin", "gelatination", "gelatinations", "gelatine", "gelatinisation", "gelatinisations", "gelatiniser", "gelatinisers", "gelatinization", "gelatinizations", "gelatinizer", "gelatinizers", "gelatinoid", "gelatinoids", "gelation", "geld", "gelder", "gelders", "gelding", "geldings", "gelds", "gelidity", "gelidness", "gelignite", "gelligaer", "gelly", "gels", "gelsenkirchen", "gelt", "gelts", "gem", "gemara", "gemel", "gemels", "gemination", "geminations", "gemini", "geminian", "geminians", "geminis", "gemma", "gemmation", "gemmed", "gemming", "gemmologist", "gemmologists", "gemmulation", "gemmule", "gemmules", "gemologist", "gemologists", "gemology", "gemot", "gemots", "gems", "gemsbok", "gemsboks", "gemstone", "gemstones", "gen", "gena", "genappe", "genas", "gendarme", "gendarmerie", "gendarmeries", "gendarmes", "gender", "genders", "gene", "genealogies", "genealogist", "genealogists", "genealogy", "genera", "general", "generalisation", "generalisations", "generalissimo", "generalissimos", "generalist", "generalists", "generalities", "generality", "generalization", "generalizations", "generals", "generalship", "generalships", "generation", "generations", "generator", "generators", "generatrix", "generosities", "generosity", "generousness", "genes", "genesis", "genet", "genethlialogy", "geneticist", "geneticists", "genetics", "genets", "geneva", "genevan", "genevas", "genevese", "genevieve", "genialities", "geniality", "genialness", "geniculation", "genie", "genies", "genii", "genip", "genipap", "genipaps", "genips", "genista", "genistas", "genitalia", "genitals", "genitive", "genitives", "genitor", "genitors", "geniture", "genius", "geniuses", "genizah", "genizahs", "genoa", "genoas", "genocide", "genocides", "genoese", "genome", "genomes", "genotype", "genotypes", "genova", "genovese", "genre", "genres", "gens", "gent", "genteelism", "genteelisms", "genteelness", "gentes", "gentian", "gentianella", "gentianellas", "gentians", "gentile", "gentiles", "gentilesse", "gentilism", "gentilities", "gentility", "gentle", "gentlehood", "gentleman", "gentleman at arms", "gentleman commoner", "gentlemanliness", "gentleness", "gentles", "gentlewoman", "gentries", "gentrification", "gentrifications", "gentry", "gents", "genu", "genuflection", "genuflections", "genuflexion", "genuflexions", "genuineness", "genus", "genuses", "geochemist", "geochemistry", "geochemists", "geochronologist", "geochronology", "geode", "geodes", "geodesic", "geodesist", "geodesists", "geodesy", "geodynamics", "geoff", "geoffrey", "geognosy", "geographer", "geographers", "geography", "geoid", "geoids", "geologise", "geologises", "geologist", "geologists", "geology", "geomagnetism", "geomagnetist", "geomagnetists", "geomancer", "geomancers", "geomancy", "geomedicine", "geometer", "geometers", "geometrician", "geometricians", "geometrid", "geometrids", "geometries", "geometry", "geomorphologist", "geomorphology", "geophagist", "geophagists", "geophagy", "geophysicist", "geophysicists", "geophysics", "geophyte", "geophytes", "geopolitician", "geopoliticians", "geopolitics", "geoponics", "george", "georgette", "georgia", "georgian", "georgiana", "georgians", "georgic", "georgics", "georgie", "georgina", "geoscience", "geosphere", "geostatics", "geostrategy", "geosynclinal", "geosyncline", "geosynclines", "geotaxis", "geotropism", "gerah", "gerahs", "geraint", "gerald", "geraldine", "geraniol", "geranium", "geraniums", "gerard", "gerbera", "gerberas", "gerbil", "gerbille", "gerbilles", "gerbils", "gerda", "gerent", "gerents", "gerenuk", "gerenuks", "gerfalcon", "gerfalcons", "geriatric", "geriatrician", "geriatricians", "geriatrics", "geriatrist", "geriatrists", "germ", "german", "germander", "germanders", "germaneness", "germanic", "germanisation", "germanism", "germanist", "germanium", "germanization", "germanophile", "germanophobe", "germans", "germany", "germen", "germens", "germicide", "germicides", "germinal", "germination", "germinations", "germs", "geronimo", "gerontocracies", "gerontocracy", "gerontologist", "gerontologists", "gerontology", "gerry", "gerrymander", "gerrymanderer", "gerrymanderers", "gerrymanders", "gers", "gershwin", "gertie", "gertrude", "gerund", "gerundive", "gerundives", "gerunds", "gervase", "geryon", "gesneria", "gesnerias", "gesso", "gessoes", "gest", "gestalt", "gestalts", "gestapo", "gestation", "gestations", "geste", "gestes", "gesticulation", "gesticulations", "gesticulator", "gesticulators", "gests", "gesture", "gestures", "get", "get out", "get together", "get togethers", "get up and go", "geta", "getas", "getaway", "getaways", "gethsemane", "gets", "getter", "gettering", "getterings", "getters", "getting", "gettings", "getty", "gettysburg", "geum", "geums", "gewgaw", "gewgaws", "geyser", "geyserite", "geyserites", "geysers", "ghana", "ghanaian", "ghanaians", "gharial", "gharials", "gharries", "gharry", "ghastliness", "ghat", "ghats", "ghaut", "ghauts", "ghazal", "ghazals", "ghazi", "ghazis", "gheber", "ghebers", "ghee", "ghees", "ghent", "gherao", "gheraos", "gherkin", "gherkins", "ghetto", "ghettoes", "ghettos", "ghibelline", "ghibellines", "ghillie", "ghillies", "ghost", "ghostliness", "ghosts", "ghoul", "ghoulishness", "ghouls", "ghyll", "ghylls", "giacometti", "giacomo", "giant", "giantess", "giantesses", "giantism", "giants", "giaour", "giaours", "giardia", "gib", "gibber", "gibberellin", "gibberellins", "gibberish", "gibbers", "gibbet", "gibbets", "gibbon", "gibbons", "gibbosity", "gibbousness", "gibbs", "gibbsite", "gibe", "gibeonite", "giber", "gibers", "gibes", "giblet", "giblets", "gibraltar", "gibs", "gibson", "gibus", "gibuses", "gid", "giddiness", "gide", "gideon", "gidgee", "gidgees", "gielgud", "gift", "giftedness", "gifts", "giftwrapping", "gig", "gigabyte", "gigabytes", "gigahertz", "gigantism", "gigantomachia", "gigantomachias", "gigantomachies", "gigantomachy", "gigawatt", "gigawatts", "giggle", "giggler", "gigglers", "giggles", "gigi", "giglet", "giglets", "gigli", "gigolo", "gigolos", "gigot", "gigots", "gigs", "gigue", "gigues", "gil", "gila", "gilas", "gilbert", "gilbertine", "gilberts", "gild", "gilder", "gilders", "gilding", "gildings", "gilds", "gilead", "giles", "gilet", "gilets", "gilgai", "gilgais", "gilgamesh", "gill", "gillespie", "gillette", "gilliam", "gillian", "gillie", "gillies", "gilling", "gillingham", "gillion", "gillions", "gillray", "gills", "gilly", "gillyflower", "gillyflowers", "gilsonite", "gilt", "gilts", "gimbals", "gimcrack", "gimcrackery", "gimcracks", "gimlet", "gimlets", "gimmal", "gimmals", "gimmick", "gimmickries", "gimmickry", "gimmicks", "gimp", "gimps", "gin", "gina", "gingal", "gingals", "gingellies", "gingelly", "ginger", "gingerbread", "gingerbreads", "gingers", "gingersnap", "gingersnaps", "gingham", "ginghams", "gingili", "gingilis", "gingiva", "gingivitis", "gingko", "gingkoes", "ginglymus", "ginglymuses", "gink", "ginkgo", "ginkgoes", "ginks", "ginnel", "ginnels", "ginner", "ginneries", "ginners", "ginnery", "gins", "ginsberg", "ginseng", "ginsengs", "gioconda", "giorgione", "giotto", "gip", "gips", "gipsies", "gipsy", "giraffe", "giraffes", "girandola", "girandolas", "girandole", "girandoles", "girasol", "girasoles", "girasols", "giraud", "gird", "girder", "girders", "girdle", "girdler", "girdlers", "girdles", "girds", "girl", "girlfriend", "girlfriends", "girlhood", "girlhoods", "girlie", "girlies", "girlishness", "girls", "girn", "girns", "giro", "giron", "gironde", "girondism", "girondist", "girons", "giros", "girosol", "girosols", "girth", "girthline", "girthlines", "girths", "gisarme", "gisarmes", "gisborne", "giselle", "gish", "gissing", "gist", "gists", "git", "gites", "gits", "gittern", "gitterns", "giulini", "giuseppe", "give", "give and take", "giveaway", "giveaways", "given", "givenness", "giver", "givers", "gives", "giving", "givings", "giza", "gizmo", "gizmos", "gizzard", "gizzards", "glabella", "glacialist", "glacialists", "glaciation", "glaciations", "glacier", "glaciers", "glaciologist", "glaciologists", "glaciology", "glacis", "glacises", "glad", "glad hander", "glad handers", "gladdon", "gladdons", "glade", "glades", "gladfulness", "gladiator", "gladiators", "gladiolus", "gladioluses", "gladius", "gladiuses", "gladness", "glads", "gladsomeness", "gladstone", "gladys", "glair", "glairs", "glaive", "glamor", "glamorgan", "glamorganshire", "glamorization", "glamorizations", "glamorizer", "glamorizers", "glamors", "glamour", "glamours", "glance", "glances", "gland", "glanders", "glandes", "glands", "glandule", "glandules", "glans", "glare", "glares", "glaringness", "glasgow", "glass", "glass blower", "glass blowers", "glass blowing", "glass maker", "glass makers", "glasses", "glassful", "glassfuls", "glasshouse", "glasshouses", "glassine", "glassiness", "glassman", "glassware", "glasswares", "glasswork", "glassworker", "glassworkers", "glassworks", "glasswort", "glassworts", "glastonbury", "glaswegian", "glaswegians", "glauberite", "glaucescence", "glaucoma", "glauconite", "glaucus", "glaze", "glazer", "glazers", "glazes", "glazier", "glaziers", "glazing", "glazings", "glazunov", "gleam", "gleaming", "gleamings", "gleams", "gleaner", "gleaners", "gleaning", "gleanings", "glebe", "glebes", "glede", "gledes", "glee", "gleed", "gleeds", "gleefulness", "gleek", "gleeks", "gleeman", "glees", "gleet", "gleets", "glen", "glencoe", "glenda", "glendower", "glengarries", "glengarry", "glenn", "glennie", "glenrothes", "glens", "gley", "gleys", "glia", "gliadin", "glibness", "glidder", "glide", "glider", "gliders", "glides", "gliding", "glidings", "gliff", "gliffs", "glim", "glimmer", "glimmering", "glimmerings", "glimmers", "glimpse", "glimpses", "glims", "glinka", "glint", "glints", "glioma", "gliomas", "glisk", "glisks", "glissade", "glissades", "glissando", "glissandos", "glisten", "glistens", "glister", "glisters", "glitch", "glitches", "glitter", "glitters", "glitz", "gliwice", "gloaming", "gloamings", "gloat", "gloater", "gloaters", "gloating", "gloats", "glob", "globe", "globes", "globigerina", "globin", "globoid", "globosities", "globosity", "globs", "globularity", "globule", "globules", "globulin", "glockenspiel", "glockenspiels", "glogg", "gloggs", "glomeration", "glomerations", "glomerule", "glomerules", "glomerulus", "glonoin", "gloom", "gloominess", "glooming", "gloomings", "glooms", "glop", "glops", "gloria", "gloriana", "glorias", "glories", "glorification", "glorifications", "gloriole", "glorioles", "gloriosa", "gloriosas", "gloriousness", "glory", "glory of the snow", "glory pea", "gloss", "glossa", "glossaries", "glossarist", "glossarists", "glossary", "glossas", "glossator", "glossators", "glossectomies", "glossectomy", "glosseme", "glossemes", "glosser", "glossers", "glosses", "glossies", "glossina", "glossinas", "glossiness", "glossitis", "glossographer", "glossographers", "glossography", "glossolalia", "glossologist", "glossologists", "glossology", "glossy", "glottis", "glottises", "glottochronology", "glottology", "gloucester", "gloucestershire", "glove", "glover", "glovers", "gloves", "glow", "glow worm", "glow worms", "glower", "glowers", "glowing", "glows", "gloxinia", "gloxinias", "gloze", "glozes", "glucagon", "glucinium", "glucinum", "gluck", "glucocorticoid", "gluconeogenesis", "glucoprotein", "glucoproteins", "glucose", "glucoside", "glucosides", "glucosuria", "glue", "gluer", "gluers", "glues", "glueyness", "glume", "glumes", "glumness", "gluon", "gluons", "glut", "glutamate", "glutamates", "glutamine", "glutelin", "glutelins", "gluten", "gluteus", "gluts", "glutton", "gluttons", "gluttony", "glyceria", "glyceride", "glycerides", "glycerin", "glycerine", "glycerol", "glyceryl", "glycine", "glycocoll", "glycogen", "glycogenesis", "glycol", "glycols", "glycolysis", "glycoprotein", "glycoproteins", "glycoside", "glycosuria", "glyn", "glynis", "glyph", "glyphograph", "glyphographer", "glyphographers", "glyphographs", "glyphography", "glyphs", "glyptics", "glyptodont", "glyptodonts", "glyptography", "gnamma", "gnarl", "gnarls", "gnash", "gnashes", "gnat", "gnatcatcher", "gnatcatchers", "gnathite", "gnathites", "gnats", "gnaw", "gnawer", "gnawers", "gnawing", "gnaws", "gneiss", "gnome", "gnomes", "gnomist", "gnomists", "gnomon", "gnomons", "gnosis", "gnostic", "gnosticism", "gnotobiosis", "gnotobiote", "gnotobiotes", "gnotobiotics", "gnu", "gnus", "go", "go ahead", "go around", "go arounds", "go between", "go betweens", "go cart", "go carts", "go devil", "go getter", "go getters", "go kart", "go karts", "go slow", "go slows", "goa", "goad", "goading", "goads", "goaf", "goafs", "goal", "goal kick", "goal kicks", "goalie", "goalies", "goalmouth", "goalmouths", "goalpost", "goalposts", "goals", "goanna", "goannas", "goat", "goat s rue", "goatee", "goatees", "goatherd", "goatherds", "goatishness", "goats", "goatskin", "goatskins", "goatsucker", "goatsuckers", "gob", "gobang", "gobbet", "gobbets", "gobble", "gobbledegook", "gobbledygook", "gobbler", "gobblers", "gobbles", "gobelin", "gobelins", "gobi", "gobies", "gobioid", "goblet", "goblets", "goblin", "goblins", "gobo", "goboes", "gobos", "gobs", "gobstopper", "gobstoppers", "goby", "god", "godard", "godchild", "goddaughter", "goddaughters", "godded", "goddess", "goddesses", "godet", "godetia", "godetias", "godets", "godfather", "godfathers", "godfrey", "godhead", "godheads", "godhood", "godiva", "godlessness", "godliness", "godling", "godlings", "godmother", "godmothers", "godown", "godowns", "godparent", "godparents", "godroon", "godroons", "gods", "godsend", "godsends", "godship", "godships", "godson", "godsons", "godspeed", "godspeeds", "godunov", "godwin", "godwit", "godwits", "goebbels", "goer", "goers", "goes", "goethe", "goethite", "gofer", "gofers", "goffer", "goffering", "gofferings", "goffers", "gog", "goggle", "goggler", "gogglers", "goggles", "goglet", "goglets", "gogo", "gogol", "goidelic", "going", "goings", "goiter", "goitre", "goitres", "golconda", "golcondas", "gold", "gold beating", "gold digger", "gold diggers", "gold dust", "gold of pleasure", "golda", "goldcrest", "goldcrests", "goldeye", "goldeyes", "goldfield", "goldfields", "goldfinch", "goldfinches", "goldfinnies", "goldfinny", "goldfish", "goldfishes", "goldie", "goldilocks", "golding", "goldminer", "goldminers", "golds", "goldsmith", "goldsmiths", "goldstone", "goldthread", "goldwyn", "golem", "golems", "golf", "golfer", "golfers", "golfing", "golfs", "golgi", "golgotha", "golgothas", "goliard", "goliardery", "goliards", "goliath", "goliaths", "gollies", "golliwog", "golliwogs", "golly", "golosh", "goloshes", "golp", "golpes", "golps", "gombeen", "gombeen man", "gombo", "gombos", "gomorrah", "gomphosis", "gomuti", "gomutis", "gonad", "gonadotropin", "gonadotropins", "gonads", "goncourt", "gondola", "gondolas", "gondolier", "gondoliers", "gondwanaland", "goneness", "goner", "goneril", "goners", "gonfalon", "gonfalonier", "gonfaloniers", "gonfalons", "gonfanon", "gonfanons", "gong", "gongorism", "gongorist", "gongs", "goniatite", "goniatites", "gonidium", "goniometer", "goniometers", "goniometry", "gonion", "gonk", "gonks", "gonococcus", "gonocyte", "gonocytes", "gonophore", "gonophores", "gonorrhea", "gonorrhoea", "gonys", "gonzales", "gonzalez", "gonzalo", "goo", "goober", "goobers", "gooch", "good", "good bye", "good byes", "good fellowship", "good for nothing", "good for nothings", "good humouredness", "good looker", "good naturedness", "good night", "goodies", "goodliness", "goodman", "goodness", "goods", "goodwife", "goodwill", "goody", "goody goodies", "goody goody", "goof", "goofball", "goofballs", "goofiness", "goofs", "goog", "googlies", "googly", "googol", "googolplex", "googolplexes", "googols", "googs", "goole", "goon", "goonda", "goondas", "gooney", "gooneys", "goons", "goop", "goops", "goos", "goosander", "goosanders", "goose", "gooseberries", "gooseberry", "goosefoot", "goosefoots", "goosegog", "goosegogs", "gooses", "goossens", "gopak", "gopaks", "gopher", "gophers", "gopherwood", "goral", "gorals", "gorbals", "gorcock", "gorcocks", "gordon", "gore", "gores", "gorge", "gorgeousness", "gorgerin", "gorgerins", "gorges", "gorget", "gorgets", "gorgon", "gorgoneion", "gorgonian", "gorgons", "gorgonzola", "gorilla", "gorillas", "goriness", "goring", "gorings", "gorki", "gorky", "gormand", "gormandise", "gormandiser", "gormandisers", "gormandises", "gormandism", "gormandize", "gormandizer", "gormandizers", "gormandizes", "gormands", "gorse", "goshawk", "goshawks", "goshen", "gosling", "goslings", "gospel", "gospeller", "gospellers", "gospels", "gosplan", "gosport", "goss", "gossamer", "gossamers", "gossan", "gossans", "gosse", "gossip", "gossiper", "gossipers", "gossiping", "gossipings", "gossipmonger", "gossipmongers", "gossipry", "gossips", "gossoon", "gossoons", "goth", "gotha", "gotham", "gothamite", "gothamites", "gothenburg", "gothic", "gothicism", "goths", "gotland", "gottfried", "gouache", "gouaches", "gouda", "gouge", "gouger", "gougers", "gouges", "goujon", "goujons", "goulash", "goulashes", "gould", "gounod", "gourami", "gouramis", "gourd", "gourde", "gourdes", "gourds", "gourmand", "gourmandise", "gourmandism", "gourmands", "gourmet", "gourmets", "gout", "goutiness", "gouts", "goutte", "gouttes", "goutweed", "goutweeds", "gouvernante", "gouvernantes", "gov", "governance", "governances", "governed", "governess", "governesses", "governing", "government", "governments", "governor", "governor generalship", "governors", "governorship", "governorships", "govs", "gowan", "gowans", "gowd", "gowds", "gower", "gowers", "gowk", "gowks", "gown", "gowns", "gownsman", "goy", "goya", "goys", "grab", "grabber", "grabbers", "grabbler", "grabblers", "graben", "grabens", "grabs", "gracchus", "grace", "grace and favour", "gracefulness", "gracelessness", "graces", "gracie", "gracility", "graciosity", "gracioso", "graciosos", "graciousness", "grackle", "grackles", "grad", "gradable", "gradables", "gradation", "gradations", "grade", "grader", "graders", "grades", "gradient", "gradienter", "gradienters", "gradients", "gradin", "gradines", "grading", "gradins", "grads", "gradual", "gradualism", "gradualist", "gradualists", "gradualities", "graduality", "gradualness", "graduals", "graduand", "graduands", "graduate", "graduates", "graduation", "graduations", "graduator", "graduators", "gradus", "graduses", "graecism", "graeme", "graf", "graffiti", "graffito", "graft", "grafter", "grafters", "grafting", "graftings", "grafts", "graham", "grahame", "grail", "grails", "grain", "grainer", "grainers", "grainger", "graininess", "graining", "grainings", "grains", "gram", "grama", "gramarye", "gramicidin", "gramma", "grammalogue", "grammalogues", "grammar", "grammarian", "grammarians", "grammars", "grammaticism", "grammaticisms", "grammatology", "gramme", "grammes", "gramophone", "gramophones", "grampus", "grampuses", "grams", "granada", "granadilla", "granadillas", "granados", "granaries", "granary", "grand", "grandad", "grandads", "grandam", "grandams", "grandchild", "granddad", "granddaddies", "granddaddy", "granddads", "granddaughter", "granddaughters", "grandee", "grandees", "grandeeship", "grandeur", "grandfather", "grandfathers", "grandiloquence", "grandiosity", "grandma", "grandmamma", "grandmammas", "grandmas", "grandmaster", "grandmasters", "grandmother", "grandmothers", "grandnephew", "grandnephews", "grandness", "grandniece", "grandnieces", "grandpa", "grandpapa", "grandpapas", "grandparent", "grandparents", "grandpas", "grands", "grandsire", "grandsires", "grandson", "grandsons", "grandstand", "grandstands", "granduncle", "granduncles", "grange", "grangemouth", "granger", "grangerisation", "grangerisations", "grangerization", "grangerizations", "grangers", "granges", "grania", "granicus", "granite", "graniteware", "granitite", "granitization", "granivore", "grannie", "grannies", "granny", "granodiorite", "granola", "granophyre", "grant", "grant in aid", "granta", "grantee", "grantees", "granter", "granters", "granth", "grantham", "grantor", "grantors", "grants", "granularity", "granulater", "granulaters", "granulation", "granulations", "granulator", "granulators", "granule", "granules", "granulite", "granulites", "granulocyte", "granulocytes", "granuloma", "granulomas", "granville", "granville barker", "grape", "grapefruit", "grapefruits", "graperies", "grapery", "grapes", "grapeshot", "grapestone", "grapestones", "grapevine", "grapevines", "graph", "grapheme", "graphemes", "graphemics", "graphicness", "graphics", "graphite", "graphitization", "graphitizations", "graphologist", "graphologists", "graphology", "graphs", "grapnel", "grapnels", "grappa", "grappas", "grappelli", "grapple", "grapples", "grappling", "graptolite", "graptolites", "grasmere", "grasp", "grasper", "graspers", "grasping", "graspingness", "grasps", "grass", "grass of parnassus", "grasses", "grasshook", "grasshooks", "grasshopper", "grasshoppers", "grassiness", "grassland", "grasslands", "grate", "gratefulness", "grater", "graters", "grates", "graticule", "graticules", "gratification", "gratifications", "gratifier", "gratifiers", "gratin", "grating", "gratings", "gratitude", "gratuities", "gratuitousness", "gratuity", "gratulation", "gratulations", "graupel", "graupels", "gravamen", "grave", "grave wax", "gravel", "gravels", "graveness", "graver", "gravers", "graves", "gravesend", "gravestone", "gravestones", "graveyard", "graveyards", "gravidity", "gravies", "gravimeter", "gravimeters", "gravimetry", "gravitation", "gravitations", "gravities", "graviton", "gravitons", "gravity", "gravure", "gravures", "gravy", "gray", "graybeard", "graybeards", "grayling", "graylings", "grayness", "grays", "graywacke", "graz", "graze", "grazer", "grazers", "grazes", "grazier", "graziers", "grazing", "grazings", "grease", "grease gun", "grease guns", "greasepaint", "greaser", "greasers", "greases", "greasewood", "greasewoods", "greasiness", "great", "great aunt", "great aunts", "great grandchild", "great granddaughter", "great granddaughters", "great grandfather", "great grandfathers", "great grandmother", "great grandmothers", "great grandparent", "great grandparents", "great grandson", "great grandsons", "great nephew", "great nephews", "great niece", "great nieces", "great uncle", "great uncles", "greatcoat", "greatcoats", "greatest", "greatness", "greats", "greave", "greaves", "grebe", "grebes", "grecian", "grecism", "greco roman", "gree", "greece", "greed", "greediness", "greeds", "greegree", "greegrees", "greek", "greekdom", "greeks", "green", "greenaway", "greenback", "greenbacks", "greenbottle", "greenbottles", "greene", "greenery", "greenfinch", "greenfinches", "greenflies", "greenfly", "greengage", "greengages", "greengrocer", "greengroceries", "greengrocers", "greengrocery", "greenhead", "greenheads", "greenheart", "greenhearts", "greenhorn", "greenhorns", "greenhouse", "greenhouses", "greening", "greenings", "greenishness", "greenland", "greenlet", "greenlets", "greenmail", "greenness", "greenock", "greenockite", "greenroom", "greenrooms", "greens", "greensand", "greensboro", "greenshank", "greenshanks", "greensickness", "greenstone", "greenstones", "greenstuff", "greenstuffs", "greensward", "greenth", "greenweed", "greenweeds", "greenwich", "greenwood", "greenwoods", "greer", "grees", "greet", "greeter", "greeters", "greeting", "greetings", "greets", "greg", "gregale", "gregales", "gregarine", "gregarines", "gregariousness", "gregor", "gregories", "gregory", "greige", "greisen", "gremial", "gremials", "gremlin", "gremlins", "grenada", "grenade", "grenades", "grenadian", "grenadians", "grenadier", "grenadiers", "grenadine", "grenadines", "grendel", "grenfell", "grenoble", "grenville", "gresham", "greta", "gretel", "gretna", "grey", "greybeard", "greybeards", "greyhen", "greyhens", "greyhound", "greyhounds", "greylag", "greylags", "greyness", "greys", "greywacke", "gri gri", "gribble", "gribbles", "grice", "grices", "grid", "gridder", "gridders", "griddle", "griddlecake", "griddlecakes", "griddles", "gride", "grides", "gridiron", "gridirons", "grids", "grief", "griefs", "grieg", "grierson", "grievance", "grievances", "griever", "grievers", "grievousness", "griff", "griffe", "griffes", "griffin", "griffinism", "griffins", "griffith", "griffiths", "griffon", "griffons", "griffs", "grift", "grifter", "grifters", "grifts", "grig", "grigs", "grill", "grillade", "grillades", "grillage", "grillages", "grille", "grilles", "grilling", "grillings", "grills", "grillwork", "grilse", "grilses", "grimace", "grimaces", "grimaldi", "grimalkin", "grimalkins", "grime", "grimes", "griminess", "grimm", "grimness", "grimoire", "grimoires", "grimsby", "grin", "grind", "grinder", "grinderies", "grinders", "grindery", "grinding", "grindings", "grinds", "grindstone", "grindstones", "gringo", "gringos", "grinner", "grinners", "grinning", "grins", "griot", "griots", "grip", "gripe", "griper", "gripers", "gripes", "grippe", "gripper", "grippers", "grips", "gripsack", "gripsacks", "griqua", "grisaille", "grisailles", "griselda", "griseofulvin", "grisette", "grisettes", "griskin", "griskins", "grisliness", "grisly", "grison", "grisons", "grist", "gristle", "gristles", "gristliness", "grists", "grit", "grith", "griths", "grits", "gritstone", "gritstones", "gritter", "gritters", "grittiness", "grivet", "grivets", "grizelda", "grizzle", "grizzler", "grizzlers", "grizzles", "grizzlies", "grizzling", "grizzly", "groan", "groaner", "groaners", "groans", "groat", "groats", "grocer", "groceries", "grocers", "grocery", "grockle", "grockles", "grog", "groggery", "grogginess", "grogram", "grogs", "groin", "groining", "groinings", "groins", "groma", "gromas", "grommet", "grommets", "gromwell", "gromwells", "gromyko", "groningen", "groom", "groomer", "groomers", "grooming", "grooms", "groomsman", "groove", "groover", "groovers", "grooves", "grooving", "grope", "groper", "gropers", "gropes", "gropius", "grosbeak", "grosbeaks", "groschen", "groschens", "grosgrain", "grosgrains", "gross", "grosses", "grossness", "grossularite", "grosvenor", "grosz", "grot", "grotesque", "grotesqueness", "grotesquerie", "grotesqueries", "grotesquery", "grotesques", "grotius", "grots", "grotto", "grottoes", "grottos", "grouch", "grouches", "grouchiness", "ground", "groundage", "groundages", "groundbreaking", "grounder", "grounders", "grounding", "groundings", "groundlessness", "groundling", "groundlings", "groundmass", "groundmasses", "groundplot", "groundplots", "grounds", "groundsel", "groundsels", "groundsheet", "groundsheets", "groundsill", "groundsills", "groundsman", "groundspeed", "groundspeeds", "groundwork", "groundworks", "group", "grouper", "groupers", "groupie", "groupies", "grouping", "groupings", "groups", "groupware", "grouse", "grouser", "grousers", "grouses", "grout", "grouter", "grouters", "grouts", "grove", "groveler", "grovelers", "groveller", "grovellers", "groves", "grovet", "grovets", "grower", "growers", "growing", "growings", "growl", "growler", "growlers", "growling", "growlings", "growls", "grown up", "grown ups", "growth", "growths", "groyne", "groynes", "grozny", "grub", "grubber", "grubbers", "grubbiness", "grubby", "grubs", "grudge", "grudges", "gruel", "grueling", "gruelings", "gruelling", "gruellings", "gruels", "gruesomeness", "gruffness", "grumble", "grumbler", "grumblers", "grumbles", "grumbling", "grumblings", "grume", "grumes", "grummet", "grummets", "grumness", "grump", "grumphie", "grumphies", "grumpiness", "grumps", "grundies", "grundy", "grundyism", "grunion", "grunions", "grunt", "grunter", "grunters", "grunts", "grus", "grutch", "grutches", "gryphon", "gryphons", "grysbok", "grysboks", "guacamole", "guacamoles", "guacharo", "guacharos", "guaco", "guacos", "guadalajara", "guadalcanal", "guadalquivir", "guadeloupe", "guaiac", "guaiacum", "guaiacums", "guam", "guamanian", "guamanians", "guan", "guanaco", "guanacos", "guanine", "guano", "guanos", "guans", "guar", "guarani", "guaranies", "guaranis", "guarantee", "guarantees", "guaranties", "guarantor", "guarantors", "guaranty", "guard", "guardedness", "guardee", "guardees", "guarder", "guarders", "guardhouse", "guardhouses", "guardian", "guardians", "guardianship", "guardianships", "guarding", "guards", "guardsman", "guarneri", "guarneris", "guarnerius", "guarneriuses", "guars", "guatemala", "guatemalan", "guatemalans", "guava", "guavas", "guayaquil", "guayule", "guayules", "gubbins", "gubbinses", "gubernaculum", "guck", "guddle", "guddles", "gude", "gudgeon", "gudgeons", "gudrun", "guelph", "guelphs", "guenon", "guenons", "guerdon", "guerdons", "guereza", "guerezas", "guerilla", "guerillas", "guernica", "guernsey", "guernseys", "guerrilla", "guerrillas", "guess", "guesser", "guessers", "guesses", "guessing", "guessings", "guesstimate", "guesstimates", "guesswork", "guest", "guest rope", "guestimate", "guestimates", "guests", "gueux", "guevara", "guff", "guffaw", "guffaws", "guffs", "guggenheim", "guggle", "guggles", "guidance", "guide", "guideline", "guidelines", "guider", "guiders", "guides", "guiding", "guidings", "guidon", "guidons", "guild", "guilder", "guilders", "guildford", "guildhall", "guildhalls", "guilds", "guildsman", "guile", "guilefulness", "guilelessness", "guiles", "guillemot", "guillemots", "guilloche", "guilloches", "guillotine", "guillotines", "guilt", "guiltiness", "guiltlessness", "guilts", "guimpe", "guimpes", "guinea", "guinea bissau", "guineas", "guinevere", "guinness", "guipure", "guipures", "guiro", "guiros", "guise", "guises", "guitar", "guitarist", "guitarists", "guitars", "gujarat", "gujarati", "gujranwala", "gula", "gulag", "gulags", "gulas", "gulbenkian", "gulch", "gulches", "gulden", "guldens", "gules", "gulf", "gulfs", "gulfweed", "gulfweeds", "gull", "gullah", "gullet", "gullets", "gulley", "gulleys", "gullibility", "gullies", "gulls", "gully", "gulosity", "gulp", "gulping", "gulps", "gum", "gumbo", "gumboil", "gumboils", "gumbos", "gumdrop", "gumdrops", "gumma", "gumminess", "gumming", "gummite", "gummosis", "gummy", "gumption", "gums", "gumshield", "gumshields", "gumshoe", "gumshoes", "gun", "gunboat", "gunboats", "guncotton", "guncottons", "gunfight", "gunfighter", "gunfighters", "gunfights", "gunfire", "gunfires", "gunflint", "gunflints", "gunge", "gunges", "gunite", "gunk", "gunks", "gunmaker", "gunmakers", "gunman", "gunmetal", "gunmetals", "gunn", "gunnel", "gunnels", "gunner", "gunneries", "gunners", "gunnery", "gunning", "gunnings", "gunny", "gunplay", "gunplays", "gunpoint", "gunpowder", "gunpowders", "gunrunner", "gunrunners", "gunrunning", "guns", "gunsel", "gunshot", "gunshots", "gunslinger", "gunslingers", "gunsmith", "gunsmiths", "gunstock", "gunstocks", "gunter", "gunters", "gunther", "guntur", "gunwale", "gunwales", "gunyah", "guppies", "guppy", "gupta", "gur", "gurdwara", "gurdwaras", "gurge", "gurges", "gurgitation", "gurgitations", "gurgle", "gurgles", "gurjun", "gurjuns", "gurkha", "gurkhali", "gurkhas", "gurmukhi", "gurnard", "gurnards", "gurney", "gurneys", "guru", "gurus", "guruship", "gush", "gusher", "gushers", "gushes", "gusset", "gussets", "gussie", "gust", "gustable", "gustation", "gustations", "gustav", "gustave", "gustavus", "gustiness", "gusto", "gusts", "gut", "gutbucket", "gutenberg", "guthrie", "guts", "gutser", "gutsers", "gutsiness", "gutta", "gutta percha", "guttas", "guttation", "guttations", "gutter", "guttering", "gutters", "guttersnipe", "guttersnipes", "gutties", "guttural", "gutturals", "gutty", "guv", "guy", "guyana", "guyot", "guyots", "guys", "guzzler", "guzzlers", "guzzling", "gwalior", "gwen", "gwenda", "gwendolen", "gwent", "gwyn", "gwynedd", "gwyneth", "gwyniad", "gwyniads", "gybe", "gybes", "gym", "gymkhana", "gymkhanas", "gymnasia", "gymnasiarch", "gymnasiarchs", "gymnasiast", "gymnasiasts", "gymnasium", "gymnasiums", "gymnast", "gymnastics", "gymnasts", "gymnosophist", "gymnosophists", "gymnosophy", "gymnosperm", "gymnosperms", "gyms", "gynaeceum", "gynaecocracies", "gynaecocracy", "gynaecologist", "gynaecologists", "gynaecology", "gynaecomastia", "gynandromorph", "gynandromorphism", "gynandromorphs", "gynandromorphy", "gynandry", "gynecium", "gynecologist", "gynecology", "gynodioecism", "gynoecium", "gynoeciums", "gynomonoecism", "gynophobia", "gynophore", "gynophores", "gynostemium", "gynostemiums", "gyp", "gyps", "gypsies", "gypsophila", "gypsophilas", "gypsum", "gypsy", "gypsydom", "gypsyism", "gypsywort", "gypsyworts", "gyration", "gyrations", "gyrator", "gyrators", "gyre", "gyres", "gyrfalcon", "gyrfalcons", "gyro", "gyrocompass", "gyrocompasses", "gyron", "gyrons", "gyroplane", "gyroplanes", "gyros", "gyroscope", "gyroscopes", "gyrostabilizer", "gyrostabilizers", "gyrostat", "gyrostatics", "gyrostats", "gyrovague", "gyrovagues", "gyrus", "gyruses", "gyve", "gyves", "h bomb", "h bombs", "ha p orth", "ha p orths", "ha pennies", "ha penny", "ha ha", "ha has", "haaf", "haafs", "haar", "haarlem", "haars", "habakkuk", "habanera", "habaneras", "habanero", "habaneros", "haberdasher", "haberdasheries", "haberdashers", "haberdashery", "habergeon", "habergeons", "habiliment", "habiliments", "habilitation", "habilitations", "habilitator", "habilitators", "habit", "habitability", "habitableness", "habitant", "habitants", "habitat", "habitation", "habitations", "habitats", "habits", "habitualness", "habituation", "habituations", "habitude", "habitus", "haboob", "haboobs", "hacek", "haceks", "hachure", "hachures", "hacienda", "haciendas", "hack", "hackamore", "hackamores", "hackberries", "hackberry", "hackbut", "hackbuteer", "hackbuteers", "hackbuts", "hackee", "hackees", "hacker", "hackeries", "hackers", "hackery", "hackle", "hackler", "hacklers", "hackles", "hackmatack", "hackmatacks", "hackney", "hackneys", "hacks", "haddock", "haddocks", "hade", "hades", "hadj", "hadjes", "hadji", "hadjis", "hadlee", "hadn t", "hadrian", "hadron", "hadrons", "hadrosaur", "hadrosaurs", "haecceity", "haem", "haemangioma", "haematemesis", "haematic", "haematin", "haematinic", "haematinics", "haematite", "haematoblast", "haematoblasts", "haematocele", "haematoceles", "haematocrit", "haematocrits", "haematogenesis", "haematologist", "haematologists", "haematology", "haematolysis", "haematoma", "haematomas", "haematosis", "haematoxylin", "haematoxylon", "haematuria", "haemin", "haemocoel", "haemocyanin", "haemocyte", "haemocytes", "haemodialysis", "haemoglobin", "haemoglobinopathy", "haemolysis", "haemophilia", "haemophiliac", "haemophiliacs", "haemoptysis", "haemorrhage", "haemorrhages", "haemorrhoid", "haemorrhoids", "haemostasis", "haemostat", "haemostatic", "haemostats", "haet", "haets", "haffet", "haffets", "hafiz", "hafnium", "haft", "hafts", "hag", "hagberries", "hagberry", "hagbut", "hagbuts", "hagdon", "hagdons", "hagen", "hagfish", "hagfishes", "haggada", "haggadah", "haggai", "haggard", "haggardness", "haggards", "haggis", "haggises", "haggle", "haggler", "hagglers", "haggles", "haggling", "hagiarchies", "hagiarchy", "hagiocracies", "hagiocracy", "hagiographa", "hagiographer", "hagiographers", "hagiographies", "hagiography", "hagiolater", "hagiolaters", "hagiolatry", "hagiologies", "hagiologist", "hagiologists", "hagiology", "hagioscope", "hagioscopes", "hags", "hague", "hahn", "hahnium", "haick", "haicks", "haifa", "haig", "haik", "haiks", "haiku", "haikus", "hail", "hail fellow", "hailer", "hailers", "hails", "hailstone", "hailstones", "hair", "hair s breadth", "hair s breadths", "hair raiser", "haircloth", "haircloths", "haircut", "haircuts", "hairdo", "hairdos", "hairdresser", "hairdressers", "hairdressing", "hairdressings", "hairgrip", "hairgrips", "hairiness", "hairlessness", "hairline", "hairlines", "hairpin", "hairpins", "hairs", "hairspring", "hairsprings", "hairstreak", "hairstreaks", "hairstyle", "hairstyles", "hairstylist", "hairstylists", "haiti", "haitian", "haitians", "haitink", "haj", "hajes", "haji", "hajis", "hajj", "hajjes", "hajji", "hajjis", "hake", "hakenkreuz", "hakes", "hakim", "hakims", "hakluyt", "hal", "halachah", "halakah", "halal", "halals", "halation", "halations", "halavah", "halavahs", "halberd", "halberdier", "halberdiers", "halberds", "halcyon", "halcyons", "haldane", "haleness", "haler", "halers", "halesowen", "haley", "half", "half a crown", "half and half", "half ball", "half binding", "half blood", "half bloods", "half blue", "half blues", "half board", "half boot", "half breed", "half breeds", "half brother", "half brothers", "half caste", "half castes", "half centuries", "half century", "half cock", "half crown", "half crowns", "half day", "half days", "half dollar", "half dollars", "half hitch", "half holiday", "half holidays", "half hour", "half hours", "half inch", "half inches", "half leather", "half length", "half life", "half light", "half mast", "half miler", "half moon", "half mourning", "half note", "half pay", "half pike", "half pint", "half pints", "half plate", "half pounder", "half round", "half sister", "half sisters", "half size", "half step", "half term", "half tide", "half time", "half title", "half track", "half tracks", "half truth", "half truths", "half wit", "half wits", "half wittedness", "halfpace", "halfpaces", "halfpennies", "halfpenny", "halfpennyworth", "halfpennyworths", "halfs", "halftone", "halftones", "halibut", "halibuts", "halicarnassus", "halide", "halides", "halidom", "halidoms", "halifax", "haliotis", "halite", "halitosis", "halitus", "halituses", "hall", "hallan", "hallans", "hallelujah", "hallelujahs", "halley", "halliard", "halliards", "halling", "hallings", "halliwell", "hallmark", "hallmarks", "hallo", "halloes", "halloo", "halloos", "hallos", "hallowe en", "hallowmas", "halls", "hallstand", "hallstands", "hallucination", "hallucinations", "hallucinogen", "hallucinogens", "hallucinosis", "hallux", "hallway", "hallways", "halm", "halma", "halmas", "halms", "halo", "halobiont", "halobionts", "halocarbon", "haloes", "halogen", "halogenation", "halogens", "haloid", "haloids", "halophile", "halophyte", "halophytes", "halos", "halothane", "hals", "halt", "halter", "halteres", "halters", "halts", "halvah", "halvahs", "halves", "halyard", "halyards", "ham", "hamadryad", "hamadryades", "hamadryads", "hamadryas", "hamadryases", "hamal", "hamals", "hamartia", "hamartias", "hamate", "hamburg", "hamburger", "hamburgers", "hamburgs", "hame", "hames", "hamhung", "hamilton", "hamiltonian", "hamish", "hamitic", "hamlet", "hamlets", "hammal", "hammals", "hammer", "hammercloth", "hammercloths", "hammerer", "hammerers", "hammerfest", "hammerhead", "hammerheads", "hammering", "hammerings", "hammerlock", "hammerlocks", "hammers", "hammersmith", "hammerstein", "hammett", "hamming", "hammock", "hammocks", "hammond", "hamper", "hampers", "hampshire", "hampstead", "hampton", "hams", "hamster", "hamsters", "hamstring", "hamstrings", "hamulus", "hamza", "hamzas", "han t", "hanap", "hanaper", "hanapers", "hanaps", "hance", "hances", "hancock", "hand", "hand s breadth", "hand me down", "hand me downs", "hand off", "hand offs", "handbag", "handbags", "handbell", "handbells", "handbill", "handbills", "handbook", "handbooks", "handbrake", "handbrakes", "handcar", "handcart", "handcarts", "handclap", "handclaps", "handcraft", "handcrafts", "handcuff", "handcuffs", "handedness", "handel", "handfast", "handfasting", "handfastings", "handfasts", "handful", "handfuls", "handgrip", "handgrips", "handhold", "handholds", "handicap", "handicapper", "handicappers", "handicaps", "handicraft", "handicrafts", "handicraftsman", "handiness", "handiwork", "handiworks", "handkerchief", "handkerchiefs", "handle", "handlebar", "handlebars", "handler", "handlers", "handles", "handling", "handlings", "handmaid", "handmaiden", "handmaidens", "handmaids", "handout", "handouts", "handover", "handovers", "handrail", "handrails", "hands", "handsaw", "handsaws", "handsel", "handsels", "handset", "handsets", "handshake", "handshakes", "handshaking", "handshakings", "handsomeness", "handspike", "handspikes", "handspring", "handsprings", "handstand", "handstands", "handwork", "handwriting", "handwritings", "handyman", "hang", "hang glider", "hang gliders", "hang up", "hang ups", "hangability", "hangar", "hangars", "hangbird", "hangbirds", "hangchow", "hangdog", "hangdogs", "hanger", "hanger on", "hangers", "hangfire", "hanging", "hangings", "hangman", "hangnail", "hangnails", "hangout", "hangouts", "hangover", "hangovers", "hangs", "hank", "hankering", "hankerings", "hankie", "hankies", "hanks", "hanky", "hanky panky", "hannah", "hannibal", "hannover", "hanoi", "hanover", "hanoverian", "hansa", "hansard", "hanse", "hanseatic", "hansel", "hansels", "hansom", "hansoms", "hanukkah", "hanuman", "hanumans", "haoma", "haomas", "hap", "haphazard", "haphazardness", "haphazards", "haplessness", "haplography", "haploid", "haplology", "happening", "happenings", "happenstance", "happenstances", "happiness", "haps", "hapsburg", "hapten", "haptens", "hapteron", "hapterons", "haptics", "haptotropism", "hara kiri", "haram", "harambee", "harambees", "harams", "harangue", "haranguer", "haranguers", "harangues", "harasser", "harassers", "harassment", "harassments", "harbin", "harbinger", "harbingers", "harbor", "harborage", "harborages", "harborer", "harborers", "harbors", "harbour", "harbourage", "harbourages", "harbourer", "harbourers", "harbours", "hard", "hard featuredness", "hardback", "hardbacks", "hardbake", "hardbakes", "hardball", "hardboard", "hardboards", "hardcore", "hardcover", "hardcovers", "hardecanute", "harden", "hardener", "hardeners", "hardening", "hardens", "hardhack", "hardhacks", "hardhead", "hardheadedness", "hardheads", "hardicanute", "hardie", "hardihood", "hardiment", "hardiments", "hardiness", "harding", "hardliner", "hardliners", "hardness", "hardnesses", "hards", "hardship", "hardships", "hardtack", "hardtacks", "hardtop", "hardtops", "hardware", "hardwareman", "hardwood", "hardy", "hare", "hare s foot", "harebell", "harebells", "hareem", "hareems", "harem", "harems", "hares", "harewood", "hargreaves", "hari kari", "haricot", "haricots", "harijan", "harijans", "harim", "harims", "haringey", "harl", "harlem", "harlequin", "harlequinade", "harlequinades", "harlequins", "harley", "harlot", "harlotry", "harlots", "harlow", "harls", "harm", "harmattan", "harmattans", "harmfulness", "harmlessness", "harmonic", "harmonica", "harmonicas", "harmonicon", "harmonicons", "harmonics", "harmonies", "harmoniousness", "harmonisation", "harmonisations", "harmoniser", "harmonisers", "harmonist", "harmonists", "harmonite", "harmonium", "harmoniums", "harmonization", "harmonizations", "harmonizer", "harmonizers", "harmony", "harmost", "harmosts", "harmotome", "harms", "harmsworth", "harness", "harnesses", "harold", "haroseth", "haroun", "harp", "harper", "harpers", "harpies", "harping", "harpings", "harpist", "harpists", "harpoon", "harpooneer", "harpooneers", "harpooner", "harpooners", "harpoons", "harps", "harpsichord", "harpsichordist", "harpsichordists", "harpsichords", "harpy", "harquebus", "harquebuses", "harridan", "harridans", "harrier", "harriers", "harriet", "harris", "harrisburg", "harrison", "harrogate", "harrovian", "harrow", "harrows", "harshness", "harslet", "harslets", "hart", "hart s tongue", "hartal", "hartebeest", "hartebeests", "hartford", "hartlepool", "hartley", "hartnell", "harts", "hartshorn", "hartshorns", "harum scarum", "harum scarums", "haruspex", "haruspicies", "haruspicy", "harvard", "harvest", "harvest lice", "harvester", "harvesters", "harvesting", "harvestman", "harvests", "harvey", "harwich", "has been", "has beens", "hasan", "hasdrubal", "hash", "hashes", "hashing", "hashish", "hasid", "hasidism", "hask", "haslet", "haslets", "hasn t", "hasp", "hasps", "hassan", "hassle", "hassles", "hassock", "hassocks", "haste", "hastener", "hasteners", "hastening", "hastes", "hastiness", "hastings", "hat", "hatband", "hatbands", "hatbox", "hatboxes", "hatch", "hatchback", "hatchbacks", "hatchel", "hatchels", "hatcher", "hatcheries", "hatchers", "hatchery", "hatches", "hatchet", "hatchets", "hatchettite", "hatching", "hatchings", "hatchling", "hatchlings", "hatchment", "hatchments", "hatchway", "hatchways", "hate", "hatefulness", "hatemonger", "hatemongers", "hater", "haters", "hates", "hatfield", "hatful", "hatfuls", "hathaway", "hatlessness", "hatpin", "hatpins", "hatrack", "hatracks", "hatred", "hatreds", "hats", "hatter", "hatters", "hatty", "hauberk", "hauberks", "haugh", "haughs", "haughtiness", "haul", "haulage", "haulages", "hauler", "haulers", "haulier", "hauliers", "hauling", "haulm", "haulms", "hauls", "haunch", "haunches", "haunt", "haunter", "haunters", "haunts", "hauptmann", "hausa", "hausas", "hausfrau", "hausfraus", "haustellum", "haustorium", "haut rhin", "hautbois", "hautboy", "hautboys", "haute garonne", "haute loire", "haute marne", "haute normandie", "haute savoie", "haute vienne", "hautes alpes", "hauteur", "hauts de seine", "havana", "havanas", "havant", "have", "have not", "have nots", "havel", "havelock", "havelocks", "haven", "haven t", "havens", "haver", "haverel", "haverels", "havers", "haversack", "haversacks", "haversine", "haversines", "haves", "havildar", "havildars", "havoc", "havocs", "haw", "haw haw", "haw haws", "hawaii", "hawaiian", "hawfinch", "hawfinches", "hawick", "hawk", "hawk s beard", "hawkbit", "hawkbits", "hawker", "hawkers", "hawkey", "hawkeys", "hawkie", "hawkies", "hawking", "hawkins", "hawkishness", "hawks", "hawksbill", "hawksbills", "hawksmoor", "hawkweed", "hawkweeds", "haworth", "haws", "hawse", "hawsehole", "hawsepipe", "hawsepipes", "hawser", "hawsers", "hawses", "hawthorn", "hawthorne", "hawthorns", "hay", "haybox", "hayboxes", "haycock", "haycocks", "hayden", "haydn", "hayes", "hayfield", "hayfields", "hayfork", "hayforks", "haying", "hayings", "hayley", "hayloft", "haylofts", "haymaker", "haymakers", "haymaking", "haymakings", "haymow", "haymows", "hayrick", "hayricks", "hayride", "hayrides", "hays", "hayseed", "hayseeds", "haystack", "haystacks", "hayward", "haywards", "haywire", "haywires", "hazan", "hazans", "hazard", "hazarding", "hazardousness", "hazards", "haze", "hazel", "hazelnut", "hazelnuts", "hazels", "hazer", "hazers", "hazes", "haziness", "hazing", "hazings", "hazlitt", "hazzan", "hazzans", "he d", "he man", "head", "headache", "headaches", "headband", "headbands", "headboard", "headboards", "headcloth", "headcloths", "headcount", "header", "headers", "headfast", "headfasts", "headframe", "headframes", "headgear", "headhunt", "headhunter", "headhunters", "headhunting", "headhuntings", "headhunts", "heading", "headings", "headlamp", "headlamps", "headland", "headlands", "headlight", "headlights", "headline", "headliner", "headliners", "headlines", "headlock", "headlocks", "headman", "headmaster", "headmasters", "headmastership", "headmistress", "headmistresses", "headnote", "headnotes", "headphone", "headphones", "headpiece", "headpieces", "headpin", "headpins", "headquarters", "headrace", "headraces", "headrail", "headrails", "headreach", "headreaches", "headrest", "headrests", "headroom", "headrooms", "heads", "headscarf", "headset", "headsets", "headshake", "headshakes", "headship", "headships", "headshot", "headshots", "headshrinker", "headshrinkers", "headsman", "headspring", "headsprings", "headsquare", "headsquares", "headstall", "headstalls", "headstand", "headstands", "headstock", "headstocks", "headstone", "headstones", "headwaiter", "headwaiters", "headwaters", "headway", "headways", "headwind", "headwinds", "headword", "headwords", "headwork", "headworker", "headworkers", "heal all", "heald", "healds", "healer", "healers", "healey", "healing", "healings", "health", "healthfulness", "healthiness", "healths", "heap", "heaps", "hearer", "hearers", "hearing", "hearings", "hearkener", "hearkeners", "hearsay", "hearsays", "hearse", "hearses", "hearst", "heart", "heart searching", "heart throb", "heart throbs", "heart to heart", "heart to hearts", "heartache", "heartaches", "heartbreak", "heartbreaker", "heartbreakers", "heartbreaks", "heartburn", "heartburning", "hearth", "hearthrug", "hearthrugs", "hearths", "hearties", "heartiness", "hearting", "heartland", "heartlands", "heartlessness", "hearts", "heartseed", "heartseeds", "heartwood", "heartwoods", "heartworm", "hearty", "heat", "heatedness", "heater", "heaters", "heath", "heathen", "heathendom", "heathenesse", "heathenishness", "heathenism", "heathenry", "heathens", "heather", "heathers", "heathfowl", "heaths", "heating", "heats", "heatstroke", "heaume", "heaumes", "heave", "heaven", "heavenliness", "heavens", "heaver", "heavers", "heaves", "heavies", "heaviness", "heaving", "heavings", "heaviside", "heavy", "heavy duty", "heavyweight", "heavyweights", "hebdomad", "hebdomadaries", "hebdomadary", "hebdomads", "hebe", "hebephrenia", "hebetation", "hebetations", "hebetude", "hebraiser", "hebraism", "hebraist", "hebraizer", "hebrew", "hebrews", "hebrides", "hebron", "hecate", "hecatomb", "hecatombs", "heck", "heckelphone", "heckelphones", "heckle", "heckler", "hecklers", "heckles", "heckling", "hecks", "hectare", "hectares", "hectic", "hectics", "hectogram", "hectograms", "hectograph", "hectographs", "hectolitre", "hectolitres", "hectometre", "hectometres", "hector", "hectors", "hectostere", "hectosteres", "hecuba", "heddle", "heddles", "hedge", "hedgehog", "hedgehogs", "hedger", "hedgerow", "hedgerows", "hedgers", "hedges", "hedging", "hedgings", "hedonics", "hedonism", "hedonist", "hedonists", "heed", "heedfulness", "heedlessness", "heeds", "heel", "heeler", "heelers", "heeling", "heelings", "heels", "heft", "heftiness", "hefts", "hegel", "hegelian", "hegelianism", "hegemonies", "hegemonist", "hegemonists", "hegemony", "hegira", "heidegger", "heidelberg", "heidi", "heiduc", "heiducs", "heifer", "heifers", "heifetz", "heigh", "heighs", "height", "height to paper", "heights", "heilbronn", "heine", "heinousness", "heir", "heir at law", "heirdom", "heiress", "heiresses", "heirloom", "heirlooms", "heirs", "heirship", "heisenberg", "heist", "heister", "heisters", "heists", "heitiki", "heitikis", "hejaz", "hejira", "hel", "heldentenor", "heldentenors", "helen", "helena", "helenium", "helga", "helices", "helichrysum", "helichrysums", "helicograph", "helicographs", "helicoid", "helicon", "heliconian", "helicons", "helicopter", "helicopters", "heligoland", "heliochromy", "heliodor", "heliograph", "heliographer", "heliographers", "heliographs", "heliography", "heliogravure", "heliolater", "heliolaters", "heliolatry", "heliometer", "heliometers", "heliopolis", "helios", "helioscope", "helioscopes", "heliostat", "heliostats", "heliotaxis", "heliotherapy", "heliotrope", "heliotropes", "heliotropin", "heliotropism", "heliotype", "heliotypes", "heliozoan", "heliozoans", "helipad", "helipads", "heliport", "heliports", "helium", "helix", "helixes", "hell", "hell kite", "hellas", "hellbender", "hellbenders", "hellebore", "hellebores", "helleborine", "hellen", "hellene", "hellenes", "hellenic", "hellenism", "hellenist", "heller", "hellers", "hellespont", "hellgrammite", "hellgrammites", "hellhound", "hellhounds", "hellion", "hellions", "hellishness", "hellman", "hello", "hellos", "hells", "helm", "helmet", "helmets", "helmholtz", "helminth", "helminthiasis", "helminthic", "helminthologist", "helminthology", "helminths", "helms", "helmsman", "helot", "helotage", "helotism", "helotries", "helotry", "helots", "help", "helper", "helpers", "helpfulness", "helping", "helpings", "helplessness", "helpmann", "helpmate", "helpmates", "helpmeet", "helpmeets", "helps", "helsinki", "helter skelter", "helter skelters", "helve", "helvellyn", "helves", "helvetia", "helvetian", "helvetic", "hem", "hemangioma", "hemangiomas", "hematite", "hematologist", "hematology", "heme", "hemeralopia", "hemerocallis", "hemes", "hemialgia", "hemianopsia", "hemicellulose", "hemicrania", "hemicycle", "hemidemisemiquaver", "hemimorphism", "hemimorphite", "hemingway", "hemiola", "hemiolas", "hemiparasite", "hemiparasites", "hemiplegia", "hemiplegic", "hemiptera", "hemipteran", "hemisphere", "hemispheres", "hemispheroid", "hemispheroids", "hemistich", "hemistichs", "hemitrope", "hemitropes", "hemline", "hemlines", "hemlock", "hemlocks", "hemoglobin", "hemophilia", "hemophiliac", "hemophiliacs", "hemorrhage", "hemorrhages", "hemostat", "hemostats", "hemp", "hemps", "hems", "hemstitch", "hemstitcher", "hemstitchers", "hemstitches", "hemstitching", "hen", "hen and chickens", "henbane", "henbanes", "henchman", "hendecagon", "hendecagons", "hendecasyllabic", "hendecasyllable", "henderson", "hendiadys", "hendon", "hendrix", "hendry", "henequen", "henequens", "henge", "henges", "hengist", "henley", "henley on thames", "henna", "hennas", "henneries", "hennery", "hennin", "henotheism", "henotheist", "henotheists", "henri", "henries", "henrietta", "henroost", "henroosts", "henry", "henrys", "hens", "hent", "henze", "heortology", "hepar", "heparin", "hepars", "hepatectomies", "hepatectomy", "hepatic", "hepatics", "hepatisation", "hepatitis", "hepatization", "hepatoscopy", "hepburn", "heptachlor", "heptachord", "heptachords", "heptad", "heptads", "heptagon", "heptagons", "heptahedron", "heptameter", "heptameters", "heptane", "heptarch", "heptarchies", "heptarchist", "heptarchists", "heptarchs", "heptarchy", "heptasyllabic", "heptateuch", "hepworth", "hera", "heracles", "heraclid", "heraclitean", "heraclitus", "herald", "heraldry", "heralds", "herat", "herb", "herbage", "herbages", "herbal", "herbalist", "herbalists", "herbals", "herbarium", "herbariums", "herbartian", "herbert", "herbicide", "herbicides", "herbivore", "herbivores", "herborist", "herborists", "herbs", "hercegovina", "herculaneum", "hercules", "hercules club", "herd", "herd book", "herder", "herders", "herdic", "herdics", "herdman", "herds", "herdsman", "here", "hereafter", "hereditability", "hereditament", "hereditaments", "hereditarianism", "hereditariness", "hereditist", "heredity", "hereford", "herefordshire", "hereness", "herero", "hereroes", "hereros", "heresiarch", "heresiarchs", "heresies", "heresiographer", "heresiographers", "heresiographies", "heresiography", "heresiologist", "heresiologists", "heresiology", "heresy", "heretic", "heretics", "heretofore", "hereward", "heriot", "heriots", "heritability", "heritage", "heritages", "heritor", "heritors", "herl", "herls", "herm", "herma", "hermaphrodite", "hermaphrodites", "hermaphroditism", "hermeneutics", "hermes", "hermia", "hermione", "hermit", "hermitage", "hermitages", "hermits", "herms", "hern", "hernia", "hernias", "herniorrhaphy", "herniotomies", "herniotomy", "herns", "hernshaw", "hernshaws", "hero", "herod", "herodias", "herodotus", "heroes", "heroicalness", "heroicness", "heroics", "heroin", "heroine", "heroines", "heroism", "heron", "heronries", "heronry", "herons", "heronsew", "heronsews", "herpes", "herpetologist", "herpetologists", "herpetology", "herr", "herrenvolk", "herrick", "herring", "herrings", "herriot", "herschel", "hershey", "herstmonceux", "hertford", "hertfordshire", "hertz", "hertzog", "hervey", "herzegovina", "herzog", "heshvan", "hesiod", "hesione", "hesitance", "hesitances", "hesitancies", "hesitancy", "hesitation", "hesitations", "hesitator", "hesitators", "hesper", "hesperia", "hesperian", "hesperidium", "hesperidiums", "hesperis", "hesperus", "hess", "hesse", "hessian", "hessonite", "hest", "hester", "hests", "hesychast", "hetaera", "hetaerism", "hetaerisms", "hetaerist", "hetaerists", "hetaira", "hetairas", "hetairist", "hetairists", "heterocercality", "heteroclite", "heteroclites", "heterodactyl", "heterodactyls", "heterodoxies", "heterodoxy", "heteroecism", "heterogamy", "heterogeneity", "heterogeneousness", "heterogenesis", "heterogenies", "heterogeny", "heterogony", "heterograft", "heterografts", "heterology", "heteromorphism", "heteromorphisms", "heteromorphy", "heteronomy", "heteronym", "heteronyms", "heterophyllous", "heterophylly", "heteroplasty", "heterosexism", "heterosexual", "heterosexuality", "heterosexuals", "heterosis", "heterospory", "heterostyly", "heterotaxis", "heterothallism", "heterotopia", "heterotroph", "heterotrophs", "heterozygosity", "heterozygote", "heterozygotes", "hetman", "hetmanate", "hetmanates", "hetmans", "hetty", "heuchera", "heugh", "heughs", "heulandite", "heuristic", "heuristics", "hevea", "heveas", "hewer", "hewers", "hex", "hexachlorophene", "hexachord", "hexachords", "hexad", "hexads", "hexaemeron", "hexaemerons", "hexagon", "hexagons", "hexagram", "hexagrams", "hexahedron", "hexahedrons", "hexameter", "hexameters", "hexane", "hexapla", "hexaplas", "hexapod", "hexapodies", "hexapods", "hexapody", "hexastich", "hexastichs", "hexastyle", "hexastyles", "hexateuch", "hexes", "hexose", "hexoses", "heyday", "heydays", "heyduck", "heyducks", "heyer", "heyerdahl", "heysham", "heywood", "hezekiah", "hi fi", "hi fis", "hiatus", "hiatuses", "hiawatha", "hibachi", "hibachis", "hibernaculum", "hibernation", "hibernations", "hibernator", "hibernators", "hibernia", "hibernian", "hibernicism", "hiccough", "hiccoughs", "hiccup", "hiccups", "hick", "hickey", "hickeys", "hickok", "hickories", "hickory", "hicks", "hickwall", "hickwalls", "hidage", "hidages", "hidalgo", "hidalgoism", "hidalgos", "hiddenite", "hiddenness", "hide", "hide and seek", "hideaway", "hideaways", "hideosity", "hideousness", "hideout", "hideouts", "hider", "hiders", "hides", "hiding", "hidings", "hidrosis", "hidy hole", "hidy holes", "hierarch", "hierarchies", "hierarchism", "hierarchs", "hierarchy", "hieratic", "hierocracies", "hierocracy", "hierodule", "hierodules", "hieroglyph", "hieroglyphic", "hieroglyphics", "hieroglyphist", "hieroglyphists", "hieroglyphs", "hierogram", "hierogrammat", "hierogrammates", "hierogrammatist", "hierogrammats", "hierograms", "hierolatry", "hierologist", "hierologists", "hierology", "hieronymus", "hierophant", "hierophants", "hierurgies", "hierurgy", "higgins", "higgledy piggledy", "higgler", "higglers", "high", "high flier", "high fliers", "high hat", "high hats", "high low", "high mindedness", "high muck a muck", "high muck a mucks", "high rise", "high stepper", "high tension", "high up", "high ups", "highball", "highballs", "highbinder", "highboy", "highboys", "highbrow", "highbrowism", "highbrows", "higher up", "higher ups", "highjack", "highjacker", "highjackers", "highjacking", "highjacks", "highland", "highlander", "highlanders", "highlands", "highlight", "highlighting", "highlights", "highness", "highnesses", "highroad", "highroads", "highs", "highway", "highwayman", "highways", "hijack", "hijacker", "hijackers", "hijacking", "hijacks", "hijinks", "hike", "hiker", "hikers", "hikes", "hilariousness", "hilarity", "hilary", "hilbert", "hilda", "hildebrand", "hildesheim", "hilding", "hildings", "hill", "hillary", "hilliness", "hillingdon", "hillock", "hillocks", "hills", "hillside", "hillsides", "hilltop", "hilltops", "hilt", "hilton", "hilts", "hilum", "hilus", "hilversum", "himation", "himations", "himyarite", "himyaritic", "hin", "hinayana", "hinckley", "hind", "hindemith", "hindenburg", "hinderer", "hinderers", "hindfoot", "hindi", "hindoo", "hindoos", "hindquarter", "hindquarters", "hindrance", "hindrances", "hinds", "hindsight", "hindsights", "hindu", "hinduism", "hindus", "hindustan", "hindustani", "hindustanis", "hines", "hinge", "hinges", "hinnies", "hinny", "hins", "hint", "hinter", "hinterland", "hinterlands", "hinters", "hints", "hip", "hipparch", "hipparchs", "hipparchus", "hippeastrum", "hippeastrums", "hippiatrics", "hippiatrist", "hippiatrists", "hippie", "hippies", "hipping", "hippings", "hippo", "hippocampus", "hippocras", "hippocrases", "hippocrates", "hippocrene", "hippodrome", "hippodromes", "hippogriff", "hippogriffs", "hippologist", "hippologists", "hippology", "hippolyta", "hippolyte", "hippolytus", "hippophagist", "hippophagists", "hippophagy", "hippophile", "hippophiles", "hippopotamus", "hippopotamuses", "hippos", "hippus", "hippuses", "hippy", "hips", "hipster", "hipsters", "hiragana", "hiram", "hire", "hire purchase", "hireling", "hirelings", "hirer", "hirers", "hires", "hiring", "hirings", "hirohito", "hiroshima", "hirple", "hirples", "hirsuteness", "hirsutism", "hirudin", "hirudinea", "hirudinean", "hirudineans", "hispania", "hispaniola", "hispidity", "hiss", "hisses", "hissing", "hissings", "histaminase", "histamine", "histamines", "histidine", "histidines", "histiocyte", "histoblast", "histoblasts", "histochemistry", "histogen", "histogenesis", "histogens", "histogram", "histograms", "histologist", "histologists", "histology", "histolysis", "histone", "histones", "histopathologist", "histopathology", "histoplasmosis", "historian", "historians", "historicism", "historicisms", "historicist", "historicists", "historicity", "histories", "historiographer", "historiography", "history", "histrion", "histrionic", "histrionics", "histrionism", "hit", "hitch", "hitch hiker", "hitch hikers", "hitchcock", "hitcher", "hitchers", "hitches", "hitler", "hitlerism", "hitlerite", "hitlerites", "hitlers", "hits", "hitter", "hitters", "hitting", "hittite", "hive", "hiver", "hivers", "hives", "hoactzin", "hoactzins", "hoar", "hoard", "hoarder", "hoarders", "hoarding", "hoardings", "hoards", "hoarhound", "hoarhounds", "hoariness", "hoarseness", "hoatzin", "hoatzins", "hoax", "hoaxer", "hoaxers", "hoaxes", "hob", "hobart", "hobbes", "hobbies", "hobbism", "hobbist", "hobbists", "hobble", "hobbledehoy", "hobbledehoys", "hobbler", "hobblers", "hobbles", "hobbs", "hobby", "hobbyhorse", "hobbyhorses", "hobbyist", "hobbyists", "hobgoblin", "hobgoblins", "hobnail", "hobnails", "hobo", "hoboes", "hoboism", "hobos", "hobs", "hobson", "hochheimer", "hock", "hocker", "hockers", "hocket", "hockets", "hockey", "hockeys", "hockney", "hocks", "hocus pocus", "hod", "hodden", "hodge", "hodgepodge", "hodgepodges", "hodges", "hodgkin", "hodman", "hodograph", "hodographs", "hodometer", "hodometers", "hodoscope", "hodoscopes", "hods", "hoe", "hoedown", "hoedowns", "hoer", "hoers", "hoes", "hofei", "hoffman", "hoffmann", "hofmann", "hofmannsthal", "hog", "hogan", "hogans", "hogarth", "hogback", "hogbacks", "hogg", "hoggeries", "hoggery", "hogget", "hoggets", "hoggin", "hoggins", "hoggishness", "hoggs", "hogmanay", "hognut", "hognuts", "hogs", "hogshead", "hogsheads", "hogwash", "hogwashes", "hoiden", "hoidens", "hoist", "hoister", "hoisters", "hoists", "hoistway", "hoistways", "hokey pokey", "hokkaido", "hokku", "hokkus", "hokum", "hokusai", "holbein", "hold", "hold up", "hold ups", "holdall", "holdalls", "holdback", "holdbacks", "holder", "holders", "holding", "holdings", "holds", "hole", "holes", "holi", "holibut", "holibuts", "holiday", "holidaymaker", "holidaymakers", "holidays", "holies", "holiness", "holinesses", "holism", "holist", "holists", "holla", "holland", "hollander", "hollanders", "hollands", "hollandses", "hollas", "holler", "hollering", "hollers", "hollies", "holliger", "hollo", "holloa", "holloas", "holloes", "hollos", "hollow", "holloware", "hollowares", "holloway", "hollowness", "hollows", "holly", "hollyhock", "hollyhocks", "hollywood", "holm", "holmes", "holmium", "holms", "holocaust", "holocausts", "holocene", "holoenzyme", "holoenzymes", "holofernes", "hologram", "holograms", "holograph", "holographs", "holography", "holohedrism", "holometabolism", "holophote", "holophotes", "holophrase", "holophrases", "holophyte", "holophytes", "holoplankton", "holothurian", "holothuroidea", "holotype", "holotypes", "holst", "holstein", "holsteins", "holster", "holsters", "holt", "holts", "holy", "holyhead", "holystone", "holystones", "homage", "homager", "homagers", "homages", "hombre", "home", "home brew", "home brews", "home farm", "home farms", "homebound", "homeboy", "homeboys", "homecomer", "homecomers", "homecoming", "homecomings", "homegirl", "homegirls", "homeland", "homelands", "homeless", "homelessness", "homeliness", "homemaker", "homemakers", "homemaking", "homeomorph", "homeomorphism", "homeomorphs", "homeopath", "homeopathist", "homeopathists", "homeopaths", "homeopathy", "homeostasis", "homeowner", "homeowners", "homer", "homers", "homes", "homesickness", "homespun", "homespuns", "homestall", "homestead", "homesteader", "homesteaders", "homesteads", "homework", "homeworker", "homeyness", "homicide", "homicides", "homiletics", "homilies", "homilist", "homilists", "homily", "hominess", "homing", "homings", "hominid", "hominidae", "hominids", "hominies", "hominoid", "hominoids", "hominy", "hommock", "hommocks", "homo", "homochromy", "homoeomorph", "homoeomorphism", "homoeomorphs", "homoeopath", "homoeopathist", "homoeopathists", "homoeopaths", "homoeopathy", "homoeroticism", "homogamy", "homogenate", "homogenates", "homogeneity", "homogeneous", "homogeneousness", "homogenesis", "homogenisation", "homogenization", "homogenizer", "homogenizers", "homogeny", "homograft", "homografts", "homograph", "homographs", "homologation", "homologations", "homologue", "homologues", "homologumena", "homology", "homomorphism", "homonym", "homonymity", "homonyms", "homonymy", "homophile", "homophiles", "homophobia", "homophone", "homophones", "homophonies", "homophony", "homophyly", "homoplasies", "homoplasy", "homopolarity", "homoptera", "homopteran", "homos", "homosexual", "homosexualism", "homosexuality", "homosexuals", "homotaxis", "homothallism", "homotype", "homotypes", "homozygosis", "homozygote", "homozygotes", "homunculus", "hon", "honcho", "honchos", "honduran", "hondurans", "honduras", "hone", "honecker", "honegger", "hones", "honesties", "honesty", "honewort", "honeworts", "honey", "honey eater", "honeybunch", "honeybunches", "honeycomb", "honeycombs", "honeycreeper", "honeymoon", "honeymooner", "honeymooners", "honeymoons", "honeypot", "honeypots", "honeys", "honeysuckle", "honeysuckles", "hong", "hongs", "honiton", "honk", "honker", "honkers", "honks", "honky tonk", "honky tonks", "honolulu", "honor", "honora", "honorableness", "honorand", "honorands", "honorarium", "honorariums", "honorer", "honorers", "honorific", "honour", "honourableness", "honourer", "honourers", "honours", "honshu", "hoo ha", "hoo has", "hooch", "hooches", "hood", "hoodie", "hoodies", "hoodlum", "hoodlums", "hoodman", "hoodman blind", "hoodoo", "hoodoos", "hoods", "hoodwinker", "hoodwinkers", "hooey", "hoof", "hoofbeat", "hoofbeats", "hoofer", "hoofers", "hoofing", "hoofprint", "hoofprints", "hoofs", "hook", "hook up", "hook ups", "hookah", "hookahs", "hooke", "hookedness", "hooker", "hookers", "hookey", "hooks", "hookworm", "hookworms", "hooky", "hoolies", "hooligan", "hooliganism", "hooligans", "hooly", "hoop", "hooper", "hoopers", "hoopoe", "hoopoes", "hoops", "hooray", "hoorays", "hoosegow", "hoosegows", "hoosgow", "hoosgows", "hoot", "hootch", "hootches", "hootchy kootchies", "hootchy kootchy", "hootenannies", "hootenanny", "hooter", "hooters", "hoots", "hoover", "hoovers", "hooves", "hop", "hop o my thumb", "hop picker", "hop pickers", "hope", "hopeful", "hopefulness", "hopefuls", "hopelessness", "hoper", "hopers", "hopes", "hopi", "hopis", "hopkins", "hoplite", "hoplites", "hoplology", "hopper", "hoppers", "hopping", "hoppings", "hopple", "hopples", "hops", "hopsack", "hopsacking", "hopsacks", "horace", "horatio", "horde", "hordein", "hordeolum", "hordeolums", "hordes", "horeb", "horehound", "horehounds", "horizon", "horizons", "horizontal", "horizontality", "horizontals", "horme", "hormone", "hormones", "hormuz", "horn", "horn madness", "hornbeam", "hornbeams", "hornbill", "hornbills", "hornblende", "hornbook", "hornbooks", "hornet", "hornets", "hornfels", "hornfelses", "hornie", "horniness", "hornito", "hornitos", "hornpipe", "hornpipes", "horns", "hornstone", "hornstones", "horntail", "horntails", "hornworm", "hornworms", "hornwort", "hornworts", "horologe", "horologer", "horologers", "horologes", "horologist", "horologists", "horologium", "horologiums", "horology", "horoscope", "horoscopes", "horoscopies", "horoscopy", "horowitz", "horribleness", "horridness", "horripilation", "horripilations", "horror", "horrors", "horsa", "horse", "horse coper", "horseback", "horsebacks", "horsebean", "horsecar", "horsed", "horsefeathers", "horseflesh", "horseflies", "horsefly", "horsehair", "horsehairs", "horsehide", "horsehides", "horselaugh", "horselaughs", "horseman", "horsemanship", "horsemeat", "horsemeats", "horsemint", "horsemints", "horseplay", "horseplays", "horsepower", "horseradish", "horseradishes", "horses", "horseshoe", "horseshoer", "horseshoers", "horseshoes", "horsetail", "horsetails", "horsewhip", "horsewhipping", "horsewhips", "horsewoman", "horsiness", "horsing", "horsings", "horst", "horsts", "hortense", "horticulture", "horticulturist", "horticulturists", "horus", "hosanna", "hosannas", "hose", "hosea", "hosepipe", "hosepipes", "hoses", "hosier", "hosiers", "hosiery", "hospice", "hospices", "hospitableness", "hospital", "hospitalisation", "hospitalisations", "hospitality", "hospitalization", "hospitalizations", "hospitaller", "hospitallers", "hospitals", "hospitium", "hospitiums", "hospodar", "hospodars", "host", "hosta", "hostage", "hostages", "hostas", "hostel", "hosteler", "hostelers", "hosteller", "hostellers", "hostelling", "hostelries", "hostelry", "hostels", "hostess", "hostess ship", "hostesses", "hostilities", "hostility", "hostler", "hosts", "hot gospeller", "hot gospellers", "hot press", "hotbed", "hotbeds", "hotch", "hotches", "hotchpot", "hotchpotch", "hotchpotches", "hotchpots", "hotel", "hotelier", "hoteliers", "hotels", "hothead", "hotheadedness", "hotheads", "hothouse", "hothouses", "hotness", "hotplate", "hotplates", "hotpot", "hotpots", "hotshot", "hotshots", "hotspur", "hottentot", "hottie", "hotties", "houdah", "houdahs", "houdini", "hough", "houghs", "hound", "hound s tongue", "hounding", "hounds", "hounslow", "hour", "hourglass", "hourglasses", "houri", "houris", "hours", "house", "house warming", "house warmings", "houseboat", "houseboy", "houseboys", "housecoat", "housecoats", "housecraft", "housedog", "housedogs", "housefather", "housefathers", "houseful", "housefuls", "houseguest", "household", "householder", "householders", "households", "housekeeper", "housekeepers", "housekeeping", "housel", "houselights", "housels", "housemaid", "housemaids", "houseman", "housemaster", "housemasters", "housemother", "housemothers", "houseparent", "houseparents", "houseplant", "houseplants", "houses", "housetop", "housetops", "housewife", "housewifery", "housework", "housey housey", "housing", "housings", "housman", "houston", "houting", "houyhnhnm", "houyhnhnms", "hovel", "hovels", "hoven", "hover", "hovercraft", "hovercrafts", "hoverport", "hoverports", "hovers", "hovertrain", "hovertrains", "how", "how d ye do", "how d ye dos", "how do you do", "howard", "howdah", "howdahs", "howdie", "howdies", "howdy", "howe", "howell", "howes", "howf", "howff", "howffs", "howfs", "howitzer", "howitzers", "howl", "howler", "howlers", "howlet", "howlets", "howling", "howlings", "howls", "hows", "howtowdie", "howtowdies", "hoy", "hoya", "hoyden", "hoydenism", "hoydens", "hoylake", "hoyle", "hoys", "huarache", "huaraches", "hub", "hubbies", "hubble", "hubble bubble", "hubble bubbles", "hubbub", "hubbubs", "hubby", "hubcap", "hubcaps", "hubert", "hubli", "hubris", "hubs", "huck", "huckaback", "huckabacks", "huckle", "huckleberries", "huckleberry", "huckles", "hucks", "huckster", "hucksters", "huddersfield", "huddle", "huddles", "huddleston", "hudibrastic", "hudibrastics", "hudson", "hue", "hues", "huey", "huff", "huffiness", "huffing", "huffishness", "huffs", "hug", "hug me tight", "hug me tights", "hugeness", "hugeousness", "hugger mugger", "hugging", "hugh", "hughes", "hughie", "hugo", "hugs", "huguenot", "huguenots", "huia", "huias", "hula", "hula hoop", "hula hoops", "hula hula", "hula hulas", "hulas", "hulk", "hulks", "hull", "hullabaloo", "hullabaloos", "huller", "hullers", "hulling", "hullo", "hullos", "hulls", "hulme", "hum", "human", "humaneness", "humanisation", "humaniser", "humanisers", "humanism", "humanist", "humanists", "humanitarian", "humanitarianism", "humanitarians", "humanities", "humanity", "humanization", "humanizer", "humanizers", "humankind", "humanness", "humanoid", "humanoids", "humans", "humber", "humberside", "humbleness", "humbling", "humblings", "humboldt", "humbug", "humbugger", "humbuggers", "humbuggery", "humbugs", "humdinger", "humdingers", "humdrum", "humdrums", "hume", "humectant", "humectants", "humerus", "humidification", "humidifier", "humidifiers", "humidistat", "humidistats", "humidity", "humidness", "humidor", "humidors", "humiliation", "humiliations", "humiliator", "humiliators", "humility", "humism", "hummer", "hummers", "humming", "hummings", "hummock", "hummocks", "humor", "humoresque", "humoresques", "humoring", "humorist", "humorists", "humorlessness", "humorousness", "humors", "humour", "humourlessness", "humours", "hump", "humpback", "humpbacks", "humperdinck", "humphrey", "humpies", "humps", "humpties", "humpty", "humpy", "hums", "humus", "humuses", "hun", "hunch", "hunchback", "hunchbacks", "hunches", "hundred", "hundred percenter", "hundreds", "hundredth", "hundredths", "hundredweight", "hundredweights", "hungarian", "hungarians", "hungary", "hunger", "hungers", "hungriness", "hunk", "hunker", "hunkers", "hunks", "hunkses", "hunky", "hunt", "huntaway", "huntaways", "hunter", "hunters", "hunting", "huntingdon", "huntingdonshire", "huntings", "huntington", "huntress", "huntresses", "hunts", "huntsman", "huntsmanship", "huntsville", "huppah", "hurcheon", "hurcheons", "hurd", "hurdle", "hurdler", "hurdlers", "hurdles", "hurdling", "hurdlings", "hurdy gurdies", "hurdy gurdy", "hurl", "hurler", "hurlers", "hurley", "hurleys", "hurlies", "hurling", "hurls", "hurly", "hurly burly", "huron", "hurricane", "hurricanes", "hurriedness", "hurries", "hurry", "hurry scurry", "hurry skurry", "hurrying", "hurryings", "hurst", "hurstmonceux", "hursts", "hurt", "hurter", "hurters", "hurtfulness", "hurting", "hurtleberries", "hurtleberry", "hurtlessness", "hurts", "husain", "husband", "husbandage", "husbandages", "husbandman", "husbandry", "husbands", "hush", "hushabies", "hushaby", "hushes", "husk", "husker", "huskers", "huskies", "huskiness", "husking", "huskings", "husks", "husky", "hussar", "hussars", "hussein", "hussies", "hussite", "hussy", "hustings", "hustle", "hustler", "hustlers", "hustles", "huston", "hut", "hutch", "hutches", "hutment", "hutments", "huts", "hutton", "hutu", "hutus", "huxley", "huygens", "huzzah", "huzzahs", "hwyl", "hwyls", "hyacinth", "hyacinths", "hyacinthus", "hyaena", "hyaenas", "hyaline", "hyalinization", "hyalinizations", "hyalite", "hyalophane", "hyaloplasm", "hybrid", "hybridisation", "hybridisations", "hybridiser", "hybridisers", "hybridism", "hybridization", "hybridizations", "hybridizer", "hybridizers", "hybridizing", "hybridoma", "hybrids", "hybris", "hydathode", "hydathodes", "hydatid", "hydatids", "hyde", "hyderabad", "hydra", "hydraemia", "hydragogue", "hydragogues", "hydrangea", "hydrangeas", "hydrant", "hydranth", "hydranths", "hydrants", "hydrargyrism", "hydrargyrum", "hydras", "hydrate", "hydrates", "hydration", "hydraulics", "hydrazine", "hydremia", "hydria", "hydrias", "hydride", "hydrides", "hydro", "hydrocarbon", "hydrocarbons", "hydrocele", "hydroceles", "hydrocellulose", "hydrocephalus", "hydrochloride", "hydrochlorides", "hydrocortisone", "hydrocracking", "hydrodynamics", "hydroelectricity", "hydrofoil", "hydrofoils", "hydrogen", "hydrogenate", "hydrogenates", "hydrogenation", "hydrogenations", "hydrogeologist", "hydrogeologists", "hydrogeology", "hydrograph", "hydrographer", "hydrographers", "hydrographs", "hydrography", "hydroid", "hydroids", "hydrokinetics", "hydrologist", "hydrologists", "hydrology", "hydrolysate", "hydrolysates", "hydrolysis", "hydrolyte", "hydrolytes", "hydromagnetics", "hydromancy", "hydromechanics", "hydromedusa", "hydromedusas", "hydromel", "hydrometallurgy", "hydrometeor", "hydrometeorology", "hydrometeors", "hydrometer", "hydrometers", "hydrometry", "hydronaut", "hydronauts", "hydropathist", "hydropathists", "hydropathy", "hydrophane", "hydrophanes", "hydrophily", "hydrophobia", "hydrophobicity", "hydrophone", "hydrophones", "hydrophyte", "hydrophytes", "hydroplane", "hydroplanes", "hydroponics", "hydropower", "hydroquinone", "hydros", "hydroscope", "hydroscopes", "hydroski", "hydroskis", "hydrosoma", "hydrosome", "hydrosomes", "hydrosphere", "hydrostat", "hydrostatics", "hydrostats", "hydrosulphide", "hydrosulphides", "hydrosulphite", "hydrosulphites", "hydrotaxis", "hydrotheca", "hydrothecas", "hydrotherapeutics", "hydrotherapy", "hydrothorax", "hydrothoraxes", "hydrotropism", "hydroxide", "hydroxides", "hydroxyl", "hydroxylamine", "hydroxylamines", "hydrozoa", "hydrozoan", "hydrozoans", "hydrus", "hyena", "hyenas", "hyetograph", "hyetographs", "hyetography", "hyetology", "hygiene", "hygienics", "hygienist", "hygienists", "hygristor", "hygristors", "hygrodeik", "hygrodeiks", "hygrograph", "hygrographs", "hygrometer", "hygrometers", "hygrometry", "hygrophyte", "hygrophytes", "hygroscope", "hygroscopes", "hygroscopicity", "hygrostat", "hygrostats", "hyksos", "hylobates", "hylomorphism", "hylotheism", "hylotheist", "hylotheists", "hylozoism", "hylozoist", "hylozoists", "hymen", "hymeneal", "hymeneals", "hymenium", "hymeniums", "hymenoptera", "hymenopteran", "hymenopterans", "hymens", "hymn", "hymnal", "hymnals", "hymnaries", "hymnary", "hymnbook", "hymnbooks", "hymnist", "hymnists", "hymnodist", "hymnodists", "hymnody", "hymnologist", "hymnologists", "hymnology", "hymns", "hyoid", "hyoscine", "hyoscyamine", "hyp", "hypalgesia", "hypallage", "hypallages", "hypanthium", "hypanthiums", "hypatia", "hype", "hyperacidity", "hyperactivity", "hyperacusis", "hyperadrenalism", "hyperaemia", "hyperaesthesia", "hyperalgesia", "hyperbaton", "hyperbatons", "hyperbola", "hyperbolas", "hyperbole", "hyperboles", "hyperbolism", "hyperboloid", "hyperboloids", "hypercalcemia", "hypercorrection", "hypercorrectness", "hypercritic", "hypercriticism", "hypercriticisms", "hypercritics", "hyperdulia", "hyperemesis", "hyperemia", "hyperesthesia", "hypergamy", "hyperglycaemia", "hyperglycemia", "hyperhidrosis", "hyperion", "hypermarket", "hypermarkets", "hypermedia", "hypermetropia", "hypernym", "hypernyms", "hypernymy", "hyperon", "hyperons", "hyperopia", "hyperparasite", "hyperphagia", "hyperplasia", "hyperpyrexia", "hypersensitisation", "hypersensitiveness", "hypersensitivity", "hypersensitization", "hypersomnia", "hyperspace", "hypersthene", "hypertension", "hypertensive", "hypertext", "hyperthermia", "hyperthyroidism", "hypertrophy", "hypervelocities", "hypervelocity", "hyperventilation", "hypervitaminosis", "hypes", "hypha", "hyphen", "hyphenation", "hyphenations", "hyphenisation", "hyphenisations", "hyphenization", "hyphenizations", "hyphens", "hypnogenesis", "hypnology", "hypnone", "hypnopaedia", "hypnos", "hypnosis", "hypnotherapy", "hypnotic", "hypnotics", "hypnotisability", "hypnotisation", "hypnotisations", "hypnotiser", "hypnotisers", "hypnotism", "hypnotist", "hypnotists", "hypnotizability", "hypnotization", "hypnotizations", "hypnotizer", "hypnotizers", "hypo", "hypoblast", "hypoblasts", "hypocaust", "hypocausts", "hypocentre", "hypocentres", "hypochlorite", "hypochlorites", "hypochondria", "hypochondriac", "hypochondriacs", "hypochondriasis", "hypochondrium", "hypocorism", "hypocotyl", "hypocotyls", "hypocrisies", "hypocrisy", "hypocrite", "hypocrites", "hypocycloid", "hypocycloids", "hypoderm", "hypoderma", "hypodermas", "hypodermic", "hypodermics", "hypodermis", "hypodermises", "hypoderms", "hypogastrium", "hypogastriums", "hypogeum", "hypoglossal", "hypoglycaemia", "hypoglycemia", "hypognathism", "hypogyny", "hypolimnion", "hypolimnions", "hypomania", "hypomanic", "hyponasty", "hyponitrite", "hyponym", "hyponyms", "hyponymy", "hypophosphite", "hypophosphites", "hypophysectomy", "hypophysis", "hypopituitarism", "hypoplasia", "hypos", "hypostasis", "hypostasises", "hypostyle", "hypostyles", "hyposulphite", "hyposulphites", "hypotaxis", "hypotension", "hypotensive", "hypotensives", "hypotenuse", "hypotenuses", "hypothalamus", "hypothec", "hypothecation", "hypothecations", "hypothecator", "hypothecators", "hypothecs", "hypothenuse", "hypothenuses", "hypothermia", "hypothesis", "hypothesises", "hypothyroidism", "hypotyposis", "hypoxemia", "hypoxia", "hyps", "hypsographies", "hypsography", "hypsometer", "hypsometers", "hypsometry", "hyracoid", "hyrax", "hyraxes", "hyson", "hysons", "hyssop", "hyssops", "hysterectomies", "hysterectomy", "hysteresis", "hysteria", "hysterias", "hysteric", "hysterics", "hysterogeny", "hysterotomies", "hysterotomy", "i m", "i ve", "i beam", "i beams", "i spy", "iago", "iain", "iamb", "iambic", "iambics", "iambs", "iambus", "iambuses", "ian", "iapetus", "iatrochemist", "iatrochemistry", "iatrochemists", "iatrogenicity", "ibadan", "iberia", "iberian", "iberians", "ibert", "ibex", "ibexes", "ibis", "ibises", "ibiza", "ibo", "ibos", "ibrahim", "ibsen", "ibsenism", "ibuprofen", "icarian", "icarus", "ice", "ice skater", "ice skaters", "iceberg", "icebergs", "iceblink", "iceblinks", "icebox", "iceboxes", "icehouse", "icehouses", "iceland", "icelander", "icelanders", "icelandic", "iceman", "ices", "ich", "ichneumon", "ichneumons", "ichnite", "ichnites", "ichnographies", "ichnography", "ichnology", "ichor", "ichors", "ichthyography", "ichthyoid", "ichthyoids", "ichthyolatry", "ichthyolite", "ichthyolites", "ichthyologist", "ichthyologists", "ichthyology", "ichthyophagist", "ichthyophagists", "ichthyophagy", "ichthyornis", "ichthyosaur", "ichthyosaurs", "ichthyosis", "icicle", "icicles", "iciness", "icing", "icings", "icker", "ickers", "icon", "iconoclasm", "iconoclast", "iconoclasts", "iconography", "iconolater", "iconolaters", "iconolatry", "iconologist", "iconologists", "iconology", "iconoscope", "iconoscopes", "iconostasis", "icons", "icosahedron", "icositetrahedron", "icterus", "ictinus", "ictus", "ictuses", "ida", "idaho", "idahoan", "idahoans", "ide", "idea", "ideal", "idealisation", "idealisations", "idealiser", "idealisers", "idealism", "idealist", "idealists", "idealities", "ideality", "idealization", "idealizations", "idealizer", "idealizers", "ideals", "ideas", "ideate", "ideates", "ideation", "identicalness", "identification", "identifications", "identifier", "identifiers", "identikit", "identikits", "identities", "identity", "ideogram", "ideograms", "ideograph", "ideographs", "ideography", "ideologies", "ideologist", "ideologists", "ideologue", "ideologues", "ideology", "ides", "idioblast", "idioblasts", "idiocies", "idiocy", "idioglossia", "idiograph", "idiographs", "idiolect", "idiolects", "idiom", "idioms", "idiopathies", "idiopathy", "idiophone", "idiophones", "idioplasm", "idioplasms", "idiosyncrasies", "idiosyncrasy", "idiot", "idiotism", "idiots", "idleness", "idler", "idlers", "idlesse", "idling", "ido", "idocrase", "idoist", "idol", "idola", "idolater", "idolaters", "idolatress", "idolatresses", "idolatry", "idolisation", "idolisations", "idoliser", "idolisers", "idolism", "idolist", "idolization", "idolizations", "idolizer", "idolizers", "idols", "idomeneo", "idomeneus", "idyll", "idyllist", "idyllists", "idylls", "if", "ife", "iff", "ifni", "igbo", "igbos", "iglesias", "igloo", "igloos", "iglu", "iglus", "ignatius", "ignescent", "ignescents", "ignitability", "igniter", "igniters", "ignitibility", "ignition", "ignitions", "ignitron", "ignitrons", "ignobility", "ignobleness", "ignominies", "ignominy", "ignoramus", "ignoramuses", "ignorance", "ignorances", "ignorer", "ignorers", "igor", "igorot", "igorots", "iguana", "iguanas", "iguanid", "iguanids", "ihram", "ihrams", "ijssel", "ijsselmeer", "ike", "ikebana", "ikhnaton", "ikon", "ikons", "ilan", "ilana", "ilang ilang", "ileitis", "ileostomy", "ileum", "ileus", "ileuses", "ilex", "ilexes", "iliad", "ilium", "ilk", "ilkeston", "ilkley", "ilks", "ill", "ill being", "ill breeding", "ill naturedness", "ill treatment", "ill usage", "ill use", "ill uses", "ill wisher", "illation", "illations", "illative", "illawarra", "ille et vilaine", "illegal", "illegalities", "illegality", "illegibility", "illegibleness", "illegitimacy", "illegitimate", "illegitimates", "illiberality", "illicitness", "illimitability", "illimitableness", "illinium", "illinoian", "illinoians", "illinois", "illiteracy", "illiterate", "illiterateness", "illiterates", "illness", "illnesses", "illocution", "illocutions", "illogic", "illogicality", "illogicalness", "ills", "illuminance", "illuminances", "illuminant", "illuminants", "illuminate", "illuminates", "illumination", "illuminations", "illuminator", "illuminators", "illuminism", "illuminist", "illuminists", "illusion", "illusionism", "illusionist", "illusionists", "illusions", "illusiveness", "illustration", "illustrations", "illustrator", "illustrators", "illustriousness", "illuviation", "illuvium", "illyria", "illyrian", "ilmenite", "ilona", "ilorin", "image", "imagery", "images", "imaginariness", "imagination", "imaginations", "imaginativeness", "imaginer", "imaginers", "imaging", "imagism", "imagist", "imagists", "imago", "imagoes", "imagos", "imam", "imamate", "imamates", "imams", "imaret", "imarets", "imaum", "imaums", "imbalance", "imbalances", "imbecile", "imbeciles", "imbecility", "imbiber", "imbibers", "imbibing", "imbibition", "imbrex", "imbrication", "imbrications", "imbroglio", "imbroglios", "imbruement", "imelda", "imidazole", "imide", "imides", "imine", "imines", "imipramine", "imitability", "imitableness", "imitation", "imitations", "imitativeness", "imitator", "imitators", "immaculacy", "immaculateness", "immanence", "immanency", "immanentism", "immanuel", "immaterialism", "immaterialist", "immaterialists", "immateriality", "immaterialness", "immatureness", "immaturity", "immeasurableness", "immediacies", "immediacy", "immediateness", "immediatism", "immenseness", "immensities", "immensity", "immensurability", "immersion", "immersionism", "immersionist", "immersionists", "immersions", "immigrant", "immigrants", "immigration", "immigrations", "imminence", "imminency", "immingham", "immiscibility", "immitigability", "immixture", "immobilisation", "immobilisations", "immobilism", "immobility", "immobilization", "immobilizations", "immobilizing", "immoderacy", "immoderateness", "immoderation", "immodesties", "immodesty", "immolation", "immolations", "immolator", "immolators", "immoralism", "immoralist", "immoralists", "immoralities", "immorality", "immortal", "immortalisation", "immortalities", "immortality", "immortalization", "immortals", "immortelle", "immortelles", "immotility", "immovability", "immovableness", "immune", "immunisation", "immunisations", "immunities", "immunity", "immunization", "immunizations", "immunoassay", "immunochemistry", "immunofluorescence", "immunogen", "immunogenicity", "immunoglobulin", "immunologist", "immunologists", "immunology", "immunopathology", "immunosuppressant", "immunosuppressants", "immunosuppression", "immunotherapy", "immurement", "immutability", "immutableness", "imogen", "imp", "impact", "impaction", "impactions", "impactite", "impacts", "impairer", "impairers", "impairment", "impairments", "impala", "impalas", "impalement", "impalements", "impalpability", "impanation", "imparity", "imparkation", "imparlance", "imparlances", "impartation", "imparter", "imparters", "impartiality", "impartialness", "impartibility", "imparting", "impartment", "impassability", "impassableness", "impasse", "impasses", "impassibility", "impassibleness", "impassiveness", "impassivities", "impassivity", "impastation", "impasto", "impastos", "impatience", "impatiens", "impatienses", "impeacher", "impeachers", "impeachment", "impeachments", "impeccability", "impeccancy", "impecuniosity", "impecuniousness", "impedance", "impedances", "impediment", "impedimenta", "impediments", "impellent", "impellents", "impeller", "impellers", "impendence", "impendency", "impenetrability", "impenitence", "impenitency", "imperative", "imperatives", "imperator", "imperators", "imperceptibility", "imperceptibleness", "imperfect", "imperfectibility", "imperfection", "imperfections", "imperfective", "imperfectness", "imperfects", "imperforation", "imperforations", "imperial", "imperialism", "imperialisms", "imperialist", "imperialists", "imperials", "imperilment", "imperilments", "imperiousness", "imperishability", "imperishableness", "imperium", "impermanence", "impermanency", "impermeability", "impermeableness", "impermissibility", "impersonality", "impersonation", "impersonations", "impersonator", "impersonators", "impertinence", "impertinences", "impertinencies", "impertinency", "imperturbability", "imperturbation", "imperviousness", "impetigo", "impetigos", "impetration", "impetrations", "impetuosities", "impetuosity", "impetuousness", "impetus", "impetuses", "impi", "impies", "impieties", "impiety", "impignoration", "impingement", "impingements", "impinging", "impiousness", "impis", "impishness", "implacability", "implacableness", "implant", "implantation", "implantations", "implants", "implausibility", "implausibleness", "impleader", "impleaders", "implement", "implementation", "implementations", "implementer", "implementers", "implementor", "implementors", "implements", "impletion", "impletions", "implicating", "implication", "implications", "implicitness", "imploration", "implorations", "implorer", "implosion", "implosions", "implosive", "impluvium", "impolicy", "impoliteness", "impoliticness", "imponderability", "imponderable", "imponderableness", "imponderables", "imponent", "imponents", "import", "importance", "importances", "importation", "importations", "importer", "importers", "importing", "imports", "importunacies", "importunacy", "importunateness", "importuner", "importuners", "importunities", "importunity", "imposer", "imposers", "imposingness", "imposition", "impositions", "impossibilities", "impossibility", "impossible", "impossibles", "impost", "imposter", "imposters", "impostor", "impostors", "imposts", "impostume", "impostumes", "imposture", "impostures", "impotence", "impotency", "impoundage", "impounder", "impounders", "impounding", "impoundment", "impoundments", "impoverishment", "impracticability", "impracticableness", "impracticalities", "impracticality", "impracticalness", "imprecation", "imprecations", "impreciseness", "imprecision", "imprecisions", "impregnability", "impregnation", "impregnations", "impresa", "impresario", "impresarios", "imprescriptibility", "impress", "impresses", "impressibility", "impression", "impressionability", "impressionism", "impressionist", "impressionists", "impressions", "impressiveness", "impressment", "impressments", "impressure", "impressures", "imprest", "imprests", "imprimatur", "imprimaturs", "imprint", "imprinter", "imprinters", "imprinting", "imprints", "imprisonment", "imprisonments", "improbabilities", "improbability", "improbities", "improbity", "impromptu", "impromptus", "impropriation", "impropriations", "impropriator", "impropriators", "improprieties", "impropriety", "improvability", "improvableness", "improve", "improvement", "improvements", "improver", "improvers", "improves", "improvidence", "improvisation", "improvisations", "improvisator", "improvisators", "improviser", "improvisers", "improvvisatore", "imprudence", "imps", "impsonite", "impudence", "impudences", "impudicity", "impugner", "impugners", "impugnment", "impugnments", "impuissance", "impuissances", "impulse", "impulses", "impulsion", "impulsions", "impulsiveness", "impunity", "impureness", "impurities", "impurity", "imputability", "imputableness", "imputation", "imputations", "imputer", "imputers", "in and out", "in between", "in law", "in laws", "in off", "in tray", "in trays", "ina", "inabilities", "inability", "inaccessibility", "inaccessibleness", "inaccuracies", "inaccuracy", "inaccurateness", "inaction", "inactivation", "inactivity", "inadequacies", "inadequacy", "inadequateness", "inadmissibility", "inadvertence", "inadvertency", "inadvisability", "inadvisableness", "inalienability", "inalterability", "inalterableness", "inamorata", "inamoratas", "inamorato", "inamoratos", "inane", "inanimateness", "inanimation", "inanities", "inanition", "inanity", "inappetence", "inapplicability", "inapplicableness", "inappositeness", "inappreciativeness", "inapprehension", "inapprehensiveness", "inapproachability", "inappropriateness", "inaptitude", "inaptness", "inarticulateness", "inattention", "inattentiveness", "inaudibility", "inaudibleness", "inaugural", "inaugurals", "inauguration", "inaugurations", "inaugurator", "inaugurators", "inauspiciousness", "inbeing", "inbeings", "inbreeding", "inburst", "inbursts", "inby", "inca", "incalculability", "incalculableness", "incalescence", "incan", "incandescence", "incantation", "incantations", "incapability", "incapaciousness", "incapacitation", "incapacities", "incapacity", "incaparina", "incarceration", "incarcerations", "incardination", "incarnation", "incarnations", "incas", "incasement", "incasements", "incaution", "incautions", "incautiousness", "incendiaries", "incendiarism", "incendiary", "incense", "incensement", "incenses", "incensories", "incensory", "incentive", "incentives", "inception", "inceptions", "inceptive", "inceptives", "inceptor", "inceptors", "incertitude", "incertitudes", "incessancy", "incessantness", "incest", "incestuousness", "inch", "inches", "inchoation", "inchoations", "inchoative", "inchoatives", "inchon", "incidence", "incidences", "incident", "incidental", "incidentalness", "incidentals", "incidents", "incineration", "incinerations", "incinerator", "incinerators", "incipience", "incipiency", "incipit", "incision", "incisions", "incisiveness", "incisor", "incisors", "incisure", "incisures", "incitant", "incitants", "incitation", "incitations", "incitement", "incitements", "inciter", "inciters", "incivilities", "incivility", "incivism", "inclemency", "inclination", "inclinations", "incline", "inclines", "inclining", "inclinings", "inclinometer", "inclinometers", "incloser", "inclosers", "inclosure", "inclosures", "inclusion", "inclusions", "inclusiveness", "incog", "incogitability", "incognita", "incognitas", "incognito", "incognitos", "incognizance", "incoherence", "incoherences", "incoherencies", "incoherency", "incombustibility", "incombustible", "incombustibleness", "income", "incomer", "incomers", "incomes", "incoming", "incomings", "incommensurability", "incommensurable", "incommensurableness", "incommensurateness", "incommodiousness", "incommodities", "incommodity", "incommunicability", "incommunicableness", "incommunicativeness", "incommutability", "incommutableness", "incomparability", "incomparableness", "incompatibilities", "incompatibility", "incompatible", "incompatibleness", "incompatibles", "incompetence", "incompetency", "incompetent", "incompetents", "incompleteness", "incompletion", "incompliance", "incompliances", "incomprehensibility", "incomprehensibleness", "incomprehension", "incomprehensiveness", "incompressibility", "inconceivability", "inconceivableness", "inconclusiveness", "incongruities", "incongruity", "incongruousness", "inconnu", "inconsecutiveness", "inconsequence", "inconsiderableness", "inconsiderateness", "inconsideration", "inconsistencies", "inconsistency", "inconsolability", "inconsolableness", "inconsonance", "inconspicuousness", "inconstancies", "inconstancy", "incontestability", "incontinence", "incontinency", "incontrovertibility", "inconvenience", "inconveniences", "inconveniency", "inconvertibility", "incoordination", "incorporation", "incorporations", "incorporator", "incorporators", "incorporeality", "incorporeity", "incorrectness", "incorrigibility", "incorrigible", "incorrigibleness", "incorruptibility", "incorruptibleness", "incorruption", "incorruptness", "incrassation", "incrassations", "increase", "increaser", "increasers", "increases", "incredibility", "incredibleness", "incredulities", "incredulity", "incredulousness", "increment", "increments", "incretion", "incrimination", "incross", "incrustation", "incrustations", "incubation", "incubations", "incubator", "incubators", "incubus", "incubuses", "incudes", "inculcation", "inculcations", "inculcator", "inculcators", "inculpation", "inculpations", "incumbencies", "incumbency", "incumbent", "incumbents", "incurability", "incurable", "incurableness", "incurables", "incuriosity", "incuriousness", "incurrence", "incurrences", "incurring", "incursion", "incursions", "incurvation", "incurvations", "incurvature", "incurvatures", "incurve", "incurves", "incus", "incuse", "incuses", "ind", "indaba", "indabas", "indagation", "indagations", "indagator", "indagators", "indamine", "indebtedness", "indecencies", "indecency", "indecision", "indecisiveness", "indecorousness", "indecorum", "indecorums", "indefatigableness", "indefeasibility", "indefensibility", "indefensibleness", "indefinableness", "indefiniteness", "indehiscence", "indelibility", "indelibleness", "indelicacies", "indelicacy", "indemnification", "indemnities", "indemnity", "indemonstrability", "indene", "indent", "indentation", "indentations", "indenter", "indenters", "indention", "indentions", "indents", "indenture", "indentures", "independence", "independences", "independencies", "independency", "independent", "independents", "indescribability", "indescribableness", "indestructibility", "indestructibleness", "indeterminableness", "indeterminacy", "indeterminateness", "indetermination", "indeterminism", "indeterminist", "indeterminists", "index", "indexation", "indexer", "indexers", "indexes", "indexing", "indexings", "india", "indiaman", "indian", "indiana", "indianapolis", "indianisation", "indianization", "indians", "indic", "indican", "indicant", "indicants", "indicating", "indication", "indications", "indicative", "indicatives", "indicator", "indicators", "indices", "indicium", "indicolite", "indiction", "indictions", "indictment", "indictments", "indifference", "indifferency", "indifferentism", "indifferentist", "indifferentists", "indigence", "indigences", "indigene", "indigenes", "indigent", "indigestibility", "indigestion", "indignation", "indignations", "indignities", "indignity", "indigo", "indigoes", "indigos", "indigotin", "indirection", "indirections", "indirectness", "indiscernibility", "indiscernibleness", "indiscerptibility", "indiscipline", "indiscreetness", "indiscretion", "indiscretions", "indiscriminateness", "indiscrimination", "indispensability", "indispensable", "indispensableness", "indisposedness", "indisposition", "indispositions", "indisputability", "indisputableness", "indissolubility", "indissolubleness", "indistinctiveness", "indistinctness", "indistinguishability", "indistinguishableness", "inditement", "inditements", "inditer", "inditers", "indium", "individual", "individualisation", "individualism", "individualist", "individualists", "individualities", "individuality", "individualization", "individuals", "individuation", "individuations", "indivisibility", "indivisibleness", "indo aryan", "indo aryans", "indo european", "indo germanic", "indo iranian", "indo pacific", "indocility", "indoctrination", "indoctrinations", "indoctrinator", "indoctrinators", "indole", "indolence", "indolences", "indomethacin", "indomitability", "indomitableness", "indonesia", "indonesian", "indonesians", "indore", "indoxyl", "indra", "indraft", "indrafts", "indraught", "indraughts", "indre", "indre et loire", "indri", "indris", "indrises", "indubitability", "indubitableness", "inducement", "inducements", "inducer", "inducers", "inducing", "inductance", "inductances", "inductee", "inductees", "inductility", "induction", "inductions", "inductor", "inductors", "indulgence", "indulgences", "indulgencies", "indulgency", "indulger", "indulgers", "indulging", "induline", "indulines", "indult", "indults", "indumentum", "indumentums", "induna", "indunas", "induplication", "induplications", "induration", "indus", "indusium", "industrialisation", "industrialism", "industrialist", "industrialists", "industrialization", "industries", "industriousness", "industry", "indweller", "indwellers", "indy", "inebriant", "inebriants", "inebriate", "inebriates", "inebriation", "inebriations", "inebrieties", "inebriety", "inedibility", "ineducability", "ineffability", "ineffableness", "ineffaceability", "ineffectiveness", "ineffectuality", "ineffectualness", "inefficacy", "inefficiencies", "inefficiency", "inelasticity", "inelegance", "inelegancy", "ineligibility", "ineligible", "ineloquence", "ineloquences", "ineptitude", "ineptness", "inequalities", "inequality", "inequitableness", "inequities", "inequity", "ineradicableness", "inerrability", "inerrableness", "inerrancy", "inertia", "inertness", "ines", "inescutcheon", "inescutcheons", "inessential", "inessentials", "inessive", "inestimability", "inestimableness", "inevitability", "inevitable", "inevitableness", "inexactitude", "inexactitudes", "inexactness", "inexcusability", "inexcusableness", "inexecution", "inexhaustibility", "inexistence", "inexistences", "inexorability", "inexorableness", "inexpedience", "inexpediency", "inexpensiveness", "inexperience", "inexpertness", "inexpiableness", "inexplicability", "inexplicableness", "inexpressiveness", "inexpugnability", "inexpugnableness", "inextensibility", "inez", "infallibilism", "infallibility", "infallible", "infamies", "infamy", "infancies", "infancy", "infant", "infanta", "infantas", "infante", "infantes", "infanthood", "infanticide", "infanticides", "infantilism", "infantilisms", "infantries", "infantry", "infantryman", "infants", "infarct", "infarction", "infarctions", "infarcts", "infare", "infares", "infatuate", "infatuates", "infatuation", "infatuations", "infeasibility", "infeasibleness", "infection", "infections", "infectiousness", "infectiveness", "infector", "infectors", "infecundity", "infelicities", "infelicity", "inference", "inferences", "inferior", "inferiorities", "inferiority", "inferiors", "infernal", "infernality", "inferno", "infernos", "infertility", "infestation", "infestations", "infeudation", "infidel", "infidelities", "infidelity", "infidels", "infield", "infielder", "infielders", "infields", "infighter", "infighters", "infighting", "infill", "infills", "infiltrate", "infiltrates", "infiltration", "infiltrations", "infiltrator", "infiltrators", "infimum", "infiniteness", "infinitesimal", "infinitesimals", "infinitive", "infinitives", "infinitude", "infinity", "infirmarian", "infirmarians", "infirmaries", "infirmary", "infirmities", "infirmity", "infirmness", "infix", "infixes", "inflamer", "inflamers", "inflaming", "inflammability", "inflammable", "inflammableness", "inflammation", "inflammations", "inflatable", "inflatables", "inflation", "inflationism", "inflationist", "inflationists", "inflations", "inflator", "inflators", "inflection", "inflections", "inflexibility", "inflexibleness", "inflexion", "inflexions", "inflicter", "infliction", "inflictions", "inflictor", "inflorescence", "inflorescences", "inflow", "inflows", "influence", "influences", "influent", "influents", "influenza", "influx", "influxes", "info", "infolding", "infomercial", "informalities", "informality", "informant", "informants", "information", "informativeness", "informer", "informers", "informing", "infortune", "infortunes", "infotainment", "infraction", "infractions", "infractor", "infractors", "infralapsarian", "infralapsarians", "infrangibility", "infrangibleness", "infrastructure", "infrastructures", "infrequencies", "infrequency", "infringement", "infringements", "infundibulum", "infuriation", "infuser", "infusers", "infusibility", "infusion", "infusions", "infusoria", "infusorian", "infusorians", "inga", "ingate", "ingates", "ingathering", "ingatherings", "inge", "ingemination", "ingeminations", "ingeniousness", "ingenuities", "ingenuity", "ingenuousness", "ingestion", "ingestions", "ingine", "ingle", "ingleborough", "ingles", "ingloriousness", "ingmar", "ingoing", "ingoings", "ingolstadt", "ingot", "ingots", "ingrain", "ingraining", "ingrains", "ingrate", "ingrates", "ingratiation", "ingratitude", "ingratitudes", "ingredient", "ingredients", "ingres", "ingress", "ingresses", "ingression", "ingressions", "ingressive", "ingrid", "ingroup", "ingroups", "ingrowth", "ingrowths", "ingurgitation", "ingurgitations", "inhabitancies", "inhabitancy", "inhabitant", "inhabitants", "inhabitation", "inhabitations", "inhabiter", "inhabiters", "inhalant", "inhalants", "inhalation", "inhalations", "inhalator", "inhalators", "inhaler", "inhalers", "inharmonies", "inharmoniousness", "inharmony", "inhaul", "inhauls", "inherence", "inherences", "inherencies", "inherency", "inheritance", "inheritances", "inheritor", "inheritors", "inheritress", "inheritresses", "inheritrix", "inheritrixes", "inhesion", "inhibition", "inhibitions", "inhibitor", "inhibitors", "inhomogeneity", "inhospitableness", "inhospitality", "inhumanity", "inhumation", "inhumations", "inhumer", "inhumers", "inigo", "inimicality", "inimicalness", "inimitability", "inimitableness", "inion", "iniquities", "iniquitousness", "iniquity", "initial", "initialization", "initializations", "initials", "initiate", "initiates", "initiation", "initiations", "initiative", "initiatives", "initiator", "initiators", "injection", "injections", "injector", "injectors", "injudiciousness", "injun", "injunction", "injunctions", "injurer", "injurers", "injuries", "injuriousness", "injury", "injustice", "injustices", "ink", "ink cap", "inkberries", "inkberry", "inkblot", "inkblots", "inker", "inkerman", "inkers", "inkhorn", "inkhorns", "inkiness", "inkle", "inkling", "inklings", "inkpot", "inkpots", "inks", "inkstand", "inkstands", "inkwell", "inkwells", "inland", "inlander", "inlanders", "inlands", "inlay", "inlayer", "inlayers", "inlays", "inlet", "inlets", "inlier", "inliers", "inline", "inmate", "inmates", "inn", "innards", "innateness", "inner", "inners", "innervation", "inning", "innings", "innkeeper", "innkeepers", "innocence", "innocency", "innocent", "innocents", "innocuity", "innocuousness", "innovation", "innovations", "innovator", "innovators", "innoxiousness", "inns", "innsbruck", "innuendo", "innuendoes", "innuendos", "innuit", "innuits", "innumerability", "innumerableness", "innumerate", "innumerates", "innutrition", "inobservance", "inoculability", "inoculating", "inoculation", "inoculations", "inoculator", "inoculators", "inoculum", "inoculums", "inodorousness", "inoffensiveness", "inofficiousness", "inoperativeness", "inopportuneness", "inopportunity", "inordinacy", "inordinateness", "inorganization", "inosculation", "inosculations", "inositol", "inpouring", "inpourings", "input", "inputs", "inqilab", "inqilabs", "inquest", "inquests", "inquietude", "inquiline", "inquilines", "inquilinity", "inquirer", "inquirers", "inquiries", "inquiring", "inquiry", "inquisition", "inquisitions", "inquisitiveness", "inquisitor", "inquisitorialness", "inquisitors", "inroad", "inroads", "inrush", "inrushes", "inrushing", "inrushings", "ins", "insalivation", "insalivations", "insalubrity", "insaneness", "insanitariness", "insanitation", "insanity", "insatiability", "insatiableness", "insatiateness", "insatiety", "inscape", "inscapes", "inscriber", "inscribers", "inscription", "inscriptions", "inscrutability", "inscrutableness", "insect", "insecta", "insectaries", "insectarium", "insectariums", "insectary", "insecticide", "insecticides", "insectifuge", "insectifuges", "insectivora", "insectivore", "insectivores", "insectology", "insects", "insecurities", "insecurity", "inselberg", "insemination", "inseminations", "insensateness", "insensibility", "insensitiveness", "insensitivity", "insentience", "insentiency", "inseparability", "inseparableness", "insert", "inserter", "inserters", "insertion", "insertions", "inserts", "inset", "insets", "inside", "insider", "insiders", "insides", "insidiousness", "insight", "insights", "insigne", "insignes", "insignia", "insignias", "insignificance", "insignificancy", "insincerities", "insincerity", "insinuation", "insinuations", "insinuator", "insinuators", "insipidity", "insipidness", "insipience", "insistence", "insistences", "insistencies", "insistency", "insisting", "insobriety", "insociability", "insolation", "insolations", "insole", "insolence", "insoles", "insolubility", "insolubleness", "insolvability", "insolvencies", "insolvency", "insolvent", "insolvents", "insomnia", "insomniac", "insomniacs", "insomnolence", "insouciance", "insouciances", "inspection", "inspections", "inspector", "inspectorate", "inspectorates", "inspectors", "inspectorship", "inspectorships", "inspiration", "inspirations", "inspirer", "inspirers", "inspissation", "inspissations", "inspissator", "inspissators", "instabilities", "instability", "installant", "installants", "installation", "installations", "installer", "installers", "installing", "installment", "installments", "instalment", "instalments", "instance", "instances", "instancy", "instant", "instantaneity", "instantaneousness", "instants", "instar", "instars", "instatement", "instatements", "instauration", "instaurations", "instaurator", "instaurators", "instep", "insteps", "instigation", "instigations", "instigator", "instigators", "instillation", "instillations", "instiller", "instillers", "instilling", "instillment", "instillments", "instilment", "instilments", "instinct", "instincts", "institute", "instituter", "instituters", "institutes", "institution", "institutionalisation", "institutionalism", "institutionalist", "institutionalization", "institutions", "institutor", "institutors", "instruction", "instructions", "instructiveness", "instructor", "instructors", "instructress", "instructresses", "instrument", "instrumental", "instrumentalism", "instrumentalist", "instrumentalists", "instrumentality", "instrumentals", "instrumentation", "instruments", "insubordinate", "insubordination", "insubstantiality", "insufficiency", "insufflation", "insufflations", "insufflator", "insufflators", "insula", "insulant", "insulants", "insular", "insularism", "insularity", "insulas", "insulation", "insulations", "insulator", "insulators", "insulin", "insult", "insulter", "insulters", "insults", "insuperability", "insuperableness", "insupportableness", "insurability", "insurance", "insurances", "insurant", "insurants", "insured", "insurer", "insurers", "insurgence", "insurgences", "insurgencies", "insurgency", "insurgent", "insurgents", "insurmountability", "insurmountableness", "insurrection", "insurrectionary", "insurrectionism", "insurrectionist", "insurrections", "insusceptibility", "inswing", "inswinger", "inswingers", "inswings", "intactness", "intaglio", "intaglioes", "intaglios", "intake", "intakes", "intangibility", "intangible", "intangibleness", "intangibles", "intarsia", "intarsias", "integer", "integers", "integral", "integrality", "integrals", "integrand", "integrands", "integrating", "integration", "integrationist", "integrationists", "integrations", "integrator", "integrators", "integrity", "integument", "integuments", "intellect", "intellection", "intellections", "intellects", "intellectual", "intellectualism", "intellectualist", "intellectuality", "intellectuals", "intelligence", "intelligencer", "intelligencers", "intelligences", "intelligentsia", "intelligibility", "intelligibleness", "intelsat", "intemperance", "intemperateness", "intendance", "intendancies", "intendancy", "intendant", "intendants", "intended", "intendeds", "intender", "intendment", "inteneration", "intenerations", "intenseness", "intensification", "intensifier", "intensifiers", "intension", "intensions", "intensities", "intensity", "intensive", "intensiveness", "intent", "intention", "intentionality", "intentions", "intentness", "intents", "interaction", "interactionism", "interactionist", "interactionists", "interactions", "interambulacrum", "interbrain", "interbreeding", "interbreedings", "intercalation", "intercalations", "interceder", "interceders", "intercept", "interception", "interceptions", "interceptor", "interceptors", "intercepts", "intercession", "intercessions", "intercessor", "intercessors", "interchange", "interchangeability", "interchangeableness", "interchanger", "interchangers", "interchanges", "intercolumniation", "intercom", "intercommunication", "intercommunion", "intercommunity", "intercoms", "interconnectedness", "interconnection", "interconnections", "interconversion", "intercooler", "intercoolers", "intercostal", "intercourse", "intercrop", "intercrops", "intercross", "intercrosses", "intercurrence", "interdependence", "interdependences", "interdict", "interdiction", "interdictions", "interdicts", "interdigitation", "interest", "interestedness", "interestingness", "interests", "interface", "interfaces", "interfacing", "interfacings", "interfenestration", "interference", "interferences", "interferer", "interferers", "interfering", "interferometer", "interferometers", "interferometry", "interferon", "interfluence", "interfluences", "interfusion", "interfusions", "interglacial", "intergradation", "intergradations", "intergrade", "intergrades", "intergrowth", "intergrowths", "interim", "interims", "interior", "interiorities", "interiority", "interiors", "interjection", "interjections", "interjector", "interjectors", "interkinesis", "interlacement", "interlacements", "interlaken", "interlamination", "interlay", "interlays", "interleaf", "interlineation", "interlineations", "interlingua", "interlinguas", "interlining", "interlinings", "interlink", "interlinks", "interlocation", "interlocations", "interlock", "interlocking", "interlocks", "interlocution", "interlocutions", "interlocutor", "interlocutors", "interlocutress", "interlocutresses", "interlocutrix", "interlocutrixes", "interloper", "interlopers", "interlude", "interludes", "interlunation", "interlunations", "intermarriage", "intermarriages", "intermeddler", "intermeddlers", "intermediacy", "intermediaries", "intermediary", "intermediate", "intermediates", "intermediation", "intermediations", "intermediator", "intermediators", "interment", "interments", "intermezzo", "intermezzos", "intermigration", "intermigrations", "interminableness", "intermission", "intermissions", "intermittence", "intermittency", "intermixture", "intermixtures", "intermodulation", "intern", "internal", "internality", "internalization", "internals", "international", "internationale", "internationalisation", "internationalism", "internationalist", "internationalists", "internationalization", "internationals", "interne", "internee", "internees", "internes", "internet", "internist", "internists", "internment", "internments", "internode", "internodes", "interns", "internship", "internships", "internuncio", "internuncios", "interoceptor", "interoceptors", "interosculation", "interpellant", "interpellants", "interpellation", "interpellations", "interpenetration", "interphase", "interphases", "interphone", "interphones", "interplay", "interplays", "interpleader", "interpleaders", "interpol", "interpolater", "interpolation", "interpolations", "interpolator", "interpolators", "interposal", "interposals", "interposer", "interposers", "interposition", "interpositions", "interpretation", "interpretations", "interpreter", "interpreters", "interpretership", "interpreting", "interregnum", "interregnums", "interrelation", "interrelations", "interrelationship", "interrelationships", "interrex", "interrogation", "interrogations", "interrogative", "interrogatives", "interrogator", "interrogators", "interrogatory", "interrupt", "interrupter", "interrupters", "interruption", "interruptions", "interrupts", "intersection", "intersections", "intersex", "intersexes", "intersexuality", "interspace", "interspaces", "interspersal", "interspersals", "interspersion", "interspersions", "interstadial", "interstice", "interstices", "interstitial", "interstratification", "intertexture", "intertraffic", "intertrigo", "intertrigos", "intertwine", "intertwinement", "intertwines", "intertwist", "intertwists", "interunion", "interunions", "interurban", "interval", "intervale", "intervals", "intervener", "interveners", "intervenient", "intervenor", "intervenors", "intervention", "interventionism", "interventionist", "interventions", "interview", "interviewee", "interviewees", "interviewer", "interviewers", "interviews", "interweave", "interweaves", "intestacies", "intestacy", "intestate", "intestates", "intestine", "intestines", "inti", "intima", "intimacies", "intimacy", "intimate", "intimates", "intimation", "intimations", "intimidation", "intimidations", "intimist", "intimistes", "intimists", "intinction", "intine", "intines", "intis", "intolerability", "intolerableness", "intolerance", "intolerances", "intonaco", "intonation", "intonations", "intoner", "intoners", "intorsion", "intorsions", "intoxicant", "intoxicants", "intoxication", "intoxications", "intractability", "intractableness", "intrados", "intradoses", "intransigeance", "intransigence", "intransigency", "intransigent", "intransigents", "intrant", "intrants", "intravasation", "intravasations", "intrenchment", "intrenchments", "intrepidity", "intricacies", "intricacy", "intricateness", "intrigant", "intrigante", "intrigantes", "intrigants", "intrigue", "intriguer", "intriguers", "intrigues", "intro", "introducer", "introducers", "introduction", "introductions", "introgression", "introgressions", "introit", "introits", "introject", "introjection", "introjections", "introjects", "intromission", "intromissions", "intromitter", "intromitters", "intros", "introspection", "introspectionist", "introspections", "introsusception", "introversion", "introversions", "introvert", "introverts", "intruder", "intruders", "intrusion", "intrusions", "intrusiveness", "intubation", "intubations", "intuition", "intuitionalism", "intuitionalist", "intuitionalists", "intuitionism", "intuitionist", "intuitionists", "intuitions", "intuitiveness", "intuitivism", "intumescence", "intussusception", "inuit", "inuits", "inula", "inulas", "inulase", "inulin", "inunction", "inunctions", "inundation", "inundations", "inurbanity", "inuredness", "inurement", "inurements", "inutilities", "inutility", "invader", "invaders", "invagination", "invaginations", "invalid", "invalidation", "invalidations", "invalidism", "invalidity", "invalidness", "invalids", "invar", "invariability", "invariable", "invariableness", "invariance", "invariant", "invariants", "invasion", "invasions", "invective", "invectives", "inveiglement", "inveiglements", "inveigler", "inveiglers", "invenit", "invention", "inventions", "inventiveness", "inventor", "inventories", "inventors", "inventory", "inveracities", "inveracity", "invercargill", "inverness", "inverse", "inverses", "inversion", "inversions", "invert", "invertase", "invertebrate", "invertebrates", "inverter", "inverters", "invertin", "invertor", "invertors", "inverts", "investigating", "investigation", "investigations", "investigator", "investigators", "investing", "investiture", "investitures", "investment", "investments", "investor", "investors", "inveteracy", "inveterateness", "invidiousness", "invigilation", "invigilations", "invigilator", "invigilators", "invigorant", "invigorants", "invigoration", "invigorations", "invigorator", "invigorators", "invincibility", "invincibleness", "inviolability", "inviolableness", "inviolateness", "invisibility", "invisible", "invisibleness", "invisibles", "invitation", "invitations", "invitatory", "invite", "invitee", "invitees", "inviter", "inviters", "invites", "invitingness", "invocation", "invocations", "invoice", "invoices", "involucel", "involucels", "involucre", "involucres", "involucrum", "involucrums", "involuntariness", "involute", "involutes", "involution", "involutional", "involutions", "involvement", "involvements", "invulnerability", "invulnerableness", "invultuation", "invultuations", "inwall", "inwalls", "inward", "inwardness", "inwards", "inyala", "inyalas", "iodate", "iodates", "iodide", "iodides", "iodine", "iodism", "iodize", "iodizes", "iodoform", "iolanthe", "iolite", "ion", "iona", "ionesco", "ionia", "ionian", "ionic", "ionisation", "ioniser", "ionisers", "ionium", "ionization", "ionizer", "ionizers", "ionomer", "ionomers", "ionone", "ionones", "ionopause", "ionosphere", "ions", "iontophoresis", "iota", "iotacism", "iotacisms", "iotas", "iou", "iowa", "ipecac", "ipecacs", "iphigenia", "ipoh", "ipomoea", "ipomoeas", "ipswich", "iqbal", "iquique", "iquitos", "ira", "iracundity", "irade", "irades", "iran", "iranian", "iranians", "iraq", "iraqi", "iraqis", "irascibility", "irbil", "ire", "irefulness", "ireland", "irena", "irene", "irenicon", "irenicons", "irenics", "ires", "iridectomies", "iridectomy", "irides", "iridescence", "iridescences", "iridium", "iridization", "iridosmine", "iridotomies", "iridotomy", "iris", "irisation", "irisations", "irises", "irish", "irishism", "irishman", "irishwoman", "iritis", "irksomeness", "irkutsk", "irma", "iron", "iron gray", "iron grey", "ironbark", "ironbarks", "ironclad", "ironclads", "ironer", "ironers", "ironies", "ironing", "ironings", "ironist", "ironists", "ironmonger", "ironmongeries", "ironmongers", "ironmongery", "irons", "ironside", "ironsides", "ironsmith", "ironsmiths", "ironstone", "ironstones", "ironware", "ironwood", "ironwork", "ironworks", "irony", "iroquoian", "iroquois", "irradiance", "irradiation", "irradiations", "irrationalism", "irrationalist", "irrationalists", "irrationality", "irrawaddy", "irreality", "irreclaimability", "irreclaimableness", "irreconcilability", "irreconcilable", "irreconcilableness", "irrecoverableness", "irredeemability", "irredeemableness", "irredentism", "irredentist", "irredentists", "irreducibility", "irreducibleness", "irrefragability", "irrefragableness", "irrefrangibility", "irrefrangibleness", "irrefutability", "irrefutableness", "irregular", "irregularities", "irregularity", "irregulars", "irrelativeness", "irrelevance", "irrelevances", "irrelevancies", "irrelevancy", "irreligion", "irreligionist", "irreligionists", "irreligiousness", "irremediableness", "irremissibility", "irremissibleness", "irremovability", "irremovableness", "irreparability", "irreparableness", "irrepealability", "irrepealableness", "irrepressibility", "irrepressibleness", "irreproachability", "irreproachableness", "irresistibility", "irresistibleness", "irresolubility", "irresoluteness", "irresolution", "irresolvability", "irresolvableness", "irresponsibility", "irresponsibleness", "irresponsiveness", "irretention", "irretentiveness", "irretrievability", "irretrievableness", "irreverence", "irreverences", "irreversibility", "irreversibleness", "irrevocability", "irrevocableness", "irrigation", "irrigations", "irrigator", "irrigators", "irritability", "irritableness", "irritancies", "irritancy", "irritant", "irritants", "irritation", "irritations", "irritator", "irritators", "irruption", "irruptions", "irvine", "irving", "isa", "isaac", "isadora", "isadore", "isagoge", "isagoges", "isagogic", "isagogics", "isaiah", "isallobar", "isallobars", "isatin", "isbel", "ischaemia", "ischaemias", "ischemia", "ischia", "ischium", "iseult", "isfahan", "isherwood", "ishmael", "ishmaelite", "ishtar", "isidora", "isidore", "isinglass", "isis", "isla", "islam", "islamabad", "islamisation", "islamism", "islamite", "islamization", "island", "islander", "islanders", "islands", "islay", "isle", "isles", "islet", "islets", "islington", "ism", "ismaili", "ismailian", "ismailis", "isms", "isn t", "isoagglutination", "isoagglutinin", "isoantigen", "isoantigens", "isobar", "isobares", "isobars", "isobath", "isobaths", "isobel", "isobront", "isobronts", "isochasm", "isochasms", "isocheim", "isocheims", "isochor", "isochores", "isochors", "isochrone", "isochrones", "isochronism", "isoclinal", "isoclinals", "isocline", "isoclines", "isocracies", "isocracy", "isocrates", "isocyanide", "isocyanides", "isodiaphere", "isodimorphism", "isodomum", "isoetes", "isogamete", "isogametes", "isogamy", "isogeny", "isogeotherm", "isogeotherms", "isogloss", "isoglosses", "isogon", "isogonal", "isogonals", "isogonic", "isogonics", "isogram", "isograms", "isohel", "isohels", "isohyet", "isohyets", "isolability", "isolation", "isolationism", "isolationisms", "isolationist", "isolationists", "isolations", "isolator", "isolators", "isolda", "isolde", "isoleucine", "isoline", "isolines", "isologue", "isologues", "isomagnetic", "isomer", "isomeres", "isomerism", "isomerisms", "isomerization", "isomerizations", "isomers", "isometric", "isometrics", "isometry", "isomorph", "isomorphism", "isomorphs", "isoniazid", "isonomy", "isoperimeter", "isoperimetry", "isopleth", "isopleths", "isopod", "isopodan", "isopods", "isopolity", "isoprene", "isopropyl", "isoptera", "isoseismal", "isoseismic", "isostasy", "isothere", "isotheres", "isotherm", "isothermal", "isothermals", "isotherms", "isotone", "isotones", "isotonicity", "isotope", "isotopes", "isotopies", "isotopy", "isotron", "isotrons", "isotropy", "isotype", "isotypes", "israel", "israeli", "israelis", "israelite", "israelites", "issuance", "issuances", "issue", "issuer", "issuers", "issues", "issuing", "issus", "istanbul", "isthmus", "isthmuses", "istle", "it", "it ll", "itacolumite", "italia", "italian", "italianisation", "italianism", "italianist", "italianization", "italians", "italic", "italicization", "italicizations", "italics", "italy", "itch", "itches", "itchiness", "itching", "item", "itemisation", "itemisations", "itemization", "itemizations", "items", "iterance", "iteration", "iterations", "ithaca", "ithyphallic", "itinerancy", "itinerant", "itinerants", "itineraries", "itinerary", "ito", "ivan", "ivanhoe", "ives", "ivies", "ivo", "ivor", "ivories", "ivory", "ivy", "ixia", "ixion", "ixtle", "izard", "izards", "izmir", "izvestia", "izzard", "izzards", "jab", "jabalpur", "jabber", "jabberer", "jabberers", "jabbering", "jabberings", "jabbers", "jabberwocky", "jabbing", "jabiru", "jabirus", "jaborandi", "jabot", "jabots", "jabs", "jacamar", "jacamars", "jacana", "jacanas", "jacaranda", "jacarandas", "jacinta", "jacinth", "jacintha", "jacinthe", "jacinths", "jack", "jack a dandy", "jack by the hedge", "jack in the pulpit", "jack o lantern", "jack o lanterns", "jackal", "jackals", "jackanapes", "jackanapeses", "jackaroo", "jackaroos", "jackass", "jackasses", "jackboot", "jackboots", "jackdaw", "jackdaws", "jackeroo", "jackeroos", "jacket", "jackets", "jackfish", "jackhammer", "jackhammers", "jackie", "jackies", "jacklin", "jackpot", "jackpots", "jacks", "jackshaft", "jackson", "jacksonian", "jacksonians", "jacksonville", "jacky", "jacob", "jacobean", "jacobi", "jacobian", "jacobin", "jacobinism", "jacobins", "jacobite", "jacobites", "jacobitism", "jacobs", "jacobus", "jacobuses", "jaconet", "jacquard", "jacquards", "jacqueline", "jacquelyn", "jacquerie", "jacques", "jacquetta", "jactation", "jactations", "jactitation", "jaculation", "jaculations", "jaculator", "jaculators", "jade", "jadedness", "jadeite", "jades", "jaeger", "jaegers", "jaffa", "jaffas", "jaffna", "jag", "jagannath", "jaggedness", "jaggery", "jags", "jaguar", "jaguarondi", "jaguarondis", "jaguars", "jaguarundi", "jaguarundis", "jahveh", "jahvism", "jahvist", "jahvists", "jai", "jail", "jailer", "jailers", "jailhouse", "jailing", "jails", "jaime", "jain", "jainism", "jaipur", "jak", "jakarta", "jake", "jakes", "jaks", "jalap", "jalapa", "jalapin", "jalaps", "jalopies", "jalopy", "jalousie", "jalousies", "jam", "jamaica", "jamaican", "jamaicans", "jamal", "jamb", "jambalaya", "jambalayas", "jambeau", "jambes", "jambiya", "jambiyas", "jamboree", "jamborees", "jambos", "jambs", "james", "jameses", "jamestown", "jamie", "jamil", "jamjar", "jamjars", "jamming", "jammu", "jamnagar", "jampan", "jampans", "jampot", "jampots", "jams", "jamshedpur", "jamshid", "jan", "janacek", "jane", "janes", "janet", "janette", "janey", "jangle", "jangler", "janglers", "jangles", "janice", "janie", "janina", "janine", "janis", "janissaries", "janissary", "janitor", "janitors", "janitorship", "janitorships", "janitress", "janitresses", "jansen", "jansenism", "jansenist", "jansenists", "january", "janus", "jap", "japan", "japanese", "japaneses", "japanner", "japanners", "japans", "jape", "japer", "japers", "japes", "japheth", "japonica", "japonicas", "japs", "jaques", "jar", "jared", "jarful", "jarfuls", "jargon", "jargoneer", "jargoneers", "jargonisation", "jargonisations", "jargonist", "jargonists", "jargonization", "jargonizations", "jargons", "jargoon", "jarl", "jarls", "jarosite", "jarrah", "jarrahs", "jarrow", "jarry", "jars", "jarvey", "jarveys", "jarvis", "jasey", "jaseys", "jasmine", "jasmines", "jason", "jasper", "jaspers", "jass", "jat", "jato", "jatos", "jaundice", "jaundices", "jaunt", "jauntiness", "jaunts", "jaup", "jaups", "java", "javelin", "javelins", "jaw", "jawan", "jawans", "jawbone", "jawbones", "jawbreaker", "jawbreakers", "jaws", "jay", "jaycee", "jaycees", "jays", "jaywalker", "jaywalkers", "jazz", "jazzer", "jazzers", "jazzes", "jazziness", "jazzman", "jealousies", "jealousness", "jealousy", "jean", "jeanie", "jeannette", "jeannie", "jeans", "jebel", "jebels", "jebusite", "jedburgh", "jedda", "jeep", "jeeps", "jeer", "jeerer", "jeerers", "jeering", "jeerings", "jeers", "jefferson", "jeffersonian", "jeffrey", "jehad", "jehads", "jehoshaphat", "jehovah", "jehovist", "jehu", "jejuneness", "jejunity", "jejunum", "jejunums", "jell", "jellaba", "jellabas", "jellicoe", "jellies", "jello", "jellos", "jells", "jelly", "jellybean", "jellybeans", "jellyfish", "jellyfishes", "jellying", "jem", "jemadar", "jemadars", "jemmies", "jemmy", "jen", "jena", "jenifer", "jenkins", "jenna", "jenner", "jennet", "jennets", "jennie", "jennies", "jennifer", "jennings", "jenny", "jenufa", "jeopardy", "jephthah", "jequirity", "jerbil", "jerbils", "jerboa", "jerboas", "jereed", "jereeds", "jeremiad", "jeremiads", "jeremiah", "jeremy", "jerez", "jericho", "jerid", "jerids", "jerk", "jerker", "jerkers", "jerkin", "jerkiness", "jerking", "jerkings", "jerkinhead", "jerkinheads", "jerkins", "jerks", "jerky", "jeroboam", "jeroboams", "jerome", "jerries", "jerry", "jerry builder", "jerry builders", "jerry building", "jersey", "jerseys", "jerusalem", "jervis", "jess", "jessamine", "jessamines", "jesse", "jesses", "jessica", "jest", "jestbook", "jestbooks", "jester", "jesters", "jesting", "jestings", "jests", "jesu", "jesuit", "jesuitism", "jesuits", "jesus", "jet", "jet setter", "jet setters", "jethro", "jetliner", "jetliners", "jets", "jetsam", "jetted", "jetties", "jettiness", "jetting", "jettison", "jettisons", "jetton", "jettons", "jetty", "jeu", "jew", "jew s ear", "jew s harp", "jew baiting", "jewel", "jeweler", "jewelers", "jewelery", "jewelfish", "jewelfishes", "jeweller", "jewelleries", "jewellers", "jewellery", "jewelry", "jewels", "jewess", "jewesses", "jewfish", "jewfishes", "jewish", "jewishness", "jewry", "jews", "jezebel", "jezebels", "jezreel", "jiao", "jiaos", "jib", "jibber", "jibbers", "jibe", "jiber", "jibers", "jibes", "jibs", "jidda", "jiffies", "jiffy", "jig", "jigger", "jiggers", "jiggery pokery", "jigging", "jiggings", "jiggle", "jiggles", "jigs", "jigsaw", "jigsaws", "jihad", "jihads", "jill", "jillaroo", "jillaroos", "jillet", "jillets", "jillian", "jillion", "jillions", "jills", "jilt", "jilts", "jim", "jimmie", "jimmies", "jimmy", "jimpness", "jingal", "jingals", "jingle", "jingler", "jinglers", "jingles", "jingo", "jingoes", "jingoism", "jingoist", "jingoists", "jink", "jinker", "jinkers", "jinks", "jinn", "jinnee", "jinni", "jinns", "jinrikisha", "jinrikishas", "jinx", "jinxes", "jird", "jirds", "jissom", "jitney", "jitneys", "jitter", "jitterbug", "jitterbugs", "jitters", "jive", "jives", "joab", "joachim", "joan", "joanie", "joanna", "joanne", "joannes", "joanneses", "job", "jobbed", "jobber", "jobbers", "jobbery", "jobbing", "jobcentre", "jobcentres", "jobes", "jobless", "joblessness", "jobs", "jocasta", "jocelin", "joceline", "jocelyn", "jock", "jockey", "jockeys", "jockeyship", "jockeyships", "jocko", "jockos", "jocks", "jockstrap", "jockstraps", "jockteleg", "jocktelegs", "jocoseness", "jocosity", "jocularity", "jocundities", "jocundity", "jodhpur", "jodi", "jodie", "jody", "joe", "joel", "joelle", "joes", "joey", "joeys", "joffre", "jog", "jogger", "joggers", "jogging", "joggle", "joggles", "jogs", "johann", "johanna", "johannes", "johannesburg", "johanneses", "johannisberger", "john", "johnnies", "johnny", "johns", "johnson", "johnsonese", "johnsonianism", "join", "joinder", "joinders", "joiner", "joiners", "joinery", "joining", "joinings", "joins", "joint", "jointer", "jointers", "jointress", "jointresses", "joints", "jointure", "jointures", "joist", "joists", "jojoba", "jojobas", "joke", "joker", "jokers", "jokes", "jole", "joleen", "jolene", "joles", "jolie", "joliot curie", "jollier", "jollies", "jollification", "jollifications", "jolliness", "jollities", "jollity", "jolly", "jolson", "jolt", "jolter", "jolters", "jolts", "jon", "jonah", "jonathan", "jonathon", "jones", "joneses", "jongleur", "jongleurs", "joni", "jonquil", "jonquils", "jonson", "jook", "jooks", "joplin", "joppa", "jordan", "jorum", "jorums", "joseph", "josepha", "josephine", "josephs", "josephson", "josephus", "josh", "josher", "joshers", "joshes", "joshua", "josiah", "josie", "joskin", "joskins", "joss", "josser", "jossers", "josses", "jostle", "jostlement", "jostles", "jostling", "jostlings", "jot", "jota", "jotas", "jots", "jotter", "jotters", "jotting", "jottings", "jotun", "jotunn", "jotunns", "jotuns", "joual", "jouk", "jouks", "joule", "joules", "jounce", "jounces", "jour", "journal", "journalese", "journalism", "journalist", "journalists", "journals", "journey", "journeyer", "journeyers", "journeying", "journeyman", "journeys", "journo", "journos", "joust", "jouster", "jousters", "jousts", "jove", "jovialities", "joviality", "jovialness", "jovian", "jow", "jowett", "jowl", "jowls", "jows", "joy", "joyance", "joyances", "joyce", "joycean", "joyfulness", "joylessness", "joyousness", "joys", "juan", "juba", "jubas", "jubbah", "jubbahs", "jube", "jubes", "jubilance", "jubilances", "jubilancies", "jubilancy", "jubilation", "jubilations", "jubilee", "jubilees", "jud", "judaea", "judaean", "judah", "judaisation", "judaism", "judaization", "judaizer", "judas", "judases", "judder", "judders", "jude", "judea", "judean", "judge", "judgement", "judgements", "judges", "judgeship", "judgeships", "judging", "judgment", "judgments", "judicator", "judicators", "judicatory", "judicature", "judicatures", "judiciaries", "judiciary", "judiciousness", "judie", "judith", "judo", "judogi", "judogis", "judoist", "judoists", "judoka", "judokas", "juds", "jug", "jugal", "jugals", "jugendstil", "jugful", "jugfuls", "juggernaut", "juggernauts", "juggins", "jugginses", "juggle", "juggler", "juggleries", "jugglers", "jugglery", "juggles", "juggling", "jugglings", "jughead", "jugheads", "jugoslav", "jugoslavia", "jugoslavian", "jugoslavians", "jugs", "jugular", "jugulars", "jugum", "jugurtha", "juice", "juicer", "juicers", "juices", "juiciness", "juju", "jujube", "jujubes", "jujus", "jukebox", "jukeboxes", "julep", "juleps", "jules", "julia", "julian", "juliana", "julie", "julienne", "juliennes", "juliet", "julius", "july", "jumbal", "jumbals", "jumble", "jumbler", "jumblers", "jumbles", "jumbo", "jumbos", "jumbuck", "jumbucks", "jumna", "jump", "jump off", "jump offs", "jump start", "jump starts", "jumper", "jumpers", "jumpiness", "jumping", "jumps", "junco", "juncoes", "juncos", "junction", "junctions", "juncture", "junctures", "juncus", "juncuses", "june", "juneau", "juneberry", "jung", "jungfrau", "jungle", "jungles", "junior", "juniorities", "juniority", "juniors", "juniper", "junipers", "junius", "junk", "junker", "junkers", "junket", "junketeer", "junketeers", "junketing", "junketings", "junkets", "junkie", "junkies", "junkman", "junks", "junky", "juno", "junta", "juntas", "junto", "juntos", "jupati", "jupatis", "jupiter", "jupon", "jupons", "jura", "jurant", "jurants", "jurassic", "jurat", "jurats", "juries", "jurisconsult", "jurisconsults", "jurisdiction", "jurisdictions", "jurisprudence", "jurisprudent", "jurist", "jurists", "juror", "jurors", "jury", "jury rig", "jury rigs", "juryman", "jurywoman", "jus", "justice", "justicer", "justicers", "justices", "justiceship", "justiceships", "justiciar", "justiciaries", "justiciars", "justiciary", "justifiability", "justifiableness", "justification", "justifications", "justifier", "justifiers", "justin", "justina", "justine", "justinian", "justness", "jut", "jute", "jutes", "jutland", "juts", "jutties", "jutting", "jutty", "juvenescence", "juvenile", "juvenileness", "juveniles", "juvenility", "juxtaposition", "juxtapositions", "jynx", "jynxes", "kaaba", "kabala", "kabob", "kabobs", "kabuki", "kabul", "kabyle", "kachina", "kachinas", "kaddish", "kadi", "kadis", "kaduna", "kaffir", "kaffirs", "kaffiyeh", "kaffiyehs", "kafir", "kafirs", "kafka", "kaftan", "kaftans", "kago", "kagos", "kahn", "kaiak", "kaiaks", "kaif", "kaifs", "kail", "kails", "kailyard", "kailyards", "kain", "kainite", "kains", "kaiser", "kaiserdom", "kaiserdoms", "kaiserism", "kaisers", "kaisership", "kaiserships", "kaiserslautern", "kaka", "kakapo", "kakapos", "kakas", "kakemono", "kakemonos", "kaki", "kakis", "kakistocracies", "kakistocracy", "kala azar", "kalahari", "kalamazoo", "kale", "kaleidoscope", "kaleidoscopes", "kalendar", "kalendars", "kales", "kalevala", "kaleyard", "kaleyards", "kalgoorlie", "kali", "kalian", "kalians", "kalif", "kalifs", "kalimantan", "kalinin", "kaliningrad", "kalinite", "kalis", "kaliyuga", "kalmia", "kalmias", "kalmuck", "kalmucks", "kalong", "kalongs", "kalpa", "kalpak", "kalpaks", "kalpas", "kalpis", "kalpises", "kalsomine", "kalsomines", "kama", "kamacite", "kamal", "kamala", "kamalas", "kamchatka", "kame", "kamees", "kamelaukion", "kamelaukions", "kames", "kami", "kamikaze", "kamikazes", "kamis", "kampala", "kampong", "kampongs", "kampuchea", "kamseen", "kamseens", "kana", "kananga", "kanarese", "kandahar", "kandinsky", "kang", "kanga", "kangaroo", "kangarooing", "kangaroos", "kangas", "kangchenjunga", "kangs", "kanji", "kanjis", "kannada", "kano", "kanpur", "kans", "kansas", "kant", "kantar", "kantars", "kantele", "kanteles", "kantian", "kantianism", "kantist", "kants", "kanzu", "kanzus", "kaohsiung", "kaoliang", "kaoliangs", "kaolin", "kaoline", "kaolines", "kaolinite", "kaon", "kaons", "kapellmeister", "kapellmeisters", "kapok", "kappa", "kaput", "karabiner", "karabiners", "karachi", "karaite", "karajan", "karakul", "karakuls", "karamanlis", "karat", "karate", "karats", "karen", "karens", "kariba", "karin", "karina", "karl", "karl marx stadt", "karla", "karloff", "karlsruhe", "karma", "karmas", "karnak", "karoo", "karoos", "kaross", "karosses", "karpov", "karri", "karris", "karroo", "karroos", "karst", "karsts", "kart", "karts", "karyogamy", "karyokinesis", "karyolymph", "karyolysis", "karyoplasm", "karyosome", "karyotin", "karyotype", "kas", "kasbah", "kasbahs", "kasha", "kashas", "kashmir", "kashmiri", "kashruth", "kassel", "kat", "katabasis", "katabolism", "katakana", "katakanas", "katanga", "kate", "kath", "katharina", "katharine", "katharometer", "katharometers", "katharsis", "katherine", "kathleen", "kathode", "kathodes", "kathy", "katie", "kation", "kations", "katmandu", "katowice", "katrina", "katrine", "kats", "kattegat", "katya", "katydid", "katydids", "katzenjammer", "katzenjammers", "kauffmann", "kaufman", "kauri", "kauris", "kava", "kavas", "kawasaki", "kayak", "kayaks", "kaye", "kayo", "kayoes", "kayos", "kazak", "kazakh", "kazakhs", "kazaks", "kazakstan", "kazan", "kazantzakis", "kazoo", "kazoos", "kea", "kean", "keas", "keating", "keaton", "keats", "kebab", "kebabs", "kebbuck", "kebbucks", "keblah", "keble", "keck", "keckling", "kecks", "kecksies", "kecksy", "ked", "keddah", "keddahs", "kedge", "kedgeree", "kedgerees", "kedges", "keds", "keegan", "keek", "keeks", "keel", "keelage", "keelages", "keelboat", "keelboats", "keels", "keelson", "keelsons", "keen", "keener", "keeners", "keening", "keenness", "keens", "keep", "keeper", "keepers", "keepership", "keeperships", "keeping", "keepings", "keepnet", "keepnets", "keeps", "keepsake", "keepsakes", "keeshond", "keeshonds", "kef", "keffiyeh", "keffiyehs", "kefs", "keg", "kegs", "keighley", "keir", "keirs", "keister", "keisters", "keith", "keitloa", "keitloas", "keller", "kellogg", "kelly", "keloid", "keloids", "kelp", "kelpie", "kelpies", "kelps", "kelpy", "kelson", "kelsons", "kelt", "kelter", "kelters", "keltic", "kelts", "kelvin", "kelvins", "kemble", "kemp", "kempe", "kempis", "kemps", "ken", "kenaf", "kenafs", "kendal", "kendo", "kenilworth", "kenna", "kennedy", "kennel", "kennelly", "kennels", "kennet", "kenneth", "kenning", "kennings", "kenny", "keno", "kenosis", "kens", "kensington", "kent", "kentish", "kentledge", "kents", "kentucky", "kenwood", "kenya", "kenyan", "kenyans", "kenyatta", "kepi", "kepis", "kepler", "kerala", "keramics", "keratin", "keratinization", "keratitis", "keratometer", "keratoplasty", "keratosis", "keratotomy", "kerb", "kerbing", "kerbs", "kerbstone", "kerbstones", "kerchief", "kerchiefs", "kerf", "kerfs", "kerfuffle", "kerfuffles", "kermes", "kermeses", "kermesite", "kermis", "kermises", "kermit", "kern", "kernel", "kernels", "kernes", "kernicterus", "kernite", "kerns", "kerogen", "kerosene", "kerosine", "kerouac", "kerry", "kersey", "kerseymere", "kerygma", "kestrel", "kestrels", "keswick", "ketch", "ketches", "ketchup", "ketchups", "ketene", "ketenes", "ketone", "ketones", "ketose", "ketosis", "kettering", "kettle", "kettledrum", "kettledrummer", "kettledrummers", "kettledrums", "kettleful", "kettlefuls", "kettles", "kevel", "kevels", "kevin", "kew", "kewpie", "kex", "kexes", "key", "keyboard", "keyboards", "keyhole", "keyholes", "keynes", "keynesian", "keynesianism", "keynote", "keynotes", "keys", "keystone", "keystones", "keystroke", "keystrokes", "keyword", "keywords", "khachaturian", "khaddar", "khaki", "khakis", "khalif", "khalifate", "khalifates", "khalifs", "khalsa", "khamsin", "khamsins", "khan", "khanate", "khanates", "khanga", "khangas", "khans", "khansamah", "khansamahs", "kharif", "kharifs", "kharkov", "khartoum", "khat", "khats", "khaya", "khayas", "kheda", "khedas", "khedive", "khedives", "khediviate", "khediviates", "khios", "khmer", "khoikhoi", "khoja", "khojas", "khrushchev", "khulna", "khuskhus", "khuskhuses", "kiang", "kiangs", "kiaugh", "kiaughs", "kibble", "kibbles", "kibbutz", "kibbutznik", "kibbutzniks", "kibe", "kibes", "kibitka", "kibitkas", "kibitzer", "kibitzers", "kiblah", "kibosh", "kiboshes", "kick", "kickback", "kickbacks", "kickball", "kickdown", "kickdowns", "kicker", "kickers", "kicking", "kicks", "kickshaw", "kickshaws", "kicksorter", "kicksorters", "kickstand", "kickstands", "kid", "kidd", "kidder", "kidderminster", "kidders", "kiddies", "kidding", "kiddle", "kiddles", "kiddo", "kiddy", "kidnapper", "kidnappers", "kidnapping", "kidney", "kidneys", "kids", "kiel", "kielce", "kier", "kieran", "kierkegaard", "kiers", "kieselguhr", "kieserite", "kiev", "kif", "kifs", "kigali", "kikoi", "kikumon", "kikumons", "kikuyu", "kikuyus", "kildare", "kilderkin", "kilderkins", "kilerg", "kilergs", "kiley", "kileys", "kilimanjaro", "kilkenny", "kill", "killarney", "killdee", "killdeer", "killdeers", "killdees", "killer", "killers", "killick", "killicks", "killiecrankie", "killifish", "killifishes", "killikinick", "killing", "killings", "killjoy", "killjoys", "killock", "killocks", "kills", "kilmarnock", "kiln", "kilns", "kilo", "kilobar", "kilobars", "kilobyte", "kilobytes", "kilocalorie", "kilocycle", "kilocycles", "kilogram", "kilograms", "kilohertz", "kilojoule", "kilolitre", "kilolitres", "kilometer", "kilometers", "kilometre", "kilometres", "kilos", "kiloton", "kilotons", "kilovolt", "kilovolts", "kilowatt", "kilowatt hour", "kilowatts", "kilroy", "kilt", "kilter", "kiltie", "kilties", "kilting", "kilts", "kim", "kimball", "kimberley", "kimberlite", "kimchi", "kimono", "kimonos", "kin", "kina", "kinabalu", "kinaesthesia", "kinaesthesis", "kinas", "kinase", "kinases", "kinchin", "kinchins", "kincob", "kind", "kindergarten", "kindergartens", "kindertotenlieder", "kindler", "kindlers", "kindliness", "kindling", "kindlings", "kindness", "kindnesses", "kindred", "kindredness", "kindredship", "kinds", "kine", "kinema", "kinemas", "kinematics", "kinematograph", "kinematographs", "kinescope", "kinescopes", "kinesics", "kinesiology", "kinesis", "kinesthesia", "kinesthesis", "kinetics", "kinetograph", "kinetographs", "kinetoscope", "kinetoscopes", "kinfolk", "kinfolks", "king", "king hit", "king hits", "king of arms", "kingcup", "kingcups", "kingdom", "kingdoms", "kingfish", "kingfisher", "kingfishers", "kingfishes", "kinghood", "kinglet", "kinglets", "kingliness", "kingpin", "kingpins", "kings", "kingship", "kingships", "kingsley", "kingston", "kingstown", "kingwood", "kingwoods", "kinin", "kinins", "kink", "kinkajou", "kinkajous", "kinkiness", "kinkle", "kinkles", "kinks", "kinnikinnick", "kino", "kinos", "kins", "kinsey", "kinsfolk", "kinsfolks", "kinshasa", "kinship", "kinships", "kinsman", "kinswoman", "kiosk", "kiosks", "kip", "kipes", "kipling", "kipper", "kippers", "kips", "kiran", "kirchhoff", "kirchner", "kirghiz", "kirk", "kirkby", "kirkcaldy", "kirkcudbright", "kirkman", "kirkpatrick", "kirks", "kirkwall", "kirman", "kirmans", "kirmess", "kirmesses", "kirn", "kirns", "kirov", "kirpan", "kirpans", "kirsch", "kirsches", "kirschwasser", "kirschwassers", "kirtle", "kirtles", "kisan", "kisangani", "kisans", "kish", "kishes", "kishinev", "kishke", "kishkes", "kislev", "kismet", "kismets", "kiss", "kiss off", "kiss offs", "kissel", "kisser", "kissers", "kisses", "kissing", "kissinger", "kist", "kists", "kistvaen", "kistvaens", "kit", "kitakyushu", "kitchen", "kitchener", "kitcheners", "kitchenette", "kitchenettes", "kitchens", "kitchenware", "kite", "kitenge", "kitenges", "kites", "kith", "kithara", "kitharas", "kithes", "kiths", "kitling", "kitlings", "kits", "kitsch", "kitten", "kittenishness", "kittens", "kitties", "kittiwake", "kittiwakes", "kittul", "kittuls", "kitty", "kiva", "kivas", "kiwi", "kiwis", "klan", "klangfarbe", "klansman", "klavier", "klaviers", "klaxon", "klaxons", "klebsiella", "klee", "kleenex", "kleenexes", "klein", "klemperer", "klepht", "klephts", "kleptomania", "kleptomaniac", "kleptomaniacs", "klimt", "klipspringer", "klipspringers", "klondike", "klondikes", "kloof", "kloofs", "klootchman", "klootchmans", "klutz", "klutzes", "klystron", "klystrons", "knack", "knacker", "knackeries", "knackers", "knackery", "knacks", "knackwurst", "knackwursts", "knag", "knags", "knaidel", "knap", "knapper", "knappers", "knaps", "knapsack", "knapsacks", "knapweed", "knapweeds", "knar", "knars", "knave", "knaveries", "knavery", "knaves", "knavishness", "knawel", "knawels", "kneader", "kneaders", "knee", "kneecap", "kneecaps", "kneehole", "kneeholes", "kneel", "kneeler", "kneelers", "kneeling", "kneels", "kneepad", "kneepads", "knees", "knell", "knells", "knesset", "knickerbockers", "knickers", "knife", "knife point", "knifes", "knight", "knight errant", "knight errantry", "knighthood", "knighthoods", "knightliness", "knights", "knish", "knishes", "knit", "knits", "knitter", "knitters", "knitting", "knitwear", "knives", "knob", "knobbiness", "knobble", "knobbles", "knobkerrie", "knobkerries", "knobs", "knock", "knock knee", "knock on", "knockabout", "knockabouts", "knocker", "knockers", "knocking", "knocking shop", "knocking shops", "knockings", "knockout", "knockouts", "knocks", "knockwurst", "knockwursts", "knoll", "knolls", "knop", "knops", "knosp", "knosps", "knossos", "knot", "knotgrass", "knotgrasses", "knothole", "knotholes", "knots", "knotter", "knotters", "knottiness", "knotting", "knotweed", "knotweeds", "knotwork", "knout", "knouts", "know", "know all", "know alls", "know how", "know it all", "know nothing", "knowableness", "knowe", "knower", "knowers", "knowes", "knowing", "knowingness", "knowledge", "known", "knows", "knox", "knoxville", "knuckle", "knuckles", "knur", "knurl", "knurling", "knurls", "knurs", "koa", "koala", "koalas", "koan", "koans", "koas", "kob", "kobe", "koblenz", "kobold", "kobolds", "kobs", "kochia", "kochias", "kodak", "kodaly", "kodiak", "kodiaks", "koel", "koels", "koestler", "kofta", "koftgar", "koftgars", "kohen", "kohl", "kohlrabi", "kohlrabis", "koine", "kok saghyz", "kokanee", "kola", "kolas", "kolinskies", "kolinsky", "kolkhoz", "kolkhozes", "kolo", "kolos", "kolyma", "komatik", "komatiks", "komintern", "komsomol", "konimeter", "konimeters", "koniology", "koodoo", "koodoos", "kook", "kookaburra", "kookaburras", "kooks", "kop", "kopeck", "kopecks", "kopek", "kopeks", "koph", "kophs", "kopje", "kopjes", "koppa", "koppie", "koppies", "koran", "korbut", "korchnoi", "kore", "korea", "korean", "koreans", "kores", "korfball", "korma", "kormas", "koruna", "korunas", "kos", "koses", "kosher", "koss", "koto", "kotos", "kotow", "kotows", "kottabos", "kottaboses", "kotwal", "kotwals", "koulibiaca", "koumiss", "kouprey", "koupreys", "kourbash", "kourbashes", "kouros", "kowhai", "kowhais", "kowloon", "kowtow", "kowtows", "kraal", "kraals", "kraft", "krait", "kraits", "krakatoa", "kraken", "krakens", "krakow", "krameria", "kramerias", "krans", "kranses", "krasnoyarsk", "krater", "kraters", "krebs", "kreisler", "kremlin", "kremlinologist", "kremlinology", "kremlins", "kreutzer", "kreutzers", "kriegspiel", "kriegspiels", "krill", "krills", "krimmer", "krimmers", "kris", "krises", "krishna", "kromeskies", "kromesky", "krone", "kronos", "kroo", "kropotkin", "kru", "kruger", "kruller", "krullers", "krumhorn", "krumhorns", "krummhorn", "krummhorns", "krupp", "krypton", "krystal", "krystle", "kshatriya", "ku klux", "kubelik", "kubrick", "kudos", "kudu", "kudus", "kudzu", "kudzus", "kufic", "kukri", "kukris", "kulak", "kulaks", "kultur", "kulturkampf", "kulturkreis", "kum", "kumar", "kumiss", "kumquat", "kumquats", "kunming", "kunstlied", "kunzite", "kuomintang", "kurbash", "kurbashes", "kurchatovium", "kurd", "kurdish", "kurdistan", "kurosawa", "kuroshio", "kurrajong", "kursaal", "kursaals", "kurt", "kurta", "kurtas", "kurtosis", "kurtosises", "kuru", "kutch", "kutches", "kuwait", "kuwaiti", "kuwaitis", "kuyp", "kvass", "kvasses", "kwa", "kwacha", "kwachas", "kwakiutl", "kwakiutls", "kwangju", "kwanza", "kwashiorkor", "kweichow", "kwela", "kyanite", "kyat", "kyats", "kyle", "kyles", "kylie", "kylies", "kylin", "kylins", "kylix", "kyloe", "kyloes", "kymograph", "kymographs", "kyoto", "kyphosis", "kyra", "kyte", "kytes", "kyu", "kyus", "l allegro", "l dopa", "la di da", "laager", "laagers", "lab", "labarum", "labarums", "labdanum", "labefaction", "labefactions", "label", "labellum", "labels", "labia", "labial", "labialisation", "labialism", "labialisms", "labialization", "labials", "labiate", "labiates", "lability", "labiodental", "labiodentals", "labiovelar", "labium", "lablab", "lablabs", "labor", "laboratories", "laboratory", "laborer", "laborers", "laboriousness", "labors", "labour", "labourer", "labourers", "labourism", "labourist", "labourists", "labourite", "labourites", "labours", "labrador", "labradorite", "labret", "labrets", "labrid", "labroid", "labrum", "labs", "laburnum", "laburnums", "labyrinth", "labyrinthitis", "labyrinthodont", "labyrinthodonts", "labyrinths", "lac", "laccolith", "laccoliths", "lace", "lace leaf", "lacebark", "lacebarks", "laceration", "lacerations", "lacerta", "lacertilian", "laces", "laches", "lachesis", "lachlan", "lachrymation", "lachrymations", "lachrymator", "lachrymatories", "lachrymators", "lachrymatory", "lachrymosity", "lacing", "lacings", "lack", "lackadaisicalness", "lacker", "lackers", "lackey", "lackeys", "lackluster", "lacks", "laclos", "laconia", "laconian", "laconicism", "laconicisms", "laconism", "laconisms", "lacquer", "lacquerer", "lacquerers", "lacquers", "lacquey", "lacqueys", "lacrimation", "lacrimator", "lacrimators", "lacrosse", "lacs", "lactase", "lactate", "lactates", "lactation", "lactations", "lacteal", "lacteals", "lactobacillus", "lactoflavin", "lactometer", "lactometers", "lactone", "lactoprotein", "lactoproteins", "lactoscope", "lactoscopes", "lactose", "lacuna", "lacunar", "lacunars", "lacunas", "lad", "ladanum", "ladder", "ladder back", "ladders", "laddie", "laddies", "lades", "ladies", "ladies in waiting", "ladin", "lading", "ladings", "ladino", "ladinos", "ladle", "ladleful", "ladlefuls", "ladles", "ladrone", "ladrones", "lads", "lady", "lady s mantle", "lady s slipper", "lady s smock", "lady in waiting", "lady killer", "lady killers", "ladybird", "ladybirds", "ladybug", "ladybugs", "ladyfinger", "ladyfingers", "ladyhood", "ladykin", "ladykins", "ladyship", "ladyships", "ladysmith", "laertes", "laevorotation", "laevorotations", "laevulose", "lafayette", "lag", "lagan", "lagans", "lagena", "lager", "lagers", "laggard", "laggards", "laggen", "laggens", "lagger", "laggers", "laggin", "lagging", "laggings", "laggins", "lagniappe", "lagniappes", "lagomorph", "lagomorphs", "lagoon", "lagoons", "lagos", "lagrange", "lags", "lagting", "lagune", "lagunes", "lah", "lah di dah", "lahar", "lahars", "lahore", "lahs", "lahti", "laic", "laicisation", "laicization", "laigh", "laighs", "laing", "lair", "laird", "lairds", "lairdship", "lairdships", "lairs", "laissez passer", "laissez passers", "laitance", "laitances", "laith", "laities", "laity", "lake", "laker", "lakers", "lakes", "lakeside", "lakh", "lakhs", "lakin", "lakshmi", "lal", "lalage", "lalang", "lalangs", "lalapalooza", "lalita", "lalla", "lallans", "lallation", "lallations", "lally", "lalo", "lam", "lama", "lamaism", "lamaist", "lamarck", "lamarckian", "lamarckism", "lamas", "lamaseries", "lamasery", "lamb", "lambda", "lambdacism", "lambdas", "lambencies", "lambency", "lambert", "lamberts", "lambeth", "lambkin", "lambkins", "lambrequin", "lambrequins", "lambs", "lambskin", "lambskins", "lame", "lamed", "lamella", "lamellibranch", "lamellibranchs", "lamellicorn", "lamellicorns", "lameness", "lament", "lamentation", "lamentations", "laments", "lames", "lamia", "lamias", "lamina", "laminate", "laminates", "lamination", "laminations", "laminator", "laminators", "lamington", "lamingtons", "laminitis", "lammas", "lammergeier", "lammergeiers", "lammergeyer", "lammergeyers", "lamp", "lampad", "lampads", "lampas", "lampedusa", "lampern", "lamperns", "lampers", "lampion", "lampions", "lamplight", "lamplighter", "lamplighters", "lamplights", "lampoon", "lampooner", "lampooneries", "lampooners", "lampoonery", "lampoonist", "lampoonists", "lampoons", "lamppost", "lampposts", "lamprey", "lampreys", "lamprophyre", "lamps", "lampshade", "lampshades", "lams", "lanai", "lanais", "lanark", "lancashire", "lancaster", "lancastrian", "lance", "lancejack", "lancejacks", "lancelet", "lancelets", "lancelot", "lancer", "lancers", "lances", "lancet", "lancets", "lancination", "land", "land grabber", "landammann", "landammanns", "landau", "landaulet", "landaulets", "landaus", "landes", "landfall", "landfalls", "landfill", "landfills", "landform", "landforms", "landgrave", "landgraves", "landgraviate", "landgraviates", "landgravine", "landgravines", "landholder", "landholders", "landholding", "landing", "landings", "landladies", "landlady", "landloper", "landlopers", "landlord", "landlordism", "landlords", "landman", "landmark", "landmarks", "landmass", "landmasses", "landor", "landowner", "landowners", "landownership", "landowska", "landrace", "landraces", "lands", "landscape", "landscapes", "landscaping", "landscapist", "landscapists", "landseer", "landseers", "landside", "landskip", "landskips", "landsknecht", "landsknechts", "landslide", "landslides", "landslip", "landslips", "landsman", "landsting", "landsturm", "landtag", "landwehr", "lane", "lanes", "lanfranc", "langer", "langland", "langlauf", "langley", "langmuir", "langobard", "langouste", "langoustes", "langoustine", "langoustines", "langrage", "langrages", "langton", "langtry", "language", "languages", "langue", "languedocian", "langues", "languet", "languets", "languette", "languettes", "languidness", "languisher", "languishers", "languishment", "languor", "langur", "langurs", "laniard", "laniards", "laniary", "lankiness", "lankness", "lanner", "lanneret", "lannerets", "lanners", "lanolin", "lansing", "lansquenet", "lansquenets", "lantana", "lantanas", "lantern", "lanterns", "lanthanide", "lanthanides", "lanthanum", "lanthorn", "lanugo", "lanugos", "lanyard", "lanyards", "lao", "laocoon", "laodicea", "laodicean", "laos", "laotian", "laotians", "lap", "laparoscope", "laparoscopes", "laparoscopy", "laparotomies", "laparotomy", "lapdog", "lapdogs", "lapel", "lapels", "lapful", "lapfuls", "lapidaries", "lapidarist", "lapidarists", "lapidary", "lapidation", "lapidations", "lapidification", "lapis", "lapith", "laplace", "lapland", "lapp", "lapper", "lappers", "lappet", "lappets", "lapping", "lappings", "lappish", "laps", "lapse", "lapses", "lapsing", "lapstrake", "lapsus", "laptop", "laptops", "laputa", "lapwing", "lapwings", "lar", "lara", "laraine", "laramie", "larboard", "larcener", "larceners", "larcenies", "larcenist", "larcenists", "larcenous", "larceny", "larch", "larches", "lard", "larder", "larders", "lardon", "lardons", "lards", "lares", "large", "largeness", "larges", "largess", "largesse", "largesses", "larghetto", "larghettos", "largo", "largos", "lariat", "lariats", "larissa", "lark", "larker", "larkers", "larkin", "larkiness", "larks", "larkspur", "larkspurs", "larnax", "larousse", "larrigan", "larrigans", "larrikin", "larrikinism", "larry", "larum", "larums", "larva", "larvicide", "larvicides", "larwood", "laryngectomee", "laryngectomies", "laryngectomy", "laryngitis", "laryngologist", "laryngologists", "laryngology", "laryngoscope", "laryngoscopes", "laryngoscopies", "laryngoscopist", "laryngoscopists", "laryngoscopy", "laryngotomies", "laryngotomy", "larynx", "larynxes", "lasagna", "lasagnas", "lasagne", "lasagnes", "lascar", "lascars", "lascaux", "lasciviousness", "laser", "lasers", "lash", "lash up", "lash ups", "lasher", "lashers", "lashes", "lashing", "lashings", "lashkar", "lashkars", "lasket", "laskets", "laski", "lass", "lassa", "lasses", "lassie", "lassies", "lassitude", "lassitudes", "lasso", "lassoes", "lassos", "last", "last ditch", "last minute", "laster", "lasters", "lasting", "lastingness", "lasts", "lat", "latakia", "latch", "latches", "latchet", "latching", "latchkey", "latchkeys", "lateen", "latency", "lateness", "lateral", "laterality", "lateran", "laterite", "latest", "latex", "latexes", "lath", "lathe", "lathee", "lathees", "lather", "lathers", "lathes", "lathi", "lathing", "lathings", "lathis", "laths", "lathyrus", "lathyruses", "latices", "latifundium", "latimer", "latin", "latin american", "latin americans", "latina", "latinas", "latinism", "latinist", "latinists", "latinity", "latino", "latinos", "latins", "latitude", "latitudes", "latitudinarian", "latitudinarianism", "latitudinarians", "latium", "latke", "latkes", "latour", "latria", "latrine", "latrines", "lats", "latten", "lattens", "latter", "lattice", "lattices", "latticing", "latticinio", "latvia", "latvian", "latvians", "laud", "lauda", "laudability", "laudableness", "laudanum", "laudation", "laudations", "lauder", "lauders", "lauds", "laugh", "laughableness", "laugher", "laughers", "laughing", "laughings", "laughs", "laughter", "laughters", "laughton", "launce", "launcelot", "launces", "launceston", "launch", "launcher", "launchers", "launches", "launching", "launder", "launderer", "launderers", "launderette", "launderettes", "laundering", "launders", "laundress", "laundresses", "laundries", "laundromat", "laundromats", "laundry", "laundryman", "laundrywoman", "laura", "lauras", "laurasia", "laureate", "laureates", "laureateship", "laurel", "laurels", "lauren", "laurence", "laurencin", "lauretta", "laurie", "laurustinus", "laurustinuses", "lausanne", "lautrec", "lauwine", "lauwines", "lav", "lava", "lava lava", "lavabo", "lavaboes", "lavabos", "lavage", "lavages", "lavaliere", "lavalieres", "lavas", "lavatera", "lavation", "lavatories", "lavatory", "lavender", "lavenders", "laver", "laverock", "laverocks", "lavers", "laves", "lavinia", "lavishment", "lavishments", "lavishness", "lavoisier", "lavolta", "lavs", "law", "law breaking", "lawfulness", "lawgiver", "lawgivers", "lawing", "lawings", "lawlessness", "lawmaker", "lawmakers", "lawman", "lawn", "lawns", "lawrence", "lawrencium", "laws", "lawson", "lawsuit", "lawsuits", "lawyer", "lawyers", "laxative", "laxativeness", "laxatives", "laxity", "laxness", "lay", "lay by", "lay bys", "lay up", "layabout", "layabouts", "layer", "layering", "layerings", "layers", "layette", "layettes", "laying", "layings", "layla", "layman", "layover", "layovers", "layperson", "lays", "laywoman", "lazar", "lazaret", "lazarets", "lazarette", "lazarettes", "lazaretto", "lazarettos", "lazarist", "lazars", "lazarus", "laze", "lazes", "laziness", "lazio", "lazuli", "lazulite", "lazurite", "lea", "leach", "leaches", "leaching", "leachings", "leacock", "lead", "lead in", "lead ins", "leadbelly", "leadenness", "leader", "leaders", "leadership", "leaderships", "leading", "leadings", "leads", "leadsman", "leadwort", "leadworts", "leaf", "leaf climber", "leaf climbers", "leaf cutter", "leaf hopper", "leafage", "leafages", "leafiness", "leafing", "leaflet", "leaflets", "leafs", "league", "leaguer", "leaguers", "leagues", "leah", "leak", "leakage", "leakages", "leaker", "leakers", "leakey", "leakiness", "leaks", "lealty", "lean", "lean to", "lean tos", "leander", "leaner", "leaning", "leanings", "leanne", "leanness", "leans", "leap", "leaper", "leapers", "leapfrog", "leapfrogs", "leaping", "leaps", "lear", "learnedness", "learner", "learners", "learning", "lears", "leas", "lease", "lease lend", "leaseback", "leasebacks", "leasehold", "leaseholder", "leaseholders", "leaseholds", "leaser", "leasers", "leases", "leash", "leashes", "leasing", "leasings", "least", "leasts", "leat", "leather", "leatherette", "leatherneck", "leathernecks", "leathers", "leats", "leave", "leave taking", "leave takings", "leaven", "leavening", "leavenings", "leavens", "leaver", "leavers", "leaves", "leaving", "leavings", "leavis", "lebanon", "lebbek", "lebbeks", "lebensraum", "leblanc", "lebrun", "lecanora", "lecanoras", "lech", "lecher", "lecheries", "lecherousness", "lechers", "lechery", "leches", "lechwe", "lechwes", "lecithin", "lectern", "lecterns", "lectin", "lection", "lectionaries", "lectionary", "lections", "lector", "lectorate", "lectorates", "lectors", "lectorship", "lectorships", "lecture", "lecturer", "lecturers", "lectures", "lectureship", "lectureships", "lecturing", "led", "leda", "ledge", "ledger", "ledgers", "ledges", "ledum", "ledums", "lee", "leech", "leechee", "leechees", "leeches", "leeds", "leek", "leeks", "leer", "leeriness", "leers", "lees", "leet", "leets", "leeuwenhoek", "leeward", "leeway", "leeways", "left", "left footer", "left footers", "left handedness", "left hander", "left handers", "left winger", "left wingers", "lefties", "leftism", "leftist", "leftists", "leftover", "leftovers", "lefts", "lefty", "leg", "leg of mutton", "leg pull", "leg puller", "leg pulling", "leg pulls", "legacies", "legacy", "legalese", "legalisation", "legalisations", "legalism", "legalist", "legalists", "legality", "legalization", "legalizations", "legate", "legatee", "legatees", "legates", "legateship", "legateships", "legation", "legations", "legato", "legator", "legators", "legatos", "legend", "legendist", "legendists", "legendry", "legends", "leger", "legerdemain", "legerity", "legginess", "legging", "leggings", "leghorn", "leghorns", "legibility", "legion", "legionaries", "legionary", "legionnaire", "legionnaires", "legions", "legislating", "legislation", "legislations", "legislative", "legislator", "legislators", "legislatorship", "legislatorships", "legislature", "legislatures", "legist", "legists", "legit", "legitim", "legitimacy", "legitimateness", "legitimation", "legitimations", "legitimisation", "legitimism", "legitimist", "legitimists", "legitimization", "legitims", "leglen", "leglens", "legroom", "legs", "legume", "legumes", "legumin", "legumins", "legwork", "lehar", "lehmann", "lehr", "lehrs", "lei", "leibnitz", "leibnitzian", "leibnitzianism", "leibniz", "leibnizian", "leibnizianism", "leicester", "leicestershire", "leiden", "leigh", "leighton", "leila", "leinster", "leipoa", "leipoas", "leipzig", "leis", "leishmania", "leishmanias", "leishmaniasis", "leister", "leisters", "leisure", "leisureliness", "leisures", "leith", "leitmotif", "leitmotifs", "leitmotiv", "leitmotivs", "leitrim", "lek", "leks", "lekythos", "lekythoses", "lely", "lem", "leman", "lemes", "lemma", "lemmas", "lemming", "lemmings", "lemnian", "lemniscate", "lemniscates", "lemniscus", "lemnos", "lemon", "lemonade", "lemonades", "lemons", "lempira", "lempiras", "lemuel", "lemur", "lemures", "lemuroid", "lemuroids", "lemurs", "lena", "lend lease", "lender", "lenders", "lending", "lendings", "length", "lengthening", "lengthiness", "lengthman", "lengths", "lenience", "leniency", "lenin", "leningrad", "leninism", "leninist", "lenis", "lenition", "lenitions", "lenitive", "lenitives", "lenity", "lennon", "lennox", "lenny", "leno", "lenos", "lens", "lenses", "lensman", "lent", "lenticel", "lenticels", "lenticle", "lenticles", "lentigo", "lentil", "lentils", "lento", "lentoid", "lentos", "leo", "leominster", "leon", "leona", "leonard", "leonardo", "leoncavallo", "leone", "leones", "leonid", "leonidas", "leonides", "leonids", "leonora", "leontyne", "leopard", "leopard s bane", "leopardess", "leopardesses", "leopards", "leopold", "leotard", "leotards", "lepanto", "leper", "lepers", "lepidolite", "lepidomelane", "lepidoptera", "lepidopterist", "lepidopterists", "lepidopterology", "lepidus", "leprechaun", "leprechauns", "leprosarium", "leprosariums", "leprosy", "leptocephalus", "leptocephaluses", "lepton", "leptons", "leptosome", "leptosomes", "leptospirosis", "leptotene", "lepus", "lermontov", "lerna", "lerner", "leroy", "lerwick", "les", "lesbian", "lesbianism", "lesbians", "lesbos", "lese majesty", "lesion", "lesions", "lesley", "leslie", "lesotho", "less", "lessee", "lessees", "lessening", "lesser", "lessing", "lesson", "lessons", "lessor", "lessors", "lester", "let", "letch", "letches", "letchworth", "lethalities", "lethality", "lethargy", "lethe", "letitia", "leto", "lets", "lett", "letter", "letterer", "letterers", "letterhead", "letterheads", "lettering", "letterings", "letterpress", "letterpresses", "letters", "lettie", "letting", "lettings", "lettish", "letts", "lettuce", "lettuces", "letty", "leu", "leucine", "leucite", "leucoblast", "leucocyte", "leucocytes", "leucocytosis", "leucoderma", "leucoma", "leucopenia", "leucoplast", "leucoplasts", "leucopoiesis", "leucorrhoea", "leucotome", "leucotomes", "leucotomies", "leucotomy", "leukaemia", "leukemia", "leukocyte", "leukocytes", "lev", "levant", "levantine", "levantines", "levants", "levator", "levators", "levee", "levees", "level", "level headedness", "leveler", "levelers", "leveling", "leveller", "levellers", "levelness", "levels", "leven", "lever", "leverage", "leverages", "leveraging", "leveret", "leverets", "leverhulme", "leverkusen", "levers", "levi", "levi strauss", "leviathan", "leviathans", "levies", "levigation", "levin", "levins", "levirate", "levis", "levitation", "levitations", "leviticus", "levities", "levity", "levulose", "levy", "lewdness", "lewes", "lewis", "lewises", "lewisham", "lewisite", "lewisson", "lewissons", "lex", "lexeme", "lexemes", "lexicographer", "lexicographers", "lexicography", "lexicologist", "lexicologists", "lexicology", "lexicon", "lexicons", "lexigraphy", "lexington", "lexis", "ley", "leyden", "leys", "lhasa", "liabilities", "liability", "liaison", "liaisons", "liam", "liana", "lianas", "liang", "liangs", "lianne", "liar", "liard", "liards", "liars", "lias", "lib", "libation", "libations", "libber", "libbers", "libby", "libeccio", "libeccios", "libel", "libeler", "libelers", "libellant", "libellants", "libellee", "libellees", "libels", "liber", "liberal", "liberalisation", "liberalisations", "liberalism", "liberalist", "liberalists", "liberalities", "liberality", "liberalization", "liberalizations", "liberalness", "liberals", "liberation", "liberations", "liberator", "liberators", "liberia", "liberian", "libers", "libertarian", "libertarianism", "libertarians", "liberticide", "liberticides", "liberties", "libertinage", "libertine", "libertines", "libertinism", "liberty", "libidinousness", "libido", "libidos", "libra", "librarian", "librarians", "librarianship", "libraries", "library", "libration", "librations", "librettist", "librettists", "libretto", "librettos", "libreville", "librium", "libs", "libya", "libyan", "libyans", "lice", "licence", "licences", "license", "licensee", "licensees", "licenser", "licensers", "licenses", "licensor", "licensors", "licentiate", "licentiates", "licentiousness", "lich", "lichee", "lichees", "lichen", "lichenin", "lichenism", "lichenologist", "lichenologists", "lichenology", "lichens", "lichfield", "lichgate", "lichgates", "lichi", "lichis", "licht", "lichtenstein", "lichts", "lick", "licker", "licker in", "lickerishness", "lickers", "licking", "lickings", "licks", "lickspittle", "lickspittles", "licorice", "licorices", "lictor", "lictors", "lid", "lido", "lidocaine", "lidos", "lids", "lie", "lie abed", "lie abeds", "lie down", "lie downs", "lie in", "lie ins", "liebfraumilch", "liebig", "liechtenstein", "lied", "liege", "liegeman", "lieges", "lien", "liens", "lientery", "lier", "lierne", "liernes", "liers", "lies", "lieu", "lieus", "lieutenancies", "lieutenancy", "lieutenant", "lieutenants", "life", "life saver", "life savers", "lifeboat", "lifeboatman", "lifeboats", "lifeguard", "lifeguards", "lifelessness", "lifeline", "lifelines", "lifer", "lifers", "lifespan", "lifespans", "lifestyle", "lifestyles", "lifetime", "lifetimes", "liffey", "lift", "lift off", "lift offs", "liftboy", "liftboys", "lifter", "lifters", "liftman", "lifts", "ligament", "ligaments", "ligan", "ligand", "ligands", "ligans", "ligation", "ligations", "ligature", "ligatures", "liger", "ligers", "ligeti", "light", "light headedness", "light heartedness", "light horseman", "light mindedness", "light o love", "light o loves", "light year", "light years", "lightbulb", "lightbulbs", "lightening", "lightenings", "lighter", "lighterage", "lighterages", "lighterman", "lighters", "lighthouse", "lighthouses", "lighting", "lightings", "lightness", "lightning", "lights", "lightship", "lightships", "lightsomeness", "lightweight", "lightweights", "lignaloes", "ligne", "lignes", "lignification", "lignin", "lignite", "lignocaine", "lignocellulose", "lignum", "ligroin", "ligula", "ligulas", "ligule", "ligules", "ligure", "ligures", "liguria", "ligurian", "likableness", "like", "like mindedness", "likelihood", "likelihoods", "likeliness", "likeness", "likenesses", "likening", "liker", "likers", "likes", "likin", "liking", "likings", "likins", "lilac", "lilacs", "lilangeni", "lilian", "lilias", "lilienthal", "lilies", "lilith", "lille", "lillian", "lillibullero", "lilliputian", "lilly pillies", "lilly pilly", "lilo", "lilongwe", "lilos", "lilt", "lilts", "lily", "lily trotter", "lily trotters", "lima", "limas", "limassol", "limax", "limb", "limber", "limbers", "limbo", "limbos", "limbs", "limburg", "lime", "limeade", "limehouse", "limekiln", "limekilns", "limelight", "limelights", "limen", "limens", "limerick", "limericks", "limes", "limestone", "limestones", "limewater", "limey", "limeys", "liminess", "limit", "limitarian", "limitarians", "limitation", "limitations", "limited", "limitedness", "limiter", "limiters", "limites", "limiting", "limitings", "limitlessness", "limits", "limmer", "limmers", "limnaea", "limner", "limners", "limning", "limnologist", "limnologists", "limnology", "limo", "limoges", "limonite", "limos", "limousin", "limousine", "limousines", "limp", "limper", "limpet", "limpets", "limpidity", "limpidness", "limping", "limpings", "limpkin", "limpkins", "limpness", "limpopo", "limps", "limulus", "limuluses", "lin", "linac", "linacre", "linacs", "linage", "linages", "linalool", "linch", "linches", "linchpin", "linchpins", "lincoln", "lincolnshire", "lincomycin", "lincrusta", "linctus", "linctuses", "linda", "lindane", "lindbergh", "lindemann", "linden", "lindens", "lindisfarne", "lindsay", "lindsey", "lindy", "line", "line engraving", "line out", "line outs", "line shooter", "line up", "line ups", "lineage", "lineages", "lineament", "lineaments", "linearities", "linearity", "lineation", "lineations", "linebacker", "linebackers", "lineman", "linemen", "linen", "linens", "liner", "liners", "lines", "linesman", "linette", "ling", "linga", "lingam", "lingams", "lingas", "lingerer", "lingerers", "lingerie", "lingering", "lingerings", "lingo", "lingoes", "lings", "lingua", "lingual", "linguas", "linguine", "linguini", "linguist", "linguistician", "linguisticians", "linguistics", "linguists", "linhay", "linhays", "liniment", "liniments", "linin", "lining", "linings", "link", "linkage", "linkages", "linkboy", "linkboys", "linkman", "links", "linkwork", "linlithgow", "linn", "linnaeus", "linnet", "linnets", "linnette", "linns", "lino", "linocut", "linocuts", "linoleum", "linos", "linotype", "linotypes", "lins", "linsang", "linsangs", "linseed", "linseeds", "linsey", "linsey woolsey", "linstock", "linstocks", "lint", "lintel", "lintels", "linter", "linters", "lints", "lintwhite", "linus", "linz", "lion", "lion hunter", "lion hunters", "lioncel", "lioncels", "lioness", "lionesses", "lionet", "lionets", "lionisation", "lionization", "lions", "lip", "lip reading", "lipase", "lipases", "lipchitz", "lipectomies", "lipectomy", "lipid", "lipide", "lipides", "lipids", "lipizzaner", "lipizzaners", "lipman", "lipochrome", "lipogram", "lipogrammatism", "lipogrammatist", "lipogrammatists", "lipograms", "lipography", "lipoid", "lipoids", "lipoma", "lipoprotein", "lipoproteins", "lippen", "lippens", "lippi", "lippie", "lippies", "lippizaner", "lippizaners", "lippmann", "lips", "lipstick", "lipsticks", "liquation", "liquations", "liquefacient", "liquefacients", "liquefaction", "liquefier", "liquefiers", "liquescence", "liqueur", "liqueurs", "liquid", "liquidation", "liquidations", "liquidator", "liquidators", "liquidities", "liquidity", "liquidizer", "liquidizers", "liquidness", "liquids", "liquidus", "liquor", "liquorice", "liquorices", "liquors", "lira", "liras", "liriodendron", "liriodendrons", "liripipe", "liripipes", "lisa", "lisbeth", "lisbon", "lise", "lisette", "lisle", "lisles", "lisp", "lisper", "lispers", "lisps", "lissomeness", "lissomness", "list", "listel", "listels", "listen", "listener", "listeners", "listening", "lister", "listeria", "listeriosis", "listerism", "listing", "listings", "listlessness", "lists", "liszt", "lit", "litanies", "litany", "litchi", "litchis", "liter", "literacy", "literal", "literaliser", "literalisers", "literalism", "literalist", "literalists", "literality", "literalizer", "literalizers", "literalness", "literals", "literariness", "literate", "literates", "literati", "literation", "literator", "literators", "literature", "literatures", "lites", "lith", "litharge", "litheness", "lithia", "lithiasis", "lithium", "litho", "lithograph", "lithographer", "lithographers", "lithographs", "lithography", "litholapaxy", "lithology", "lithomancy", "lithomarge", "lithophane", "lithophyte", "lithophytes", "lithopone", "lithoprint", "lithoprints", "lithos", "lithosphere", "lithotomies", "lithotomist", "lithotomists", "lithotomy", "lithotrite", "lithotrites", "lithotrities", "lithotritist", "lithotritists", "lithotrity", "liths", "lithuania", "lithuanian", "lithuanians", "litigant", "litigants", "litigation", "litigator", "litigators", "litigiousness", "litmus", "litotes", "litre", "litres", "litter", "litters", "little", "littleness", "littles", "littoral", "littorals", "liturgics", "liturgies", "liturgiologist", "liturgiologists", "liturgiology", "liturgist", "liturgists", "liturgy", "lituus", "lituuses", "liv", "livability", "liveability", "livelihood", "livelihoods", "liveliness", "livelong", "livelongs", "livener", "liveners", "liver", "liver rot", "liveries", "liverpool", "liverpudlian", "liverpudlians", "livers", "liverwort", "liverworts", "liverwurst", "liverwursts", "livery", "liveryman", "lives", "livestock", "liveware", "livia", "lividity", "lividness", "living", "livings", "livingston", "livingstone", "livorno", "livraison", "livre", "livres", "livy", "lixiviation", "lixiviations", "lixivium", "liz", "liza", "lizard", "lizards", "lizbeth", "lizzie", "lizzy", "ljubljana", "llama", "llamas", "llandudno", "llanelli", "llanelly", "llangollen", "llano", "llanos", "lloyd", "lloyd s", "loach", "loaches", "load", "load shedding", "loader", "loaders", "loading", "loadings", "loads", "loadstar", "loadstars", "loadstone", "loadstones", "loaf", "loafer", "loafers", "loafing", "loafings", "loafs", "loam", "loaminess", "loams", "loan", "loaner", "loaners", "loaning", "loanings", "loans", "loather", "loathers", "loathing", "loathings", "loathsomeness", "loaves", "lob", "lobation", "lobations", "lobbies", "lobby", "lobbyer", "lobbyers", "lobbyist", "lobbyists", "lobe", "lobectomies", "lobectomy", "lobelia", "lobelias", "lobeline", "lobes", "loblollies", "loblolly", "lobo", "lobos", "lobotomies", "lobotomy", "lobs", "lobscouse", "lobscouses", "lobster", "lobsters", "lobulation", "lobule", "lobules", "lobulus", "lobus", "lobworm", "lobworms", "local", "locale", "locales", "localisation", "localisations", "localiser", "localisers", "localism", "localisms", "localist", "localities", "locality", "localization", "localizations", "localizer", "localizers", "locals", "locarno", "locating", "location", "locations", "locative", "locatives", "loch", "lochia", "lochinvar", "lochs", "loci", "lock", "lock gate", "lock gates", "lockage", "lockages", "locke", "locker", "lockers", "locket", "lockets", "locking", "lockman", "locknut", "locknuts", "lockout", "lockouts", "locks", "locksmith", "locksmiths", "lockstitch", "lockstitches", "lockyer", "loco", "locoed", "locoes", "locoman", "locomobile", "locomobiles", "locomobility", "locomotion", "locomotions", "locomotive", "locomotives", "locomotivity", "locos", "locrian", "locule", "locules", "loculus", "locum", "locum tenency", "locums", "locus", "locust", "locusta", "locusts", "locution", "locutions", "locutories", "locutory", "lode", "loden", "lodens", "lodes", "lodestar", "lodestars", "lodestone", "lodestones", "lodge", "lodgement", "lodgements", "lodgepole", "lodgepoles", "lodger", "lodgers", "lodges", "lodging", "lodgings", "lodgment", "lodgments", "lodicule", "lodicules", "loess", "loewe", "loft", "lofter", "lofters", "loftiness", "lofts", "log", "logan", "loganberries", "loganberry", "logans", "logaoedic", "logarithm", "logarithms", "loge", "loges", "logger", "loggerhead", "loggerheads", "loggers", "loggia", "loggias", "logging", "loggings", "logia", "logic", "logicality", "logicalness", "logician", "logicians", "logicism", "logics", "logion", "logistic", "logistician", "logisticians", "logistics", "loglog", "loglogs", "logo", "logogram", "logograms", "logograph", "logographer", "logographers", "logographs", "logography", "logogriph", "logogriphs", "logomachist", "logomachists", "logomachy", "logopaedics", "logopedics", "logorrhea", "logorrhoea", "logos", "logotype", "logotypes", "logs", "logwood", "logwoods", "lohengrin", "loin", "loins", "loir", "loir et cher", "loire", "loire atlantique", "loiret", "loirs", "lois", "loiterer", "loiterers", "loki", "lola", "lolita", "loll", "lollapalooza", "lollardism", "lollardry", "lollardy", "loller", "lollers", "lollies", "lollipop", "lollipops", "lolls", "lolly", "loma", "lomas", "lombard", "lombardy", "lome", "loment", "loments", "lomentum", "lomond", "london", "londonderry", "londoner", "londoners", "loneliness", "loneness", "loner", "loners", "lonesome", "lonesomeness", "long", "long distance", "long headedness", "long sightedness", "long suffering", "long windedness", "longa", "longan", "longanimity", "longans", "longas", "longboat", "longboats", "longbow", "longbows", "longe", "longeron", "longerons", "longes", "longevities", "longevity", "longfellow", "longford", "longhand", "longhorn", "longhorns", "longicorn", "longicorns", "longing", "longings", "longinus", "longitude", "longitudes", "longness", "longobard", "longs", "longship", "longships", "longshoreman", "longueur", "longueurs", "longways", "lonicera", "loo", "loobies", "looby", "loof", "loofa", "loofah", "loofahs", "loofas", "loofs", "look", "look in", "look see", "look sees", "looker", "looker on", "lookers", "looking", "looking glass", "looking glasses", "lookings", "lookout", "lookouts", "looks", "loom", "looming", "looms", "loon", "loonies", "looniness", "loons", "loony", "loop", "loop line", "looper", "loopers", "loophole", "loopholes", "loops", "loos", "loose", "loose leaf", "loosebox", "looseboxes", "loosener", "looseners", "looseness", "loosening", "looses", "loosing", "loot", "looter", "looters", "looting", "loots", "lop", "lope", "loper", "lopers", "lopes", "lophobranch", "lophobranchiate", "lophobranchs", "lophophore", "lopolith", "lopoliths", "lopper", "loppers", "lops", "lopsidedness", "loquaciousness", "loquacity", "loquat", "loquats", "loquitur", "loran", "lorans", "lorca", "lord", "lording", "lordings", "lordliness", "lordling", "lordlings", "lordolatry", "lordosis", "lords", "lords and ladies", "lordship", "lordships", "lore", "lorelei", "loren", "lorentz", "lorenz", "lorenzo", "lores", "loretta", "lorgnette", "lorgnettes", "lorgnon", "lorgnons", "lorica", "lorication", "lories", "lorikeet", "lorikeets", "lorimer", "lorimers", "loris", "lorises", "lorna", "lorraine", "lorries", "lorry", "lory", "losel", "losels", "loser", "losers", "losey", "loss", "losses", "lost", "lot", "lot et garonne", "lota", "lotas", "lote", "lotes", "lothair", "lothario", "lotharios", "loti", "lotion", "lotions", "lots", "lotted", "lotteries", "lottery", "lottie", "lotting", "lotto", "lottos", "lotus", "lotus eater", "lotus eaters", "lotuses", "lou", "loudmouth", "loudmouths", "loudness", "loudspeaker", "loudspeakers", "lough", "loughs", "louie", "louis", "louisa", "louise", "louisiana", "louisville", "lounge", "lounger", "loungers", "lounges", "loup", "loupe", "loupes", "loups", "lourdes", "louse", "louses", "lousewort", "louseworts", "lousiness", "lout", "louth", "loutishness", "louts", "louvain", "louver", "louvers", "louvre", "louvres", "lovableness", "lovage", "lovages", "lovat", "lovats", "love", "love in a mist", "love in idleness", "love lies bleeding", "love making", "love token", "love tokens", "loveableness", "lovebird", "lovebirds", "lovelace", "lovelies", "loveliness", "lovell", "lovelock", "lovelocks", "lovelornness", "lovely", "lover", "lovers", "loves", "lovey", "loveys", "loving kindness", "lovingness", "low", "low down", "low rise", "low spiritedness", "lowan", "lowans", "lowboy", "lowboys", "lowell", "lower", "lower case", "lowering", "lowerings", "lowers", "lowes", "lowestoft", "lowland", "lowlander", "lowlanders", "lowlands", "lowlihead", "lowliness", "lown", "lowness", "lowns", "lowry", "lows", "lowveld", "lox", "loxes", "loxodrome", "loxodromes", "loxodromics", "loyalist", "loyalists", "loyalties", "loyalty", "lozenge", "lozenges", "lozi", "lualaba", "luanda", "luau", "luaus", "luba", "lubber", "lubbers", "lubbock", "lube", "lubes", "lubitsch", "lublin", "lubra", "lubras", "lubricant", "lubricants", "lubrication", "lubrications", "lubricator", "lubricators", "lubricity", "lubritorium", "lubumbashi", "lucan", "lucarne", "lucarnes", "lucas", "lucca", "luce", "lucency", "lucerne", "lucernes", "luces", "lucia", "lucidity", "lucidness", "lucifer", "luciferase", "luciferin", "lucifers", "lucilius", "lucilla", "lucille", "lucina", "lucinda", "lucite", "lucius", "luck", "luckie", "luckies", "luckiness", "lucklessness", "lucknow", "lucks", "lucrativeness", "lucre", "lucretia", "lucretius", "lucubration", "lucubrations", "lucubrator", "lucubrators", "lucullus", "lucy", "lud", "luddism", "luddite", "luddites", "ludhiana", "ludicrousness", "ludlow", "ludo", "ludos", "ludovick", "luds", "ludwig", "ludwigshafen", "lues", "luff", "luffa", "luffas", "luffs", "luftwaffe", "lug", "luganda", "luge", "luger", "luges", "luggage", "lugger", "luggers", "luggie", "luggies", "luging", "lugings", "lugs", "lugsail", "lugsails", "lugubriousness", "lugworm", "lugworms", "luigi", "luing", "luke", "lukewarmness", "lukewarmth", "lull", "lullabies", "lullaby", "lulls", "lully", "lulu", "lulus", "lumbago", "lumbagos", "lumber", "lumberer", "lumberers", "lumbering", "lumberings", "lumberjacket", "lumberjackets", "lumberman", "lumbers", "lumbrical", "lumbricalis", "lumbricalises", "lumbricals", "lumen", "lumens", "luminal", "luminance", "luminances", "luminaries", "luminary", "luminescence", "luminosities", "luminosity", "luminousness", "lummox", "lummoxes", "lump", "lumpectomies", "lumpectomy", "lumper", "lumpers", "lumpfish", "lumpfishes", "lumpiness", "lumpishness", "lumps", "lumpsucker", "lumpsuckers", "luna", "lunacies", "lunacy", "lunarian", "lunarians", "lunas", "lunate", "lunatic", "lunatics", "lunation", "lunations", "lunch", "luncheon", "luncheonette", "luncheonettes", "luncheons", "luncher", "lunchers", "lunches", "lunching", "lunchroom", "lunchrooms", "lunchtime", "lunchtimes", "lund", "lune", "lunes", "lunette", "lunettes", "lung", "lunge", "lunges", "lungi", "lungies", "lungis", "lungs", "lungwort", "lungworts", "lunkhead", "lunkheads", "lunt", "lunts", "lunula", "lunulas", "lunule", "lunules", "luo", "luos", "lupercalia", "lupin", "lupine", "lupines", "lupins", "lupulin", "lupus", "lur", "lurch", "lurcher", "lurchers", "lurches", "lurdan", "lurdanes", "lurdans", "lure", "lures", "lurex", "luridness", "lurie", "lurk", "lurker", "lurkers", "lurks", "lurs", "lusaka", "lusatian", "lusatians", "lusciousness", "lush", "lushes", "lushness", "lusitania", "lusitanian", "lust", "luster", "lusters", "lusterware", "lustfulness", "lustihood", "lustiness", "lustration", "lustrations", "lustre", "lustres", "lustreware", "lustring", "lustrum", "lustrums", "lusts", "lutanist", "lutanists", "lute", "lutecium", "lutein", "luteinization", "luteinizations", "lutenist", "lutenists", "luteolin", "lutes", "lutestring", "lutestrings", "lutetia", "lutetium", "luther", "lutheran", "lutheranism", "lutherans", "lutherism", "luthern", "lutherns", "luting", "lutings", "lutist", "lutists", "luton", "lutoslawski", "lutyens", "lux", "luxation", "luxations", "luxe", "luxembourg", "luxes", "luxor", "luxulianite", "luxuriance", "luxuriation", "luxuriations", "luxuries", "luxuriousness", "luxury", "luzon", "lvov", "lyam hound", "lyam hounds", "lycanthrope", "lycanthropes", "lycanthropy", "lyceum", "lyceums", "lychee", "lychees", "lychgate", "lychgates", "lychnis", "lychnises", "lychnoscope", "lychnoscopes", "lycia", "lycidas", "lycopod", "lycopods", "lycurgus", "lyddite", "lydgate", "lydia", "lydian", "lye", "lyes", "lying", "lying in", "lyings", "lyly", "lyme hound", "lyme hounds", "lymington", "lymph", "lymphad", "lymphads", "lymphangitis", "lymphatic", "lymphocyte", "lymphocytes", "lymphoma", "lymphomas", "lymphs", "lyncher", "lynchers", "lynchet", "lynchets", "lynching", "lynchings", "lynchpin", "lynchpins", "lynda", "lynette", "lynn", "lynne", "lynx", "lynxes", "lyon", "lyonnais", "lyonnesse", "lyons", "lyophilization", "lyra", "lyre", "lyres", "lyric", "lyricism", "lyricisms", "lyricist", "lyricists", "lyrics", "lyrism", "lyrisms", "lyrist", "lyrists", "lysander", "lysenko", "lysenkoism", "lysimeter", "lysimeters", "lysin", "lysine", "lysins", "lysippus", "lysis", "lysistrata", "lysol", "lysosome", "lysosomes", "lysozyme", "lysozymes", "lyssa", "lytta", "lyttas", "lytton", "ma am", "maar", "maars", "maastricht", "mab", "mabel", "mac", "macaco", "macacos", "macadam", "macadamia", "macadamise", "macadamises", "macao", "macaque", "macaques", "macaroni", "macaronic", "macaronics", "macaronies", "macaronis", "macaroon", "macaroons", "macarthur", "macaulay", "macaw", "macaws", "macbeth", "maccabees", "macclesfield", "macdonald", "mace", "macedon", "macedonia", "macedonian", "macedonians", "macer", "maceration", "macerator", "macerators", "macers", "maces", "mach", "machan", "machans", "machete", "machetes", "machiavelli", "machiavellian", "machiavellianism", "machiavellism", "machicolation", "machicolations", "machination", "machinations", "machinator", "machinators", "machine", "machineries", "machinery", "machines", "machinist", "machinists", "machismo", "machmeter", "machmeters", "machree", "machtpolitik", "machzor", "macintosh", "macintoshes", "mack", "mackenzie", "mackerel", "mackerels", "mackinaw", "mackinaws", "mackintosh", "mackintoshes", "mackle", "mackles", "macks", "macle", "maclean", "macles", "macmillan", "macneice", "macon", "macro", "macrobiotics", "macrocephaly", "macrocosm", "macrocosms", "macrocyte", "macrocytes", "macrodome", "macrodomes", "macroeconomics", "macrogamete", "macrogametes", "macromolecule", "macromolecules", "macron", "macrons", "macrophage", "macrophages", "macropodidae", "macros", "macrosporangium", "macrospore", "macrospores", "macrozamia", "macs", "macula", "maculation", "maculations", "macule", "macules", "madagascan", "madagascans", "madagascar", "madam", "madame", "madams", "madcap", "madcaps", "madder", "madders", "madeira", "madeleine", "madeleines", "madeline", "mademoiselle", "mademoiselles", "madhouse", "madhouses", "madison", "madman", "madness", "madoc", "madonna", "madras", "madrases", "madrepore", "madrepores", "madreporite", "madrid", "madrigal", "madrigalist", "madrigalists", "madrigals", "madura", "madurai", "madwoman", "madwort", "madworts", "maeander", "maecenas", "maelstrom", "maelstroms", "maenad", "maenads", "maestoso", "maestro", "maestros", "maeterlinck", "maeve", "mafeking", "mafficker", "maffickers", "mafia", "mafioso", "mag", "magazine", "magazines", "magda", "magdalen", "magdalena", "magdalenian", "magdeburg", "mage", "magellan", "magenta", "magentas", "mages", "maggie", "maggot", "maggots", "maghreb", "magi", "magic", "magician", "magicians", "magics", "magilp", "magilps", "magisteries", "magistery", "magistracies", "magistracy", "magistral", "magistrate", "magistrates", "maglemosian", "magma", "magmas", "magnalium", "magnanimities", "magnanimity", "magnate", "magnates", "magnesia", "magnesias", "magnesite", "magnesium", "magnet", "magnetics", "magnetisation", "magnetisations", "magnetiser", "magnetisers", "magnetism", "magnetite", "magnetization", "magnetizations", "magnetizer", "magnetizers", "magneto", "magnetograph", "magnetographs", "magnetometer", "magnetometers", "magnetometry", "magneton", "magnetons", "magnetos", "magnetosphere", "magnetospheres", "magnetron", "magnetrons", "magnets", "magnificat", "magnification", "magnifications", "magnificats", "magnificence", "magnifico", "magnificoes", "magnifier", "magnifiers", "magniloquence", "magnitude", "magnitudes", "magnolia", "magnolias", "magnum", "magnums", "magnus", "magnusson", "magog", "magot", "magots", "magpie", "magpies", "magritte", "mags", "maguey", "magueys", "magus", "magyar", "magyars", "mah jongg", "maharaja", "maharajah", "maharajahs", "maharajas", "maharanee", "maharanees", "maharani", "maharanis", "maharashtra", "maharishi", "maharishis", "mahatma", "mahatmas", "mahayana", "mahdi", "mahdis", "mahdist", "mahican", "mahler", "mahlstick", "mahlsticks", "mahmud", "mahoe", "mahoes", "mahoganies", "mahogany", "mahomet", "mahometan", "mahonia", "mahonias", "mahound", "mahout", "mahouts", "mahratta", "mahratti", "mahseer", "mahseers", "mahua", "mahuas", "maia", "maid", "maidan", "maidans", "maiden", "maidenhair", "maidenhair tree", "maidenhairs", "maidenhead", "maidenheads", "maidenhood", "maidenliness", "maidens", "maidhood", "maids", "maidservant", "maidservants", "maidstone", "maiduguri", "maigre", "maigres", "mail", "mailboat", "mailboats", "mailcoach", "mailcoaches", "mailer", "mailers", "mailing", "mailings", "maillot", "maillots", "mailman", "mails", "mailsack", "mailsacks", "maim", "maimed", "maimedness", "maiming", "maimings", "maimonides", "maims", "main", "mainbrace", "mainbraces", "maine", "maine et loire", "mainframe", "mainframes", "mainland", "mainlander", "mainlanders", "mainlands", "mainliner", "mainliners", "mainmast", "mainmasts", "mains", "mainsail", "mainsails", "mainsheet", "mainsheets", "mainspring", "mainsprings", "mainstay", "mainstays", "mainstream", "mainstreams", "maintainer", "maintainers", "maintenance", "maintenances", "maintenon", "maintop", "maintops", "maintopsail", "maintopsails", "mainz", "maiolica", "mair", "maisie", "maisonette", "maisonettes", "maisonnette", "maisonnettes", "maize", "maizes", "majesties", "majesty", "majlis", "majolica", "major", "major domo", "major domos", "major general", "major generalcy", "major generals", "major generalship", "majorca", "majorcan", "majorcans", "majorette", "majorettes", "majorities", "majority", "majors", "majuscule", "majuscules", "make", "make believe", "make peace", "make ready", "make up", "makefast", "makefasts", "maker", "makers", "makes", "makeshift", "makeweight", "makeweights", "makimono", "makimonos", "making", "makings", "makkah", "mako", "makos", "mala", "malabo", "malacca", "malachi", "malachite", "malacia", "malacologist", "malacologists", "malacology", "malacopterygian", "malacostracan", "malacostracans", "maladaptation", "maladaptations", "maladdress", "maladies", "maladjustment", "maladjustments", "maladroitness", "malady", "malaga", "malagasy", "malaise", "malaises", "malamud", "malamute", "malamutes", "malanders", "malapert", "malapertness", "malapportionment", "malaprop", "malapropism", "malapropisms", "malapropos", "malar", "malaria", "malarias", "malarkey", "malars", "malassimilation", "malate", "malates", "malathion", "malawi", "malay", "malaya", "malayalam", "malayan", "malayans", "malays", "malaysia", "malcolm", "malcontent", "malcontentedness", "malcontents", "maldives", "maldon", "male", "maleate", "maleates", "malediction", "maledictions", "malefaction", "malefactor", "malefactors", "maleficence", "malemute", "malemutes", "maleness", "males", "malevich", "malevolence", "malfeasance", "malfeasances", "malfeasant", "malformation", "malformations", "malfunction", "malfunctions", "malherbe", "mali", "malice", "malices", "maliciousness", "malignance", "malignancy", "maligner", "maligners", "malignities", "malignity", "malignment", "malines", "malingerer", "malingerers", "malingering", "malinke", "malinkes", "malis", "malison", "malisons", "malkin", "malkins", "mall", "mallam", "mallams", "mallanders", "mallard", "mallards", "malleability", "malleableness", "malleation", "malleations", "mallee", "mallees", "mallemuck", "mallemucks", "mallenders", "malleolus", "mallet", "mallets", "malleus", "mallorca", "mallow", "mallows", "malls", "malm", "malmesbury", "malms", "malmsey", "malmseys", "malnourishment", "malnutrition", "malocclusion", "malodorousness", "malodour", "malodours", "malory", "malposition", "malpositions", "malpractice", "malpractices", "malpractitioner", "malraux", "malt", "malta", "maltase", "malted", "maltese", "maltha", "malthas", "malthus", "malthusian", "malthusianism", "malting", "maltings", "maltman", "maltose", "maltreatment", "malts", "maltster", "maltsters", "malva", "malvas", "malvasia", "malvern", "malversation", "malvoisie", "malvoisies", "mam", "mama", "mamas", "mamba", "mambas", "mambo", "mambos", "mamelon", "mamelons", "mameluke", "mamelukes", "mamilla", "mamma", "mammal", "mammalian", "mammalogist", "mammalogists", "mammalogy", "mammals", "mammas", "mammee", "mammees", "mammet", "mammets", "mammies", "mammilla", "mammillaria", "mammillarias", "mammock", "mammocks", "mammogram", "mammograms", "mammography", "mammon", "mammonism", "mammonist", "mammonists", "mammonite", "mammonites", "mammoth", "mammoths", "mammy", "mams", "mamzer", "mamzers", "man", "man at arms", "man child", "man day", "man days", "man eater", "man eaters", "man hour", "man hours", "man of war", "man year", "man years", "mana", "manacle", "manacles", "manage", "manageability", "manageableness", "management", "managements", "manager", "manageress", "manageresses", "managers", "managership", "managerships", "manages", "managing", "managua", "manakin", "manakins", "manama", "manas", "manasseh", "manatee", "manatees", "manaus", "manche", "manches", "manchester", "manchet", "manchets", "manchineel", "manchineels", "manchu", "manchuria", "manchurian", "manchurians", "manchus", "manciple", "manciples", "mancunian", "mancunians", "mandaean", "mandala", "mandalas", "mandalay", "mandamus", "mandamuses", "mandarin", "mandarines", "mandarins", "mandataries", "mandatary", "mandate", "mandates", "mandatories", "mandatory", "mande", "mandes", "mandeville", "mandible", "mandibles", "mandibulate", "mandilion", "mandilions", "mandingo", "mandingoes", "mandingos", "mandioc", "mandioca", "mandiocas", "mandiocs", "mandir", "mandirs", "mandola", "mandolas", "mandolin", "mandolines", "mandolins", "mandorla", "mandorlas", "mandragora", "mandrake", "mandrakes", "mandrel", "mandrels", "mandril", "mandrill", "mandrills", "mandrils", "manducation", "manducations", "mandy", "mane", "manes", "maneuver", "maneuverability", "maneuverer", "maneuvering", "maneuvers", "manfred", "manfulness", "mangabey", "mangabeys", "mangalore", "manganate", "manganates", "manganese", "manganite", "manganites", "mange", "mangel wurzel", "mangel wurzels", "manger", "mangers", "manginess", "mangle", "mangler", "manglers", "mangles", "mango", "mangoes", "mangold", "mangold wurzel", "mangold wurzels", "mangolds", "mangonel", "mangonels", "mangos", "mangosteen", "mangosteens", "mangrove", "mangroves", "manhattan", "manhattans", "manhole", "manholes", "manhood", "manhunt", "manhunts", "mania", "maniac", "maniacs", "manias", "manic", "manic depressive", "manic depressives", "manichaeanism", "manichaeism", "manichean", "manicheism", "manicure", "manicures", "manicurist", "manicurists", "manifest", "manifestation", "manifestations", "manifesto", "manifestoes", "manifestos", "manifests", "manifold", "manifolder", "manifolders", "manifoldness", "manifolds", "manikin", "manikins", "manila", "manilas", "manilla", "manillas", "manille", "manilles", "manioc", "maniocs", "maniple", "maniples", "manipulation", "manipulations", "manipulative", "manipulator", "manipulators", "manipur", "manitoba", "manitou", "manitous", "mankind", "manley", "manliness", "mann", "manna", "mannas", "mannequin", "mannequins", "manner", "mannerism", "mannerisms", "mannerist", "mannerists", "mannerliness", "manners", "mannheim", "mannikin", "mannikins", "mannishness", "mannitol", "mannose", "manoeuvre", "manoeuvres", "manometer", "manometers", "manor", "manors", "manpower", "mans", "mansard", "mansards", "mansart", "manse", "manservant", "manservants", "manses", "mansfield", "mansion", "mansions", "manslaughter", "manson", "mansuetude", "manta", "mantas", "manteau", "manteaus", "mantegna", "mantel", "mantelet", "mantelets", "mantelpiece", "mantelpieces", "mantels", "manteltree", "manteltrees", "manticora", "manticoras", "manticore", "manticores", "mantid", "mantids", "mantilla", "mantillas", "mantis", "mantises", "mantissa", "mantissas", "mantle", "mantles", "mantlet", "mantlets", "mantling", "mantova", "mantra", "mantrap", "mantraps", "mantras", "mantua", "mantuan", "mantuas", "manual", "manuals", "manubrium", "manuel", "manufactories", "manufactory", "manufacture", "manufacturer", "manufacturers", "manufactures", "manufacturing", "manuka", "manukas", "manul", "manuls", "manumission", "manumissions", "manure", "manures", "manus", "manuscript", "manuscripts", "manuses", "manx", "manxman", "many", "many sidedness", "manyplies", "manzanilla", "manzanillas", "manzanita", "manzanitas", "manzoni", "maoism", "maori", "maoris", "map", "map reader", "map readers", "maple", "maple leaf", "maples", "mapper", "mappers", "mapping", "mappings", "maps", "maputo", "maquette", "maquettes", "maqui", "maquiladora", "maquiladoras", "maquillage", "maquis", "mar", "mara", "marabou", "marabous", "marabout", "marabouts", "maraca", "maracaibo", "maracas", "maraes", "maras", "maraschino", "maraschinos", "marasmus", "marat", "maratha", "marathi", "marathon", "marathoner", "marathoners", "marathonian", "marathons", "maraud", "marauder", "marauders", "marauding", "marauds", "maravedi", "maravedis", "marble", "marbler", "marblers", "marbles", "marbling", "marblings", "marburg", "marc", "marcasite", "marceau", "marcel", "marcella", "marcelle", "marcellus", "marcels", "march", "marchantia", "marchantias", "marcher", "marchers", "marches", "marchesa", "marchesas", "marchese", "marcheses", "marching", "marchioness", "marchionesses", "marchland", "marchlands", "marchpane", "marcia", "marciano", "marcionite", "marconi", "marconigram", "marconigrams", "marconigraph", "marconigraphs", "marcos", "marcs", "marcus", "marduk", "mare", "mare s nest", "mare s nests", "mare s tail", "mare s tails", "maremma", "maremmas", "marengo", "mares", "marg", "margaret", "margarin", "margarine", "margarines", "margarins", "margarita", "margarite", "margate", "margaux", "margay", "margays", "marge", "margent", "margents", "margery", "margin", "marginality", "margins", "margo", "margosa", "margosas", "margot", "margravate", "margravates", "margrave", "margraves", "margravine", "margravines", "margs", "marguerite", "marguerites", "maria", "mariachi", "mariachis", "marialite", "marian", "mariana", "marianne", "mariculture", "marie", "marigold", "marigolds", "marigraph", "marigraphs", "marihuana", "marihuanas", "marijuana", "marijuanas", "marilyn", "marimba", "marimbas", "marina", "marinade", "marinades", "marinas", "marination", "marine", "mariner", "mariners", "marines", "marinetti", "mariolater", "mariolatry", "mariologist", "mariology", "marion", "marionette", "marionettes", "mariposa", "mariposas", "marist", "maritage", "maritsa", "marius", "marjoram", "marjorie", "marjory", "mark", "mark up", "mark ups", "marker", "markers", "market", "marketability", "marketableness", "marketer", "marketers", "marketing", "markets", "markhor", "markhors", "marking", "markings", "markka", "markkas", "markova", "marks", "marksman", "marksmanship", "markswoman", "marl", "marlborough", "marlene", "marles", "marley", "marlin", "marline", "marlines", "marlinespike", "marlinespikes", "marlins", "marlinspike", "marlinspikes", "marlite", "marlon", "marlow", "marlowe", "marls", "marmaduke", "marmalade", "marmalades", "marmion", "marmite", "marmites", "marmoset", "marmosets", "marmot", "marmots", "marne", "marocain", "maronite", "maroon", "maroons", "maroquin", "maror", "marors", "marque", "marquee", "marquees", "marques", "marquesan", "marquesans", "marquess", "marquessate", "marquessates", "marquesses", "marqueterie", "marquetries", "marquetry", "marquette", "marquis", "marquisate", "marquisates", "marquise", "marquises", "marquisette", "marrakech", "marrano", "marranos", "marriage", "marriageability", "marriageableness", "marriages", "married", "marrow", "marrowbone", "marrowbones", "marrowfat", "marrowfats", "marrows", "mars", "marsala", "marseillaise", "marseille", "marseilles", "marsh", "marsha", "marshal", "marshall", "marshals", "marshalsea", "marshalship", "marshalships", "marshes", "marshiness", "marshland", "marshlands", "marshmallow", "marshmallows", "marsipobranch", "marsipobranchs", "marsupial", "marsupialia", "marsupials", "marsupium", "mart", "martagon", "martagons", "martellato", "marten", "martens", "martensite", "martha", "martialism", "martialist", "martialists", "martialness", "martian", "martians", "martin", "martina", "martine", "martineau", "martinet", "martinets", "martingale", "martingales", "martini", "martinique", "martinis", "martinmas", "martins", "martinu", "martlet", "martlets", "marts", "martyn", "martyr", "martyrdom", "martyrdoms", "martyries", "martyrium", "martyrologist", "martyrologists", "martyrology", "martyrs", "martyry", "marvel", "marvel of peru", "marvell", "marvellousness", "marvels", "marver", "marvers", "marvin", "marx", "marxianism", "marxism", "marxist", "marxists", "mary", "maryland", "marzipan", "marzipans", "mas", "masa", "masaccio", "masai", "mascagni", "mascara", "mascaras", "mascaron", "mascarons", "mascle", "mascles", "mascon", "mascons", "mascot", "mascots", "masculine", "masculineness", "masculines", "masculinity", "masefield", "maser", "masers", "maseru", "mases", "mash", "masher", "mashers", "mashes", "mashhad", "mashie", "mashies", "mashona", "mashonas", "masjid", "masjids", "mask", "maskalonge", "maskalonges", "maskanonge", "maskanonges", "masker", "maskers", "masking", "maskinonge", "maskinonges", "masks", "maslin", "maslins", "masochism", "masochist", "masochists", "mason", "masonries", "masonry", "masons", "masora", "masorah", "masorete", "masque", "masquer", "masquerade", "masquerader", "masqueraders", "masquerades", "masquers", "masques", "mass", "massachuset", "massachusets", "massachusetts", "massacre", "massacres", "massage", "massages", "massagist", "massagists", "massasauga", "massasaugas", "massenet", "masses", "masseter", "masseters", "masseur", "masseurs", "masseuse", "masseuses", "massey", "massicot", "massif", "massifs", "massine", "massiness", "massinger", "massiveness", "massorah", "massorete", "mast", "mastaba", "mastabas", "mastectomies", "mastectomy", "master", "master at arms", "masterdom", "masterfulness", "masterhood", "masteries", "mastering", "masterings", "masterliness", "mastermind", "masterminds", "masterpiece", "masterpieces", "masters", "mastership", "masterships", "mastersinger", "mastersingers", "masterstroke", "masterstrokes", "mastery", "masthead", "mastheads", "mastic", "mastication", "mastications", "masticatory", "mastics", "mastiff", "mastiffs", "mastigophora", "mastigophoran", "mastigophorans", "mastitis", "mastodon", "mastodons", "mastoid", "mastoiditis", "mastoids", "masts", "masturbation", "masturbator", "masturbators", "masuria", "masurium", "mat", "matabele", "matabeleland", "matabeles", "matador", "matadores", "matadors", "matapan", "match", "matchboard", "matchboarding", "matchboards", "matchbook", "matchbooks", "matchbox", "matchboxes", "matcher", "matchers", "matches", "matchet", "matchets", "matchlessness", "matchlock", "matchlocks", "matchmaker", "matchmakers", "matchmaking", "matchmakings", "matchstick", "matchsticks", "matchwood", "mate", "matelot", "matelote", "matelotes", "matelots", "mater", "materfamilias", "materfamiliases", "material", "materialisation", "materialisations", "materialism", "materialist", "materialists", "materiality", "materialization", "materializations", "materialness", "materials", "maternities", "maternity", "maters", "mates", "matey", "mateyness", "math", "mathematician", "mathematicians", "mathematics", "mathilda", "maths", "matilda", "matildas", "matin", "matiness", "mating", "matins", "matisse", "matlo", "matlock", "matlos", "matoke", "matrass", "matrasses", "matriarch", "matriarchalism", "matriarchate", "matriarchates", "matriarchies", "matriarchs", "matriarchy", "matric", "matrices", "matricide", "matricides", "matrics", "matriculate", "matriculates", "matriculation", "matriculations", "matriculator", "matriculators", "matrimonies", "matrimony", "matrix", "matrixes", "matron", "matronage", "matronages", "matronhood", "matronhoods", "matrons", "matronship", "matronymic", "matronymics", "mats", "matsuyama", "matt", "mattamore", "mattamores", "matte", "matter", "matterhorn", "matters", "mattes", "matthew", "matthews", "matthias", "matting", "mattings", "mattins", "mattock", "mattocks", "mattoid", "mattoids", "mattress", "mattresses", "matty", "maturation", "maturations", "matureness", "maturer", "maturing", "maturities", "maturity", "matzah", "matzahs", "matzo", "matzoh", "matzoon", "matzoons", "matzos", "maud", "maude", "maudlinism", "mauds", "maugham", "maui", "maul", "mauler", "maulers", "mauls", "maulstick", "maulsticks", "maulvi", "maulvis", "maumet", "maumetry", "maumets", "maund", "maunderer", "maunderers", "maundies", "maunds", "maundy", "maupassant", "maureen", "mauretania", "mauretanian", "mauriac", "maurice", "maurist", "mauritania", "mauritanian", "mauritanians", "mauritius", "maurois", "maurya", "mauser", "mausoleum", "mausoleums", "mauve", "mauves", "maven", "mavens", "maverick", "mavericks", "mavin", "mavins", "mavis", "mavises", "mavourneen", "mavourneens", "maw", "mawkin", "mawkins", "mawkishness", "maws", "max", "maxilla", "maxillary", "maxilliped", "maxillipedes", "maxillipeds", "maxim", "maxima", "maximalist", "maximalists", "maximilian", "maximin", "maximisation", "maximisations", "maximization", "maximizations", "maxims", "maximum", "maxine", "maxisingle", "maxisingles", "maxixe", "maxixes", "maxwell", "maxwells", "may", "maya", "mayakovski", "mayan", "mayans", "mayas", "maybe", "mayday", "maydays", "mayenne", "mayer", "mayfair", "mayflies", "mayflower", "mayflowers", "mayfly", "mayhem", "mayn t", "maynard", "mayo", "mayonnaise", "mayonnaises", "mayor", "mayoralties", "mayoralty", "mayoress", "mayoresses", "mayors", "mayorship", "mayorships", "mayotte", "maypole", "maypoles", "mays", "mayweed", "mayweeds", "mazard", "mazards", "mazarin", "mazarine", "mazarines", "mazdaism", "maze", "mazer", "mazers", "mazes", "maziness", "mazuma", "mazurka", "mazurkas", "mazzard", "mazzards", "mazzini", "mbabane", "mbujimayi", "mccarthy", "mccarthyism", "mccartney", "mccormack", "mccoy", "mcgonagall", "mckinley", "mcluhan", "mcqueen", "mead", "meadow", "meadow brown", "meadows", "meads", "meagerness", "meagreness", "meal", "mealie", "mealies", "mealiness", "meals", "mealy mouthedness", "mean", "meander", "meanders", "meanes", "meanie", "meanies", "meaning", "meaningfulness", "meaninglessness", "meanings", "meanness", "means", "meantime", "meanwhile", "meanwhiles", "meany", "measles", "measurableness", "measure", "measurement", "measurements", "measurer", "measurers", "measures", "measuring", "measurings", "meat", "meathead", "meatiness", "meats", "meatus", "meatuses", "mecca", "meccano", "mechanic", "mechanical", "mechanicals", "mechanician", "mechanicians", "mechanics", "mechanisation", "mechanisations", "mechanism", "mechanisms", "mechanist", "mechanists", "mechanization", "mechanizations", "mechanomorphism", "mechlin", "mecklenburg", "meconium", "meconiums", "meconopsis", "med", "medaka", "medal", "medalist", "medalists", "medallion", "medallions", "medallist", "medallists", "medals", "medan", "medawar", "meddler", "meddlers", "meddlesomeness", "meddling", "mede", "medea", "medflies", "medfly", "media", "mediacy", "mediaevalism", "mediaevalist", "mediaevalists", "medial", "median", "medians", "mediant", "mediants", "mediastinum", "mediateness", "mediation", "mediations", "mediatisation", "mediatisations", "mediatization", "mediatizations", "mediator", "mediators", "mediatorship", "mediatory", "medic", "medicaid", "medical", "medicals", "medicament", "medicaments", "medicare", "medication", "medications", "medici", "medicinal", "medicine", "medicines", "medick", "medicks", "medico", "medicos", "medics", "medievalism", "medievalist", "medievalists", "medina", "medinas", "mediocrities", "mediocrity", "meditation", "meditations", "meditativeness", "meditator", "meditators", "mediterranean", "medium", "mediums", "medius", "mediuses", "medlar", "medlars", "medley", "medleys", "medulla", "medullas", "medusa", "medusan", "medusans", "medusas", "medusoid", "medway", "meed", "meeds", "meekness", "meerkat", "meerkats", "meerschaum", "meerschaums", "meet", "meeting", "meetings", "meetness", "meets", "meg", "megabit", "megabits", "megabuck", "megabucks", "megabyte", "megabytes", "megacities", "megacity", "megacycle", "megacycles", "megadeath", "megadeaths", "megaera", "megaflops", "megahertz", "megajoule", "megajoules", "megalith", "megaliths", "megaloblast", "megaloblasts", "megalomania", "megalomaniac", "megalomaniacs", "megalopolis", "megalopolitan", "megalosaur", "megalosaurs", "megalosaurus", "megalosauruses", "megan", "megaphone", "megaphones", "megapode", "megapodes", "megarad", "megarads", "megaron", "megarons", "megascope", "megascopes", "megasporangium", "megaspore", "megaspores", "megasporophyll", "megasporophylls", "megass", "megaton", "megatons", "megavolt", "megavolts", "megawatt", "megawatts", "megger", "meggers", "megillah", "megillahs", "megilp", "megilps", "megohm", "megohms", "megrim", "megrims", "meiji", "meinies", "meiny", "meionite", "meiosis", "meir", "meissen", "meistersinger", "meistersingers", "meitner", "mekhitarist", "mekhitarists", "mekong", "mel", "mela", "melamine", "melancholia", "melancholiac", "melancholiacs", "melancholic", "melancholics", "melancholy", "melanchthon", "melanesia", "melanesian", "melanesians", "melange", "melanges", "melanie", "melanin", "melanism", "melanite", "melanites", "melanocyte", "melanoma", "melanomas", "melanosis", "melaphyre", "melatonin", "melba", "melbourne", "melchior", "melchizedek", "meld", "melder", "melders", "melds", "meleager", "melia", "melilot", "melilots", "melinite", "meliorate", "meliorates", "melioration", "meliorations", "meliorator", "meliorators", "meliorism", "meliorist", "meliorists", "meliorities", "meliority", "melisma", "melismas", "melissa", "mell", "mellifluousness", "mellite", "mellophone", "mellophones", "mellowing", "mellowness", "mells", "melodeon", "melodeons", "melodics", "melodies", "melodion", "melodions", "melodiousness", "melodist", "melodists", "melodrama", "melodramas", "melodramatic", "melodramatics", "melodramatist", "melodramatists", "melody", "melon", "melons", "melos", "melpomene", "melrose", "mels", "melt", "melting", "meltingness", "meltings", "melton", "melts", "melville", "melvin", "melvyn", "member", "members", "membership", "memberships", "membrane", "membranes", "memento", "mementoes", "mementos", "memnon", "memo", "memoir", "memoirs", "memorabilia", "memorability", "memorableness", "memoranda", "memorandum", "memorandums", "memorial", "memorialist", "memorialists", "memorials", "memories", "memorization", "memorizations", "memory", "memos", "memphian", "memphis", "memphite", "men", "menace", "menacer", "menacers", "menaces", "menadione", "menage", "menagerie", "menageries", "menages", "menander", "menaquinone", "menarche", "menarches", "mencken", "mend", "mendacities", "mendacity", "mendel", "mendeleev", "mendelevium", "mendeleyev", "mendelism", "mendelssohn", "mender", "menders", "mendicancy", "mendicant", "mendicants", "mendicities", "mendicity", "mending", "mendings", "mendoza", "mends", "mene", "menelaus", "menes", "menhaden", "menhadens", "menhir", "menhirs", "menial", "menials", "meninges", "meningioma", "meningiomas", "meningitis", "meningocele", "meningococcus", "meninx", "meniscectomy", "meniscus", "meniscuses", "menispermum", "menispermums", "mennonite", "mennonites", "menology", "menomini", "menopause", "menorah", "menorahs", "menorca", "menorrhagia", "menorrhea", "menotti", "mensa", "mense", "menses", "menshevik", "mensheviks", "menshevism", "menstruation", "menstruum", "menstruums", "mensurability", "mensuration", "mensurations", "menswear", "mentalism", "mentalisms", "mentalist", "mentalists", "mentalities", "mentality", "mentation", "mentations", "menthol", "menticide", "menticides", "mention", "mentions", "mentor", "mentors", "mentorship", "mentum", "mentums", "menu", "menuhin", "menuisier", "menuisiers", "menus", "menyie", "menzies", "meow", "meows", "mepacrine", "meperidine", "mephistopheles", "mephitis", "meprobamate", "merc", "mercantilism", "mercaptan", "mercaptans", "mercaptide", "mercaptides", "mercator", "mercedes", "mercenaries", "mercenary", "mercer", "merceries", "mercerization", "mercerizations", "mercerizer", "mercerizers", "mercers", "mercery", "merchandise", "merchandiser", "merchandisers", "merchandises", "merchandising", "merchandisings", "merchant", "merchantman", "merchants", "merchet", "merchets", "mercia", "mercian", "mercies", "mercifulness", "mercilessness", "mercouri", "mercs", "mercurial", "mercurialism", "mercuries", "mercurous", "mercury", "mercy", "mere", "meredith", "merengue", "merengues", "meres", "merestone", "merestones", "meretriciousness", "merganser", "mergansers", "merger", "mergers", "merging", "mericarp", "mericarps", "meridian", "meridians", "meridional", "meridionals", "meringue", "meringues", "merino", "merinos", "merionethshire", "meristem", "meristems", "merit", "meritocracies", "meritocracy", "meritoriousness", "merits", "merk", "merkin", "merkins", "merks", "merl", "merle", "merles", "merlin", "merlins", "merlon", "merlons", "merls", "mermaid", "mermaids", "merman", "merogony", "meronym", "meronyms", "meronymy", "merops", "merovingian", "merozoite", "merozoites", "merriment", "merriments", "merriness", "merry andrew", "merry go round", "merry go rounds", "merrymaker", "merrymakers", "merrymaking", "merrymakings", "mersey", "merseyside", "merton", "meryl", "mesa", "mesas", "mescal", "mescaline", "mescals", "mesdames", "mesdemoiselles", "mesembryanthemum", "mesencephalon", "mesencephalons", "mesenchyme", "mesenteries", "mesenteron", "mesenterons", "mesentery", "mesh", "meshed", "meshes", "meshing", "meshings", "meshugaas", "mesmer", "mesmerisation", "mesmerisations", "mesmeriser", "mesmerisers", "mesmerism", "mesmerist", "mesmerists", "mesmerization", "mesmerizations", "mesmerizer", "mesmerizers", "mesoblast", "mesoblasts", "mesocarp", "mesocarps", "mesocephalic", "mesocephaly", "mesoderm", "mesoderms", "mesohippus", "mesolite", "mesolites", "mesolithic", "mesomorph", "mesomorphs", "mesomorphy", "meson", "mesons", "mesophyll", "mesophylls", "mesophyte", "mesophytes", "mesopotamia", "mesopotamian", "mesosphere", "mesothelioma", "mesotheliomas", "mesothelium", "mesothorax", "mesothoraxes", "mesotron", "mesozoic", "mesquit", "mesquite", "mesquites", "mesquits", "mess", "mess up", "mess ups", "message", "messages", "messalina", "messan", "messans", "messenger", "messengers", "messerschmitt", "messes", "messiaen", "messiah", "messidor", "messieurs", "messina", "messiness", "messmate", "messmates", "messrs", "messuage", "messuages", "mestee", "mestees", "mestizo", "mestizos", "meta", "metabolism", "metabolisms", "metabolite", "metabolites", "metacarpal", "metacarpals", "metacarpus", "metacarpuses", "metacentre", "metacentres", "metagalaxies", "metagalaxy", "metage", "metagenesis", "metages", "metal", "metalanguage", "metalanguages", "metalepsis", "metalinguistics", "metallisation", "metallisations", "metallist", "metallists", "metallization", "metallizations", "metallographer", "metallographers", "metallography", "metalloid", "metallophone", "metallophones", "metallurgist", "metallurgists", "metallurgy", "metals", "metamathematics", "metamer", "metamere", "metameres", "metamerism", "metamers", "metamorphism", "metamorphosis", "metaphase", "metaphases", "metaphor", "metaphors", "metaphosphate", "metaphosphates", "metaphrase", "metaphrases", "metaphrast", "metaphrasts", "metaphysic", "metaphysics", "metaplasia", "metaplasm", "metaplasms", "metapsychology", "metasequoia", "metasomatism", "metastability", "metastable", "metastasis", "metastasises", "metatarsal", "metatarsals", "metatarsus", "metatarsuses", "metathesis", "metathesise", "metathesises", "metathorax", "metathoraxes", "metazoa", "metazoan", "metazoans", "mete", "metempiricist", "metempiricists", "metempirics", "metempsychosis", "meteor", "meteorite", "meteorites", "meteoritics", "meteorograph", "meteorographs", "meteoroid", "meteoroids", "meteorologist", "meteorologists", "meteorology", "meteors", "meter", "meters", "metes", "methadon", "methadone", "methamphetamine", "methanal", "methane", "methanol", "methaqualone", "methedrine", "metheglin", "metheglins", "methionine", "metho", "method", "methodicalness", "methodism", "methodist", "methodists", "methodologies", "methodology", "methods", "methos", "methotrexate", "meths", "methuen", "methuselah", "methyl", "methylamine", "methylate", "methylates", "methylation", "methyldopa", "methylene", "methylenes", "methyltestosterone", "metic", "metical", "metics", "meticulousness", "metis", "metol", "metonym", "metonymies", "metonyms", "metonymy", "metope", "metopes", "metre", "metre kilogram second", "metre kilogram seconds", "metres", "metric", "metrication", "metrician", "metricians", "metrics", "metrification", "metrifications", "metrifier", "metrifiers", "metrist", "metrists", "metritis", "metro", "metrology", "metronome", "metronomes", "metronymic", "metronymics", "metropolis", "metropolises", "metropolitan", "metropolitans", "metrorrhagia", "metros", "metternich", "mettle", "mettles", "mettlesomeness", "metz", "meu", "meus", "meuse", "meuses", "mew", "mewl", "mewls", "mews", "mewses", "mexican", "mexicans", "mexico", "meyerbeer", "mezereon", "mezereons", "mezereum", "mezereums", "mezuza", "mezuzah", "mezuzahs", "mezuzas", "mezzanine", "mezzanines", "mezzo", "mezzo relievo", "mezzo rilievo", "mezzo soprano", "mezzo sopranos", "mezzos", "mezzotint", "mezzotints", "mho", "mhos", "mia", "miami", "miaou", "miaous", "miaow", "miaows", "miasma", "miasmas", "mica", "micah", "micas", "micawber", "mice", "micelle", "micelles", "michael", "michaela", "michaelmas", "michelangelo", "michelle", "michelozzo", "michelson", "micher", "michers", "michigan", "mick", "mickey", "mickeys", "mickies", "mickle", "mickles", "micks", "micky", "micmac", "micra", "microampere", "microamperes", "microanalysis", "microbalance", "microbalances", "microbar", "microbarograph", "microbars", "microbe", "microbes", "microbiologist", "microbiologists", "microbiology", "microcephaly", "microchemistry", "microchip", "microchips", "microcircuit", "microcircuits", "microclimate", "microclimates", "microclimatology", "microcline", "microclines", "micrococcus", "microcomputer", "microcomputers", "microcopies", "microcopy", "microcosm", "microcosms", "microcyte", "microcytes", "microdetector", "microdetectors", "microdissection", "microdot", "microdots", "microeconomics", "microelectronics", "microenvironment", "microfarad", "microfarads", "microfiche", "microfiches", "microfilm", "microfilms", "microfossil", "microfossils", "microgamete", "microgametes", "microgram", "micrograms", "micrograph", "micrographer", "micrographers", "micrographs", "micrography", "microgroove", "microgrooves", "microhabitat", "microhenries", "microhenry", "microhm", "microhms", "microlite", "microlites", "microlith", "microliths", "micrologist", "micrologists", "microlux", "microluxes", "micrometer", "micrometers", "micrometre", "micrometres", "micrometry", "micromillimetre", "microminiaturization", "micron", "micronesia", "micronesian", "micronesians", "microns", "micronutrient", "micronutrients", "micropalaeontology", "microphone", "microphones", "microphotograph", "microphotography", "microphysics", "microphyte", "microphytes", "microprint", "microprints", "microprocessor", "microprocessors", "micropsia", "micropyle", "micropyles", "micros", "microscope", "microscopes", "microscopist", "microscopists", "microscopium", "microscopy", "microsecond", "microseconds", "microseism", "microseisms", "microsome", "microsomes", "microsporangium", "microspore", "microspores", "microsporophyll", "microstructure", "microstructures", "microsurgery", "microswitch", "microswitches", "microtome", "microtomes", "microtomies", "microtomist", "microtomists", "microtomy", "microtonality", "microtone", "microtones", "microtubule", "microtubules", "microwatt", "microwatts", "microwave", "microwaves", "micrurgy", "micturition", "micturitions", "mid", "mid off", "mid on", "mid victorian", "mid wicket", "midas", "midday", "middays", "midden", "middens", "middies", "middle", "middle distance", "middle of the roader", "middle of the roaders", "middlebreaker", "middlebrow", "middlebrows", "middleman", "middlemarch", "middles", "middlesbrough", "middlesex", "middleton", "middleweight", "middleweights", "middling", "middy", "mideast", "midfield", "midfields", "midgard", "midge", "midges", "midget", "midgets", "midi", "midian", "midinette", "midinettes", "midiron", "midirons", "midis", "midland", "midlands", "midlothian", "midnight", "midnights", "midnoon", "midnoons", "midpoint", "midpoints", "midrib", "midribs", "midriff", "midriffs", "mids", "midship", "midshipman", "midships", "midst", "midstream", "midstreams", "midsts", "midsummer", "midsummers", "midtown", "midway", "midways", "midwest", "midwesterner", "midwesterners", "midwife", "midwifery", "midwifes", "mien", "miens", "miff", "miffs", "might", "might have been", "might have beens", "mightiness", "mights", "mighty", "mignonette", "mignonettes", "migraine", "migraines", "migrant", "migrants", "migration", "migrations", "miguel", "mihrab", "mihrabs", "mikado", "mikados", "mike", "mikes", "mikron", "mikrons", "mil", "miladies", "milady", "milage", "milages", "milan", "milanese", "milano", "milch", "mild", "mildew", "mildews", "mildness", "mildred", "milds", "mile", "mileage", "mileages", "mileometer", "mileometers", "milepost", "mileposts", "miler", "milers", "miles", "milesian", "milestone", "milestones", "miletus", "milfoil", "milfoils", "milhaud", "miliaria", "milieu", "milieus", "militancies", "militancy", "militant", "militants", "militaries", "militarisation", "militarism", "militarist", "militarists", "militarization", "military", "militia", "militiaman", "militias", "milk", "milker", "milkers", "milkfish", "milkfishes", "milkiness", "milkmaid", "milkmaids", "milkman", "milko", "milkos", "milks", "milkwood", "milkwoods", "milkwort", "milkworts", "mill", "mill girl", "mill girls", "mill hand", "mill hands", "millais", "millay", "milldam", "milldams", "millefeuille", "millefeuilles", "millefiori", "millefleurs", "millenarian", "millenarianism", "millenarians", "millenaries", "millenary", "millennium", "millenniums", "millepede", "millepedes", "millepore", "millepores", "miller", "miller s thumb", "millerite", "millers", "millet", "millets", "milliammeter", "milliammeters", "milliampere", "milliamperes", "millian", "milliard", "milliards", "milliare", "milliares", "millibar", "millibars", "millicent", "millie", "milligan", "milligram", "milligrams", "millikan", "millilitre", "millilitres", "millime", "millimes", "millimetre", "millimetres", "millimole", "millimoles", "milliner", "milliners", "millinery", "milling", "millings", "million", "millionaire", "millionaires", "millionairess", "millionairesses", "millions", "millionth", "millionths", "milliped", "millipede", "millipedes", "millipeds", "millirem", "millirems", "millisecond", "milliseconds", "millpond", "millponds", "millrace", "millraces", "millrind", "millrun", "millruns", "mills", "millstone", "millstones", "millwright", "millwrights", "milne", "milo", "milometer", "milometers", "milord", "milords", "milos", "milreis", "milreises", "mils", "milstein", "milt", "milter", "milters", "miltiades", "milton", "miltonia", "miltonias", "milts", "milwaukee", "mimas", "mimbar", "mimbars", "mime", "mimeograph", "mimeographs", "mimer", "mimers", "mimes", "mimesis", "mimetite", "mimi", "mimic", "mimicker", "mimickers", "mimicries", "mimicry", "mimics", "mimosa", "mimosas", "mina", "minaret", "minarets", "minas", "mince", "mincemeat", "mincemeats", "mincer", "mincers", "minces", "mind", "mind reader", "mind readers", "mind your own business", "mindanao", "mindel", "minder", "minders", "mindfulness", "mindlessness", "mindoro", "minds", "mine", "miner", "mineral", "mineralizer", "mineralogist", "mineralogists", "mineralogy", "minerals", "miners", "minerva", "mines", "minestrone", "minestrones", "mineworker", "mineworkers", "mingle mangle", "minglement", "minglements", "mingler", "minglers", "mingling", "minglings", "mingus", "mini", "miniature", "miniatures", "miniaturisation", "miniaturist", "miniaturists", "miniaturization", "minibar", "minibars", "minibike", "minibikes", "minibus", "minibuses", "minicab", "minicabs", "minicam", "minicams", "minicomputer", "minicomputers", "minidress", "minidresses", "minikin", "minikins", "minim", "minima", "minimalist", "minimalists", "minimax", "minimaxes", "minimisation", "minimisations", "minimization", "minimizations", "minims", "minimum", "mining", "minings", "minion", "minions", "minipill", "minipills", "minis", "miniskirt", "miniskirts", "minister", "ministerialist", "ministerialists", "ministerium", "ministers", "ministrant", "ministrants", "ministration", "ministrations", "ministries", "ministry", "minitrack", "minium", "miniums", "miniver", "minivers", "minivet", "minivets", "mink", "minkes", "minks", "minneapolis", "minnesota", "minnie", "minnies", "minnow", "minnows", "minoan", "minor", "minorca", "minorities", "minority", "minors", "minos", "minotaur", "minsk", "minster", "minsters", "minstrel", "minstrels", "minstrelsy", "mint", "mintage", "mintages", "minter", "minters", "minton", "mints", "minuend", "minuends", "minuet", "minuets", "minus", "minuscule", "minuscules", "minuses", "minute", "minuteman", "minuteness", "minutes", "minutia", "minx", "minxes", "minyan", "minyans", "miocene", "miombo", "miombos", "miosis", "miotic", "mir", "mira", "mirabeau", "mirabilis", "miracidium", "miracle", "miracles", "miraculousness", "mirador", "miradors", "mirage", "mirages", "miranda", "mire", "mirepoix", "mires", "miri", "miriam", "miriness", "mirk", "mirliton", "mirlitons", "mirror", "mirror writing", "mirrors", "mirs", "mirth", "mirthfulness", "mirthlessness", "mis", "misadventure", "misadventures", "misaim", "misaims", "misalignment", "misalliance", "misalliances", "misallotment", "misallotments", "misanthrope", "misanthropes", "misanthropy", "misapplication", "misapplications", "misapprehension", "misapprehensions", "misapprehensiveness", "misappropriation", "misappropriations", "misarrangement", "misarrangements", "misbehaviour", "misbehaviours", "misbelief", "misbeliefs", "misbeliever", "misbelievers", "miscalculation", "miscalculations", "miscarriage", "miscarriages", "miscegenation", "miscegenations", "miscellanea", "miscellanies", "miscellanist", "miscellanists", "miscellany", "mischance", "mischances", "mischief", "mischief maker", "mischief makers", "mischief making", "mischiefs", "mischievousness", "misclassification", "miscomputation", "miscomputations", "misconception", "misconceptions", "misconduct", "misconducts", "misconstruction", "misconstructions", "miscount", "miscounts", "miscreance", "miscreances", "miscreancies", "miscreancy", "miscreant", "miscreants", "miscreation", "miscreations", "miscreator", "miscreators", "miscue", "miscues", "misdate", "misdates", "misdating", "misdeal", "misdeals", "misdeed", "misdeeds", "misdemeanant", "misdemeanants", "misdemeanor", "misdemeanors", "misdemeanour", "misdemeanours", "misdirection", "misdirections", "misdoer", "misdoers", "misdoing", "misdoings", "mise", "misease", "miseducation", "miser", "miserableness", "miserere", "misericord", "misericordes", "misericords", "miseries", "miserliness", "misers", "misery", "mises", "misestimate", "misestimates", "misfeasance", "misfeasances", "misfeasor", "misfeasors", "misfeature", "misfeatures", "misfire", "misfires", "misfit", "misfits", "misformation", "misformations", "misfortune", "misfortunes", "misgiving", "misgivings", "misgovernment", "misguidance", "misguidances", "misguider", "misguiders", "mishanter", "mishanters", "mishap", "mishaps", "mishit", "mishits", "mishmash", "mishmashes", "mishnah", "misidentification", "misidentifications", "misinformant", "misinformants", "misinformation", "misinformer", "misinformers", "misinstruction", "misinterpretation", "misinterpretations", "misinterpreter", "misinterpreters", "misjoinder", "misjoinders", "misknowledge", "misleader", "misleaders", "mislike", "misliker", "mislikers", "mislikes", "mismanagement", "mismarriage", "mismarriages", "mismatch", "mismatches", "misnomer", "misnomers", "miso", "misogamist", "misogamists", "misogamy", "misogynist", "misogynists", "misogyny", "misologist", "misologists", "misology", "misoneism", "misos", "mispickel", "misplacement", "misplacements", "misplay", "misplays", "mispleading", "mispleadings", "misprint", "misprints", "misprision", "misprisions", "mispronunciation", "mispronunciations", "misproportion", "mispunctuation", "mispunctuations", "misquotation", "misquotations", "misreading", "misreadings", "misreckon", "misreckoning", "misreckonings", "misreckons", "misreport", "misreports", "misrepresentation", "misrepresentations", "misrule", "misrules", "miss", "missa", "missal", "missals", "misses", "misshape", "misshapenness", "misshapes", "missies", "missile", "missileries", "missilery", "missiles", "mission", "missionaries", "missionary", "missioner", "missioners", "missions", "missis", "missises", "mississauga", "mississippi", "mississippian", "mississippians", "missive", "missives", "missolonghi", "missouri", "misspelling", "misspellings", "misstatement", "misstatements", "misstep", "missteps", "missus", "missuses", "missy", "mist", "mistake", "mistakenness", "mistakes", "mistaking", "mister", "misters", "mistigris", "mistiming", "mistiness", "mistletoe", "mistletoes", "mistral", "mistrals", "mistranslation", "mistranslations", "mistreatment", "mistress", "mistresses", "mistrial", "mistrials", "mistrust", "mistrustfulness", "mistrusts", "mists", "misunderstanding", "misunderstandings", "misusage", "misuse", "misuser", "misusers", "misuses", "misventure", "misventures", "mitchell", "mite", "miter", "miters", "mites", "mitford", "mither", "mithers", "mithraeum", "mithraism", "mithras", "mithridate", "mithridates", "mithridatism", "miticide", "mitigation", "mitigations", "mitigator", "mitigators", "mitochondrion", "mitosis", "mitrailleuse", "mitrailleuses", "mitre", "mitres", "mitt", "mitten", "mittens", "mitterrand", "mittimus", "mittimuses", "mitts", "mitzvah", "mitzvahs", "mix", "mix up", "mix ups", "mixedness", "mixer", "mixers", "mixes", "mixing", "mixture", "mixtures", "mizar", "mizen", "mizens", "mizoram", "mizzen", "mizzens", "mizzle", "mizzles", "mneme", "mnemes", "mnemonic", "mnemonics", "mnemosyne", "moa", "moab", "moan", "moaner", "moaners", "moans", "moas", "moat", "moats", "mob", "mobile", "mobiles", "mobilisation", "mobilisations", "mobiliser", "mobilisers", "mobilities", "mobility", "mobilization", "mobilizations", "mobilizer", "mobilizers", "mobocracies", "mobocracy", "mobocrat", "mobocrats", "mobs", "mobster", "mobsters", "mobutu", "mocassin", "mocassins", "moccasin", "moccasins", "mocha", "mock", "mock heroic", "mock up", "mock ups", "mocker", "mockeries", "mockers", "mockery", "mockingbird", "mockingbirds", "mocks", "mod", "modalities", "modality", "mode", "model", "modeler", "modelers", "modeling", "modelings", "modeller", "modellers", "modelling", "modellings", "models", "modem", "modems", "moderate", "moderateness", "moderates", "moderation", "moderations", "moderatism", "moderator", "moderators", "moderatorship", "moderatorships", "modern", "modernisation", "modernisations", "moderniser", "modernisers", "modernism", "modernisms", "modernist", "modernists", "modernities", "modernity", "modernization", "modernizations", "modernizer", "modernizers", "modernizing", "modernness", "moderns", "modes", "modesties", "modesty", "modicum", "modicums", "modification", "modifications", "modifier", "modifiers", "modigliani", "modillion", "modillions", "modiolus", "modishness", "modiste", "modistes", "modred", "mods", "modularity", "modulation", "modulations", "modulator", "modulators", "module", "modules", "modulus", "mofette", "mofettes", "mog", "mogs", "mogul", "moguls", "mohair", "mohairs", "mohammedan", "mohammedanism", "mohammedans", "moharram", "mohave", "mohawk", "mohawks", "mohel", "mohels", "mohican", "mohicans", "moho", "mohock", "mohocks", "moholy nagy", "mohur", "mohurs", "moidore", "moidores", "moieties", "moiety", "moil", "moiler", "moilers", "moils", "moira", "moire", "moires", "moistener", "moisteners", "moistening", "moistness", "moisture", "moistures", "moit", "moits", "mojave", "moke", "mokes", "mol", "mola", "molalities", "molality", "molar", "molarities", "molarity", "molars", "molas", "molasses", "mold", "moldavia", "molder", "molders", "moldiness", "molding", "moldings", "molds", "moldwarp", "moldwarps", "mole", "molech", "molecularity", "molecule", "molecules", "moles", "moleskin", "moleskins", "molestation", "molestations", "molester", "molesters", "molies", "molinism", "molinist", "moll", "mollah", "mollahs", "mollie", "mollies", "mollification", "mollifications", "mollifier", "mollifiers", "molls", "mollusc", "molluscs", "mollusk", "mollusks", "molly", "mollycoddle", "mollycoddles", "moloch", "molochs", "molotov", "molt", "molting", "molts", "moly", "molybdate", "molybdates", "molybdenite", "molybdenum", "mom", "mombasa", "mome", "moment", "momentariness", "momentousness", "moments", "momentum", "momes", "momma", "mommas", "mommies", "mommy", "moms", "momus", "mon", "mon khmer", "mona", "monachal", "monacid", "monaco", "monad", "monadism", "monadnock", "monadnocks", "monads", "monaghan", "monal", "monals", "monandry", "monarch", "monarchian", "monarchies", "monarchism", "monarchist", "monarchists", "monarchs", "monarchy", "monarda", "monardas", "monas", "monases", "monasteries", "monastery", "monastic", "monasticism", "monaul", "monauls", "monazite", "monck", "monday", "mondays", "mondo", "mondrian", "monegasque", "monegasques", "monera", "monergism", "moneron", "monerons", "monet", "monetarism", "monetarist", "monetarists", "monetisation", "monetisations", "monetise", "monetises", "monetization", "monetizations", "money", "money spinner", "money spinners", "moneyer", "moneyers", "moneyman", "moneys", "moneywort", "moneyworts", "mong", "monger", "mongers", "mongo", "mongoes", "mongol", "mongolia", "mongolian", "mongolians", "mongolic", "mongolism", "mongoloid", "mongoloids", "mongols", "mongoose", "mongooses", "mongos", "mongrel", "mongrelism", "mongrels", "mongs", "monica", "monies", "moniker", "monikers", "monilia", "monilias", "moniliasis", "monism", "monisms", "monist", "monists", "monition", "monitions", "monitor", "monitoring", "monitors", "monitorship", "monitorships", "monitory", "monitress", "monitresses", "monk", "monkery", "monkey", "monkeypod", "monkeys", "monkhood", "monks", "monkshood", "monkshoods", "monmouth", "monmouthshire", "mono", "monoacid", "monoacids", "monoamine", "monoamines", "monocarp", "monocarps", "monochasium", "monochord", "monochords", "monochromat", "monochromates", "monochromatic", "monochromatism", "monochromats", "monochrome", "monochromes", "monochromist", "monochromists", "monochromy", "monocle", "monocles", "monoclinal", "monocline", "monoclines", "monocoque", "monocoques", "monocot", "monocots", "monocotyledon", "monocotyledons", "monocracies", "monocracy", "monoculture", "monocultures", "monocycle", "monocycles", "monocyte", "monodies", "monodrama", "monodramas", "monody", "monoecism", "monofilament", "monofilaments", "monogamist", "monogamists", "monogamy", "monogenesis", "monogenism", "monogenist", "monogenists", "monogram", "monograms", "monograph", "monographer", "monographers", "monographist", "monographists", "monographs", "monogynies", "monogyny", "monohull", "monohulls", "monohybrid", "monohybrids", "monokini", "monokinis", "monolater", "monolaters", "monolatries", "monolatry", "monolayer", "monolayers", "monolith", "monoliths", "monologist", "monologists", "monologue", "monologues", "monomania", "monomaniac", "monomaniacs", "monomanias", "monomark", "monomarks", "monomer", "monomers", "monometallism", "monometer", "monometers", "monomial", "monomials", "mononucleosis", "monophobia", "monophony", "monophthong", "monophthongs", "monoplane", "monoplanes", "monoplegia", "monopode", "monopodes", "monopodium", "monopodiums", "monopolies", "monopolisation", "monopolisations", "monopoliser", "monopolisers", "monopolist", "monopolists", "monopolization", "monopolizations", "monopolizer", "monopolizers", "monopoly", "monopsonies", "monopsony", "monopteron", "monopterons", "monopteros", "monopteroses", "monorail", "monorails", "monorhyme", "monorhymes", "monos", "monosaccharide", "monosaccharides", "monostich", "monostichs", "monostrophic", "monostrophics", "monosyllabism", "monosyllable", "monosyllables", "monotheism", "monotheist", "monotheists", "monotint", "monotints", "monotone", "monotones", "monotonies", "monotonousness", "monotony", "monotremata", "monotreme", "monotremes", "monotype", "monotypes", "monovalence", "monovalency", "monoxide", "monoxides", "monroe", "monrovia", "mons", "monseigneur", "monsieur", "monsignor", "monsignors", "monsoon", "monsoons", "monster", "monsters", "monstrance", "monstrances", "monstrosities", "monstrosity", "monstrousness", "mont saint michel", "montage", "montages", "montagnard", "montagnards", "montague", "montaigne", "montana", "montbretia", "montbretias", "monte", "monteith", "monteiths", "montenegro", "monterey", "montero", "monteros", "monterrey", "montes", "montesquieu", "montessori", "monteux", "monteverdi", "montevideo", "montgolfier", "montgolfiers", "montgomery", "montgomeryshire", "month", "monthlies", "monthly", "months", "monticule", "monticules", "montmartre", "montparnasse", "montpelier", "montpellier", "montreal", "montreux", "montrose", "montserrat", "monty", "monument", "monuments", "mony", "monza", "monzonite", "moo", "moo cow", "moo cows", "moocher", "moochers", "mood", "moodiness", "moods", "moolah", "moolahs", "moolvie", "moolvies", "moon", "moonbeam", "moonbeams", "mooncalf", "moonflower", "moonflowers", "moonlight", "moonlighting", "moonlights", "moonquake", "moonquakes", "moonraker", "moonrakers", "moonrise", "moonrises", "moons", "moonscape", "moonscapes", "moonseed", "moonseeds", "moonset", "moonsets", "moonshine", "moonshiner", "moonshiners", "moonshines", "moonshot", "moonshots", "moonstone", "moonstones", "moonwalk", "moonwalks", "moonwort", "moonworts", "moor", "moorage", "moorages", "moorcock", "moorcocks", "moore", "moorfowl", "moorfowls", "moorhen", "moorhens", "mooring", "moorings", "moorish", "moorland", "moorlands", "moors", "moos", "moose", "moot", "mooter", "mooters", "moots", "mop", "mop up", "mopboard", "mope", "moped", "mopeds", "moper", "mopers", "mopes", "mopoke", "mopokes", "moppet", "moppets", "mopping", "mops", "moquette", "moquettes", "mor", "mora", "moraine", "moraines", "moral", "morale", "morales", "moralism", "moralist", "moralists", "moralities", "morality", "moralizing", "morals", "moras", "morass", "morasses", "moratorium", "moratoriums", "moravia", "moravian", "moray", "morays", "morbidities", "morbidity", "morbidness", "morbihan", "morbilli", "morceau", "mordacities", "mordacity", "mordancy", "mordant", "mordants", "mordecai", "mordent", "mordents", "mordred", "mordvin", "mordvins", "more", "moreau", "morecambe", "moreen", "morel", "morelia", "morello", "morellos", "morels", "mores", "moresco", "morescoes", "moresque", "moresques", "morgan", "morganite", "morgans", "morgen", "morgens", "morgue", "morgues", "moriarty", "moribundity", "morion", "morions", "morisco", "moriscoes", "moriscos", "morley", "mormon", "mormonism", "mormons", "morn", "mornes", "morning", "morning glories", "morning glory", "mornings", "morns", "moro", "moroccan", "moroccans", "morocco", "moroccos", "moron", "moroni", "morons", "moros", "moroseness", "morosity", "morph", "morphallaxis", "morpheme", "morphemes", "morpheus", "morphia", "morphine", "morphinism", "morphogenesis", "morphologist", "morphologists", "morphology", "morphophoneme", "morphophonemes", "morphophonemics", "morphosis", "morphs", "morrison", "morro", "morros", "morrow", "morrows", "mors", "morse", "morsel", "morsels", "morses", "mort", "mortal", "mortalities", "mortality", "mortals", "mortar", "mortars", "mortgage", "mortgagee", "mortgagees", "mortgages", "mortgagor", "mortgagors", "mortice", "mortices", "mortician", "morticians", "mortification", "mortifications", "mortifier", "mortifiers", "mortimer", "mortise", "mortiser", "mortisers", "mortises", "mortling", "mortlings", "mortmain", "mortmains", "morton", "morts", "mortuaries", "mortuary", "morula", "morulas", "morven", "morwong", "morwongs", "mosaic", "mosaicism", "mosaicisms", "mosaicist", "mosaicists", "mosaics", "mosasaur", "mosasaurs", "moschatel", "moschatels", "moscow", "mosel", "moselle", "moselles", "moses", "moshav", "moskva", "moslem", "moslemism", "mosotho", "mosothos", "mosque", "mosques", "mosquito", "mosquitoes", "mosquitos", "moss", "mossbunker", "mossbunkers", "mosses", "mossi", "mossie", "mossies", "mossiness", "mossis", "most", "mosul", "mot", "mote", "motel", "motels", "motes", "motet", "motets", "moth", "mother", "mother in law", "mother of pearl", "mother of thousands", "motherhood", "mothering", "motherings", "motherland", "motherlands", "motherliness", "mothers", "motherwell", "motherwort", "motherworts", "moths", "motif", "motifs", "motile", "motiles", "motility", "motion", "motionlessness", "motions", "motivation", "motivations", "motive", "motivelessness", "motives", "motivity", "motley", "motmot", "motmots", "motocross", "motor", "motorbicycle", "motorbicycles", "motorcade", "motorcades", "motorcycle", "motorcycles", "motorcycling", "motoring", "motorisation", "motorisations", "motorist", "motorists", "motorization", "motorizations", "motorman", "motors", "motorway", "motorways", "motown", "motte", "mottes", "mottle", "mottles", "mottling", "mottlings", "motto", "mottoes", "mottos", "motu", "motus", "moue", "moues", "moufflon", "moufflons", "mouflon", "mouflons", "moujik", "moujiks", "moulage", "mould", "moulder", "moulders", "mouldiness", "moulding", "mouldings", "moulds", "mouldwarp", "mouldwarps", "mouldy", "moulin", "moulins", "moult", "moulting", "moultings", "moults", "mound", "mound builder", "mounding", "mounds", "mount", "mountain", "mountaineer", "mountaineering", "mountaineers", "mountains", "mountainside", "mountainsides", "mountbatten", "mountebank", "mountebanks", "mounter", "mounters", "mountie", "mounties", "mounting", "mounting block", "mounting blocks", "mountings", "mounts", "mourner", "mourners", "mournfulness", "mourning", "mournings", "mouse", "mouse dun", "mouse ear", "mouser", "mousers", "mousiness", "mousing", "mousings", "moussaka", "moussakas", "mousse", "mousseline", "mousselines", "mousses", "moussorgsky", "moustache", "moustaches", "mousterian", "mouth", "mouthful", "mouthfuls", "mouthpiece", "mouthpieces", "mouths", "mouthwash", "mouthwashes", "mouton", "moutons", "movability", "movable", "movableness", "movables", "move", "moveability", "moveable", "moveableness", "moveables", "movelessness", "movement", "movements", "mover", "movers", "moves", "movie", "moviegoer", "moviegoers", "movieland", "moviemaker", "moviemakers", "movies", "movietone", "moving", "moviola", "moviolas", "mow", "mower", "mowers", "mowing", "mowings", "mows", "moxa", "moxas", "moxie", "mozambican", "mozambique", "mozarab", "mozart", "mozzarella", "mozzarellas", "mozzetta", "mozzettas", "mridang", "mridangs", "mrs", "much", "muchness", "mucigen", "mucilage", "mucilages", "mucin", "mucins", "muck", "mucker", "muckers", "muckle", "muckles", "mucks", "mucluc", "muclucs", "mucor", "mucosa", "mucosity", "mucro", "mucros", "mucus", "mucuses", "mud", "mudcat", "mudcats", "muddies", "muddiness", "muddle", "muddlehead", "muddleheads", "muddler", "muddlers", "muddles", "muddy", "mudir", "mudlark", "mudlarks", "mudpack", "mudpacks", "mudra", "mudras", "muds", "mudslide", "mudslides", "mudstone", "mudstones", "muenster", "muesli", "mueslis", "muezzin", "muezzins", "muff", "muffin", "muffineer", "muffineers", "muffins", "muffle", "muffler", "mufflers", "muffles", "muffs", "mufti", "muftis", "mug", "mugabe", "mugful", "mugfuls", "muggee", "muggees", "mugger", "muggers", "mugginess", "mugging", "muggings", "muggins", "mugginses", "mugs", "mugwort", "mugworts", "mugwump", "mugwumpery", "mugwumps", "muhammad", "muhammadan", "muhammadans", "muharram", "mujik", "mujiks", "mukluk", "mukluks", "mulatto", "mulattoes", "mulattos", "mulberries", "mulberry", "mulch", "mulches", "mulciber", "mulct", "mulcting", "mulcts", "muldoon", "mule", "mules", "muleteer", "muleteers", "muley", "muleys", "mulga", "mulgas", "mulhouse", "muliebrity", "mulishness", "mull", "mullah", "mullahs", "mullein", "mulleins", "muller", "mullers", "mullet", "mullets", "mulligan", "mulligans", "mulligatawnies", "mulligatawny", "mulligrubs", "mullion", "mullions", "mullock", "mulloway", "mulls", "multan", "multeities", "multeity", "multichannel", "multicuspid", "multicuspids", "multifariousness", "multifoil", "multigravida", "multigravidas", "multihull", "multihulls", "multimedia", "multimeter", "multimeters", "multimillionaire", "multimillionaires", "multinomial", "multinomials", "multipara", "multiparas", "multiped", "multipedes", "multipeds", "multiplane", "multiplanes", "multiple", "multiplepoinding", "multiples", "multiplet", "multiplets", "multiplex", "multiplexer", "multiplexers", "multiplexes", "multiplicand", "multiplicands", "multiplication", "multiplications", "multiplicities", "multiplicity", "multiplier", "multipliers", "multiprocessor", "multiprocessors", "multiprogramming", "multiracialism", "multistorey", "multitude", "multitudes", "multitudinousness", "multivalence", "multivalences", "multiversities", "multiversity", "multivibrator", "multivibrators", "multure", "multures", "mum", "mumble", "mumbler", "mumblers", "mumbles", "mumbling", "mumblings", "mummer", "mummeries", "mummers", "mummery", "mummies", "mummification", "mummifications", "mummy", "mumps", "mums", "mun", "muncher", "munchers", "munching", "munda", "mundungus", "mung", "munich", "municipalities", "municipality", "municipalization", "munificence", "munificences", "muniment", "muniments", "munition", "munitions", "munnion", "munnions", "munro", "munros", "munshi", "munshis", "muntin", "muntins", "muntjac", "muntjacs", "muon", "muons", "murage", "murages", "mural", "muralist", "muralists", "murals", "murat", "murcia", "murder", "murderer", "murderers", "murderess", "murderesses", "murders", "murdoch", "murex", "murexes", "murgeon", "murgeons", "muriate", "muriates", "muriel", "murillo", "murine", "murines", "murk", "murkiness", "murky", "murmansk", "murmur", "murmuration", "murmurations", "murmurer", "murmurers", "murmuring", "murmurings", "murmurs", "murphies", "murphy", "murra", "murrain", "murrains", "murray", "murrays", "murre", "murrelet", "murrelets", "murres", "murrhine", "murrumbidgee", "murther", "murthers", "musa", "musca", "muscadel", "muscadels", "muscadine", "muscadines", "muscarine", "muscat", "muscatel", "muscatels", "muscats", "muscid", "muscids", "muscle", "muscles", "muscovado", "muscovados", "muscovite", "muscovites", "muscovy", "muscularity", "musculature", "musculatures", "muse", "museologist", "museologists", "museology", "muser", "musers", "muses", "musette", "musettes", "museum", "museums", "mush", "musher", "mushes", "mushiness", "mushroom", "mushrooms", "music", "musical", "musicale", "musicales", "musicality", "musicalness", "musicals", "musician", "musicians", "musicianship", "musicologist", "musicologists", "musicology", "musics", "musing", "musings", "musk", "muskeg", "muskegs", "muskellunge", "muskellunges", "musket", "musketeer", "musketeers", "musketry", "muskets", "muskie", "muskies", "muskiness", "muskone", "muskrat", "muskrats", "musks", "musky", "muslim", "muslims", "muslin", "muslins", "muso", "musos", "musquash", "musquashes", "muss", "mussel", "mussels", "musses", "mussiness", "mussolini", "mussorgsky", "mussulman", "mussulmans", "mussy", "must", "mustache", "mustaches", "mustachio", "mustachios", "mustang", "mustangs", "mustard", "mustards", "mustee", "mustees", "musteline", "mustelines", "muster", "musters", "musth", "musths", "mustiness", "musts", "mutability", "mutableness", "mutagen", "mutagens", "mutant", "mutants", "mutation", "mutations", "mutch", "mutches", "mutchkin", "mutchkins", "mute", "muteness", "mutes", "mutilation", "mutilations", "mutilator", "mutilators", "mutineer", "mutineers", "mutinies", "mutinousness", "mutiny", "mutism", "mutoscope", "mutoscopes", "mutt", "mutter", "mutterer", "mutterers", "muttering", "mutterings", "mutters", "mutton", "mutton head", "mutton heads", "muttons", "mutts", "mutualisation", "mutualisations", "mutualism", "mutuality", "mutualization", "mutualizations", "mutuel", "mutule", "mutules", "muu muu", "muu muus", "muzak", "muzhik", "muzhiks", "muzziness", "muzzle", "muzzle loader", "muzzler", "muzzlers", "muzzles", "mya", "myalgia", "myalism", "myall", "myalls", "myasthenia", "mycelium", "mycenae", "mycetoma", "mycetomas", "mycetozoan", "mycetozoans", "mycobacterium", "mycologist", "mycologists", "mycology", "mycophagist", "mycophagists", "mycoplasma", "mycoplasmas", "mycorrhiza", "mycorrhizas", "mycosis", "mydriasis", "mydriatic", "myelin", "myelitis", "myeloblast", "myeloma", "myelomas", "myiasis", "myles", "mylodon", "mylodons", "mylohyoid", "mylohyoids", "mylonite", "mylonites", "myna", "mynah", "mynahs", "mynas", "myocarditis", "myocardium", "myocardiums", "myofibril", "myoglobin", "myograph", "myographs", "myography", "myology", "myoma", "myomas", "myope", "myopes", "myopia", "myosin", "myosis", "myosotis", "myosotises", "myotic", "myotonia", "myra", "myriad", "myriads", "myriapod", "myriapods", "myriopod", "myriopods", "myrmecologist", "myrmecologists", "myrmecology", "myrmecophile", "myrmecophiles", "myrmecophily", "myrmidon", "myrmidons", "myrna", "myrobalan", "myrobalans", "myron", "myrrh", "myrrhs", "myrtle", "myrtles", "myself", "mysia", "mysophobia", "mysore", "mystagogue", "mystagogues", "mystagogy", "mysteries", "mysteriousness", "mystery", "mystic", "mysticalness", "mysticism", "mystics", "mystification", "mystifications", "mystifier", "mystifiers", "mystique", "mystiques", "myth", "mythiciser", "mythicisers", "mythicizer", "mythicizers", "mythogenesis", "mythographer", "mythographers", "mythography", "mythologies", "mythologisation", "mythologist", "mythologists", "mythologization", "mythologizer", "mythologizers", "mythology", "mythomania", "mythomaniac", "mythomaniacs", "mythopoeia", "mythopoeist", "mythopoeists", "mythos", "myths", "myxedema", "myxoedema", "myxoma", "myxomatosis", "myxomatous", "myxomycete", "myxomycetes", "myxovirus", "myxoviruses", "mzee", "mzees", "mzungu", "mzungus", "na dene", "nabataean", "nabber", "nabbers", "nablus", "nabob", "nabobs", "nabokov", "naboth", "nacelle", "nacelles", "nacho", "nachos", "nacre", "nacres", "nada", "nadia", "nadine", "nadir", "nadirs", "nae", "naething", "naethings", "naevus", "nag", "naga", "nagana", "nagano", "nagari", "nagas", "nagasaki", "nagger", "naggers", "nagor", "nagors", "nagoya", "nagpur", "nags", "naha", "nahuatl", "nahuatls", "nahum", "naiad", "naiades", "naiads", "naif", "nail", "nail biting", "nailbrush", "nailbrushes", "nailer", "nailers", "nails", "nainsook", "naira", "nairas", "nairn", "nairobi", "naive", "naiveness", "naiveties", "naivety", "nakedness", "naker", "nakers", "namaste", "namastes", "namby pambies", "namby pambiness", "namby pamby", "namby pambyism", "name", "name calling", "name dropper", "name droppers", "name dropping", "named", "namelessness", "namer", "namers", "names", "namesake", "namesakes", "nametape", "nametapes", "namibia", "naming", "namings", "namur", "nan", "nana", "nanas", "nance", "nanchang", "nancy", "nandu", "nanette", "nanism", "nankeen", "nankeens", "nanking", "nanna", "nannas", "nannies", "nanning", "nanny", "nanny goat", "nanny goats", "nanometre", "nanometres", "nanoplankton", "nanosecond", "nanoseconds", "nans", "nansen", "nantes", "nantucket", "naomi", "naos", "naoses", "nap", "napa", "napalm", "nape", "naperies", "napery", "napes", "naphtha", "naphthalene", "naphthas", "naphthene", "naphthol", "naphthols", "napier", "napkin", "napkins", "naples", "napoleon", "napoleons", "napoli", "nappa", "nappe", "napper", "nappers", "nappes", "nappies", "nappy", "naps", "narayan", "narbonne", "narc", "narceine", "narcissism", "narcissist", "narcissists", "narcissus", "narcissuses", "narcolepsy", "narcoleptic", "narcosis", "narcosynthesis", "narcotic", "narcotics", "narcotisation", "narcotism", "narcotist", "narcotists", "narcs", "nard", "nardoo", "nardoos", "nards", "narghile", "narghiles", "nark", "narks", "narmada", "narragansett", "narragansetts", "narration", "narrations", "narrative", "narratives", "narrator", "narrators", "narrow", "narrow mindedness", "narrowing", "narrowings", "narrowness", "narrows", "narthex", "narthexes", "narva", "narvik", "narwhal", "narwhals", "nasal", "nasality", "nasalization", "nasalizations", "nasals", "nascence", "nascency", "naseberries", "naseberry", "naseby", "nash", "nashville", "nasion", "nasions", "naskhi", "nasopharynx", "nassau", "nasser", "nastase", "nastiness", "nasturtium", "nasturtiums", "nasty", "nasute", "nasutes", "nat", "natal", "natalia", "natalie", "natalities", "natality", "natasha", "natation", "natatorium", "natatoriums", "nates", "nathan", "nathaniel", "natheless", "nation", "national", "nationalisation", "nationalisations", "nationalism", "nationalist", "nationalists", "nationalities", "nationality", "nationalization", "nationalizations", "nationals", "nationhood", "nations", "native", "nativeness", "natives", "nativism", "nativist", "nativists", "nativities", "nativity", "natrium", "natrolite", "natron", "nats", "natter", "natterjack", "natterjacks", "natters", "nattiness", "natural", "naturalisation", "naturalism", "naturalist", "naturalists", "naturalization", "naturalness", "naturals", "nature", "natures", "naturism", "naturist", "naturists", "naturopath", "naturopaths", "naturopathy", "naught", "naughtiness", "naughts", "naughty", "naumachia", "naumachias", "naumachies", "naumachy", "nauplius", "nauru", "nauruan", "nauruans", "nausea", "nauseant", "nauseants", "nauseas", "nauseousness", "nautch", "nautches", "nautilus", "nautiluses", "navaho", "navahos", "navarin", "navarino", "navarins", "navarre", "nave", "navel", "navels", "navelwort", "navelworts", "naves", "navette", "navettes", "navew", "navews", "navicert", "navicerts", "navicula", "navicular", "naviculars", "naviculas", "navies", "navigability", "navigableness", "navigation", "navigations", "navigator", "navigators", "navratilova", "navvies", "navvy", "navy", "nawab", "nawabs", "naxos", "nay", "nays", "nazarene", "nazareth", "nazarite", "nazi", "nazir", "nazirs", "nazis", "ndebele", "ndjamena", "ne er do well", "ne er do wells", "neanderthal", "neanderthaler", "neanderthalers", "neanderthaloid", "neanderthals", "neap", "neapolitan", "neapolitans", "neaps", "near", "nearness", "nears", "nearside", "nearsides", "neat", "neatness", "neb", "nebbish", "nebbishes", "nebraska", "nebris", "nebrises", "nebs", "nebuchadnezzar", "nebuchadnezzars", "nebula", "nebulas", "nebulisation", "nebuliser", "nebulisers", "nebulization", "nebulizer", "nebulizers", "nebulosity", "nebulousness", "necessarian", "necessarianism", "necessarians", "necessaries", "necessariness", "necessary", "necessitarian", "necessitarianism", "necessitarians", "necessitation", "necessitations", "necessities", "necessitousness", "necessity", "neck", "neckar", "neckband", "neckbands", "neckcloth", "neckcloths", "necker", "neckerchief", "neckerchiefs", "necking", "neckings", "necklace", "necklaces", "necklet", "necklets", "neckline", "necklines", "necks", "necktie", "neckties", "neckwear", "necrobiosis", "necrolatry", "necrologist", "necrologists", "necrology", "necromancer", "necromancers", "necromancy", "necrophile", "necrophiles", "necrophilia", "necrophiliac", "necrophiliacs", "necrophilic", "necrophilism", "necrophobia", "necropolis", "necropolises", "necropsy", "necroscopies", "necroscopy", "necrosis", "necrotomies", "necrotomy", "nectar", "nectareousness", "nectaries", "nectarine", "nectarines", "nectars", "nectary", "neddies", "neddy", "need", "needer", "needers", "neediness", "needle", "needlecord", "needlecords", "needlecraft", "needleful", "needlefuls", "needles", "needlewoman", "needlework", "needs", "neem", "neems", "neep", "neeps", "nef", "nefariousness", "nefertiti", "nefs", "negating", "negation", "negationist", "negationists", "negations", "negative", "negativeness", "negatives", "negativism", "negativist", "negativity", "negatron", "negatrons", "negev", "neglect", "neglectedness", "neglecter", "neglecters", "neglectfulness", "neglects", "negligee", "negligees", "negligence", "negligences", "negligibility", "negotiability", "negotiant", "negotiants", "negotiation", "negotiations", "negotiator", "negotiators", "negotiatress", "negotiatresses", "negotiatrix", "negotiatrixes", "negress", "negresses", "negrillo", "negrillos", "negrito", "negritos", "negritude", "negro", "negroes", "negroid", "negroids", "negros", "negus", "neguses", "nehemiah", "nehru", "neigh", "neighbor", "neighborhood", "neighborhoods", "neighborliness", "neighbors", "neighbour", "neighbourhood", "neighbourhoods", "neighbourliness", "neighbours", "neighs", "neil", "nejd", "nek", "nekton", "nektons", "nell", "nellie", "nellies", "nelly", "nelson", "nelsons", "nelumbo", "nelumbos", "nemathelminth", "nemathelminths", "nematocyst", "nematocysts", "nematoda", "nematode", "nematodes", "nematologist", "nematologists", "nematology", "nembutal", "nemertea", "nemertean", "nemerteans", "nemertine", "nemertines", "nemesia", "nemesias", "nemesis", "nemophila", "nemophilas", "nene", "nenes", "neo", "neo catholic", "neo christianity", "neo darwinian", "neo darwinism", "neo darwinist", "neo impressionism", "neo impressionist", "neo impressionists", "neo kantian", "neo kantianism", "neo lamarckian", "neo lamarckism", "neo melanesian", "neoclassic", "neoclassicism", "neoclassicist", "neoclassicists", "neocolonialism", "neocolonialist", "neocolonialists", "neodymium", "neogaea", "neogene", "neolith", "neolithic", "neoliths", "neologies", "neologism", "neologisms", "neologist", "neologists", "neology", "neomycin", "neon", "neonate", "neonates", "neophyte", "neophytes", "neoplasm", "neoplasms", "neoplasticism", "neoplatonism", "neoprene", "neoptolemus", "neoteny", "neoteric", "neoterism", "nepal", "nepalese", "nepali", "nepalis", "nepenthe", "nepenthes", "neper", "nepers", "nepeta", "nepheline", "nephelinite", "nephelometer", "nephelometers", "nephew", "nephews", "nephogram", "nephograms", "nephograph", "nephographs", "nephologist", "nephologists", "nephology", "nephoscope", "nephoscopes", "nephralgia", "nephrectomies", "nephrectomy", "nephridium", "nephridiums", "nephrite", "nephritis", "nephrolepis", "nephron", "nephrons", "nephropathy", "nephrosis", "nephrotomies", "nephrotomy", "nepit", "nepits", "nepotism", "neptune", "neptunium", "nerd", "nerds", "nereid", "nereides", "nereids", "nereus", "nerissa", "nerita", "nernst", "nero", "neruda", "nerva", "nervation", "nervations", "nerve", "nervelessness", "nerves", "nervine", "nervines", "nerviness", "nerving", "nervousness", "nervule", "nervules", "nervuration", "nervurations", "nervure", "nervures", "nescience", "ness", "nesses", "nessie", "nessus", "nest", "nester", "nesters", "nestle", "nestles", "nestling", "nestlings", "nestor", "nestorian", "nestorianism", "nestorians", "nestorius", "nests", "net", "netball", "netes", "netherlander", "netherlanders", "netherlands", "nets", "netsuke", "netsukes", "nett", "netta", "nettie", "netting", "nettings", "nettle", "nettles", "netts", "netty", "network", "networks", "neuk", "neuks", "neume", "neumes", "neuralgia", "neurasthenia", "neurasthenic", "neuration", "neurations", "neurectomies", "neurectomy", "neurilemma", "neurilemmas", "neurite", "neuritis", "neuroanatomist", "neuroanatomists", "neuroanatomy", "neurobiology", "neuroblast", "neuroblasts", "neurofibril", "neuroglia", "neurogram", "neurograms", "neurohypophysis", "neurolemma", "neurolemmas", "neurologist", "neurologists", "neurology", "neuroma", "neuromas", "neuron", "neurones", "neurons", "neuropath", "neuropathology", "neuropaths", "neuropathy", "neurophysiologist", "neurophysiologists", "neurophysiology", "neuroplasm", "neuropsychiatry", "neuropsychology", "neuropteran", "neuropterans", "neuroscience", "neurosis", "neurosurgeon", "neurosurgeons", "neurosurgery", "neurotic", "neuroticism", "neurotics", "neurotomies", "neurotomy", "neurotransmitter", "neurotrophy", "neuss", "neuston", "neustons", "neuter", "neutering", "neuters", "neutral", "neutralisation", "neutralise", "neutralises", "neutralism", "neutralist", "neutralists", "neutralities", "neutrality", "neutralization", "neutrals", "neutretto", "neutrettos", "neutrino", "neutrinos", "neutron", "neutrons", "neutrophil", "neutrophils", "neva", "nevada", "never never", "nevers", "neville", "nevis", "nevus", "newark", "newborn", "newbury", "newcastle", "newcomen", "newcomer", "newcomers", "newel", "newels", "newfangledness", "newfie", "newfies", "newfoundland", "newfoundlander", "newfoundlanders", "newgate", "newham", "newhaven", "newman", "newmarket", "newmarkets", "newness", "newport", "news", "newsagent", "newsagents", "newsboy", "newsboys", "newscast", "newscaster", "newscasters", "newscasting", "newscasts", "newsdealer", "newsdealers", "newses", "newshawk", "newshawks", "newsiness", "newsletter", "newsletters", "newsmagazine", "newsmagazines", "newsman", "newsmonger", "newsmongers", "newspaper", "newspaperdom", "newspaperman", "newspapers", "newspaperwoman", "newspeak", "newsprint", "newsreel", "newsreels", "newsroom", "newsrooms", "newssheet", "newssheets", "newsvendor", "newsvendors", "newswoman", "newsworthiness", "newt", "newton", "newtons", "newts", "nexus", "nexuses", "ney", "ngaio", "ngaios", "ngoma", "ngomas", "ngultrum", "ngultrums", "nguni", "ngunis", "ngwee", "niacin", "niagara", "niall", "niamey", "nib", "nibble", "nibbler", "nibblers", "nibbles", "nibbling", "nibblings", "nibelung", "nibelungenlied", "nibelungs", "niblick", "niblicks", "nibs", "nicad", "nicads", "nicaea", "nicaragua", "niccolite", "nice", "niceness", "niceties", "nicety", "niche", "nicher", "nichers", "niches", "nicholas", "nicholson", "nichrome", "nick", "nickel", "nickelodeon", "nickelodeons", "nickels", "nicker", "nickers", "nicklaus", "nicknack", "nicknacks", "nickname", "nicknames", "nickpoint", "nickpoints", "nicks", "nicky", "nicodemus", "nicola", "nicolai", "nicolas", "nicole", "nicolette", "nicolson", "nicosia", "nicotiana", "nicotianas", "nicotinamide", "nicotine", "nicotinism", "nictitation", "niddering", "nidderings", "nide", "nides", "nidification", "nidus", "niece", "nieces", "niellist", "niellists", "niello", "niellos", "nielsen", "niersteiner", "nietzsche", "nietzschean", "nieve", "nieves", "niff", "niffs", "niflheim", "nigel", "nigella", "nigellas", "niger", "niger congo", "nigeria", "niggard", "niggardliness", "niggards", "niggler", "nigglers", "night", "night light", "night lights", "night line", "night lines", "night robe", "night sight", "night sights", "night time", "nightcap", "nightcaps", "nightclubber", "nightclubbers", "nightdress", "nightdresses", "nightfall", "nightfalls", "nightgown", "nightgowns", "nightie", "nighties", "nightingale", "nightingales", "nightjar", "nightjars", "nightlife", "nightmare", "nightmares", "nights", "nightshade", "nightshades", "nightshirt", "nightshirts", "nightspot", "nightspots", "nightstand", "nightstands", "nightwear", "nighty", "nigritude", "nigrosine", "nihil", "nihilism", "nihilist", "nihilists", "nihilities", "nihility", "niigata", "nijinsky", "nijmegen", "nike", "nikethamide", "nikko", "nil", "nile", "nilgai", "nilgais", "nilometer", "nilote", "nilotes", "nilotic", "nils", "nilsson", "nim", "nimbleness", "nimbostratus", "nimbus", "nimbuses", "nimiety", "nimitz", "nimrod", "nimrud", "nims", "nina", "nincompoop", "nincompoops", "nine", "ninepence", "ninepences", "ninepins", "nines", "nineteen", "nineteens", "nineteenth", "nineteenths", "nineties", "ninetieth", "ninetieths", "ninette", "ninety", "nineveh", "ningpo", "ninnies", "ninny", "ninon", "ninons", "ninth", "ninths", "niobe", "niobite", "niobium", "nip", "nipissing", "nipper", "nippers", "nipple", "nipples", "nipplewort", "nippleworts", "nippon", "nips", "nirvana", "nirvanas", "nisan", "nisus", "nisuses", "nit", "niter", "nites", "niton", "nitrate", "nitrates", "nitration", "nitre", "nitride", "nitrides", "nitriding", "nitridings", "nitrification", "nitrifications", "nitrile", "nitriles", "nitrite", "nitrites", "nitrobacteria", "nitrobenzene", "nitrocellulose", "nitrocotton", "nitrogen", "nitrogenisation", "nitrogenization", "nitroglycerin", "nitroglycerine", "nitrometer", "nitrometers", "nitromethane", "nitroparaffin", "nitrosamine", "nitrosamines", "nitrosyl", "nits", "nitty gritty", "nitwit", "nitwits", "niue", "niven", "nix", "nixes", "nixon", "no account", "no ball", "no balls", "no brainer", "no brainers", "no fault", "no hoper", "no hopers", "no man s land", "no show", "no shows", "no side", "no trump", "no trumper", "no trumps", "noah", "nob", "nobbler", "nobblers", "nobel", "nobelium", "nobilities", "nobility", "noble", "noble mindedness", "nobleman", "nobleness", "nobles", "noblesse", "noblesses", "noblewoman", "nobodies", "nobody", "nobs", "nock", "nocks", "noctambulism", "noctambulist", "noctambulists", "noctiluca", "noctilucence", "noctua", "noctuas", "noctuid", "noctuids", "noctule", "noctules", "nocturn", "nocturne", "nocturnes", "nocturns", "nocuousness", "nod", "noddies", "noddle", "noddles", "noddy", "node", "nodes", "nodosities", "nodosity", "nods", "nodule", "nodules", "nodus", "noel", "noelle", "noesis", "nog", "nogg", "noggin", "nogging", "noggings", "noggins", "noggs", "nogs", "noil", "noils", "noise", "noiselessness", "noisemaker", "noisemakers", "noises", "noisette", "noisettes", "noisiness", "noisomeness", "nola", "nolan", "noli me tangere", "noma", "nomad", "nomades", "nomadism", "nomads", "nomarch", "nomarchies", "nomarchs", "nomarchy", "nomas", "nombril", "nombrils", "nome", "nomen", "nomenclator", "nomenclators", "nomenclature", "nomenclatures", "nomenklatura", "nomes", "nominal", "nominalism", "nominalist", "nominalists", "nominals", "nominating", "nomination", "nominations", "nominative", "nominatives", "nominator", "nominators", "nominee", "nominees", "nomism", "nomocracies", "nomocracy", "nomogram", "nomograms", "nomograph", "nomographer", "nomographers", "nomographs", "nomography", "nomologist", "nomologists", "nomology", "non christian", "non com", "non coms", "non involvement", "non resistant", "nona", "nonabsorbent", "nonacademic", "nonage", "nonagenarian", "nonagenarians", "nonages", "nonagon", "nonagons", "nonary", "nonbeliever", "nonbelievers", "nonbelligerent", "nonce", "nonces", "nonchalance", "noncommercial", "nonconcurrent", "nonconformance", "nonconformist", "nonconformists", "nonconformity", "nondescript", "nondescripts", "nondisjunction", "nondrinker", "none", "none so pretty", "nonentities", "nonentity", "nonesuch", "nonesuches", "nonet", "nonets", "nonexecutive", "nong", "nongs", "nonillion", "nonillions", "nonillionth", "nonjuror", "nonjurors", "nonpareil", "nonpareils", "nonplus", "nonpluses", "nonreader", "nonsense", "nonsenses", "nonsensicality", "nonsensicalness", "nonsuch", "nonsuches", "nonsuit", "nonsuits", "nonswimmer", "nonvoter", "noodle", "noodles", "nook", "nookie", "nookies", "nooks", "nooky", "noon", "noonday", "noondays", "nooning", "noonings", "noons", "noontide", "noontides", "noontime", "noose", "nooses", "nootka", "nootkas", "nopal", "nopals", "nor east", "nor west", "nora", "noradrenaline", "norah", "nord", "nordrhein westfalen", "noreen", "norepinephrine", "norfolk", "norge", "noria", "norias", "norite", "nork", "norks", "norland", "norlands", "norm", "norma", "normal", "normalcy", "normalisation", "normalisations", "normality", "normalization", "normalizations", "normals", "norman", "normandy", "normans", "normativeness", "norms", "norn", "norns", "norse", "norseman", "north", "northallerton", "northampton", "northamptonshire", "northcliffe", "norther", "northerlies", "northerliness", "northerly", "northern", "northerner", "northerners", "northerns", "northers", "northing", "northings", "northland", "northlands", "northman", "norths", "northumberland", "northumbria", "northumbrian", "northumbrians", "northward", "northwards", "northwich", "norway", "norwegian", "norwegians", "norwich", "nos", "nose", "nosebag", "nosebags", "nosegay", "nosegays", "noses", "nosey", "noseys", "nosh", "nosh up", "nosh ups", "nosher", "noshers", "noshes", "nosiness", "nosing", "nosings", "nosographer", "nosographers", "nosography", "nosology", "nostalgia", "nostoc", "nostocs", "nostology", "nostomania", "nostradamus", "nostril", "nostrils", "nostrum", "nostrums", "notabilities", "notability", "notable", "notableness", "notables", "notaries", "notary", "notaryship", "notation", "notations", "notch", "notches", "note", "notebook", "notebooks", "notecase", "notecases", "notedness", "notelet", "notelets", "notepad", "notepads", "notepaper", "notepapers", "notes", "noteworthiness", "nothing", "nothingness", "nothings", "notice", "notices", "notification", "notifications", "notifier", "notifiers", "notifying", "notion", "notions", "notitia", "notitias", "notochord", "notochords", "notogaea", "notorieties", "notoriety", "notoriousness", "notornis", "notornises", "notoungulate", "notoungulates", "nottingham", "nottinghamshire", "notum", "notums", "notus", "nouakchott", "nougat", "nougats", "nought", "noughts", "noumenon", "noun", "nouns", "nourice", "nourisher", "nourishers", "nourishing", "nourishment", "nourishments", "nous", "nova", "novaculite", "novak", "novara", "novas", "novation", "novations", "novel", "novelese", "novelette", "novelettes", "novelisation", "novelisations", "novelist", "novelists", "novelization", "novelizations", "novella", "novellas", "novello", "novels", "novelties", "novelty", "november", "novena", "novenas", "novgorod", "novice", "novices", "noviciate", "noviciates", "novitiate", "novitiates", "novocaine", "novokuznetsk", "novosibirsk", "now", "nowadays", "nowed", "nowel", "nowell", "nowhere", "nowness", "nows", "nowt", "nowy", "nox", "noxiousness", "noyade", "noyades", "noyau", "noyaus", "nozzle", "nozzles", "nuance", "nuances", "nub", "nuba", "nubas", "nubbin", "nubbins", "nubble", "nubbles", "nubecula", "nubian", "nubians", "nubility", "nubs", "nucellus", "nucelluses", "nucha", "nuclease", "nucleases", "nucleation", "nucleations", "nucleator", "nucleators", "nuclei", "nuclein", "nucleole", "nucleoles", "nucleolus", "nucleon", "nucleonics", "nucleons", "nucleoplasm", "nucleoside", "nucleotide", "nucleotides", "nucleus", "nuclide", "nuclides", "nude", "nudeness", "nudes", "nudge", "nudger", "nudgers", "nudges", "nudibranch", "nudie", "nudies", "nudism", "nudist", "nudists", "nudities", "nudity", "nudnik", "nudniks", "nuffield", "nuggar", "nuggars", "nugget", "nuggets", "nuisance", "nuisances", "nuits saint georges", "nuke", "nukes", "nuku alofa", "nulla nulla", "nulla nullas", "nullah", "nullahs", "nullification", "nullifications", "nullifidian", "nullifidians", "nullifier", "nullifiers", "nullipara", "nulliparas", "nullipore", "nullity", "numbat", "numbats", "number", "numberer", "numberers", "numbering", "numbers", "numbness", "numbskull", "numbskulls", "numdah", "numdahs", "numen", "numeracy", "numeral", "numerals", "numeration", "numerations", "numerator", "numerators", "numerology", "numerosity", "numerousness", "numidia", "numidian", "numidians", "numismatics", "numismatist", "numismatists", "numismatologist", "numismatology", "nummulite", "nummulites", "numnah", "numnahs", "numskull", "numskulls", "nun", "nunatak", "nunataks", "nunciature", "nunciatures", "nuncio", "nuncios", "nuncle", "nuneaton", "nunhood", "nunnation", "nunneries", "nunnery", "nuns", "nupe", "nupes", "nuptials", "nuraghe", "nuremberg", "nureyev", "nurl", "nurls", "nurse", "nurseling", "nurselings", "nursemaid", "nursemaids", "nurser", "nurseries", "nursers", "nursery", "nurseryman", "nurses", "nursing", "nursling", "nurslings", "nurture", "nurturer", "nurturers", "nurtures", "nurturing", "nut", "nutation", "nutations", "nutcase", "nutcases", "nutcracker", "nutcrackers", "nuthatch", "nuthatches", "nuthouse", "nuthouses", "nutlet", "nutlets", "nutmeg", "nutmegs", "nutria", "nutrias", "nutrient", "nutrients", "nutriment", "nutriments", "nutrition", "nutritionist", "nutritionists", "nutritions", "nutritiousness", "nutritive", "nuts", "nutshell", "nutshells", "nutter", "nutters", "nuttiness", "nutting", "nuttings", "nutwood", "nyala", "nyalas", "nyanja", "nyanjas", "nyanza", "nyanzas", "nyasa", "nyasaland", "nybble", "nybbles", "nyctaginaceae", "nyctalopia", "nyctinasty", "nyctitropism", "nyctophobia", "nye", "nyerere", "nyes", "nylghau", "nylghaus", "nylon", "nylons", "nymph", "nymphaeum", "nymphaeums", "nymphalid", "nymphalids", "nymphet", "nymphets", "nympho", "nympholepsy", "nympholept", "nympholepts", "nymphomania", "nymphomaniac", "nymphomaniacs", "nymphos", "nymphs", "nynorsk", "nyssa", "nystagmus", "nystatin", "nyx", "o brien", "o casey", "o connell", "o connor", "o neill", "o toole", "oaf", "oafs", "oahu", "oak", "oakham", "oakland", "oakley", "oaks", "oakum", "oar", "oars", "oarsman", "oarsmanship", "oarswoman", "oasis", "oast", "oast house", "oast houses", "oasts", "oat", "oatcake", "oatcakes", "oater", "oaters", "oates", "oath", "oaths", "oatmeal", "oatmeals", "oats", "oaxaca", "oba", "obadiah", "oban", "obas", "obbligato", "obbligatos", "obduracy", "obeah", "obeahism", "obeahs", "obeche", "obeches", "obedience", "obedientiaries", "obedientiary", "obeisance", "obeisances", "obelisk", "obelisks", "obelus", "oberammergau", "oberhausen", "oberland", "oberon", "obesity", "obeyer", "obeyers", "obfuscation", "obfuscations", "obi", "obiism", "obis", "obit", "obits", "obituaries", "obituary", "object", "objectification", "objection", "objections", "objective", "objectiveness", "objectives", "objectivism", "objectivist", "objectivists", "objectivities", "objectivity", "objector", "objectors", "objects", "objurgation", "objurgations", "oblast", "oblasts", "oblate", "oblateness", "oblates", "oblation", "oblations", "obligation", "obligations", "obligato", "obligatoriness", "obligatos", "obligee", "obligees", "obligingness", "obligor", "obligors", "oblique", "obliqueness", "obliques", "obliquities", "obliquity", "obliteration", "obliterations", "oblivion", "oblivions", "obliviousness", "oblong", "oblongs", "obloquies", "obloquy", "obmutescence", "obnoxiousness", "oboe", "oboes", "oboist", "oboists", "obolus", "obreption", "obs", "obscenities", "obscenity", "obscurant", "obscurantism", "obscurantist", "obscurantists", "obscurants", "obscuration", "obscurations", "obscure", "obscureness", "obscures", "obscurities", "obscurity", "obsecration", "obsecrations", "obsequiousness", "observableness", "observance", "observances", "observation", "observations", "observatories", "observatory", "observer", "observers", "obsession", "obsessions", "obsessiveness", "obsidian", "obsolescence", "obsoleteness", "obstacle", "obstacles", "obstetrician", "obstetricians", "obstetrics", "obstinacy", "obstinateness", "obstipation", "obstipations", "obstreperousness", "obstruct", "obstructer", "obstructers", "obstruction", "obstructionism", "obstructionist", "obstructionists", "obstructions", "obstructiveness", "obstructor", "obstructors", "obstructs", "obstruent", "obstruents", "obtainment", "obtention", "obtentions", "obtestation", "obtestations", "obtruder", "obtruders", "obtrusiveness", "obtund", "obtunds", "obturation", "obturator", "obturators", "obtuseness", "obumbration", "obumbrations", "obverse", "obverses", "obversion", "obversions", "obviation", "obviations", "obviousness", "oca", "ocarina", "ocarinas", "ocas", "occam", "occamism", "occamist", "occasion", "occasionalism", "occasionality", "occasions", "occident", "occidental", "occidentalism", "occidentalist", "occidentals", "occipital", "occipitals", "occiput", "occiputs", "occlusion", "occlusions", "occlusive", "occlusives", "occult", "occultation", "occultations", "occultism", "occultist", "occultists", "occultness", "occults", "occupancies", "occupancy", "occupant", "occupants", "occupation", "occupations", "occupier", "occupiers", "occupying", "occurrence", "occurrences", "ocean", "oceanarium", "oceanariums", "oceania", "oceanian", "oceanic", "oceanid", "oceanides", "oceanids", "oceanographer", "oceanographers", "oceanography", "oceanology", "oceans", "oceanus", "ocellation", "ocellations", "ocellus", "ocelot", "ocelots", "ocher", "ochlocracy", "ochlocrat", "ochlocrats", "ochlophobia", "ochre", "ochrea", "ochres", "ocker", "ockers", "ockham", "ocotillo", "ocotillos", "ocrea", "octachord", "octachords", "octad", "octads", "octagon", "octagons", "octahedrite", "octahedron", "octahedrons", "octal", "octameter", "octameters", "octane", "octanes", "octans", "octant", "octants", "octaroon", "octaroons", "octave", "octaves", "octavia", "octavian", "octavo", "octavos", "octet", "octets", "octette", "octettes", "octillion", "octillions", "octillionth", "octillionths", "october", "octobrist", "octocentenaries", "octocentenary", "octodecimo", "octodecimos", "octogenarian", "octogenarians", "octonaries", "octonary", "octopod", "octopodes", "octopods", "octopus", "octopuses", "octoroon", "octoroons", "octosyllable", "octosyllables", "octroi", "octrois", "octuple", "octuples", "octuplet", "octuplets", "ocular", "ocularist", "oculars", "oculist", "oculists", "oculomotor", "oculus", "odalisque", "odalisques", "odd", "odd jobman", "oddball", "oddballs", "oddities", "oddity", "oddment", "oddments", "oddness", "odds", "ode", "odelsting", "odense", "oder", "odes", "odessa", "odette", "odeum", "odeums", "odin", "odinism", "odinist", "odinists", "odiousness", "odium", "odiums", "odometer", "odometers", "odometry", "odontalgia", "odontoblast", "odontoblasts", "odontogeny", "odontoglossum", "odontoglossums", "odontograph", "odontographs", "odontography", "odontolite", "odontolites", "odontology", "odontophore", "odontophorus", "odor", "odoriferousness", "odour", "odours", "odyl", "odyles", "odylism", "odysseus", "odyssey", "odysseys", "oecology", "oedema", "oedemas", "oedipus", "oeil de boeuf", "oeillade", "oeillades", "oenologist", "oenologists", "oenology", "oenomel", "oenone", "oenophile", "oenophiles", "oenophilist", "oenophilists", "oersted", "oersteds", "oesophagus", "oestradiol", "oestrogen", "oestrogens", "oestrus", "oestruses", "oeuvre", "oeuvres", "off", "off day", "off days", "off licence", "off licences", "off white", "offa", "offal", "offals", "offaly", "offbeat", "offenbach", "offence", "offences", "offender", "offenders", "offense", "offenses", "offensive", "offensiveness", "offensives", "offer", "offerer", "offerers", "offering", "offerings", "offeror", "offerors", "offers", "offertories", "offertory", "office", "office bearer", "office bearers", "officer", "officers", "offices", "official", "officialdom", "officialese", "officialism", "officialisms", "officials", "officiant", "officiants", "officiating", "officiator", "officiators", "officinal", "officiousness", "offing", "offings", "offishness", "offprint", "offprints", "offs", "offset", "offsets", "offshoot", "offshoots", "offside", "offsider", "offspring", "offsprings", "offtake", "offtakes", "oftenness", "ogaden", "ogam", "ogams", "ogbomosho", "ogdoad", "ogdoads", "ogdon", "ogee", "ogees", "ogham", "oghams", "ogive", "ogives", "ogle", "ogler", "oglers", "ogles", "ogpu", "ogre", "ogres", "ogress", "ogresses", "ohio", "ohm", "ohmage", "ohmmeter", "ohmmeters", "ohms", "oidium", "oik", "oiks", "oil", "oilcan", "oilcans", "oilcloth", "oilcloths", "oiler", "oilers", "oiliness", "oilman", "oilpaper", "oils", "oilskin", "oilskins", "oilstone", "oilstones", "ointment", "ointments", "oireachtas", "oise", "oistrakh", "oiticica", "oiticicas", "ojibwa", "ojibwas", "oka", "okapi", "okapis", "okas", "okavango", "okay", "okayama", "okays", "oke", "okes", "okinawa", "oklahoma", "okra", "okras", "olaf", "old", "old fashioned", "old fashionedness", "old timer", "old timers", "oldenburg", "oldham", "oldie", "oldies", "oldness", "olds", "oldster", "oldsters", "olea", "oleaginousness", "oleander", "oleanders", "olearia", "olearias", "oleaster", "oleasters", "oleate", "oleates", "olecranon", "olecranons", "olefin", "olefine", "olefines", "olefins", "olein", "oleins", "oleo", "oleograph", "oleographs", "oleography", "oleomargarine", "oleos", "oleum", "olfaction", "olfactory", "olga", "olibanum", "oligarch", "oligarchies", "oligarchs", "oligarchy", "oligocene", "oligochaeta", "oligochaete", "oligochaetes", "oligoclase", "oligopolies", "oligopoly", "oligopsonies", "oligopsony", "oliguria", "olio", "olios", "olive", "olivenite", "olives", "olivia", "olivier", "olivine", "olla", "olla podrida", "ollas", "ollie", "olm", "olms", "ology", "oloroso", "olorosos", "olwen", "olympia", "olympiad", "olympiads", "olympian", "olympians", "olympics", "olympus", "omadhaun", "omadhauns", "omagh", "omaha", "oman", "omar", "omasum", "omayyad", "omayyads", "omber", "ombre", "ombu", "ombudsman", "ombus", "omdurman", "omega", "omegas", "omelet", "omelets", "omelette", "omelettes", "omen", "omens", "omentum", "omer", "omers", "omicron", "omicrons", "ominousness", "omission", "omissions", "ommatidium", "ommatophore", "ommatophores", "omnibus", "omnibuses", "omnipotence", "omnipotences", "omnipotent", "omnipresence", "omniscience", "omnium gatherum", "omnivore", "omnivores", "omnivorousness", "omophagia", "omophorion", "omophorions", "omphalos", "omphaloses", "omsk", "onager", "onagers", "onanism", "onanist", "onanists", "onassis", "once", "once over", "oncer", "oncers", "onchocerciasis", "oncidium", "oncidiums", "oncogene", "oncogenes", "oncologist", "oncologists", "oncology", "oncoming", "oncomings", "oncost", "oncosts", "ondatra", "ondatras", "ondine", "ondines", "onding", "ondings", "one", "one acter", "one liner", "one liners", "one nighter", "one nighters", "one off", "one offs", "one sidedness", "one step", "one steps", "one two", "one upmanship", "oneida", "oneidas", "oneirocritic", "oneirocriticism", "oneiromancy", "oneness", "oner", "onerousness", "oners", "ones", "onion", "onions", "onlooker", "onlookers", "onomasticon", "onomasticons", "onomastics", "onomatopoeia", "onomatopoeias", "onondaga", "onondagas", "onrush", "onrushes", "onset", "onsets", "onslaught", "onslaughts", "ontario", "ontogenesis", "ontogeny", "ontologist", "ontologists", "ontology", "onus", "onuses", "onychia", "onychium", "onyx", "onyxes", "oocyte", "oocytes", "oodles", "oof", "oofs", "oogamy", "oogenesis", "oogonium", "oolite", "oolites", "oolith", "ooliths", "oology", "oolong", "oolongs", "oomiak", "oomiaks", "oompah", "oompahs", "oomph", "oona", "oonagh", "oophorectomies", "oophorectomy", "oophoritis", "oophyte", "oophytes", "oos", "oose", "ooses", "oosperm", "oosperms", "oosphere", "oospheres", "oospore", "oospores", "oostende", "ooze", "oozes", "oozing", "opacities", "opacity", "opah", "opahs", "opal", "opalescence", "opaline", "opalines", "opals", "opaque", "opaqueness", "opaques", "opcode", "opcodes", "open", "open heartedness", "open mindedness", "opener", "openers", "opening", "openings", "openness", "opens", "openwork", "opepe", "opepes", "opera", "operability", "operagoer", "operagoers", "operand", "operands", "operant", "operants", "operas", "operation", "operations", "operative", "operativeness", "operatives", "operator", "operators", "operculum", "operetta", "operettas", "operettist", "operettists", "operon", "operons", "operoseness", "ophelia", "ophicleide", "ophicleides", "ophidian", "ophidians", "ophiolater", "ophiolaters", "ophiolatry", "ophiologist", "ophiologists", "ophiology", "ophir", "ophite", "ophites", "ophiuchus", "ophthalmia", "ophthalmitis", "ophthalmologist", "ophthalmology", "ophthalmometer", "ophthalmometers", "ophthalmometry", "ophthalmoscope", "ophthalmoscopes", "ophthalmoscopy", "opiate", "opiates", "opinicus", "opinicuses", "opinion", "opinionativeness", "opinions", "opisthobranch", "opisthobranchs", "opisthodomos", "opisthodomoses", "opium", "opiumism", "opiums", "opodeldoc", "opopanax", "oporto", "opossum", "opossums", "oppenheimer", "oppidan", "oppidans", "oppilation", "opponencies", "opponency", "opponent", "opponents", "opportuneness", "opportunism", "opportunist", "opportunists", "opportunities", "opportunity", "opposability", "opposer", "opposers", "opposite", "oppositeness", "opposites", "opposition", "oppositions", "oppression", "oppressions", "oppressiveness", "oppressor", "oppressors", "opprobriousness", "opprobrium", "oppugner", "oppugners", "ops", "opsimath", "opsimaths", "opsonin", "optative", "optatives", "optic", "optician", "opticians", "optics", "optime", "optimes", "optimise", "optimises", "optimism", "optimist", "optimists", "optimization", "optimizations", "optimum", "option", "options", "optometer", "optometers", "optometrist", "optometrists", "optometry", "opulence", "opuntia", "opuntias", "opus", "opuscule", "opuscules", "opuses", "orach", "orache", "oraches", "orachs", "oracle", "oracles", "oracularity", "oracularness", "oracy", "oral", "orals", "oran", "orang", "orang utan", "orang utans", "orange", "orange tip", "orangeade", "orangeades", "orangeism", "orangeman", "orangeries", "orangery", "oranges", "orangs", "orarion", "orarions", "orarium", "orariums", "oration", "orations", "orator", "oratories", "oratorio", "oratorios", "orators", "oratory", "oratrix", "oratrixes", "orb", "orbicularis", "orbit", "orbital", "orbitals", "orbits", "orbs", "orc", "orcadian", "orcadians", "orcein", "orchard", "orchardist", "orchardists", "orchards", "orchestra", "orchestras", "orchestration", "orchestrations", "orchestrator", "orchestrators", "orchestrion", "orchestrions", "orchid", "orchidectomies", "orchidectomy", "orchidologist", "orchidologists", "orchidology", "orchids", "orchiectomies", "orchiectomy", "orchil", "orchils", "orchis", "orchises", "orchitis", "orcinol", "orcs", "orcus", "orczy", "ord", "ordainer", "ordainers", "ordaining", "ordainment", "ordainments", "ordeal", "ordeals", "order", "ordering", "orderings", "orderlies", "orderliness", "orderly", "orders", "ordinal", "ordinals", "ordinance", "ordinances", "ordinand", "ordinands", "ordinaries", "ordinariness", "ordinary", "ordinate", "ordinates", "ordination", "ordinations", "ordnance", "ordnances", "ordonnance", "ordovician", "ords", "ordure", "ordures", "ore", "oread", "oreades", "oreads", "oregano", "oreganos", "oregon", "oreopithecus", "ores", "oresteia", "orestes", "orexis", "orexises", "orfe", "orfeo", "orfes", "orff", "organ", "organ grinder", "organ grinders", "organa", "organdie", "organdy", "organelle", "organelles", "organic", "organicism", "organicist", "organicists", "organisability", "organisation", "organisations", "organism", "organisms", "organist", "organists", "organizability", "organization", "organizations", "organizer", "organizers", "organogenesis", "organography", "organon", "organotherapy", "organs", "organum", "organza", "organzas", "organzine", "orgasm", "orgasms", "orgeat", "orgeats", "orgies", "orgy", "oribi", "oribis", "oriel", "oriels", "orient", "oriental", "orientalism", "orientalist", "orientalists", "orientals", "orientation", "orientations", "orienteering", "orients", "orifice", "orifices", "oriflamme", "oriflammes", "origami", "origan", "origanes", "origans", "origanum", "origanums", "origen", "origenism", "origenist", "origenists", "origin", "original", "originality", "originals", "origination", "originator", "originators", "origins", "orinasal", "orinasals", "orinoco", "oriole", "orioles", "orion", "orison", "orisons", "orissa", "oriya", "orlando", "orle", "orleanism", "orleanist", "orleans", "orles", "orlon", "orlop", "orlops", "orly", "ormandy", "ormazd", "ormer", "ormers", "ormolu", "ormolus", "ornament", "ornamental", "ornamentation", "ornamentations", "ornaments", "ornateness", "orne", "orneriness", "ornis", "ornises", "ornithischian", "ornithischians", "ornithogalum", "ornithogalums", "ornithologist", "ornithologists", "ornithology", "ornithomancy", "ornithopod", "ornithopods", "ornithopter", "ornithopters", "ornithorhynchus", "ornithoscopy", "ornithosis", "orogenies", "orogeny", "orographic", "orography", "oroide", "orologist", "orologists", "oropharynx", "orotundity", "orphan", "orphanage", "orphanages", "orphanhood", "orphans", "orpharion", "orpharions", "orpheus", "orphism", "orphrey", "orphreys", "orpiment", "orpin", "orpine", "orpines", "orpington", "orpins", "orreries", "orrery", "orris", "orrises", "orseille", "orseilles", "orsini", "orsino", "orson", "ortanique", "ortaniques", "orthicon", "orthicons", "orthocentre", "orthocentres", "orthoclase", "orthodontia", "orthodontics", "orthodontist", "orthodontists", "orthodoxies", "orthodoxy", "orthoepy", "orthogenesis", "orthographer", "orthographers", "orthographies", "orthography", "orthopaedics", "orthopedics", "orthopedist", "orthopedists", "orthophosphate", "orthophosphates", "orthopraxies", "orthopraxy", "orthopsychiatry", "orthoptera", "orthopteran", "orthopteron", "orthoptics", "orthostichies", "orthostichy", "orthotone", "orthotropism", "orthros", "orthroses", "ortolan", "ortolans", "orton", "orvieto", "orwell", "oryx", "oryxes", "orzo", "osage", "osages", "osaka", "osbert", "osborne", "oscan", "oscar", "oscars", "oscillation", "oscillations", "oscillator", "oscillators", "oscillogram", "oscillograms", "oscillograph", "oscillographs", "oscilloscope", "oscilloscopes", "oscine", "oscitancy", "osculation", "osculations", "osculum", "osculums", "osier", "osiers", "osiris", "oslo", "osmanli", "osmanlis", "osmeterium", "osmidrosis", "osmiridium", "osmium", "osmometer", "osmometers", "osmometry", "osmose", "osmoses", "osmosis", "osmund", "osmunda", "osmundas", "osmunds", "osnaburg", "osnaburgs", "osprey", "ospreys", "osric", "ossa", "ossein", "osselet", "osselets", "ossian", "ossicle", "ossicles", "ossie", "ossies", "ossification", "ossifrage", "ossifrages", "ossuaries", "ossuary", "osteitis", "ostend", "ostensories", "ostensory", "ostentation", "ostentatiousness", "osteoarthritis", "osteoblast", "osteoblasts", "osteoclasis", "osteoclast", "osteoclasts", "osteogenesis", "osteologist", "osteologists", "osteology", "osteoma", "osteomalacia", "osteomas", "osteomyelitis", "osteopath", "osteopathist", "osteopathists", "osteopaths", "osteopathy", "osteopetrosis", "osteophyte", "osteophytes", "osteoplasties", "osteoplasty", "osteoporosis", "osteosarcoma", "osteotome", "osteotomes", "osteotomies", "osteotomy", "ostiaries", "ostiary", "ostinato", "ostinatos", "ostiole", "ostioles", "ostium", "ostler", "ostlers", "ostracise", "ostracises", "ostracism", "ostracod", "ostracoderm", "ostracoderms", "ostracods", "ostracon", "ostrich", "ostriches", "ostrogoth", "ostyak", "oswald", "otalgia", "otello", "othello", "other", "otherness", "otherworldliness", "otis", "otitis", "otocyst", "otocysts", "otolaryngologist", "otolaryngologists", "otolaryngology", "otolith", "otoliths", "otologist", "otologists", "otology", "otorhinolaryngologist", "otorhinolaryngologists", "otorhinolaryngology", "otosclerosis", "otoscope", "otoscopes", "otranto", "ottar", "ottars", "ottava", "ottavas", "ottawa", "otter", "otterburn", "otters", "ottilie", "otto", "ottoman", "ottomans", "ottos", "ottrelite", "otway", "ouabain", "ouabains", "ouagadougou", "ouananiche", "ouananiches", "oubliette", "oubliettes", "ouch", "ouches", "oudh", "ought", "oughts", "ouija", "ouijas", "oujda", "ounce", "ounces", "ouphe", "ourari", "ouraris", "ouse", "ousel", "ousels", "ouster", "ousters", "ousting", "out", "out and outer", "out of doors", "out of print", "out tray", "out trays", "outage", "outages", "outback", "outboard", "outbreak", "outbreaks", "outbuilding", "outbuildings", "outburst", "outbursts", "outcast", "outcaste", "outcastes", "outcasts", "outcome", "outcomes", "outcries", "outcrop", "outcropping", "outcrops", "outcross", "outcrosses", "outcrossing", "outcrossings", "outcry", "outdoors", "outer", "outers", "outerwear", "outfall", "outfalls", "outfield", "outfielder", "outfielders", "outfields", "outfighting", "outfit", "outfits", "outfitter", "outfitters", "outfitting", "outflow", "outflows", "outgo", "outgoer", "outgoers", "outgoes", "outgoing", "outgoings", "outgrowth", "outgrowths", "outguard", "outguards", "outhaul", "outhauls", "outhouse", "outhouses", "outing", "outings", "outland", "outlander", "outlanders", "outlandishness", "outlands", "outlaw", "outlawry", "outlaws", "outlay", "outlays", "outlet", "outlets", "outlier", "outliers", "outline", "outlines", "outlook", "outlooks", "outness", "outparish", "outparishes", "outport", "outports", "outpost", "outposts", "outpour", "outpouring", "outpourings", "outpours", "output", "outputs", "outquarters", "outrage", "outrageousness", "outrages", "outrance", "outrances", "outreach", "outreaches", "outremer", "outremers", "outride", "outrider", "outriders", "outrides", "outrigger", "outriggers", "outrunner", "outrunners", "outrush", "outrushes", "outs", "outset", "outsets", "outshoot", "outshoots", "outshot", "outshots", "outside", "outsider", "outsiders", "outsides", "outsize", "outsizes", "outskirts", "outsole", "outsoles", "outspan", "outspans", "outspokenness", "outspread", "outspreads", "outstation", "outstations", "outswing", "outswinger", "outswingers", "outswings", "outtake", "outturn", "outturns", "outward", "outwardness", "outwards", "outwash", "outwork", "outworker", "outworkers", "outworks", "ouzel", "ouzels", "ouzo", "ouzos", "ova", "oval", "ovalbumin", "ovals", "ovambo", "ovambos", "ovaries", "ovariotomies", "ovariotomist", "ovariotomists", "ovariotomy", "ovaritis", "ovary", "ovation", "ovations", "oven", "ovens", "ovenware", "ovenwood", "over", "overabundance", "overabundances", "overacting", "overactivity", "overall", "overalls", "overbalance", "overbalances", "overbearingness", "overbid", "overbids", "overbite", "overbites", "overburden", "overburdens", "overbuy", "overbuys", "overcall", "overcalls", "overcapacity", "overcapitalisation", "overcapitalization", "overcast", "overcasting", "overcasts", "overcharge", "overcharges", "overcheck", "overchecks", "overcoat", "overcoating", "overcoats", "overcompensation", "overcredulity", "overdevelopment", "overdose", "overdoses", "overdraft", "overdrafts", "overdraught", "overdraughts", "overdress", "overdresses", "overdrive", "overdrives", "overdue", "overeating", "overemphasis", "overemphasises", "overenthusiasm", "overestimate", "overestimates", "overestimation", "overestimations", "overexcitability", "overexertion", "overexertions", "overexposure", "overfall", "overfalls", "overfeeding", "overflight", "overflights", "overflow", "overflowing", "overflowings", "overflows", "overfold", "overfolds", "overfondness", "overforwardness", "overfreedom", "overgarment", "overgarments", "overglazed", "overglazing", "overgrowth", "overgrowths", "overhang", "overhangs", "overhastiness", "overhaul", "overhauling", "overhauls", "overhead", "overheads", "overheat", "overheating", "overheats", "overindulgence", "overindulgences", "overissue", "overissues", "overkill", "overkills", "overlap", "overlapping", "overlaps", "overlay", "overlays", "overload", "overloads", "overlook", "overlooker", "overlookers", "overlooks", "overlord", "overlords", "overlordship", "overman", "overmans", "overmantel", "overmantels", "overmast", "overmasts", "overmatch", "overmatches", "overmatter", "overmatters", "overmeasure", "overmeasures", "overmuch", "overmultiplication", "overnighter", "overnighters", "overoptimism", "overpass", "overpasses", "overpayment", "overpayments", "overplus", "overpluses", "overpopulation", "overpraise", "overpraises", "overprint", "overprints", "overproduction", "overrashness", "overrating", "overreaction", "overreactions", "overreckoning", "override", "overrider", "overriders", "overrides", "overripe", "overruler", "overrulers", "overrun", "overruns", "overs", "overscrupulousness", "overseas", "overseer", "overseers", "overshirt", "overshirts", "overshoe", "overshoes", "overshoot", "overshoots", "oversight", "oversights", "oversimplification", "oversize", "oversizes", "overskirt", "overskirts", "overslaugh", "overslaughs", "oversleeve", "oversleeves", "oversoul", "oversouls", "overspecialization", "overspill", "overspills", "overspin", "overspins", "overstand", "overstands", "overstatement", "overstatements", "overstock", "overstocking", "overstocks", "overstrain", "overstrains", "overstudies", "overstudy", "oversubscription", "oversubtlety", "oversupplies", "oversupply", "overtaking", "overthrow", "overthrower", "overthrowers", "overthrows", "overthrust", "overthrusts", "overtime", "overtimes", "overtone", "overtones", "overtrick", "overtricks", "overture", "overtures", "overturn", "overturning", "overturns", "overuse", "overuses", "overvaluation", "overvaluations", "overview", "overviews", "overweight", "overweights", "overword", "overwords", "overwork", "overworking", "overworks", "ovibos", "oviboses", "ovid", "oviduct", "oviducts", "oviedo", "oviparity", "oviposition", "ovipositor", "ovipositors", "ovisac", "ovisacs", "ovoid", "ovoids", "ovolo", "ovotestis", "ovulation", "ovulations", "ovule", "ovules", "ovum", "owelty", "owen", "owenism", "owenist", "owenite", "owens", "owl", "owlet", "owlets", "owlishness", "owls", "owner", "owner driver", "owner occupier", "owner occupiers", "owners", "ownership", "ownerships", "oxalate", "oxalates", "oxalis", "oxalises", "oxazine", "oxazines", "oxbridge", "oxcart", "oxcarts", "oxen", "oxeye", "oxeyes", "oxford", "oxfordshire", "oxgang", "oxgangs", "oxhide", "oxidant", "oxidants", "oxidase", "oxidases", "oxidation", "oxidations", "oxide", "oxides", "oxidisation", "oxidisations", "oxidization", "oxidizations", "oxidizer", "oxidizers", "oxime", "oximes", "oximeter", "oximeters", "oxlip", "oxlips", "oxonian", "oxonians", "oxtail", "oxtails", "oxter", "oxters", "oxus", "oxygen", "oxygenate", "oxygenates", "oxygenation", "oxygenator", "oxygenators", "oxyhaemoglobin", "oxymoron", "oxymorons", "oxytocic", "oxytocin", "oyer", "oyers", "oyez", "oyezes", "oyster", "oysters", "ozalid", "ozocerite", "ozokerite", "ozone", "ozonizer", "ozonizers", "ozonosphere", "ozzie", "ozzies", "ozzy", "pa anga", "pablo", "pabulum", "paca", "pacas", "pace", "pacemaker", "pacemakers", "pacer", "pacers", "paces", "pacha", "pachalic", "pachalics", "pachas", "pachelbel", "pachinko", "pachisi", "pachuco", "pachucos", "pachyderm", "pachyderms", "pacific", "pacification", "pacifications", "pacificism", "pacificist", "pacificists", "pacifier", "pacifiers", "pacifism", "pacifist", "pacifists", "pacing", "pack", "package", "packages", "packaging", "packagings", "packer", "packers", "packet", "packets", "packhorse", "packhorses", "packing", "packings", "packman", "packs", "packsack", "packsacks", "pact", "paction", "pactions", "pacts", "pad", "padang", "padangs", "padauk", "padauks", "paddies", "padding", "paddings", "paddington", "paddle", "paddlefish", "paddlefishes", "paddler", "paddlers", "paddles", "paddock", "paddocks", "paddy", "paddymelon", "paddymelons", "pademelon", "pademelons", "paderborn", "paderewski", "padlock", "padlocks", "padouk", "padouks", "padova", "padre", "padres", "padrone", "pads", "padua", "paduasoy", "paduasoys", "paean", "paeans", "paederast", "paederasts", "paederasty", "paediatrician", "paediatricians", "paediatrics", "paedobaptism", "paedobaptist", "paedobaptists", "paedogenesis", "paedology", "paedomorphosis", "paedophilia", "paella", "paellas", "paenula", "paenulas", "paeon", "paeonies", "paeons", "paeony", "pagan", "paganini", "paganism", "pagans", "page", "pageant", "pageantries", "pageantry", "pageants", "pages", "pagination", "paginations", "paging", "pagings", "pagnol", "pagoda", "pagodas", "pagurian", "pagurians", "pagurid", "pahang", "pahari", "pahlavi", "pahoehoe", "paige", "paigle", "paigles", "paignton", "paik", "paiks", "pail", "pailful", "pailfuls", "paillasse", "paillasses", "paillette", "paillettes", "pails", "pain", "paine", "painfulness", "pains", "paint", "painter", "painters", "painting", "paintings", "paints", "painty", "pair", "pair oar", "pairing", "pairings", "pairs", "paisa", "paisano", "paisanos", "paisas", "paisley", "paisleys", "paiute", "paiutes", "pajama", "pajamas", "pakeha", "pakehas", "pakistan", "pal", "palabra", "palabras", "palace", "palaces", "paladin", "paladins", "palaeethnology", "palaeoanthropology", "palaeobiologist", "palaeobiologists", "palaeobiology", "palaeobotany", "palaeocene", "palaeoclimatology", "palaeoecologist", "palaeoecologists", "palaeoecology", "palaeogene", "palaeogeography", "palaeography", "palaeolith", "palaeoliths", "palaeomagnetism", "palaeontography", "palaeontologist", "palaeontologists", "palaeontology", "palaeopathology", "palaeozoic", "palaeozoologist", "palaeozoology", "palaestra", "palaestras", "palanquin", "palanquins", "palas", "palases", "palatability", "palatableness", "palatal", "palatalization", "palatals", "palate", "palates", "palatinate", "palatinates", "palatine", "palatines", "palaver", "palaverer", "palaverers", "palavers", "palawan", "palazzo", "pale", "palea", "paleface", "palefaces", "palembang", "paleness", "palenque", "paleographer", "paleographers", "paleography", "paleontologist", "paleontologists", "paleontology", "palermo", "pales", "palestine", "palestra", "palestras", "palestrina", "palet", "paletot", "paletots", "palets", "palette", "palettes", "paley", "palfrey", "palfreys", "palgrave", "pali", "palimonies", "palimony", "palimpsest", "palimpsests", "palindrome", "palindromes", "palindromist", "palindromists", "paling", "palingenesis", "palingenesist", "palingenesists", "palings", "palinode", "palinodes", "palinurus", "palisade", "palisades", "palisado", "palisadoes", "palki", "palkis", "pall", "pall mall", "palladio", "palladium", "palladiums", "pallas", "pallet", "palletization", "palletizations", "pallets", "palliasse", "palliasses", "palliation", "palliations", "palliative", "palliatives", "pallidness", "pallium", "pallone", "pallor", "palls", "palm", "palma", "palmas", "palmation", "palmations", "palmer", "palmers", "palmerston", "palmette", "palmettes", "palmetto", "palmettoes", "palmettos", "palmist", "palmistry", "palmists", "palmitate", "palmitates", "palmitin", "palms", "palmyra", "palmyras", "palolo", "palolos", "paloma", "palomar", "palomino", "palominos", "palooka", "palookas", "palp", "palpability", "palpableness", "palpation", "palpations", "palpi", "palpitation", "palpitations", "palps", "pals", "palsgrave", "palsgraves", "palsgravine", "palsgravines", "palsies", "palstave", "palstaves", "palsy", "palterer", "palterers", "paltering", "paltriness", "paludamentum", "paludamentums", "paludism", "palynology", "pam", "pamela", "pampas", "pamperedness", "pamperer", "pamperers", "pampering", "pampero", "pamperos", "pamphlet", "pamphleteer", "pamphleteers", "pamphlets", "pamplona", "pams", "pan", "pan african", "pan africanism", "pan americanism", "pan arab", "pan arabic", "pan arabism", "pan german", "pan germanism", "pan slavism", "panacea", "panaceas", "panache", "panaches", "panada", "panadas", "panagia", "panama", "panamanian", "panamanians", "panamas", "panatela", "panatelas", "panatella", "panatellas", "panathenaea", "panax", "panaxes", "panay", "pancake", "pancakes", "panchatantra", "panchax", "panchaxes", "panchromatism", "pancosmism", "pancratium", "pancreas", "pancreases", "pancreatin", "pancreatitis", "panda", "pandarus", "pandas", "pandect", "pandects", "pandemia", "pandemias", "pandemic", "pandemics", "pandemonium", "pandemoniums", "pander", "panders", "pandiculation", "pandiculations", "pandies", "pandion", "pandit", "pandits", "pandora", "pandoras", "pandore", "pandores", "pandour", "pandours", "pandowdies", "pandowdy", "pandy", "pane", "panegyric", "panegyrics", "panegyrist", "panegyrists", "panel", "paneling", "panelist", "panelists", "panelling", "panellings", "panellist", "panellists", "panels", "panes", "panettone", "pang", "panga", "pangaea", "pangas", "pangenesis", "pangolin", "pangolins", "pangs", "panhandle", "panhandler", "panhandlers", "panhandles", "panhellenism", "panic", "panicle", "panicles", "panicmonger", "panicmongers", "panics", "panjabi", "panjandrum", "panjandrums", "pankhurst", "panlogism", "panmixia", "pannage", "pannages", "panne", "pannier", "panniers", "pannikin", "pannikins", "pannus", "panocha", "panoplies", "panoply", "panorama", "panoramas", "panpsychist", "panpsychists", "pans", "pansies", "pansophism", "pansophist", "pansophists", "pansophy", "panspermia", "pansy", "pant", "pantagraph", "pantagruel", "pantagruelism", "pantagruelist", "pantechnicon", "pantechnicons", "pantelleria", "panter", "pantheism", "pantheist", "pantheists", "pantheon", "pantheons", "panther", "panthers", "pantihose", "pantile", "pantiles", "panting", "pantings", "pantisocracy", "pantler", "panto", "pantocrator", "pantofle", "pantofles", "pantograph", "pantographer", "pantographers", "pantographs", "pantography", "pantomime", "pantomimes", "pantomimist", "pantomimists", "pantos", "pantoum", "pantoums", "pantries", "pantry", "pantryman", "pants", "pantsuit", "pantsuits", "panzer", "panzers", "pap", "papa", "papable", "papacies", "papacy", "papadopoulos", "papain", "papalise", "papalises", "papandreou", "papas", "papaverine", "papaw", "papaws", "papaya", "papayas", "paper", "paper cutter", "paperback", "paperbacks", "paperboard", "paperbound", "paperboy", "paperboys", "paperer", "paperers", "papergirl", "papergirls", "papering", "paperings", "papers", "paperwork", "papes", "papeterie", "papeteries", "paphlagonia", "papiamento", "papilla", "papilloma", "papillomas", "papillon", "papillons", "papillote", "papillotes", "papism", "papist", "papistry", "papists", "papoose", "papooses", "papovavirus", "papovaviruses", "pappoose", "pappooses", "pappus", "pappuses", "pappy", "paprika", "paprikas", "paps", "papua", "papuan", "papuans", "papule", "papules", "papyrologist", "papyrologists", "papyrology", "papyrus", "papyruses", "par", "para", "parabasis", "parabiosis", "parable", "parables", "parabola", "parabolas", "parabole", "paraboles", "parabolist", "parabolists", "paraboloid", "paraboloidal", "paraboloids", "parabrake", "parabrakes", "paracelsian", "paracelsus", "paracentesis", "paracetamol", "parachronism", "parachronisms", "parachute", "parachutes", "parachuting", "parachutist", "parachutists", "paraclete", "paracletes", "parade", "parader", "paraders", "parades", "paradiddle", "paradiddles", "paradigm", "paradigms", "paradise", "paradises", "parados", "paradox", "paradoxes", "paradoxicalness", "paradoxology", "paradrop", "paradrops", "paraesthesia", "paraffin", "paraffine", "paraffines", "paragenesis", "paraglider", "paragliders", "paraglossa", "paragoge", "paragon", "paragonite", "paragons", "paragraph", "paragrapher", "paragraphers", "paragraphia", "paragraphs", "paraguay", "parakeet", "parakeets", "paralanguage", "paralanguages", "paraldehyde", "paralegal", "paraleipsis", "paralipsis", "parallax", "parallel", "parallelepiped", "parallelepipedon", "parallelepipeds", "parallelism", "parallelogram", "parallelograms", "parallelopiped", "parallelopipedon", "parallelopipeds", "parallels", "paralogism", "paralogisms", "paralyser", "paralysers", "paralysis", "paralytic", "paralytics", "paralyzer", "paralyzers", "paramagnetism", "paramaribo", "paramatta", "paramecia", "paramecium", "paramedic", "paramedics", "parament", "parameter", "parameters", "paramilitaries", "paramilitary", "paramnesia", "paramo", "paramorph", "paramorphism", "paramorphs", "paramos", "paramount", "paramountcies", "paramountcy", "paramounts", "paramour", "paramours", "paramyxovirus", "paramyxoviruses", "paranephros", "parang", "parangs", "paranoia", "paranoiac", "paranoiacs", "paranoid", "paranoids", "paranthropus", "paranymph", "paranymphs", "paraparesis", "parapet", "parapets", "paraph", "paraphernalia", "paraphrase", "paraphraser", "paraphrasers", "paraphrases", "paraphrast", "paraphrasts", "paraphrenia", "paraphs", "paraphysis", "paraplegia", "paraplegic", "paraplegics", "parapodium", "parapsychologist", "parapsychology", "paraquat", "paras", "parasailing", "parasang", "parasangs", "parascenium", "paraselene", "parasite", "parasites", "parasiticalness", "parasiticide", "parasiticides", "parasitism", "parasitologist", "parasitologists", "parasitology", "parasitosis", "parasol", "parasols", "parastichy", "parasympathetic", "parasynthesis", "parasyntheton", "parataxis", "parathion", "parathyroid", "parathyroids", "paratrooper", "paratroopers", "paratroops", "paratyphoid", "paravane", "paravanes", "parazoa", "parazoan", "parazoans", "parbuckle", "parbuckles", "parca", "parcel", "parcelling", "parcels", "parcenaries", "parcenary", "parcener", "parceners", "parchedness", "parcheesi", "parchment", "parchments", "parclose", "parcloses", "pard", "pardalote", "pardalotes", "pardner", "pardners", "pardon", "pardonableness", "pardoner", "pardoners", "pardons", "pards", "paregoric", "paregorics", "pareira", "pareiras", "parenchyma", "parenchymas", "parent", "parentage", "parentages", "parenthesis", "parenthesises", "parenthood", "parents", "parer", "parergon", "parergons", "parers", "pares", "paresis", "paresthesia", "paretic", "pareu", "pareus", "parfait", "parfaits", "parfleche", "parfleches", "pargasite", "pargasites", "parget", "pargeting", "pargetings", "pargets", "parging", "parhelion", "pari mutuel", "pari mutuels", "pariah", "pariahs", "parian", "parians", "parietal", "parietals", "paring", "parings", "paris", "parish", "parishes", "parishioner", "parishioners", "parisian", "parisians", "parison", "parisons", "parities", "parity", "park", "parka", "parkas", "parkin", "parking", "parkins", "parkinson", "parkland", "parklands", "parks", "parkway", "parkways", "parlance", "parlances", "parlay", "parlays", "parle", "parles", "parley", "parleys", "parleyvoo", "parleyvoos", "parliament", "parliamentarian", "parliamentarianism", "parliamentarians", "parliaments", "parlor", "parlour", "parlours", "parma", "parmenides", "parmigianino", "parnassian", "parnassus", "parnell", "parnellism", "parnellite", "parnellites", "parochialism", "parodies", "parodist", "parodists", "parody", "parol", "parole", "parolee", "parolees", "paroles", "paronomasia", "paronychia", "paronychias", "paronym", "paronyms", "paroquet", "paroquets", "parotid", "parotids", "parotitis", "parousia", "paroxysm", "paroxysms", "paroxytone", "paroxytones", "parpen", "parpend", "parpends", "parpens", "parquet", "parquetries", "parquetry", "parquets", "parr", "parrakeet", "parrakeets", "parramatta", "parramattas", "parrel", "parrels", "parricide", "parricides", "parries", "parroquet", "parroquets", "parrot", "parrots", "parrs", "parry", "pars", "parsec", "parsecs", "parsee", "parseeism", "parsees", "parser", "parsers", "parses", "parsifal", "parsimonies", "parsimoniousness", "parsimony", "parsley", "parsnip", "parsnips", "parson", "parsonage", "parsonages", "parsons", "part", "part off", "part owner", "part owners", "part singing", "part timer", "part timers", "part writing", "partaker", "partakers", "partan", "partans", "parterre", "parterres", "parthenocarpy", "parthenogenesis", "parthenon", "parthenope", "parthenos", "parthia", "parti", "partial", "partialities", "partiality", "partials", "participant", "participants", "participate", "participates", "participation", "participations", "participial", "participle", "participles", "particle", "particles", "particular", "particularisation", "particularism", "particularisms", "particularities", "particularity", "particularization", "particulars", "parties", "parting", "partings", "partisan", "partisans", "partisanship", "partita", "partitas", "partition", "partitioner", "partitioners", "partitioning", "partitionist", "partitionists", "partitionment", "partitionments", "partitions", "partitive", "partitives", "partizan", "partizans", "partlet", "partlets", "partner", "partners", "partnership", "partnerships", "parton", "partons", "partridge", "partridge wood", "partridges", "parts", "parturition", "party", "partygoer", "partygoers", "partyism", "parulis", "parulises", "parure", "parures", "parvati", "parvenu", "parvenus", "parvis", "parvises", "parvovirus", "parvoviruses", "pas", "pas de calais", "pasadena", "pascal", "pascale", "pascals", "pasch", "paschal", "paseo", "paseos", "pash", "pasha", "pashalik", "pashaliks", "pashas", "pashes", "pashm", "pashto", "pasigraphy", "pasolini", "paspalum", "paspalums", "pasquinade", "pasquinades", "pass", "passableness", "passacaglia", "passacaglias", "passade", "passades", "passado", "passadoes", "passados", "passage", "passages", "passageway", "passageways", "passament", "passaments", "passe partout", "passe partouts", "passel", "passels", "passementerie", "passementeries", "passenger", "passengers", "passepied", "passepieds", "passer", "passer by", "passerine", "passerines", "passers", "passes", "passibility", "passiflora", "passifloras", "passing", "passings", "passion", "passional", "passionals", "passionaries", "passionary", "passionateness", "passionist", "passions", "passive", "passiveness", "passives", "passivism", "passivist", "passivists", "passivities", "passivity", "passkey", "passkeys", "passover", "passovers", "passport", "passports", "passus", "passuses", "password", "passwords", "past", "pasta", "pastas", "paste", "paste up", "paste ups", "pasteboard", "pasteboards", "pastel", "pastelist", "pastelists", "pastels", "paster", "pastern", "pasternak", "pasterns", "pasters", "pastes", "pasteur", "pasteurellosis", "pasteurisation", "pasteurism", "pasteurization", "pasteurizer", "pasteurizers", "pasticcio", "pastiche", "pastiches", "pasticheur", "pasticheurs", "pasties", "pastil", "pastille", "pastilles", "pastils", "pastime", "pastimes", "pastiness", "pastis", "pastises", "pastor", "pastoral", "pastorale", "pastorales", "pastoralism", "pastoralist", "pastoralists", "pastorals", "pastorate", "pastorates", "pastors", "pastorship", "pastorships", "pastrami", "pastramis", "pastries", "pastry", "pasts", "pasturable", "pasturage", "pasturages", "pasture", "pastures", "pasty", "pat", "pataca", "patacas", "patagium", "patagonia", "patch", "patchboard", "patchboards", "patcher", "patchers", "patches", "patchiness", "patching", "patchings", "patchouli", "patchoulies", "patchoulis", "patchouly", "patchwork", "patchworks", "pate", "patella", "patellas", "paten", "patency", "patens", "patent", "patentee", "patentees", "patentor", "patentors", "patents", "pater", "paterfamilias", "paterfamiliases", "paternalism", "paternities", "paternity", "paternoster", "paternosters", "paters", "paterson", "pates", "path", "pathan", "pathfinder", "pathfinders", "pathic", "pathics", "pathogen", "pathogenesis", "pathogens", "pathognomy", "pathographies", "pathography", "pathologies", "pathologist", "pathologists", "pathology", "pathos", "paths", "pathway", "pathways", "patience", "patiences", "patient", "patients", "patin", "patina", "patinas", "patinated", "patines", "patins", "patio", "patios", "patisserie", "patisseries", "patmore", "patmos", "patna", "patness", "patois", "paton", "patresfamilias", "patrial", "patrials", "patriarch", "patriarchate", "patriarchates", "patriarchies", "patriarchs", "patriarchy", "patricia", "patrician", "patricians", "patriciate", "patriciates", "patricide", "patricides", "patrick", "patricks", "patrilineage", "patrilineages", "patriliny", "patrimonies", "patrimony", "patriot", "patriotism", "patriots", "patripassian", "patripassianism", "patroclus", "patrol", "patroller", "patrollers", "patrolling", "patrolman", "patrology", "patrols", "patron", "patronage", "patronages", "patroness", "patronesses", "patroniser", "patronisers", "patronizer", "patronizers", "patronne", "patronnes", "patrons", "patronymic", "patronymics", "patroon", "patroons", "patroonship", "patroonships", "pats", "patsies", "patsy", "patten", "pattens", "patter", "patterer", "patterers", "pattern", "patterns", "patters", "patti", "patties", "pattle", "pattles", "patton", "patty", "patty pan", "patty pans", "patzer", "patzers", "paua", "pauas", "paucity", "paughty", "paul", "paula", "pauldron", "pauldrons", "paulette", "pauli", "paulina", "pauling", "paulinism", "paulinist", "paulownia", "paulownias", "pauls", "paunch", "paunches", "paunchiness", "pauper", "pauperisation", "pauperisations", "pauperism", "pauperization", "pauperizations", "paupers", "pause", "pauser", "pausers", "pauses", "pavage", "pavages", "pavane", "pavanes", "pavement", "pavements", "paver", "pavers", "pavia", "pavilion", "pavilions", "pavin", "paving", "pavings", "pavior", "paviors", "paviour", "paviours", "pavis", "pavise", "pavises", "pavlov", "pavo", "paw", "pawl", "pawls", "pawn", "pawnbroker", "pawnbrokers", "pawnee", "pawnees", "pawner", "pawners", "pawning", "pawns", "pawnshop", "pawnshops", "pawpaw", "pawpaws", "paws", "pax", "paxes", "paxton", "paxwax", "paxwaxes", "pay", "pay phone", "pay phones", "pay station", "pay stations", "payday", "paydays", "payee", "payees", "payer", "payers", "paying", "payings", "paymaster", "paymasters", "payment", "payments", "paynim", "paynims", "payoff", "payoffs", "payola", "payolas", "pays", "paysheet", "paysheets", "pea", "pea souper", "pea soupers", "peace", "peaceableness", "peacefulness", "peacelessness", "peacemaker", "peacemakers", "peacemaking", "peacenik", "peaceniks", "peaces", "peacetime", "peacetimes", "peach", "peach blow", "peacher", "peachers", "peaches", "peacock", "peacockery", "peacocks", "peafowl", "peafowls", "peag", "peags", "peahen", "peahens", "peak", "peake", "peaks", "peal", "pealing", "peals", "pean", "peans", "peanut", "peanuts", "peapod", "peapods", "pear", "pearl", "pearler", "pearlers", "pearlies", "pearliness", "pearlite", "pearls", "pearly", "pearmain", "pearmains", "pears", "pearson", "peary", "peas", "peasant", "peasantries", "peasantry", "peasants", "pease", "peases", "peashooter", "peashooters", "peat", "peats", "peavey", "peavy", "peba", "pebas", "pebble", "pebbles", "pebbling", "pebblings", "pecan", "pecans", "peccadillo", "peccadilloes", "peccadillos", "peccancies", "peccancy", "peccaries", "peccary", "peccavi", "peccavis", "pech", "pechora", "pechs", "peck", "pecker", "peckers", "peckinpah", "pecks", "pecs", "pecten", "pectin", "pectination", "pectinations", "pectines", "pectization", "pectolite", "pectoral", "pectorals", "pectose", "peculation", "peculations", "peculator", "peculators", "peculiar", "peculiarities", "peculiarity", "peculiars", "peculium", "peculiums", "ped", "pedagogics", "pedagogism", "pedagogue", "pedagogueries", "pedagoguery", "pedagogues", "pedagogy", "pedal", "pedaller", "pedallers", "pedalo", "pedaloes", "pedalos", "pedals", "pedant", "pedanticism", "pedantries", "pedantry", "pedants", "peddler", "peddlers", "peddling", "pederast", "pederasts", "pederasty", "pedesis", "pedestal", "pedestals", "pedestrian", "pedestrianism", "pedestrians", "pedi", "pediatrician", "pediatricians", "pediatrics", "pedicab", "pedicabs", "pedicel", "pedicels", "pedicle", "pedicles", "pediculate", "pediculosis", "pedicure", "pedicures", "pedicurist", "pedicurists", "pedigree", "pedigrees", "pediment", "pediments", "pedipalp", "pedipalps", "pedlar", "pedlaries", "pedlars", "pedlary", "pedologist", "pedologists", "pedology", "pedometer", "pedometers", "pedro", "pedros", "peds", "peduncle", "peduncles", "pee", "peebles", "peeing", "peek", "peekaboo", "peeks", "peel", "peeler", "peelers", "peeling", "peelings", "peels", "peen", "peens", "peep", "peeper", "peepers", "peeps", "peepul", "peepuls", "peer", "peerage", "peerages", "peeress", "peeresses", "peerie", "peeries", "peerlessness", "peers", "pees", "peetweet", "peetweets", "peeve", "peevers", "peeves", "peevishness", "peewee", "peewees", "peewit", "peewits", "peg", "pegasus", "pegasuses", "pegboard", "pegboards", "pegh", "peghs", "pegmatite", "pegmatites", "pegs", "pehlevi", "peignoir", "peignoirs", "pein", "peins", "pejoration", "pejorations", "pejorative", "pejoratives", "pekan", "pekans", "peke", "pekes", "pekin", "pekinese", "peking", "pekingese", "pekoe", "pekoes", "pelage", "pelages", "pelagian", "pelagianism", "pelagius", "pelargonium", "pelargoniums", "pelasgian", "pelerine", "pelerines", "peleus", "pelf", "pelham", "pelhams", "pelican", "pelicans", "pelion", "pelisse", "pelisses", "pelite", "pelites", "pell mell", "pellagra", "pellet", "pelletier", "pellets", "pellicle", "pellicles", "pellitories", "pellitory", "pellucidity", "pellucidness", "pelmet", "pelmets", "peloid", "peloids", "peloponnese", "peloponnesian", "pelops", "peloria", "pelorus", "peloruses", "pelota", "pelotas", "pelt", "peltast", "peltasts", "pelter", "pelters", "pelting", "peltings", "peltry", "pelts", "pelvis", "pelvises", "pemba", "pembroke", "pembrokes", "pembrokeshire", "pemmican", "pemmicans", "pemphigoid", "pemphigus", "pen", "pen and ink", "pen friend", "pen friends", "penalisation", "penalisations", "penalization", "penalizations", "penalties", "penalty", "penance", "penances", "penang", "pence", "pencel", "pencels", "penchant", "penchants", "pencil", "pencils", "pendant", "pendants", "pendency", "pendent", "pendentive", "pendentives", "pendents", "penderecki", "pendragon", "pendragons", "pendragonship", "pendulum", "pendulums", "penelope", "peneplain", "peneplains", "penes", "penetrability", "penetrableness", "penetrance", "penetrances", "penetrant", "penetrants", "penetration", "penetrations", "penetrativeness", "penetrator", "penetrators", "peneus", "penguin", "penguins", "penholder", "penholders", "penicillin", "peninsula", "peninsularity", "peninsulas", "penis", "penises", "penitence", "penitences", "penitent", "penitential", "penitentiaries", "penitentiary", "penitents", "penknife", "penlight", "penlights", "penman", "penmanship", "penn", "penn orth", "penn orths", "penna", "pennaceous", "pennant", "pennants", "pennatula", "pennatulas", "pennies", "pennilessness", "penning", "penninite", "penninites", "pennon", "pennoncel", "pennoncelle", "pennoncelles", "pennoncels", "pennons", "pennsylvania", "pennsylvanian", "pennsylvanians", "penny", "penny a liner", "penny a liners", "penny farthing", "penny farthings", "penny pincher", "penny pinchers", "penny pinching", "penny stone", "pennycress", "pennyroyal", "pennyroyals", "pennyweight", "pennyweights", "pennywort", "pennyworth", "pennyworths", "pennyworts", "penologist", "penologists", "penology", "penoncel", "penoncels", "penpusher", "penpushers", "penrith", "pens", "pensil", "pensils", "pension", "pensionaries", "pensionary", "pensioner", "pensioners", "pensions", "pensiveness", "penstemon", "penstemons", "penstock", "penstocks", "pentachlorophenol", "pentacle", "pentacles", "pentad", "pentadactylism", "pentads", "pentagon", "pentagons", "pentagram", "pentagrams", "pentahedron", "pentahedrons", "pentalpha", "pentalphas", "pentameries", "pentamerism", "pentamery", "pentameter", "pentameters", "pentane", "pentanes", "pentangle", "pentangles", "pentapodies", "pentapody", "pentaprism", "pentaprisms", "pentarch", "pentarchies", "pentarchs", "pentarchy", "pentastich", "pentastichs", "pentateuch", "pentathlete", "pentathletes", "pentathlon", "pentathlons", "pentecost", "pentecostal", "pentene", "penthesilea", "penthouse", "penthouses", "pentimento", "pentlandite", "pentobarbital", "pentode", "pentodes", "pentosan", "pentosanes", "pentose", "pentothal", "pentoxide", "pentoxides", "pentstemon", "pentstemons", "penuche", "penuches", "penuchle", "penuchles", "penult", "penultima", "penultimas", "penultimate", "penultimates", "penults", "penumbra", "penumbras", "penuriousness", "penury", "penzance", "peon", "peonage", "peonies", "peonism", "peons", "peony", "people", "peoples", "peoria", "pep", "peperomia", "peperoni", "peperonis", "pepino", "pepinos", "peplos", "peploses", "peplum", "peplums", "pepo", "pepos", "pepper", "pepper and salt", "peppercorn", "peppercorns", "pepperer", "pepperers", "pepperiness", "peppermint", "peppermints", "pepperoni", "pepperonis", "peppers", "pepperwort", "pepperworts", "peppiness", "peps", "pepsin", "pepsines", "pepsinogen", "pepsins", "peptidase", "peptide", "peptides", "peptization", "peptizing", "peptone", "peptones", "peptonisation", "peptonization", "pepys", "pequot", "pequots", "peradventure", "peradventures", "perak", "perambulation", "perambulations", "perambulator", "perambulators", "percale", "percales", "percaline", "percalines", "perceiver", "perceivers", "perceiving", "perceivings", "percent", "percentage", "percentages", "percentile", "percentiles", "percents", "percept", "perceptibility", "perception", "perceptions", "perceptiveness", "perceptivities", "perceptivity", "percepts", "perceval", "perch", "percher", "perchers", "perches", "perchlorate", "perchlorates", "perchloroethylene", "percipience", "percipiency", "percipient", "percipients", "percival", "percoid", "percolate", "percolates", "percolation", "percolations", "percolator", "percolators", "percussion", "percussionist", "percussionists", "percussions", "percussor", "percussors", "percy", "perdita", "perdition", "perdu", "perdues", "perdurability", "perdus", "peregrination", "peregrinations", "peregrinator", "peregrinators", "peregrine", "peregrines", "peregrinity", "pereion", "perelman", "perennial", "perenniality", "perennials", "perfect", "perfecta", "perfectas", "perfecter", "perfecters", "perfectibilist", "perfectibilists", "perfectibility", "perfection", "perfectionism", "perfectionist", "perfectionists", "perfections", "perfective", "perfectness", "perfecto", "perfectos", "perfects", "perfervor", "perfervour", "perfidies", "perfidiousness", "perfidy", "perforation", "perforations", "perforator", "perforators", "performance", "performances", "performer", "performers", "performing", "performings", "perfume", "perfumer", "perfumeries", "perfumers", "perfumery", "perfumes", "perfunctoriness", "perfusion", "perfusions", "pergamum", "pergola", "pergolas", "pergolesi", "peri", "perianth", "perianths", "periapt", "periastron", "periblast", "periblem", "periblems", "peribolos", "peribolus", "pericarditis", "pericardium", "pericardiums", "pericarp", "pericarps", "perichaetium", "perichaetiums", "perichondrium", "perichondriums", "periclase", "pericles", "pericline", "periclines", "pericope", "pericopes", "pericranium", "pericraniums", "pericycle", "pericycles", "pericynthion", "pericynthions", "periderm", "periderms", "peridinian", "peridinians", "peridinium", "peridiniums", "peridium", "peridiums", "peridot", "peridotes", "peridotite", "peridots", "peridrome", "peridromes", "perigee", "perigees", "perigon", "perigone", "perigones", "perigonium", "perigoniums", "perigons", "perigordian", "perihelion", "perihelions", "peril", "perilousness", "perils", "perilune", "perilymph", "perilymphs", "perimeter", "perimeters", "perimorph", "perimorphs", "perimysium", "perimysiums", "perinephrium", "perinephriums", "perineum", "perineums", "perineuritis", "perineurium", "perineuriums", "period", "periodate", "periodates", "periodical", "periodicalist", "periodicalists", "periodicals", "periodicity", "periodization", "periodizations", "periodontia", "periodontics", "periodontist", "periodontists", "periodontitis", "periods", "perionychium", "perionychiums", "periosteum", "periostitis", "periostracum", "periostracums", "peripatetic", "peripateticism", "peripatus", "peripatuses", "peripeteia", "peripeteias", "peripheral", "peripherally", "peripherals", "peripheries", "periphery", "periphrasis", "periphyton", "periptery", "perique", "peris", "perisarc", "perisarcs", "periscope", "periscopes", "perishability", "perishable", "perishableness", "perishables", "perisher", "perishers", "perisperm", "perisperms", "perispomenon", "perispomenons", "perissodactyl", "perissodactyla", "perissodactyls", "peristalith", "peristaliths", "peristalsis", "peristerite", "peristome", "peristomes", "peristyle", "peristyles", "perithecium", "peritoneum", "peritoneums", "peritonitis", "peritrich", "periwig", "periwigs", "periwinkle", "periwinkles", "perjurer", "perjurers", "perjuries", "perjury", "perk", "perkiness", "perks", "perlite", "perlites", "perlman", "perlocution", "perlocutions", "perm", "permafrost", "permalloy", "permalloys", "permanence", "permanences", "permanencies", "permanency", "permanent", "permanganate", "permanganates", "permeabilities", "permeability", "permeameter", "permeameters", "permeance", "permeation", "permeations", "permian", "permissibility", "permission", "permissions", "permissiveness", "permit", "permits", "permittivity", "perms", "permutability", "permutation", "permutations", "pernancy", "perniciousness", "pernicketiness", "pernod", "peroneus", "peroneuses", "peronism", "peronist", "peronista", "peronists", "peroration", "perorations", "peroxidase", "peroxidation", "peroxidations", "peroxide", "peroxides", "perpend", "perpendicular", "perpendicularity", "perpendiculars", "perpends", "perpent", "perpents", "perpetration", "perpetrations", "perpetrator", "perpetrators", "perpetual", "perpetualities", "perpetuality", "perpetuals", "perpetuance", "perpetuances", "perpetuation", "perpetuations", "perpetuator", "perpetuators", "perpetuities", "perpetuity", "perpignan", "perplexedness", "perplexities", "perplexity", "perquisite", "perquisites", "perrault", "perries", "perrin", "perron", "perrons", "perruquier", "perruquiers", "perry", "persecution", "persecutions", "persecutor", "persecutors", "perseid", "perseids", "perseities", "perseity", "persephone", "persepolis", "perseus", "perseverance", "perseverances", "perseveration", "perseverations", "pershing", "persia", "persian", "persians", "persicaria", "persiflage", "persiflages", "persimmon", "persimmons", "persistence", "persistences", "persistencies", "persistency", "person", "persona", "personableness", "personage", "personages", "personal", "personalisation", "personalism", "personalist", "personalists", "personalities", "personality", "personalization", "personals", "personalties", "personalty", "personas", "personation", "personations", "personator", "personators", "personhood", "personification", "personifications", "personifier", "personifiers", "personnel", "personnels", "persons", "perspective", "perspectives", "perspectivism", "perspectivist", "perspectivists", "perspex", "perspicaciousness", "perspicacity", "perspicuities", "perspicuity", "perspicuousness", "perspiration", "perspiring", "persuader", "persuaders", "persuasibility", "persuasion", "persuasions", "persuasiveness", "perth", "perthshire", "pertinaciousness", "pertinacity", "pertinence", "pertinency", "pertness", "perturbation", "perturbations", "perturbative", "perturbator", "perturbators", "perturber", "perturbers", "pertussis", "peru", "perugia", "perugino", "peruke", "perukes", "perusal", "perusals", "peruser", "perusers", "perusing", "perutz", "peruvian", "peruvians", "peruzzi", "perv", "pervasion", "pervasions", "pervasiveness", "perverseness", "perversion", "perversions", "perversities", "perversity", "pervert", "perverter", "perverters", "perverts", "perves", "pervicaciousness", "perviousness", "pervs", "pesach", "pesade", "pesades", "pesaro", "pescara", "peseta", "pesetas", "pesewa", "pesewas", "peshawar", "peshitta", "peso", "pesos", "pessaries", "pessary", "pessimism", "pessimist", "pessimists", "pest", "pestalozzian", "pesterer", "pesterers", "pesthouse", "pesthouses", "pesticide", "pesticides", "pestilence", "pestilences", "pestle", "pestles", "pests", "pet", "petal", "petalody", "petals", "petard", "petards", "petasus", "petasuses", "petcharies", "petchary", "petcock", "petcocks", "pete", "petechia", "peter", "peterborough", "peterlee", "peters", "petersham", "petershams", "peterson", "pethidine", "petiole", "petioles", "petiolule", "petiolules", "petite", "petition", "petitioner", "petitioners", "petitionist", "petitionists", "petitions", "petra", "petrarch", "petrarchan", "petrarchist", "petrel", "petrels", "petrifaction", "petrifactions", "petrification", "petrifications", "petrinism", "petrochemical", "petrochemicals", "petrochemistry", "petrodollar", "petrodollars", "petrogenesis", "petroglyph", "petroglyphs", "petrograd", "petrogram", "petrograms", "petrographer", "petrographers", "petrography", "petrol", "petrolatum", "petroleum", "petrologist", "petrology", "petrols", "petronel", "petronels", "petronius", "petrosian", "pets", "pettedness", "petticoat", "petticoats", "pettifogger", "pettifoggers", "pettiness", "petting", "pettings", "pettishness", "petula", "petulance", "petulancy", "petunia", "petunias", "petuntse", "pevsner", "pew", "pewee", "pewees", "pewit", "pewits", "pews", "pewter", "pewters", "peyote", "pfennig", "pfennigs", "pforzheim", "phacelia", "phacelias", "phacolite", "phacolites", "phaeacian", "phaeacians", "phaedra", "phaedrus", "phaethon", "phaeton", "phaetons", "phage", "phagedena", "phages", "phagocyte", "phagocytes", "phagocytosis", "phagophobia", "phalange", "phalanger", "phalangers", "phalanges", "phalansterian", "phalanstery", "phalanx", "phalanxes", "phalarope", "phalaropes", "phallicism", "phallus", "phalluses", "phanerogam", "phanerogams", "phanerophyte", "phanerophytes", "phantasies", "phantasm", "phantasmagoria", "phantasmagorias", "phantasms", "phantasy", "phantom", "phantoms", "pharaoh", "pharaohs", "pharisee", "pharisees", "pharmaceutical", "pharmaceuticals", "pharmaceutics", "pharmacies", "pharmacist", "pharmacists", "pharmacodynamics", "pharmacognosist", "pharmacognosy", "pharmacologist", "pharmacologists", "pharmacology", "pharmacopoeia", "pharmacopoeias", "pharmacy", "pharos", "pharoses", "pharyngeal", "pharyngitis", "pharyngology", "pharyngoscope", "pharyngoscopes", "pharyngoscopy", "pharyngotomies", "pharyngotomy", "pharynx", "pharynxes", "phase", "phases", "phasis", "phasmid", "phasmids", "pheasant", "pheasant s eye", "pheasants", "pheidippides", "phellem", "phellems", "phelloderm", "phellogen", "phellogens", "phelonion", "phelonions", "phenacetin", "phenacite", "phenobarbital", "phenobarbitone", "phenocryst", "phenocrysts", "phenol", "phenolate", "phenolates", "phenolic", "phenology", "phenolphthalein", "phenols", "phenomena", "phenomenalism", "phenomenalist", "phenomenalists", "phenomenality", "phenomenology", "phenomenon", "phenothiazine", "phenotype", "phenotypes", "phenyl", "phenylalanine", "phenylbutazone", "phenylketonuria", "pheon", "pheons", "pheromone", "pheromones", "phi", "phial", "phials", "phidias", "phidippides", "phil", "philabeg", "philabegs", "philadelphia", "philadelphus", "philadelphuses", "philanderer", "philanderers", "philanthropies", "philanthropist", "philanthropists", "philanthropy", "philatelist", "philatelists", "philately", "philby", "philemon", "philharmonic", "philhellene", "philhellenes", "philhellenism", "philibeg", "philibegs", "philip", "philippa", "philippi", "philippian", "philippians", "philippic", "philippics", "philippine", "philippines", "philistine", "philistines", "philistinism", "phillip", "phillips", "phillumenist", "phillumenists", "philoctetes", "philodendron", "philodendrons", "philogyny", "philologer", "philologers", "philologian", "philologians", "philologist", "philologists", "philologue", "philologues", "philology", "philomel", "philomela", "philopena", "philopenas", "philosopher", "philosophers", "philosophies", "philosophiser", "philosophisers", "philosophism", "philosophizer", "philosophizers", "philosophizing", "philosophy", "philter", "philters", "philtre", "philtres", "phimosis", "phiz", "phlebitis", "phlebotomist", "phlebotomists", "phlebotomy", "phlegm", "phloem", "phloems", "phlogiston", "phlogopite", "phlox", "phloxes", "phlyctaena", "phlyctena", "phobia", "phobias", "phobos", "phoca", "phocas", "phocomelia", "phoebe", "phoebes", "phoebus", "phoenicia", "phoenician", "phoenicians", "phoenix", "phoenixes", "pholas", "phon", "phonasthenia", "phonation", "phonautograph", "phonautographs", "phone", "phone in", "phone ins", "phoneme", "phonemes", "phonemicist", "phonemicists", "phonemics", "phonendoscope", "phonendoscopes", "phoner", "phoners", "phones", "phonetician", "phoneticians", "phonetics", "phonetist", "phonetists", "phoney", "phoneys", "phonics", "phonies", "phoniness", "phonogram", "phonograms", "phonograph", "phonographer", "phonographers", "phonographist", "phonographists", "phonographs", "phonography", "phonolite", "phonologist", "phonologists", "phonology", "phonometer", "phonometers", "phonon", "phonons", "phonophore", "phonophores", "phonotactics", "phonotype", "phonotypes", "phonotypist", "phonotypy", "phons", "phony", "phoresy", "phosgene", "phosphate", "phosphates", "phosphatide", "phosphaturia", "phosphene", "phosphenes", "phosphide", "phosphides", "phosphine", "phosphines", "phosphite", "phosphites", "phospholipid", "phosphonium", "phosphoprotein", "phosphoproteins", "phosphor", "phosphorescence", "phosphorism", "phosphorite", "phosphorus", "phosphorylase", "phosphorylation", "phot", "photics", "photism", "photo", "photo offset", "photocell", "photocells", "photochemist", "photochemistry", "photochromy", "photocomposition", "photoconductivity", "photocopier", "photocopiers", "photocopies", "photocopy", "photoelasticity", "photoelectron", "photoelectrons", "photoengraver", "photoengravers", "photoengraving", "photoengravings", "photofission", "photofit", "photoflash", "photoflashes", "photoflood", "photofloods", "photogen", "photogene", "photogenes", "photogens", "photogeology", "photogram", "photogrammetry", "photograms", "photograph", "photographer", "photographers", "photographs", "photography", "photogravure", "photogravures", "photojournalism", "photojournalist", "photojournalists", "photokinesis", "photolithograph", "photolithographer", "photolithography", "photoluminescence", "photolysis", "photomechanical", "photometer", "photometers", "photometry", "photomicrograph", "photomicrography", "photomontage", "photomontages", "photomultiplier", "photon", "photonasty", "photons", "photoperiod", "photoperiodism", "photoperiods", "photophily", "photophobia", "photophore", "photophores", "photopia", "photoreceptor", "photoreceptors", "photos", "photosphere", "photostat", "photostats", "photosynthesis", "photosynthesises", "phototaxis", "phototelegraph", "phototelegraphs", "phototelegraphy", "phototherapeutics", "phototherapy", "phototropism", "phototype", "phototypes", "phototypesetting", "phototypy", "photozincography", "phots", "phrase", "phraseogram", "phraseograms", "phraseograph", "phraseographs", "phraseologies", "phraseologist", "phraseology", "phrases", "phrasing", "phrasings", "phratries", "phratry", "phreatophyte", "phreatophytes", "phrenitis", "phrenologist", "phrenologists", "phrenology", "phrensy", "phrygia", "phrygian", "phthalein", "phthaleins", "phthalocyanine", "phthiriasis", "phthisic", "phthisis", "phuket", "phut", "phuts", "phycocyanin", "phycoerythrin", "phycologist", "phycologists", "phycology", "phycomycete", "phycomycetes", "phyla", "phylacteries", "phylactery", "phyle", "phyles", "phyllaries", "phyllary", "phyllida", "phyllis", "phyllite", "phyllo", "phylloclade", "phylloclades", "phyllode", "phyllodes", "phyllody", "phyllome", "phyllomes", "phyllopod", "phyllopods", "phylloquinone", "phyllotaxis", "phylloxera", "phylloxeras", "phylogenesis", "phylogeny", "phylum", "physalia", "physalias", "physalis", "physalises", "physeter", "physic", "physical", "physicalism", "physicality", "physician", "physicians", "physicianship", "physicist", "physicists", "physics", "physiocrat", "physiocrats", "physiognomies", "physiognomist", "physiognomists", "physiognomy", "physiography", "physiologist", "physiologists", "physiology", "physiotherapist", "physiotherapists", "physiotherapy", "physique", "physiques", "phytogenesis", "phytogeographer", "phytogeography", "phytographer", "phytographers", "phytography", "phytohormone", "phytologist", "phytologists", "phytology", "phyton", "phytonadione", "phytons", "phytopathologist", "phytopathology", "phytoplankton", "phytotoxin", "phytotoxins", "phytotron", "phytotrons", "pia", "piacenza", "piaf", "piaffe", "piaffes", "piaget", "pianette", "pianettes", "pianism", "pianissimo", "pianist", "pianists", "piano", "pianoforte", "pianofortes", "pianola", "pianolas", "pianos", "pias", "piassava", "piassavas", "piastre", "piastres", "piazza", "piazzas", "pibroch", "pibrochs", "pic", "pica", "picador", "picadors", "picard", "picardy", "picaroon", "picaroons", "picas", "picasso", "picayune", "picayunes", "piccalilli", "piccolo", "piccolos", "pice", "pichiciago", "pichiciagos", "pick", "pick me up", "pick me ups", "pick up", "pick ups", "pickaback", "pickabacks", "pickaninnies", "pickaninny", "pickax", "pickaxe", "pickaxes", "pickelhaube", "pickelhaubes", "picker", "pickerel", "pickerels", "pickering", "pickers", "picket", "picketer", "picketers", "pickets", "pickford", "picking", "pickings", "pickle", "pickles", "picklock", "picklocks", "picks", "picnic", "picnicker", "picnickers", "picnics", "picocurie", "picocuries", "picornavirus", "picornaviruses", "picosecond", "picoseconds", "picot", "picotee", "picotees", "picots", "picrate", "picrates", "picrite", "picrites", "picrotoxin", "pics", "pict", "pictish", "pictogram", "pictograms", "pictograph", "pictographs", "pictor", "pictorial", "pictorials", "picture", "picturegoer", "picturegoers", "pictures", "picturesqueness", "picturing", "picul", "piculs", "picus", "piddle", "piddler", "piddlers", "piddles", "piddock", "piddocks", "pidgin", "pidginization", "pidgins", "pie", "pie dog", "pie dogs", "piebald", "piebalds", "piece", "piecer", "piecers", "pieces", "piecrust", "piecrusts", "piedmont", "piedmontite", "pieman", "piemonte", "piend", "piends", "pier", "pierce", "piercer", "piercers", "pierces", "piercingness", "pieria", "pierid", "pierids", "piero", "pierre", "pierrette", "pierrot", "pierrots", "piers", "pies", "piet", "pietermaritzburg", "pieties", "pietism", "piets", "piety", "piezochemistry", "piezoelectricity", "piezometer", "piezometers", "piffle", "piffles", "pig", "pigboat", "pigboats", "pigeon", "pigeonhole", "pigeonholes", "pigeonholing", "pigeons", "piggeries", "piggery", "piggie", "piggies", "piggin", "piggins", "piggishness", "piggott", "piggy", "piggyback", "piggybacks", "pigheadedness", "piglet", "piglets", "pigling", "piglings", "pigmeat", "pigment", "pigmentation", "pigmentations", "pigments", "pigmies", "pigmy", "pigpen", "pigpens", "pigs", "pigskin", "pigskins", "pigsties", "pigsty", "pigswill", "pigswills", "pigtail", "pigtails", "pigwash", "pigwashes", "pigweed", "pigweeds", "pika", "pikas", "pike", "pikelet", "pikelets", "pikeman", "piker", "pikers", "pikes", "pikestaff", "pikestaffs", "pilaf", "pilaff", "pilaffs", "pilafs", "pilaster", "pilastered", "pilasters", "pilate", "pilatus", "pilau", "pilaus", "pilaw", "pilaws", "pilch", "pilchard", "pilchards", "pilcher", "pilches", "pile", "pile driver", "pile drivers", "pilea", "piles", "pileum", "pileus", "pilewort", "pileworts", "pilferage", "pilferages", "pilferer", "pilferers", "pilgarlic", "pilgarlics", "pilgrim", "pilgrimage", "pilgrimages", "pilgrims", "pili", "piling", "pilis", "pill", "pillage", "pillager", "pillagers", "pillages", "pillaging", "pillar", "pillars", "pillion", "pillions", "pilliwinks", "pilliwinkses", "pillories", "pillory", "pillow", "pillowcase", "pillowcases", "pillows", "pills", "pillwort", "pillworts", "pilocarpine", "pilosity", "pilot", "pilotage", "piloting", "pilots", "pilsen", "pilsner", "pilular", "pilule", "pilules", "pilus", "pimento", "pimentos", "pimiento", "pimientos", "pimp", "pimpernel", "pimpernels", "pimple", "pimples", "pimply", "pimps", "pin", "pin up", "pin ups", "pinacoid", "pinacoids", "pinafore", "pinafores", "pinaster", "pinasters", "pinball", "pince nez", "pincer", "pincers", "pinch", "pinchbeck", "pinchbecks", "pinchcock", "pinchcocks", "pincher", "pinchers", "pinches", "pinchgut", "pinchguts", "pinchpennies", "pinchpenny", "pincushion", "pincushions", "pindar", "pindaric", "pine", "pineapple", "pineapples", "pineries", "pinero", "pinery", "pines", "pinetum", "pinfish", "pinfishes", "pinfold", "pinfolds", "ping", "ping pong", "pingo", "pingoes", "pingos", "pings", "pinguidity", "pinhead", "pinheads", "pinhole", "pinholes", "pining", "pinion", "pinions", "pinite", "pink", "pinkerton", "pinkie", "pinkies", "pinko", "pinkoes", "pinkos", "pinkroot", "pinkroots", "pinks", "pinkster", "pinky", "pinna", "pinnace", "pinnaces", "pinnacle", "pinnacles", "pinnatiped", "pinner", "pinners", "pinnies", "pinning", "pinnings", "pinniped", "pinnipedes", "pinnipeds", "pinnula", "pinnulas", "pinnule", "pinnules", "pinny", "pinochet", "pinochle", "pinochles", "pinole", "pinoles", "pinot", "pinots", "pinpoint", "pinpoints", "pins", "pint", "pinta", "pintado", "pintados", "pintail", "pintails", "pintas", "pinter", "pintle", "pintles", "pinto", "pints", "pinxit", "pinxter", "piolet", "piolets", "pion", "pioneer", "pioneers", "pions", "piousness", "pip", "pipa", "pipage", "pipal", "pipals", "pipas", "pipe", "pipeclay", "pipeful", "pipefuls", "pipeline", "pipelines", "piper", "piperazine", "piperidine", "piperine", "piperonal", "pipers", "pipes", "pipestone", "pipestones", "pipette", "pipettes", "pipework", "pipeworks", "pipewort", "pipeworts", "piping", "pipings", "pipistrelle", "pipistrelles", "pipit", "pipits", "pipkin", "pipkins", "pippa", "pippin", "pippins", "pips", "pipsqueak", "pipsqueaks", "pipul", "pipuls", "piquancy", "pique", "piques", "piquet", "piquets", "piracies", "piracy", "piraeus", "piragua", "piraguas", "pirandello", "piranesi", "piranha", "piranhas", "pirate", "pirates", "pirn", "pirns", "pirog", "pirogi", "pirogue", "pirogues", "piroshki", "pirouette", "pirouettes", "pirozhki", "pisa", "pisano", "piscaries", "piscary", "piscator", "piscators", "pisces", "pisciculture", "pisciculturist", "pisciculturists", "piscina", "piscinas", "pishogue", "pisiform", "pisiforms", "pisistratus", "pismire", "pismires", "pisolite", "pisolites", "piss", "pissarro", "pisses", "pissing", "pistachio", "pistachios", "pistareen", "pistareens", "piste", "pistes", "pistil", "pistils", "pistol", "pistole", "pistoleer", "pistoles", "pistols", "piston", "pistons", "pit", "pita", "pitapat", "pitapats", "pitas", "pitch", "pitch and toss", "pitch farthing", "pitchblende", "pitcher", "pitcherful", "pitcherfuls", "pitchers", "pitches", "pitchfork", "pitchforks", "pitchiness", "pitching", "pitchings", "pitchman", "pitchstone", "piteousness", "pitfall", "pitfalls", "pith", "pithead", "pitheads", "pithecanthropus", "pithiness", "pithos", "pithoses", "piths", "pitiableness", "pitier", "pitiers", "pities", "pitifulness", "pitilessness", "pitman", "piton", "pitons", "pits", "pitsaw", "pitsaws", "pitt", "pitta", "pittance", "pittances", "pittas", "pitter patter", "pitting", "pittings", "pittsburgh", "pituitaries", "pituitary", "pituri", "pituris", "pity", "pityriasis", "pius", "pivot", "pivoting", "pivots", "pix", "pixel", "pixels", "pixes", "pixie", "pixies", "pixy", "pizarro", "pizza", "pizzas", "pizzazz", "pizzeria", "pizzerias", "pizzicato", "pizzicatos", "pizzle", "pizzles", "placability", "placableness", "placard", "placards", "placation", "placations", "place", "placebo", "placeboes", "placebos", "placeman", "placement", "placements", "placenta", "placental", "placentals", "placentas", "placentation", "placer", "placers", "places", "placet", "placets", "placidity", "placidness", "placido", "plack", "placket", "plackets", "placks", "placoderm", "placoderms", "plafond", "plafonds", "plage", "plages", "plagiaries", "plagiariser", "plagiarisers", "plagiarism", "plagiarist", "plagiarists", "plagiary", "plagiocephaly", "plagioclase", "plagioclases", "plagiotropism", "plague", "plagues", "plaice", "plaices", "plaid", "plaids", "plain", "plainness", "plains", "plainsman", "plainsong", "plainsongs", "plaint", "plaintiff", "plaintiffs", "plaintiveness", "plaints", "plaister", "plait", "plaiting", "plaitings", "plaits", "plan", "planarian", "planarians", "planation", "planations", "planch", "planches", "planchet", "planchets", "planchette", "planchettes", "planck", "plane", "planer", "planers", "planes", "planet", "planetarium", "planetariums", "planetary", "planetesimal", "planetoid", "planetoids", "planetology", "planets", "plangency", "planigraph", "planigraphs", "planimeter", "planimeters", "planimetry", "planisphere", "planispheres", "plank", "plank bed", "plank beds", "planking", "planks", "plankton", "planner", "planners", "planning", "planoblast", "planoblasts", "planogamete", "planogametes", "planometer", "planometers", "plans", "plant", "plantagenet", "plantagenets", "plantain", "plantain eater", "plantain eaters", "plantains", "plantation", "plantations", "planter", "planters", "plantigrade", "plantigrades", "planting", "plantings", "plantocracies", "plantocracy", "plants", "planula", "plaque", "plaques", "plash", "plashes", "plasm", "plasma", "plasmapheresis", "plasmas", "plasmin", "plasminogen", "plasmodesma", "plasmodium", "plasmodiums", "plasmogamy", "plasmolysis", "plasmolytic", "plasmosome", "plasmosomes", "plasms", "plaster", "plasterboard", "plasterboards", "plasterer", "plasterers", "plasteriness", "plastering", "plasterings", "plasters", "plastic", "plasticine", "plasticity", "plasticizer", "plasticizers", "plastics", "plastid", "plastids", "plastique", "plastral", "plastron", "plastrons", "plat", "platan", "platanes", "platans", "platband", "platbands", "plate", "plateau", "plateaus", "plateful", "platefuls", "platelayer", "platelayers", "platelet", "platelets", "platemark", "platen", "platens", "plater", "platers", "plates", "platform", "platforms", "plath", "platies", "platina", "plating", "platings", "platinotype", "platinotypes", "platinum", "platitude", "platitudes", "plato", "platonism", "platoon", "platoons", "plats", "platteland", "platter", "platters", "platy", "platyhelminth", "platyhelminthes", "platyhelminths", "platypus", "platypuses", "platyrrhine", "platyrrhines", "platys", "platysma", "platysmas", "plaudit", "plaudits", "plausibility", "plausibleness", "plautus", "play", "play off", "play offs", "playa", "playas", "playback", "playbacks", "playbill", "playbills", "playbook", "playbooks", "playboy", "playboys", "player", "players", "playfellow", "playfellows", "playfulness", "playgirl", "playgirls", "playground", "playgrounds", "playhouse", "playhouses", "playing", "playings", "playlet", "playlets", "playmate", "playmates", "playroom", "playrooms", "plays", "playschool", "playschools", "playsuit", "playsuits", "plaything", "playthings", "playtime", "playtimes", "playwright", "playwrights", "plaza", "plazas", "plea", "pleader", "pleaders", "pleading", "pleadings", "pleas", "pleasance", "pleasances", "pleasantness", "pleasantries", "pleasantry", "pleaser", "pleasers", "pleasing", "pleasingness", "pleasings", "pleasurableness", "pleasure", "pleasures", "pleat", "pleater", "pleaters", "pleating", "pleats", "pleb", "plebeian", "plebeianism", "plebeianisms", "plebeians", "plebiscite", "plebiscites", "plebs", "plectron", "plectrons", "plectrum", "plectrums", "pledge", "pledgee", "pledgees", "pledger", "pledgers", "pledges", "pledget", "pledgets", "pledgor", "pledgors", "pleiad", "pleiades", "pleiads", "pleiocene", "pleiomery", "pleiotropism", "pleistocene", "plenary", "plenipotentiaries", "plenipotentiary", "plenitude", "plenitudes", "plenteousness", "plentifulness", "plentitude", "plentitudes", "plenty", "plenum", "plenums", "pleochroism", "pleomorphism", "pleon", "pleonasm", "pleonasms", "pleonaste", "pleonastes", "pleons", "pleopod", "pleopods", "plesiosaur", "plesiosaurs", "plessor", "plessors", "plethora", "plethoras", "plethysmograph", "plethysmographs", "pleura", "pleurisy", "pleurodont", "pleurodynia", "pleuron", "pleurotomies", "pleurotomy", "plexiglas", "plexiglass", "pleximeter", "pleximeters", "pleximetry", "plexor", "plexors", "plexus", "plexuses", "pliability", "pliableness", "pliancy", "pliantness", "plica", "plication", "plications", "plier", "pliers", "plies", "plight", "plights", "plimsoll", "plimsolls", "plink", "plinks", "plinth", "plinths", "pliny", "pliocene", "plod", "plodder", "plodders", "plodding", "ploddings", "plodge", "plodges", "plods", "plonk", "plonks", "plop", "plops", "plosion", "plosions", "plosive", "plosives", "plot", "plotinus", "plots", "plotter", "plotters", "plough", "ploughboy", "ploughboys", "plougher", "ploughers", "ploughing", "ploughings", "ploughman", "ploughs", "ploughshare", "ploughshares", "ploughwright", "ploughwrights", "plovdiv", "plover", "plovers", "plow", "plowboy", "plowboys", "plower", "plowers", "plowman", "plows", "plowshare", "plowshares", "ploy", "ploys", "pluck", "plucker", "pluckers", "pluckiness", "plucks", "plug", "plug uglies", "plug ugly", "plugger", "pluggers", "plughole", "plugholes", "plugs", "plum", "plumage", "plumages", "plumb", "plumbago", "plumbagos", "plumber", "plumberies", "plumbers", "plumbery", "plumbing", "plumbism", "plumbs", "plumbum", "plumcot", "plumcots", "plume", "plumes", "plummet", "plummets", "plump", "plumper", "plumpers", "plumpness", "plumps", "plums", "plumule", "plumules", "plunder", "plunderage", "plunderer", "plunderers", "plundering", "plunders", "plunge", "plunger", "plungers", "plunges", "plunk", "plunker", "plunkers", "plunks", "pluperfect", "pluperfects", "plural", "pluralisation", "pluralisations", "pluralism", "pluralisms", "pluralist", "pluralists", "pluralities", "plurality", "pluralization", "pluralizations", "plurals", "pluripresence", "plus", "pluses", "plush", "plushes", "plushness", "plutarch", "pluteus", "pluteuses", "pluto", "plutocracies", "plutocracy", "plutocrat", "plutocrats", "pluton", "plutonium", "plutons", "plutus", "pluvial", "pluvials", "pluviometer", "pluviometers", "pluviose", "ply", "plymouth", "plywood", "plywoods", "pneuma", "pneumas", "pneumatic", "pneumaticity", "pneumatics", "pneumatologist", "pneumatologists", "pneumatology", "pneumatolysis", "pneumatometer", "pneumatometers", "pneumatophore", "pneumatophores", "pneumococcus", "pneumoconiosis", "pneumodynamics", "pneumogastric", "pneumonectomies", "pneumonectomy", "pneumonia", "pneumonitis", "pneumonoultramicroscopicsilicovolcanoconiosis", "pneumothorax", "poa", "poacher", "poachers", "poachiness", "poaching", "poachings", "poas", "pocahontas", "pochard", "pochards", "pochette", "pochettes", "pock", "pocket", "pocket handkerchief", "pocket handkerchiefs", "pocketful", "pocketfuls", "pocketing", "pockets", "pockmark", "pockmarks", "pocks", "pococurante", "pococuranteism", "pococurantism", "pod", "podagra", "poddy", "podginess", "podiatrist", "podiatrists", "podiatry", "podite", "podites", "podium", "podiums", "podocarp", "podophyllin", "pods", "podsol", "podsols", "podunk", "podzol", "podzols", "poe", "poem", "poems", "poenology", "poesies", "poesy", "poet", "poetaster", "poetastering", "poetasters", "poetastery", "poetastry", "poetess", "poetesses", "poetics", "poetries", "poetry", "poets", "pogge", "pogges", "pogies", "pogrom", "pogroms", "pogy", "pohutukawa", "poi", "poignancies", "poignancy", "poikilothermy", "poilu", "poinciana", "poincianas", "poinsettia", "poinsettias", "point", "point to point", "point to points", "pointe", "pointedness", "pointel", "pointels", "pointer", "pointers", "pointillism", "pointillist", "pointillists", "pointing", "pointings", "pointlessness", "points", "pointsman", "pois", "poise", "poiser", "poisers", "poises", "poison", "poisoner", "poisoners", "poisoning", "poisons", "poisson", "poitiers", "poitou charentes", "poke", "pokeberries", "pokeberry", "poker", "pokers", "pokes", "pokeweed", "pokeweeds", "pokey", "pokeys", "pokies", "pokiness", "poking", "poky", "polacca", "polaccas", "polack", "polacre", "polacres", "poland", "polanski", "polarimeter", "polarimeters", "polaris", "polarisation", "polarisations", "polariscope", "polariscopes", "polariser", "polarisers", "polarities", "polarity", "polarization", "polarizations", "polarography", "polaroid", "polder", "polders", "pole", "pole vaulter", "pole vaulters", "polecat", "polecats", "polemarch", "polemarchs", "polemic", "polemics", "polemist", "polemists", "polemonium", "polemoniums", "polenta", "polentas", "poler", "polers", "poles", "polestar", "polestars", "poleyn", "poleyns", "polianite", "police", "policeman", "polices", "policewoman", "policies", "policy", "polio", "poliomyelitis", "polios", "polish", "polisher", "polishers", "polishes", "polishing", "polishings", "politburo", "politeness", "politesse", "politician", "politicians", "politicking", "politico", "politicoes", "politicos", "politics", "polities", "polity", "polje", "poljes", "polk", "polka", "polkas", "polks", "poll", "pollack", "pollacks", "pollaiuolo", "pollan", "pollans", "pollard", "pollards", "pollen", "pollenosis", "pollens", "pollex", "pollicitation", "pollicitations", "pollination", "pollinations", "pollinator", "pollinators", "pollinium", "polliwog", "polliwogs", "pollock", "pollocks", "polls", "pollster", "pollsters", "pollutant", "pollutants", "pollutedness", "polluter", "polluters", "pollution", "pollutions", "pollux", "pollyanna", "pollyannas", "pollywog", "pollywogs", "polo", "polo neck", "poloist", "poloists", "polonaise", "polonaises", "polonies", "polonium", "polonius", "polonization", "polony", "polos", "polska", "poltergeist", "poltergeists", "poltroon", "poltroonery", "poltroons", "poly", "polyacid", "polyamide", "polyamides", "polyandry", "polyanthus", "polyanthuses", "polyarchies", "polyarchy", "polybius", "polychaeta", "polychaete", "polychaetes", "polychrome", "polychromes", "polychromy", "polyclinic", "polyclinics", "polyclitus", "polycrates", "polycrystal", "polycrystals", "polycyclic", "polydactyl", "polydactylism", "polydactyls", "polydaemonism", "polydipsia", "polyembryony", "polyester", "polyesters", "polyethylene", "polygala", "polygalas", "polygamist", "polygamists", "polygamy", "polygene", "polygenes", "polygenesis", "polygenetic", "polygenist", "polygenists", "polyglot", "polyglots", "polygon", "polygonatum", "polygonatums", "polygons", "polygonum", "polygonums", "polygraph", "polygraphs", "polygyny", "polyhedron", "polyhedrons", "polyhistor", "polyhistories", "polyhistors", "polyhistory", "polyhymnia", "polyisoprene", "polymath", "polymaths", "polymer", "polymerase", "polymerases", "polymerisation", "polymerisations", "polymerism", "polymerization", "polymerizations", "polymers", "polymorph", "polymorphism", "polymorphs", "polymyositis", "polynesia", "polynesian", "polynesians", "polyneuritis", "polynomial", "polynomials", "polynucleotide", "polynya", "polyoma", "polyp", "polyparies", "polypary", "polypeptide", "polypeptides", "polyphagia", "polyphemus", "polyphone", "polyphones", "polyphonies", "polyphony", "polypidom", "polypidoms", "polyploid", "polyploidy", "polypod", "polypodies", "polypods", "polypody", "polypropylene", "polyprotodont", "polyprotodonts", "polyps", "polyptych", "polyptychs", "polypus", "polyrhythm", "polyrhythms", "polys", "polysaccharide", "polysaccharides", "polysemy", "polystyrene", "polystyrenes", "polysyllable", "polysyllables", "polysyllogism", "polysyllogisms", "polysyndeton", "polysyndetons", "polytechnic", "polytechnics", "polytetrafluoroethylene", "polytheism", "polytheist", "polytheists", "polythene", "polythenes", "polytonality", "polyurethane", "polyuria", "polyvinyl", "polyvinyls", "polyzoan", "polyzoans", "polyzoarium", "polyzoariums", "pom", "pomace", "pomaces", "pomade", "pomades", "pomander", "pomanders", "pomatum", "pomatums", "pombe", "pombes", "pome", "pomegranate", "pomegranates", "pomelo", "pomelos", "pomerania", "pomeranian", "pomeranians", "pomes", "pomfret", "pomfrets", "pomiculture", "pommel", "pommels", "pommies", "pommy", "pomologist", "pomologists", "pomology", "pomona", "pomp", "pompadour", "pompadours", "pompano", "pompanos", "pompeian", "pompeii", "pompey", "pompeys", "pompidou", "pompom", "pompoms", "pompon", "pompons", "pomposities", "pomposity", "pompousness", "pomps", "poms", "ponce", "ponceau", "ponceaus", "ponces", "poncho", "ponchos", "pond", "ponderable", "ponderables", "ponderer", "ponderers", "ponderosity", "ponderousness", "pondicherry", "pondokkie", "pondokkies", "ponds", "pondweed", "pondweeds", "pone", "pones", "pong", "pongee", "pongid", "pongids", "pongo", "pongoes", "pongos", "pongs", "poniard", "poniards", "ponies", "pons", "pont", "pontage", "pontages", "pontefract", "pontes", "pontiac", "pontianak", "pontianaks", "pontic", "ponticello", "ponticellos", "pontifex", "pontiff", "pontiffs", "pontifical", "pontificals", "pontificate", "pontificates", "pontil", "pontils", "pontlevis", "pontlevises", "pontonier", "pontoniers", "pontoon", "pontoons", "pontormo", "ponts", "pontus", "pontypool", "pontypridd", "pony", "pony trekking", "ponytail", "ponytails", "pooch", "pooches", "pood", "poodle", "poodles", "poods", "poof", "poofs", "pooftah", "pooftahs", "pooh bah", "pooh bahs", "pooka", "pookas", "pool", "poole", "poolroom", "poolrooms", "pools", "poon", "poona", "poonce", "poonces", "poons", "poop", "poops", "poorhouse", "poorhouses", "poorness", "poort", "poortith", "poorts", "poorwill", "poorwills", "poove", "pooves", "pop", "pop shop", "popcorn", "popcorns", "pope", "popedom", "popedoms", "popery", "popes", "popinjay", "popinjays", "poplar", "poplars", "poplin", "poplins", "popocatepetl", "popover", "popovers", "poppa", "popper", "poppers", "poppet", "poppets", "poppies", "popping", "poppy", "poppycock", "pops", "popsicle", "popsicles", "popsies", "popsy", "populace", "popularisation", "popularisations", "populariser", "popularisers", "popularities", "popularity", "popularization", "popularizations", "popularizer", "popularizers", "populating", "population", "populations", "populism", "populist", "populists", "populousness", "porbeagle", "porbeagles", "porcelain", "porcelains", "porch", "porches", "porcupine", "porcupines", "pore", "pores", "porgies", "porgy", "poriferan", "porism", "porisms", "pork", "porker", "porkers", "porn", "porno", "pornocracy", "pornographer", "pornographers", "pornography", "pornos", "porns", "poromeric", "porosities", "porosity", "porousness", "porphyria", "porphyries", "porphyrin", "porphyrio", "porphyrios", "porphyry", "porpoise", "porpoises", "porrection", "porrections", "porridge", "porridges", "porringer", "porringers", "port", "port au prince", "portability", "portable", "portables", "portadown", "portage", "portages", "portal", "portals", "portamento", "portance", "portcullis", "portcullises", "porte", "portent", "portentousness", "portents", "porter", "porterage", "porterages", "porteress", "porteresses", "porterhouse", "porterhouses", "porters", "portfolio", "portfolios", "porthole", "portholes", "portia", "portico", "porticoes", "porticos", "portion", "portioner", "portioners", "portions", "portland", "portliness", "portmanteau", "portmanteaus", "portolano", "portolanos", "portrait", "portraitist", "portraitists", "portraits", "portraiture", "portraitures", "portrayal", "portrayals", "portrayer", "portrayers", "portraying", "portress", "portresses", "ports", "portsmouth", "portugal", "portuguese", "portulaca", "portulacas", "pos", "posada", "posadas", "pose", "poseidon", "poser", "posers", "poses", "poseur", "poseurs", "poseuse", "poseuses", "posies", "posing", "posings", "posit", "positif", "position", "positioning", "positions", "positive", "positiveness", "positives", "positivism", "positivist", "positivists", "positivities", "positivity", "positron", "positronium", "positrons", "posits", "posology", "poss", "posse", "posses", "possession", "possessions", "possessive", "possessiveness", "possessives", "possessor", "possessors", "possessorship", "posset", "possets", "possibilities", "possibility", "possible", "possibles", "possie", "possies", "possum", "possums", "post", "post bag", "post bags", "post impressionism", "post mortem", "post mortems", "post obit", "post reformation", "postage", "postages", "postboy", "postboys", "postcard", "postcards", "postcava", "poster", "posterior", "posteriority", "posteriors", "posterities", "posterity", "postern", "posterns", "posters", "postfix", "postfixes", "postiche", "postiches", "postie", "posties", "postil", "postilion", "postilions", "postillion", "postillions", "postils", "posting", "postings", "postliminy", "postlude", "postludes", "postman", "postmark", "postmarks", "postmaster", "postmasters", "postmastership", "postmasterships", "postmillennialist", "postmillennialists", "postmistress", "postmistresses", "postponement", "postponements", "postponer", "postponers", "postposition", "postpositions", "postpositive", "postrider", "posts", "postscript", "postscripts", "postulant", "postulants", "postulate", "postulates", "postulation", "postulations", "postulator", "posture", "posturer", "posturers", "postures", "posturing", "posy", "pot", "pot au feu", "pot walloper", "potability", "potable", "potables", "potage", "potages", "potamogeton", "potamogetons", "potamology", "potash", "potashes", "potass", "potassa", "potassium", "potation", "potations", "potato", "potatoes", "potch", "potches", "poteen", "poteens", "potemkin", "potence", "potences", "potencies", "potency", "potentate", "potentates", "potential", "potentialities", "potentiality", "potentials", "potentiation", "potentiometer", "potentiometers", "potes", "potful", "potfuls", "pothead", "potheads", "pothecaries", "pothecary", "potheen", "potheens", "pother", "potherb", "potherbs", "pothers", "pothole", "potholer", "potholers", "potholes", "potholing", "pothook", "pothooks", "pothouse", "pothouses", "potiche", "potiches", "potion", "potions", "potiphar", "potlatch", "potlatches", "potman", "potomac", "potometer", "potometers", "potoo", "potoos", "potoroo", "potoroos", "potpie", "potpies", "pots", "potsdam", "potsherd", "potsherds", "potstone", "pott", "pottage", "pottages", "potter", "potterer", "potterers", "potteries", "potters", "pottery", "potties", "pottle", "pottles", "potto", "pottos", "potts", "potty", "potty chair", "potty chairs", "pouch", "pouches", "pouf", "pouffe", "pouffes", "poufs", "poulard", "poulards", "poulenc", "poult", "poulterer", "poulterers", "poultice", "poultices", "poultry", "poults", "pounce", "pounces", "pound", "poundage", "poundages", "poundal", "poundals", "pounder", "pounders", "pounding", "pounds", "pour", "pourboire", "pourboires", "pourer", "pourers", "pouring", "pourings", "pourparler", "pourparlers", "pourpoint", "pourpoints", "pours", "poussette", "poussettes", "poussin", "poussins", "pout", "pouter", "pouters", "pouts", "poverty", "pow", "powan", "powans", "powder", "powders", "powell", "power", "powerboat", "powerboats", "powerfulness", "powerlessness", "powers", "pows", "powwow", "powwows", "powys", "pox", "poxes", "poxvirus", "poznan", "pozzies", "pozzuolana", "pozzuoli", "pozzy", "praam", "praams", "practicability", "practicableness", "practicalities", "practicality", "practicalness", "practice", "practices", "practician", "practicians", "practicum", "practitioner", "practitioners", "prad", "pradesh", "prads", "praefect", "praefects", "praemunire", "praemunires", "praenomen", "praenomens", "praepostor", "praepostors", "praesepe", "praesidium", "praesidiums", "praetor", "praetorian", "praetorians", "praetorium", "praetoriums", "praetors", "praetorship", "praetorships", "pragmaticality", "pragmaticalness", "pragmatics", "pragmatism", "pragmatist", "pragmatists", "prague", "praha", "prahu", "prahus", "prairial", "prairie", "prairies", "praise", "praises", "praiseworthiness", "prakrit", "praline", "pralines", "pram", "prams", "prana", "prance", "prancer", "prancers", "prances", "prang", "prangs", "prank", "pranks", "prankster", "pranksters", "prase", "praseodymium", "prat", "prate", "prater", "praters", "prates", "pratfall", "pratfalls", "pratincole", "pratincoles", "pratique", "pratiques", "prato", "prats", "prattle", "prattler", "prattlers", "prattles", "prau", "praus", "pravda", "prawn", "prawns", "praxis", "praxiteles", "prayer", "prayerfulness", "prayerlessness", "prayers", "pre eclampsia", "pre emption", "pre emptor", "pre existence", "pre ignition", "pre raphaelite", "pre raphaelites", "pre raphaelitism", "pre reformation", "preacher", "preachers", "preaching", "preachings", "preachment", "preachments", "preacquaintance", "preadaptation", "preadaptations", "preadmonition", "preadmonitions", "preamble", "preambles", "preamplifier", "preamplifiers", "prearrangement", "prearrangements", "preassurance", "preassurances", "prebend", "prebendaries", "prebendary", "prebends", "precariousness", "precaution", "precautions", "precava", "precedence", "precedences", "precedencies", "precedency", "precedent", "precedents", "precentor", "precentors", "precentorship", "precentorships", "precept", "preceptor", "preceptors", "preceptory", "precepts", "precession", "precessions", "precinct", "precincts", "preciosities", "preciosity", "preciousness", "precipice", "precipices", "precipitance", "precipitances", "precipitancies", "precipitancy", "precipitant", "precipitants", "precipitate", "precipitates", "precipitation", "precipitations", "precipitator", "precipitators", "precipitin", "precipitousness", "preciseness", "precisian", "precisianism", "precisians", "precision", "precisions", "preclusion", "preclusions", "precocial", "precociousness", "precocities", "precocity", "precognition", "precognitions", "preconception", "preconceptions", "preconcertedness", "precondition", "preconditions", "preconise", "preconises", "preconization", "preconizations", "preconscious", "preconstruction", "precontract", "precontracts", "precursor", "precursors", "predation", "predations", "predator", "predators", "predecease", "predeceases", "predecessor", "predecessors", "predefinition", "predefinitions", "predella", "predellas", "predestinarian", "predestinarianism", "predestinarians", "predestination", "predetermination", "predeterminer", "predeterminers", "predevelopment", "predevelopments", "predicability", "predicable", "predicament", "predicaments", "predicant", "predicants", "predicate", "predicates", "predication", "predications", "predictability", "prediction", "predictions", "predictor", "predictors", "predigestion", "predikant", "predikants", "predilection", "predilections", "predisposition", "predispositions", "prednisone", "predominance", "predominances", "predomination", "predominations", "preemie", "preemies", "preen", "preens", "prefab", "prefabrication", "prefabricator", "prefabricators", "prefabs", "preface", "prefaces", "prefect", "prefects", "prefecture", "prefectures", "preferability", "preference", "preferences", "preferentialist", "preferment", "preferments", "preferrer", "preferrers", "prefiguration", "prefigurations", "prefigurement", "prefigurements", "prefix", "prefixes", "prefixion", "prefixions", "preflight", "preform", "preformation", "preformations", "preforms", "pregnancies", "pregnancy", "prehension", "prehensions", "prehistorian", "prehistorians", "prehistory", "prehnite", "prejudgement", "prejudgements", "prejudgment", "prejudgments", "prejudice", "prejudices", "prelacies", "prelacy", "prelate", "prelates", "prelateship", "prelateships", "prelatism", "prelatist", "prelatists", "prelature", "prelatures", "prelection", "prelections", "prelibation", "prelibations", "prelim", "preliminaries", "preliminary", "prelims", "prelude", "preludes", "prematureness", "prematurities", "prematurity", "premaxilla", "premed", "premedication", "premedications", "premeditation", "premeditations", "premeds", "premie", "premier", "premiere", "premieres", "premiers", "premiership", "premierships", "premies", "premillenarian", "premillenarianism", "premillenarians", "premillennialism", "premillennialist", "preminger", "premise", "premises", "premiss", "premisses", "premium", "premiums", "premix", "premixes", "premolar", "premolars", "premonition", "premonitions", "prenatal", "prenegotiation", "prenotion", "prenotions", "prentice", "prentices", "preoccupancies", "preoccupancy", "preoccupant", "preoccupants", "preoccupation", "preoccupations", "preoption", "preoptions", "preoral", "preorder", "preorders", "preordinance", "preordinances", "preordination", "preordinations", "prep", "preparation", "preparations", "preparative", "preparator", "preparators", "preparedness", "prepayment", "prepayments", "prepollex", "prepollexes", "preponderance", "preponderances", "preposition", "prepositions", "prepositive", "prepositor", "prepositors", "prepossession", "prepossessions", "preposterousness", "prepostor", "prepostors", "prepotency", "preps", "prepuce", "prepuces", "prerelease", "prereleases", "prerequisite", "prerequisites", "prerogative", "prerogatives", "presa", "presage", "presager", "presagers", "presages", "presanctification", "presbycusis", "presbyope", "presbyopes", "presbyopia", "presbyter", "presbyterate", "presbyterates", "presbyterian", "presbyterians", "presbyteries", "presbyters", "presbytery", "presbytes", "preschool", "prescience", "prescott", "prescriber", "prescribers", "prescript", "prescription", "prescriptions", "prescriptiveness", "prescriptivism", "prescripts", "preselection", "preselections", "preselector", "preselectors", "presence", "presences", "present", "present day", "presentability", "presentableness", "presentation", "presentationism", "presentationist", "presentations", "presentee", "presentees", "presenter", "presenters", "presentiment", "presentiments", "presentiveness", "presentment", "presentments", "presentness", "presents", "preservability", "preservation", "preservations", "preservative", "preservatives", "preserve", "preserver", "preservers", "preserves", "preserving", "presidencies", "presidency", "president", "presidents", "presidentship", "presidentships", "presidio", "presidios", "presidium", "presidiums", "presley", "press", "press up", "press ups", "presser", "pressers", "presses", "pressie", "pressies", "pressing", "pressings", "pressman", "pressmark", "pressmarks", "pressure", "pressures", "pressurization", "prest", "prestidigitation", "prestidigitator", "prestidigitators", "prestige", "prestiges", "prestissimo", "prestissimos", "presto", "preston", "prestonpans", "prestos", "prestwich", "prestwick", "presumer", "presumers", "presumption", "presumptions", "presumptuousness", "presupposition", "presuppositions", "presurmise", "pretence", "pretences", "pretender", "pretenders", "pretending", "pretense", "pretenses", "pretension", "pretensions", "pretentiousness", "preterist", "preterists", "preterit", "preterite", "preteriteness", "preterites", "preterition", "preteritions", "preterits", "pretermission", "pretermissions", "preternaturalism", "preternaturalness", "pretext", "pretexts", "pretor", "pretoria", "pretorius", "pretors", "pretties", "prettification", "prettifications", "prettiness", "pretty", "pretzel", "pretzels", "prevalence", "prevalences", "prevarication", "prevarications", "prevaricator", "prevaricators", "preventative", "preventatives", "preventer", "preventers", "prevention", "preventions", "preventive", "preventiveness", "preventives", "preview", "previews", "previn", "prevision", "previsions", "prevue", "prevues", "prewash", "prewashes", "prexies", "prexy", "prey", "preying", "preys", "priam", "priapism", "priapus", "price", "price fixing", "pricelessness", "pricer", "pricers", "prices", "pricing", "prick", "pricker", "prickers", "pricket", "pricking", "prickings", "prickle", "prickles", "prickling", "pricklings", "pricks", "pride", "pridefulness", "prides", "prie dieu", "prier", "priers", "pries", "priest", "priestcraft", "priestess", "priestesses", "priesthood", "priesthoods", "priestley", "priestliness", "priests", "prig", "priggery", "priggish", "priggishness", "prigs", "prill", "prills", "prima", "primacies", "primacy", "primage", "primages", "primaries", "primariness", "primary", "primatal", "primate", "primates", "primateship", "primateships", "primatologist", "primatologists", "primatology", "primavera", "prime", "primely", "primeness", "primer", "primero", "primers", "primes", "primigravida", "primigravidas", "primine", "primines", "priming", "primings", "primipara", "primiparas", "primitive", "primitiveness", "primitives", "primitivism", "primitivist", "primitivists", "primness", "primo", "primogenitor", "primogenitors", "primogeniture", "primogenitures", "primogenitureship", "primordial", "primordiality", "primordials", "primordium", "primordiums", "primos", "primping", "primrose", "primroses", "primula", "primulas", "primus", "primuses", "prince", "prince s feather", "princedom", "princedoms", "princekin", "princekins", "princeliness", "princeling", "princelings", "princes", "princess", "princesses", "princeton", "principal", "principalities", "principality", "principals", "principalship", "principalships", "principate", "principates", "principium", "principle", "principles", "print", "print out", "print outs", "printer", "printeries", "printers", "printery", "printing", "printings", "printmaker", "printmakers", "prints", "prion", "prions", "prior", "priorate", "priorates", "prioress", "prioresses", "priories", "priorities", "priority", "priors", "priorship", "priorships", "priory", "prisage", "prisages", "priscian", "priscilla", "prise", "prises", "prism", "prismoid", "prismoids", "prisms", "prison", "prison breaking", "prison breakings", "prisoner", "prisoners", "prisons", "prissiness", "pritchett", "prittle prattle", "privacies", "privacy", "private", "privateer", "privateers", "privateersman", "privateness", "privates", "privation", "privations", "privet", "privets", "privies", "privilege", "privileges", "privities", "privity", "privy", "prize", "prizes", "pro", "pro oestrus", "proa", "proas", "prob", "probabilism", "probabilities", "probability", "probable", "probables", "proband", "probands", "probang", "probangs", "probate", "probates", "probation", "probationer", "probationers", "probationership", "probations", "probe", "prober", "probers", "probes", "probing", "probity", "problem", "problems", "proboscidea", "proboscidean", "proboscideans", "proboscidian", "proboscidians", "proboscis", "proboscises", "probs", "procaine", "procaryote", "procaryotes", "procathedral", "procathedrals", "procedure", "procedures", "proceeder", "proceeders", "proceeding", "proceedings", "proceeds", "proceleusmatic", "process", "process server", "process servers", "processes", "processing", "procession", "processional", "processionals", "processions", "processor", "processors", "prochronism", "prochronisms", "proclaimer", "proclaimers", "proclamation", "proclamations", "proclitic", "proclitics", "proclivities", "proclivity", "procne", "proconsul", "proconsulate", "proconsulates", "proconsuls", "proconsulship", "proconsulships", "procopius", "procrastination", "procrastinativeness", "procrastinator", "procrastinators", "procreant", "procreants", "procreation", "procreativeness", "procreator", "procreators", "procrustes", "proctitis", "proctodaeum", "proctodaeums", "proctologist", "proctologists", "proctology", "proctor", "proctors", "proctorship", "proctorships", "proctoscope", "proctoscopes", "proctoscopy", "procuracies", "procuracy", "procuration", "procurations", "procurator", "procurators", "procuratorship", "procuratorships", "procuratory", "procurement", "procurements", "procurer", "procurers", "procuress", "procuresses", "procyon", "prod", "prodder", "prodders", "prodding", "prodigal", "prodigality", "prodigals", "prodigies", "prodigiousness", "prodigy", "prodrome", "prodromes", "prods", "produce", "producer", "producers", "produces", "product", "production", "productions", "productiveness", "productivities", "productivity", "products", "proem", "proems", "proenzyme", "proenzymes", "prof", "profanation", "profanations", "profaneness", "profanities", "profanity", "professing", "profession", "professional", "professionalisation", "professionalism", "professionalization", "professionals", "professions", "professor", "professorate", "professorates", "professoriate", "professoriates", "professors", "professorship", "professorships", "proffer", "profferer", "profferers", "proffers", "proficiencies", "proficiency", "proficient", "proficients", "profile", "profiler", "profilers", "profiles", "profit", "profit sharing", "profitability", "profitableness", "profiteer", "profiteers", "profiterole", "profiteroles", "profits", "profligacies", "profligacy", "profligate", "profligates", "profound", "profoundness", "profounds", "profs", "profundities", "profundity", "profuseness", "profusion", "profusions", "prog", "progenies", "progenitor", "progenitors", "progeny", "progesterone", "progestin", "proglottis", "prognosis", "prognostic", "prognostication", "prognostications", "prognosticator", "prognosticators", "prognostics", "program", "programme", "programmer", "programmers", "programmes", "programming", "programs", "progress", "progresses", "progression", "progressionism", "progressionist", "progressionists", "progressions", "progressism", "progressist", "progressists", "progressive", "progressiveness", "progressives", "progressivism", "progressivist", "progressivists", "progs", "prohibiter", "prohibiters", "prohibition", "prohibitionist", "prohibitionists", "prohibitions", "prohibitiveness", "prohibitor", "prohibitors", "project", "projectile", "projectiles", "projection", "projectionist", "projectionists", "projections", "projectivities", "projectivity", "projector", "projectors", "projects", "prokaryote", "prokaryotes", "prokofiev", "prolactin", "prolamin", "prolamine", "prolapse", "prolapses", "prolapsus", "prolapsuses", "prolateness", "prolation", "prolations", "prole", "proleg", "prolegomenon", "prolegs", "prolepsis", "proles", "proletarian", "proletarianization", "proletarians", "proletariat", "proletariats", "proletaries", "proletary", "prolicide", "prolicides", "proliferation", "proliferations", "prolificacy", "proline", "prolixities", "prolixity", "prolixness", "prolocutor", "prolocutors", "prolocutorship", "prolocutorships", "prolog", "prologs", "prologue", "prologues", "prolongation", "prolongations", "prolonge", "prolonger", "prolongers", "prolonges", "prolusion", "prolusions", "prom", "promenade", "promenader", "promenaders", "promenades", "promethazine", "prometheus", "promethium", "prominence", "prominences", "promiscuity", "promise", "promisee", "promisees", "promiser", "promisers", "promises", "promisor", "promisors", "promontories", "promontory", "promoter", "promoters", "promotion", "promotions", "prompt", "prompter", "prompters", "prompting", "promptings", "promptitude", "promptness", "prompts", "proms", "promulgation", "promulgations", "promulgator", "promulgators", "promycelium", "promyceliums", "pronaos", "pronation", "pronations", "pronator", "pronators", "proneness", "pronephros", "pronephroses", "prong", "prongbuck", "prongbucks", "pronghorn", "pronghorns", "prongs", "pronotum", "pronoun", "pronouncement", "pronouncements", "pronouncer", "pronouncers", "pronouns", "pronucleus", "pronunciamento", "pronunciamentoes", "pronunciamentos", "pronunciation", "pronunciations", "proof", "proofing", "proofings", "proofs", "prop", "propaedeutic", "propaganda", "propagandism", "propagandist", "propagandists", "propagation", "propagations", "propagator", "propagators", "propagule", "propagules", "propagulum", "propagulums", "propane", "propanol", "proparoxytone", "propellant", "propellants", "propellent", "propellents", "propeller", "propellers", "propene", "propensities", "propensity", "proper", "properness", "propers", "properties", "propertius", "property", "prophage", "prophages", "prophase", "prophases", "prophecies", "prophecy", "prophesier", "prophesiers", "prophet", "prophetess", "prophetesses", "prophets", "prophylactic", "prophylactics", "prophylaxis", "propine", "propines", "propinquities", "propinquity", "propionate", "propionates", "propitiation", "propitiations", "propitiatory", "propitiousness", "propolis", "proponent", "proponents", "proportion", "proportionableness", "proportional", "proportionality", "proportionateness", "proportionment", "proportions", "proposal", "proposals", "proposer", "proposers", "proposition", "propositions", "propraetor", "propraetors", "propranolol", "proprietaries", "proprietary", "proprieties", "proprietor", "proprietors", "proprietorship", "proprietorships", "proprietress", "proprietresses", "propriety", "proprioceptor", "proprioceptors", "props", "proptosis", "propulsion", "propyl", "propylaea", "propylaeum", "propylene", "propylite", "propylites", "proration", "prorations", "prorogation", "prorogations", "pros", "prosaicness", "prosaism", "proscenium", "prosceniums", "prosciutto", "prosciuttos", "proscriber", "proscribers", "proscription", "proscriptions", "prose", "prosector", "prosectors", "prosecution", "prosecutions", "prosecutor", "prosecutors", "proselyte", "proselytes", "proselytiser", "proselytisers", "proselytism", "prosencephalon", "prosencephalons", "prosenchyma", "prosenchymas", "proser", "proserpina", "prosers", "proses", "prosimian", "prosimians", "prosiness", "prosodist", "prosodists", "prosody", "prosopopoeia", "prospect", "prospectiveness", "prospector", "prospectors", "prospects", "prospectus", "prospectuses", "prosperities", "prosperity", "prospero", "prosperousness", "prostaglandin", "prostaglandins", "prostate", "prostatectomies", "prostatectomy", "prostates", "prostatitis", "prosthesis", "prosthetics", "prosthetist", "prosthetists", "prosthodontics", "prosthodontist", "prosthodontists", "prostitute", "prostitutes", "prostitution", "prostitutor", "prostitutors", "prostomium", "prostomiums", "prostration", "prostrations", "prostyle", "prostyles", "protactinium", "protagonist", "protagonists", "protagoras", "protamine", "protamines", "protandry", "protanomaly", "protanope", "protanopes", "protanopia", "protasis", "protea", "proteaceae", "proteas", "protease", "proteases", "protecting", "protection", "protectionism", "protectionist", "protectionists", "protections", "protective", "protectiveness", "protectives", "protector", "protectorate", "protectorates", "protectories", "protectors", "protectorship", "protectorships", "protectory", "protein", "proteins", "proteolysis", "proteose", "proteoses", "proterandry", "proterogyny", "proterozoic", "protest", "protestant", "protestantism", "protestants", "protestation", "protestations", "protester", "protesters", "protests", "proteus", "proteuses", "prothalamion", "prothalamium", "prothallus", "prothesis", "prothonotaries", "prothonotary", "prothorax", "prothoraxes", "prothrombin", "protist", "protistology", "protists", "protium", "protoactinium", "protoavis", "protochordate", "protocol", "protocols", "protogine", "protogyny", "protohuman", "protohumans", "protolanguage", "protolanguages", "protomartyr", "protomartyrs", "proton", "protonema", "protonemas", "protonotaries", "protonotary", "protons", "protopathy", "protoplasm", "protoplast", "protoplasts", "protostar", "protostars", "protostele", "protosteles", "prototherian", "prototype", "prototypes", "protoxide", "protoxides", "protoxylem", "protoxylems", "protozoa", "protozoan", "protozoans", "protozoologist", "protozoologists", "protozoology", "protozoon", "protraction", "protractions", "protractor", "protractors", "protrusion", "protrusions", "protuberance", "protuberances", "protyle", "proudhon", "proudness", "proust", "proustite", "prout", "provability", "provenance", "provenances", "provence", "provender", "provenders", "provenience", "proveniences", "proventriculus", "proventriculuses", "prover", "proverb", "proverbs", "provers", "providence", "providences", "provider", "providers", "providing", "province", "provinces", "provincial", "provincialism", "provincialisms", "provinciality", "provincials", "proving", "provision", "provisional", "provisions", "proviso", "provisoes", "provisos", "provitamin", "provitamins", "provo", "provocation", "provocations", "provocativeness", "provoker", "provokers", "provolone", "provolones", "provos", "provost", "provosts", "provostship", "provostships", "prow", "prowess", "prowl", "prowler", "prowlers", "prowls", "prows", "proxemics", "proxies", "proximation", "proximations", "proximities", "proximity", "proxy", "prud hon", "prude", "prudence", "pruderies", "prudery", "prudes", "prudishness", "prue", "prune", "prunella", "prunellas", "prunelle", "prunelles", "pruner", "pruners", "prunes", "pruning", "prunings", "prunt", "prunts", "prunus", "prurience", "pruriency", "prurigo", "prurigos", "pruritus", "prussia", "prussian", "prussianism", "prussians", "prussiate", "prussiates", "pry", "pryer", "pryers", "prying", "pryings", "prys", "prytaneum", "prythee", "prythees", "psalm", "psalmist", "psalmists", "psalmodies", "psalmodist", "psalmodists", "psalmody", "psalms", "psalter", "psalteries", "psalterium", "psalters", "psaltery", "psammite", "psammites", "pschent", "psellism", "psellisms", "psephite", "psephites", "psephologist", "psephologists", "psephology", "pseud", "pseudaxis", "pseudepigrapha", "pseudo", "pseudocarp", "pseudocarps", "pseudoclassicism", "pseudocyesis", "pseudoephedrine", "pseudohermaphroditism", "pseudomonad", "pseudomonades", "pseudomonads", "pseudomonas", "pseudomorph", "pseudomorphism", "pseudomorphs", "pseudonym", "pseudonymity", "pseudonyms", "pseudopod", "pseudopodium", "pseudopods", "pseudos", "pseudoscope", "pseudoscopes", "pseudoscorpion", "pseuds", "psi", "psilanthropist", "psilanthropists", "psilocin", "psilocybin", "psilomelane", "psis", "psittacosis", "psoas", "psoases", "psocid", "psocids", "psoriasis", "pst", "psts", "psychasthenia", "psyche", "psychedelia", "psyches", "psychiatrist", "psychiatrists", "psychiatry", "psychic", "psychics", "psycho", "psychoanalysis", "psychoanalyst", "psychoanalysts", "psychobabble", "psychobiologist", "psychobiologists", "psychobiology", "psychochemical", "psychodrama", "psychodramas", "psychodynamics", "psychogenesis", "psychohistories", "psychohistory", "psychokinesis", "psycholinguistics", "psychologies", "psychologism", "psychologist", "psychologists", "psychology", "psychometrician", "psychometrics", "psychometrist", "psychometrists", "psychometry", "psychoneurosis", "psychoneurotic", "psychonomics", "psychopath", "psychopathist", "psychopathists", "psychopathologist", "psychopathology", "psychopaths", "psychopathy", "psychopharmacology", "psychophysics", "psychophysiology", "psychopomp", "psychopomps", "psychoprophylaxis", "psychos", "psychosis", "psychosomatics", "psychosurgery", "psychotechnics", "psychotherapeutics", "psychotherapist", "psychotherapy", "psychotic", "psychotics", "psychrometer", "psychrometers", "psychrometry", "psylla", "psyllas", "psyllid", "psyllids", "ptah", "ptarmigan", "ptarmigans", "pteranodon", "pteranodons", "pteridologist", "pteridologists", "pteridology", "pteridophyte", "pteridophytes", "pteridosperm", "pteridosperms", "pterodactyl", "pterodactyls", "pteropod", "pteropods", "pterosaur", "pterosaurs", "pterygium", "pterygoid", "pterygoids", "pteryla", "pterylography", "pterylosis", "ptilosis", "ptisan", "ptisans", "ptochocracy", "ptolemaist", "ptolemy", "ptomaine", "ptomaines", "ptosis", "ptyalin", "ptyalism", "pub", "pub crawl", "pub crawls", "puberty", "pubes", "pubescence", "pubescences", "pubis", "pubises", "public", "publican", "publicans", "publication", "publications", "publicist", "publicists", "publicity", "publicizing", "publicness", "publics", "publisher", "publishers", "publishing", "publishment", "pubs", "puccini", "puccoon", "puccoons", "puce", "puck", "pucker", "puckers", "pucks", "pud", "pudding", "puddings", "puddle", "puddler", "puddlers", "puddles", "puddling", "puddlings", "puddock", "puddocks", "pudency", "pudendum", "pudginess", "puds", "puebla", "pueblo", "pueblos", "puerilism", "puerility", "puerperium", "puerperiums", "puff", "puff puff", "puffball", "puffballs", "puffer", "pufferies", "puffers", "puffery", "puffin", "puffiness", "puffing", "puffings", "puffins", "puffs", "pug", "pug dog", "pug dogs", "puggaree", "puggarees", "pugging", "puggings", "puggree", "puggrees", "pugilism", "pugilist", "pugilists", "pugin", "pugnaciousness", "pugnacity", "pugs", "puissance", "puissances", "puja", "pujas", "puke", "pukes", "puking", "puku", "pula", "pulchritude", "pulchritudes", "pulchritudinous", "puler", "pulers", "pulitzer", "pulka", "pulkas", "pull", "pull in", "pull ins", "pull off", "pull out", "pull outs", "pull through", "pull up", "pull ups", "pullet", "pullets", "pulley", "pulleys", "pulling", "pullman", "pullmans", "pullover", "pullovers", "pulls", "pullulation", "pullulations", "pulmonate", "pulmonates", "pulmonic", "pulmonics", "pulmotor", "pulmotors", "pulp", "pulpboard", "pulpit", "pulpiteer", "pulpiteers", "pulpits", "pulpitum", "pulpitums", "pulps", "pulpwood", "pulpwoods", "pulque", "pulques", "pulsar", "pulsars", "pulsation", "pulsations", "pulsator", "pulsators", "pulse", "pulsejet", "pulsejets", "pulses", "pulsimeter", "pulsimeters", "pulsing", "pulsojet", "pulsojets", "pulsometer", "pulsometers", "pulu", "pulverisation", "pulverisations", "pulveriser", "pulverisers", "pulverization", "pulverizations", "pulverizer", "pulverizers", "pulverulence", "pulvillus", "pulvinus", "puma", "pumas", "pumice", "pumices", "pump", "pumpernickel", "pumpernickels", "pumping", "pumpkin", "pumpkins", "pumps", "pun", "puna", "punas", "punce", "punces", "punch", "punch up", "punch ups", "puncheon", "puncheons", "puncher", "punchers", "punches", "punchinello", "punchinelloes", "punchinellos", "punctation", "punctations", "punctilio", "punctilios", "punctiliousness", "punctualities", "punctuality", "punctuation", "punctuations", "punctuator", "punctuators", "puncture", "punctures", "puncturing", "pundit", "pundits", "pungency", "punic", "puniness", "punisher", "punishers", "punishment", "punishments", "punjab", "punjabi", "punjabis", "punk", "punka", "punkah", "punkahs", "punkas", "punks", "punner", "punners", "punnet", "punnets", "punning", "punnings", "puns", "punster", "punsters", "punt", "punter", "punters", "punties", "punting", "punts", "punty", "pup", "pupa", "puparium", "pupas", "pupil", "pupillage", "pupillages", "pupils", "puppet", "puppeteer", "puppeteers", "puppetry", "puppets", "puppies", "puppis", "puppy", "puppydom", "puppyhood", "pups", "purblindness", "purcell", "purchase", "purchaser", "purchasers", "purchases", "purchasing", "purdah", "purdahs", "puree", "purees", "pureness", "purenesses", "purfle", "purfles", "purgation", "purgations", "purgative", "purgatives", "purgatories", "purgatory", "purge", "purger", "purgers", "purges", "purging", "purgings", "purification", "purifications", "purificator", "purificators", "purifier", "purifiers", "purim", "purims", "purine", "purism", "purist", "purists", "puritan", "puritanism", "puritans", "purity", "purl", "purler", "purlers", "purlieu", "purlieus", "purlin", "purlines", "purlins", "purloiner", "purloiners", "purls", "purple", "purples", "purport", "purports", "purpose", "purposefulness", "purposelessness", "purposes", "purposiveness", "purpresture", "purprestures", "purpura", "purpure", "purpures", "purpurin", "purr", "purrs", "purse", "purser", "pursers", "purses", "pursiness", "purslane", "purslanes", "pursuance", "pursuances", "pursued", "pursuer", "pursuers", "pursuit", "pursuits", "pursuivant", "pursuivants", "purtenance", "purulence", "purulency", "purveyance", "purveyances", "purveyor", "purveyors", "purview", "purviews", "pus", "pusan", "pusey", "puseyism", "puseyite", "push", "push bike", "push bikes", "push pull", "push start", "push starts", "push up", "push ups", "pusher", "pushers", "pushes", "pushiness", "pushing", "pushkin", "pushrod", "pushrods", "pushto", "pushtu", "pusillanimity", "puss", "pusses", "pussies", "pussy", "pussyfoot", "pussyfoots", "pustulant", "pustulants", "pustulation", "pustulations", "pustule", "pustules", "put", "put and take", "put down", "put downs", "put on", "put ons", "put put", "put puts", "putamen", "putlog", "putlogs", "putout", "putrefaction", "putrescence", "putrescences", "putrescible", "putrescine", "putridity", "putridness", "puts", "putsch", "putsches", "putt", "puttee", "puttees", "putter", "putterer", "putterers", "putters", "puttie", "puttier", "puttiers", "putties", "putting", "puttings", "putto", "putts", "putty", "puttying", "puzzle", "puzzlement", "puzzler", "puzzlers", "puzzles", "puzzolana", "pya", "pyaemia", "pycnidium", "pycnidiums", "pycnodysostosis", "pycnogonid", "pycnogonids", "pycnometer", "pycnometers", "pycnosis", "pye", "pye dog", "pye dogs", "pyelitis", "pyelography", "pyelonephritis", "pyemia", "pyes", "pygidium", "pygidiums", "pygmalion", "pygmies", "pygmy", "pyjama", "pyjamas", "pylon", "pylons", "pylorus", "pyloruses", "pym", "pyogenesis", "pyongyang", "pyorrhoea", "pyracanth", "pyracantha", "pyracanthas", "pyracanths", "pyralid", "pyralis", "pyramid", "pyramides", "pyramidion", "pyramidions", "pyramids", "pyrargyrite", "pyre", "pyrene", "pyrenes", "pyrenocarp", "pyrenocarps", "pyrenoid", "pyrenoids", "pyres", "pyrethrin", "pyrethrum", "pyrethrums", "pyretology", "pyretotherapy", "pyrex", "pyrexia", "pyrheliometer", "pyrheliometers", "pyridine", "pyridoxine", "pyrimidine", "pyrimidines", "pyrite", "pyrites", "pyritohedron", "pyrogallol", "pyrogen", "pyrogens", "pyrography", "pyrolatry", "pyrolusite", "pyrolysis", "pyromancies", "pyromancy", "pyromania", "pyromaniac", "pyromaniacs", "pyromanias", "pyrometer", "pyrometers", "pyrometry", "pyromorphite", "pyrope", "pyropes", "pyrophobia", "pyrophorus", "pyrophosphate", "pyrophosphates", "pyrophyllite", "pyroscope", "pyroscopes", "pyrosis", "pyrostat", "pyrostats", "pyrosulphate", "pyrotechnics", "pyrotechny", "pyroxene", "pyroxenes", "pyroxenite", "pyroxylin", "pyrrha", "pyrrhic", "pyrrhics", "pyrrho", "pyrrhotite", "pyrrhus", "pyrrole", "pyrroles", "pyrrolidine", "pythagoras", "pythagorean", "pythagoreanism", "pythagoreans", "pythia", "pythian", "pythias", "pythium", "pythiums", "python", "pythoness", "pythonesses", "pythons", "pyuria", "pyx", "pyxes", "pyxidium", "pyxis", "q ship", "q ships", "qaddafi", "qaddish", "qadi", "qadis", "qasida", "qasidas", "qat", "qatar", "qeshm", "qibla", "qiblas", "qintar", "qintars", "qoph", "qophs", "quack", "quackery", "quacks", "quacksalver", "quacksalvers", "quad", "quadragenarian", "quadragenarians", "quadragesima", "quadrangle", "quadrangles", "quadrangular", "quadrant", "quadrantes", "quadrants", "quadraphonics", "quadraphony", "quadrat", "quadrate", "quadrates", "quadratic", "quadrats", "quadrature", "quadratures", "quadrella", "quadrellas", "quadrennial", "quadrennials", "quadrennium", "quadric", "quadricentennial", "quadriceps", "quadricepses", "quadriga", "quadrilateral", "quadrilaterals", "quadrille", "quadrilles", "quadrillion", "quadrillions", "quadrillionth", "quadrillionths", "quadrinomial", "quadriplegia", "quadriplegic", "quadrireme", "quadriremes", "quadrisection", "quadrisections", "quadrisyllable", "quadrisyllables", "quadrivalence", "quadrivalences", "quadrivium", "quadroon", "quadroons", "quadrumane", "quadrumanes", "quadrumvirate", "quadrumvirates", "quadruped", "quadrupeds", "quadruple", "quadruples", "quadruplet", "quadruplets", "quadruplicate", "quadruplicates", "quadruplicity", "quadrupling", "quads", "quaere", "quaeres", "quaestor", "quaestors", "quaestorship", "quaestorships", "quaffer", "quaffers", "quag", "quagga", "quaggas", "quagmire", "quagmires", "quags", "quahaug", "quahaugs", "quahog", "quahogs", "quaich", "quaichs", "quail", "quails", "quaintness", "quake", "quaker", "quakers", "quakes", "quakiness", "quale", "qualification", "qualifications", "qualifier", "qualifiers", "qualifying", "qualifyings", "qualities", "quality", "qualm", "qualmishness", "qualms", "quamash", "quamashes", "quandang", "quandangs", "quandaries", "quandary", "quandong", "quandongs", "quango", "quangos", "quant", "quanta", "quantic", "quantics", "quantification", "quantifications", "quantifier", "quantifiers", "quantisation", "quantisations", "quantities", "quantity", "quantization", "quantizations", "quantong", "quantongs", "quants", "quantum", "quarantine", "quarantines", "quark", "quarks", "quarrel", "quarreler", "quarrelers", "quarreller", "quarrellers", "quarrels", "quarrelsomeness", "quarrian", "quarrians", "quarrier", "quarriers", "quarries", "quarry", "quarrying", "quarryman", "quart", "quarte", "quarter", "quarter deck", "quarter decks", "quarter hour", "quarter miler", "quarterage", "quarterages", "quartering", "quarterings", "quarterlies", "quarterlight", "quarterlights", "quarterly", "quartermaster", "quartermasters", "quartern", "quarters", "quarterstaff", "quartes", "quartet", "quartets", "quartette", "quartettes", "quartic", "quartics", "quartile", "quartiles", "quarto", "quartos", "quarts", "quartz", "quartzes", "quartzite", "quasar", "quasars", "quasimodo", "quassia", "quassias", "quatercentenaries", "quatercentenary", "quaternaries", "quaternary", "quaternion", "quaternions", "quaternities", "quaternity", "quatorze", "quatorzes", "quatrain", "quatrains", "quatrefoil", "quatrefoils", "quattrocento", "quaver", "quaverer", "quaverers", "quavers", "quay", "quayage", "quayages", "quays", "quayside", "quaysides", "quean", "queans", "queasiness", "quebec", "quebecer", "quebecers", "quebracho", "quebrachos", "quechua", "quechuan", "quechuas", "queen", "queen anne", "queendom", "queendoms", "queenfish", "queenhood", "queenhoods", "queening", "queenings", "queenliness", "queens", "queensland", "queenstown", "queer", "queer bashing", "queerness", "queers", "queller", "quellers", "quelling", "quelquechose", "quencher", "quenchers", "quenching", "quenchings", "quenelle", "quenelles", "quentin", "quercetin", "quercitron", "quercitrons", "queries", "querist", "querists", "quern", "querns", "quersprung", "quersprungs", "querulousness", "query", "quesnay", "quest", "quester", "questers", "question", "questionability", "questionableness", "questionaries", "questionary", "questioner", "questioners", "questioning", "questionings", "questionnaire", "questionnaires", "questions", "questor", "questors", "quests", "quetsch", "quetsches", "quetzal", "quetzalcoatl", "quetzales", "quetzals", "queue", "queues", "quey", "queys", "quibble", "quibbler", "quibblers", "quibbles", "quibbling", "quiche", "quiches", "quichua", "quichuas", "quick", "quick wittedness", "quickening", "quickenings", "quickie", "quickies", "quicklime", "quickness", "quicks", "quicksand", "quicksands", "quickset", "quicksets", "quicksilver", "quicksilvers", "quickstep", "quicksteps", "quid", "quiddities", "quiddity", "quidnunc", "quidnuncs", "quids", "quiescence", "quiescency", "quiet", "quieter", "quieters", "quietism", "quietist", "quietists", "quietness", "quiets", "quietude", "quietus", "quietuses", "quiff", "quiffs", "quill", "quillai", "quillais", "quiller couch", "quillet", "quillets", "quilling", "quillings", "quillon", "quillons", "quills", "quillwort", "quillworts", "quilt", "quilter", "quilters", "quilting", "quiltings", "quilts", "quimper", "quin", "quinacrine", "quinary", "quince", "quincentenaries", "quincentenary", "quincentennial", "quinces", "quincunx", "quincunxes", "quine", "quines", "quinidine", "quinine", "quinines", "quinn", "quinoa", "quinoas", "quinoid", "quinol", "quinoline", "quinone", "quinones", "quinquagenarian", "quinquagenarians", "quinquagesima", "quinquennial", "quinquennials", "quinquennium", "quinquereme", "quinqueremes", "quinquevalence", "quins", "quinsy", "quint", "quintain", "quintains", "quintal", "quintals", "quinte", "quintes", "quintessence", "quintessences", "quintet", "quintets", "quintette", "quintettes", "quintile", "quintiles", "quintilian", "quintillion", "quintillions", "quintillionth", "quintillionths", "quintin", "quinton", "quints", "quintuple", "quintuples", "quintuplet", "quintuplets", "quintuplicate", "quintuplicates", "quintuplication", "quintupling", "quinze", "quip", "quips", "quipster", "quipsters", "quipu", "quipus", "quire", "quires", "quirinal", "quirinus", "quirk", "quirkiness", "quirks", "quirt", "quirts", "quisling", "quislings", "quist", "quists", "quit", "quitch", "quitches", "quito", "quittance", "quittances", "quitter", "quitters", "quittor", "quittors", "quiver", "quiverful", "quiverfuls", "quivering", "quivers", "quixote", "quixotism", "quiz", "quizes", "quizzer", "quizzers", "quizzicality", "qum", "qumran", "quod", "quodlibet", "quodlibets", "quods", "quoin", "quoins", "quoit", "quoits", "quokka", "quokkas", "quorum", "quorums", "quota", "quotability", "quotas", "quotation", "quotations", "quote", "quoter", "quoters", "quotes", "quoteworthy", "quotidian", "quotidians", "quotient", "quotients", "qur an", "rabat", "rabato", "rabatos", "rabats", "rabbet", "rabbets", "rabbi", "rabbin", "rabbinate", "rabbinates", "rabbinism", "rabbins", "rabbis", "rabbit", "rabbiter", "rabbiters", "rabbitries", "rabbitry", "rabbits", "rabble", "rabble rouser", "rabble rousers", "rabblement", "rabblements", "rabbler", "rabblers", "rabbles", "rabelais", "rabelaisian", "rabelaisianism", "rabi", "rabidity", "rabidness", "rabies", "rabis", "raccoon", "raccoons", "race", "racecourse", "racecourses", "racegoer", "racegoers", "racehorse", "racehorses", "raceme", "racemes", "racemism", "racemization", "racemizations", "racer", "racers", "races", "racetrack", "racetracks", "raceway", "raceways", "rachael", "rachel", "rachilla", "rachillas", "rachis", "rachises", "rachitis", "rachmaninoff", "rachmanism", "racialism", "racialist", "racialists", "racine", "raciness", "racing", "racings", "racism", "racist", "racists", "rack", "rack and pinion", "rack rent", "rack renter", "rack renters", "rack rents", "racket", "racket tail", "racketeer", "racketeering", "racketeerings", "racketeers", "rackets", "rackett", "racketts", "rackham", "racks", "rackwork", "racon", "racons", "raconteur", "raconteurs", "racoon", "racoons", "racquet", "racquetball", "racquets", "rad", "radar", "radars", "radarscope", "radarscopes", "radcliffe", "raddle", "raddleman", "raddles", "radetzky", "radial", "radiales", "radials", "radian", "radiance", "radiancy", "radians", "radiant", "radiants", "radiation", "radiations", "radiator", "radiators", "radical", "radicalism", "radicalness", "radicals", "radicchio", "radicel", "radicels", "radices", "radicle", "radicles", "radii", "radio", "radioactivity", "radioautograph", "radioautographs", "radiobiology", "radiocarbon", "radiochemistry", "radiocommunication", "radiogram", "radiograms", "radiograph", "radiographer", "radiographers", "radiographs", "radiography", "radiolarian", "radiolarians", "radiolocation", "radiologist", "radiologists", "radiology", "radioluminescence", "radiolysis", "radiometeorograph", "radiometer", "radiometers", "radiometry", "radionuclide", "radionuclides", "radiophone", "radiophones", "radios", "radioscope", "radioscopes", "radioscopy", "radiosonde", "radiosondes", "radiotelegram", "radiotelegrams", "radiotelegraph", "radiotelegraphs", "radiotelegraphy", "radiotelephone", "radiotelephones", "radiotelephony", "radioteletype", "radioteletypes", "radiotherapist", "radiotherapists", "radiotherapy", "radish", "radishes", "radium", "radius", "radiuses", "radix", "radixes", "radnor", "radnorshire", "radome", "radomes", "radon", "rads", "radula", "rae", "raeburn", "raff", "raffia", "raffias", "raffinate", "raffinates", "raffinose", "raffishness", "raffle", "raffles", "raffs", "raft", "rafter", "rafters", "raftman", "rafts", "raftsman", "rag", "raga", "ragamuffin", "ragamuffins", "ragas", "ragbolt", "ragbolts", "rage", "ragee", "rages", "raggedness", "raggle", "raggles", "ragi", "raglan", "raglans", "ragman", "ragout", "ragouts", "rags", "ragtime", "ragtimes", "ragusa", "ragweed", "ragweeds", "ragwork", "ragworm", "ragworms", "ragwort", "ragworts", "rah rah", "raid", "raider", "raiders", "raids", "rail", "rail splitter", "rail splitters", "railer", "railers", "railes", "railhead", "railheads", "railing", "railings", "railleries", "raillery", "railroad", "railroader", "railroading", "railroads", "rails", "railway", "railwayman", "railways", "raiment", "raiments", "rain", "rainbow", "rainbows", "raincheck", "rainchecks", "raincoat", "raincoats", "raindrop", "raindrops", "raine", "rainfall", "rainfalls", "raininess", "rains", "rainstorm", "rainstorms", "rainwear", "raise", "raiser", "raisers", "raises", "raisin", "raising", "raisins", "raj", "raja", "rajah", "rajahs", "rajas", "rajasthan", "rajiv", "rajkot", "rajput", "rajputs", "rake", "rake off", "rake offs", "rakee", "rakees", "rakehell", "rakehells", "raker", "rakers", "rakes", "raki", "rakis", "rakishness", "rale", "raleigh", "rales", "rallier", "ralliers", "rallies", "rally", "rallycross", "rallye", "rallyes", "rallying", "ralph", "ram", "rama", "ramadan", "ramakrishna", "raman", "ramanujan", "ramayana", "rambert", "ramble", "rambler", "ramblers", "rambles", "rambouillet", "rambutan", "rambutans", "rameau", "ramee", "ramees", "ramekin", "ramekins", "ramentum", "ramequin", "ramequins", "rameses", "rami", "ramie", "ramies", "ramification", "ramifications", "ramillies", "ramis", "rammer", "rammers", "ramp", "rampage", "rampages", "rampart", "ramparts", "rampike", "rampikes", "rampion", "rampions", "ramps", "ramrod", "ramrods", "rams", "ramsay", "ramsey", "ramsgate", "ramson", "ramsons", "ramstam", "ramus", "rana", "ranas", "rance", "rances", "ranch", "rancher", "rancherie", "rancheries", "ranchero", "rancheros", "ranchers", "ranches", "ranchi", "ranching", "ranchings", "ranchman", "rancho", "ranchos", "rancidity", "rancidness", "rancor", "rancour", "rand", "randal", "randall", "randan", "randans", "randie", "randies", "randolph", "random", "randomisation", "randomisations", "randomization", "randomizations", "randomness", "randoms", "rands", "randy", "ranee", "ranees", "range", "rangefinder", "rangefinders", "rangeland", "rangelands", "ranger", "rangers", "ranges", "rangoon", "rani", "ranis", "rank", "ranker", "rankers", "rankine", "ranking", "rankings", "rankness", "ranks", "ransacker", "ransackers", "ransacking", "ransom", "ransome", "ransomer", "ransomers", "ransoms", "rant", "ranter", "ranters", "ranting", "rants", "ranula", "ranulas", "ranunculus", "ranunculuses", "raoulia", "rap", "rapaciousness", "rapacity", "rape", "raper", "rapers", "rapes", "raphael", "raphe", "raphes", "raphide", "raphides", "rapid", "rapidity", "rapids", "rapier", "rapiers", "rapine", "rapines", "rapist", "rapists", "raploch", "raplochs", "rapparee", "rapparees", "rappee", "rappees", "rappel", "rappels", "rapper", "rappers", "rapping", "rappist", "rapport", "rapporteur", "rapporteurs", "rapports", "rapprochement", "rapprochements", "raps", "rapscallion", "rapscallions", "raptor", "raptors", "rapture", "raptures", "rapturousness", "raquel", "rarebit", "rarebits", "raree show", "rarefaction", "rareness", "rarities", "rarity", "rascal", "rascality", "rascals", "rascasse", "rascasses", "rash", "rasher", "rashers", "rashes", "rashness", "raskolnik", "rasp", "raspatories", "raspatory", "raspberries", "raspberry", "rasper", "raspers", "rasping", "raspings", "rasps", "rasputin", "rasse", "rasses", "rastafarian", "raster", "rasters", "rasure", "rasures", "rat", "rat a tat tat", "rat a tat tats", "rat catcher", "rat kangaroo", "rat tail", "rat tat", "rat tats", "rata", "ratability", "ratafia", "ratafias", "ratan", "ratans", "rataplan", "rataplans", "ratas", "ratatouille", "ratatouilles", "ratbag", "ratbags", "ratch", "ratches", "ratchet", "ratchets", "rate", "rateability", "ratel", "ratels", "ratepayer", "ratepayers", "rater", "raters", "rates", "ratfink", "ratfinks", "rath", "rathaus", "rathbone", "raths", "ratification", "ratifications", "ratifier", "ratifiers", "ratine", "ratines", "rating", "ratings", "ratio", "ratiocination", "ratiocinator", "ratiocinators", "ration", "rationale", "rationales", "rationalisation", "rationalisations", "rationalism", "rationalist", "rationalists", "rationalities", "rationality", "rationalization", "rationalizations", "rationing", "rations", "ratios", "ratite", "ratlin", "ratline", "ratlines", "ratlins", "ratoon", "ratoons", "rats", "ratsbane", "ratsbanes", "ratskeller", "rattan", "rattans", "ratteen", "ratteens", "rattening", "rattenings", "ratter", "ratters", "rattigan", "ratting", "rattle", "rattlebox", "rattleboxes", "rattler", "rattlers", "rattles", "rattlesnake", "rattlesnakes", "rattling", "rattlings", "ratton", "rattons", "raucousness", "raught", "ravage", "ravager", "ravagers", "ravages", "ravaging", "rave", "rave up", "rave ups", "ravel", "ravelin", "ravelins", "ravelling", "ravellings", "ravelment", "ravelments", "ravels", "raven", "ravenna", "ravenousness", "ravens", "raver", "ravers", "raves", "ravi", "ravine", "ravines", "raving", "ravings", "ravioli", "raviolis", "ravisher", "ravishers", "ravishment", "ravishments", "raw", "rawalpindi", "rawhide", "rawhides", "rawlplug", "rawlplugs", "rawness", "raws", "ray", "rayah", "rayahs", "rayleigh", "raylet", "raylets", "raymond", "rayon", "rays", "razee", "razees", "razing", "razmataz", "razmatazes", "razoo", "razoos", "razor", "razor cut", "razor cuts", "razor shell", "razors", "razz", "razzes", "razzia", "razzias", "razzing", "razzle", "razzle dazzle", "razzles", "razzmatazz", "razzmatazzes", "re echo", "re echoes", "re education", "re entrance", "re entrant", "re entries", "re entry", "re export", "re exportation", "re exports", "reabsorption", "reabsorptions", "reach", "reach me down", "reach me downs", "reacher", "reachers", "reaches", "reaching", "reacquaintance", "reacquaintances", "reactance", "reactances", "reactant", "reactants", "reaction", "reactionaries", "reactionarism", "reactionary", "reactions", "reactivation", "reactivations", "reactivity", "reactor", "reactors", "read", "readability", "readaptation", "readaptations", "reade", "reader", "readers", "readership", "readerships", "readies", "readiness", "reading", "readings", "readjustment", "readjustments", "readmission", "readmissions", "readmittance", "readmittances", "readoption", "readoptions", "reads", "readvertisement", "ready", "ready made", "ready mix", "ready to wear", "readying", "reaffirmation", "reaffirmations", "reagan", "reagent", "reagents", "real", "realgar", "realignment", "realignments", "realisation", "realisations", "realiser", "realisers", "realism", "realist", "realists", "realities", "reality", "realizability", "realization", "realizations", "realizer", "realizers", "reallocation", "reallocations", "reallotment", "reallotments", "realm", "realms", "realness", "realpolitik", "reals", "realties", "realty", "ream", "reamendment", "reamendments", "reamer", "reamers", "reams", "reanalysis", "reanimation", "reanimations", "reaper", "reapers", "reappearance", "reappearances", "reapplication", "reapplications", "reappointment", "reappointments", "reapportioning", "reapportionment", "reappraisal", "reappraisals", "rear", "rearguard", "rearguards", "rearing", "rearmament", "rearmouse", "rearousal", "rearousals", "rearrangement", "rearrangements", "rearrest", "rearrests", "rears", "rearward", "rearwards", "reascent", "reascents", "reason", "reasonableness", "reasoner", "reasoners", "reasoning", "reasonings", "reasons", "reassemblies", "reassembly", "reassertion", "reassertions", "reassessment", "reassessments", "reassignment", "reassignments", "reassumption", "reassumptions", "reassurance", "reassurances", "reassurer", "reassurers", "reata", "reatas", "reattachment", "reattachments", "reawakening", "reawakenings", "rebaptism", "rebaptisms", "rebate", "rebatement", "rebatements", "rebates", "rebato", "rebatoes", "rebbe", "rebbes", "rebec", "rebecca", "rebecs", "rebel", "rebeldom", "rebellion", "rebellions", "rebelliousness", "rebels", "rebirth", "rebirths", "rebore", "rebores", "rebound", "rebounds", "rebozo", "rebozos", "rebroadcast", "rebroadcasts", "rebuff", "rebuffs", "rebuilding", "rebuke", "rebukes", "reburial", "reburials", "reburying", "rebus", "rebuses", "rebuttal", "rebuttals", "rebutter", "rebutters", "rec", "recalcitrance", "recalcitrant", "recalcitration", "recalescence", "recall", "recalls", "recantation", "recantations", "recanter", "recanters", "recap", "recapitalization", "recapitulation", "recapitulations", "recaps", "recaption", "recaptions", "recapture", "recaptures", "recast", "recasting", "recasts", "recce", "recces", "reccies", "recco", "reccos", "reccy", "receding", "receipt", "receipts", "receivability", "receivable", "receivableness", "receivables", "receiver", "receivers", "receivership", "receiving", "recency", "recension", "recensions", "recentness", "recept", "receptacle", "receptacles", "reception", "receptionist", "receptionists", "receptions", "receptiveness", "receptivities", "receptivity", "receptor", "receptors", "recepts", "recess", "recesses", "recession", "recessional", "recessionals", "recessions", "recessive", "recessiveness", "rechabite", "recheck", "rechecks", "recidivism", "recidivist", "recidivists", "recife", "recipe", "recipes", "recipience", "recipiences", "recipient", "recipients", "reciprocal", "reciprocality", "reciprocals", "reciprocation", "reciprocations", "reciprocator", "reciprocators", "reciprocity", "recision", "recisions", "recital", "recitalist", "recitalists", "recitals", "recitation", "recitations", "recitative", "recitatives", "recitativo", "recitativos", "reciter", "reciters", "recklessness", "recklinghausen", "reckoner", "reckoners", "reckoning", "reckonings", "reclaim", "reclaimant", "reclaimants", "reclaimer", "reclaimers", "reclaims", "reclamation", "reclamations", "reclassification", "reclination", "reclinations", "recliner", "recliners", "reclining", "recluse", "recluses", "reclusion", "reclusions", "recoding", "recognisance", "recogniser", "recognisers", "recognition", "recognitions", "recognizance", "recognizer", "recognizers", "recoil", "recoils", "recoinage", "recoinages", "recollectedness", "recollection", "recollections", "recolonisation", "recolonisations", "recolonization", "recolonizations", "recombination", "recombinations", "recommencement", "recommencements", "recommendation", "recommendations", "recommender", "recommenders", "recommission", "recommissions", "recommitment", "recommitments", "recommittal", "recommittals", "recompense", "recompenses", "recomposition", "recompositions", "reconcilability", "reconcilableness", "reconcilement", "reconcilements", "reconciler", "reconcilers", "reconciliation", "reconciliations", "recondensation", "recondensations", "reconnaissance", "reconnaissances", "reconnoiterer", "reconnoiterers", "reconnoitering", "reconnoitre", "reconnoitrer", "reconnoitrers", "reconnoitres", "reconquest", "reconquests", "reconsecration", "reconsecrations", "reconsideration", "reconsolidation", "reconstitute", "reconstitutes", "reconstitution", "reconstitutions", "reconstruction", "reconstructions", "reconversion", "reconversions", "reconveyance", "reconveyances", "record", "record player", "record players", "recorder", "recorders", "recording", "recordings", "records", "recount", "recountal", "recounting", "recounts", "recoup", "recoupment", "recoupments", "recoups", "recourse", "recourses", "recover", "recoverableness", "recoverer", "recoverers", "recoveries", "recovery", "recreance", "recreancy", "recreant", "recreants", "recreation", "recreations", "recrement", "recrements", "recrimination", "recriminations", "recriminator", "recriminators", "recrudescence", "recruit", "recruiter", "recruiters", "recruitment", "recruitments", "recruits", "recrystallization", "recs", "recta", "rectangle", "rectangles", "rectangularity", "recti", "rectification", "rectifications", "rectifier", "rectifiers", "rectitude", "rectitudes", "recto", "rector", "rectorial", "rectorials", "rectories", "rectors", "rectory", "rectos", "rectrix", "rectum", "rectums", "rectus", "recuperation", "recuperations", "recuperator", "recuperators", "recurrence", "recurrences", "recursion", "recursions", "recusancy", "recusant", "recusants", "recusation", "recusations", "recycle", "recycles", "recycling", "red", "red water", "redaction", "redactions", "redactor", "redactors", "redan", "redans", "redbird", "redbreast", "redbreasts", "redbrick", "redbridge", "redcap", "redcaps", "redcoat", "redcoats", "redcurrant", "redcurrants", "redd", "redditch", "reddle", "reddleman", "reddles", "redds", "rede", "redeal", "redeals", "redecoration", "redeemability", "redeemableness", "redeemer", "redeemers", "redefinition", "redefinitions", "redeliverer", "redeliverers", "redeliveries", "redelivery", "redemption", "redemptioner", "redemptioners", "redemptions", "redeployment", "redeployments", "redes", "redetermination", "redevelopment", "redevelopments", "redeye", "redeyes", "redfish", "redfishes", "redford", "redgrave", "redia", "rediffusion", "redingote", "redingotes", "redintegration", "rediscoveries", "rediscovery", "redissolution", "redissolutions", "redistillation", "redistribution", "redistributions", "redivision", "redivisions", "redleg", "redlegs", "redneck", "redness", "redolence", "redolency", "redouble", "redoubles", "redoubt", "redoubts", "redowa", "redowas", "redox", "redpoll", "redpolls", "redraft", "redrafts", "redress", "redresser", "redressers", "redresses", "reds", "redtop", "reducer", "reducers", "reducibility", "reducibleness", "reducing", "reductase", "reductases", "reduction", "reductionism", "reductions", "reductive", "redundance", "redundances", "redundancies", "redundancy", "reduplication", "reduplications", "reduviid", "reduviids", "redwing", "redwings", "redwood", "redwoods", "reebok", "reeboks", "reed", "reedbuck", "reedbucks", "reediness", "reeding", "reedings", "reedling", "reedlings", "reeds", "reef", "reefer", "reefers", "reefs", "reek", "reeks", "reel", "reeler", "reelers", "reels", "reen", "reens", "reeve", "reeves", "ref", "refection", "refections", "refectories", "refectory", "refer", "referee", "refereeing", "referees", "reference", "references", "referendum", "referendums", "referent", "referential", "referents", "referral", "referrals", "refers", "reffo", "reffos", "refill", "refilling", "refills", "refinedness", "refinement", "refinements", "refiner", "refineries", "refiners", "refinery", "refining", "refinings", "refit", "refits", "reflation", "reflations", "reflectance", "reflectances", "reflection", "reflections", "reflectiveness", "reflectivity", "reflector", "reflectors", "reflet", "reflets", "reflex", "reflexes", "reflexion", "reflexions", "reflexive", "reflexiveness", "reflexivity", "reflower", "reflowers", "refluence", "refluences", "reflux", "refluxes", "refocusing", "reforestation", "reforestations", "reform", "reformability", "reformation", "reformations", "reformatories", "reformatory", "reformer", "reformers", "reformism", "reformist", "reformists", "reforms", "reformulation", "reformulations", "refortification", "refraction", "refractions", "refractivity", "refractometer", "refractometers", "refractor", "refractories", "refractoriness", "refractors", "refractory", "refrain", "refrains", "refresher", "refreshers", "refreshment", "refreshments", "refrigerant", "refrigerants", "refrigeration", "refrigerations", "refrigerator", "refrigerators", "refringency", "refs", "refuge", "refugee", "refugees", "refuges", "refugium", "refulgence", "refulgency", "refund", "refunder", "refunders", "refundment", "refundments", "refunds", "refusal", "refusals", "refuse", "refuser", "refusers", "refuses", "refutation", "refutations", "refuter", "refuters", "refuting", "reg", "regainer", "regainers", "regaining", "regal", "regale", "regales", "regalia", "regality", "regals", "regan", "regard", "regardfulness", "regards", "regatta", "regattas", "regelation", "regelations", "regencies", "regency", "regeneracies", "regeneracy", "regeneration", "regenerations", "regenerator", "regenerators", "regensburg", "regent", "regents", "reger", "reggae", "reggie", "regicide", "regicides", "regime", "regimen", "regimens", "regiment", "regimental", "regimentals", "regimentation", "regimentations", "regiments", "regimes", "regina", "reginald", "reginas", "region", "regionalism", "regionalisms", "regionalist", "regionalists", "regions", "register", "registers", "registrant", "registrants", "registrar", "registrars", "registrarship", "registrarships", "registration", "registrations", "registries", "registry", "reglet", "reglets", "regma", "rego", "regoes", "regolith", "regoliths", "regrant", "regrants", "regrater", "regraters", "regress", "regresses", "regression", "regressions", "regressiveness", "regret", "regrets", "regrowth", "regrowths", "regular", "regularisation", "regularisations", "regularities", "regularity", "regularization", "regularizations", "regulars", "regulating", "regulation", "regulations", "regulator", "regulators", "regulus", "reguluses", "regur", "regurgitation", "regurgitations", "rehabilitation", "rehabilitations", "rehash", "rehashes", "rehearing", "rehearings", "rehearsal", "rehearsals", "rehearser", "rehearsers", "reheat", "reheater", "reheaters", "reheating", "reheats", "rehoboam", "rehoboams", "reich", "reichenbach", "reichsrat", "reichstag", "reif", "reification", "reifications", "reigate", "reign", "reigns", "reimbursement", "reimbursements", "reimplantation", "reimport", "reimports", "reimposition", "reimpositions", "reimpression", "reimpressions", "reims", "rein", "reincarnation", "reincarnationist", "reincarnations", "reindeer", "reindeers", "reindustrialization", "reinfection", "reinfections", "reinflation", "reinforcement", "reinforcements", "reinhardt", "reins", "reinsertion", "reinsertions", "reinspection", "reinspections", "reinstalment", "reinstalments", "reinstatement", "reinstatements", "reinstation", "reinstations", "reinsurance", "reinsurances", "reinsurer", "reinsurers", "reintegration", "reintegrations", "reinterment", "reinterments", "reinterpretation", "reinterpretations", "reinterrogation", "reintroduction", "reintroductions", "reinvention", "reinventions", "reinvestment", "reinvestments", "reinvigoration", "reinvigorations", "reis", "reises", "reissue", "reissues", "reiteration", "reiterations", "reith", "reiver", "reivers", "reject", "rejecter", "rejecters", "rejection", "rejections", "rejects", "rejoicing", "rejoicings", "rejoinder", "rejoinders", "rejuvenation", "rejuvenations", "rejuvenescence", "rejuvenescences", "relapse", "relapser", "relapsers", "relapses", "relapsing", "relatedness", "relater", "relaters", "relation", "relations", "relationship", "relationships", "relative", "relativeness", "relatives", "relativism", "relativist", "relativists", "relativities", "relativity", "relator", "relators", "relaxant", "relaxants", "relaxation", "relaxations", "relaxin", "relay", "relays", "release", "releasees", "releaser", "releasers", "releases", "relegating", "relegation", "relegations", "relentlessness", "relevance", "relevancy", "reliability", "reliableness", "reliance", "relic", "relics", "relict", "relicts", "relief", "reliefs", "relier", "reliever", "relievers", "relievo", "relievos", "religieuse", "religieuses", "religieux", "religion", "religionism", "religionist", "religionists", "religions", "religiosity", "religious", "religiousness", "relinquishing", "relinquishment", "relinquishments", "reliquaries", "reliquary", "relique", "reliques", "relish", "relishes", "relishing", "reliving", "reload", "reloads", "relocation", "relocations", "reluctance", "rem", "remainder", "remainders", "remains", "remake", "remakes", "remaking", "remand", "remands", "remanence", "remark", "remarker", "remarkers", "remarks", "remarque", "remarques", "remarriage", "remarriages", "rematch", "rematches", "remblai", "rembrandt", "remeasurement", "remeasurements", "remediation", "remediations", "remedies", "remedy", "rememberer", "rememberers", "remembering", "remembrance", "remembrancer", "remembrancers", "remembrances", "remex", "remigration", "remigrations", "remilitarization", "remilitarizations", "reminder", "reminders", "remington", "reminiscence", "reminiscences", "remise", "remises", "remissibility", "remission", "remissions", "remissness", "remit", "remits", "remittal", "remittals", "remittance", "remittances", "remittee", "remittees", "remitter", "remitters", "remittor", "remittors", "remnant", "remnants", "remonetisation", "remonetisations", "remonetization", "remonetizations", "remonstrance", "remonstrances", "remonstrant", "remonstrants", "remonstration", "remonstrations", "remonstrator", "remonstrators", "remontant", "remontants", "remora", "remoras", "remorse", "remorsefulness", "remorselessness", "remote", "remoteness", "remotion", "remould", "remoulds", "remount", "remounts", "removability", "removal", "removals", "remove", "removedness", "remover", "removers", "removes", "rems", "remscheid", "remuda", "remudas", "remuneration", "remunerations", "remunerativeness", "remunerator", "remunerators", "remus", "renaissance", "renaissances", "renascence", "renascences", "renata", "renault", "rencontre", "render", "renderer", "renderers", "rendering", "renderings", "renders", "rendezvous", "rendition", "renditions", "rendzina", "renegade", "renegades", "renegado", "renegados", "renegation", "renegations", "renege", "reneger", "renegers", "reneges", "renegotiation", "renegotiations", "renewal", "renewals", "renewer", "renewers", "renfrew", "renga", "rengas", "renin", "renitencies", "renitency", "rennes", "rennet", "rennets", "rennin", "reno", "renoir", "renomination", "renominations", "renormalization", "renounce", "renouncement", "renouncements", "renouncer", "renouncers", "renounces", "renovation", "renovations", "renovator", "renovators", "renown", "renowns", "rensselaerite", "rent", "rent roll", "rent rolls", "rentability", "rental", "rentals", "rente", "renter", "renters", "rentes", "rentier", "rentiers", "renting", "rents", "renunciation", "renunciations", "renvoi", "renvois", "reoccupation", "reoccupations", "reorder", "reordering", "reorders", "reorganisation", "reorganisations", "reorganization", "reorganizations", "reorientation", "reorientations", "rep", "repagination", "repaint", "repaints", "repair", "repairer", "repairers", "repairman", "repairs", "reparation", "reparations", "repartee", "repartees", "repartition", "repartitions", "repassage", "repassages", "repast", "repasts", "repatriate", "repatriates", "repatriation", "repatriations", "repayment", "repayments", "repeal", "repealer", "repealers", "repeals", "repeat", "repeater", "repeaters", "repeating", "repeatings", "repeats", "repechage", "repellant", "repellants", "repellence", "repellences", "repellencies", "repellency", "repellent", "repellents", "repeller", "repellers", "repelling", "repentance", "repentances", "repercussion", "repercussions", "repertoire", "repertoires", "repertories", "repertory", "reperusal", "reperusals", "repetend", "repetends", "repetition", "repetitions", "repetitiousness", "repetitiveness", "rephotograph", "rephotographs", "rephrasing", "repiner", "repiners", "replacement", "replacements", "replacing", "replay", "replays", "replenishment", "replenishments", "repleteness", "repletion", "repletions", "replevies", "replevin", "replevins", "replevisable", "replevy", "replica", "replicas", "replication", "replications", "replier", "repliers", "replies", "reply", "report", "reportage", "reportages", "reporter", "reporters", "reporting", "reportings", "reports", "reposal", "reposals", "repose", "reposedness", "reposes", "repositing", "reposition", "repositions", "repositories", "repository", "repossession", "repossessions", "repossessor", "repoussage", "repoussages", "repp", "repps", "reprehender", "reprehenders", "reprehensibility", "reprehension", "reprehensions", "representation", "representationalism", "representations", "representative", "representativeness", "representatives", "repression", "repressions", "repressor", "repressors", "reprieve", "reprieves", "reprimand", "reprimands", "reprint", "reprinting", "reprints", "reprisal", "reprisals", "reprise", "reprises", "repro", "reproach", "reproacher", "reproachers", "reproaches", "reproachfulness", "reprobate", "reprobates", "reprobation", "reprobations", "reproducer", "reproducers", "reproduction", "reproductions", "reproductiveness", "reprography", "reproof", "reproofs", "repros", "reproval", "reprovals", "reps", "reptile", "reptiles", "reptilian", "reptilians", "republic", "republican", "republicanism", "republicans", "republication", "republications", "republics", "republishing", "repudiation", "repudiations", "repugnance", "repugnances", "repulse", "repulses", "repulsion", "repulsions", "repulsiveness", "repurchase", "repurchases", "reputability", "reputation", "reputations", "repute", "reputes", "request", "requests", "requiem", "requiems", "requiescat", "requiescats", "requirement", "requirements", "requisite", "requisiteness", "requisites", "requisition", "requisitionist", "requisitionists", "requisitions", "requital", "requitals", "requitement", "requitements", "requiter", "requiters", "reradiation", "reradiations", "rerebrace", "rerebraces", "reredos", "reredoses", "reregulation", "reremouse", "rerun", "reruns", "res", "resale", "resales", "rescinding", "rescission", "rescissions", "rescript", "rescripts", "rescue", "rescuer", "rescuers", "rescues", "research", "researcher", "researchers", "researches", "resect", "resection", "resections", "resects", "reseda", "reselection", "reselections", "resemblance", "resemblances", "resentence", "resentences", "resentfulness", "resentment", "resentments", "reserpine", "reservation", "reservations", "reserve", "reservedness", "reserves", "reservist", "reservists", "reservoir", "reservoirs", "reset", "resets", "resetter", "resetters", "resettlement", "resettlements", "reshipment", "reshipments", "reshuffle", "reshuffles", "reshuffling", "residence", "residences", "residencies", "residency", "resident", "residentiaries", "residentiary", "residents", "residentship", "residentships", "resider", "residual", "residuals", "residue", "residues", "residuum", "resignation", "resignations", "resilience", "resiliency", "resin", "resinification", "resinoid", "resinoids", "resins", "resipiscence", "resist", "resistance", "resistances", "resistant", "resistants", "resister", "resisters", "resistibility", "resistivities", "resistivity", "resistlessness", "resistor", "resistors", "resists", "resnais", "resnatron", "resnatrons", "resoluteness", "resolution", "resolutioner", "resolutioners", "resolutions", "resolvability", "resolve", "resolvedness", "resolvent", "resolvents", "resolver", "resolvers", "resolves", "resolving", "resonance", "resonances", "resonator", "resonators", "resorbence", "resorcinol", "resorption", "resorptions", "resort", "resorts", "resource", "resourcefulness", "resources", "respect", "respectabilities", "respectability", "respecter", "respecters", "respectfulness", "respects", "respighi", "respiration", "respirations", "respirator", "respirators", "respiratory", "respite", "respites", "resplendence", "resplendency", "respond", "respondence", "respondent", "respondents", "responder", "responders", "responds", "responsa", "response", "responser", "responsers", "responses", "responsibilities", "responsibility", "responsible", "responsiveness", "responsor", "responsories", "responsors", "responsory", "responsum", "rest", "rest cure", "rest cures", "rest home", "rest homes", "restart", "restarts", "restatement", "restatements", "restaurant", "restaurants", "restaurateur", "restaurateurs", "rester", "resters", "restfulness", "restitution", "restitutions", "restiveness", "restlessness", "restorableness", "restoration", "restorationism", "restorations", "restorative", "restoratives", "restorer", "restorers", "restrainer", "restrainers", "restraint", "restraints", "restriction", "restrictions", "restrictiveness", "rests", "result", "resultant", "resultants", "results", "resume", "resumes", "resumption", "resumptions", "resurgence", "resurgences", "resurrection", "resurrectionism", "resurrectionist", "resurrections", "resurvey", "resurveys", "resuscitation", "resuscitations", "resuscitator", "resuscitators", "retable", "retables", "retail", "retailer", "retailers", "retailing", "retails", "retainer", "retainers", "retake", "retaker", "retakers", "retakes", "retaking", "retakings", "retaliation", "retaliations", "retaliator", "retaliators", "retama", "retamas", "retard", "retardant", "retardants", "retardate", "retardates", "retardation", "retardations", "retarder", "retarders", "retardment", "retardments", "retards", "retch", "retches", "rete", "retene", "retention", "retentionist", "retentionists", "retentions", "retentiveness", "retentivity", "retes", "rethink", "rethinks", "retiarius", "retiariuses", "reticence", "reticle", "reticles", "reticulation", "reticulations", "reticule", "reticules", "reticulum", "reticulums", "retina", "retinaculum", "retinal", "retinas", "retinite", "retinitis", "retinol", "retinoscope", "retinoscopy", "retinue", "retinues", "retiredness", "retiree", "retirees", "retirement", "retirements", "retirer", "retirers", "retorsion", "retorsions", "retort", "retorter", "retorters", "retortion", "retortions", "retorts", "retouch", "retoucher", "retouchers", "retouches", "retractation", "retractility", "retraction", "retractions", "retractor", "retractors", "retraining", "retransfer", "retransfers", "retranslation", "retranslations", "retransmission", "retransmissions", "retread", "retreads", "retreat", "retreatant", "retreated", "retreats", "retrenchment", "retrenchments", "retrial", "retrials", "retribution", "retributions", "retrieval", "retrievals", "retrieve", "retriever", "retrievers", "retrieves", "retro", "retroaction", "retrocession", "retrocessions", "retrochoir", "retrochoirs", "retroflection", "retroflections", "retroflexion", "retroflexions", "retrogradation", "retrogression", "retrogressions", "retros", "retrospect", "retrospection", "retrospections", "retrospective", "retrospectives", "retrospects", "retroussage", "retroversion", "retrovirus", "retroviruses", "retsina", "retsinas", "return", "returnee", "returnees", "returns", "reuben", "reunification", "reunifications", "reunion", "reunionism", "reunionist", "reunionists", "reunions", "reuter", "reuters", "rev", "revaccination", "revaccinations", "revalidation", "revaluation", "revaluations", "revamp", "revamps", "revanche", "revanches", "revanchism", "reveal", "revealer", "revealers", "revealing", "revealings", "revealment", "revealments", "reveals", "reveille", "reveilles", "revel", "revelation", "revelationist", "revelationists", "revelations", "revelator", "revelators", "reveler", "revelers", "reveller", "revellers", "revelries", "revelry", "revels", "revenant", "revenants", "revenge", "revengefulness", "revenger", "revengers", "revenges", "revenue", "revenues", "reverberation", "reverberations", "reverberator", "reverberators", "reverberatory", "revere", "reverence", "reverencer", "reverencers", "reverences", "reverend", "reverends", "reverer", "reverers", "reveres", "reverie", "reveries", "revers", "reversal", "reversals", "reverse", "reverser", "reversers", "reverses", "reversibility", "reversible", "reversion", "reversioner", "reversioners", "reversions", "reverso", "reversos", "revert", "reverting", "reverts", "revery", "revetment", "revetments", "review", "reviewer", "reviewers", "reviews", "revilement", "reviler", "revilers", "revindication", "revindications", "revisal", "revisals", "revise", "reviser", "revisers", "revises", "revising", "revision", "revisionism", "revisionist", "revisionists", "revisions", "revisitation", "revisitations", "revitalisation", "revitalisations", "revitalization", "revitalizations", "revivability", "revival", "revivalism", "revivalist", "revivalists", "revivals", "reviver", "revivers", "revivification", "reviviscence", "revivor", "revivors", "revocability", "revocableness", "revocation", "revocations", "revoke", "revokes", "revolt", "revolter", "revolters", "revolts", "revolution", "revolutionaries", "revolutionary", "revolutionist", "revolutionists", "revolutions", "revolver", "revolvers", "revs", "revue", "revues", "revulsion", "revulsions", "revulsive", "rewa rewa", "rewa rewas", "reward", "rewards", "rewind", "rewinds", "rewording", "rewrite", "rewrites", "rewriting", "rex", "rexine", "reykjavik", "reynard", "reynards", "reynaud", "reynold", "reynolds", "rhabdomancy", "rhabdomyoma", "rhachis", "rhachises", "rhaetia", "rhaetian", "rhaetic", "rhamphotheca", "rhamphothecas", "rhapsodic", "rhapsodies", "rhapsodist", "rhapsodists", "rhapsody", "rhatanies", "rhatany", "rhea", "rheas", "rhebok", "rheboks", "rheims", "rhein", "rheinland", "rhenish", "rhenium", "rheologist", "rheologists", "rheology", "rheometer", "rheometers", "rheostat", "rheostats", "rheotaxis", "rheotrope", "rheotropes", "rheotropism", "rhesus", "rhesuses", "rhetor", "rhetoric", "rhetorician", "rhetoricians", "rhetors", "rheum", "rheumatic", "rheumatics", "rheumatism", "rheumatologist", "rheumatologists", "rheumatology", "rheums", "rhexis", "rheydt", "rhiannon", "rhine", "rhineland", "rhinencephalon", "rhinencephalons", "rhines", "rhinestone", "rhinestones", "rhinitis", "rhino", "rhinoceros", "rhinoceroses", "rhinologist", "rhinologists", "rhinology", "rhinoplasty", "rhinos", "rhinoscope", "rhinoscopes", "rhinoscopy", "rhizobium", "rhizoid", "rhizoids", "rhizome", "rhizomes", "rhizomorph", "rhizomorphs", "rhizopod", "rhizopods", "rhizopus", "rhizopuses", "rhizosphere", "rhizospheres", "rho", "rhoda", "rhodamine", "rhodes", "rhodesia", "rhodesian", "rhodesians", "rhodian", "rhodium", "rhodochrosite", "rhododendron", "rhododendrons", "rhodolite", "rhodolites", "rhodonite", "rhodopsin", "rhomb", "rhombencephalon", "rhombohedron", "rhombohedrons", "rhomboid", "rhomboides", "rhomboids", "rhombs", "rhombus", "rhombuses", "rhona", "rhonchus", "rhonda", "rhondda", "rhone", "rhones", "rhos", "rhotacism", "rhotacisms", "rhubarb", "rhubarbs", "rhumb", "rhumba", "rhumbas", "rhumbs", "rhus", "rhuses", "rhyme", "rhymes", "rhymester", "rhymesters", "rhyolite", "rhys", "rhythm", "rhythmic", "rhythmicity", "rhythmics", "rhythmist", "rhythmists", "rhythms", "rhytidectomies", "rhytidectomy", "rhyton", "ria", "rial", "rials", "rialto", "rias", "riata", "riatas", "rib", "ribald", "ribaldries", "ribaldry", "ribalds", "riband", "ribands", "ribband", "ribbands", "ribbentrop", "ribbing", "ribbings", "ribble", "ribble rabble", "ribbon", "ribbons", "riboflavin", "ribonuclease", "ribose", "ribosome", "ribosomes", "ribs", "ribwort", "ribworts", "ricci", "rice", "ricer", "ricercar", "ricercare", "ricercares", "ricercars", "ricers", "rices", "rich", "richard", "richards", "richardson", "richelieu", "riches", "richie", "richmal", "richmond", "richness", "richthofen", "ricin", "rick", "ricketiness", "rickets", "rickettsia", "rickettsias", "rickey", "rickeys", "rickle", "rickles", "ricks", "ricksha", "rickshas", "rickshaw", "rickshaws", "ricky", "ricochet", "ricochets", "ricotta", "rictus", "rictuses", "ridability", "riddance", "riddances", "ridder", "ridders", "riddle", "riddles", "ride", "rider", "riders", "rides", "ridge", "ridgel", "ridgels", "ridgepole", "ridgepoles", "ridges", "ridgeway", "ridgeways", "ridgil", "ridgils", "ridgling", "ridglings", "ridicule", "ridiculer", "ridiculers", "ridicules", "ridiculousness", "riding", "ridings", "ridley", "ridotto", "ridottos", "riebeckite", "riel", "riels", "riempie", "riempies", "rienzi", "riesling", "rieslings", "rifacimento", "rifeness", "riff", "riffle", "riffler", "rifflers", "riffles", "riffs", "rifle", "rifleman", "rifler", "riflers", "rifles", "rifling", "riflings", "rift", "rifts", "rig", "riga", "rigadoon", "rigadoons", "rigatoni", "rigel", "rigger", "riggers", "rigging", "riggings", "right", "right handedness", "right hander", "right handers", "right mindedness", "right winger", "right wingers", "righteousness", "rightfulness", "rightism", "rightist", "rightists", "rightness", "rights", "rigidity", "rigidness", "rigmarole", "rigmaroles", "rigol", "rigoletto", "rigols", "rigor", "rigorism", "rigorist", "rigorists", "rigorousness", "rigors", "rigour", "rigours", "rigout", "rigouts", "rigs", "rigsdag", "rijeka", "rikki", "riksdag", "riley", "rilievo", "rilke", "rill", "rilles", "rillet", "rillets", "rills", "rim", "rimbaud", "rime", "rimer", "rimers", "rimes", "rimini", "rims", "rimsky korsakov", "rimu", "rimus", "rin", "rinaldo", "rind", "rinderpest", "rinds", "ring", "ring dyke", "ring dykes", "ringbone", "ringbones", "ringer", "ringers", "ringgit", "ringgits", "ringhals", "ringhalses", "ringing", "ringings", "ringleader", "ringleaders", "ringlet", "ringlets", "ringo", "rings", "ringside", "ringsides", "ringster", "ringsters", "ringworm", "ringworms", "rink", "rinkhals", "rinkhalses", "rinks", "rins", "rinse", "rinses", "rinsing", "rinsings", "riot", "rioter", "rioters", "rioting", "riotings", "riotousness", "riots", "rip", "rip off", "rip offs", "riparian", "riparians", "ripeness", "ripening", "ripes", "ripidolite", "ripieno", "ripienos", "ripon", "riposte", "ripostes", "ripper", "rippers", "ripple", "rippler", "ripplers", "ripples", "ripplet", "ripplets", "rippling", "ripplings", "riprap", "ripraps", "rips", "ripsnorter", "ripsnorters", "riptide", "riptides", "ripuarian", "rise", "riser", "risers", "rises", "rishi", "rishis", "risibility", "rising", "risings", "risk", "risker", "riskers", "riskiness", "risking", "risks", "risotto", "risottos", "riss", "rissole", "rissoles", "rit", "rita", "rite", "rites", "ritornello", "ritornellos", "rits", "ritter", "ritters", "ritual", "ritualise", "ritualises", "ritualism", "ritualist", "ritualists", "ritualization", "ritualizations", "rituals", "ritz", "ritzes", "rivage", "rivages", "rival", "rivalries", "rivalry", "rivals", "river", "rivera", "rivers", "riverside", "rivet", "riveter", "riveters", "rivets", "riviera", "rivieras", "rivulet", "rivulets", "rix dollar", "rix dollars", "riyadh", "riyal", "riyals", "roach", "roaches", "road", "roadblock", "roadblocks", "roadholding", "roadhouse", "roadhouses", "roadman", "roads", "roadside", "roadsides", "roadstead", "roadsteads", "roadster", "roadsters", "roadway", "roadways", "roadwork", "roadworks", "roam", "roamer", "roamers", "roams", "roan", "roanoke", "roans", "roar", "roarer", "roarers", "roaring", "roarings", "roars", "roast", "roaster", "roasters", "roasting", "roastings", "roasts", "robalo", "robalos", "robbe grillet", "robber", "robberies", "robbers", "robbery", "robbie", "robbins", "robe", "robe de chambre", "robert", "roberta", "roberts", "robes", "robeson", "robespierre", "robin", "robina", "robinia", "robinias", "robins", "robinson", "roble", "robles", "roborant", "roborants", "robot", "robotics", "robots", "robson", "robustness", "robyn", "roc", "rocaille", "rocailles", "rocambole", "rocamboles", "rochdale", "rochelle", "rochester", "rochet", "rochets", "rock", "rock n roll", "rock and roll", "rockabilly", "rockaway", "rockaways", "rockefeller", "rocker", "rockeries", "rockers", "rockery", "rocket", "rocketeer", "rocketeers", "rocketry", "rockets", "rockford", "rockiness", "rockingham", "rockling", "rocklings", "rocks", "rockweed", "rococo", "rococos", "rocs", "rod", "roddy", "rode", "rodent", "rodenticide", "rodenticides", "rodents", "rodeo", "rodeos", "roderick", "rodes", "rodgers", "rodin", "rodney", "rodomontade", "rodomontades", "rodrigo", "rods", "roe", "roebuck", "roebucks", "roemer", "roemers", "roentgen", "roentgens", "roes", "rogation", "rogations", "roger", "rogers", "roget", "rogue", "rogueries", "roguery", "rogues", "roguishness", "roisterer", "roisterers", "roisterous", "roke", "rokes", "roland", "role", "role playing", "roles", "rolf", "rolfe", "roll", "roll on", "roll ons", "roll out", "roll outs", "rollaway", "rollbar", "rollbars", "roller", "roller skater", "rollers", "rollick", "rollicks", "rolling", "rollings", "rollins", "rollmop", "rollmops", "rollneck", "rollnecks", "rollo", "rollock", "rollocks", "rolls", "roly polies", "roly poly", "rom", "roma", "romagna", "romaic", "romaine", "romaines", "romaji", "roman", "romance", "romancer", "romancers", "romances", "romanes", "romania", "romanian", "romanians", "romanies", "romanisation", "romanism", "romanist", "romanizer", "romanizers", "romanov", "romans", "romansch", "romansh", "romantic", "romanticisation", "romanticise", "romanticises", "romanticism", "romanticist", "romanticists", "romanticization", "romantics", "romany", "romas", "romaunt", "romaunts", "rome", "romeo", "romeos", "rommany", "rommel", "romney", "romneya", "romneyas", "romo", "romp", "romper", "rompers", "rompishness", "romps", "roms", "romulus", "romy", "ron", "rona", "ronald", "ronde", "rondeau", "rondel", "rondels", "rondes", "rondo", "rondos", "rondure", "rondures", "rone", "roneo", "roneos", "rones", "ronggeng", "ronggengs", "ronin", "ronnie", "ronyon", "roo", "rood", "rood tree", "roods", "roof", "roofer", "roofers", "roofing", "roofings", "roofs", "rooibos", "rooinek", "rooineks", "rook", "rookeries", "rookery", "rookie", "rookies", "rooks", "room", "roomer", "roomers", "roomette", "roomettes", "roomful", "roomfuls", "roominess", "rooms", "rooney", "roos", "roosevelt", "roost", "rooster", "roosters", "roosts", "root", "rootage", "rootages", "rooter", "rooters", "rooting", "rootings", "rootlet", "rootlets", "roots", "rootstock", "rootstocks", "rooty", "rope", "roper", "ropers", "ropery", "ropes", "ropeway", "ropeways", "ropiness", "roping", "ropings", "roque", "roquefort", "roquelaure", "roquelaures", "roquet", "roquets", "roquette", "roquettes", "rorqual", "rorquals", "rort", "rorts", "ros", "rosa", "rosabel", "rosace", "rosaces", "rosalie", "rosalind", "rosaline", "rosamond", "rosamund", "rosaniline", "rosanna", "rosarian", "rosarians", "rosaries", "rosario", "rosarium", "rosariums", "rosary", "roscian", "roscius", "roscommon", "rose", "rose root", "rose water", "roseanne", "rosefish", "rosefishes", "rosehip", "rosehips", "rosella", "rosellas", "roselle", "roselles", "rosemaling", "rosemaries", "rosemary", "rosenberg", "roseola", "roseries", "rosery", "roses", "roset", "rosets", "rosetta", "rosette", "rosettes", "rosewall", "rosewood", "rosewoods", "rosicrucian", "rosicrucians", "rosie", "rosin", "rosina", "rosinante", "rosiness", "rosins", "ross", "rossellini", "rossetti", "rossini", "rostand", "rostellum", "rostellums", "roster", "rosters", "rostock", "rostov", "rostra", "rostrocarinate", "rostrocarinates", "rostropovich", "rostrum", "rostrums", "rot", "rota", "rotameter", "rotameters", "rotarian", "rotarianism", "rotarians", "rotaries", "rotary", "rotas", "rotation", "rotations", "rotator", "rotators", "rotavirus", "rotaviruses", "rote", "rotenone", "rotes", "rotgut", "rotguts", "roth", "rotherham", "rothermere", "rothesay", "rothko", "rothschild", "roti", "rotifer", "rotifera", "rotifers", "rotis", "rotisserie", "rotisseries", "rotl", "rotls", "rotogravure", "rotogravures", "rotor", "rotorcraft", "rotors", "rotorua", "rots", "rottenness", "rottenstone", "rottenstones", "rotter", "rotterdam", "rotters", "rotting", "rottweiler", "rottweilers", "rotunda", "rotundas", "rotundities", "rotundity", "roturier", "roturiers", "rouault", "roubaix", "rouble", "roubles", "roucou", "rouen", "rouge", "rouges", "rough", "rough and tumble", "roughage", "roughcast", "roughcasts", "rougher", "roughers", "roughhouse", "roughhouses", "roughness", "roughnesses", "roughs", "roulade", "roulades", "rouleau", "rouleaus", "roulette", "roulettes", "roumania", "rounce", "rounces", "round", "roundabout", "roundabouts", "roundedness", "roundel", "roundelay", "roundelays", "roundels", "rounder", "rounders", "roundhead", "roundheads", "rounding", "roundings", "roundlet", "roundlets", "roundness", "rounds", "roundsman", "roup", "roups", "roupy", "rouse", "rouseabout", "rouser", "rousers", "rouses", "rousing", "rousseau", "roussel", "roussillon", "roustabout", "roustabouts", "rout", "route", "routeman", "router", "routers", "routes", "routh", "routine", "routines", "routing", "routings", "routinism", "routinist", "routinists", "routs", "roux", "rove", "rover", "rovers", "roves", "roving", "rovings", "row", "rowan", "rowans", "rowboat", "rowboats", "rowdies", "rowdiness", "rowdy", "rowdyism", "rowe", "rowel", "rowels", "rowen", "rowena", "rowens", "rower", "rowers", "rowing", "rowland", "rowley", "rowlock", "rowlocks", "rows", "roxana", "roxane", "roxanne", "roxburgh", "roy", "royal", "royalism", "royalist", "royalists", "royals", "royalties", "royalty", "royce", "roz", "rozelle", "rozelles", "rozzer", "rozzers", "rub", "rub a dub", "rubato", "rubatos", "rubber", "rubberneck", "rubbernecks", "rubbers", "rubbing", "rubbings", "rubbish", "rubbishes", "rubble", "rubbles", "rubbra", "rubdown", "rubdowns", "rube", "rubefacient", "rubefacients", "rubefaction", "rubefies", "rubefy", "rubella", "rubellite", "rubens", "rubeola", "rubia", "rubicelle", "rubicelles", "rubicon", "rubicons", "rubicundity", "rubidium", "rubies", "rubin", "rubina", "rubinstein", "ruble", "rubles", "rubric", "rubrication", "rubricator", "rubricators", "rubrician", "rubricians", "rubrics", "rubs", "rubstone", "rubstones", "ruby", "ruche", "ruches", "ruching", "ruchings", "ruck", "rucks", "rucksack", "rucksacks", "ruckus", "ruckuses", "ruction", "ructions", "rudbeckia", "rudbeckias", "rudd", "rudder", "rudders", "ruddiness", "ruddleman", "ruddles", "ruddock", "ruddocks", "rudds", "rudeness", "rudenesses", "ruderal", "ruderals", "rudesheimer", "rudiment", "rudimentariness", "rudiments", "rudolf", "rudolph", "rudyard", "rue", "ruefulness", "rues", "ruff", "ruffe", "ruffes", "ruffian", "ruffianism", "ruffians", "ruffle", "ruffler", "rufflers", "ruffles", "ruffs", "rufus", "rug", "rugby", "ruggedness", "rugger", "rugging", "ruggings", "rugosity", "rugs", "ruhr", "ruin", "ruination", "ruinations", "ruiner", "ruiners", "ruining", "ruinings", "ruinousness", "ruins", "ruisdael", "rule", "ruler", "rulers", "rulership", "rulerships", "rules", "ruling", "rulings", "rum", "rumania", "rumanian", "rumanians", "rumba", "rumbas", "rumble", "rumbler", "rumblers", "rumbles", "rumbling", "rumblings", "rumen", "ruminant", "ruminants", "rumination", "ruminations", "rummage", "rummager", "rummagers", "rummages", "rummer", "rummers", "rummy", "rumor", "rumors", "rumour", "rumourmonger", "rumourmongers", "rumours", "rump", "rumpelstiltskin", "rumple", "rumples", "rumps", "rumpus", "rumpuses", "rums", "run", "run in", "run on", "run through", "run throughs", "run up", "run ups", "runabout", "runabouts", "runagate", "runagates", "runaway", "runaways", "runch", "runches", "runcorn", "rundle", "rundles", "rundlet", "rundlets", "rune", "runes", "rung", "rungs", "runkle", "runkles", "runlet", "runlets", "runnel", "runnels", "runner", "runner up", "runners", "running", "runnings", "runnymede", "runs", "runt", "runts", "runway", "runways", "runyon", "rupee", "rupees", "rupert", "rupiah", "rupiahs", "rupture", "ruptures", "rupturewort", "ruptureworts", "ruralisation", "ruralism", "ruralist", "ruralists", "rurality", "ruralization", "ruritania", "ruscus", "ruscuses", "ruse", "ruses", "rush", "rushee", "rushees", "rusher", "rushers", "rushes", "rushing", "rushlight", "rushlights", "rushmore", "rusk", "ruskin", "rusks", "russ", "russell", "russellite", "russet", "russets", "russia", "russian", "russianisation", "russianization", "russians", "russias", "russkies", "russky", "russophile", "russophiles", "russophobe", "russophobes", "russophobia", "rust", "rustic", "rustication", "rustications", "rusticator", "rusticators", "rusticity", "rustics", "rustiness", "rusting", "rustings", "rustle", "rustler", "rustlers", "rustles", "rustling", "rustlings", "rusts", "rut", "rutabaga", "ruth", "ruthenia", "ruthenian", "ruthenium", "rutherford", "rutherfordium", "rutherfords", "ruthlessness", "ruths", "rutile", "rutin", "rutland", "ruts", "rwanda", "rya", "ryal", "ryals", "ryan", "ryas", "rydal", "ryder", "rye", "rye grass", "ryes", "ryke", "rykes", "ryokan", "ryokans", "ryot", "ryots", "saar", "saba", "sabadilla", "sabaean", "sabah", "sabaoth", "sabatini", "sabaton", "sabatons", "sabbat", "sabbatarian", "sabbatarians", "sabbath", "sabbaths", "sabbatical", "sabbaticals", "sabbats", "sabean", "sabeans", "sabellian", "saber", "sabers", "sabian", "sabin", "sabina", "sabine", "sabines", "sabins", "sable", "sables", "sabot", "sabotage", "sabotages", "saboteur", "saboteurs", "sabots", "sabra", "sabras", "sabre", "sabres", "sabretache", "sabretaches", "sabrina", "sac", "sacaton", "sacatons", "saccharase", "saccharate", "saccharide", "saccharides", "saccharifies", "saccharify", "saccharimeter", "saccharimeters", "saccharimetry", "saccharin", "saccharinity", "saccharization", "saccharoid", "saccharometer", "saccharometers", "saccharose", "saccharoses", "sacculation", "sacculations", "saccule", "saccules", "sacculus", "sacellum", "sacerdotalism", "sacerdotalist", "sacerdotalists", "sacha", "sachem", "sachemdom", "sachems", "sachemship", "sachet", "sachets", "sachs", "sack", "sackbut", "sackbuts", "sackcloth", "sackcloths", "sacker", "sackers", "sackful", "sackfuls", "sacking", "sackings", "sacks", "sacque", "sacques", "sacrament", "sacramental", "sacramentalism", "sacramentalist", "sacramentalists", "sacramentals", "sacramento", "sacraments", "sacrarium", "sacrariums", "sacredness", "sacrifice", "sacrificer", "sacrificers", "sacrifices", "sacrilege", "sacrileges", "sacrilegiousness", "sacring", "sacrings", "sacristan", "sacristans", "sacristies", "sacristy", "sacroiliac", "sacrosanctity", "sacrosanctness", "sacrum", "sacs", "sad", "sadat", "saddhu", "saddhus", "saddle", "saddle sore", "saddleback", "saddlebacks", "saddlebill", "saddlebills", "saddler", "saddleries", "saddlers", "saddlery", "saddles", "sadducee", "sadduceeism", "sadducees", "sade", "sadhe", "sadhu", "sadhus", "sadie", "sadism", "sadist", "sadists", "sadness", "safari", "safaris", "safe", "safe blower", "safe breaker", "safe breakers", "safe conduct", "safe deposit", "safe deposits", "safeguard", "safeguards", "safelight", "safeness", "safes", "safeties", "safety", "safety deposit", "safety deposits", "saffian", "saffians", "safflower", "safflowers", "saffron", "saffrons", "safranine", "safrole", "safroles", "sag", "saga", "sagaciousness", "sagacity", "sagamore", "sagamores", "sagas", "sage", "sagebrush", "sagebrushes", "sages", "saggar", "saggars", "sagger", "saggers", "sagitta", "sagittaries", "sagittarius", "sagittary", "sagittas", "sago", "sagos", "sags", "saguaro", "saguaros", "sahara", "saharan", "sahib", "sahibs", "saice", "said", "saiga", "saigas", "saigon", "sail", "sailer", "sailers", "sailing", "sailings", "sailmaker", "sailor", "sailoring", "sailorings", "sailors", "sailplane", "sailplanes", "sails", "saimiri", "saimiris", "sainfoin", "sainfoins", "saint", "saint denis", "saint just", "saint laurent", "saint quentin", "saint simon", "saint simonianism", "saintdom", "sainthood", "saintliness", "saints", "saithe", "saithes", "saiva", "sakai", "sake", "saker", "sakers", "sakes", "sakharov", "saki", "sakis", "sakkos", "sakkoses", "sakta", "sakti", "saktism", "sal", "salaam", "salaams", "salability", "salaciousness", "salacity", "salad", "salade", "salades", "saladin", "salads", "salal", "salals", "salamanca", "salamander", "salamanders", "salami", "salamis", "salaries", "salary", "salchow", "salchows", "sale", "saleability", "saleem", "salem", "salep", "saleps", "saleratus", "salerno", "sales", "salesgirl", "salesgirls", "salesian", "salesladies", "saleslady", "salesman", "salesmanship", "salesperson", "salespersons", "salesroom", "salesrooms", "saleswoman", "salet", "salets", "salford", "salian", "salicin", "salicional", "salicionals", "salicornia", "salicornias", "salicylate", "salience", "saliency", "salient", "salientian", "salients", "salieri", "salim", "salimeter", "salimeters", "salina", "salinas", "saline", "salines", "salinger", "salinity", "salinometer", "salinometers", "salisbury", "salish", "salishan", "saliva", "salivas", "salivation", "salix", "salk", "sallee", "sallenders", "sallet", "sallets", "sallies", "sallow", "sallowness", "sallows", "sally", "salmagundi", "salmagundies", "salmagundis", "salmanazar", "salmanazars", "salmi", "salmis", "salmon", "salmonella", "salmonellas", "salmonellosis", "salmonid", "salmonids", "salmonoid", "salmonoids", "salmons", "salome", "salon", "salons", "saloon", "saloons", "saloop", "saloops", "salopette", "salopettes", "salopian", "salp", "salpa", "salpas", "salpicon", "salpicons", "salpiglossis", "salpingectomies", "salpingectomy", "salpingitis", "salpinx", "salpinxes", "salps", "sals", "salsa", "salsifies", "salsify", "salt", "salt box", "salt boxes", "saltando", "saltarello", "saltarellos", "saltation", "saltations", "saltchuck", "salter", "saltern", "salterns", "salters", "saltier", "saltiers", "saltiness", "salting", "saltings", "saltire", "saltires", "saltishness", "saltness", "saltpeter", "saltpetre", "salts", "saltus", "saltuses", "salubriousness", "salubrities", "salubrity", "saluki", "salukis", "salutariness", "salutation", "salutations", "salutatorian", "salutatorians", "salute", "saluter", "saluters", "salutes", "salvability", "salvador", "salvage", "salvages", "salvation", "salvationism", "salvationist", "salvationists", "salvations", "salve", "salver", "salvers", "salves", "salvia", "salvias", "salvo", "salvoes", "salvor", "salvors", "salvos", "salzburg", "sam", "samadhi", "saman", "samantha", "samara", "samaras", "samaria", "samaritan", "samaritanism", "samaritans", "samarium", "samarkand", "samarskite", "samba", "sambar", "sambars", "sambas", "sambo", "sambuca", "sambucas", "sambur", "samburs", "samekh", "sameness", "sames", "samfoo", "samfoos", "sami", "samian", "samiel", "samiels", "samisen", "samisens", "samite", "samiti", "samitis", "samizdat", "samlet", "samlets", "sammy", "samnite", "samoan", "samoans", "samos", "samothrace", "samovar", "samovars", "samoyed", "samoyedes", "samoyedic", "samoyeds", "samp", "sampan", "sampans", "samphire", "samphires", "sample", "sampler", "samplers", "samples", "sampling", "samplings", "samps", "sampson", "samsara", "samshu", "samshus", "samson", "samuel", "samurai", "sanatorium", "sanatoriums", "sanbenito", "sanbenitos", "sanctification", "sanctifications", "sanctifier", "sanctifiers", "sanctimoniousness", "sanctimony", "sanction", "sanctions", "sanctities", "sanctitude", "sanctitudes", "sanctity", "sanctuaries", "sanctuary", "sanctum", "sanctums", "sanctus", "sand", "sandal", "sandals", "sandalwood", "sandarac", "sandarach", "sandbag", "sandbagger", "sandbaggers", "sandbags", "sandblast", "sandblaster", "sandblasters", "sandblasts", "sandcastle", "sander", "sanderling", "sanderlings", "sanders", "sanderson", "sandhi", "sandhis", "sandhurst", "sandiness", "sandiver", "sandivers", "sandman", "sandpaper", "sandpapers", "sandpiper", "sandpipers", "sandra", "sandringham", "sands", "sandsoap", "sandstone", "sandstones", "sandwich", "sandwiches", "sandwort", "sandworts", "saneness", "sang", "sangaree", "sangarees", "sanglier", "sango", "sangraal", "sangria", "sangrias", "sangs", "sanguification", "sanguinariness", "sanguine", "sanguineness", "sanguines", "sanguinity", "sanhedrin", "sanicle", "sanicles", "sanidine", "sanies", "sanitarian", "sanitarians", "sanitarium", "sanitariums", "sanitation", "sanitisation", "sanitisations", "sanitization", "sanitizations", "sanitizing", "sanity", "sanjak", "sanjaks", "sanjay", "sankhya", "sannup", "sannups", "sannyasi", "sannyasis", "sansevieria", "sansevierias", "sanskrit", "sanskritic", "sanskritist", "sant", "santa", "santal", "santals", "santander", "santiago", "santir", "santirs", "santolina", "santolinas", "santonica", "santonin", "sap", "sapajou", "sapajous", "sapele", "sapeles", "saphead", "sapheads", "saphena", "saphenous", "sapidity", "sapidness", "sapience", "saplessness", "sapling", "saplings", "sapodilla", "sapodillas", "saponification", "saponin", "saponite", "sapor", "sapors", "sapota", "sapotas", "sapper", "sappers", "sapphic", "sapphics", "sapphire", "sapphires", "sapphirine", "sapphism", "sappho", "sappiness", "sapporo", "sapraemia", "saprobe", "saprobes", "saprolegnia", "saprolegnias", "saprolite", "saprolites", "sapropel", "saprophyte", "saprophytes", "saps", "sapsago", "sapsagos", "sapsucker", "sapsuckers", "sara", "saraband", "sarabandes", "sarabands", "saracen", "saracenism", "saracens", "saragossa", "sarah", "sarajevo", "sarangi", "sarangis", "sarape", "sarapes", "saratov", "sarawak", "sarcasm", "sarcasms", "sarcenet", "sarcenets", "sarcocarp", "sarcocarps", "sarcocystis", "sarcode", "sarcodes", "sarcoid", "sarcoidosis", "sarcolemma", "sarcology", "sarcoma", "sarcomas", "sarcomatosis", "sarcomere", "sarcophagus", "sarcophaguses", "sarcoplasm", "sarcoplasms", "sard", "sardine", "sardines", "sardinia", "sardinian", "sardinians", "sardius", "sardiuses", "sardonyx", "sardonyxes", "saree", "sarees", "sargasso", "sargassos", "sargassum", "sarge", "sargent", "sarges", "sargo", "sargos", "sari", "saris", "sarmatia", "sarmatian", "sarmentum", "sarong", "sarongs", "saros", "saroses", "sarpanch", "sarracenia", "sarracenias", "sarrazin", "sarrazins", "sarrusophone", "sarrusophones", "sarsaparilla", "sarsen", "sarsenet", "sarsenets", "sarsens", "sarthe", "sartor", "sartorius", "sartors", "sartre", "sarum", "sarvodaya", "sash", "sasha", "sashay", "sashays", "sashes", "sashimi", "sashimis", "sasin", "sasines", "sasins", "saskatchewan", "saskatoon", "saskatoons", "sasquatch", "sasquatches", "sass", "sassabies", "sassaby", "sassafras", "sassafrases", "sassanid", "sassari", "sassenach", "sassenachs", "sasses", "sassing", "sassoon", "sastruga", "sat", "satan", "satang", "satanicalness", "satanism", "satanist", "satanists", "satanophobia", "satchel", "satchels", "sateen", "sateens", "satellite", "satellites", "sates", "satiability", "satiation", "satie", "satiety", "satin", "satinet", "satinets", "satinflower", "satins", "satinwood", "satinwoods", "satire", "satires", "satiricalness", "satirist", "satirists", "satisfaction", "satisfactions", "satisfactoriness", "satisfier", "satisfiers", "satisfying", "satori", "satoris", "satrap", "satrapies", "satraps", "satrapy", "satsuma", "satsumas", "saturant", "saturants", "saturation", "saturator", "saturators", "saturday", "saturdays", "saturn", "saturnalia", "saturnalias", "saturnian", "saturniid", "saturnism", "satyagraha", "satyr", "satyriasis", "satyrid", "satyrids", "satyrs", "sauce", "sauce alone", "saucepan", "saucepans", "saucer", "saucers", "sauces", "sauch", "sauchs", "sauciness", "sauerbraten", "sauerkraut", "sauger", "saugers", "saugh", "saughs", "saul", "sauls", "sauna", "saunas", "saunter", "saunterer", "saunterers", "saunters", "saurel", "saurels", "saurian", "saurians", "sauries", "saurischian", "saurischians", "sauropod", "sauropods", "saury", "sausage", "sausages", "saussure", "saussurite", "saut", "sauternes", "sauts", "savableness", "savage", "savageness", "savageries", "savagery", "savages", "savagism", "savanna", "savannah", "savannahs", "savannas", "savant", "savants", "savarin", "savarins", "savate", "savates", "save", "save all", "saveloy", "saveloys", "saver", "savers", "saves", "savin", "savines", "saving", "savings", "savins", "savior", "saviors", "saviour", "saviours", "savoie", "savoir faire", "savoir vivre", "savonarola", "savor", "savories", "savoriness", "savors", "savory", "savour", "savouries", "savouriness", "savours", "savoury", "savoy", "savoyard", "savoyards", "savoys", "savvies", "savvy", "saw", "saw wort", "sawder", "sawders", "sawdust", "sawdusts", "sawer", "sawers", "sawney", "sawneys", "sawpit", "sawpits", "saws", "sawyer", "sawyers", "sax", "saxe", "saxe coburg gotha", "saxes", "saxhorn", "saxhorns", "saxifrage", "saxifrages", "saxon", "saxonian", "saxonies", "saxonism", "saxons", "saxony", "saxophone", "saxophones", "saxophonist", "saxophonists", "say", "say so", "sayer", "sayers", "saying", "sayings", "sayonara", "says", "sayyid", "sayyids", "sazerac", "scab", "scabbard", "scabbards", "scabbedness", "scabbiness", "scabies", "scabious", "scabrousness", "scabs", "scad", "scads", "scaffold", "scaffolding", "scaffoldings", "scaffolds", "scag", "scagliola", "scalade", "scalades", "scalar", "scalars", "scalawag", "scalawags", "scald", "scalds", "scale", "scalenohedron", "scalenohedrons", "scalenus", "scaler", "scalers", "scales", "scaliness", "scaling", "scalings", "scall", "scallion", "scallions", "scallop", "scalloping", "scallops", "scallywag", "scallywags", "scalp", "scalpel", "scalpels", "scalper", "scalpers", "scalping", "scalps", "scam", "scammony", "scamp", "scamper", "scampers", "scampi", "scampis", "scampishness", "scamps", "scams", "scan", "scandal", "scandalisation", "scandaliser", "scandalisers", "scandalization", "scandalizer", "scandalizers", "scandalmonger", "scandalmongering", "scandalmongers", "scandalousness", "scandals", "scandian", "scandinavia", "scandinavian", "scandinavians", "scandium", "scanner", "scanners", "scanning", "scannings", "scans", "scansion", "scansions", "scanties", "scantiness", "scantling", "scantlings", "scantness", "scanty", "scape", "scapegoat", "scapegoats", "scapegrace", "scapegraces", "scapes", "scaphocephaly", "scaphopod", "scaphopods", "scapolite", "scapula", "scapular", "scapularies", "scapulary", "scapulas", "scar", "scarab", "scarabaean", "scarabaeid", "scarabaeids", "scarabaeus", "scarabaeuses", "scarabs", "scarborough", "scarcement", "scarcements", "scarceness", "scarcities", "scarcity", "scare", "scarecrow", "scarecrows", "scaremonger", "scaremongering", "scaremongers", "scarer", "scarers", "scares", "scarf", "scarfs", "scarfskin", "scarfskins", "scarification", "scarifications", "scarificator", "scarificators", "scarlatina", "scarlatti", "scarlet", "scarlets", "scarlett", "scarp", "scarper", "scarpers", "scarph", "scarphs", "scarps", "scars", "scarves", "scat", "scathe", "scathes", "scatology", "scatophagy", "scats", "scatt", "scatter", "scatter gun", "scatterer", "scatterers", "scattering", "scatterings", "scatters", "scatts", "scaup", "scauper", "scaupers", "scaups", "scavenger", "scavengers", "scenario", "scenarios", "scenarist", "scenarists", "scend", "scends", "scene", "sceneries", "scenery", "scenes", "scenography", "scent", "scents", "scepter", "scepters", "sceptic", "scepticism", "sceptics", "sceptre", "sceptres", "schadenfreude", "schappe", "schappes", "scharnhorst", "schedule", "schedules", "scheduling", "scheele", "scheelite", "schefflera", "scheherazade", "schema", "schematic", "schematisation", "schematism", "schematization", "scheme", "schemer", "schemers", "schemes", "scheming", "schemings", "scherzando", "scherzandos", "scherzo", "scherzos", "schiavone", "schiavones", "schiff", "schiller", "schillerization", "schilling", "schillings", "schindler", "schipperke", "schipperkes", "schism", "schismatic", "schismatics", "schisms", "schist", "schistosity", "schistosome", "schistosomes", "schistosomiasis", "schists", "schizo", "schizocarp", "schizocarps", "schizogenesis", "schizogony", "schizoid", "schizoids", "schizomycete", "schizont", "schizonts", "schizophrene", "schizophrenes", "schizophrenia", "schizophrenic", "schizophrenics", "schizophyte", "schizophytes", "schizopod", "schizopods", "schizos", "schizothymia", "schlegel", "schlemiel", "schlemiels", "schlepp", "schlepps", "schlesinger", "schleswig", "schleswig holstein", "schlieren", "schlimazel", "schlimazels", "schlock", "schlumbergera", "schmaltz", "schmaltzes", "schmalz", "schmalzes", "schmidt", "schmo", "schmoes", "schmooze", "schmoozes", "schmuck", "schmucks", "schnabel", "schnapper", "schnappers", "schnapps", "schnappses", "schnaps", "schnapses", "schnauzer", "schnauzers", "schnecken", "schnitzel", "schnitzels", "schnook", "schnooks", "schnorkel", "schnorkels", "schnorrer", "schnorrers", "schnozzle", "schnozzles", "schoenberg", "scholar", "scholarch", "scholarchs", "scholars", "scholarship", "scholarships", "scholastic", "scholasticism", "scholastics", "scholiast", "scholiasts", "scholium", "school", "schoolbag", "schoolbags", "schoolboy", "schoolboys", "schoolfellow", "schoolfellows", "schoolgirl", "schoolgirls", "schoolhouse", "schoolhouses", "schoolie", "schoolies", "schooling", "schoolings", "schoolman", "schoolmaster", "schoolmasters", "schoolmastership", "schoolmistress", "schoolmistresses", "schoolroom", "schoolrooms", "schools", "schoolwork", "schooner", "schooners", "schopenhauer", "schorl", "schottische", "schottisches", "schrecklichkeit", "schubert", "schuit", "schuits", "schul", "schuls", "schumacher", "schuman", "schumann", "schuss", "schusses", "schuyt", "schuyts", "schwa", "schwann", "schwarzkopf", "schwarzwald", "schwas", "schweitzer", "schwenkfelder", "schwerin", "sci fi", "sciaenid", "sciaenoid", "sciamachies", "sciamachy", "sciarid", "sciarids", "sciatica", "science", "sciences", "scientism", "scientist", "scientists", "scientology", "scilicet", "scilla", "scillas", "scillonian", "scimitar", "scimitars", "scincoid", "scintigraphy", "scintilla", "scintillas", "scintillation", "scintillations", "scintillator", "scintillators", "scintillometer", "scintillometers", "sciolism", "scion", "scions", "sciosophies", "sciosophy", "scipio", "scirrhus", "scirrhuses", "scissel", "scission", "scissions", "scissors", "scissure", "scissures", "sciurine", "sclaff", "sclaffs", "sclera", "scleras", "sclerema", "sclerenchyma", "sclerenchymas", "scleriasis", "sclerite", "sclerites", "scleritis", "sclerocauly", "scleroderma", "scleroma", "sclerometer", "sclerometers", "sclerophyll", "sclerophylls", "sclerophylly", "scleroprotein", "sclerosis", "sclerotic", "sclerotics", "sclerotin", "sclerotitis", "sclerotium", "sclerotomies", "sclerotomy", "scoff", "scoffer", "scoffers", "scoffing", "scoffings", "scofflaw", "scofflaws", "scoffs", "scofield", "scold", "scolder", "scolders", "scolding", "scoldings", "scolds", "scolecite", "scolex", "scolion", "scoliosis", "scollop", "scollops", "scolopendrid", "scombrid", "scombroid", "sconce", "sconces", "sconcheon", "sconcheons", "scone", "scones", "scoop", "scooper", "scoopers", "scoopful", "scoopfuls", "scoops", "scoot", "scooter", "scooters", "scoots", "scop", "scope", "scopes", "scopolamine", "scopula", "scopulas", "scorch", "scorcher", "scorchers", "scorches", "scordatura", "scordaturas", "score", "scored", "scorer", "scorers", "scores", "scoria", "scorn", "scorner", "scorners", "scornfulness", "scorns", "scorpaenid", "scorpaenoid", "scorper", "scorpers", "scorpio", "scorpion", "scorpions", "scorpios", "scorpius", "scorzonera", "scorzoneras", "scot", "scotch", "scotches", "scotchman", "scoter", "scoters", "scotia", "scotism", "scotist", "scotland", "scotoma", "scotomas", "scotopia", "scots", "scotsman", "scott", "scotticism", "scottie", "scotties", "scottish", "scotty", "scoundrel", "scoundrels", "scour", "scourer", "scourers", "scourge", "scourger", "scourgers", "scourges", "scouring", "scourings", "scours", "scouse", "scouses", "scout", "scouter", "scouters", "scouth", "scouting", "scoutings", "scouts", "scow", "scowl", "scowls", "scows", "scrabble", "scrabbler", "scrabblers", "scrabbles", "scrag", "scragginess", "scrags", "scraich", "scraichs", "scramble", "scrambler", "scramblers", "scrambles", "scran", "scrap", "scrape", "scraper", "scraperboard", "scraperboards", "scrapers", "scrapes", "scrapie", "scraping", "scrapings", "scrappiness", "scrapple", "scrapples", "scraps", "scratch", "scratcher", "scratchers", "scratches", "scratchiness", "scratching", "scratchings", "scratchpad", "scratchpads", "scrawl", "scrawler", "scrawlers", "scrawls", "scrawniness", "screak", "screaks", "scream", "screamer", "screamers", "screaming", "screams", "scree", "screech", "screecher", "screechers", "screeches", "screeching", "screed", "screeds", "screen", "screening", "screenings", "screenplay", "screenplays", "screens", "screes", "screw", "screwer", "screwers", "screwing", "screwings", "screws", "scriabin", "scribble", "scribbler", "scribblers", "scribbles", "scribe", "scriber", "scribers", "scribes", "scrim", "scrimmage", "scrimmager", "scrimmagers", "scrimmages", "scrims", "scrimshaw", "scrimshaws", "scrip", "scrips", "script", "scriptorium", "scripts", "scripture", "scriptures", "scrivener", "scriveners", "scrod", "scrods", "scrofula", "scrog", "scrogs", "scroll", "scrolls", "scrollwork", "scrooge", "scrooges", "scroop", "scroops", "scrophularia", "scrophularias", "scrotum", "scrotums", "scrounger", "scroungers", "scrub", "scrub bird", "scrubber", "scrubbers", "scrubbing", "scrubland", "scrublands", "scrubs", "scruff", "scruffs", "scrum", "scrummage", "scrummager", "scrummagers", "scrummages", "scrumpies", "scrumpy", "scrums", "scrunch", "scrunches", "scruple", "scruples", "scrupulosity", "scrupulousness", "scrutator", "scrutators", "scrutineer", "scrutineers", "scrutinies", "scrutinizer", "scrutinizers", "scrutiny", "scrutoire", "scrutoires", "scuba", "scubas", "scud", "scudding", "scudo", "scuds", "scuff", "scuffing", "scuffle", "scuffles", "scuffs", "sculdudderies", "sculduddery", "sculduggery", "sculk", "sculks", "scull", "sculler", "sculleries", "scullers", "scullery", "sculles", "sculling", "scullings", "scullion", "scullions", "sculls", "sculp", "sculpin", "sculpins", "sculps", "sculptor", "sculptors", "sculptress", "sculptresses", "sculpture", "sculptures", "scum", "scumble", "scumbles", "scums", "scuncheon", "scuncheons", "scunge", "scunges", "scunner", "scunners", "scunthorpe", "scup", "scupper", "scuppernong", "scuppernongs", "scuppers", "scups", "scurf", "scurfs", "scurries", "scurrility", "scurrilousness", "scurry", "scurviness", "scurvy", "scut", "scuta", "scutage", "scutages", "scutch", "scutcheon", "scutcheons", "scutches", "scute", "scutellation", "scutellations", "scutellum", "scutes", "scuts", "scutter", "scutters", "scuttle", "scuttles", "scutum", "scylla", "scyphistoma", "scyphistomas", "scyphozoa", "scyphozoan", "scyphus", "scythe", "scythes", "scythian", "sea", "sea ear", "sea god", "sea gods", "sea maid", "sea poacher", "sea rocket", "seabed", "seabee", "seaboard", "seaboards", "seadrome", "seadromes", "seafarer", "seafarers", "seafaring", "seafront", "seafronts", "seagull", "seagulls", "seal", "seal point", "sealant", "sealants", "sealer", "sealeries", "sealers", "sealery", "sealing", "sealings", "seals", "sealskin", "sealskins", "sealyham", "sealyhams", "seam", "seaman", "seamanship", "seamark", "seamarks", "seamer", "seamers", "seaminess", "seams", "seamstress", "seamstresses", "seamus", "seaplane", "seaplanes", "seaport", "seaports", "seaquake", "seaquakes", "sear", "search", "searcher", "searchers", "searches", "searching", "searchingness", "searchlight", "searchlights", "searle", "sears", "seas", "seascape", "seascapes", "seasick", "seasickness", "seaside", "seasides", "season", "seasonableness", "seasoner", "seasoners", "seasoning", "seasonings", "seasons", "seat", "seater", "seaters", "seating", "seatings", "seats", "seattle", "seaway", "seaways", "seaweed", "seaweeds", "seaworthiness", "sebastian", "sebastopol", "seborrhea", "seborrhoea", "sebum", "sec", "secant", "secants", "secco", "seccos", "secernment", "secernments", "secession", "secessionism", "secessionist", "secessionists", "secessions", "sech", "seckel", "seckels", "seclusion", "seclusions", "seconal", "second", "second in command", "second rater", "second raters", "secondaries", "secondary", "seconde", "secondees", "seconder", "seconders", "secondment", "secondments", "secondo", "seconds", "secrecies", "secrecy", "secret", "secretaire", "secretaires", "secretariat", "secretariate", "secretariates", "secretariats", "secretaries", "secretary", "secretary general", "secretaryship", "secretaryships", "secretes", "secretin", "secreting", "secretion", "secretions", "secretiveness", "secretness", "secrets", "secs", "sect", "sectarian", "sectarianism", "sectarians", "sectaries", "sectary", "section", "sectionalisation", "sectionalism", "sectionalist", "sectionalization", "sections", "sector", "sectors", "sects", "secular", "secularisation", "secularisations", "secularism", "secularist", "secularists", "secularities", "secularity", "secularization", "secularizations", "seculars", "secundine", "secundines", "secureness", "securities", "security", "sedan", "sedans", "sedateness", "sedation", "sedative", "sedatives", "seder", "sedge", "sedgemoor", "sedges", "sedile", "sedilia", "sediment", "sedimentation", "sedimentologist", "sedimentology", "sediments", "sedition", "seditions", "seditiousness", "seducer", "seducers", "seduction", "seductions", "seductiveness", "seductress", "seductresses", "sedulity", "sedulousness", "sedum", "sedums", "see", "see through", "seecatch", "seed", "seedbed", "seedbeds", "seedcake", "seedcakes", "seedcase", "seedcases", "seeder", "seeders", "seediness", "seedling", "seedlings", "seeds", "seedsman", "seeger", "seeing", "seeings", "seek", "seeker", "seekers", "seeking", "seeks", "seemer", "seemers", "seeming", "seemings", "seemliness", "seep", "seepage", "seepages", "seeps", "seer", "seeress", "seeresses", "seers", "seersucker", "sees", "seesaw", "seesaws", "seethe", "seethes", "segar", "segars", "segment", "segmentation", "segmentations", "segments", "segno", "segnos", "sego", "segos", "segovia", "segregation", "segregationist", "segregationists", "segregations", "seguidilla", "seguidillas", "sei", "seicento", "seiche", "seiches", "seif", "seifs", "seigneur", "seigneurs", "seignior", "seigniorage", "seigniorages", "seigniories", "seigniors", "seigniory", "seignories", "seignory", "seine", "seine et marne", "seine maritime", "seine saint denis", "seiner", "seiners", "seines", "seis", "seisin", "seising", "seisins", "seism", "seismism", "seismogram", "seismograms", "seismograph", "seismographer", "seismographers", "seismographs", "seismography", "seismologist", "seismologists", "seismology", "seismometry", "seismoscope", "seismoscopes", "seisms", "seizer", "seizers", "seizin", "seizing", "seizings", "seizins", "seizure", "seizures", "sejanus", "sejm", "sekos", "sekoses", "selachian", "selachians", "selaginella", "selaginellas", "selah", "selahs", "selby", "selectee", "selectees", "selection", "selections", "selectivity", "selectness", "selector", "selectors", "selenate", "selenates", "selene", "selenide", "selenides", "selenite", "selenites", "selenium", "selenodont", "selenograph", "selenographer", "selenographers", "selenographs", "selenography", "selenology", "selenomorphology", "seleucid", "seleucidan", "self", "self abandonment", "self abasement", "self abnegation", "self absorption", "self abuse", "self accusation", "self action", "self actualization", "self admiration", "self advancement", "self advertisement", "self aggrandisement", "self aggrandizement", "self analysis", "self annihilation", "self applause", "self appreciation", "self approbation", "self approval", "self assertion", "self assumption", "self assurance", "self awareness", "self betrayal", "self cocker", "self command", "self commitment", "self conceit", "self conceitedness", "self concept", "self concern", "self condemnation", "self confidence", "self congratulation", "self consciousness", "self consequence", "self consistency", "self consistent", "self contempt", "self content", "self control", "self creation", "self criticism", "self deceit", "self deception", "self defence", "self degradation", "self delight", "self delusion", "self denial", "self dependence", "self despair", "self destruction", "self determination", "self determining", "self development", "self devotion", "self direction", "self director", "self discipline", "self disparagement", "self dispraise", "self dissociation", "self distrust", "self doubt", "self dramatization", "self drawing", "self effacement", "self election", "self employment", "self enjoyment", "self enrichment", "self esteem", "self examination", "self examinations", "self exertion", "self existence", "self explication", "self expression", "self feeder", "self fertilisation", "self fertilization", "self flattery", "self glorification", "self government", "self hate", "self hatred", "self heal", "self help", "self humiliation", "self hypnosis", "self hypnotism", "self identity", "self image", "self immolation", "self importance", "self impregnation", "self improvement", "self inductance", "self induction", "self indulgence", "self insurance", "self interest", "self justification", "self killer", "self knowledge", "self love", "self mastery", "self motion", "self murder", "self murderer", "self observation", "self pity", "self pollination", "self pollution", "self possession", "self praise", "self preparation", "self preservation", "self pride", "self profit", "self propulsion", "self protection", "self punishment", "self realisation", "self realization", "self regard", "self reliance", "self renunciation", "self repose", "self repression", "self reproach", "self reproof", "self respect", "self restraint", "self revelation", "self reverence", "self righteousness", "self rule", "self sacrifice", "self satisfaction", "self seeker", "self seekers", "self seeking", "self service", "self sovereignty", "self starter", "self starters", "self sufficiency", "self suggestion", "self support", "self sustainment", "self sustenance", "self sustentation", "self torment", "self tormentor", "self torture", "self transformation", "self treatment", "self trust", "self understanding", "self vindication", "self violence", "self will", "self worship", "self worth", "self wrong", "selfhood", "selfishness", "selflessness", "selfness", "selfs", "selfsameness", "selina", "seljuk", "selkirk", "sell", "seller", "sellers", "selles", "selling", "selling plater", "sellotape", "sellotapes", "sells", "seltzer", "seltzers", "selva", "selvage", "selvages", "selvas", "selvedge", "selvedges", "selves", "selznick", "semanteme", "semantemes", "semanticist", "semanticists", "semantics", "semaphore", "semaphores", "semarang", "semasiologist", "semasiologists", "semasiology", "semblable", "semblance", "semblances", "semeiology", "semele", "sememe", "sememes", "semen", "semens", "semester", "semesters", "semi", "semibold", "semibreve", "semibreves", "semicircle", "semicircles", "semicolon", "semicolons", "semicoma", "semicomas", "semiconductor", "semiconductors", "semicylinder", "semicylinders", "semidesert", "semies", "semifinal", "semifinalist", "semifinalists", "semifinals", "semifluid", "semifluids", "seminar", "seminarian", "seminarians", "seminaries", "seminarist", "seminarists", "seminars", "seminary", "semination", "seminations", "seminole", "semiology", "semiotician", "semiotics", "semipermeability", "semiporcelain", "semiprofessional", "semiprofessionals", "semiquaver", "semiquavers", "semiramis", "semis", "semises", "semisolid", "semite", "semites", "semitic", "semitics", "semitism", "semitist", "semitone", "semitones", "semitrailer", "semitrailers", "semitransparency", "semivowel", "semivowels", "semolina", "sempstress", "sempstresses", "sen", "sena", "senate", "senates", "senator", "senators", "senatorship", "senatorships", "send", "send off", "send offs", "sendai", "sendal", "sendals", "sender", "senders", "sending", "sendings", "sends", "seneca", "senecio", "senecios", "senega", "senegal", "senegas", "senescence", "seneschal", "seneschals", "senility", "senior", "seniorities", "seniority", "seniors", "senlac", "senna", "sennacherib", "sennas", "sennet", "sennets", "sennight", "sennights", "sennit", "sennits", "sens", "sensation", "sensationalism", "sensationalist", "sensationalists", "sensationism", "sensationist", "sensationists", "sensations", "sense", "senselessness", "senses", "sensibilia", "sensibilities", "sensibility", "sensible", "sensibleness", "sensillum", "sensing", "sensings", "sensitisation", "sensitiser", "sensitisers", "sensitive", "sensitiveness", "sensitivities", "sensitivity", "sensitization", "sensitizer", "sensitizers", "sensitizing", "sensitometer", "sensitometers", "sensor", "sensorium", "sensoriums", "sensors", "sensualisation", "sensualism", "sensualist", "sensualists", "sensuality", "sensualization", "sensualness", "sensum", "sensuousness", "sentence", "sentencer", "sentencers", "sentences", "sententiousness", "sentience", "sentiency", "sentient", "sentients", "sentiment", "sentimentalisation", "sentimentalism", "sentimentalist", "sentimentalists", "sentimentality", "sentimentalization", "sentiments", "sentinel", "sentinels", "sentries", "sentry", "senusi", "senusis", "senussi", "senussis", "seoul", "sepal", "sepals", "separability", "separableness", "separate", "separateness", "separates", "separation", "separations", "separatism", "separatist", "separatists", "separator", "separators", "separatrix", "separatrixes", "sephardi", "sepia", "sepias", "sepiolite", "sepoy", "sepoys", "seppuku", "seppukus", "sepsis", "sept", "septa", "septarium", "septation", "septations", "september", "septembrist", "septemvir", "septemvirate", "septemvirates", "septemvirs", "septenaries", "septenary", "septennium", "septentrion", "septentriones", "septentrions", "septet", "septets", "septette", "septettes", "septic", "septicaemia", "septicemia", "septicity", "septillion", "septillions", "septime", "septimes", "septs", "septuagenarian", "septuagenarians", "septuagenaries", "septuagenary", "septuagesima", "septuagint", "septum", "septuor", "septuors", "septuplet", "septuplets", "sepulcher", "sepulchers", "sepulchre", "sepulchres", "sepulture", "sepultures", "sequaciousness", "sequacity", "sequel", "sequela", "sequels", "sequence", "sequencer", "sequencers", "sequences", "sequent", "sequentiality", "sequents", "sequestrant", "sequestrants", "sequestration", "sequestrations", "sequestrator", "sequestrators", "sequestrum", "sequin", "sequins", "sequoia", "sequoias", "sera", "seraglio", "seraglios", "serai", "serail", "serails", "serais", "serape", "serapes", "serapeum", "seraph", "seraphim", "seraphims", "seraphs", "serapis", "serb", "serbia", "serbian", "serbians", "serbo croatian", "serdab", "serdabs", "sere", "serein", "sereins", "serena", "serenade", "serenader", "serenaders", "serenades", "serenata", "serenatas", "serendip", "serendipity", "sereneness", "serenity", "seres", "serf", "serfdom", "serfhood", "serfs", "serge", "sergeant", "sergeants", "serges", "serial", "serialisation", "serialisations", "serialism", "serialisms", "serialist", "serialists", "serialization", "serializations", "serials", "sericin", "sericite", "sericterium", "sericulture", "sericulturist", "sericulturists", "seriema", "seriemas", "series", "series wound", "serif", "serifs", "serigraph", "serigrapher", "serigraphers", "serigraphs", "serigraphy", "serin", "serine", "seringa", "seringas", "serins", "seriousness", "serjeant", "serjeanties", "serjeants", "serjeanty", "sermon", "sermoniser", "sermonisers", "sermonizer", "sermonizers", "sermons", "serologist", "serologists", "serology", "serosa", "serosas", "serosity", "serotherapy", "serotine", "serotines", "serotonin", "serow", "serows", "serpens", "serpent", "serpentine", "serpentinization", "serpents", "serpigo", "serpigoes", "serranid", "serranids", "serration", "serrations", "serratus", "serratuses", "serrulation", "serrulations", "sertularian", "sertularians", "serum", "serums", "serval", "servals", "servant", "servants", "serve", "server", "servers", "serves", "servian", "service", "serviceability", "serviceableness", "serviceman", "services", "servicing", "serviette", "serviettes", "servilities", "servility", "serving", "servings", "servite", "servitor", "servitors", "servitude", "servitudes", "servo", "servomechanism", "servomotor", "servomotors", "sesame", "sesames", "seseli", "seselis", "sesotho", "sesquialtera", "sesquialteras", "sesquicarbonate", "sesquicentennial", "sesquioxide", "sesquipedalian", "sesquipedality", "sesquiterpene", "sess", "session", "sessions", "sesterce", "sesterces", "sestertium", "sestet", "sestets", "sestina", "sestinas", "set", "set off", "set to", "set tos", "set up", "set ups", "seta", "setback", "setbacks", "seth", "seton", "setons", "sets", "sett", "settee", "settees", "setter", "setters", "setterwort", "setterworts", "setting", "settings", "settle", "settledness", "settlement", "settlements", "settler", "settlers", "settles", "settling", "settlings", "settlor", "settlors", "setts", "seumas", "seuss", "sevastopol", "seven", "sevens", "seventeen", "seventeens", "seventeenth", "seventeenths", "seventh", "sevenths", "seventies", "seventieth", "seventieths", "seventy", "seventy eight", "severalties", "severalty", "severance", "severances", "severeness", "severies", "severing", "severity", "severn", "severy", "seville", "sewage", "sewell", "sewellel", "sewellels", "sewer", "sewerage", "sewers", "sewing", "sewings", "sex", "sexagenarian", "sexagenarians", "sexagenaries", "sexagenary", "sexagesima", "sexagesimal", "sexcentenaries", "sexcentenary", "sexennial", "sexes", "sexfoil", "sexfoils", "sexiness", "sexism", "sexist", "sexists", "sexlessness", "sexologist", "sexologists", "sexology", "sexpot", "sexpots", "sext", "sextant", "sextants", "sextet", "sextets", "sextette", "sextettes", "sextile", "sextiles", "sextillion", "sextillions", "sextodecimo", "sextodecimos", "sextolet", "sextolets", "sexton", "sextons", "sexts", "sextuple", "sextuples", "sextuplet", "sextuplets", "sexualities", "sexuality", "seymour", "sferics", "sforzando", "sforzandos", "sfumato", "sfumatos", "sgraffito", "shabbiness", "shabuoth", "shack", "shackle", "shackles", "shackleton", "shacks", "shad", "shadberries", "shadberry", "shadblow", "shadblows", "shadbush", "shadbushes", "shaddock", "shaddocks", "shade", "shades", "shadiness", "shading", "shadings", "shadoof", "shadoofs", "shadow", "shadower", "shadowers", "shadowgraph", "shadowgraphs", "shadowiness", "shadowing", "shadowings", "shadows", "shadrach", "shads", "shaduf", "shadufs", "shadwell", "shaffer", "shaft", "shaftesbury", "shafting", "shaftings", "shafts", "shag", "shagginess", "shagging", "shaggymane", "shagreen", "shagreens", "shags", "shah", "shahs", "shake", "shake up", "shake ups", "shaker", "shakers", "shakes", "shakespeare", "shakespearean", "shakespeareans", "shakiness", "shaking", "shakings", "shako", "shakoes", "shakos", "shakta", "shakti", "shaktism", "shakudo", "shakuntala", "shale", "shallon", "shallons", "shalloon", "shallop", "shallops", "shallot", "shallots", "shallow", "shallowness", "shallows", "shalwar", "sham", "shaman", "shamanism", "shamanist", "shamanists", "shamans", "shamba", "shamble", "shambles", "shambling", "shamblings", "shame", "shamefacedness", "shamefulness", "shamelessness", "shames", "shammash", "shammer", "shammers", "shammes", "shammies", "shammy", "shampoo", "shampooer", "shampooers", "shampoos", "shamrock", "shamrocks", "shams", "shamus", "shamuses", "shan", "shan t", "shandies", "shandrydan", "shandrydans", "shandy", "shandygaff", "shane", "shang", "shanghai", "shanghaier", "shanghaiers", "shanghais", "shangri la", "shank", "shankar", "shanks", "shannies", "shannon", "shanny", "shans", "shantey", "shanteys", "shanties", "shantung", "shantungs", "shanty", "shape", "shapelessness", "shapeliness", "shaper", "shapers", "shapes", "shaping", "shapings", "shard", "shards", "share", "share out", "share outs", "sharefarmer", "sharefarmers", "shareholder", "shareholders", "shareholding", "shareholdings", "sharer", "sharers", "shares", "shareware", "sharif", "sharifs", "sharing", "sharings", "shark", "sharks", "sharkskin", "sharkskins", "sharon", "sharp", "sharpener", "sharpeners", "sharper", "sharpers", "sharpie", "sharpies", "sharpness", "sharps", "sharpshooter", "sharpshooters", "sharpshooting", "shashlik", "shashliks", "shastra", "shastras", "shatter", "shattering", "shatters", "shaun", "shave", "shaveling", "shavelings", "shaver", "shavers", "shaves", "shavian", "shavians", "shavie", "shavies", "shaving", "shavings", "shavuot", "shavuoth", "shaw", "shawl", "shawls", "shawm", "shawms", "shawn", "shawnee", "shawnees", "shaws", "shay", "shays", "she", "she devil", "she oak", "shea", "sheading", "sheadings", "sheaf", "sheafs", "shealing", "shealings", "shear", "shearer", "shearers", "shearing", "shearings", "shearling", "shearlings", "shears", "shearwater", "shearwaters", "sheas", "sheath", "sheathes", "sheathing", "sheathings", "sheaths", "sheave", "sheaves", "sheba", "shebang", "shebangs", "shebat", "shebeen", "shebeening", "shebeenings", "shebeens", "shechinah", "shechitah", "shed", "shedder", "shedders", "shedding", "sheddings", "sheds", "sheela", "sheen", "sheens", "sheep", "sheep s bit", "sheep dip", "sheepdog", "sheepdogs", "sheepfold", "sheepfolds", "sheepishness", "sheepshank", "sheepshanks", "sheepskin", "sheepskins", "sheepwalk", "sheepwalks", "sheer", "sheerlegs", "sheerness", "sheers", "sheet", "sheeting", "sheetings", "sheets", "sheffield", "shehitah", "sheik", "sheikdom", "sheikdoms", "sheikh", "sheikha", "sheikhas", "sheikhdom", "sheikhdoms", "sheikhs", "sheiks", "sheila", "sheilas", "shekel", "shekels", "shekinah", "sheldrake", "sheldrakes", "shelduck", "shelducks", "shelf", "shell", "shellac", "shellacking", "shellackings", "shellacs", "shellback", "shellbacks", "shellbark", "shellbarks", "shelley", "shellfire", "shellfires", "shellfish", "shellfishes", "shelling", "shellings", "shells", "shelta", "shelter", "shelterbelt", "shelterer", "shelterers", "shelters", "sheltie", "shelties", "shelty", "shelves", "shelving", "shelvings", "shem", "shema", "shemite", "shenanigan", "shenanigans", "shenyang", "shepherd", "shepherd s purse", "shepherdess", "shepherdesses", "shepherds", "sheppard", "sheraton", "sherbet", "sherbets", "sherborne", "sherd", "sherds", "sheridan", "sherif", "sheriff", "sheriffs", "sherifs", "sherlock", "sherlocks", "sherman", "sherries", "sherry", "sherwani", "sherwanis", "sherwood", "sheryl", "shes", "shetland", "shetlands", "sheugh", "sheughs", "shewbread", "shewbreads", "shiah", "shiahs", "shiatsu", "shibah", "shibahs", "shibboleth", "shibboleths", "shicker", "shiel", "shield", "shield fern", "shielder", "shielders", "shielding", "shields", "shieling", "shielings", "shiels", "shier", "shiers", "shies", "shift", "shiftiness", "shifting", "shiftings", "shiftlessness", "shifts", "shigella", "shigellas", "shigellosis", "shih tzu", "shih tzus", "shiism", "shiitake", "shiite", "shiites", "shikar", "shikari", "shikaris", "shikars", "shiksa", "shiksas", "shikse", "shikses", "shill", "shillalah", "shillalahs", "shillelagh", "shillelaghs", "shilling", "shillings", "shillyshallies", "shillyshally", "shim", "shimmer", "shimmers", "shimmies", "shimmy", "shims", "shin", "shinbone", "shinbones", "shindies", "shindig", "shindigs", "shindy", "shine", "shiner", "shiners", "shines", "shingle", "shingler", "shinglers", "shingles", "shingling", "shinglings", "shininess", "shining", "shinnies", "shinny", "shins", "shinties", "shinto", "shintoist", "shinty", "ship", "ship breaker", "ship breakers", "shipboard", "shipboards", "shipbuilder", "shipbuilders", "shipbuilding", "shipbuildings", "shiplap", "shiplaps", "shipload", "shiploads", "shipman", "shipmate", "shipmates", "shipment", "shipments", "shippen", "shippens", "shipper", "shippers", "shipping", "shippings", "shippon", "shippons", "ships", "shipway", "shipways", "shipwreck", "shipwrecks", "shipwright", "shipwrights", "shipyard", "shipyards", "shiralee", "shiralees", "shiraz", "shire", "shires", "shirk", "shirker", "shirkers", "shirking", "shirks", "shirley", "shirr", "shirring", "shirrings", "shirrs", "shirt", "shirt tail", "shirt tails", "shirting", "shirts", "shirtwaist", "shirtwaister", "shirtwaisters", "shirtwaists", "shittah", "shittahs", "shittim", "shittims", "shiv", "shiva", "shivah", "shivahs", "shivaism", "shivaree", "shive", "shiver", "shiverer", "shiverers", "shivering", "shiverings", "shivers", "shives", "shivoo", "shivoos", "shivs", "shlemiel", "shlemiels", "shlock", "shoal", "shoals", "shoat", "shoats", "shochet", "shock", "shocker", "shockers", "shockingness", "shockley", "shocks", "shockstall", "shoddies", "shoddiness", "shoddy", "shoe", "shoeblack", "shoeblacks", "shoebox", "shoeboxes", "shoehorn", "shoehorns", "shoelace", "shoelaces", "shoemaker", "shoemakers", "shoemaking", "shoer", "shoers", "shoes", "shoeshine", "shoeshines", "shoestring", "shoestrings", "shoetree", "shoetrees", "shofar", "shofars", "shog", "shogi", "shogs", "shogun", "shogunate", "shogunates", "shoguns", "shoji", "shojis", "sholapur", "sholokhov", "shona", "shoo in", "shoo ins", "shoofly", "shoogle", "shoogles", "shook", "shooks", "shool", "shools", "shoon", "shoot", "shoot em up", "shooter", "shooters", "shooting", "shootings", "shoots", "shop", "shopful", "shopfuls", "shophar", "shophars", "shopkeeper", "shopkeepers", "shoplifter", "shoplifters", "shoplifting", "shopman", "shopped", "shopper", "shoppers", "shopping", "shops", "shoptalk", "shopwalker", "shopwalkers", "shopwoman", "shoran", "shore", "shoreline", "shorelines", "shores", "shoring", "shorings", "short", "short sightedness", "short stop", "shortage", "shortages", "shortbread", "shortbreads", "shortcake", "shortcakes", "shortcoming", "shortcomings", "shortcut", "shortcuts", "shortener", "shorteners", "shortening", "shortfall", "shortfalls", "shorthand", "shorthorn", "shorthorns", "shortie", "shorties", "shortness", "shorts", "shorty", "shoshone", "shoshones", "shostakovich", "shot", "shot blasting", "shot putter", "shot putters", "shote", "shotes", "shotgun", "shotguns", "shots", "shott", "shotting", "shotts", "shoulder", "shoulders", "shouldn t", "shout", "shouter", "shouters", "shouting", "shoutings", "shouts", "shove", "shove halfpenny", "shovel", "shoveler", "shovelers", "shovelful", "shovelfuls", "shovelnose", "shovelnoses", "shovels", "shover", "shovers", "shoves", "show", "show off", "show offs", "showboat", "showboats", "showbread", "showbreads", "showcase", "showcases", "shower", "showeriness", "showers", "showgirl", "showgirls", "showiness", "showing", "showings", "showman", "showmanship", "showpiece", "showpieces", "showplace", "showplaces", "showroom", "showrooms", "shows", "shraddha", "shraddhas", "shrapnel", "shrapnels", "shred", "shredder", "shredders", "shreds", "shreveport", "shrew", "shrewdie", "shrewdies", "shrewdness", "shrewishness", "shrews", "shrewsbury", "shriek", "shrieker", "shriekers", "shrieking", "shriekings", "shrieks", "shrievalties", "shrievalty", "shrieve", "shrieves", "shrift", "shrifts", "shrike", "shrikes", "shrilling", "shrillings", "shrillness", "shrimp", "shrimper", "shrimpers", "shrimps", "shrine", "shrines", "shrink", "shrinkage", "shrinkages", "shrinker", "shrinkers", "shrinking", "shrinks", "shroff", "shroffs", "shropshire", "shroud", "shrouds", "shrovetide", "shrub", "shrubberies", "shrubbery", "shrubbiness", "shrubs", "shrug", "shrugs", "shuck", "shucker", "shuckers", "shucks", "shuckses", "shudder", "shudders", "shuffle", "shuffler", "shufflers", "shuffles", "shuffling", "shufflings", "shufties", "shufty", "shul", "shuls", "shunner", "shunners", "shunning", "shunt", "shunter", "shunters", "shunts", "shut", "shut in", "shut off", "shut offs", "shutes", "shuts", "shutter", "shutterbug", "shutterbugs", "shuttering", "shutters", "shutting", "shuttle", "shuttlecock", "shuttlecocks", "shuttles", "shwa", "shwas", "shy", "shyer", "shyers", "shylock", "shylocks", "shyness", "shyster", "shysters", "sial", "sialagogic", "sialagogue", "sialagogues", "sialolith", "sialoliths", "siam", "siamang", "siamangs", "siamese", "siameses", "sian", "sib", "sibelius", "siberia", "siberian", "siberians", "sibilance", "sibilancy", "sibilant", "sibilants", "sibling", "siblings", "sibs", "sibship", "sibships", "sibyl", "sibylla", "sibyls", "siccative", "siccatives", "sice", "sices", "sicilian", "siciliano", "sicilianos", "sicilians", "sicily", "sick", "sick out", "sickener", "sickeners", "sickert", "sickie", "sickies", "sickle", "sickles", "sickliness", "sickness", "sicknesses", "sicks", "sid", "sida", "sidalcea", "sidalceas", "sidas", "siddhartha", "siddons", "siddur", "side", "side glance", "side glances", "side saddle", "side wheeler", "side wheelers", "side whiskers", "sideboard", "sideboards", "sideburn", "sideburns", "sidecar", "sidecars", "sidelight", "sidelights", "sideman", "siderite", "siderites", "siderolite", "sideropenia", "siderosis", "siderostat", "siderostats", "sides", "sidesman", "sideswipe", "sideswiper", "sideswipers", "sideswipes", "sidetrack", "sidetracks", "sidewalk", "sidewalks", "sidewall", "sidewalls", "sidewinder", "sidewinders", "siding", "sidings", "sidle", "sidles", "sidney", "sidon", "sidonie", "siege", "sieges", "siegfried", "siemens", "siena", "sienese", "sienna", "siennas", "sierra", "sierras", "siesta", "siestas", "sieve", "sieves", "sifaka", "sifakas", "sifter", "sifters", "sifting", "siftings", "sigh", "sigher", "sighers", "sighs", "sight", "sight reader", "sighter", "sighters", "sighting", "sightings", "sightlessness", "sightliness", "sights", "sightscreen", "sightscreens", "sightseeing", "sightseer", "sightseers", "sigil", "sigillation", "sigillations", "sigils", "sigismund", "sigla", "sigma", "sigmation", "sigmations", "sigmatism", "sigmoid", "sigmoidectomy", "sigmoidoscope", "sigmund", "sign", "signal", "signaler", "signalers", "signaling", "signaller", "signallers", "signalman", "signals", "signatories", "signatory", "signature", "signatures", "signboard", "signboards", "signer", "signers", "signet", "signets", "significance", "significances", "significancies", "significancy", "signification", "significations", "significs", "signing", "signor", "signora", "signoras", "signore", "signories", "signorina", "signorinas", "signorino", "signors", "signory", "signpost", "signposts", "signs", "sika", "sikas", "sike", "sikes", "sikh", "sikhism", "sikhs", "sikkim", "sikorski", "silage", "silages", "silas", "silastic", "sild", "silds", "silence", "silencer", "silencers", "silences", "silene", "silenes", "silent", "silentness", "silenus", "silenuses", "silesia", "silex", "silhouette", "silhouettes", "silica", "silicate", "silicates", "silicide", "silicides", "siliciferous", "silicification", "silicifications", "silicium", "silicle", "silicles", "silicon", "silicone", "silicones", "silicosis", "siliqua", "siliquas", "silique", "siliques", "silk", "silk screen", "silkiness", "silks", "silkweed", "silkworm", "silkworms", "sill", "sillabub", "sillabubs", "siller", "sillers", "sillies", "sillimanite", "silliness", "sills", "silly", "silo", "silos", "silphium", "silphiums", "silt", "siltation", "siltations", "silts", "siltstone", "silurian", "silurid", "silva", "silvan", "silvans", "silvas", "silver", "silverback", "silverbacks", "silvers", "silverside", "silversides", "silversmith", "silversmithing", "silversmiths", "silvertail", "silverware", "silverweed", "silverweeds", "silvester", "silvia", "silviculture", "sim", "sima", "simar", "simarouba", "simaroubas", "simars", "simazine", "simeon", "simian", "simians", "similarities", "similarity", "simile", "similes", "similitude", "similitudes", "simitar", "simitars", "simla", "simmer", "simmering", "simmers", "simnel", "simnels", "simon", "simone", "simoniac", "simoniacs", "simonides", "simonies", "simonist", "simonists", "simony", "simoom", "simooms", "simoon", "simoons", "simp", "simper", "simpers", "simple", "simpleness", "simples", "simpleton", "simpletons", "simplex", "simplicities", "simplicity", "simplification", "simplifications", "simplism", "simps", "simpson", "sims", "simulacre", "simulacres", "simulacrum", "simulacrums", "simular", "simulars", "simulation", "simulations", "simulator", "simulators", "simulcast", "simulcasts", "simulium", "simultaneity", "simultaneousness", "sin", "sinai", "sinanthropus", "sinapism", "sinapisms", "sinatra", "sincereness", "sincerity", "sinciput", "sinciputs", "sinclair", "sindhi", "sindhis", "sindon", "sindons", "sine", "sinecure", "sinecures", "sinecurism", "sinecurist", "sinecurists", "sines", "sinew", "sinews", "sinfonia", "sinfonias", "sinfonietta", "sinfoniettas", "sinfulness", "sing", "singableness", "singapore", "singe", "singer", "singers", "singes", "singh", "singhalese", "singing", "singings", "single", "single action", "single cross", "single decker", "single end", "single foot", "single mindedness", "single spacing", "singleness", "singles", "singlestick", "singlesticks", "singlet", "singleton", "singletons", "singletree", "singletrees", "singlets", "sings", "singsong", "singsongs", "singspiel", "singspiels", "singular", "singularities", "singularity", "singularization", "singulars", "singultus", "sinh", "sinhalese", "sinicism", "sinistrality", "sink", "sinkage", "sinkages", "sinker", "sinkers", "sinking", "sinkings", "sinks", "sinlessness", "sinner", "sinners", "sinnet", "sinnets", "sinning", "sinologist", "sinologists", "sinology", "sinopia", "sinopias", "sinopis", "sins", "sinter", "sinters", "sinuation", "sinuations", "sinuosities", "sinuosity", "sinuousness", "sinus", "sinuses", "sinusitis", "sinusoid", "sinusoids", "siobhan", "sion", "siouan", "sioux", "sip", "sipes", "siphon", "siphonage", "siphonages", "siphonophore", "siphonophores", "siphonostele", "siphonosteles", "siphons", "sipper", "sippers", "sippet", "sippets", "sipping", "sips", "sipunculid", "sipunculids", "sir", "siracusa", "sirdar", "sirdars", "sire", "siren", "sirenian", "sirenians", "sirens", "sires", "siriasis", "siris", "sirius", "sirloin", "sirloins", "sirocco", "siroccos", "sirrah", "sirrahs", "sirs", "sirup", "sirups", "sirvente", "sirventes", "sis", "sisal", "siskin", "siskins", "siss", "sissies", "sissoo", "sissoos", "sissy", "sister", "sister in law", "sisterhood", "sisterhoods", "sisterliness", "sisters", "sistrum", "sisyphus", "sit in", "sit ins", "sit upon", "sita", "sitar", "sitarist", "sitarists", "sitars", "sitatunga", "sitatungas", "sitcom", "sitcoms", "site", "sites", "sitfast", "sitfasts", "sithole", "sitology", "sitter", "sitters", "sitting", "sittings", "situating", "situation", "situations", "situla", "situs", "situtunga", "situtungas", "sitwell", "sitzkrieg", "sitzkriegs", "siva", "sivaism", "sivan", "siwash", "six", "six footer", "six footers", "six gun", "six pack", "six packs", "six shooter", "six shooters", "sixain", "sixaines", "sixains", "sixer", "sixers", "sixes", "sixpence", "sixpences", "sixte", "sixteen", "sixteenmo", "sixteenmos", "sixteens", "sixteenth", "sixteenths", "sixtes", "sixth", "sixth former", "sixth formers", "sixths", "sixties", "sixtieth", "sixtieths", "sixty", "sizar", "sizars", "sizarship", "sizarships", "size", "sizer", "sizers", "sizes", "siziness", "sizing", "sizings", "sizzle", "sizzler", "sizzlers", "sizzles", "sjambok", "sjamboks", "skald", "skalds", "skaldship", "skat", "skate", "skateboard", "skateboarder", "skateboarders", "skateboarding", "skateboards", "skatepark", "skater", "skaters", "skates", "skating", "skatings", "skatole", "skats", "skean", "skeans", "skedaddle", "skedaddler", "skedaddlers", "skedaddles", "skeet", "skeg", "skegs", "skeigh", "skein", "skeins", "skeleton", "skeletons", "skelf", "skelfs", "skellies", "skellum", "skellums", "skelly", "skelmersdale", "skelp", "skelps", "skelton", "skep", "skepful", "skepfuls", "skeps", "skeptic", "skepticism", "skeptics", "skerrick", "skerries", "skerry", "sketch", "sketchability", "sketcher", "sketchers", "sketches", "sketchiness", "skew", "skewbald", "skewbalds", "skewer", "skewers", "skewing", "skewness", "skews", "ski", "skiagram", "skiagrams", "skiagraph", "skiagraphs", "skiamachies", "skiamachy", "skiascopy", "skiatron", "skiatrons", "skibob", "skibobs", "skid", "skidlid", "skidlids", "skidpan", "skidpans", "skids", "skier", "skiers", "skies", "skiff", "skiffle", "skiffs", "skiing", "skiings", "skijoring", "skilfulness", "skill", "skillet", "skillets", "skillfulness", "skilling", "skillings", "skillion", "skills", "skilly", "skim", "skimmer", "skimmers", "skimmia", "skimmias", "skimming", "skimmings", "skimpiness", "skims", "skin", "skin diver", "skin divers", "skin pop", "skin pops", "skinflint", "skinflints", "skinful", "skinfuls", "skinhead", "skinheads", "skink", "skinks", "skinner", "skinners", "skinniness", "skinny", "skinny dipper", "skinny dippers", "skins", "skip", "skipjack", "skipjacks", "skiplane", "skiplanes", "skipper", "skippers", "skippet", "skippets", "skipping rope", "skipping ropes", "skips", "skipton", "skirl", "skirling", "skirlings", "skirls", "skirmish", "skirmisher", "skirmishers", "skirmishes", "skirr", "skirret", "skirrets", "skirrs", "skirt", "skirter", "skirters", "skirting", "skirtings", "skirts", "skis", "skit", "skite", "skites", "skits", "skittishness", "skittle", "skittles", "skiver", "skivers", "skivvies", "skivvy", "skivy", "sklent", "sklents", "skokiaan", "skokiaans", "skopje", "skua", "skuas", "skulduggery", "skulk", "skulker", "skulkers", "skulking", "skulkings", "skulks", "skull", "skullduggery", "skulls", "skunk", "skunks", "skutterudite", "sky", "sky blue", "skydiver", "skydivers", "skydiving", "skye", "skyey", "skyjacker", "skyjackers", "skylab", "skylark", "skylarker", "skylarkers", "skylarks", "skylight", "skylights", "skyline", "skylines", "skyros", "skysail", "skysails", "skyscape", "skyscapes", "skyscraper", "skyscrapers", "skyway", "skyways", "skywriter", "skywriters", "skywriting", "slab", "slabber", "slabbers", "slabs", "slack", "slackening", "slackenings", "slacker", "slackers", "slacking", "slackness", "slacks", "slag", "slags", "slain", "slaister", "slaisters", "slalom", "slaloms", "slam", "slams", "slander", "slanderer", "slanderers", "slanderousness", "slanders", "slang", "slanginess", "slangs", "slant", "slants", "slap", "slapjack", "slapper", "slappers", "slaps", "slapshot", "slapshots", "slapstick", "slapsticks", "slash", "slashes", "slashing", "slashings", "slat", "slatch", "slate", "slater", "slaters", "slates", "slather", "slatiness", "slating", "slatings", "slats", "slattern", "slatternliness", "slatterns", "slaughter", "slaughterer", "slaughterers", "slaughterman", "slaughters", "slav", "slave", "slave driver", "slave drivers", "slaver", "slavers", "slavery", "slaves", "slavey", "slaveys", "slavic", "slavishness", "slavism", "slavocracy", "slavocrat", "slavocrats", "slavonia", "slavonic", "slavophile", "slavophobe", "slavs", "slaw", "slaws", "slayer", "slayers", "slaying", "sleave", "sleaves", "sleaze", "sleazes", "sleaziness", "sled", "sledding", "sleddings", "sledge", "sledges", "sleds", "sleeker", "sleekers", "sleekness", "sleep", "sleeper", "sleepers", "sleepiness", "sleeping", "sleepings", "sleeplessness", "sleeps", "sleepwalker", "sleepwalkers", "sleepwalking", "sleet", "sleetiness", "sleets", "sleeve", "sleeves", "sleeving", "sleigh", "sleigher", "sleighers", "sleighs", "sleight", "sleights", "sleipnir", "slenderness", "sleuth", "sleuthing", "sleuths", "slew", "slews", "sley", "sleys", "slice", "slicer", "slicers", "slices", "slicing", "slicings", "slick", "slickenside", "slickensides", "slicker", "slickers", "slickness", "slicks", "slide", "slider", "sliders", "slides", "slier", "slight", "slighter", "slightness", "slights", "sligo", "slime", "slimes", "sliminess", "slimmer", "slimmers", "slimness", "sling", "slingback", "slingbacks", "slinger", "slingers", "slinging", "slings", "slink", "slinks", "slip", "slip on", "slip ons", "slipcover", "slipcovers", "slipes", "slipover", "slipovers", "slippage", "slippages", "slipper", "slipperiness", "slippers", "slipperwort", "slipperworts", "slippiness", "slips", "slipslop", "slipslops", "slipstream", "slipstreams", "slipware", "slipwares", "slipway", "slipways", "slit", "slither", "slithers", "slits", "sliver", "slivers", "slivovitz", "slivovitzes", "sloane", "sloanes", "slob", "slobber", "slobbers", "slobs", "sloe", "sloes", "slog", "slogan", "sloganeer", "sloganeering", "sloganeers", "slogans", "slogger", "sloggers", "slogs", "sloid", "sloop", "sloops", "sloot", "sloots", "slop", "slope", "slopes", "sloppiness", "slops", "slopwork", "slosh", "sloshes", "slot", "sloth", "slothfulness", "sloths", "slots", "slotter", "slotters", "slouch", "sloucher", "slouchers", "slouches", "slough", "sloughing", "sloughs", "slovak", "slovakia", "slovakian", "slovaks", "sloven", "slovene", "slovenia", "slovenian", "slovenians", "slovenliness", "slovens", "slowcoach", "slowcoaches", "slowing", "slowings", "slowness", "slowpoke", "slowpokes", "slowworm", "slowworms", "slub", "slubberdegullion", "slubs", "sludge", "sludges", "sludgy", "slue", "slues", "slug", "slugfest", "slugfests", "sluggard", "sluggards", "slugger", "sluggers", "sluggishness", "slugs", "sluice", "sluices", "sluit", "slum", "slumber", "slumberer", "slumberers", "slumberland", "slumbers", "slumlord", "slumlords", "slummer", "slummers", "slummy", "slump", "slumps", "slums", "slur", "slurp", "slurps", "slurries", "slurry", "slurs", "slush", "slushes", "slushiness", "slushy", "slut", "sluts", "sluttishness", "slyboots", "slyness", "slype", "slypes", "smack", "smacker", "smackers", "smacking", "smackings", "smacks", "small", "small arm", "small arms", "small mindedness", "small timer", "small timers", "smallage", "smallages", "smallholder", "smallholders", "smallholding", "smallholdings", "smallness", "smallpox", "smalls", "smalt", "smaltite", "smalto", "smaltos", "smalts", "smaragd", "smaragdine", "smaragdite", "smaragds", "smarm", "smarminess", "smarms", "smart", "smartie", "smarties", "smarting", "smartness", "smarts", "smarty pants", "smash", "smash up", "smash ups", "smasher", "smashers", "smashes", "smashing", "smatch", "smatches", "smatter", "smatterer", "smatterers", "smattering", "smatterings", "smatters", "smear", "smeariness", "smears", "smeek", "smeeks", "smegma", "smegmas", "smell", "smeller", "smellers", "smelliness", "smelling", "smellings", "smells", "smelt", "smelter", "smelteries", "smelters", "smeltery", "smelts", "smetana", "smew", "smews", "smidgen", "smidgens", "smidgeon", "smidgeons", "smidgin", "smidgins", "smilax", "smilaxes", "smile", "smiler", "smilers", "smiles", "smiling", "smilings", "smirch", "smirches", "smirk", "smirks", "smit", "smiter", "smiters", "smites", "smith", "smitheries", "smithery", "smithfield", "smithies", "smiths", "smithson", "smithsonite", "smithy", "smits", "smock", "smocking", "smockings", "smocks", "smog", "smogs", "smoke", "smokeho", "smokehos", "smokelessness", "smoker", "smokers", "smokes", "smoking", "smoking concert", "smokings", "smoko", "smokos", "smolder", "smolensk", "smollett", "smolt", "smolts", "smooch", "smooches", "smooching", "smooth", "smoother", "smoothers", "smoothes", "smoothie", "smoothies", "smoothness", "smooths", "smother", "smothers", "smoulder", "smoulders", "smriti", "smudge", "smudges", "smudginess", "smuggler", "smugglers", "smuggling", "smugglings", "smugness", "smut", "smutch", "smutches", "smuts", "smuttiness", "smyrna", "smytrie", "smytries", "snack", "snacks", "snaffle", "snaffles", "snafu", "snag", "snaggletooth", "snags", "snail", "snailing", "snails", "snake", "snakebird", "snakebirds", "snakebite", "snakebites", "snakeroot", "snakeroots", "snakes", "snakeskin", "snakeweed", "snakeweeds", "snakewood", "snakewoods", "snakiness", "snap", "snapdragon", "snapdragons", "snapper", "snappers", "snappiness", "snappishness", "snaps", "snapshot", "snapshots", "snare", "snarer", "snarers", "snares", "snarl", "snarl up", "snarl ups", "snarler", "snarlers", "snarls", "snash", "snashes", "snatch", "snatcher", "snatchers", "snatches", "snath", "snathes", "snaths", "snazziness", "sneak", "sneaker", "sneakers", "sneakiness", "sneaks", "sneck", "snecks", "sneer", "sneerer", "sneerers", "sneering", "sneerings", "sneers", "sneesh", "sneeshes", "sneeze", "sneezes", "sneezeweed", "sneezeweeds", "sneezewort", "sneezeworts", "sneezing", "sneezings", "snell", "snells", "snib", "snibs", "snick", "snicker", "snickers", "snickersnee", "snicket", "snickets", "snicks", "snide", "snideness", "snides", "sniff", "sniffer", "sniffers", "sniffiness", "sniffle", "sniffler", "snifflers", "sniffles", "sniffs", "snifter", "snifters", "snigger", "sniggerer", "sniggerers", "sniggers", "sniggle", "sniggles", "snip", "snipe", "sniper", "snipers", "snipes", "snippet", "snippetiness", "snippets", "snipping", "snippings", "snips", "snit", "snitch", "snitches", "snits", "snivel", "sniveller", "snivellers", "snivels", "sno cat", "sno cats", "snob", "snobbery", "snobbishness", "snobbism", "snobol", "snobs", "snodgrass", "snog", "snogging", "snogs", "snood", "snoods", "snook", "snooker", "snookers", "snooks", "snool", "snools", "snoop", "snooper", "snoopers", "snooperscope", "snooperscopes", "snoops", "snoot", "snootiness", "snoots", "snooze", "snoozer", "snoozers", "snoozes", "snore", "snorer", "snorers", "snores", "snoring", "snorings", "snorkel", "snorkeling", "snorkels", "snort", "snorter", "snorters", "snorting", "snortings", "snorts", "snot", "snots", "snotties", "snottiness", "snotty", "snout", "snouts", "snow", "snow in summer", "snow on the mountain", "snowball", "snowballs", "snowberries", "snowberry", "snowboard", "snowbush", "snowbushes", "snowcap", "snowcaps", "snowdon", "snowdonia", "snowdrift", "snowdrifts", "snowdrop", "snowdrops", "snowfall", "snowfalls", "snowfield", "snowfields", "snowflake", "snowflakes", "snowiness", "snowman", "snowmobile", "snowmobiles", "snows", "snowstorm", "snowstorms", "snub", "snubber", "snubbers", "snubs", "snuff", "snuff colour", "snuffbox", "snuffboxes", "snuffer", "snuffers", "snuffiness", "snuffle", "snuffler", "snufflers", "snuffles", "snuffs", "snug", "snuggeries", "snuggery", "snuggle", "snuggles", "snuggling", "snugness", "snugs", "snye", "snyes", "so and so", "so and sos", "soak", "soakage", "soakaway", "soakaways", "soaker", "soakers", "soaking", "soakings", "soaks", "soane", "soap", "soapberries", "soapberry", "soapbox", "soapboxes", "soaps", "soapstone", "soapwort", "soapworts", "soar", "soarer", "soarers", "soaring", "soarings", "soars", "sob", "sobbing", "sobbings", "sober mindedness", "soberer", "soberness", "sobersides", "sobranje", "sobriety", "sobriquet", "sobriquets", "sobs", "socage", "socager", "socagers", "socages", "soccer", "sociability", "sociable", "sociableness", "social", "socialisation", "socialism", "socialist", "socialists", "socialite", "socialites", "sociality", "socialization", "socializing", "socials", "societies", "society", "socinian", "socinianism", "sociobiologist", "sociobiologists", "sociobiology", "sociogram", "sociograms", "sociolinguist", "sociolinguistics", "sociolinguists", "sociological", "sociologism", "sociologisms", "sociologist", "sociologists", "sociology", "sociometry", "sociopath", "sociopaths", "sociopathy", "sock", "sockdologer", "sockdologers", "socket", "sockets", "sockeye", "sockeyes", "socks", "socle", "socles", "socman", "socrates", "socratic", "sod", "soda", "sodalite", "sodalities", "sodality", "sodamide", "sodas", "sodbuster", "sodbusters", "soddenness", "soddy", "sodium", "sodom", "sodomite", "sodomites", "sodomy", "sods", "sofa", "sofar", "sofas", "soffit", "soffits", "sofia", "soft", "soft cover", "soft pedal", "soft pedals", "soft shell", "soft shoe", "softa", "softas", "softback", "softbacks", "softball", "softener", "softeners", "softening", "softenings", "softhead", "softheads", "softie", "softies", "softness", "softs", "software", "softwood", "softy", "sogginess", "soh", "sohs", "soil", "soilage", "soiling", "soilings", "soils", "soilure", "soixante neuf", "soja", "sojas", "sojourn", "sojourner", "sojourners", "sojourns", "soke", "sokeman", "sokemanry", "soken", "sokens", "sokes", "sol", "sol fa", "sol faist", "solace", "solacement", "solacements", "solaces", "solan", "solander", "solanders", "solano", "solanos", "solans", "solanum", "solanums", "solarimeter", "solarimeters", "solarism", "solarist", "solarists", "solarium", "solariums", "solarization", "solarizations", "solatium", "soldan", "soldans", "solder", "soldering", "solderings", "solders", "soldier", "soldieries", "soldiering", "soldierings", "soldiers", "soldiership", "soldiery", "soldo", "sole", "solecism", "solecisms", "solemness", "solemnise", "solemnises", "solemnities", "solemnity", "solemnization", "solemnizations", "solemnizer", "solemnizers", "solemnness", "solenoid", "solenoids", "solent", "soles", "soleus", "soleuses", "solfatara", "solfataras", "solfeggio", "solfeggios", "solferino", "solferinos", "solicitation", "solicitations", "solicitor", "solicitors", "solicitorship", "solicitorships", "solicitousness", "solicitude", "solicitudes", "solid", "solid state", "solidago", "solidagos", "solidarity", "solidification", "solidifications", "solidifying", "solidities", "solidity", "solidness", "solids", "solidungulate", "solidus", "solifidian", "solifidianism", "solifidians", "solifluction", "solifluctions", "solihull", "soliloquies", "soliloquiser", "soliloquisers", "soliloquy", "soling", "solingen", "soliped", "solipeds", "solipsism", "solitaire", "solitaires", "solitaries", "solitariness", "solitary", "solitude", "solitudes", "solitudinarian", "solitudinarians", "sollar", "sollars", "solleret", "sollerets", "solly", "solmisation", "solmisations", "solmization", "solmizations", "solo", "soloist", "soloists", "solomon", "solon", "solonchak", "solonetz", "solonetzes", "solos", "sols", "solstice", "solstices", "solti", "solubility", "solum", "solums", "solute", "solutes", "solution", "solutions", "solvate", "solvates", "solvation", "solvency", "solvent", "solvents", "solver", "solvers", "solving", "solzhenitsyn", "soma", "somali", "somalia", "somalian", "somalians", "somaliland", "somalis", "somas", "somatism", "somatology", "somatoplasm", "somatopleure", "somatopleures", "somatotonia", "somatotonic", "somatotrophin", "somatotropin", "somatotype", "somatotypes", "somberness", "sombreness", "sombrero", "sombreros", "somebodies", "somebody", "someone", "somersault", "somersaulting", "somersaults", "somerville", "something", "somethings", "somewhere", "somite", "somites", "somme", "sommelier", "sommeliers", "somnambulance", "somnambulant", "somnambulants", "somnambulate", "somnambulates", "somnambulation", "somnambulations", "somnambulator", "somnambulators", "somnambulism", "somnambulist", "somnambulists", "somnifacient", "somniloquism", "somniloquist", "somniloquists", "somniloquy", "somnolence", "somnolency", "somnus", "son", "son in law", "sonant", "sonants", "sonar", "sonars", "sonata", "sonatas", "sonatina", "sonatinas", "sondage", "sondages", "sonde", "sondes", "sondheim", "sone", "sones", "song", "songbird", "songbirds", "songbook", "songbooks", "songfest", "songfests", "songfulness", "songs", "songster", "songsters", "songstress", "songstresses", "songwriter", "songwriters", "sonia", "sonics", "sonnet", "sonneteer", "sonneteers", "sonnets", "sonnies", "sonny", "sonobuoy", "sonobuoys", "sonogram", "sonograms", "sonography", "sonorant", "sonorants", "sonorities", "sonority", "sonorousness", "sons", "sonship", "soogee", "soogees", "sook", "sooks", "soot", "sooth", "soother", "soothers", "soothes", "soothfastness", "sooths", "soothsayer", "soothsayers", "soothsaying", "soothsayings", "sootiness", "soots", "sop", "sophie", "sophism", "sophisms", "sophist", "sophister", "sophisters", "sophisticate", "sophisticates", "sophistication", "sophistications", "sophistries", "sophistry", "sophists", "sophocles", "sophomore", "sophomores", "sophy", "sopor", "soporiferousness", "soporific", "soporifics", "sopors", "soppiness", "sopranino", "sopraninos", "soprano", "sopranos", "sops", "sora", "soras", "sorb", "sorbate", "sorbates", "sorbefacient", "sorbefacients", "sorbent", "sorbents", "sorbet", "sorbets", "sorbian", "sorbitol", "sorbonist", "sorbonne", "sorbs", "sorbus", "sorbuses", "sorcerer", "sorcerers", "sorceress", "sorceresses", "sorceries", "sorcery", "sordello", "sordidness", "sordino", "sore", "soredium", "sorees", "sorehead", "soreness", "sores", "sorex", "sorexes", "sorgho", "sorghos", "sorghum", "sorgo", "sorgos", "sori", "sorites", "sorner", "sorners", "soroban", "sorobans", "sororate", "sororates", "sororicide", "sororicides", "sororities", "sorority", "sorosis", "sorption", "sorptions", "sorrel", "sorrels", "sorrento", "sorriness", "sorrow", "sorrower", "sorrowers", "sorrowfulness", "sorrows", "sort", "sorter", "sorters", "sortes", "sortie", "sorties", "sortilege", "sorting", "sortings", "sortition", "sortitions", "sorts", "sorus", "sos", "soss", "sot", "soteriology", "sotho", "sothos", "sots", "sottishness", "sou", "souari", "souaris", "soubise", "soubises", "soubrette", "soubrettes", "soubriquet", "soubriquets", "souchong", "souchongs", "soudan", "sough", "soughs", "souk", "souks", "soul", "soul searching", "soulfulness", "souls", "sound", "sounder", "sounders", "sounding", "soundings", "soundman", "soundness", "soundproofing", "sounds", "soup", "souple", "souples", "soups", "soupspoon", "soupspoons", "sour", "source", "sources", "sourdine", "sourdines", "souring", "sourings", "sourness", "sourpuss", "sourpusses", "sours", "sous", "sousa", "sousaphone", "sousaphones", "souse", "souses", "sousing", "sousings", "souslik", "sousliks", "soutache", "soutaches", "soutane", "soutanes", "souter", "souterrain", "souterrains", "souters", "south", "southampton", "southdown", "southend on sea", "souther", "southerliness", "southerly", "southerner", "southerners", "southernism", "southernisms", "southernwood", "southernwoods", "southers", "southey", "southing", "southings", "southland", "southlander", "southlanders", "southlands", "southpaw", "southpaws", "southport", "souths", "southward", "southwards", "southwark", "souvenir", "souvenirs", "souvlaki", "souvlakia", "sovereign", "sovereigns", "sovereignties", "sovereignty", "soviet", "sovietism", "sovietisms", "soviets", "sovran", "sovrans", "sow", "sowans", "sowar", "sowars", "sowback", "sowens", "sower", "sowers", "soweto", "sows", "sox", "soy", "soya", "soyas", "soys", "soyuz", "spa", "space", "space bar", "space bars", "space time", "spacecraft", "spacefaring", "spaceman", "spaceport", "spaceports", "spacer", "spacers", "spaces", "spaceship", "spaceships", "spacewalk", "spacewalks", "spacing", "spacings", "spaciousness", "spade", "spadefish", "spadeful", "spadefuls", "spader", "spaders", "spades", "spadework", "spadix", "spaeing", "spaer", "spaers", "spaes", "spaghetti", "spaghettis", "spahi", "spahis", "spain", "spains", "spalding", "spale", "spales", "spall", "spallation", "spallations", "spalls", "spalpeen", "spalpeens", "spam", "spams", "span", "spancel", "spancels", "spandau", "spandex", "spandrel", "spandrels", "spanes", "spangle", "spangles", "spaniard", "spaniards", "spaniel", "spaniels", "spanish", "spank", "spanker", "spankers", "spanking", "spankings", "spanks", "spanner", "spanners", "spans", "spar", "sparable", "sparables", "sparaxis", "spare", "spareness", "sparer", "sparers", "spares", "sparganium", "sparganiums", "sparger", "spargers", "sparid", "sparids", "sparingness", "spark", "sparkle", "sparkler", "sparklers", "sparkles", "sparklet", "sparklets", "sparkling", "sparklings", "sparks", "sparling", "sparlings", "sparoid", "sparoids", "sparring", "sparrings", "sparrow", "sparrows", "spars", "sparseness", "sparsity", "sparta", "spartacist", "spartacus", "spartan", "spartans", "sparteine", "spas", "spasm", "spasmodist", "spasmodists", "spasms", "spassky", "spastic", "spasticities", "spasticity", "spastics", "spat", "spatchcock", "spatchcocks", "spate", "spates", "spathe", "spathes", "spathiphyllum", "spatiality", "spats", "spatter", "spatterdash", "spatterdashes", "spattering", "spatters", "spatula", "spatulas", "spavin", "spawn", "spawner", "spawners", "spawns", "spaying", "speaker", "speakers", "speakership", "speakerships", "speaking", "speakings", "spean", "speans", "spear", "spearfish", "spearfishes", "spearhead", "spearheads", "spearman", "spearmint", "spearmints", "spears", "spearwort", "spearworts", "spec", "special", "specialisation", "specialisations", "specialism", "specialisms", "specialist", "specialists", "specialities", "speciality", "specialization", "specializations", "specializer", "specializers", "specials", "specialties", "specialty", "speciation", "specie", "species", "specific", "specification", "specifications", "specificities", "specificity", "specifics", "specifier", "specifiers", "specifying", "specimen", "specimens", "speciosities", "speciosity", "speciousness", "speck", "speckle", "speckles", "specks", "specs", "spectacle", "spectacles", "spectacular", "spectacularity", "spectaculars", "spectator", "spectators", "spectatress", "spectatresses", "specter", "specters", "spectra", "spectralities", "spectrality", "spectre", "spectres", "spectrochemistry", "spectrogram", "spectrograms", "spectrograph", "spectrographs", "spectrography", "spectroheliogram", "spectroheliograph", "spectrohelioscope", "spectrology", "spectrometer", "spectrometers", "spectrometry", "spectrophotometer", "spectrophotometry", "spectroscope", "spectroscopes", "spectroscopist", "spectroscopists", "spectroscopy", "spectrum", "speculation", "speculations", "speculativeness", "speculator", "speculators", "speculum", "speech", "speech reading", "speeches", "speechlessness", "speed", "speed up", "speed ups", "speedball", "speeder", "speeders", "speediness", "speeding", "speedings", "speedo", "speedometer", "speedometers", "speedos", "speeds", "speedster", "speedsters", "speedway", "speedways", "speedwell", "speedwells", "speedwriting", "speel", "speels", "speer", "speers", "speiss", "speisses", "spelaeologist", "spelaeologists", "spelaeology", "speleologist", "speleologists", "speleology", "spelk", "spelks", "spell", "spellbinder", "spellbinders", "spelldown", "spelldowns", "speller", "spellers", "spellican", "spellicans", "spelling", "spellings", "spells", "spelt", "spelter", "spelunker", "spelunkers", "spence", "spencer", "spencerian", "spencerianism", "spencers", "spences", "spend", "spender", "spenders", "spending", "spendings", "spendthrift", "spendthrifts", "spengler", "spenser", "spenserian", "speos", "speoses", "sperm", "spermaceti", "spermaries", "spermary", "spermatheca", "spermathecas", "spermatid", "spermatids", "spermatium", "spermatocele", "spermatoceles", "spermatocyte", "spermatocytes", "spermatogenesis", "spermatogonium", "spermatogoniums", "spermatophore", "spermatophores", "spermatophyte", "spermatophytes", "spermatophytic", "spermatorrhoea", "spermatozoid", "spermatozoids", "spermatozoon", "spermicide", "spermicides", "spermiogenesis", "spermogonium", "spermophile", "spermophiles", "spermophyte", "spermophytes", "sperms", "sperrylite", "spessartite", "spew", "spewer", "spewers", "spews", "sphacelation", "sphacelations", "sphacelus", "sphalerite", "sphene", "sphenodon", "sphenodons", "sphenogram", "sphenograms", "sphenoid", "sphenoids", "sphere", "spheres", "sphericality", "sphericalness", "sphericity", "spherics", "spherocyte", "spherocytes", "spheroid", "spheroidicity", "spheroids", "spherometer", "spherometers", "spherule", "spherules", "spherulite", "sphincter", "sphincters", "sphingid", "sphingids", "sphingomyelin", "sphingosine", "sphinx", "sphinxes", "sphragistic", "sphragistics", "sphygmogram", "sphygmograms", "sphygmograph", "sphygmographs", "sphygmography", "sphygmomanometer", "sphygmus", "sphygmuses", "spica", "spicas", "spiccato", "spiccatos", "spice", "spiceberry", "spiceries", "spicery", "spices", "spiciness", "spick", "spicks", "spicula", "spiculas", "spicule", "spicules", "spiculum", "spider", "spiderflower", "spiderman", "spiders", "spiegeleisen", "spiel", "spieler", "spielers", "spiels", "spies", "spignel", "spignels", "spigot", "spigots", "spike", "spike rush", "spikelet", "spikelets", "spikenard", "spikenards", "spikes", "spikiness", "spile", "spiles", "spilikin", "spilikins", "spill", "spillage", "spillages", "spillikin", "spillikins", "spillover", "spillovers", "spills", "spillway", "spillways", "spilosite", "spilth", "spin", "spin drier", "spin driers", "spin dryer", "spin dryers", "spin off", "spin offs", "spina", "spinach", "spinaches", "spinal", "spinas", "spindle", "spindles", "spindling", "spindlings", "spindrift", "spine", "spine bashing", "spine chiller", "spine chillers", "spinel", "spinelessness", "spinels", "spines", "spinet", "spinets", "spinifex", "spinifexes", "spininess", "spink", "spinks", "spinnaker", "spinnakers", "spinner", "spinneret", "spinnerets", "spinneries", "spinners", "spinnery", "spinney", "spinneys", "spinnies", "spinning", "spinnings", "spinny", "spinode", "spinodes", "spinosity", "spinoza", "spinozism", "spinozist", "spins", "spinster", "spinsterhood", "spinsters", "spinthariscope", "spinthariscopes", "spinule", "spinules", "spiracle", "spiracles", "spiraea", "spiraeas", "spiral", "spirality", "spirals", "spirant", "spirants", "spire", "spirea", "spireas", "spireme", "spiremes", "spires", "spirilla", "spirillum", "spirit", "spiritedness", "spiritism", "spiritist", "spiritists", "spiritlessness", "spirits", "spiritual", "spiritualisation", "spiritualiser", "spiritualisers", "spiritualism", "spiritualist", "spiritualists", "spirituality", "spiritualization", "spiritualizer", "spiritualizers", "spirituals", "spiritualties", "spiritualty", "spirituousness", "spirochaete", "spirochaetes", "spirochaetosis", "spirochete", "spirochetes", "spirogram", "spirograph", "spirographs", "spirometer", "spirometers", "spirometry", "spironolactone", "spirt", "spirts", "spit", "spital", "spitals", "spitchcock", "spitchcocks", "spite", "spitefulness", "spites", "spitfire", "spitfires", "spithead", "spits", "spitsbergen", "spitter", "spitters", "spitting", "spittings", "spittle", "spittlebug", "spittles", "spittoon", "spittoons", "spitz", "spitzes", "spiv", "spivs", "splanchnology", "splash", "splashdown", "splashdowns", "splasher", "splashers", "splashes", "splashiness", "splashing", "splashings", "splat", "splats", "splatter", "splattering", "splatters", "splay", "splays", "spleen", "spleens", "splendidness", "splendor", "splendors", "splendour", "splendours", "splenectomies", "splenectomy", "splenetic", "splenetics", "splenitis", "splenius", "spleniuses", "splenomegaly", "spleuchan", "spleuchans", "splice", "splicer", "splicers", "splices", "splicing", "spline", "splines", "splint", "splinter", "splintering", "splinters", "splints", "split", "split off", "splits", "splitter", "splitters", "splitting", "splodge", "splodges", "splore", "splores", "splosh", "sploshes", "splotch", "splotches", "splurge", "splurges", "splutter", "splutterer", "splutterers", "splutters", "spock", "spode", "spodumene", "spohr", "spoil", "spoilage", "spoiler", "spoilers", "spoiling", "spoils", "spoilsman", "spokane", "spoke", "spokes", "spokeshave", "spokeshaves", "spokesman", "spokesperson", "spokespersons", "spokeswoman", "spoliation", "spoliations", "spondee", "spondees", "spondulicks", "spondulix", "spondylitis", "spondylolisthesis", "sponge", "sponger", "spongers", "sponges", "spongin", "sponginess", "sponsion", "sponsions", "sponson", "sponsons", "sponsor", "sponsors", "sponsorship", "sponsorships", "spontaneity", "spontaneousness", "spontoon", "spontoons", "spoof", "spoofery", "spoofs", "spook", "spookiness", "spooks", "spool", "spools", "spoom", "spooms", "spoon", "spoonbill", "spoonbills", "spoondrift", "spooner", "spoonerism", "spoonerisms", "spoonful", "spoonfuls", "spoons", "spoor", "spoors", "sporangiophore", "sporangiophores", "sporangium", "spore", "spores", "sporocarp", "sporocarps", "sporocyst", "sporocysts", "sporogenesis", "sporogonium", "sporogoniums", "sporophore", "sporophores", "sporophyl", "sporophyll", "sporophylls", "sporophyls", "sporophyte", "sporophytes", "sporotrichosis", "sporozoan", "sporozoite", "sporran", "sporrans", "sport", "sporter", "sporters", "sportfulness", "sportiness", "sportiveness", "sports", "sportscast", "sportscaster", "sportscasters", "sportscasts", "sportsman", "sportsmanship", "sportswear", "sportswoman", "sporulation", "sporulations", "sporule", "sporules", "spot", "spot weld", "spot welds", "spotlessness", "spotlight", "spotlights", "spots", "spottedness", "spotter", "spotters", "spottiness", "spotting", "spottings", "spousal", "spousals", "spouse", "spouses", "spout", "spouter", "spouters", "spouts", "sprag", "sprags", "sprain", "sprains", "sprat", "sprats", "sprattle", "sprattles", "sprawl", "sprawling", "sprawls", "spray", "sprayer", "sprayers", "spraying", "sprays", "spread", "spread eagleism", "spreader", "spreaders", "spreading", "spreadings", "spreads", "spreadsheet", "spreadsheets", "sprechgesang", "sprechstimme", "spree", "sprees", "sprig", "sprightliness", "sprigs", "spring", "spring clean", "spring cleaning", "spring cleans", "springald", "springalds", "springboard", "springboards", "springbok", "springboks", "springbuck", "springbucks", "springe", "springer", "springers", "springes", "springfield", "springhaas", "springhead", "springheads", "springiness", "springing", "springings", "springlet", "springlets", "springs", "springtail", "springtails", "springtide", "springtides", "springtime", "springwood", "sprinkle", "sprinkler", "sprinklers", "sprinkles", "sprinkling", "sprinklings", "sprint", "sprinter", "sprinters", "sprints", "sprit", "sprite", "sprites", "sprits", "spritsail", "spritsails", "spritz", "spritzer", "spritzers", "spritzes", "sprocket", "sprockets", "sprout", "sprouting", "sproutings", "sprouts", "spruce", "spruceness", "spruces", "sprue", "sprues", "spruiker", "spruikers", "spruit", "spud", "spud bashing", "spuds", "spumante", "spume", "spumes", "spunk", "spunkie", "spunkies", "spunkiness", "spunks", "spunky", "spur", "spur rowel", "spurge", "spurges", "spuriousness", "spurn", "spurns", "spurrer", "spurrers", "spurrey", "spurreys", "spurrier", "spurriers", "spurries", "spurring", "spurrings", "spurry", "spurs", "spurt", "spurtle", "spurtles", "spurts", "sputnik", "sputniks", "sputter", "sputtering", "sputterings", "sputters", "sputum", "spy", "spyglass", "spyglasses", "spying", "spyings", "squab", "squabble", "squabbler", "squabblers", "squabbles", "squabs", "squacco", "squaccos", "squad", "squadron", "squadrons", "squads", "squalene", "squalidity", "squalidness", "squall", "squaller", "squallers", "squalls", "squalor", "squama", "squamation", "squamations", "squamosal", "squamosals", "squamule", "squamules", "squander", "squanderer", "squanderers", "squandering", "squanderings", "squandermania", "squanders", "square", "square bashing", "square rigger", "squareness", "squarer", "squarers", "squares", "squash", "squashes", "squashiness", "squat", "squatness", "squats", "squatter", "squatters", "squattiness", "squatting", "squattocracy", "squaw", "squawk", "squawker", "squawkers", "squawks", "squaws", "squeak", "squeaker", "squeakers", "squeaks", "squeal", "squealer", "squealers", "squeals", "squeamishness", "squeegee", "squeegees", "squeezability", "squeeze", "squeeze box", "squeeze boxes", "squeezer", "squeezers", "squeezes", "squelch", "squelcher", "squelchers", "squelches", "squeteague", "squeteagues", "squib", "squibs", "squid", "squids", "squiffer", "squiffers", "squiggle", "squiggles", "squilgee", "squilgees", "squill", "squilla", "squills", "squinancy", "squinch", "squinches", "squinny", "squint", "squinter", "squinters", "squints", "squirarchies", "squirarchy", "squire", "squirearch", "squirearchies", "squirearchs", "squirearchy", "squiredom", "squiredoms", "squireen", "squireens", "squireling", "squirelings", "squires", "squirm", "squirms", "squirrel", "squirrelfish", "squirrels", "squirt", "squirter", "squirters", "squirts", "squish", "squishes", "squit", "squits", "squiz", "srinagar", "stab", "stabber", "stabbers", "stabile", "stabiles", "stabilisation", "stabilisations", "stabiliser", "stabilisers", "stabilities", "stability", "stabilization", "stabilizations", "stabilizer", "stabilizers", "stable", "stablemate", "stablemates", "stableness", "stables", "stabling", "stablings", "stabs", "stacey", "stachys", "stack", "stacker", "stacks", "stackyard", "stackyards", "stacte", "stactes", "stacy", "staddle", "staddles", "staddlestone", "staddlestones", "stade", "stades", "stadholder", "stadholders", "stadia", "stadias", "stadium", "stadiums", "staff", "staffa", "staffer", "staffers", "stafford", "staffordshire", "staffs", "stag", "stage", "stagecoach", "stagecoaches", "stagecraft", "stager", "stagers", "stages", "stagflation", "staggard", "staggards", "stagger", "staggerer", "staggerers", "staggers", "staghound", "staghounds", "staginess", "staging", "stagings", "stagirite", "stagnancy", "stagnation", "stagnations", "stags", "stagyrite", "stahlhelm", "staidness", "stain", "stainer", "stainers", "staines", "staining", "stainings", "stainless", "stainlessness", "stains", "stair", "stair carpet", "stair carpets", "stair rod", "stair rods", "staircase", "staircases", "stairhead", "stairheads", "stairs", "stairway", "stairways", "stake", "stakeholder", "stakeholders", "stakes", "stakhanovism", "staking", "stalactite", "stalactites", "stalag", "stalagmite", "stalagmites", "stalagmometer", "stalagmometers", "stalags", "stale", "stalemate", "stalemates", "staleness", "stales", "stalin", "stalingrad", "stalinism", "stalinist", "stalinists", "stalk", "stalker", "stalkers", "stalking", "stalking horse", "stalking horses", "stalkings", "stalks", "stall", "stallage", "stalling", "stallings", "stallion", "stallions", "stalls", "stalwart", "stalwartness", "stalwarts", "stambul", "stamen", "stamens", "stamford", "stamina", "staminode", "staminodes", "staminodium", "staminodiums", "staminody", "stammel", "stammels", "stammer", "stammerer", "stammerers", "stammers", "stamnos", "stamp", "stampede", "stampedes", "stamper", "stampers", "stamps", "stan", "stance", "stances", "stanch", "stancher", "stanchers", "stanches", "stanchion", "stanchions", "stand", "stand by", "stand bys", "stand in", "stand ins", "stand offishness", "standard", "standard bearer", "standard bearers", "standardisation", "standardization", "standardizer", "standardizers", "standards", "standee", "standees", "standfast", "standing", "standings", "standish", "standishes", "standpoint", "standpoints", "stands", "standstill", "standstills", "stane", "stanes", "stanford", "stang", "stangs", "stanhope", "stanhopes", "stanislavski", "stank", "stanks", "stanley", "stannaries", "stannary", "stannate", "stannates", "stannite", "stannites", "stanza", "stanzaic", "stanzas", "stapedectomies", "stapedectomy", "stapelia", "stapelias", "stapes", "stapeses", "staph", "staphylococci", "staphylorrhaphy", "staple", "stapler", "staplers", "staples", "star", "star apple", "star of bethlehem", "star thistle", "starboard", "starboards", "starch", "starches", "starchiness", "stardom", "stare", "stares", "starets", "staretses", "starfish", "starfishes", "starkness", "starlet", "starlets", "starlight", "starling", "starlings", "starriness", "stars", "start", "starter", "starters", "starting", "startings", "startle", "startler", "startlers", "startles", "starts", "starvation", "starvations", "starveling", "starvelings", "starving", "starvings", "starwort", "starworts", "stash", "stashes", "stasidion", "stasidions", "stasimon", "stasis", "state", "statecraft", "statehood", "statelessness", "stateliness", "statement", "statements", "staten", "stater", "stateroom", "staterooms", "states", "statesman", "statesmanship", "static", "statice", "statics", "station", "stationariness", "stationer", "stationers", "stationery", "stations", "statism", "statist", "statistic", "statistician", "statisticians", "statistics", "statists", "stative", "statocyst", "statocysts", "statolith", "statoliths", "stator", "stators", "statoscope", "statoscopes", "statuaries", "statuary", "statue", "statues", "statuette", "statuettes", "stature", "statures", "status", "statuses", "statute", "statutes", "staunch", "staunches", "staunchness", "staurolite", "stauroscope", "stavanger", "stave", "staves", "stavesacre", "stavesacres", "staw", "staws", "stay", "stay at home", "stay at homes", "stayer", "stayers", "stays", "staysail", "staysails", "stead", "steadfastness", "steadier", "steadies", "steadiness", "steading", "steadings", "steads", "steady", "steak", "steakhouse", "steakhouses", "steaks", "steal", "stealer", "stealers", "steales", "stealing", "stealings", "steals", "stealth", "stealthiness", "steam", "steam boiler", "steam boilers", "steam chest", "steam engine", "steam engines", "steam shovel", "steam shovels", "steamboat", "steamboats", "steamer", "steamers", "steamie", "steamies", "steaminess", "steams", "steamship", "steamships", "steapsin", "stearate", "stearates", "stearin", "steatite", "steatites", "steatopygia", "steatorrhea", "steed", "steeds", "steek", "steeks", "steel", "steelhead", "steelheads", "steeliness", "steelman", "steels", "steelwork", "steelworker", "steelworkers", "steelworks", "steelyard", "steelyards", "steenbok", "steenboks", "steening", "steenings", "steep", "steeper", "steepers", "steeple", "steeplechase", "steeplechaser", "steeplechasers", "steeplechases", "steeplechasing", "steeplechasings", "steeplejack", "steeplejacks", "steeples", "steepness", "steeps", "steer", "steerage", "steerages", "steerer", "steerers", "steering", "steerings", "steers", "steersman", "steeve", "steeves", "stegodon", "stegodons", "stegomyia", "stegosaur", "stegosaurs", "stein", "steinbeck", "steiner", "steins", "steinway", "stela", "stelas", "stele", "steles", "stella", "stellarator", "stellarators", "stellionate", "stellionates", "stem", "stemma", "stemmer", "stemmers", "stems", "stemson", "stemsons", "stemware", "stench", "stenches", "stencil", "stenciller", "stencillers", "stencils", "stendhal", "steno", "stenograph", "stenographer", "stenographers", "stenographs", "stenography", "stenos", "stenosis", "stenotype", "stenotypes", "stenotypist", "stenotypists", "stenotypy", "stentor", "stentors", "step", "step down", "step in", "step ins", "step parent", "step parents", "step up", "step ups", "stepbrother", "stepbrothers", "stepchild", "stepdame", "stepdames", "stepdaughter", "stepdaughters", "stepfather", "stepfathers", "stephanie", "stephanite", "stephanotis", "stephanotises", "stephen", "stephenson", "stepmother", "stepmothers", "steppe", "steppenwolf", "stepper", "steppers", "steppes", "steps", "stepsister", "stepsisters", "stepson", "stepsons", "steradian", "steradians", "sterculia", "sterculias", "stere", "stereo", "stereobate", "stereobates", "stereochemistry", "stereochrome", "stereochromy", "stereogram", "stereograms", "stereograph", "stereographs", "stereography", "stereoisomer", "stereoisomerism", "stereoisomers", "stereometry", "stereophony", "stereopsis", "stereopticon", "stereopticons", "stereos", "stereoscope", "stereoscopes", "stereoscopist", "stereoscopists", "stereoscopy", "stereotaxis", "stereotomies", "stereotomy", "stereotropism", "stereotype", "stereotypes", "stereotypies", "stereotypy", "steres", "sterigma", "sterilant", "sterilisation", "sterilisations", "steriliser", "sterilisers", "sterility", "sterilization", "sterilizations", "sterlet", "sterlets", "sterling", "sterlings", "stern", "stern chaser", "stern wheeler", "stern wheelers", "sterna", "sterne", "sternite", "sternites", "sternness", "sterns", "sternson", "sternsons", "sternum", "sternums", "sternutation", "sternutations", "sternutator", "sternutators", "sternutatory", "sternway", "sternways", "steroid", "steroids", "sterol", "sterols", "stertorousness", "stet", "stethoscope", "stethoscopes", "stethoscopist", "stethoscopists", "stethoscopy", "stets", "stetson", "stetsons", "steve", "stevedore", "stevedores", "stevenage", "stevengraph", "stevengraphs", "stevenson", "stevie", "stew", "steward", "stewardess", "stewardesses", "stewards", "stewardship", "stewardships", "stewart", "stewing", "stewings", "stewpan", "stewpans", "stewpot", "stewpots", "stews", "stibine", "stibium", "stibnite", "stich", "sticharion", "sticharions", "stichic", "stichometry", "stichomythia", "stichs", "stick", "stick in the mud", "stickability", "sticker", "stickers", "stickful", "stickfuls", "stickies", "stickiness", "stickjaw", "stickjaws", "stickleback", "sticklebacks", "stickler", "sticklers", "sticks", "stickup", "stickups", "stickweed", "stickwork", "sticky", "stickybeak", "stickybeaks", "sties", "stiff", "stiffener", "stiffeners", "stiffening", "stiffenings", "stiffness", "stiffs", "stifle", "stifler", "stiflers", "stifles", "stifling", "stiflings", "stigma", "stigmas", "stigmata", "stigmatic", "stigmatics", "stigmatisation", "stigmatisations", "stigmatism", "stigmatist", "stigmatists", "stigmatization", "stigmatizations", "stilb", "stilbene", "stilbestrol", "stilbite", "stilbites", "stilboestrol", "stilbs", "stile", "stiles", "stiletto", "stilettoes", "stilettoing", "stilettos", "still", "still hunter", "stillage", "stillages", "stiller", "stillers", "stillicide", "stillicides", "stillness", "stills", "stilt", "stilton", "stiltons", "stilts", "stime", "stimes", "stimies", "stimulant", "stimulants", "stimulate", "stimulates", "stimulation", "stimulations", "stimulative", "stimulatives", "stimulator", "stimulators", "stimuli", "stimulus", "stimy", "sting", "stingaree", "stingarees", "stinger", "stingers", "stinginess", "stinging", "stingings", "stingo", "stingos", "stings", "stingy", "stink", "stinker", "stinkers", "stinkhorn", "stinkhorns", "stinking", "stinkings", "stinks", "stinkstone", "stinkweed", "stint", "stintedness", "stinter", "stinters", "stints", "stipe", "stipel", "stipels", "stipend", "stipendiaries", "stipendiary", "stipends", "stipes", "stipple", "stippler", "stipplers", "stipples", "stipulation", "stipulations", "stipulator", "stipulators", "stipule", "stipules", "stir", "stirabout", "stirabouts", "stirk", "stirks", "stirling", "stirpiculture", "stirps", "stirrer", "stirrers", "stirring", "stirrings", "stirrup", "stirrups", "stirs", "stitch", "stitcher", "stitchers", "stitchery", "stitches", "stitching", "stitchings", "stitchwork", "stitchwort", "stitchworts", "stithies", "stithy", "stiver", "stivers", "stoa", "stoas", "stoat", "stoats", "stob", "stobs", "stoccado", "stoccados", "stock", "stock in trade", "stockade", "stockades", "stockbroker", "stockbrokers", "stockcar", "stockcars", "stocker", "stockers", "stockfish", "stockfishes", "stockhausen", "stockholder", "stockholders", "stockholding", "stockholdings", "stockholm", "stockhorn", "stockhorns", "stockiness", "stockinet", "stockinets", "stockinette", "stockinettes", "stocking", "stockings", "stockishness", "stockist", "stockists", "stockman", "stockpile", "stockpiles", "stockpiling", "stockpilings", "stockport", "stocks", "stocktaking", "stocktakings", "stockton", "stockton on tees", "stockyard", "stockyards", "stodge", "stodges", "stodginess", "stoep", "stogey", "stogy", "stoic", "stoichiology", "stoichiometry", "stoicism", "stoics", "stoit", "stoits", "stoke on trent", "stokehold", "stokeholds", "stoker", "stokers", "stokes", "stokowski", "stol", "stole", "stoles", "stolidity", "stolidness", "stollen", "stolon", "stolons", "stols", "stoma", "stomach", "stomacher", "stomachers", "stomachic", "stomachics", "stomachs", "stomata", "stomatitis", "stomatology", "stomatoplasty", "stomatopod", "stomatopods", "stomp", "stomper", "stompers", "stomps", "stone", "stone lily", "stoneboat", "stonechat", "stonechats", "stonecrop", "stonecrops", "stonefish", "stonefishes", "stonehenge", "stonemasonry", "stoner", "stoners", "stones", "stonewaller", "stonewallers", "stonewalling", "stonewallings", "stoneware", "stonework", "stonewort", "stoneworts", "stoniness", "stonk", "stonks", "stooge", "stooges", "stook", "stooker", "stookers", "stooks", "stool", "stoolie", "stoolies", "stools", "stoop", "stooper", "stoopers", "stoopes", "stoops", "stop", "stop off", "stop offs", "stope", "stopes", "stoping", "stopings", "stoplight", "stoplights", "stoppage", "stoppages", "stoppard", "stopper", "stoppers", "stopping", "stoppings", "stopple", "stopples", "stops", "storable", "storage", "storages", "storax", "storaxes", "store", "storefront", "storehouse", "storehouses", "storekeeper", "storekeepers", "storer", "storeroom", "storerooms", "storers", "stores", "storey", "storeys", "stories", "storiette", "storiettes", "storing", "stork", "stork s bill", "storks", "storm", "storm cock", "storm trooper", "storm troopers", "storminess", "storms", "stornoway", "storting", "story", "storyboard", "storyline", "stotinka", "stotter", "stotters", "stound", "stounds", "stoup", "stoups", "stour", "stourbridge", "stours", "stoush", "stoushes", "stout", "stout heartedness", "stoutness", "stouts", "stove", "stover", "stoves", "stowage", "stowages", "stowaway", "stowaways", "stowe", "stowing", "stowings", "strabismus", "strabismuses", "strabotomies", "strabotomy", "strachey", "straddle", "straddler", "straddlers", "straddles", "stradivari", "stradivarius", "strafe", "strafes", "straggle", "straggler", "stragglers", "straggles", "straight", "straight arm", "straightaway", "straightener", "straighteners", "straightforwardness", "straightjacket", "straightjackets", "straightness", "straights", "strain", "strainer", "strainers", "straining", "strainings", "strains", "strait", "straitness", "straits", "strake", "strakes", "stramonium", "stramoniums", "strand", "strands", "strangeness", "stranger", "strangers", "stranglehold", "strangleholds", "strangler", "stranglers", "strangles", "strangling", "strangulation", "strangulations", "strangury", "stranraer", "strap", "strap hinge", "strap oil", "strappado", "strappados", "strapper", "strappers", "straps", "strasbourg", "strass", "strata", "stratagem", "stratagems", "strategics", "strategies", "strategist", "strategists", "strategy", "stratford on avon", "strath", "strathclyde", "straths", "strathspey", "strathspeys", "stratification", "stratifications", "stratigrapher", "stratigraphers", "stratigraphy", "stratocracies", "stratocracy", "stratocrat", "stratocrats", "stratopause", "stratosphere", "stratum", "stratus", "stratuses", "strauss", "stravinsky", "straw", "strawberries", "strawberry", "strawboard", "strawboards", "strawflower", "strawman", "straws", "strawy", "stray", "strayer", "strayers", "strays", "streak", "streaker", "streakers", "streakiness", "streaks", "stream", "streamer", "streamers", "streaminess", "streaming", "streamings", "streamlet", "streamlets", "streamline", "streamlines", "streams", "streek", "streeks", "street", "streetcar", "streetcars", "streetlight", "streetlights", "streets", "strega", "streisand", "strelitzia", "strelitzias", "strenght", "strength", "strengthener", "strengtheners", "strengthening", "strengths", "strenuosity", "strenuousness", "strep", "streps", "streptocarpus", "streptococci", "streptococcus", "streptokinase", "streptomycin", "streptosolen", "stress", "stresses", "stretch", "stretcher", "stretcher bearer", "stretcher bearers", "stretchers", "stretches", "stretching", "stretford", "stretto", "strewing", "strewings", "stria", "striation", "striations", "strickle", "strickles", "strictness", "stricture", "strictures", "stride", "stridence", "stridency", "strides", "stridor", "stridors", "stridulation", "stridulations", "strife", "strifes", "strigil", "strigils", "strike", "strikeout", "strikeouts", "striker", "strikers", "strikes", "striking", "strikingness", "strikings", "strindberg", "strine", "string", "stringencies", "stringency", "stringer", "stringers", "stringhalt", "stringiness", "stringing", "stringings", "strings", "stringy bark", "strip", "stripe", "striper", "stripers", "stripes", "striping", "stripings", "stripling", "striplings", "stripper", "strippers", "stripping", "strippings", "strips", "striptease", "stripteaser", "stripteasers", "striver", "strivers", "striving", "strivings", "strobe", "strobes", "strobila", "strobilation", "strobilations", "strobile", "strobiles", "strobilus", "stroboscope", "stroboscopes", "stroganoff", "stroganoffs", "stroke", "strokes", "stroking", "strokings", "stroll", "stroller", "strollers", "strolls", "stroma", "stromatolite", "stromboli", "strombus", "strombuses", "strong mindedness", "stronghold", "strongholds", "strongman", "strongpoint", "strongpoints", "strongyle", "strongyles", "strongylosis", "strontia", "strontian", "strontianite", "strontias", "strontium", "strop", "strophanthin", "strophanthus", "strophanthuses", "strophe", "strophes", "strops", "stroud", "strouds", "structuralism", "structuralist", "structuralists", "structure", "structures", "strudel", "strudels", "struggle", "struggler", "strugglers", "struggles", "strum", "struma", "strumpet", "strumpets", "strums", "strunt", "strunts", "strut", "struts", "strutter", "strutters", "strychnine", "strychninism", "stuart", "stub", "stubbed", "stubbies", "stubbiness", "stubble", "stubbles", "stubbornness", "stubby", "stubs", "stucco", "stuccoes", "stuccos", "stud", "studding", "studdings", "student", "students", "studentship", "studentships", "studiedness", "studier", "studiers", "studies", "studio", "studios", "studiousness", "studs", "studwork", "study", "studying", "stuff", "stuffiness", "stuffing", "stuffings", "stuffs", "stuka", "stukas", "stull", "stulls", "stultification", "stum", "stumble", "stumblebum", "stumblebums", "stumbles", "stumer", "stumers", "stump", "stumpage", "stumper", "stumpers", "stumpiness", "stumping", "stumps", "stums", "stun", "stunner", "stunners", "stuns", "stunsail", "stunsails", "stunt", "stuntedness", "stunting", "stunts", "stupa", "stupas", "stupe", "stupefacient", "stupefacients", "stupefaction", "stupefactions", "stupendousness", "stupes", "stupid", "stupidities", "stupidity", "stupidness", "stupids", "stupor", "stupors", "sturdies", "sturdiness", "sturdy", "sturgeon", "sturgeons", "sturmabteilung", "sturmer", "sturmers", "sturt", "sturts", "stutter", "stutterer", "stutterers", "stutters", "stuttgart", "stuyvesant", "sty", "stye", "styes", "style", "styles", "stylet", "stylets", "stylisation", "stylisations", "stylishness", "stylist", "stylists", "stylite", "stylites", "stylization", "stylizations", "stylobate", "stylobates", "stylograph", "stylographs", "stylography", "stylolite", "stylopodium", "stylopodiums", "stylus", "styluses", "stymie", "stymies", "stypsis", "styptic", "styptics", "styrax", "styraxes", "styrene", "styrenes", "styx", "suability", "suasion", "suasions", "suasiveness", "suaveness", "suavity", "sub", "subabbot", "subacetate", "subacidity", "subacidness", "subadar", "subadars", "subadministrator", "subadult", "subagencies", "subagency", "subagent", "subagents", "subaggregate", "subaggregates", "subah", "subahs", "suballiance", "subaltern", "subalternation", "subalternity", "subalterns", "subappearance", "subappearances", "subarea", "subarticle", "subassemblies", "subassembly", "subassociation", "subaudition", "subauditions", "subbase", "subbasement", "subbasements", "subbing", "subbings", "subbreed", "subbreeds", "subbureau", "subcaste", "subcategories", "subcategory", "subcavity", "subcelestial", "subception", "subchapter", "subchief", "subchloride", "subcircuit", "subcivilization", "subclass", "subclasses", "subclause", "subclauses", "subclimax", "subcommission", "subcommissioner", "subcommissions", "subcommittee", "subcommittees", "subconscious", "subconsciousness", "subcontinent", "subcontinents", "subcontract", "subcontractor", "subcontractors", "subcontracts", "subcontraries", "subcontrary", "subcortex", "subcosta", "subcostas", "subculture", "subcultures", "subdeacon", "subdeacons", "subdelirium", "subdeliriums", "subdiaconate", "subdiaconates", "subdialect", "subdistrict", "subdistricts", "subdivision", "subdivisions", "subdominant", "subdominants", "subdual", "subduals", "subduction", "subductions", "subduedness", "subduer", "subduers", "subeditor", "subeditorial", "subeditors", "suberin", "suberization", "suberizations", "subfamilies", "subfamily", "subfield", "subfloor", "subfloors", "subframe", "subfusc", "subfuscs", "subgenus", "subgenuses", "subgrade", "subgroup", "subgroups", "subgum", "subgums", "subheading", "subheadings", "subincision", "subincisions", "subinfeudation", "subinfeudatory", "subinspector", "subinspectors", "subinspectorship", "subject", "subjection", "subjections", "subjective", "subjectiveness", "subjectivism", "subjectivist", "subjectivists", "subjectivity", "subjects", "subjoinder", "subjoinders", "subjoining", "subjugation", "subjugations", "subjugator", "subjugators", "subjunction", "subjunctive", "subjunctives", "subkingdom", "subkingdoms", "sublapsarianism", "sublease", "subleases", "sublessee", "sublessees", "sublessor", "sublessors", "sublet", "sublets", "sublibrarian", "sublibrarians", "sublieutenant", "sublieutenants", "sublimate", "sublimates", "sublimation", "sublimations", "sublime", "sublimeness", "sublimer", "sublimes", "sublimities", "sublimity", "subluxation", "subluxations", "subman", "submanager", "submarine", "submariner", "submariners", "submarines", "submatrix", "submediant", "submediants", "submergence", "submergences", "submergibility", "submerging", "submersibility", "submersible", "submersibles", "submersion", "submersions", "submission", "submissions", "submissiveness", "submolecule", "submucosa", "submultiple", "submultiples", "subnormal", "subnormality", "subnormals", "suboffice", "subofficer", "subofficers", "suboffices", "suborder", "suborders", "subordinaries", "subordinary", "subordinate", "subordinateness", "subordinates", "subordination", "subordinationism", "subordinations", "subornation", "subornations", "suborner", "suborners", "suboxide", "suboxides", "subphylum", "subplot", "subplots", "subpoena", "subpoenas", "subpopulation", "subpopulations", "subpostmaster", "subpostmasters", "subprefect", "subprefects", "subprefecture", "subprefectures", "subprincipal", "subprincipals", "subprior", "subprioress", "subpriors", "subprogram", "subprograms", "subreference", "subreferences", "subregion", "subregions", "subreption", "subreptions", "subrogation", "subrogations", "subroutine", "subroutines", "subs", "subsample", "subscapular", "subscapulars", "subscriber", "subscribers", "subscript", "subscription", "subscriptions", "subscripts", "subsection", "subsections", "subsellium", "subsequence", "subsequences", "subseries", "subservience", "subserviency", "subset", "subsets", "subshrub", "subshrubs", "subsidence", "subsidences", "subsidiaries", "subsidiarity", "subsidiary", "subsidies", "subsiding", "subsidisation", "subsidisations", "subsidization", "subsidizations", "subsidizer", "subsidizers", "subsidy", "subsistence", "subsistences", "subsizar", "subsizars", "subsoil", "subsoils", "subspecies", "substage", "substages", "substance", "substances", "substantial", "substantialism", "substantiality", "substantialness", "substantials", "substantiation", "substantiations", "substantive", "substantiveness", "substantives", "substation", "substations", "substituent", "substituents", "substitute", "substitutes", "substituting", "substitution", "substitutions", "substrate", "substrates", "substratosphere", "substratum", "substructure", "substructures", "subsuming", "subsumption", "subsumptions", "subsystem", "subsystems", "subtangent", "subtangents", "subteen", "subteens", "subtenancies", "subtenancy", "subtenant", "subtenants", "subterfuge", "subterfuges", "subterrane", "subtext", "subtexts", "subtileness", "subtilisation", "subtitle", "subtitles", "subtleness", "subtleties", "subtlety", "subtonic", "subtonics", "subtopia", "subtopias", "subtotal", "subtotals", "subtracter", "subtraction", "subtractions", "subtrahend", "subtrahends", "subtreasurer", "subtreasurers", "subtreasuries", "subtreasury", "subtribe", "subtribes", "subtropics", "subtype", "subtypes", "subunit", "subunits", "suburb", "suburban", "suburbanisation", "suburbanite", "suburbanites", "suburbanization", "suburbans", "suburbia", "suburbias", "suburbs", "subvarieties", "subvariety", "subvassal", "subvassals", "subvention", "subventions", "subversion", "subversions", "subversive", "subversiveness", "subversives", "subverter", "subverters", "subwarden", "subwardens", "subway", "subways", "subzone", "subzones", "succah", "succahs", "succedaneum", "succeeder", "succeeders", "succentor", "succentors", "success", "successes", "successfulness", "succession", "successions", "successiveness", "successlessness", "successor", "successors", "succinate", "succinates", "succinctness", "succinctorium", "succinctoriums", "succor", "succories", "succors", "succory", "succotash", "succotashes", "succoth", "succour", "succourer", "succourers", "succours", "succuba", "succubas", "succubus", "succubuses", "succulence", "succulency", "succulent", "succulents", "succursal", "succursales", "succursals", "succus", "succuss", "succussion", "succussions", "suchlike", "suck", "sucker", "suckers", "sucking", "suckings", "suckler", "sucklers", "suckling", "sucklings", "sucks", "sucralfate", "sucrase", "sucre", "sucres", "sucrier", "sucrose", "suction", "suctions", "suctoria", "sudan", "sudanese", "sudarium", "sudariums", "sudatories", "sudatorium", "sudatoriums", "sudatory", "sudd", "sudden", "suddenness", "sudds", "sudetenland", "sudor", "sudorific", "sudors", "sudra", "sudras", "suds", "suede", "suedes", "suer", "suers", "suet", "suetonius", "suez", "sufferableness", "sufferance", "sufferances", "sufferer", "sufferers", "suffering", "sufferings", "sufficiencies", "sufficiency", "sufficient", "suffix", "suffixes", "suffixion", "sufflation", "suffocation", "suffocations", "suffolk", "suffolks", "suffragan", "suffragans", "suffrage", "suffrages", "suffragette", "suffragettes", "suffragettism", "suffragist", "suffragists", "suffumigation", "suffusion", "suffusions", "sufi", "sufis", "sufism", "sugar", "sugarbush", "sugariness", "sugars", "suggester", "suggesters", "suggestibility", "suggestion", "suggestions", "suggestiveness", "suicide", "suicides", "suing", "suint", "suisse", "suit", "suitabilities", "suitability", "suitableness", "suite", "suites", "suiting", "suitings", "suitor", "suitors", "suits", "sukiyaki", "sukiyakis", "sukkah", "sukkahs", "sukkoth", "sulawesi", "sulcation", "sulcations", "sulcus", "sulfa", "sulfacetamide", "sulfadiazine", "sulfanilamide", "sulfate", "sulfathiazole", "sulfation", "sulfide", "sulfonate", "sulfonation", "sulfone", "sulfonic", "sulfur", "sulk", "sulkies", "sulkiness", "sulks", "sulky", "sulla", "sullage", "sullen", "sullenness", "sullies", "sullivan", "sully", "sulpha", "sulphadiazine", "sulphanilamide", "sulphate", "sulphates", "sulphathiazole", "sulphation", "sulphide", "sulphides", "sulphinyl", "sulphite", "sulphites", "sulphonamide", "sulphonamides", "sulphonate", "sulphonates", "sulphonation", "sulphone", "sulphones", "sulphonium", "sulphur", "sulphur bottom", "sulphuration", "sulphurations", "sulphurator", "sulphurators", "sulphureous", "sulphurization", "sulphurs", "sultan", "sultana", "sultanabad", "sultanas", "sultanate", "sultanates", "sultans", "sultanship", "sultanships", "sultriness", "sulu", "sulus", "sum", "sumac", "sumach", "sumachs", "sumacs", "sumatra", "sumatran", "sumatrans", "sumatras", "sumer", "sumerian", "summa", "summand", "summands", "summaries", "summariness", "summarist", "summarists", "summary", "summation", "summations", "summer", "summers", "summersault", "summersaults", "summerset", "summersets", "summertime", "summertimes", "summerwood", "summing up", "summit", "summitry", "summits", "summoner", "summoners", "summoning", "summons", "summonses", "sumo", "sumos", "sump", "sumps", "sumpter", "sumpters", "sumptuosity", "sumptuousness", "sums", "sun", "sunbake", "sunbakes", "sunbather", "sunbathers", "sunbathing", "sunbelt", "sunberry", "sunblind", "sunblinds", "sunbow", "sunbows", "sunburn", "sunburns", "sunburst", "sunbursts", "sunbury on thames", "sundae", "sundaes", "sunday", "sundays", "sunder", "sunderance", "sunderances", "sunderland", "sunders", "sundial", "sundials", "sundown", "sundowns", "sundress", "sundresses", "sundries", "sundry", "sunfish", "sunfishes", "sunflower", "sunflowers", "sunglass", "sunglasses", "sunglow", "sunglows", "sunhat", "sunhats", "sunil", "sunk", "sunket", "sunkets", "sunks", "sunlessness", "sunlight", "sunn", "sunna", "sunni", "sunniness", "sunnis", "sunnite", "sunnites", "sunns", "sunray", "sunrays", "sunrise", "sunrises", "sunroom", "suns", "sunscreen", "sunscreens", "sunset", "sunsets", "sunshine", "sunshine roof", "sunshine roofs", "sunspot", "sunspots", "sunstar", "sunstars", "sunstone", "sunstones", "sunstroke", "sunsuit", "sunsuits", "suntan", "suntans", "suntrap", "suntraps", "suomi", "suovetaurilia", "sup", "super", "superabundance", "superabundances", "superaddition", "superadditions", "superaltar", "superaltars", "superannuation", "superannuations", "superbness", "superbrain", "superbug", "superbugs", "supercalender", "supercalenders", "supercargo", "supercargoes", "supercharger", "superchargers", "superciliousness", "superclass", "superclasses", "superconductivity", "superconductor", "superconductors", "supercriminal", "superdominant", "superdreadnought", "superelevation", "superelevations", "supereminence", "supererogation", "superexaltation", "superexcellence", "superfamilies", "superfamily", "superfecta", "superfectas", "superfecundation", "superfetation", "superfetations", "superficiality", "superficies", "superfluid", "superfluidity", "superfluities", "superfluity", "superflux", "superfusion", "superfusions", "supergiant", "supergiants", "supergun", "superheater", "superheaters", "superhero", "superheros", "superhet", "superheterodyne", "superhets", "superhighway", "superhumanity", "superhumeral", "superhumerals", "superimposition", "superincumbence", "superinduction", "superinductions", "superinfection", "superinfections", "superintendence", "superintendency", "superintendent", "superintendents", "superior", "superiorities", "superiority", "superiors", "superlative", "superlativeness", "superlatives", "superman", "supermarket", "supermarkets", "supernatant", "supernationalism", "supernatural", "supernaturalism", "supernaturalness", "supernaturals", "supernormality", "supernova", "supernovas", "supernumeraries", "supernumerary", "superorder", "superorders", "superordinate", "superordinates", "superordination", "superoxide", "superpatriot", "superpatriotism", "superphosphate", "superphosphates", "superphylum", "superposition", "superpower", "superpowers", "superpraise", "supers", "supersalesman", "supersaturation", "superscript", "superscription", "superscriptions", "superscripts", "superseder", "supersederes", "superseders", "supersedure", "supersedures", "supersensitiveness", "supersession", "supersessions", "supersonics", "superspecies", "superstar", "superstars", "superstate", "superstates", "superstition", "superstitions", "superstratum", "superstructure", "superstructures", "supersubtlety", "supersymmetry", "supertanker", "supertankers", "supertax", "supertaxes", "supertitle", "supertitles", "supertonic", "supertonics", "supervenience", "supervising", "supervision", "supervisions", "supervisor", "supervisors", "superwoman", "supes", "supination", "supinator", "supinators", "supine", "supineness", "suppedaneum", "supper", "suppers", "suppertime", "suppertimes", "supping", "supplantation", "supplantations", "supplanter", "supplanters", "supplanting", "supplement", "supplementaries", "supplementary", "supplementation", "supplementer", "supplementers", "supplements", "suppleness", "suppletion", "suppletions", "suppliance", "suppliances", "suppliant", "suppliants", "supplicant", "supplicants", "supplication", "supplications", "supplier", "suppliers", "supplies", "supply", "supplying", "support", "supportableness", "supporter", "supporters", "supporting", "supportings", "supports", "supposal", "supposals", "supposition", "suppositions", "suppositive", "suppositories", "suppository", "suppression", "suppressions", "suppressor", "suppressors", "suppuration", "suppurations", "suppurative", "suppuratives", "supranationalism", "supremacies", "supremacist", "supremacists", "supremacy", "suprematism", "supreme", "supremeness", "supremes", "supremo", "supremos", "sups", "suq", "suqs", "sura", "surabaya", "surah", "surahs", "suras", "surat", "surbase", "surbases", "surcease", "surceases", "surcharge", "surcharger", "surchargers", "surcharges", "surcingle", "surcingles", "surcoat", "surcoats", "surd", "surds", "sure footedness", "sureness", "sureties", "surety", "surf", "surface", "surfacer", "surfacers", "surfaces", "surfacing", "surfacings", "surfactant", "surfactants", "surfcasting", "surfeit", "surfeits", "surfer", "surfers", "surfie", "surfies", "surfing", "surfings", "surfperch", "surfs", "surge", "surgeon", "surgeoncies", "surgeoncy", "surgeons", "surgeries", "surgery", "surges", "suricate", "suricates", "surinam", "surjection", "surjections", "surliness", "surmise", "surmiser", "surmisers", "surmises", "surmounter", "surmounters", "surmullet", "surmullets", "surname", "surnames", "surpassing", "surpassingness", "surplice", "surplices", "surplus", "surplusage", "surplusages", "surpluses", "surprisal", "surprisals", "surprise", "surpriser", "surprisers", "surprises", "surprising", "surprisingness", "surprisings", "surra", "surreal", "surrealism", "surrealist", "surrealists", "surrebuttal", "surrebuttals", "surrebutter", "surrebutters", "surrejoinder", "surrejoinders", "surrender", "surrenderer", "surrenderers", "surrenders", "surrey", "surreys", "surrogate", "surrogates", "surrogateship", "surrogation", "surrogations", "surround", "surrounding", "surroundings", "surrounds", "surtax", "surtaxes", "surtitle", "surtitles", "surtout", "surtouts", "surveillance", "surveillances", "surveillant", "surveillants", "survey", "surveying", "surveyings", "surveyor", "surveyors", "surveyorship", "surveyorships", "surveys", "survivability", "survival", "survivals", "survivor", "survivors", "survivorship", "sus", "susan", "susanna", "susannah", "susceptance", "susceptances", "susceptibilities", "susceptibility", "susceptibleness", "sushi", "sushis", "susie", "suslik", "susliks", "suspect", "suspectedness", "suspects", "suspender", "suspenders", "suspense", "suspenses", "suspensibility", "suspension", "suspensions", "suspensoid", "suspensoids", "suspensor", "suspensories", "suspensors", "suspensory", "suspicion", "suspicions", "suspiciousness", "suspiration", "suspirations", "suss", "sussex", "sustainability", "sustainer", "sustainers", "sustainment", "sustainments", "sustenance", "sustenances", "sustentation", "sustentations", "sustention", "sustentions", "susu", "susurration", "susurrus", "susurruses", "susus", "sutherland", "sutler", "sutlers", "sutra", "sutras", "suttee", "suttees", "sutton", "sutton in ashfield", "suture", "sutures", "suturing", "suzerain", "suzerains", "suzerainties", "suzerainty", "suzy", "sverige", "swab", "swabber", "swabbers", "swabbing", "swabs", "swad", "swaddle", "swaddles", "swadeshi", "swads", "swag", "swage", "swages", "swagger", "swaggerer", "swaggerers", "swaggers", "swagman", "swags", "swagsman", "swahili", "swahilis", "swain", "swains", "swale", "swales", "swallet", "swallets", "swallow", "swallower", "swallowers", "swallows", "swami", "swamis", "swamp", "swamper", "swampers", "swampland", "swamplands", "swamps", "swan", "swan upping", "swanee", "swanherd", "swanherds", "swank", "swankiness", "swanks", "swanneries", "swannery", "swans", "swansea", "swanson", "swap", "swapper", "swappers", "swaps", "swaraj", "swarajism", "swarajist", "swarajists", "sward", "swards", "swarf", "swarfs", "swarm", "swarmer", "swarmers", "swarms", "swarth", "swarthiness", "swash", "swashbuckler", "swashbucklers", "swashbuckling", "swashes", "swastika", "swastikas", "swat", "swatch", "swatches", "swath", "swathe", "swathes", "swathing", "swaths", "swats", "swatter", "swatters", "sway", "sway back", "sway backs", "swayer", "swayers", "sways", "swazi", "swaziland", "swazis", "swear", "swearer", "swearers", "swearing", "swearings", "swears", "sweat", "sweater", "sweaters", "sweatiness", "sweating", "sweatings", "sweats", "sweatshirt", "sweatshirts", "swede", "sweden", "swedenborg", "swedenborgian", "swedenborgianism", "swedenborgians", "swedes", "swedish", "sweelinck", "sweeny", "sweep", "sweepback", "sweepbacks", "sweeper", "sweepers", "sweeping", "sweepingness", "sweepings", "sweeps", "sweepstake", "sweepstakes", "sweet", "sweet talk", "sweet talks", "sweetbread", "sweetbreads", "sweetener", "sweeteners", "sweetening", "sweetenings", "sweetheart", "sweethearts", "sweetie", "sweeties", "sweetiewife", "sweeting", "sweetings", "sweetmeat", "sweetmeats", "sweetness", "sweetpea", "sweetpeas", "sweets", "swell", "swelling", "swellings", "swells", "swelter", "swelters", "swerve", "swerver", "swervers", "swerves", "swerving", "swervings", "sweven", "swies", "swift", "swifter", "swifters", "swiftie", "swifties", "swiftlet", "swiftlets", "swiftness", "swifts", "swig", "swigger", "swiggers", "swigs", "swill", "swiller", "swillers", "swilling", "swillings", "swills", "swim", "swimmer", "swimmeret", "swimmerets", "swimmers", "swimming", "swimmingness", "swimmings", "swims", "swimsuit", "swimsuits", "swinburne", "swindle", "swindler", "swindlers", "swindles", "swindon", "swine", "swineherd", "swineherds", "swing", "swing wing", "swing wings", "swingboat", "swingboats", "swinger", "swingers", "swinges", "swinging", "swingings", "swingle", "swingles", "swingletree", "swingletrees", "swingometer", "swingometers", "swings", "swingtree", "swingtrees", "swinishness", "swink", "swinks", "swipe", "swipes", "swipple", "swipples", "swirl", "swirls", "swish", "swishes", "swiss", "swisses", "switch", "switch hitter", "switch hitters", "switchback", "switchbacks", "switchblade", "switchblades", "switchboard", "switchboards", "switcher", "switcheroo", "switcheroos", "switchers", "switches", "switching", "switchings", "switchman", "swither", "swithers", "swithin", "switzer", "switzerland", "switzers", "swivel", "swivels", "swivet", "swivets", "swiz", "swizzle", "swizzles", "swob", "swobs", "swoon", "swoons", "swoop", "swoops", "swoosh", "swooshes", "swop", "swops", "sword", "sword bearer", "sword cut", "sword cuts", "swordcraft", "swordfish", "swordfishes", "swordman", "swordplay", "swordplayer", "swordplayers", "swords", "swordsman", "swordsmanship", "swot", "swots", "swotter", "swotters", "swound", "swounds", "swy", "sybarite", "sybarites", "sybaritism", "sycamine", "sycamines", "sycamore", "sycamores", "syce", "sycee", "syconium", "syconiums", "sycophancy", "sycophant", "sycophants", "sycosis", "sydney", "sydneysider", "sydneysiders", "syenite", "syenites", "syke", "sykes", "syllabaries", "syllabary", "syllabi", "syllabic", "syllabication", "syllabications", "syllabicities", "syllabicity", "syllabics", "syllabification", "syllabism", "syllabisms", "syllable", "syllables", "syllabub", "syllabubs", "syllabus", "syllabuses", "syllepsis", "syllogisation", "syllogisations", "syllogiser", "syllogisers", "syllogism", "syllogisms", "syllogistic", "sylph", "sylphid", "sylphides", "sylphids", "sylphs", "sylva", "sylvan", "sylvanite", "sylvas", "sylvester", "sylviculture", "sylvine", "sylvite", "symbiont", "symbionts", "symbiosis", "symbol", "symbolicalness", "symbolics", "symbolisation", "symbolisations", "symbolism", "symbolisms", "symbolist", "symbolists", "symbolization", "symbolizations", "symbolizing", "symbology", "symbololatry", "symbols", "symmetalism", "symmetallism", "symmetricalness", "symmetries", "symmetrisation", "symmetrisations", "symmetrization", "symmetrizations", "symmetry", "sympathectomies", "sympathectomy", "sympathin", "sympathizer", "sympathizers", "sympatholytic", "sympatholytics", "sympathomimetic", "sympathy", "symphile", "symphiles", "symphonies", "symphonist", "symphonists", "symphony", "symphysis", "symploce", "symploces", "sympodium", "symposiac", "symposiarch", "symposiarchs", "symposium", "symposiums", "symptom", "symptomatology", "symptoms", "symptosis", "synaeresis", "synaesthesia", "synaesthesias", "synagogue", "synagogues", "synapse", "synapses", "synapsis", "synapte", "synaptes", "synarchies", "synarchy", "synarthrosis", "synaxarion", "synaxarions", "synaxis", "sync", "syncarp", "syncarps", "syncarpy", "synchro", "synchrocyclotron", "synchroflash", "synchroflashes", "synchromesh", "synchronicity", "synchronies", "synchronisation", "synchronisations", "synchroniser", "synchronisers", "synchronising", "synchronism", "synchronization", "synchronizations", "synchronizer", "synchronizers", "synchronizing", "synchronousness", "synchrony", "synchroscope", "synchrotron", "synchrotrons", "syncline", "synclines", "synclinorium", "syncom", "syncopation", "syncopations", "syncopator", "syncopators", "syncope", "syncopes", "syncretism", "syncretisms", "syncs", "syncytium", "syncytiums", "synd", "syndactyl", "syndactylism", "syndactyly", "synderesis", "syndesis", "syndesmosis", "syndet", "syndets", "syndic", "syndical", "syndicalism", "syndicalist", "syndicalists", "syndicate", "syndicates", "syndication", "syndications", "syndics", "syndrome", "syndromes", "synds", "synecdoche", "synechia", "synecology", "synectics", "syneresis", "synergism", "synergist", "synergists", "synergy", "synesis", "syngamy", "synge", "syngenesis", "synizesis", "synkaryon", "synod", "synods", "synoekete", "synoeketes", "synonym", "synonymies", "synonymist", "synonymists", "synonymities", "synonymity", "synonymousness", "synonyms", "synonymy", "synopsis", "synopsises", "synoptic", "synoptist", "synostosis", "synovia", "synovitis", "syntagma", "syntax", "syntaxes", "synteresis", "synthesis", "synthesises", "synthesist", "synthesists", "synthesizer", "synthesizers", "synthetic", "synthetics", "synthetiser", "synthetisers", "synthetizer", "synthetizers", "syphilis", "syphilisation", "syphilisations", "syphilise", "syphilises", "syphilitic", "syphilitics", "syphilization", "syphilizations", "syphilologist", "syphilologists", "syphilology", "syphiloma", "syphilomas", "syphon", "syphons", "syracuse", "syria", "syriac", "syrian", "syrians", "syringa", "syringas", "syringe", "syringes", "syringomyelia", "syrinx", "syrinxes", "syrphid", "syrphids", "syrup", "syrups", "syssarcosis", "system", "systematics", "systematisation", "systematiser", "systematisers", "systematism", "systematist", "systematists", "systematization", "systematizer", "systematizers", "systematology", "systemisation", "systemisations", "systemization", "systemizations", "systems", "systole", "systoles", "syzygies", "syzygy", "szechwan", "szell", "szymanowski", "t bar", "t group", "t groups", "t junction", "t shirt", "t shirts", "t square", "t squares", "taal", "tab", "tabanid", "tabanids", "tabard", "tabards", "tabaret", "tabarets", "tabasco", "tabbies", "tabbinet", "tabbouleh", "tabboulehs", "tabby", "tabernacle", "tabernacles", "tabes", "tabescence", "tabescences", "tabi", "tabinet", "tabitha", "tabla", "tablas", "tablature", "tablatures", "table", "table turning", "tableau", "tableful", "tablefuls", "tableland", "tables", "tablespoonful", "tablespoonfuls", "tablet", "tablets", "tabling", "tablings", "tabloid", "tabloids", "taboo", "taboos", "tabor", "taborer", "taborers", "taboret", "taborets", "taborin", "taborins", "taborite", "tabors", "tabour", "tabouret", "tabourets", "tabours", "tabret", "tabrets", "tabriz", "tabs", "tabu", "tabularisation", "tabularisations", "tabularization", "tabularizations", "tabulation", "tabulations", "tabulator", "tabulators", "tabus", "tacamahac", "tacamahacs", "tace", "taces", "tach", "tache", "tacheometer", "tacheometers", "tacheometry", "taches", "tachisme", "tachistoscope", "tachistoscopes", "tachogram", "tachograms", "tachograph", "tachographs", "tachometer", "tachometers", "tachycardia", "tachygraph", "tachygrapher", "tachygraphers", "tachygraphist", "tachygraphists", "tachygraphs", "tachygraphy", "tachylite", "tachylyte", "tachymeter", "tachymeters", "tachymetry", "tachyon", "tachyons", "tachypnea", "tacitness", "taciturnity", "tacitus", "tack", "tacker", "tackers", "tacket", "tackets", "tackiness", "tacking", "tackings", "tackle", "tackler", "tacklers", "tackles", "tackling", "tacklings", "tacks", "tacmahack", "taco", "tacoma", "taconite", "tacos", "tact", "tactfulness", "tactic", "tactician", "tacticians", "tactics", "tactility", "taction", "tactlessness", "tacts", "tad", "tadjik", "tadjiks", "tadpole", "tadpoles", "tads", "tadzhik", "tadzhiks", "taegu", "tael", "taels", "taenia", "taeniacide", "taeniacides", "taeniafuge", "taenias", "taeniasis", "taffeta", "taffetas", "taffies", "taffrail", "taffrails", "taffy", "tafia", "tafias", "taft", "tag", "tagalog", "tagalogs", "tagliarini", "tagliatelle", "tagmeme", "tagore", "tagrag", "tagrags", "tags", "taguan", "taguans", "tagus", "tahina", "tahinas", "tahiti", "tahitian", "tahitians", "tahoe", "tahr", "tahrs", "tahsil", "tahsildar", "tahsildars", "tahsils", "tai", "taichung", "taig", "taiga", "taigas", "taigs", "tail", "tailback", "tailbacks", "tailing", "tailings", "taille", "tailles", "tailor", "tailor made", "tailored", "tailoring", "tailorings", "tailors", "tailpiece", "tailpieces", "tailplane", "tailplanes", "tails", "tailskid", "tailskids", "tailstock", "tailwind", "tailwinds", "taino", "tainos", "taint", "taints", "taipan", "taipans", "taipei", "taira", "tairas", "tais", "taiwan", "taiyuan", "taj", "tajes", "tajik", "tajiks", "taka", "takahe", "takahes", "takas", "take", "take in", "take up", "takeaway", "takeaways", "taker", "takers", "takes", "takin", "taking", "takings", "takins", "tala", "talapoin", "talapoins", "talas", "talc", "talcs", "talcum", "talcums", "tale", "talent", "talented", "talents", "taler", "talers", "tales", "talesman", "talion", "talions", "taliped", "talipeds", "talipes", "talipot", "talipots", "talisman", "talismans", "talk", "talkability", "talkathon", "talkativeness", "talker", "talkers", "talkfest", "talkfests", "talkie", "talkies", "talking", "talking to", "talkings", "talks", "tallage", "tallages", "tallahassee", "tallboy", "tallboys", "tallies", "tallinn", "tallis", "tallith", "talliths", "tallness", "tallow", "tallows", "tally", "tally ho", "tally hos", "tallyman", "tallyshop", "tallyshops", "talmud", "talmudist", "talon", "talons", "taluk", "taluks", "talus", "taluses", "talweg", "talwegs", "tam", "tam tam", "tam tams", "tamable", "tamale", "tamales", "tamandu", "tamandua", "tamanduas", "tamandus", "tamanoir", "tamanoirs", "tamar", "tamara", "tamarack", "tamaracks", "tamarao", "tamaraos", "tamaras", "tamarau", "tamaraus", "tamarillo", "tamarillos", "tamarin", "tamarind", "tamarinds", "tamarins", "tamarisk", "tamarisks", "tamarix", "tamasha", "tambac", "tambour", "tamboura", "tambouras", "tambourin", "tambourine", "tambourines", "tambourins", "tambours", "tamburlaine", "tameability", "tameableness", "tamelessness", "tameness", "tamer", "tamerlane", "tamers", "tames", "tamil", "tamils", "tamis", "tamises", "tammany", "tammanyism", "tammanyite", "tammanyites", "tammie", "tammies", "tammuz", "tammy", "tamp", "tampa", "tamper", "tamperer", "tamperers", "tampering", "tamperings", "tampers", "tampico", "tampion", "tampions", "tampon", "tamponade", "tamponades", "tampons", "tamps", "tams", "tan", "tana", "tanach", "tanager", "tanagers", "tanagra", "tanas", "tancred", "tandem", "tandems", "tang", "tanga", "tanganyika", "tangas", "tangelo", "tangelos", "tangencies", "tangency", "tangent", "tangents", "tangerine", "tangerines", "tangibility", "tangible", "tangibleness", "tangibles", "tangier", "tangle", "tanglement", "tanglements", "tangler", "tanglers", "tangles", "tango", "tangos", "tangram", "tangrams", "tangs", "tangshan", "tanh", "tanist", "tanistry", "tanists", "tank", "tanka", "tankage", "tankages", "tankard", "tankards", "tankas", "tanker", "tankers", "tankful", "tankfuls", "tanks", "tanna", "tannage", "tannages", "tannas", "tannate", "tannates", "tanner", "tanneries", "tanners", "tannery", "tannin", "tanning", "tannings", "tans", "tansies", "tansy", "tantalate", "tantalates", "tantalisation", "tantalisations", "tantaliser", "tantalisers", "tantalite", "tantalization", "tantalizations", "tantalizer", "tantalizers", "tantalum", "tantalus", "tantaluses", "tantara", "tantaras", "tantivies", "tantivy", "tantra", "tantrism", "tantrum", "tantrums", "tanya", "tanzania", "tao", "taoism", "taoist", "taoists", "tap", "tapa", "tapaculo", "tapaculos", "tapadera", "tapaderas", "tapas", "tape", "tapeline", "tapelines", "tapenade", "tapenades", "taper", "taperer", "taperers", "tapering", "taperings", "tapers", "tapes", "tapestries", "tapestry", "tapetum", "tapeworm", "tapeworms", "taphephobia", "taping", "tapioca", "tapiocas", "tapir", "tapirs", "tapis", "tappa", "tappas", "tapper", "tappers", "tappet", "tappets", "tapping", "tappings", "tappit hen", "taproom", "taprooms", "taproot", "taproots", "taps", "tapster", "tapsters", "tar", "tara", "taradiddle", "taradiddles", "taramasalata", "taramasalatas", "tarantass", "tarantasses", "tarantella", "tarantellas", "tarantism", "taranto", "tarantula", "tarantulas", "taras", "tarboosh", "tarbooshes", "tarbrush", "tarbrushes", "tardigrade", "tardigrades", "tardiness", "tare", "tares", "targe", "targes", "target", "targeteer", "targeteers", "targets", "targum", "targumist", "tariff", "tariffs", "tarlatan", "tarmac", "tarmacadam", "tarmacs", "tarn", "tarn et garonne", "tarnation", "tarnish", "tarnishes", "tarns", "taro", "tarok", "taroks", "taros", "tarot", "tarots", "tarp", "tarpan", "tarpans", "tarpaulin", "tarpaulins", "tarpeia", "tarpon", "tarpons", "tarps", "tarquin", "tarradiddle", "tarradiddles", "tarragon", "tarragona", "tarred", "tarriance", "tarriances", "tarrier", "tarriers", "tarring", "tarrings", "tarrying", "tars", "tarsal", "tarsals", "tarsia", "tarsier", "tarsiers", "tarsometatarsus", "tarsus", "tart", "tartan", "tartanes", "tartans", "tartar", "tartares", "tartarization", "tartars", "tartarus", "tartary", "tartlet", "tartlets", "tartness", "tartrate", "tartrates", "tartrazine", "tarts", "tartufe", "tartuffe", "tartuffes", "tarweed", "tarweeds", "tarzan", "tashkent", "tasimeter", "tasimeters", "task", "taskmaster", "taskmasters", "taskmistress", "taskmistresses", "tasks", "taskwork", "tasman", "tasmania", "tass", "tasse", "tassel", "tassels", "tasses", "tasset", "tassets", "tassie", "tassies", "tasso", "taste", "tastefulness", "tastelessness", "taster", "tasters", "tastes", "tastiness", "tasting", "tastings", "tat", "tatami", "tatamis", "tatar", "tatars", "tater", "taters", "tates", "tati", "tatou", "tatouay", "tatouays", "tatous", "tats", "tatter", "tatterdemalion", "tatterdemalions", "tattered", "tatters", "tattiness", "tatting", "tattings", "tattle", "tattler", "tattlers", "tattles", "tattoo", "tattooer", "tattooers", "tattooist", "tattooists", "tattoos", "tatu", "tatum", "tatus", "tau", "taunt", "taunter", "taunters", "taunting", "tauntings", "taunton", "taunts", "taupe", "taupes", "taurine", "taurobolium", "tauroboliums", "tauromachies", "tauromachy", "taurus", "taus", "tautness", "tautochrone", "tautochrones", "tautog", "tautogs", "tautologies", "tautologism", "tautologisms", "tautologist", "tautologists", "tautology", "tautomer", "tautomerism", "tautomers", "tautonym", "tautonyms", "tavern", "taverner", "taverners", "taverns", "taw", "tawdriness", "tawer", "tawney", "tawniness", "tawny", "taws", "tawse", "tawses", "tax", "taxability", "taxable", "taxation", "taxations", "taxes", "taxi", "taxicab", "taxicabs", "taxidermist", "taxidermists", "taxidermy", "taxies", "taximan", "taximeter", "taximeters", "taxis", "taxistand", "taxiway", "taxiways", "taxman", "taxon", "taxonomer", "taxonomers", "taxonomies", "taxonomist", "taxonomists", "taxonomy", "taxpaying", "tay", "taylor", "tayra", "tayras", "tazza", "tazzas", "tbilisi", "tchaikovsky", "te hee", "te hees", "tea", "tea leaf", "tea strainer", "tea strainers", "teaberries", "teaberry", "teach", "teach in", "teach ins", "teacher", "teachers", "teachership", "teacherships", "teaches", "teaching", "teachings", "teacup", "teacupful", "teacupfuls", "teacups", "teague", "teak", "teaks", "teal", "teals", "team", "team mate", "team mates", "teamer", "teamers", "teams", "teamster", "teamsters", "teapot", "teapoy", "teapoys", "tear", "tear jerker", "tear jerkers", "tearaway", "tearaways", "teardrop", "tearer", "tearers", "tearfulness", "tearing", "tears", "teas", "tease", "teasel", "teaseler", "teaselers", "teaseller", "teasellers", "teasels", "teaser", "teasers", "teases", "teasing", "teasings", "teaspoon", "teaspoonful", "teaspoonfuls", "teaspoons", "teat", "teats", "teazel", "teazels", "teazle", "teazles", "tebet", "tech", "techiness", "technetium", "technic", "technicalities", "technicality", "technicalness", "technician", "technicians", "technicolor", "technics", "technique", "techniques", "technobabble", "technocracies", "technocracy", "technocrat", "technocrats", "technography", "technologies", "technologist", "technologists", "technology", "technostructure", "techs", "tectonics", "tectrix", "ted", "tedder", "tedders", "teddies", "teddy", "tediousness", "tedium", "tediums", "teds", "tee", "teel", "teels", "teemer", "teemers", "teen", "teenage", "teenager", "teenagers", "teens", "teepee", "teepees", "tees", "teesside", "teeter", "teeters", "teeth", "teethes", "teething", "teethings", "teetotalism", "teetotaller", "teetotallers", "teetotum", "teetotums", "tef", "teff", "teffs", "teflon", "tefs", "teg", "tegmen", "tegs", "tegu", "tegucigalpa", "tegula", "tegument", "teguments", "tegus", "teheran", "teil", "teils", "teind", "teinds", "teknonymy", "tektite", "tektites", "tela", "telaesthesia", "telamon", "telamones", "telangiectasis", "telautograph", "telautography", "telecast", "telecasting", "telecasts", "telecommunication", "telecommunications", "teleconference", "teleconferences", "teleconferencing", "teledu", "teledus", "telefilm", "telefilms", "telega", "telegas", "telegnosis", "telegonus", "telegony", "telegram", "telegrams", "telegraph", "telegrapher", "telegraphers", "telegraphese", "telegraphist", "telegraphists", "telegraphs", "telegraphy", "telegu", "telegus", "telekinesis", "telemachus", "telemann", "telemark", "telemarketing", "telemarks", "telemeter", "telemeters", "telemetry", "telencephalon", "teleologist", "teleologists", "teleology", "teleost", "teleostean", "teleosteans", "teleosts", "telepathist", "telepathists", "telepathy", "telephone", "telephoner", "telephoners", "telephones", "telephonist", "telephonists", "telephony", "telephoto", "telephotograph", "telephotographs", "telephotography", "teleplay", "teleplays", "teleport", "teleports", "teleprinter", "teleprinters", "teleprocessing", "teleprompter", "teleprompters", "telescope", "telescopes", "telescopist", "telescopists", "telescopium", "telescopy", "teleselling", "telesis", "telespectroscope", "telestereoscope", "telesthesia", "telestich", "telestichs", "telethon", "telethons", "teletype", "teletypes", "teletypesetter", "teletypesetters", "teletypewriter", "teletypewriters", "teleutospore", "teleutospores", "televangelist", "televangelists", "television", "televisions", "televisor", "televisors", "telewriter", "telewriters", "telex", "telexes", "telfer", "telferage", "telfers", "telford", "teliospore", "telium", "tell", "teller", "tellers", "tellership", "tellerships", "tellies", "tellin", "telling", "tellings", "tellins", "tells", "telltale", "telltales", "tellurate", "tellurates", "tellurian", "tellurians", "telluride", "tellurides", "tellurion", "tellurions", "tellurite", "tellurites", "tellurium", "tellurometer", "tellurometers", "tellus", "telly", "telophase", "telpher", "telpherage", "telpherages", "telphers", "telson", "telsons", "telstar", "telugu", "telugus", "temblor", "temblores", "temblors", "temerity", "temp", "tempe", "temper", "tempera", "temperament", "temperaments", "temperance", "temperateness", "temperature", "temperatures", "tempering", "temperings", "tempers", "tempest", "tempests", "tempestuousness", "templar", "template", "templates", "temple", "temples", "templet", "templets", "tempo", "temporalities", "temporality", "temporalness", "temporalties", "temporalty", "temporaries", "temporariness", "temporary", "temporisation", "temporiser", "temporisers", "temporization", "temporizer", "temporizers", "tempos", "temps", "temptation", "temptations", "tempter", "tempters", "temptingness", "temptress", "temptresses", "tempura", "tempuras", "ten", "tenability", "tenableness", "tenace", "tenaces", "tenaciousness", "tenacities", "tenacity", "tenaculum", "tenaille", "tenailles", "tenancies", "tenancy", "tenant", "tenant in chief", "tenantries", "tenantry", "tenants", "tench", "tenches", "tendance", "tendencies", "tendency", "tendentiousness", "tender", "tenderer", "tenderers", "tenderfoot", "tenderfoots", "tenderiser", "tenderisers", "tenderizer", "tenderizers", "tenderness", "tenders", "tending", "tendinitis", "tendon", "tendonitis", "tendons", "tendril", "tendrils", "tenebrism", "tenedos", "tenement", "tenements", "tenerife", "tenes", "tenesmus", "tenet", "tenets", "tenia", "tenias", "teniasis", "tennantite", "tenner", "tenners", "tennessee", "tenniel", "tennis", "tenno", "tennos", "tennyson", "tenon", "tenoner", "tenoners", "tenons", "tenor", "tenorite", "tenoroon", "tenoroons", "tenorrhaphy", "tenors", "tenosynovitis", "tenotomies", "tenotomy", "tenpence", "tenpences", "tenpin", "tenpins", "tenrec", "tenrecs", "tens", "tense", "tenseness", "tenses", "tensibility", "tensility", "tensimeter", "tensiometer", "tension", "tensions", "tensity", "tenson", "tensons", "tensor", "tensors", "tent", "tent flies", "tent fly", "tentacle", "tentacles", "tentage", "tentages", "tentation", "tentations", "tenter", "tenters", "tenth", "tenths", "tenting", "tentings", "tentorium", "tentoriums", "tents", "tenuis", "tenuity", "tenuousness", "tenure", "tenures", "teocalli", "teocallis", "teosinte", "tepal", "tepee", "tepees", "tepefaction", "tephra", "tephrite", "tephroite", "tepidity", "tepidness", "tequila", "tequilas", "terabyte", "terabytes", "teraph", "teratism", "teratisms", "teratogen", "teratogenesis", "teratogens", "teratogeny", "teratology", "teratoma", "teratomas", "terbium", "terce", "tercel", "tercelet", "tercelets", "tercels", "tercentenaries", "tercentenary", "tercentennial", "tercentennials", "terces", "tercet", "tercets", "terebene", "terebenes", "terebinth", "terebinths", "teredo", "teredos", "terence", "teresa", "tereus", "tergiversation", "tergiversations", "tergiversator", "tergiversators", "tergum", "teriyaki", "teriyakis", "term", "termagant", "termagants", "termer", "termers", "terminability", "terminableness", "terminal", "terminals", "termination", "terminations", "terminator", "terminators", "terminism", "terminist", "terminists", "terminologies", "terminology", "terminus", "terminuses", "termitarium", "termitariums", "termite", "termites", "termor", "termors", "terms", "tern", "ternary", "terne", "ternes", "ternion", "ternions", "terns", "terotechnology", "terpene", "terpenes", "terpineol", "terpsichore", "terpsichorean", "terra", "terrace", "terraces", "terracing", "terracings", "terrain", "terrains", "terramara", "terramycin", "terrance", "terrane", "terrapin", "terrapins", "terrarium", "terrariums", "terras", "terrazzo", "terrazzos", "terrene", "terrenes", "terreplein", "terrepleins", "terrestrial", "terrestrials", "terret", "terrets", "terribleness", "terricolous", "terrier", "terriers", "terries", "terrifier", "terrifiers", "terrine", "terrines", "territorial", "territorialisation", "territorialism", "territorialist", "territorialists", "territoriality", "territorialization", "territorials", "territories", "territory", "terror", "terrorisation", "terroriser", "terrorisers", "terrorism", "terrorist", "terrorists", "terrorization", "terrorizer", "terrorizers", "terrors", "terry", "terseness", "tertial", "tertials", "tertian", "tertians", "tertiary", "terylene", "terzetto", "terzettos", "teschenite", "tesla", "teslas", "tess", "tessa", "tessellation", "tessellations", "tessera", "tesseract", "tessitura", "tessituras", "test", "test bed", "test beds", "testa", "testament", "testaments", "testas", "testate", "testator", "testators", "testatrix", "testee", "testees", "tester", "testers", "testes", "testicle", "testicles", "testification", "testifications", "testifier", "testifiers", "testimonial", "testimonials", "testimonies", "testimony", "testiness", "testing", "testings", "testis", "teston", "testons", "testosterone", "tests", "testudines", "testudo", "testudos", "tetanic", "tetanisation", "tetanisations", "tetanization", "tetanizations", "tetanus", "tetany", "tetchiness", "tether", "tethers", "tethys", "tetra", "tetrabasicity", "tetrabranchiate", "tetrachloride", "tetrachlorides", "tetrachloroethylene", "tetrachloromethane", "tetrachord", "tetrachords", "tetracycline", "tetrad", "tetrads", "tetradymite", "tetragon", "tetragons", "tetragram", "tetragrammaton", "tetragrammatons", "tetragrams", "tetrahedrite", "tetrahedron", "tetrahedrons", "tetralogies", "tetralogy", "tetramerism", "tetrameter", "tetrameters", "tetraplegia", "tetraploid", "tetraploidy", "tetrapod", "tetrapodies", "tetrapods", "tetrapody", "tetrarch", "tetrarchate", "tetrarchates", "tetrarchs", "tetras", "tetrasporangium", "tetraspore", "tetraspores", "tetrastich", "tetrastichs", "tetrasyllable", "tetrasyllables", "tetrode", "tetrodes", "tetroxide", "tetroxides", "tetryl", "tetter", "tetters", "teucrian", "teuton", "teutonic", "teutonisation", "teutonism", "teutonist", "teutonization", "teutons", "tevet", "tew", "tewkesbury", "tews", "texas", "texases", "text", "textbook", "textbooks", "textile", "textiles", "texts", "textualism", "textualist", "textualists", "textuaries", "textuary", "texture", "textures", "thack", "thackeray", "thacks", "thaddeus", "thai", "thailand", "thais", "thalamencephalon", "thalamus", "thalassaemia", "thalassemia", "thalassocracies", "thalassocracy", "thalassographer", "thalassography", "thaler", "thalers", "thales", "thalia", "thalictrum", "thalictrums", "thalidomide", "thallium", "thallophyte", "thallophytes", "thallus", "thalluses", "thalweg", "thalwegs", "thames", "thammuz", "thana", "thanas", "thanatophobia", "thanatopsis", "thanatos", "thane", "thanes", "thaneship", "thaneships", "thanet", "thanker", "thankers", "thankfulness", "thanking", "thanklessness", "thanks", "thanksgiver", "thanksgivers", "thanksgiving", "thanksgivings", "thar", "thars", "thatch", "thatcher", "thatchers", "thatches", "thatching", "thatchings", "thaumatolatry", "thaumatology", "thaumatrope", "thaumatropes", "thaumaturge", "thaumaturges", "thaumaturgy", "thaw", "thawing", "thawings", "thaws", "thea", "theanthropism", "theanthropist", "theanthropists", "thearchies", "thearchy", "theater", "theaters", "theatine", "theatre", "theatre in the round", "theatres", "theatrical", "theatricality", "theatricalness", "theatricals", "theatrics", "thebaid", "thebaine", "theban", "thebans", "thebes", "theca", "thecla", "thecodont", "thecodonts", "theft", "thefts", "thegn", "thegns", "theine", "theism", "theist", "theists", "thelma", "thema", "thematic", "theme", "themes", "themis", "themistocles", "then", "thenar", "thenars", "thens", "theo", "theobald", "theobromine", "theocracies", "theocracy", "theocrasies", "theocrasy", "theocritus", "theodicies", "theodicy", "theodolite", "theodolites", "theodora", "theodore", "theodoric", "theogonist", "theogonists", "theogony", "theologian", "theologians", "theologies", "theologiser", "theologisers", "theologist", "theologists", "theologizer", "theologizers", "theologue", "theologues", "theology", "theomachies", "theomachy", "theomancy", "theomania", "theomaniac", "theomaniacs", "theomanias", "theomorphism", "theonomy", "theopathies", "theopathy", "theophagy", "theophany", "theophilus", "theophobia", "theophrastus", "theophylline", "theorbist", "theorbists", "theorbo", "theorbos", "theorem", "theorems", "theoretician", "theoreticians", "theories", "theoriser", "theorisers", "theorist", "theorists", "theory", "theosophism", "theosophist", "theosophists", "theosophy", "thera", "therapeutics", "therapies", "therapist", "therapists", "therapsid", "therapsids", "therapy", "theravada", "therblig", "therbligs", "there", "thereness", "theres", "theresa", "therian", "therians", "therianthropism", "theriomorph", "theriomorphs", "therm", "thermal", "thermals", "thermidor", "thermidorian", "thermidorians", "thermion", "thermionics", "thermions", "thermistor", "thermistors", "thermit", "thermite", "thermochemist", "thermochemistry", "thermochemists", "thermocline", "thermoclines", "thermodynamics", "thermogenesis", "thermograph", "thermographs", "thermography", "thermoluminescence", "thermolysis", "thermometer", "thermometers", "thermometrograph", "thermometry", "thermophile", "thermopile", "thermopiles", "thermoplastic", "thermoplasticity", "thermopylae", "thermos", "thermoscope", "thermoscopes", "thermoses", "thermosiphon", "thermosphere", "thermostat", "thermostats", "thermotaxis", "thermotherapy", "thermotropism", "therms", "theropod", "theropods", "thersites", "thesaurus", "thesauruses", "theseus", "thesis", "thesmophoria", "thespian", "thespians", "thespis", "thessalonian", "thessalonians", "thessaly", "theta", "thetas", "thetis", "theurgist", "theurgists", "theurgy", "thew", "thewes", "thews", "they d", "they ll", "they re", "they ve", "thiamin", "thiamine", "thiasus", "thiasuses", "thiazine", "thick", "thick knee", "thick wittedness", "thickener", "thickeners", "thickening", "thickenings", "thicket", "thickets", "thickhead", "thickheads", "thickness", "thicknesses", "thicks", "thickset", "thief", "thievery", "thieving", "thievings", "thievishness", "thigger", "thiggers", "thigh", "thighs", "thigmotaxis", "thigmotropism", "thill", "thills", "thimble", "thimbleful", "thimblefuls", "thimblerig", "thimblerigger", "thimbleriggers", "thimblerigs", "thimbles", "thimbleweed", "thimerosal", "thin skinnedness", "thing", "thing in itself", "thingamabob", "thingamabobs", "thingamajig", "thingamajigs", "things", "thingumabob", "thingumabobs", "thingumajig", "thingumajigs", "thingumbob", "thingumbobs", "thingummies", "thingummy", "think", "think tank", "think tanks", "thinker", "thinkers", "thinking", "thinkings", "thinks", "thinner", "thinners", "thinness", "thinning", "thinnings", "thioalcohol", "thiocarbamide", "thiocyanate", "thiocyanates", "thiol", "thiols", "thiopental", "thiopentone", "thiophen", "thiophene", "thiosulphate", "thiouracil", "thiourea", "third", "thirds", "thirdstream", "thirlage", "thirlages", "thirlmere", "thirst", "thirster", "thirsters", "thirsts", "thirteen", "thirteens", "thirteenth", "thirteenths", "thirties", "thirtieth", "thirtieths", "thirty", "thirty twomo", "thirty twomos", "thisbe", "thistle", "thistles", "tho", "thole", "tholes", "tholos", "tholus", "thomas", "thomasina", "thomism", "thomist", "thomists", "thompson", "thomson", "thong", "thongs", "thor", "thoracoplasty", "thoracostomy", "thoracotomy", "thorax", "thoraxes", "thorburn", "thoreau", "thoria", "thorite", "thorium", "thorn", "thornback", "thornbacks", "thornbill", "thorndike", "thorns", "thoron", "thoroughbred", "thoroughbreds", "thoroughfare", "thoroughfares", "thoroughgoingness", "thoroughness", "thoroughpin", "thorp", "thorpes", "thorps", "thoth", "thou", "thought", "thought reader", "thought readers", "thoughtfulness", "thoughtlessness", "thoughts", "thous", "thousand", "thousands", "thousandth", "thousandths", "thrace", "thracian", "thracians", "thraldom", "thrall", "thralldom", "thralls", "thrash", "thrasher", "thrashers", "thrashes", "thrashing", "thrashings", "thrave", "thraves", "thread", "threader", "threaders", "threadfin", "threadiness", "threads", "threat", "threatener", "threateners", "threats", "three", "three d", "three decker", "three master", "three piece", "three quarter", "three quarters", "three wheeler", "three wheelers", "threepence", "threepences", "threes", "threescore", "threescores", "threesome", "threesomes", "thremmatology", "threnode", "threnodes", "threnodies", "threnodist", "threnodists", "threnody", "threonine", "thresh", "thresher", "threshers", "threshes", "threshing", "threshings", "threshold", "thresholds", "thrift", "thriftiness", "thriftlessness", "thrifts", "thrill", "thriller", "thrillers", "thrills", "thrips", "thripses", "thriver", "thrivers", "throat", "throatiness", "throats", "throatwort", "throatworts", "throb", "throbbing", "throbbings", "throbs", "throe", "throes", "thrombin", "thrombocyte", "thrombocytes", "thromboembolism", "thrombokinase", "thrombokinases", "thrombolytic", "thrombophlebitis", "thromboplastin", "thrombosis", "thrombus", "throne", "thrones", "throng", "throngs", "throstle", "throstles", "throttle", "throttler", "throttlers", "throttles", "throttling", "throttlings", "throughway", "throughways", "throw", "throw in", "throw ins", "throwback", "throwbacks", "thrower", "throwers", "throws", "throwster", "throwsters", "thrum", "thrummer", "thrummers", "thrummy", "thrums", "thrush", "thrushes", "thrust", "thruster", "thrusters", "thrusting", "thrustings", "thrusts", "thruway", "thruways", "thucydides", "thud", "thuds", "thug", "thuggee", "thuggeries", "thuggery", "thugs", "thuja", "thujas", "thule", "thulia", "thulium", "thumb", "thumbnail", "thumbnails", "thumbprint", "thumbprints", "thumbs", "thumbscrew", "thumbscrews", "thummim", "thump", "thumping", "thumps", "thunbergia", "thunder", "thunderbird", "thunderbirds", "thunderbolt", "thunderbolts", "thunderbox", "thunderboxes", "thunderer", "thunderers", "thunderhead", "thunderheads", "thunders", "thunderstorm", "thurber", "thurible", "thuribles", "thurifer", "thurifers", "thursday", "thursdays", "thwack", "thwacker", "thwackers", "thwacks", "thwart", "thwarter", "thwarters", "thwarting", "thwartings", "thwarts", "thylacine", "thylacines", "thyme", "thymes", "thymidine", "thymine", "thymol", "thymus", "thyratron", "thyratrons", "thyristor", "thyristors", "thyroid", "thyroidectomy", "thyroiditis", "thyroids", "thyrotoxicosis", "thyrotrophin", "thyrotropin", "thyroxin", "thyroxine", "thyrse", "thyrses", "thyrsus", "thysanuran", "thysanurans", "tiara", "tiaras", "tiber", "tiberias", "tiberius", "tibet", "tibetan", "tibetans", "tibia", "tibias", "tibiotarsus", "tibiotarsuses", "tic", "tic tac toe", "tical", "ticals", "tices", "tick", "tick tack toe", "ticker", "tickers", "ticket", "ticket porter", "tickets", "ticking", "tickings", "tickle", "tickler", "ticklers", "tickles", "tickling", "ticklings", "ticklishness", "ticks", "ticonderoga", "tics", "tid", "tidbit", "tidbits", "tiddler", "tiddlers", "tiddlywinks", "tide", "tide rip", "tideland", "tidemark", "tidemarks", "tides", "tidies", "tidiness", "tidings", "tids", "tidy", "tidying", "tie", "tie and dye", "tie dyeing", "tie in", "tie ins", "tie up", "tie ups", "tiebreaker", "tiebreakers", "tiepolo", "tier", "tierce", "tiercel", "tiercels", "tierceron", "tiercerons", "tierces", "tiers", "ties", "tiff", "tiffany", "tiffin", "tiffins", "tiffs", "tiger", "tiger s eye", "tigerishness", "tigers", "tightener", "tighteners", "tightening", "tightness", "tightrope", "tightropes", "tights", "tightwad", "tightwads", "tiglon", "tiglons", "tigon", "tigons", "tigre", "tigress", "tigresses", "tigris", "tijuana", "tike", "tikes", "tiki", "tikis", "til", "tilapia", "tilburies", "tilbury", "tilda", "tilde", "tildes", "tile", "tilefish", "tilefishes", "tileries", "tilery", "tiles", "tiling", "tilings", "till", "tillage", "tillages", "tillandsia", "tillandsias", "tiller", "tillers", "tillich", "tilling", "tillings", "tillite", "tills", "tilly", "tils", "tilt", "tilth", "tilths", "tilts", "tim", "timarau", "timaraus", "timbal", "timbale", "timbales", "timbals", "timber", "timberhead", "timbering", "timberings", "timberland", "timbers", "timbre", "timbrel", "timbrels", "timbres", "timbuktu", "time", "time ball", "time balls", "time fuse", "time fuses", "time lag", "time out", "time outs", "time switch", "timelessness", "timeliness", "timepiece", "timepieces", "timer", "timers", "times", "timetable", "timetables", "timid", "timidity", "timidness", "timing", "timings", "timmy", "timocracies", "timocracy", "timor", "timorousness", "timothies", "timothy", "timpani", "timpanist", "timpanists", "tin", "tin opener", "tin openers", "tina", "tinamou", "tinamous", "tincal", "tinct", "tincts", "tincture", "tinctures", "tinder", "tinders", "tine", "tinea", "tineid", "tines", "tinfoil", "ting", "ting a ling", "tinge", "tinges", "tingle", "tingler", "tinglers", "tingles", "tingling", "tings", "tinhorn", "tinhorns", "tininess", "tinker", "tinkers", "tinkle", "tinkler", "tinklers", "tinkles", "tinkling", "tinklings", "tinman", "tinner", "tinners", "tinnies", "tinniness", "tinning", "tinnings", "tinnitus", "tinnituses", "tinny", "tins", "tinsel", "tinsels", "tinsmith", "tinsmiths", "tinsnips", "tinstone", "tint", "tinter", "tinters", "tinting", "tintings", "tintinnabulation", "tintinnabulum", "tintoretto", "tints", "tintype", "tintypes", "tinware", "tip", "tip off", "tip offs", "tipi", "tipis", "tipper", "tipperary", "tippers", "tippet", "tippets", "tippett", "tipple", "tippler", "tipplers", "tipples", "tips", "tipsiness", "tipstaff", "tipstaffs", "tipster", "tipsters", "tiptoe", "tiptoes", "tiptop", "tirade", "tirades", "tirailleur", "tirailleurs", "tirana", "tire", "tiredness", "tirelessness", "tires", "tiresias", "tiresomeness", "tirl", "tirls", "tiro", "tiroes", "tirol", "tirolean", "tiroleans", "tiros", "tirpitz", "tirrivee", "tirrivees", "tiruchirapalli", "tisane", "tisanes", "tishri", "tisiphone", "tissot", "tissue", "tissues", "tit", "titan", "titanate", "titanates", "titania", "titanism", "titanite", "titanium", "titanomachy", "titans", "titbit", "titbits", "titer", "titfer", "titfers", "tithe", "tither", "tithers", "tithes", "tithing", "tithings", "titi", "titian", "titicaca", "titillation", "titillations", "titis", "titivation", "titlark", "titlarks", "title", "title holder", "titles", "titmouse", "tito", "titoism", "titoist", "titration", "titrations", "titre", "titres", "tits", "titter", "titters", "titties", "tittivation", "tittivations", "tittle", "tittle tattle", "tittle tattler", "tittles", "tittup", "tittups", "titty", "titubation", "titubations", "titular", "titularities", "titularity", "titulars", "titulary", "titus", "tiu", "tivoli", "tizzies", "tizzy", "tlingit", "tlingits", "tmesis", "to and fro", "to do", "to dos", "to name", "toad", "toad in the hole", "toadflax", "toadflaxes", "toadies", "toads", "toadstool", "toadstools", "toady", "toadyism", "toast", "toaster", "toasters", "toasting", "toastings", "toastmaster", "toastmasters", "toasts", "tobacco", "tobaccoes", "tobacconist", "tobacconists", "tobaccos", "tobago", "tobias", "tobies", "tobit", "toboggan", "tobogganing", "tobogganings", "tobogganist", "tobogganists", "toboggans", "tobruk", "toby", "toccata", "toccatas", "tocharian", "tocher", "tochers", "tocology", "tocopherol", "tocsin", "tocsins", "tod", "today", "todays", "toddies", "toddle", "toddler", "toddlers", "toddles", "toddy", "todies", "tods", "tody", "toe", "toe in", "toea", "toecap", "toecaps", "toes", "toetoe", "toff", "toffee", "toffee apple", "toffee apples", "toffees", "toffies", "toffs", "toffy", "toft", "tofts", "tofu", "tog", "toga", "togas", "togated", "togetherness", "toggery", "toggle", "toggles", "togo", "togoland", "togolander", "togolanders", "togolese", "togs", "togue", "togues", "toheroa", "toheroas", "toil", "toile", "toiler", "toilers", "toiles", "toilet", "toiletries", "toiletry", "toilets", "toilette", "toilettes", "toils", "toilsomeness", "toitoi", "tokamak", "tokamaks", "tokay", "toke", "token", "tokenism", "tokens", "tokes", "tokharian", "tokology", "tokoloshe", "tokyo", "tola", "tolas", "tolbooth", "tolbooths", "tolbutamide", "tole", "toledo", "toledos", "tolerability", "tolerance", "tolerances", "toleration", "tolerationism", "tolerationist", "tolerationists", "tolerations", "tolerator", "tolerators", "toles", "toleware", "toll", "tollbooth", "tollbooths", "toller", "tollers", "tollgate", "tollgates", "tollman", "tolls", "tolstoy", "toltec", "tolu", "toluate", "toluene", "toluidine", "toluol", "tom", "tom tom", "tom toms", "tomahawk", "tomahawks", "tomalley", "tomalleys", "toman", "tomans", "tomatillo", "tomatilloes", "tomatillos", "tomato", "tomatoes", "tomb", "tombac", "tombacs", "tombak", "tombaks", "tombola", "tombolas", "tombolo", "tombolos", "tomboy", "tomboyishness", "tomboys", "tombs", "tombstone", "tombstones", "tome", "tomentum", "tomes", "tomfool", "tomfooleries", "tomfoolery", "tomfoolishness", "tomfools", "tomium", "tomiums", "tommies", "tommy", "tomogram", "tomograms", "tomograph", "tomographs", "tomography", "tomorrow", "tomorrows", "tompion", "tompions", "toms", "tomsk", "tomtit", "tomtits", "ton", "ton up", "tonalities", "tonality", "tonbridge", "tondo", "tondos", "tone", "tonelessness", "toneme", "tonemes", "toner", "toners", "tones", "tong", "tonga", "tongan", "tongans", "tongas", "tongs", "tongue", "tongue lashing", "tongues", "tonguing", "tonguings", "toni", "tonic", "tonicities", "tonicity", "tonics", "tonies", "tonight", "tonishness", "tonite", "tonk", "tonks", "tonlet", "tonlets", "tonnage", "tonnages", "tonne", "tonneau", "tonneaus", "tonnes", "tonnishness", "tonometer", "tonometers", "tons", "tonsil", "tonsillectomies", "tonsillectomy", "tonsillitis", "tonsillotomies", "tonsillotomy", "tonsils", "tonsure", "tonsures", "tontine", "tontines", "tonus", "tonuses", "tool", "toolbox", "toolboxes", "tooler", "toolers", "tooling", "toolings", "toolmaker", "toolmakers", "toolmaking", "toolroom", "toolrooms", "tools", "toom", "tooms", "toon", "toons", "toot", "tooter", "tooters", "tooth", "toothache", "toothaches", "toothbrush", "toothbrushes", "toothpaste", "toothpastes", "toothpick", "toothpicks", "tooths", "toothsomeness", "toothwort", "toothworts", "tootle", "tootles", "toots", "tootses", "tootsies", "tootsy", "tootsy wootsies", "tootsy wootsy", "top", "top level", "top shell", "toparch", "toparchs", "topaz", "topazes", "topazolite", "tope", "topee", "topees", "topeka", "toper", "topers", "topes", "tophet", "tophus", "topi", "topiaries", "topiary", "topic", "topicalities", "topicality", "topics", "topis", "toplessness", "toploftiness", "topman", "topmast", "topmasts", "topminnow", "topographer", "topographers", "topography", "topologist", "topologists", "topology", "toponym", "toponyms", "toponymy", "topos", "topotype", "topotypes", "topper", "toppers", "topping", "toppings", "tops", "topsail", "topsails", "topside", "topsides", "topspin", "topspins", "topsyturviness", "toque", "toques", "tor", "torah", "torahs", "toran", "torans", "torbanite", "torbay", "torbernite", "torc", "torch", "torches", "torchier", "torchiers", "torchlight", "torchlights", "torchwood", "torcs", "tore", "toreador", "toreadors", "torero", "toreros", "tores", "toreutics", "tori", "tories", "torii", "toriis", "torino", "torment", "tormenter", "tormenters", "tormentil", "tormentils", "tormentor", "tormentors", "torments", "tornado", "tornadoes", "tornados", "toroid", "toroids", "toronto", "torpedo", "torpedoes", "torpedos", "torpidity", "torpidness", "torpor", "torquay", "torque", "torquemada", "torques", "torr", "torrance", "torrent", "torrents", "torricelli", "torridity", "torridness", "torrs", "tors", "torsade", "torsades", "torse", "torsel", "torsels", "torses", "torsi", "torsibility", "torsion", "torsions", "torsk", "torsks", "torso", "torsos", "tort", "torte", "tortelier", "tortellini", "tortes", "torticollis", "tortilla", "tortillas", "tortoise", "tortoises", "tortoni", "tortonis", "tortricid", "tortricids", "tortrix", "torts", "tortuosity", "tortuousness", "torture", "torturer", "torturers", "tortures", "torturing", "torturings", "torus", "tory", "toryism", "tosca", "toscana", "toscanini", "tosh", "toshes", "toss", "toss up", "toss ups", "tosses", "tosspot", "tosspots", "tostada", "tostadas", "tot", "total", "totalisator", "totalisators", "totaliser", "totalisers", "totalitarianism", "totalities", "totality", "totalization", "totalizations", "totalizator", "totalizators", "totalizer", "totalizers", "totals", "totaquine", "totara", "tote", "totem", "totemism", "totemist", "totemists", "totems", "totes", "totient", "totients", "toting", "totipalmation", "tots", "totter", "totterer", "totterers", "totters", "toucan", "toucanet", "toucanets", "toucans", "touch", "touch me not", "touch typist", "touch typists", "touchableness", "toucher", "touchers", "touches", "touchiness", "touching", "touchingness", "touchings", "touchstone", "touchstones", "touchwood", "tough", "toughener", "tougheners", "toughie", "toughies", "toughness", "toughs", "toulon", "toulouse", "toulouse lautrec", "toupee", "toupees", "tour", "touraco", "touracos", "touraine", "tourbillion", "tourbillions", "tourer", "tourers", "touring", "tourings", "tourism", "tourist", "tourists", "tourmaline", "tournament", "tournaments", "tournedos", "tourney", "tourneys", "tourniquet", "tourniquets", "tours", "tous les mois", "touse", "touses", "tousle", "tousles", "tout", "touter", "touters", "touts", "touzle", "touzles", "tovarich", "tovariches", "tovarisch", "tovarisches", "tow", "towage", "towages", "towardliness", "towardness", "towbar", "towbars", "towboat", "towboats", "towel", "toweling", "towelings", "towelling", "towellings", "towels", "tower", "towers", "towhee", "towhees", "towline", "towlines", "towmond", "town", "townee", "townees", "townie", "townies", "towns", "townscape", "townscapes", "townsend", "townsfolk", "townshend", "township", "townships", "townsman", "townspeople", "townswoman", "towny", "towpath", "towpaths", "towrope", "towropes", "tows", "towser", "towsers", "toxaemia", "toxaphene", "toxemia", "toxicant", "toxicants", "toxicity", "toxicologist", "toxicologists", "toxicology", "toxin", "toxins", "toxiphobia", "toxoid", "toxoids", "toxophilite", "toxophilites", "toxophily", "toxoplasmosis", "toy", "toyer", "toyers", "toying", "toyings", "toynbee", "toys", "toyshop", "toyshops", "tra la", "trabecula", "trabzon", "tracasserie", "trace", "traceability", "traceableness", "traceably", "tracer", "traceries", "tracers", "tracery", "traces", "tracey", "trachea", "tracheal", "tracheid", "tracheides", "tracheids", "tracheitis", "tracheophyte", "tracheostomies", "tracheostomy", "tracheotomies", "tracheotomy", "trachoma", "trachyte", "tracing", "tracings", "track", "tracker", "trackers", "tracking", "trackings", "tracklayer", "tracklessness", "trackman", "tracks", "tracksuit", "tracksuits", "tract", "tractability", "tractableness", "tractarian", "tractarianism", "tractarians", "tractate", "tractates", "tractility", "traction", "tractor", "tractors", "tractrix", "tracts", "tracy", "trad", "trade", "trade in", "trade last", "trade off", "trade offs", "tradecraft", "trademark", "trademarks", "trader", "traders", "trades", "tradescantia", "tradescantias", "tradesman", "tradeswoman", "trading", "tradings", "tradition", "traditionalism", "traditionalist", "traditionalists", "traditionality", "traditionist", "traditionists", "traditions", "traditor", "traditores", "traditors", "traducement", "traducements", "traducer", "traducers", "trafalgar", "traffic", "trafficator", "trafficators", "trafficker", "traffickers", "traffics", "tragacanth", "tragacanths", "tragedian", "tragedians", "tragedienne", "tragediennes", "tragedies", "tragedy", "tragicalness", "tragopan", "tragopans", "tragus", "trail", "trailer", "trailers", "trailing", "trails", "train", "trainee", "trainees", "traineeship", "traineeships", "trainer", "trainers", "training", "trainings", "trainload", "trainloads", "trains", "traipse", "traipses", "trait", "traitor", "traitorousness", "traitors", "traitorship", "traitress", "traitresses", "traits", "trajan", "trajection", "trajections", "trajectories", "trajectory", "tralee", "tram", "tramline", "tramlines", "trammel", "trammeller", "trammellers", "trammels", "tramontana", "tramontanas", "tramontane", "tramontanes", "tramp", "trample", "trampler", "tramplers", "tramples", "trampling", "tramplings", "trampoline", "trampoliner", "trampoliners", "trampolines", "trampolinist", "trampolinists", "tramps", "trams", "tramway", "tramways", "trance", "trances", "tranche", "tranches", "trangam", "trangams", "trannie", "trannies", "tranquility", "tranquilization", "tranquilizer", "tranquilizers", "tranquillity", "tranquillizer", "tranquillizers", "tranquilness", "trans jordan", "transactinide", "transaction", "transactions", "transactor", "transactors", "transalpine", "transaminase", "transcalency", "transceiver", "transceivers", "transcendence", "transcendences", "transcendencies", "transcendency", "transcendent", "transcendentalism", "transcendentalist", "transcriber", "transcribers", "transcript", "transcription", "transcriptions", "transcripts", "transducer", "transducers", "transduction", "transductions", "transection", "transenna", "transennas", "transept", "transepts", "transfer", "transferability", "transferase", "transferee", "transferees", "transference", "transferences", "transferor", "transferors", "transferral", "transferrals", "transferrer", "transferrers", "transferrin", "transfers", "transfiguration", "transfigurations", "transfigurement", "transfixion", "transfixions", "transform", "transformation", "transformations", "transformer", "transformers", "transformism", "transformist", "transformists", "transforms", "transfuser", "transfusers", "transfusion", "transfusions", "transgression", "transgressions", "transgressor", "transgressors", "transhipment", "transhumance", "transhumances", "transience", "transiency", "transient", "transientness", "transients", "transillumination", "transistor", "transistors", "transit", "transitable", "transition", "transitions", "transitiveness", "transitivity", "transitoriness", "transits", "transkei", "translation", "translations", "translative", "translator", "translators", "transliteration", "transliterations", "translocation", "translocations", "translucence", "translucency", "translunary", "transmigrant", "transmigrants", "transmigration", "transmigrations", "transmissibility", "transmission", "transmissions", "transmissiveness", "transmissivity", "transmittal", "transmittals", "transmittance", "transmitter", "transmitters", "transmitting", "transmogrification", "transmogrifications", "transmontane", "transmutability", "transmutableness", "transmutation", "transmutations", "transmuter", "transmuters", "transom", "transoms", "transparence", "transparences", "transparencies", "transparency", "transparentness", "transpiration", "transpirations", "transplant", "transplantation", "transplanting", "transplants", "transponder", "transponders", "transport", "transportation", "transportations", "transporter", "transporters", "transports", "transposability", "transposal", "transposals", "transpose", "transposer", "transposers", "transposes", "transposition", "transpositions", "transsexual", "transsexualism", "transsexuals", "transshipment", "transshipments", "transubstantiation", "transubstantiationalist", "transudate", "transudates", "transudation", "transudations", "transvaal", "transvaluation", "transvaluations", "transversal", "transversals", "transverse", "transverses", "transvestism", "transvestite", "transvestites", "transvestitism", "transylvania", "tranter", "tranters", "trap", "trapan", "trapani", "trapans", "trapes", "trapeses", "trapeze", "trapezes", "trapezium", "trapeziums", "trapezius", "trapeziuses", "trapezohedron", "trapezohedrons", "trapezoid", "trapezoids", "trapper", "trappers", "trappiness", "trapping", "trappings", "trappist", "trappists", "traps", "trapshooter", "trapunto", "trapuntos", "trash", "trashes", "trashiness", "trass", "trattoria", "trattorias", "trauchle", "trauchles", "trauma", "traumas", "traumatism", "traumatization", "travail", "travails", "trave", "travel", "traveler", "travelers", "traveling", "travelings", "traveller", "travellers", "travelling", "travellings", "travelog", "travelogs", "travelogue", "travelogues", "travels", "travers", "traversal", "traversals", "traverse", "traverser", "traversers", "traverses", "travertine", "traves", "travesties", "travesty", "travois", "trawl", "trawler", "trawlers", "trawls", "tray", "traymobile", "traymobiles", "trays", "treacheries", "treacherousness", "treachery", "treacle", "treacles", "tread", "treader", "treaders", "treadle", "treadler", "treadlers", "treadles", "treadmill", "treadmills", "treads", "treason", "treasonableness", "treasons", "treasure", "treasure house", "treasure houses", "treasure trove", "treasurer", "treasurers", "treasurership", "treasurerships", "treasures", "treasuries", "treasury", "treat", "treaties", "treatise", "treatises", "treatment", "treatments", "treats", "treaty", "trebizond", "treble", "trebles", "trebuchet", "trebuchets", "trecento", "trecentos", "tree", "tree worship", "treelessness", "treen", "treenail", "treenails", "treenware", "trees", "treetop", "treetops", "trefoil", "trefoils", "trehala", "trehalas", "treillage", "treillages", "trek", "trekker", "trekkers", "treks", "trellis", "trellises", "trematoda", "trematode", "trematodes", "tremble", "trembler", "tremblers", "trembles", "trembling", "tremblings", "tremendousness", "tremie", "tremies", "tremolant", "tremolants", "tremolite", "tremolo", "tremolos", "tremor", "tremors", "tremulant", "tremulants", "tremulousness", "trenail", "trenails", "trench", "trenchancy", "trencher", "trenchers", "trenches", "trend", "trend setter", "trend setters", "trendies", "trends", "trendy", "trent", "trental", "trentals", "trente et quarante", "trento", "trenton", "trepan", "trepanation", "trepanations", "trepang", "trepangs", "trepanner", "trepanners", "trepans", "trephine", "trephines", "trepidation", "trepidations", "treponema", "treponemas", "trespass", "trespasser", "trespassers", "trespasses", "tress", "tresses", "tressure", "tressures", "trestle", "trestles", "tret", "trets", "trevallies", "trevally", "trevelyan", "trevino", "treviso", "trevithick", "trevor", "trews", "trey", "treys", "triad", "triads", "triage", "triages", "trial", "trials", "triangle", "triangles", "triangularity", "triangulation", "triangulations", "triarchies", "triarchy", "tribade", "tribades", "tribadism", "tribalism", "tribalist", "tribalists", "tribe", "tribes", "tribesman", "triblet", "triblets", "tribologist", "tribologists", "tribology", "triboluminescence", "tribrach", "tribrachs", "tribulation", "tribulations", "tribunal", "tribunals", "tribunate", "tribunates", "tribune", "tribunes", "tribuneship", "tribuneships", "tributaries", "tributary", "tribute", "tributes", "trice", "tricentenary", "tricentennial", "triceps", "tricepses", "triceratops", "triceratopses", "trices", "trichiasis", "trichina", "trichinas", "trichiniasis", "trichinisation", "trichinisations", "trichinization", "trichinizations", "trichinosis", "trichite", "trichites", "trichloroethylene", "trichogyne", "trichogynes", "trichologist", "trichologists", "trichology", "trichome", "trichomes", "trichomonad", "trichomonads", "trichomoniasis", "trichophyton", "trichophytons", "trichosis", "trichotillomania", "trichotomies", "trichotomy", "trichroism", "trichromat", "trichromatism", "trichromats", "tricia", "trick", "trickeries", "trickery", "trickiness", "trickishness", "trickle", "tricks", "trickster", "trickstering", "tricksterings", "tricksters", "triclinium", "tricliniums", "tricolor", "tricolors", "tricolour", "tricolours", "tricorn", "tricorne", "tricorns", "tricot", "tricots", "tricrotism", "tricuspid", "tricycle", "tricycles", "tricyclic", "tridacna", "tridacnas", "trident", "tridentine", "tridents", "triduum", "triduums", "tridymite", "triennial", "triennium", "trienniums", "trier", "trierarch", "trierarchies", "trierarchs", "trierarchy", "triers", "tries", "trieste", "triethylamine", "trifle", "trifler", "triflers", "trifles", "trifling", "triflingness", "trifocal", "trifocals", "trifolium", "trifoliums", "triforium", "trifurcation", "trifurcations", "trig", "trigamist", "trigamists", "trigeminal", "trigeminals", "trigger", "triggerfish", "triggers", "triglyceride", "triglycerides", "triglyph", "triglyphs", "trigness", "trigon", "trigonometer", "trigonometers", "trigonometry", "trigons", "trigram", "trigrams", "trigraph", "trigraphs", "trigs", "trihedral", "trihedrals", "trihedron", "trihedrons", "trike", "trikes", "trilateral", "trilaterals", "trilateration", "trilbies", "trilby", "trilbys", "trilemma", "trilemmas", "trilingualism", "triliteral", "trilithon", "trilithons", "trill", "trillion", "trillions", "trillionth", "trillionths", "trillium", "trilliums", "trills", "trilobite", "trilobites", "trilogies", "trilogy", "trim", "trimaran", "trimarans", "trimer", "trimers", "trimester", "trimesters", "trimeter", "trimeters", "trimethylene", "trimetrogon", "trimmer", "trimmers", "trimming", "trimmings", "trimness", "trimorphism", "trims", "trimurti", "trindle", "trindles", "trine", "trines", "tringle", "tringles", "trinidad", "trinidadian", "trinidadians", "trinitarian", "trinitarianism", "trinitarians", "trinities", "trinitrobenzene", "trinitrophenol", "trinitrotoluene", "trinity", "trinket", "trinketer", "trinketry", "trinkets", "trinkum", "trinkums", "trinomial", "trinomials", "trio", "triode", "triodes", "triolet", "triolets", "trios", "trioxide", "trioxides", "trip", "tripartition", "tripartitions", "tripe", "tripersonality", "tripes", "triphenylmethane", "triphthong", "tripitaka", "triplane", "triplanes", "triple", "triples", "triplet", "triplets", "triplicate", "triplicates", "triplication", "triplications", "triplicities", "triplicity", "tripling", "triplings", "triploid", "triploidy", "tripod", "tripodies", "tripods", "tripody", "tripoli", "tripolitania", "tripos", "triposes", "tripper", "trippers", "trippet", "trippets", "trips", "triptane", "triptanes", "triptych", "triptychs", "triptyque", "triptyques", "tripura", "tripwire", "triquetra", "triquetral", "triquetras", "trireme", "triremes", "trisaccharide", "trisaccharides", "trish", "trisha", "trishaw", "trishaws", "triskaidekaphobia", "triskelion", "trismegistus", "trismus", "trismuses", "trisoctahedron", "trisoctahedrons", "trisomy", "tristan", "tristich", "tristichs", "tristram", "trisulphide", "trisyllable", "trisyllables", "tritanopia", "triteness", "tritheism", "tritheist", "tritheists", "triticale", "tritium", "triton", "tritone", "tritones", "tritons", "triturate", "triturates", "trituration", "triturations", "triturator", "triturators", "triumph", "triumpher", "triumphers", "triumphs", "triumvir", "triumvirate", "triumvirates", "triumvirs", "triune", "triunes", "trivalence", "trivalences", "trivalencies", "trivalency", "trivalent", "trivalve", "trivalves", "trivet", "trivets", "trivia", "trivialisation", "trivialisations", "trivialism", "triviality", "trivialness", "trivium", "trix", "trixie", "trixy", "trocar", "trocars", "trochaic", "trochanter", "trochanters", "troche", "trochee", "trochees", "troches", "trochilus", "trochiluses", "trochlea", "trochlear", "trochleas", "trochoid", "trochoids", "trochophore", "troglodyte", "troglodytes", "troglodytism", "trogon", "trogons", "troika", "troikas", "troilism", "troilus", "trojan", "trojans", "troke", "trokes", "troll", "troller", "trollers", "trolley", "trolleys", "trollies", "trollius", "trollop", "trollope", "trollopean", "trollopian", "trollops", "trolls", "trolly", "trombone", "trombones", "trombonist", "trombonists", "trommel", "trommels", "tromometer", "tromometers", "trompe", "trompes", "trona", "trondheim", "trone", "trones", "troop", "trooper", "troopers", "troops", "tropaeolin", "tropaeolum", "tropaeolums", "trope", "tropes", "trophallaxis", "trophies", "trophoblast", "trophoblasts", "trophoplasm", "trophoplasms", "trophotropism", "trophozoite", "trophozoites", "trophy", "tropic", "tropicbird", "tropicbirds", "tropics", "tropism", "tropology", "tropopause", "tropophyte", "tropophytes", "troposphere", "trot", "troth", "troths", "trotline", "trotlines", "trots", "trotsky", "trotskyism", "trotskyite", "trotter", "trotters", "trotyl", "trou de loup", "troubadour", "troubadours", "trouble", "troublemaker", "troublemakers", "troubler", "troublers", "troubles", "troubleshooter", "troubleshooters", "troublesomeness", "troubling", "troublings", "troublousness", "trough", "troughs", "trouncer", "trouncers", "trouncing", "trouncings", "troupe", "trouper", "troupers", "troupes", "troupial", "troupials", "trouser", "trousering", "trouserings", "trousers", "trousseau", "trousseaus", "trout", "trouts", "trouvaille", "trouvailles", "trouveur", "trouveurs", "trove", "trover", "trovers", "troves", "trowbridge", "trowel", "troweller", "trowellers", "trowels", "troy", "troyes", "truancies", "truancy", "truant", "truants", "truce", "truces", "truck", "truckage", "truckages", "trucker", "truckers", "truckie", "truckies", "trucking", "truckings", "truckle", "truckler", "trucklers", "truckles", "truckling", "trucklings", "trucks", "truculence", "truculency", "trudeau", "trudge", "trudgen", "trudgens", "trudges", "trudy", "true", "true heartedness", "trueness", "trues", "truffle", "truffles", "trug", "trugs", "truism", "truisms", "trull", "trulls", "truman", "trumeau", "trump", "trumpery", "trumpet", "trumpet tree", "trumpeter", "trumpeters", "trumpets", "trumping", "trumps", "truncation", "truncations", "truncheon", "truncheons", "trundle", "trundler", "trundlers", "trundles", "trunk", "trunkfish", "trunkfishes", "trunkful", "trunkfuls", "trunks", "trunnion", "trunnions", "truro", "truss", "trusser", "trussers", "trusses", "trussing", "trussings", "trust", "trustee", "trustees", "trusteeship", "trusteeships", "truster", "trusters", "trustfulness", "trusties", "trustiness", "trustlessness", "trusts", "trustworthiness", "trusty", "truth", "truth value", "truthfulness", "truthlessness", "truths", "try", "try on", "try ons", "trygon", "trypaflavine", "trypanosome", "trypanosomes", "trypanosomiasis", "trypsin", "tryptophan", "tryptophane", "trysail", "trysails", "tryst", "trysts", "tsar", "tsardom", "tsarevitch", "tsarevitches", "tsarevna", "tsarevnas", "tsarina", "tsarinas", "tsarism", "tsarist", "tsarists", "tsaritsa", "tsaritsas", "tsaritza", "tsaritzas", "tsars", "tsetse", "tsetses", "tsotsi", "tsotsis", "tsuga", "tsunami", "tsunamis", "tswana", "tswanas", "tuareg", "tuaregs", "tuart", "tuarts", "tuatara", "tuataras", "tub", "tub thumper", "tub thumpers", "tuba", "tubas", "tubber", "tubbers", "tubbiness", "tube", "tubeless", "tubenose", "tubenoses", "tuber", "tubercle", "tubercles", "tubercular", "tuberculin", "tuberculisation", "tuberculize", "tuberculizes", "tuberculoma", "tuberculomas", "tuberculosis", "tuberose", "tuberosities", "tuberosity", "tubers", "tubes", "tubful", "tubfuls", "tubifex", "tubing", "tubings", "tubs", "tubulation", "tubulations", "tubule", "tubules", "tucana", "tuchun", "tuchuns", "tuck", "tuck shop", "tuck shops", "tuckahoe", "tuckahoes", "tucker", "tuckers", "tucket", "tuckets", "tucks", "tucotuco", "tucotucos", "tucson", "tudor", "tuesday", "tuesdays", "tufa", "tuff", "tuffet", "tuffets", "tuffs", "tuft", "tufter", "tufters", "tufting", "tuftings", "tufts", "tug", "tug of war", "tugger", "tuggers", "tughrik", "tughriks", "tugrik", "tugriks", "tugs", "tui", "tuileries", "tuille", "tuilles", "tuis", "tuition", "tularaemia", "tularemia", "tule", "tules", "tulip", "tulipomania", "tulips", "tulle", "tulsa", "tulwar", "tulwars", "tum", "tumble", "tumbler", "tumblers", "tumbles", "tumbling", "tumblings", "tumbrel", "tumbrels", "tumbril", "tumbrils", "tumefaction", "tumefactions", "tumescence", "tumescences", "tumidity", "tumidness", "tummies", "tummy", "tumor", "tumors", "tumour", "tumours", "tump", "tumps", "tums", "tumult", "tumults", "tumultuousness", "tumulus", "tun", "tuna", "tunableness", "tunas", "tundra", "tundras", "tune", "tunefulness", "tuner", "tuners", "tunes", "tunesmith", "tunesmiths", "tung", "tungs", "tungstate", "tungstates", "tungsten", "tungstic", "tungus", "tunguses", "tungusic", "tunguska", "tunic", "tunica", "tunicate", "tunicle", "tunicles", "tunics", "tuning", "tunings", "tunis", "tunisia", "tunisian", "tunisians", "tunker", "tunnage", "tunnages", "tunnel", "tunneler", "tunnelers", "tunneller", "tunnellers", "tunnels", "tunnies", "tunny", "tuns", "tup", "tupamaro", "tupamaros", "tupek", "tupeks", "tupelo", "tupelos", "tupi", "tupik", "tupiks", "tupis", "tuppence", "tuppences", "tups", "tuque", "tuques", "turaco", "turacos", "turandot", "turanian", "turban", "turbans", "turbaries", "turbary", "turbellarian", "turbellarians", "turbidimeter", "turbidimeters", "turbidity", "turbidness", "turbinal", "turbinate", "turbine", "turbines", "turbit", "turbits", "turbo", "turbocar", "turbocars", "turbocharger", "turbochargers", "turbofan", "turbofans", "turboprop", "turboprops", "turbos", "turbot", "turbots", "turbulence", "turbulences", "turbulencies", "turbulency", "turco", "turcoman", "turcos", "turd", "turds", "tureen", "tureens", "turf", "turfiness", "turfman", "turfs", "turgenev", "turgidity", "turgidness", "turgor", "turin", "turion", "turions", "turk", "turkestan", "turkey", "turkeys", "turki", "turkic", "turkish", "turkistan", "turkman", "turkmen", "turkmenistan", "turko tatar", "turkoman", "turkomans", "turks", "turmeric", "turmerics", "turmoil", "turmoils", "turn", "turn on", "turn ons", "turnaround", "turnarounds", "turnbuckle", "turnbuckles", "turncoat", "turncoats", "turncock", "turncocks", "turner", "turneries", "turners", "turnery", "turning", "turnings", "turnip", "turnips", "turnkey", "turnkeys", "turnover", "turnovers", "turnpike", "turnpikes", "turnround", "turnrounds", "turns", "turnsole", "turnsoles", "turnspit", "turnspits", "turnstile", "turnstiles", "turnstone", "turnstones", "turntable", "turntables", "turpentine", "turpentines", "turpeth", "turpeths", "turpin", "turpitude", "turps", "turquoise", "turret", "turrets", "turtle", "turtleback", "turtlebacks", "turtleneck", "turtlenecks", "turtles", "turves", "tuscan", "tuscans", "tuscany", "tusche", "tush", "tushery", "tushes", "tushie", "tushies", "tushy", "tusk", "tusker", "tuskers", "tusks", "tussah", "tussahs", "tussaud", "tusseh", "tussehs", "tusser", "tussers", "tussis", "tussle", "tussles", "tussock", "tussocks", "tussore", "tussores", "tut", "tut tut", "tut tuts", "tutankhamen", "tutee", "tutees", "tutelage", "tutelages", "tutenag", "tutiorism", "tutor", "tutorial", "tutorials", "tutoring", "tutors", "tutorship", "tutorships", "tuts", "tutsan", "tutsans", "tutti frutti", "tutti fruttis", "tutty", "tutu", "tutus", "tux", "tuxedo", "tuxedoes", "tuxedos", "tuxes", "twaddle", "twaddler", "twaddlers", "twaddles", "twain", "twains", "twang", "twangle", "twangles", "twangs", "twattle", "twattles", "tweak", "tweaks", "tweed", "tweediness", "tweeds", "tweedsmuir", "tweenies", "tweeny", "tweet", "tweeter", "tweeters", "tweets", "twelfth", "twelfths", "twelve", "twelvemo", "twelvemonth", "twelvemonths", "twelvemos", "twelves", "twenties", "twentieth", "twentieths", "twenty", "twenty five", "twenty four", "twenty one", "twenty two", "twerp", "twerps", "twi", "twibill", "twibills", "twicer", "twicers", "twickenham", "twiddle", "twiddler", "twiddlers", "twiddles", "twier", "twiers", "twig", "twigs", "twilight", "twilights", "twill", "twills", "twin", "twine", "twiner", "twiners", "twines", "twinflower", "twinflowers", "twinge", "twinges", "twink", "twinkle", "twinkler", "twinklers", "twinkles", "twinkling", "twinklings", "twinks", "twins", "twirl", "twirler", "twirlers", "twirls", "twirp", "twirps", "twist", "twister", "twisters", "twisting", "twistings", "twists", "twit", "twitch", "twitches", "twitching", "twitchings", "twite", "twites", "twits", "twitter", "twitterer", "twitterers", "twitters", "twitting", "twittings", "two", "two by four", "two dimensionality", "two master", "two piece", "two step", "two steps", "two timer", "two timers", "two up", "two wheeler", "two wheelers", "twopence", "twopences", "twos", "twosome", "twosomes", "tybalt", "tyburn", "tyche", "tychism", "tycho", "tycoon", "tycoons", "tye", "tyes", "tyg", "tygs", "tying", "tyke", "tykes", "tyler", "tylers", "tylopod", "tylopods", "tylosis", "tymbal", "tymbals", "tympan", "tympani", "tympanies", "tympanist", "tympanists", "tympanites", "tympanitis", "tympans", "tympanum", "tympanums", "tympany", "tyndale", "tyne", "tynemouth", "tynes", "tyneside", "tynwald", "type", "types", "typescript", "typescripts", "typesetter", "typesetters", "typewriter", "typewriters", "typewriting", "typhlitis", "typhlology", "typhoeus", "typhoid", "typhoidal", "typhon", "typhoon", "typhoons", "typhus", "typicality", "typicalness", "typification", "typifications", "typifier", "typifiers", "typifying", "typing", "typings", "typist", "typists", "typo", "typographer", "typographers", "typographies", "typography", "typologies", "typologist", "typologists", "typology", "typos", "tyr", "tyramine", "tyrannicalness", "tyrannicide", "tyrannicides", "tyrannies", "tyrannosaur", "tyrannosaurs", "tyrannosaurus", "tyrannosauruses", "tyranny", "tyrant", "tyrants", "tyre", "tyres", "tyrian", "tyro", "tyroes", "tyrol", "tyrolean", "tyroleans", "tyrolese", "tyrolienne", "tyrone", "tyros", "tyrosinase", "tyrosine", "tyson", "tzaddik", "tzaddiks", "tzar", "tzars", "tzimmes", "u boat", "u boats", "u turn", "u turns", "uakari", "uakaris", "ubiety", "ubiquitarian", "ubiquitarians", "ubiquitousness", "ubiquity", "uccello", "udaipur", "udal", "udals", "udder", "udders", "udine", "udo", "udometer", "udometers", "udos", "ufa", "ufo", "ufology", "ufos", "uganda", "ugandan", "ugandans", "ugli", "uglies", "ugliness", "uglis", "ugrian", "ugric", "ugro finnic", "ugsomeness", "uhlan", "uhlans", "uhuru", "uintathere", "uintatheres", "uitlander", "uitlanders", "ukase", "ukases", "uke", "ukes", "ukiyo e", "ukraine", "ukrainian", "ukrainians", "ukulele", "ukuleles", "ulcer", "ulceration", "ulcerations", "ulcerousness", "ulcers", "ulema", "ulemas", "ulex", "ulexes", "ulitis", "ullage", "ullages", "ullswater", "ulm", "ulna", "ulotrichy", "ulric", "ulrica", "ulster", "ulsterman", "ulsters", "ultan", "ultima", "ultimacy", "ultimas", "ultimate", "ultimates", "ultimatum", "ultimatums", "ultimogeniture", "ultra", "ultracentrifugation", "ultracentrifuge", "ultrafiche", "ultrafiches", "ultrafilter", "ultrafiltration", "ultraism", "ultraist", "ultraists", "ultramarine", "ultramicroscope", "ultramicroscopy", "ultramontane", "ultramontanism", "ultramontanist", "ultramontanists", "ultrasonics", "ultrasonography", "ultrasound", "ultrastructure", "ultrastructures", "ultraviolet", "ululation", "ululations", "ulva", "ulysses", "umbel", "umbellifer", "umbellifers", "umbellule", "umbellules", "umbels", "umber", "umbers", "umberto", "umbilical", "umbilication", "umbilicus", "umbilicuses", "umbo", "umbos", "umbra", "umbrage", "umbrageousness", "umbrages", "umbras", "umbrella", "umbrellas", "umbrette", "umbrettes", "umbria", "umbrian", "umiak", "umiaks", "umlaut", "umlauts", "umpirage", "umpirages", "umpire", "umpires", "umpiring", "una", "unabridged", "unacceptableness", "unacceptance", "unaccountability", "unaccountableness", "unaccustomedness", "unadvisedness", "unaffectedness", "unalterability", "unalterableness", "unamiableness", "unanimities", "unanimity", "unanswerableness", "unapprehensiveness", "unaptness", "unassumingness", "unattainableness", "unattractiveness", "unau", "unaus", "unauthenticity", "unavailability", "unavailableness", "unavoidability", "unavoidableness", "unawareness", "unbalance", "unbalances", "unbearableness", "unbecomingness", "unbelief", "unbeliever", "unbelievers", "unbendingness", "unbirthday", "unbirthdays", "unblamableness", "unblessedness", "unboundedness", "unbrokenness", "uncandidness", "uncanniness", "unceremoniousness", "uncertainness", "uncertainties", "uncertainty", "unchangeability", "unchangeableness", "uncharitableness", "unchasteness", "unchastity", "uncheerfulness", "uncial", "uncials", "unciform", "uncinus", "uncircumcision", "uncle", "uncleanliness", "uncleanness", "unclearness", "uncles", "uncloudedness", "uncomfortableness", "uncommonness", "uncommunicativeness", "uncompromisingness", "unconcern", "unconcerns", "unconditionality", "unconditionalness", "unconfessed", "unconformability", "unconformity", "uncongeniality", "unconscientiousness", "unconscionableness", "unconscious", "unconsciousness", "unconstraint", "unconventionality", "uncourtliness", "uncouthness", "uncovering", "unction", "unctions", "unctuosity", "unctuousness", "uncus", "undauntedness", "undemonstrativeness", "undeniableness", "undenominational", "undependableness", "underachievement", "underachiever", "underachievers", "underactor", "underactors", "underagent", "underagents", "underbellies", "underbelly", "underbidder", "underbidders", "underbough", "underboughs", "underbridge", "underbridges", "underbrush", "underbrushes", "underbuilder", "underbuilders", "undercarriage", "undercarriages", "undercart", "undercast", "undercasts", "undercharge", "undercharges", "underclassman", "underclay", "underclothes", "underclothing", "undercoat", "undercoating", "undercoats", "underconsciousness", "undercook", "undercooks", "undercountenance", "undercrest", "undercroft", "undercrofts", "undercurrent", "undercurrents", "undercut", "undercuts", "underdevelopment", "underdog", "underdogs", "underdrain", "underdrains", "underdress", "underdresses", "underestimate", "underestimates", "underestimation", "underexposure", "underexposures", "underfeed", "underfeeds", "underfelt", "underflow", "underflows", "underfur", "underfurs", "undergarment", "undergarments", "underglaze", "undergrad", "undergrads", "undergraduate", "undergraduates", "undergraduateship", "undergraduette", "undergraduettes", "underground", "undergrounds", "undergrowth", "undergrowths", "underhandedness", "underking", "underkingdom", "underkingdoms", "underkings", "underlay", "underlayer", "underlayers", "underlays", "underline", "underlinen", "underlinens", "underlines", "underling", "underlings", "underlip", "underlips", "undermeaning", "underminer", "underminers", "underneath", "undernote", "undernotes", "undernourishment", "underpainting", "underpants", "underpass", "underpasses", "underpayment", "underpayments", "underpinning", "underpinnings", "underplot", "underplots", "underrating", "underrepresentation", "underring", "underrun", "underruns", "underscore", "underscores", "underseal", "underseals", "underseller", "undersellers", "underset", "undersets", "undershirt", "undershirts", "undershrub", "undershrubs", "underside", "undersides", "undersigned", "underskies", "underskirt", "underskirts", "undersky", "undersleeve", "undersleeves", "undersoil", "undersoils", "understanding", "understandings", "understatement", "understatements", "understock", "understocks", "understrapper", "understrappers", "understudies", "understudy", "undersupplies", "undersupply", "undertaker", "undertakers", "undertaking", "undertakings", "undertenancies", "undertenancy", "undertenant", "undertenants", "underthrust", "underthrusts", "undertint", "undertints", "undertone", "undertones", "undertow", "undertows", "underutilization", "undervaluation", "undervaluations", "undervest", "undervests", "underviewer", "underviewers", "undervoice", "undervoices", "underwear", "underwing", "underwings", "underwood", "underwoods", "underworker", "underworkers", "underworkman", "underworld", "underwriter", "underwriters", "undesirability", "undesirable", "undesirableness", "undesirables", "undies", "undine", "undines", "undiscipline", "undistractedness", "undoer", "undoers", "undoing", "undoings", "undress", "undresses", "undset", "undulation", "undulations", "undutifulness", "undyingness", "unease", "uneasiness", "unemployment", "unerringness", "unessential", "unevenness", "unexceptionableness", "unexpectedness", "unfairness", "unfaithfulness", "unfamiliarity", "unfastening", "unfavorableness", "unfavourableness", "unfeelingness", "unfitness", "unfixity", "unfolder", "unfolders", "unfolding", "unfoldings", "unfortunate", "unfortunateness", "unfortunates", "unfriendedness", "unfriendliness", "ungainliness", "ungentility", "ungentleness", "ungenuineness", "ungodliness", "ungovernableness", "ungracefulness", "ungraciousness", "ungratefulness", "unguardedness", "unguent", "unguents", "unguiculate", "unguis", "ungula", "ungulate", "unhandsomeness", "unhappiness", "unhealthfulness", "unhealthiness", "unhingement", "unhingements", "unholiness", "uni", "uniat", "unicorn", "unicorns", "unicycle", "unicycles", "unification", "unifications", "unifier", "unifiers", "uniform", "uniformitarian", "uniformitarianism", "uniformitarians", "uniformities", "uniformity", "uniformness", "uniforms", "unilateralism", "unilateralist", "unilateralists", "unilaterality", "unimaginableness", "unimportance", "unintelligibility", "union", "unionisation", "unionisations", "unionism", "unionist", "unionists", "unionization", "unionizations", "unions", "unipod", "unipods", "unique", "uniqueness", "uniques", "unis", "unisexuality", "unison", "unisons", "unit", "unitarian", "unitarianism", "unitarians", "unite", "unitedness", "uniter", "uniters", "unites", "unities", "uniting", "unitings", "units", "unity", "univalence", "univalences", "univalve", "universal", "universalisation", "universalism", "universalist", "universalists", "universalities", "universality", "universalization", "universals", "universe", "universes", "universitarian", "universitarians", "universities", "university", "univocal", "unjustness", "unkindliness", "unkindness", "unknightliness", "unknowing", "unknowingness", "unknown", "unknownness", "unknowns", "unlawfulness", "unlikelihood", "unlikelihoods", "unlikeliness", "unlikeness", "unlimitedness", "unliveliness", "unloader", "unloaders", "unloading", "unloadings", "unloveliness", "unluckiness", "unmalleability", "unmanageableness", "unmanliness", "unmannerliness", "unmasking", "unmeaningness", "unmercifulness", "unmindfulness", "unmorality", "unnaturalness", "unnecessariness", "unneighbourliness", "unnilhexium", "unnilpentium", "unnilquadium", "unnilseptium", "unobtrusiveness", "unoriginality", "unorthodoxies", "unorthodoxy", "unpacker", "unpackers", "unperson", "unpersons", "unpitifulness", "unpleasantness", "unpleasantnesses", "unpoliteness", "unpopularity", "unpracticality", "unpredictability", "unpreparedness", "unpretentiousness", "unprettiness", "unproductiveness", "unproductivity", "unprofitability", "unprofitableness", "unprogressiveness", "unpropitiousness", "unprosperousness", "unprotectedness", "unpunctuality", "unqualifiedness", "unquiet", "unquiets", "unraveller", "unravellers", "unravelment", "unravelments", "unreadiness", "unrealism", "unrealities", "unreality", "unreason", "unreasonableness", "unreconcilableness", "unregenerate", "unrelentingness", "unreliability", "unreliableness", "unremittingness", "unrepair", "unreserve", "unreservedness", "unresponsiveness", "unrest", "unrestfulness", "unrestraint", "unrestraints", "unrests", "unriddler", "unriddlers", "unrighteousness", "unrightfulness", "unripeness", "unruliness", "uns", "unsafeness", "unsafety", "unsalability", "unsatisfactoriness", "unsaturation", "unsavouriness", "unscrupulousness", "unsearchableness", "unseasonableness", "unseaworthiness", "unseemliness", "unseen", "unseens", "unselfconsciousness", "unselfishness", "unsettledness", "unsettlement", "unsightliness", "unskilfulness", "unskillfulness", "unsnarling", "unsociability", "unsociableness", "unsocialism", "unsolidity", "unsophisticatedness", "unsophistication", "unsoundness", "unspeakableness", "unstableness", "unstaidness", "unsteadfastness", "unsteadiness", "unsubstantiality", "unsuccess", "unsuccessfulness", "unsuitability", "unsuitableness", "unsuppleness", "unsuspectedness", "unsuspiciousness", "untangling", "untenability", "untenableness", "unthankfulness", "unthatch", "unthatches", "unthinkability", "unthinkingness", "unthoughtfulness", "unthriftiness", "untidiness", "untimeliness", "untouchable", "untowardness", "untractableness", "untrustiness", "untrustworthiness", "untruth", "untruthfulness", "untruths", "untunableness", "untying", "unusefulness", "unusualness", "unveiling", "unveilings", "unverifiability", "unwariness", "unwashed", "unwatchfulness", "unwell", "unwholesomeness", "unwieldiness", "unwillingness", "unwisdom", "unwiseness", "unwit", "unwittingness", "unwontedness", "unworldliness", "unworthiness", "unyieldingness", "up and under", "up and unders", "up bow", "upanishad", "upanishads", "upas", "upases", "upbeat", "upbeats", "upbraiding", "upbraidings", "upbringing", "upbringings", "upburst", "upcast", "upcasts", "update", "updates", "updating", "updike", "upending", "upgrade", "upgrader", "upgraders", "upgrades", "upgrowth", "upgrowths", "upheaval", "upheavals", "uphill", "uphills", "upholder", "upholders", "upholsterer", "upholsterers", "upholsteries", "upholstery", "uphroe", "uphroes", "upkeep", "upland", "uplander", "uplanders", "uplands", "uplift", "uplifter", "uplifters", "uplifting", "upliftings", "uplifts", "uplink", "uplinks", "upper", "upper case", "uppercut", "uppercuts", "uppers", "uppishness", "uppsala", "upright", "uprightness", "uprights", "uprise", "uprises", "uprising", "uprisings", "upriver", "uproar", "uproariousness", "uproars", "uprooter", "uprooters", "uprush", "uprushes", "upset", "upsets", "upsetting", "upsettings", "upshot", "upshots", "upside", "upsides", "upsilon", "upspring", "upsprings", "upstage", "upstages", "upstairs", "upstart", "upstarts", "upstate", "upstroke", "upstrokes", "upsurge", "upsurges", "upsweep", "upsweeps", "upswing", "upswings", "uptake", "uptakes", "upthrow", "upthrows", "upthrust", "upthrusts", "uptown", "uptowner", "uptowners", "uptrend", "uptrends", "upturn", "upturns", "upwardness", "uracil", "uraemia", "uraeus", "uraeuses", "ural", "ural altaic", "uralic", "uralite", "uranalysis", "urania", "uranian", "uranide", "uranides", "uraninite", "uranism", "uranite", "uranium", "uranographer", "uranographist", "uranographists", "uranography", "uranology", "uranometry", "uranus", "uranyl", "uranyls", "urari", "uraris", "urate", "urates", "urbaneness", "urbanisation", "urbanism", "urbanite", "urbanites", "urbanity", "urbanization", "urchin", "urchins", "urd", "urds", "urdu", "urea", "uredinium", "uredium", "uredo", "uredosorus", "uredosoruses", "uredospore", "uredospores", "ureide", "uremia", "urena", "urenas", "ureter", "ureteritis", "ureters", "urethan", "urethane", "urethra", "urethras", "urethritis", "urethroscope", "urethroscopy", "urge", "urgencies", "urgency", "urger", "urgers", "urges", "urging", "urgings", "uri", "uriah", "urial", "urials", "uridine", "uriel", "urinal", "urinals", "urinalysis", "urinaries", "urinary", "urination", "urinations", "urine", "urn", "urnfield", "urnfields", "urning", "urnings", "urns", "urochord", "urochordate", "urochordates", "urochords", "urochrome", "urodele", "urodeles", "urolith", "uroliths", "urologist", "urologists", "urology", "uropod", "uropods", "uropygium", "uropygiums", "uroscopy", "urostyle", "urostyles", "urquhart", "ursa", "ursula", "ursuline", "urtext", "urtica", "urticaria", "urticas", "urtication", "uruguay", "uruguayan", "uruguayans", "urus", "uruses", "usableness", "usage", "usages", "usance", "usances", "use", "useful", "usefulness", "uselessness", "user", "users", "uses", "ushant", "usher", "usherette", "usherettes", "ushers", "using", "usk", "usnea", "usneas", "usquebaugh", "usquebaughs", "ustinov", "ustulation", "usual", "usualness", "usuals", "usufruct", "usufructs", "usufructuary", "usurer", "usurers", "usuriousness", "usurpation", "usurpations", "usurper", "usurpers", "usury", "utah", "ute", "utensil", "utensils", "uterus", "utes", "utgard", "utica", "utilisation", "utilisations", "utilitarian", "utilitarianism", "utilitarians", "utilities", "utility", "utilization", "utilizations", "utilizer", "utilizers", "utmost", "utmosts", "uto aztecan", "utopia", "utopian", "utopianism", "utopians", "utopias", "utraquism", "utraquist", "utraquists", "utrecht", "utricle", "utricles", "utriculus", "utrillo", "utterance", "utterances", "utterer", "utterers", "uttermost", "utterness", "utu", "uvarovite", "uvea", "uveas", "uveitis", "uvula", "uvular", "uvulas", "uvulitis", "uxbridge", "uxoricide", "uxoricides", "uxoriousness", "uzbeg", "uzbek", "uzbeks", "v day", "v sign", "v signs", "vaal", "vaasa", "vac", "vacancies", "vacancy", "vacantness", "vacation", "vacationer", "vacationers", "vacationist", "vacationists", "vacations", "vaccinating", "vaccination", "vaccinations", "vaccinator", "vaccinators", "vaccine", "vaccines", "vaccinia", "vaccinium", "vacciniums", "vacherin", "vacherins", "vacillation", "vacillations", "vacs", "vacua", "vacuities", "vacuity", "vacuolation", "vacuolations", "vacuole", "vacuoles", "vacuolization", "vacuousness", "vacuum", "vacuums", "vadodara", "vagabond", "vagabondage", "vagabonds", "vagaries", "vagary", "vagina", "vaginas", "vaginismus", "vaginitis", "vagrancy", "vagrant", "vagrants", "vagueness", "vagus", "vail", "vails", "vain", "vaingloriousness", "vainglory", "vair", "vairs", "vaishnava", "vaisya", "vaivode", "vaivodes", "vakeel", "vakeels", "val", "val d oise", "val de marne", "valance", "valances", "vale", "valediction", "valedictions", "valedictorian", "valedictorians", "valedictories", "valedictory", "valence", "valences", "valencia", "valenciennes", "valencies", "valency", "valentine", "valentines", "valentino", "valerian", "valerians", "valerie", "vales", "valet", "valeta", "valetas", "valets", "valetta", "valetudinarian", "valetudinarianism", "valetudinarians", "valetudinaries", "valetudinary", "valhalla", "vali", "valiance", "valiances", "valiancies", "valiancy", "validating", "validation", "validations", "validity", "validness", "valine", "valis", "valise", "valises", "valkyrie", "valkyries", "vallecula", "valletta", "valley", "valleys", "vallombrosa", "valois", "valonia", "valonias", "valor", "valorisation", "valorisations", "valorization", "valorizations", "valour", "valparaiso", "valse", "valses", "valuable", "valuableness", "valuables", "valuation", "valuations", "valuator", "valuators", "value", "valuer", "valuers", "values", "valuta", "valutas", "valve", "valvelet", "valvelets", "valves", "valvule", "valvules", "valvulitis", "vambrace", "vambraces", "vamp", "vamper", "vampers", "vampire", "vampires", "vampirism", "vampirisms", "vamps", "van", "vanadate", "vanadates", "vanadinite", "vanadium", "vanbrugh", "vancouver", "vandal", "vandalism", "vandals", "vanderbilt", "vandyke", "vandykes", "vane", "vanes", "vanessa", "vanessas", "vang", "vangs", "vanguard", "vanguards", "vanilla", "vanillas", "vanillin", "vanish", "vanisher", "vanishers", "vanishes", "vanishing", "vanishings", "vanishment", "vanishments", "vanities", "vanity", "vanquisher", "vanquishers", "vanquishment", "vanquishments", "vans", "vantage", "vantages", "vapidity", "vapidness", "vapor", "vaporetto", "vaporettos", "vaporimeter", "vaporimeters", "vaporing", "vaporisation", "vaporization", "vaporizer", "vaporizers", "vaporosities", "vaporosity", "vaporousness", "vapors", "vapour", "vapouring", "vapourings", "vapourishness", "vapours", "vaquero", "vaqueros", "var", "vara", "varactor", "varactors", "varan", "varanasi", "varangian", "varans", "varas", "varec", "varecs", "varese", "variability", "variable", "variableness", "variables", "variance", "variances", "variant", "variants", "variate", "variates", "variation", "variational", "variations", "varicella", "varicocele", "varicoceles", "varicosities", "varicosity", "varicotomies", "varicotomy", "variegation", "variegations", "varier", "variers", "varieties", "variety", "variola", "variolas", "variolation", "variolations", "variole", "varioles", "variolite", "varioloid", "variometer", "variometers", "variorum", "variorums", "variscite", "varistor", "varistors", "varityper", "varitypist", "varitypists", "varix", "varlet", "varletry", "varlets", "varment", "varments", "varmint", "varmints", "varna", "varnas", "varnish", "varnisher", "varnishers", "varnishes", "varsities", "varsity", "varuna", "varve", "varves", "vas", "vascularity", "vascularization", "vasculum", "vasculums", "vase", "vasectomies", "vasectomy", "vaseline", "vaselines", "vases", "vasoconstriction", "vasoconstrictor", "vasodilatation", "vasodilatations", "vasodilator", "vasodilators", "vasopressin", "vasopressor", "vasopressors", "vassal", "vassalage", "vassalages", "vassals", "vast", "vastitude", "vastitudes", "vastity", "vastness", "vastnesses", "vasts", "vat", "vatican", "vaticanism", "vaticide", "vaticides", "vaticination", "vaticinator", "vaticinators", "vats", "vaucluse", "vaud", "vaudeville", "vaudevilles", "vaudevillian", "vaudevillians", "vaughan", "vault", "vaulter", "vaulters", "vaulting", "vaultings", "vaults", "vaunt", "vaunt courier", "vaunter", "vaunters", "vaunts", "vavasories", "vavasory", "vaward", "veadar", "veal", "vealer", "vealers", "veals", "vector", "vectors", "veda", "vedalia", "vedalias", "vedanta", "vedda", "veddoid", "vedette", "vedettes", "vedic", "vee", "veep", "veeps", "veer", "veeries", "veering", "veerings", "veers", "veery", "vees", "veg", "vega", "vegan", "vegans", "vegas", "veges", "vegetable", "vegetables", "vegetarian", "vegetarianism", "vegetarians", "vegetation", "veggie", "veggies", "vehemence", "vehicle", "vehicles", "vehmgericht", "veil", "veiling", "veilings", "veils", "vein", "veining", "veinings", "veinlet", "veinlets", "veins", "veinstone", "vela", "velamen", "velarium", "velariums", "velarization", "velarizations", "velcro", "veld", "velds", "veldskoen", "veldt", "veldts", "veleta", "veletas", "veliger", "veligers", "velitation", "velitations", "velleity", "vellication", "vellications", "vellum", "vellums", "velocipede", "velocipedes", "velocities", "velocity", "velodrome", "velodromes", "velour", "velours", "velum", "velure", "velvet", "velveteen", "velveteens", "velvetiness", "velvets", "vena", "venality", "venation", "vendace", "vendaces", "vendean", "vendee", "vendees", "vender", "venders", "vendetta", "vendettas", "vendibility", "vendible", "vendibleness", "vending", "vendition", "venditions", "vendor", "vendors", "vendue", "veneer", "veneerer", "veneerers", "veneering", "veneerings", "veneers", "venepuncture", "veneration", "venerations", "venerator", "venerators", "venereologist", "venereologists", "venereology", "venerer", "venerers", "venery", "venesection", "venesections", "venetia", "venetian", "venetians", "veneto", "venezia", "venezuela", "venezuelan", "venezuelans", "vengeance", "vengeances", "vengefulness", "veniality", "venice", "venin", "venins", "venipuncture", "venireman", "venisection", "venison", "venography", "venom", "venomousness", "venoms", "venosity", "vent", "ventage", "ventages", "ventail", "ventails", "venter", "venters", "ventilation", "ventilations", "ventilator", "ventilators", "venting", "ventings", "ventose", "ventosity", "ventricle", "ventricles", "ventriculography", "ventriculus", "ventriloquism", "ventriloquist", "ventriloquists", "ventriloquy", "vents", "venture", "ventures", "venturesomeness", "venturi", "venturis", "venturousness", "venue", "venues", "venule", "venules", "venus", "venus s flytrap", "venus s girdle", "venusberg", "venuses", "venusian", "venusians", "vera", "veraciousness", "veracities", "veracity", "veracruz", "veranda", "verandah", "verandahs", "verandas", "veratrine", "veratrum", "veratrums", "verb", "verbal", "verbalisation", "verbalisations", "verbalism", "verbalisms", "verbalist", "verbalists", "verbality", "verbalization", "verbalizations", "verbals", "verbena", "verbenas", "verbiage", "verbid", "verbids", "verbification", "verboseness", "verbosity", "verbs", "vercingetorix", "verdancy", "verde", "verderer", "verderers", "verdi", "verdict", "verdicts", "verdigris", "verdigrises", "verdin", "verdins", "verdite", "verditer", "verdun", "verdure", "verge", "verger", "vergers", "verges", "vergil", "verglas", "verglases", "veridicality", "veriest", "verifiability", "verification", "verifications", "verifier", "verifiers", "verisimilitude", "verism", "verismo", "verist", "verists", "veritableness", "verities", "verity", "verjuice", "verjuices", "verkrampte", "verkramptes", "verlaine", "verligte", "verligtes", "vermeer", "vermeil", "vermeils", "vermicelli", "vermicide", "vermicides", "vermiculation", "vermiculations", "vermiculite", "vermifuge", "vermifuges", "vermilion", "vermilions", "vermin", "vermination", "verminations", "vermis", "vermises", "vermont", "vermouth", "vermouths", "vernacular", "vernacularisation", "vernacularism", "vernacularisms", "vernacularization", "vernaculars", "vernalisation", "vernalisations", "vernalization", "vernalizations", "vernation", "vernations", "verne", "vernicle", "vernicles", "vernier", "verniers", "vernissage", "vernon", "verona", "veronal", "veronese", "veronica", "veronicas", "verruca", "verrucas", "vers", "versailles", "versant", "versatileness", "versatility", "verse", "verses", "verset", "versets", "versicle", "versicles", "versification", "versifications", "versifier", "versifiers", "versine", "versines", "version", "versions", "verso", "versos", "verst", "versts", "vert", "vertebra", "vertebras", "vertebrata", "vertebrate", "vertebrates", "vertebration", "vertebrations", "vertex", "vertexes", "vertical", "verticality", "verticalness", "verticals", "vertices", "verticil", "verticillaster", "verticillasters", "verticillium", "verticity", "vertigo", "vertigoes", "vertigos", "verts", "vertu", "vertus", "verulamium", "vervain", "vervains", "verve", "verves", "vervet", "vervets", "vesica", "vesicant", "vesicants", "vesication", "vesications", "vesicatories", "vesicatory", "vesicle", "vesicles", "vesiculation", "vespa", "vespas", "vespasian", "vesper", "vesperal", "vespers", "vespertilionid", "vespertilionidae", "vespiaries", "vespiary", "vespucci", "vessel", "vessels", "vest", "vest pocket", "vesta", "vestal", "vestals", "vestas", "vestiaries", "vestiary", "vestibule", "vestibules", "vestige", "vestiges", "vestigium", "vesting", "vestings", "vestment", "vestments", "vestries", "vestry", "vestryman", "vests", "vesture", "vestures", "vesuvianite", "vesuvius", "vet", "vetch", "vetches", "vetchling", "vetchlings", "veteran", "veterans", "veterinarian", "veterinarians", "veterinaries", "veterinary", "vetiver", "veto", "vetoes", "vets", "vexation", "vexations", "vexatiousness", "vexedness", "vexer", "vexers", "vexillaries", "vexillary", "vexillology", "vexillum", "viability", "viaduct", "viaducts", "vial", "vials", "viand", "viands", "viaticum", "viaticums", "viator", "viators", "vibes", "vibist", "vibists", "vibraculum", "vibraharp", "vibraharps", "vibrancy", "vibrant", "vibraphone", "vibraphones", "vibraphonist", "vibraphonists", "vibratile", "vibration", "vibrations", "vibrato", "vibrator", "vibrators", "vibratos", "vibrio", "vibrios", "vibriosis", "vibrissa", "vibrometer", "vibrometers", "viburnum", "viburnums", "vic", "vicar", "vicar general", "vicarage", "vicarages", "vicarate", "vicariate", "vicariates", "vicariousness", "vicars", "vicarship", "vicarships", "vice", "vice admiral", "vice admiralty", "vice chairman", "vice consulate", "vice consulship", "vice presidency", "vicegerencies", "vicegerency", "vicegerent", "vicegerents", "vicenza", "vicereine", "vicereines", "viceroy", "viceroyalties", "viceroyalty", "viceroys", "viceroyship", "viceroyships", "vices", "vichy", "vichyite", "vichyssoise", "vichyssoises", "vicinage", "vicinages", "vicinities", "vicinity", "viciousness", "vicissitude", "vicissitudes", "vicksburg", "vicky", "vicomte", "vicomtes", "vicomtesse", "vicomtesses", "victim", "victimisation", "victimisations", "victimiser", "victimisers", "victimization", "victimizations", "victimizer", "victimizers", "victims", "victor", "victoria", "victorian", "victoriana", "victorians", "victorias", "victories", "victorine", "victorines", "victoriousness", "victors", "victory", "victress", "victresses", "victrix", "victrixes", "victual", "victualler", "victuallers", "victuals", "video", "videocassette", "videocassettes", "videodisk", "videodisks", "videophone", "videophones", "videos", "videotape", "videotapes", "vidette", "videttes", "vie", "vienna", "vienne", "vientiane", "vier", "viers", "vies", "vietminh", "vietnam", "view", "viewer", "viewers", "viewfinder", "viewfinders", "viewing", "viewings", "viewpoint", "viewpoints", "views", "vigesimo quarto", "vigia", "vigias", "vigil", "vigilance", "vigilante", "vigilantes", "vigilantism", "vigils", "vignette", "vignetter", "vignetters", "vignettes", "vignetting", "vignettist", "vignettists", "vigo", "vigor", "vigorish", "vigorousness", "vigour", "vihara", "viharas", "vihuela", "vihuelas", "vijayawada", "viking", "vikings", "vilayet", "vilayets", "vileness", "vilification", "vilifications", "vilifier", "vilifiers", "villa", "villa lobos", "villadom", "village", "villager", "villagers", "villages", "villain", "villainage", "villainages", "villainess", "villainesses", "villainies", "villains", "villainy", "villanelle", "villanelles", "villanovan", "villas", "villein", "villeinage", "villeinages", "villeins", "villeneuve", "villiers", "villosity", "villus", "vilnius", "vim", "vimana", "vimanas", "vims", "vina", "vinaigrette", "vinaigrettes", "vinas", "vinasse", "vinblastine", "vinca", "vincennes", "vincent", "vincentian", "vincibility", "vincristine", "vinculum", "vindication", "vindications", "vindicator", "vindicators", "vindictiveness", "vine", "vined", "vinegar", "vinegars", "vineland", "vineries", "vinery", "vines", "vineyard", "vineyards", "vingt et un", "viniculture", "viniculturist", "viniculturists", "vinificator", "vinificators", "vinland", "vino", "vinos", "vinosity", "vintage", "vintager", "vintagers", "vintages", "vintner", "vintners", "viny", "vinyl", "vinylidene", "viol", "viola", "violas", "violation", "violations", "violator", "violators", "violence", "violences", "violet", "violets", "violin", "violinist", "violinists", "violins", "violist", "violists", "violoncello", "violoncellos", "violone", "violones", "viols", "viper", "vipers", "virago", "viragoes", "viragos", "virelay", "virelays", "vireo", "vireos", "virescence", "virga", "virgate", "virgates", "virgil", "virgin", "virgin s bower", "virginal", "virginals", "virginia", "virginian", "virginians", "virginity", "virginium", "virgins", "virgo", "virgos", "virgule", "virgules", "viricide", "viricides", "viridescence", "viridian", "viridity", "virilism", "virility", "virilization", "virion", "virions", "virl", "virls", "viroid", "viroids", "virology", "virosis", "virtu", "virtuality", "virtue", "virtues", "virtuosities", "virtuosity", "virtuoso", "virtuosos", "virtuousness", "virtus", "virucide", "virucides", "virulence", "virus", "viruses", "vis", "visa", "visage", "visages", "visas", "viscacha", "viscachas", "viscera", "viscerotonia", "viscidity", "viscometer", "viscometers", "viscometry", "visconti", "viscose", "viscosimeter", "viscosimeters", "viscosities", "viscosity", "viscount", "viscountcies", "viscountcy", "viscountess", "viscountesses", "viscounties", "viscounts", "viscounty", "viscousness", "viscum", "viscus", "vise", "vises", "vishnu", "vishnuism", "visibilities", "visibility", "visible", "visibleness", "visigoth", "visigoths", "vision", "visionaries", "visionariness", "visionary", "visions", "visit", "visitant", "visitants", "visitation", "visitations", "visites", "visiting", "visitings", "visitor", "visitors", "visits", "visor", "visors", "vista", "vistas", "vistula", "visual", "visualisation", "visualisations", "visualiser", "visualisers", "visualist", "visualists", "visualization", "visualizations", "visualizer", "visualizers", "visuals", "vita", "vital", "vitalisation", "vitaliser", "vitalisers", "vitalism", "vitalist", "vitalists", "vitalities", "vitality", "vitalization", "vitalizer", "vitalizers", "vitals", "vitamin", "vitamine", "vitamines", "vitamins", "vitas", "vitascope", "vitascopes", "vitellin", "vitellines", "vitellus", "vitiation", "vitiations", "vitiator", "vitiators", "viticetum", "viticetums", "viticulture", "vitiligo", "vitoria", "vitrain", "vitrescence", "vitrics", "vitrification", "vitrifications", "vitrine", "vitrines", "vitriol", "vitriolization", "vitriolizations", "vitriols", "vitruvius", "vitta", "vittle", "vittles", "vittoria", "vituperation", "vituperator", "vituperators", "viv", "vivaciousness", "vivacities", "vivacity", "vivarium", "vivariums", "viverrine", "vives", "vivian", "vividity", "vividness", "vivien", "vivification", "vivifying", "viviparism", "viviparity", "viviparousness", "vivisection", "vivisectionist", "vivisectionists", "vivisections", "vivisector", "vivisectors", "vixen", "vixens", "viyella", "viz", "vizard", "vizards", "vizcacha", "vizcachas", "vizier", "vizierate", "vizierates", "viziers", "viziership", "vizierships", "vizirate", "vizirates", "vizor", "vizors", "vizsla", "vizslas", "vladimir", "vladivostok", "vlei", "vleis", "vltava", "vocab", "vocable", "vocables", "vocabularies", "vocabulary", "vocal", "vocalise", "vocalises", "vocalism", "vocalisms", "vocalist", "vocalists", "vocality", "vocalization", "vocalizer", "vocalizers", "vocalizing", "vocalness", "vocals", "vocation", "vocations", "vocative", "vocatives", "voces", "vociferance", "vociferant", "vociferation", "vociferator", "vociferators", "vociferousness", "vodka", "vodkas", "vogue", "vogues", "vogul", "voguls", "voice", "voice over", "voice overs", "voicefulness", "voicelessness", "voices", "void", "voidance", "voidances", "voider", "voiders", "voiding", "voidings", "voidness", "voidnesses", "voids", "voile", "voiles", "voiture", "vol au vent", "volans", "volaries", "volary", "volatile", "volatileness", "volatiles", "volatilisation", "volatilities", "volatility", "volcanicity", "volcanism", "volcano", "volcanoes", "volcanologist", "volcanologists", "volcanology", "vole", "voles", "volga", "volgograd", "volition", "volkslied", "volley", "volleyer", "volleyers", "volleys", "volost", "volosts", "volplane", "volplanes", "volpone", "vols", "volsci", "volscian", "volscians", "volsung", "volsungs", "volt", "volta", "voltage", "voltages", "voltaic", "voltaire", "voltairean", "voltairian", "voltaism", "voltameter", "voltameters", "volte face", "voltes", "voltmeter", "voltmeters", "volts", "volturno", "volubility", "volume", "volumes", "volumeter", "volumeters", "voluminosity", "voluminousness", "voluntaries", "voluntariness", "voluntarism", "voluntary", "voluntaryism", "voluntaryist", "voluntaryists", "volunteer", "volunteers", "voluptuaries", "voluptuary", "voluptuousness", "volute", "volutes", "volution", "volutions", "volva", "volvas", "volvulus", "volvuluses", "vomer", "vomers", "vomica", "vomicas", "vomit", "vomiting", "vomitings", "vomitive", "vomito", "vomitories", "vomitorium", "vomitoriums", "vomitory", "vomits", "vomiturition", "vomitus", "vomituses", "voodoo", "voodooism", "voodooist", "voodooists", "voodoos", "voortrekker", "voortrekkers", "voraciousness", "voracities", "voracity", "voronezh", "vortex", "vortexes", "vorticella", "vortices", "vorticism", "vorticity", "vosges", "voss", "vostok", "votaries", "votary", "vote", "voter", "voters", "votes", "voting", "votress", "votresses", "vouch", "vouchee", "vouchees", "voucher", "vouchers", "vouches", "vouchsafement", "vouchsafements", "vouge", "vouges", "voussoir", "voussoirs", "vouvray", "vow", "vowel", "vowelize", "vowelizes", "vowels", "vower", "vowers", "vows", "vox", "voyage", "voyager", "voyagers", "voyages", "voyageur", "voyageurs", "voyeur", "voyeurism", "voyeurs", "vraisemblance", "vraisemblances", "vug", "vugs", "vulcan", "vulcanalia", "vulcanisation", "vulcanisations", "vulcanism", "vulcanist", "vulcanists", "vulcanite", "vulcanization", "vulcanizations", "vulcanologist", "vulcanologists", "vulcanology", "vulcans", "vulgarian", "vulgarians", "vulgarisation", "vulgarisations", "vulgariser", "vulgarisers", "vulgarism", "vulgarisms", "vulgarities", "vulgarity", "vulgarization", "vulgarizations", "vulgate", "vulgates", "vulgus", "vulguses", "vulnerability", "vulneraries", "vulnerary", "vulpecula", "vulpicide", "vulpicides", "vulpinite", "vulture", "vultures", "vulva", "vulvas", "vulvitis", "waaf", "waafs", "wabble", "wabbler", "wabblers", "wabbles", "wack", "wacke", "wackiness", "wacks", "waco", "wad", "wadding", "waddings", "waddle", "waddles", "wade", "wader", "waders", "wades", "wadi", "wadies", "wading", "wadings", "wadis", "wadmal", "wads", "wadset", "wadsets", "wadsetter", "wadsetters", "wae", "wafd", "wafer", "wafer thin", "wafers", "waff", "waffle", "waffles", "waffs", "waft", "waftage", "waftages", "wafter", "wafters", "wafts", "wafture", "waftures", "wag", "wage", "wage plug", "wage plugs", "wager", "wagerer", "wagerers", "wagers", "wages", "waggeries", "waggery", "waggishness", "waggle", "waggles", "waggon", "waggoner", "waggoners", "waggons", "wagner", "wagnerism", "wagnerist", "wagon", "wagon lit", "wagon lits", "wagonage", "wagonages", "wagoner", "wagoners", "wagonette", "wagonettes", "wagons", "wags", "wagtail", "wagtails", "wahine", "wahines", "wahoo", "wahoos", "waif", "waifs", "waikiki", "wail", "wailer", "wailers", "wailing", "wailings", "wails", "wain", "wainage", "wainages", "wains", "wainscot", "wainscoting", "wainscotings", "wainscots", "wainscotting", "wainscottings", "wainwright", "wainwrights", "waist", "waistband", "waistbands", "waistcloth", "waistcloths", "waistcoat", "waistcoating", "waistcoats", "waister", "waisters", "waistline", "waistlines", "waists", "wait", "wait a bit", "waite", "waiter", "waiters", "waiting", "waitings", "waitress", "waitresses", "waits", "waiver", "waivers", "waka", "wakas", "wake", "wake robin", "wakefield", "wakefulness", "waken", "wakening", "wakenings", "wakens", "waker", "wakers", "wakes", "waking", "wakings", "walachian", "walden", "waldenses", "waldensian", "waldgrave", "waldgraves", "waldheim", "wale", "wales", "walhalla", "waling", "walk", "walk on", "walk through", "walk throughs", "walk up", "walk ups", "walkabout", "walkabouts", "walker", "walkers", "walkie talkie", "walkie talkies", "walking", "walkings", "walks", "walkway", "walkways", "walky talkies", "walky talky", "walkyrie", "walkyries", "wall", "walla", "wallaba", "wallabas", "wallabies", "wallaby", "wallace", "wallachian", "wallah", "wallahs", "wallaroo", "wallaroos", "wallas", "wallasey", "wallet", "wallets", "wallflower", "wallflowers", "wallies", "wallis", "walloon", "walloons", "wallop", "walloper", "wallopers", "walloping", "wallopings", "wallops", "wallow", "wallower", "wallowers", "wallows", "wallpaper", "wallpapers", "walls", "wally", "walnut", "walnuts", "walpole", "walrus", "walruses", "walsall", "walsingham", "walt", "walter", "walthamstow", "walton", "waltonian", "waltz", "waltzer", "waltzers", "waltzes", "wamble", "wambles", "wambliness", "wame", "wames", "wammus", "wammuses", "wampee", "wampees", "wampum", "wampumpeag", "wampumpeags", "wampums", "wampus", "wampuses", "wamus", "wamuses", "wan", "wanamaker", "wand", "wanda", "wander", "wanderer", "wanderers", "wandering", "wanderings", "wanderjahr", "wanderlust", "wanderoo", "wanderoos", "wanders", "wandle", "wandoo", "wands", "wandsworth", "wane", "wanes", "wangle", "wangler", "wanglers", "wangles", "wangling", "wanglings", "wanigan", "wanigans", "waning", "wanings", "wanion", "wannabe", "wannabee", "wannabees", "wannabes", "wanness", "wans", "want", "wantage", "wanter", "wanters", "wanton", "wantonness", "wantons", "wants", "wap", "wapentake", "wapentakes", "wapinschaw", "wapinschaws", "wapiti", "wapitis", "wappenshaw", "wappenshaws", "waps", "war", "war horse", "war horses", "war weary", "waratah", "waratahs", "warbeck", "warble", "warbler", "warblers", "warbles", "ward", "warden", "wardenries", "wardenry", "wardens", "wardenship", "wardenships", "warder", "warders", "wardress", "wardresses", "wardrobe", "wardrobes", "wardroom", "wards", "wardship", "ware", "warehouse", "warehouseman", "warehouses", "warehousing", "warehousings", "wares", "warfare", "warfarin", "warhead", "warheads", "warhol", "wariness", "warison", "wark", "warks", "warley", "warlock", "warlocks", "warlord", "warlords", "warm", "warm up", "warm ups", "warmer", "warmers", "warming", "warmings", "warmness", "warmonger", "warmongering", "warmongers", "warms", "warmth", "warner", "warners", "warning", "warnings", "warp", "warpath", "warpaths", "warper", "warpers", "warping", "warpings", "warplane", "warplanes", "warps", "warragal", "warragals", "warrant", "warrantableness", "warrantee", "warrantees", "warranter", "warranters", "warranties", "warrantor", "warrantors", "warrants", "warranty", "warred", "warren", "warrener", "warreners", "warrens", "warrigal", "warrigals", "warring", "warrington", "warrior", "warriors", "wars", "warsaw", "warship", "warships", "warsle", "warsles", "wart", "wartime", "warts", "wartweed", "wartweeds", "wartwort", "wartworts", "warwick", "warwickshire", "wase", "wases", "wash", "wash and wear", "wash leather", "wash leathers", "wash up", "washer", "washerman", "washers", "washerwoman", "washery", "washes", "washiness", "washing", "washing up", "washings", "washington", "washrag", "washrags", "washroom", "washrooms", "wasn t", "wasp", "waspishness", "wasps", "wassail", "wassailer", "wassailers", "wassails", "wastage", "wastages", "waste", "wastefulness", "wasteland", "wastelands", "wastelot", "wasteness", "wastepaper", "waster", "wasters", "wastery", "wastes", "wasting", "wastings", "wastrel", "wastrels", "wastry", "wat", "watap", "watch", "watch glass", "watch glasses", "watchband", "watchbands", "watcher", "watchers", "watches", "watchfulness", "watching", "watchmaker", "watchmakers", "watchman", "watchstrap", "watchstraps", "watchword", "watchwords", "water", "water bath", "water rate", "water rates", "water skiing", "waterage", "waterages", "watercolor", "watercolors", "watercourse", "watercourses", "watercress", "watercresses", "waterer", "waterers", "waterfall", "waterfalls", "waterford", "waterfront", "waterfronts", "waterhouse", "wateriness", "watering", "waterings", "waterishness", "waterloo", "waterloos", "waterman", "watermanship", "watermark", "watermarks", "waterproof", "waterproofing", "waterproofs", "waters", "watershed", "watersheds", "waterside", "watersides", "watertightness", "waterway", "waterways", "waterworks", "watford", "wats", "watson", "watt", "watt hour", "watt hours", "wattage", "wattages", "watteau", "wattle", "wattles", "wattmeter", "wattmeters", "watts", "waucht", "wauchts", "waught", "waughts", "wauk", "wauks", "wave", "waveband", "wavebands", "waveform", "waveforms", "waveguide", "waveguides", "wavelength", "wavelengths", "wavelet", "wavelets", "wavell", "wavellite", "wavemeter", "wavemeters", "waver", "waverer", "waverers", "wavering", "waverings", "waverley", "wavers", "waves", "wavey", "waveys", "waviness", "waving", "wavings", "waw", "waws", "wax", "wax chandler", "wax chandlers", "waxberries", "waxberry", "waxer", "waxers", "waxes", "waxiness", "waxing", "waxings", "waxplant", "waxwing", "waxwings", "waxwork", "waxworks", "way", "wayfarer", "wayfarers", "wayfaring", "wayfarings", "waylayer", "waylayers", "wayne", "ways", "wayside", "waysides", "wayzgoose", "wayzgooses", "we ve", "weak mindedness", "weakener", "weakeners", "weakening", "weakfish", "weakfishes", "weakliness", "weakling", "weaklings", "weakness", "weaknesses", "weal", "weald", "wealds", "weals", "wealth", "wealthiness", "wean", "weaner", "weaners", "weaning", "weanling", "weanlings", "weans", "weapon", "weaponry", "weapons", "wear", "wearability", "wearable", "wearer", "wearers", "weariness", "wearing", "wearings", "wearisomeness", "wears", "weasand", "weasands", "weasel", "weasels", "weather", "weathercock", "weathercocks", "weathering", "weatherings", "weatherman", "weathers", "weave", "weaver", "weavers", "weaves", "weaving", "weavings", "weazand", "weazands", "web", "webb", "webbing", "webbings", "weber", "webers", "webs", "webster", "websters", "webwheel", "webwheels", "webworm", "wed", "wedding", "weddings", "wedekind", "wedeln", "wedelns", "wedge", "wedges", "wedgie", "wedgies", "wedgwood", "wedlock", "wednesday", "wednesdays", "weds", "wee", "wee wee", "wee wees", "weed", "weeder", "weeders", "weediness", "weedkiller", "weedkillers", "weeds", "week", "weekday", "weekdays", "weekend", "weekender", "weekenders", "weekends", "weeklies", "weekly", "weeknight", "weeknights", "weeks", "weelkes", "weenies", "weeny", "weeny bopper", "weeny boppers", "weep", "weeper", "weepers", "weeping", "weepings", "weeps", "wees", "weever", "weevers", "weevil", "weevils", "weevily", "weft", "weftes", "wefts", "wehrmacht", "weigela", "weigelas", "weigh", "weigh in", "weighbridge", "weighbridges", "weigher", "weighers", "weighing", "weighings", "weighs", "weight", "weightiness", "weighting", "weightings", "weightlessness", "weights", "weill", "weimar", "weimaraner", "weir", "weird", "weirdie", "weirdies", "weirdness", "weirdo", "weirdos", "weirds", "weirs", "weismannism", "weka", "wekas", "welcher", "welchers", "welcome", "welcomeness", "welcomes", "welcoming", "weld", "weldability", "welder", "welders", "welding", "weldings", "weldment", "weldments", "weldon", "weldor", "weldors", "welds", "welfare", "welfarism", "welkin", "welkins", "well", "well being", "well beloved", "well wisher", "well wishers", "well wishing", "welles", "wellingborough", "wellington", "wellness", "wells", "welsh", "welsher", "welshers", "welshes", "welshman", "welshwoman", "welt", "weltanschauung", "welter", "welters", "weltpolitik", "welts", "weltschmerz", "welwitschia", "welwitschias", "wembley", "wemyss", "wen", "wench", "wencher", "wenchers", "wenches", "wendish", "wendy", "wens", "wensleydale", "wentletrap", "wentletraps", "wentworth", "weregild", "weregilds", "weren t", "werewolf", "wergild", "wergilds", "wernerite", "werwolf", "weser", "wesker", "wesley", "wesleyan", "wesleyanism", "wesleyans", "wessex", "west", "wester", "westerlies", "westerly", "western", "westerner", "westerners", "westernisation", "westernisations", "westernism", "westernization", "westernizations", "westerns", "westers", "westfalen", "westing", "westings", "westminster", "westmorland", "weston", "weston super mare", "westphalia", "westphalian", "wests", "westward", "westwards", "wet", "wetback", "wetbacks", "wether", "wethers", "wetland", "wetlands", "wetness", "wets", "wetter", "wetterhorn", "wetting", "wexford", "wey", "weymouth", "weys", "whack", "whacker", "whackers", "whacking", "whackings", "whacks", "whale", "whalebone", "whalebones", "whaler", "whalers", "whales", "whaling", "whalings", "wham", "whammed", "whamming", "whams", "whang", "whangee", "whangees", "whangs", "whap", "whaps", "whare", "wharf", "wharfage", "wharfages", "wharfie", "wharfies", "wharfinger", "wharfingers", "wharfs", "wharton", "wharve", "wharves", "whatnot", "whatnots", "whatsis", "whaup", "whaups", "wheal", "wheals", "wheat", "wheatear", "wheatears", "wheats", "wheatstone", "wheedling", "wheedlings", "wheel", "wheelbarrow", "wheelbarrows", "wheelbase", "wheelbases", "wheeler", "wheeler dealer", "wheeler dealers", "wheelers", "wheelie", "wheelies", "wheeling", "wheelings", "wheelman", "wheels", "wheelwork", "wheelworks", "wheelwright", "wheelwrights", "wheeze", "wheezes", "wheeziness", "whelk", "whelks", "whelp", "whelps", "when", "whens", "where", "whereabouts", "whereas", "wherefore", "wheres", "wherewithal", "wherries", "wherry", "whet", "whets", "whetstone", "whetstones", "whetter", "whetters", "whey", "wheyishness", "wheys", "whidah", "whiff", "whiffer", "whiffers", "whiffet", "whiffets", "whiffler", "whifflers", "whiffletree", "whiffletrees", "whiffs", "whig", "whiggery", "whiggishness", "whiggism", "whigmaleerie", "whigmaleeries", "whigs", "while", "whiles", "whim", "whimbrel", "whimbrels", "whimper", "whimperer", "whimperers", "whimpers", "whims", "whimsey", "whimseys", "whimsicality", "whimsies", "whimsy", "whin", "whinberries", "whinberry", "whinchat", "whinchats", "whine", "whiner", "whiners", "whines", "whinge", "whinges", "whinnies", "whinny", "whins", "whinstone", "whinstones", "whip", "whip round", "whip rounds", "whip tailed", "whipcord", "whipcords", "whiplash", "whiplashes", "whipper", "whipper in", "whippers", "whippersnapper", "whippersnappers", "whippet", "whippets", "whipping", "whippings", "whippletree", "whippletrees", "whippoorwill", "whippoorwills", "whips", "whipsaw", "whipsaws", "whipstall", "whipstalls", "whipworm", "whipworms", "whir", "whirl", "whirligig", "whirligigs", "whirling", "whirlings", "whirlpool", "whirlpools", "whirls", "whirlwind", "whirlwinds", "whirly", "whirlybird", "whirlybirds", "whirr", "whirring", "whirrings", "whirrs", "whirs", "whish", "whishes", "whisk", "whisker", "whiskers", "whiskey", "whiskeys", "whiskies", "whisks", "whisky", "whisper", "whisperer", "whisperers", "whispering", "whisperings", "whispers", "whist", "whistle", "whistler", "whistlers", "whistles", "whistling", "whistlings", "whists", "whit", "whitaker", "whitby", "white", "white eye", "whitebait", "whitebaits", "whitebeam", "whitebeams", "whiteboy", "whitecap", "whitecaps", "whitechapel", "whitedamp", "whitefish", "whitefishes", "whitehall", "whitelaw", "whitener", "whiteners", "whiteness", "whitening", "whitenings", "whites", "whitesmith", "whitesmiths", "whitethorn", "whitethorns", "whitethroat", "whitethroats", "whitewall", "whitewash", "whitewashes", "whitewing", "whitewings", "whitewood", "whitewoods", "whiting", "whitings", "whitishness", "whitleather", "whitleathers", "whitlow", "whitlows", "whitman", "whits", "whitsun", "whitsunday", "whitsuntide", "whittington", "whittle", "whittler", "whittlers", "whittles", "whittling", "whity", "whiz", "whizbang", "whizbangs", "whizz", "whizzes", "who", "who d", "who ll", "who s", "whole", "wholefood", "wholefoods", "wholeheartedness", "wholeness", "wholes", "wholesale", "wholesaler", "wholesalers", "wholesales", "wholesomeness", "wholism", "whoop", "whoopee", "whoopees", "whooper", "whoopers", "whoops", "whoosh", "whooshes", "whop", "whopper", "whoppers", "whops", "whore", "whoredom", "whorehouse", "whorehouses", "whoremaster", "whoremonger", "whoremongers", "whores", "whoreson", "whoresons", "whorl", "whorls", "whort", "whortleberries", "whortleberry", "why", "whydah", "whys", "wichita", "wick", "wickedness", "wicker", "wickers", "wickerwork", "wicket", "wicket keeper", "wicket keepers", "wickets", "wicking", "wickiup", "wickiups", "wicklow", "wicks", "widdies", "widdy", "wide", "wide awake", "wide awakeness", "widener", "wideners", "wideness", "widening", "wides", "widgeon", "widgeons", "widget", "widgets", "widgie", "widgies", "widnes", "widow", "widower", "widowers", "widowhood", "widows", "width", "widths", "wielder", "wielders", "wien", "wiener", "wieners", "wienie", "wienies", "wiesbaden", "wife", "wifehood", "wig", "wigan", "wigans", "wigeon", "wigeons", "wiggery", "wigging", "wiggings", "wiggle", "wiggler", "wigglers", "wiggles", "wight", "wights", "wigs", "wigwag", "wigwags", "wigwam", "wigwams", "wilberforce", "wild", "wildcatter", "wilde", "wildebeest", "wildebeests", "wilderness", "wildernesses", "wildfire", "wildfires", "wilding", "wildings", "wildlife", "wildness", "wilds", "wile", "wiles", "wilfred", "wilfrid", "wilfulness", "wilhelm", "wilhelmina", "wilhelmine", "wilhelmshaven", "wilhelmstrasse", "wiliness", "wilkins", "will", "will lessness", "will o the wisp", "will o the wisps", "willemite", "willer", "willers", "willet", "willets", "william", "williams", "williamsburg", "williamson", "willie", "willies", "willing", "willingness", "willis", "williwaw", "williwaws", "willow", "willows", "willpower", "wills", "willy", "willy willies", "willy willy", "wilma", "wilmington", "wilson", "wilt", "wilting", "wilton", "wiltons", "wilts", "wiltshire", "wimble", "wimbledon", "wimbles", "wimp", "wimple", "wimples", "wimps", "win", "wince", "winces", "wincey", "winceyette", "winceys", "winch", "winches", "winchester", "wind", "wind sucking", "windage", "windages", "windbaggery", "windbreaker", "windbreakers", "windburn", "windburns", "windcheater", "windcheaters", "winder", "windermere", "winders", "windfall", "windfalls", "windhoek", "windiness", "winding", "winding sheet", "winding sheets", "windings", "windjammer", "windjammers", "windlass", "windlasses", "windle", "windles", "windlestraw", "windlestraws", "windmill", "windmills", "window", "window dresser", "window dressers", "window dressing", "window shopper", "window shoppers", "windows", "windpipe", "windpipes", "windrow", "windrows", "winds", "windscreen", "windscreens", "windshield", "windshields", "windsor", "windstorm", "windward", "windwards", "wine", "winemaker", "winemakers", "winemaking", "wineries", "winery", "wines", "wing", "wing case", "wingding", "wingdings", "winger", "wingers", "winges", "winglet", "winglets", "wingman", "wings", "wingspan", "wingspans", "winifred", "wink", "winker", "winkers", "winkle", "winkles", "winks", "winnebago", "winnebagos", "winner", "winners", "winnie", "winning", "winningness", "winnings", "winnipeg", "winnow", "winnowing", "winnowings", "winnows", "wino", "winona", "winos", "wins", "winsomeness", "winston", "winston salem", "winter", "wintergreen", "winterization", "winterkill", "winterkills", "winters", "wintertime", "wintle", "wintles", "wintriness", "winze", "winzes", "wipe", "wiper", "wipers", "wipes", "wire", "wire puller", "wireless", "wirelesses", "wireman", "wirer", "wirers", "wires", "wiretap", "wiretaps", "wirework", "wiring", "wirings", "wirral", "wisconsin", "wisdom", "wisdoms", "wise", "wiseacre", "wiseacres", "wisecrack", "wisecracks", "wiseness", "wisent", "wisents", "wises", "wish", "wish wash", "wishbone", "wishbones", "wishes", "wishfulness", "wishing", "wishings", "wisp", "wisps", "wistaria", "wistarias", "wisteria", "wisterias", "wistfulness", "wit", "witan", "witch", "witch elm", "witch hunt", "witch hunts", "witchcraft", "witchery", "witches", "witches broom", "witching", "witchings", "wite", "witenagemot", "witenagemots", "wites", "withdrawal", "withdrawals", "withdrawer", "withdrawers", "withe", "witheredness", "withering", "witherings", "witherite", "withers", "withes", "withholder", "withholders", "withholding", "withies", "withstander", "withstanders", "withy", "witlessness", "witling", "witlings", "witloof", "witloofs", "witness", "witnesses", "wits", "wittgenstein", "witticism", "witticisms", "wittiness", "wittol", "wittols", "witwatersrand", "wivern", "wiverns", "wives", "wiz", "wizard", "wizardry", "wizards", "wizen", "wizens", "woad", "woads", "wobbegong", "wobbegongs", "wobble", "wobbler", "wobblers", "wobbles", "woden", "wodge", "wodges", "woe", "woefulness", "woes", "wofulness", "woggle", "woggles", "wok", "woking", "woks", "wold", "wolds", "wolf", "wolfe", "wolfer", "wolfers", "wolfgang", "wolfit", "wolfram", "wolframite", "wolfs", "wolfsbane", "wolfsbanes", "wolfson", "wollastonite", "wollies", "wollongong", "wolly", "wolof", "wolsey", "wolver", "wolverhampton", "wolverine", "wolverines", "wolvers", "wolves", "woman", "woman hater", "woman haters", "womanhood", "womaniser", "womanisers", "womanishness", "womanizer", "womanizers", "womankind", "womanliness", "womans", "womb", "wombat", "wombats", "wombs", "women", "womenfolk", "womenfolks", "womera", "womeras", "won", "wonder", "wonderer", "wonderers", "wonderfulness", "wonderland", "wonderlands", "wonderment", "wonders", "wondrousness", "wonga wonga", "wonk", "wonks", "wons", "wont", "wontedness", "wonts", "wood", "wood swallow", "woodbine", "woodbines", "woodchuck", "woodchucks", "woodcock", "woodcocks", "woodcraft", "woodcut", "woodcuts", "wooden headedness", "woodenness", "woodhouse", "woodhouses", "woodiness", "woodland", "woodlands", "woodlouse", "woodman", "woodpecker", "woodpeckers", "woodrow", "woodruff", "woods", "woodshed", "woodsheds", "woodsia", "woodsman", "woodstock", "woodwind", "woodwinds", "woodwork", "woodworker", "woodworking", "woodworks", "wooer", "wooers", "woof", "woofer", "woofers", "woofs", "wooing", "wooings", "wool", "woolen", "woolens", "woolf", "woolfell", "woolfells", "woollen", "woollens", "woollies", "woolliness", "woolly", "woollybutt", "woolpack", "woolpacks", "wools", "woolsack", "woolshed", "woolsheds", "woolworth", "woomera", "woomerang", "woomerangs", "woomeras", "woorali", "wooralis", "woosh", "wooshes", "wooster", "wootz", "wooziness", "worcester", "worcestershire", "word", "word lore", "word painter", "word painting", "word splitting", "wordage", "wordages", "wordbook", "wordbooks", "wordbreak", "wordiness", "wording", "wordings", "wordplay", "words", "wordsmith", "wordsmiths", "wordsworth", "wordsworthian", "work", "work in", "work study", "workability", "workableness", "workbench", "workbenches", "workbook", "workbooks", "workbox", "workboxes", "worker", "workers", "workforce", "workforces", "workhorse", "workhorses", "workhouse", "workhouses", "working", "workings", "workload", "workloads", "workman", "workmanship", "workmate", "workmates", "workpiece", "workpieces", "workplace", "workplaces", "workroom", "workrooms", "works", "worksheet", "worksheets", "workshop", "workshops", "worksop", "workspace", "workstation", "workstations", "worktable", "worktables", "world", "world beater", "world beaters", "world weariness", "worldliness", "worldling", "worldlings", "worldly mindedness", "worlds", "worm", "wormer", "wormers", "worms", "wormwood", "wormwoods", "worrier", "worriers", "worries", "worriment", "worriments", "worry", "worrying", "worryings", "worrywart", "worrywarts", "worse", "worseness", "worsening", "worship", "worshipfulness", "worshipper", "worshippers", "worships", "worst", "worsted", "worsteds", "worsts", "wort", "worth", "worthies", "worthiness", "worthlessness", "worths", "worthy", "worts", "wotan", "would be", "wouldn t", "wound", "wounded", "wounding", "woundings", "wounds", "woundwort", "woundworts", "wourali", "wouralis", "wow", "wows", "wowser", "wowsers", "wrack", "wracks", "wraith", "wraiths", "wrangle", "wrangler", "wranglers", "wrangles", "wrangling", "wranglings", "wrap", "wraparound", "wraparounds", "wrapper", "wrappers", "wrapping", "wrappings", "wrapround", "wraprounds", "wraps", "wrasse", "wrasses", "wrath", "wrathiness", "wraths", "wreaker", "wreakers", "wreath", "wreather", "wreathers", "wreathes", "wreaths", "wreck", "wreckage", "wreckages", "wrecker", "wreckers", "wreckfish", "wrecking", "wreckings", "wrecks", "wrekin", "wren", "wren tit", "wrench", "wrenches", "wrens", "wrest", "wrester", "wresters", "wrestle", "wrestler", "wrestlers", "wrestles", "wrestling", "wrestlings", "wrests", "wretch", "wretchedness", "wretches", "wrexham", "wrick", "wricks", "wriggle", "wriggler", "wrigglers", "wriggles", "wright", "wrights", "wring", "wringer", "wringers", "wrings", "wrinkle", "wrinkles", "wrist", "wrist drop", "wristband", "wristbands", "wristlet", "wristlets", "wrists", "writ", "write down", "write downs", "write in", "write ins", "write off", "write offs", "writer", "writers", "writes", "writhe", "writhes", "writing", "writings", "writs", "written", "wrong", "wrong headedness", "wronger", "wrongers", "wrongfulness", "wrongness", "wrongs", "wrybill", "wrybills", "wryneck", "wrynecks", "wryness", "wuhan", "wulfenite", "wunderkind", "wuppertal", "wurley", "wurleys", "wurst", "wursts", "wurtzite", "wus", "wuss", "wyatt", "wych elm", "wych hazel", "wycliffe", "wycliffite", "wye", "wyes", "wykeham", "wynd", "wyndham", "wynds", "wynn", "wynne", "wynns", "wyoming", "wyte", "wytes", "wyvern", "wyverns", "x axis", "x chromosome", "x chromosomes", "x height", "x heights", "xanthate", "xanthates", "xanthe", "xanthein", "xanthene", "xanthin", "xanthine", "xanthippe", "xanthium", "xanthochroism", "xanthoma", "xanthomas", "xanthophyll", "xantippe", "xavier", "xebec", "xebecs", "xenia", "xenocrates", "xenocryst", "xenocrysts", "xenogamy", "xenogenesis", "xenoglossia", "xenograft", "xenografts", "xenolith", "xenoliths", "xenon", "xenophanes", "xenophile", "xenophiles", "xenophobe", "xenophobes", "xenophobia", "xenophon", "xenotime", "xeranthemum", "xeranthemums", "xeres", "xeroderma", "xerography", "xerophagy", "xerophthalmia", "xerophyte", "xerophytes", "xerosis", "xerox", "xeroxes", "xerxes", "xhosa", "xhosas", "ximenes", "ximenez", "xiphisternum", "xiphisternums", "xiphoid", "xiphosuran", "xiphosurans", "xmas", "xmases", "xoanon", "xylem", "xylene", "xylenes", "xylocarp", "xylocarps", "xylograph", "xylographer", "xylographers", "xylographs", "xylography", "xylol", "xylols", "xylophage", "xylophages", "xylophone", "xylophones", "xylophonist", "xylophonists", "xylose", "xylyl", "xylyls", "xyst", "xyster", "xysters", "xysts", "y axis", "y chromosome", "y chromosomes", "y level", "y levels", "yabber", "yabbers", "yabbies", "yabby", "yacca", "yaccas", "yacht", "yachting", "yachtings", "yachts", "yachtsman", "yachtsmanship", "yachtswoman", "yack", "yackety yak", "yacks", "yaffle", "yaffles", "yahoo", "yahoos", "yahweh", "yak", "yakety yak", "yakka", "yaks", "yakut", "yakuts", "yakutsk", "yale", "yales", "yalta", "yam", "yama", "yamani", "yamen", "yamens", "yammer", "yammers", "yams", "yangtze", "yank", "yankee", "yankeedom", "yankeeism", "yankees", "yanks", "yap", "yapok", "yapoks", "yapon", "yapons", "yapp", "yapper", "yappers", "yapps", "yaps", "yaqui", "yarborough", "yard", "yardage", "yardages", "yardang", "yardangs", "yardbird", "yardbirds", "yardman", "yardmaster", "yardmasters", "yards", "yardstick", "yardsticks", "yarmouth", "yarmulka", "yarmulkas", "yarmulke", "yarmulkes", "yarn", "yarns", "yaroslavl", "yarraman", "yarramans", "yarrow", "yarrows", "yashmak", "yashmaks", "yataghan", "yataghans", "yate", "yatter", "yatters", "yaud", "yauds", "yaunde", "yaup", "yaupon", "yaupons", "yaw", "yawl", "yawls", "yawn", "yawner", "yawners", "yawns", "yawp", "yawper", "yawpers", "yawps", "yaws", "yea", "yeanling", "yeanlings", "year", "year end", "year ends", "yearlies", "yearling", "yearlings", "yearly", "yearner", "yearners", "yearning", "yearnings", "years", "yeas", "yeast", "yeastiness", "yeasts", "yeats", "yegg", "yeggman", "yehudi", "yeldring", "yeldrings", "yelk", "yelks", "yell", "yelling", "yellings", "yellow", "yellowback", "yellowbacks", "yellowbellies", "yellowbelly", "yellowknife", "yellowness", "yellows", "yellowstone", "yells", "yelp", "yelper", "yelpers", "yelping", "yelpings", "yelps", "yemen", "yen", "yens", "yenta", "yentas", "yeoman", "yeomanry", "yerba", "yerbas", "yerevan", "yes", "yeses", "yeshiva", "yeshivas", "yesterday", "yesterdays", "yestereve", "yesterevening", "yesterevenings", "yestereves", "yesternight", "yesteryear", "yesteryears", "yeti", "yetis", "yett", "yetts", "yeuk", "yeuks", "yew", "yews", "yggdrasil", "yiddish", "yield", "yielding", "yieldingness", "yieldings", "yields", "yike", "yikes", "yip", "yips", "ylang ylang", "ylem", "yo yo", "yo yos", "yob", "yobbo", "yobboes", "yobbos", "yobs", "yod", "yodel", "yodeler", "yodelers", "yodeling", "yodeller", "yodellers", "yodels", "yodle", "yodler", "yodlers", "yodles", "yoga", "yogh", "yoghourt", "yoghourts", "yoghurt", "yoghurts", "yogi", "yogini", "yoginis", "yogis", "yogurt", "yogurts", "yohimbine", "yoke", "yokel", "yokels", "yokes", "yoko", "yokohama", "yolk", "yolks", "yoni", "yonis", "yonne", "yore", "yores", "yorick", "york", "yorker", "yorkers", "yorkist", "yorks", "yorkshire", "yorktown", "yoruba", "yorubas", "yosemite", "you", "you d", "you ll", "you re", "you ve", "young", "youngberries", "youngberry", "youngling", "younglings", "youngness", "youngster", "youngsters", "youngstown", "younker", "younkers", "youth", "youthfulness", "youths", "yowl", "yowling", "yowlings", "yowls", "ypres", "yseult", "ytterbia", "ytterbium", "yttria", "yttrium", "yuan", "yucca", "yuccas", "yugoslav", "yugoslavia", "yugoslavian", "yugoslavians", "yugoslavs", "yuk", "yukes", "yukon", "yuks", "yulan", "yulans", "yule", "yules", "yuletide", "yuletides", "yuppie", "yuppies", "yurt", "yurts", "yvelines", "yves", "yvette", "yvonne", "zabaglione", "zabagliones", "zach", "zachariah", "zacharias", "zachary", "zack", "zacks", "zaddik", "zaddiks", "zadok", "zaffer", "zag", "zagreb", "zags", "zaire", "zairean", "zaireans", "zakat", "zakuska", "zaman", "zamang", "zamarra", "zamarras", "zambezi", "zambia", "zamia", "zamias", "zamindar", "zamindari", "zamindaris", "zamindars", "zander", "zanders", "zanies", "zaniness", "zany", "zanyism", "zanzibar", "zap", "zapateado", "zapateados", "zapotec", "zapotecs", "zappa", "zaps", "zaptiah", "zaptiahs", "zara", "zaragoza", "zarathustra", "zarathustrian", "zaratite", "zareba", "zarebas", "zarf", "zarfs", "zaria", "zarzuela", "zarzuelas", "zastruga", "zax", "zaxes", "zea", "zeal", "zealot", "zealotries", "zealotry", "zealots", "zealousness", "zeals", "zebec", "zebecs", "zebedee", "zebra", "zebras", "zebrass", "zebrasses", "zebu", "zebus", "zecchino", "zecchinos", "zechariah", "zed", "zedoaries", "zedoary", "zeds", "zee", "zeebrugge", "zeeland", "zeelander", "zeelanders", "zees", "zeffirelli", "zein", "zelda", "zemindar", "zemindars", "zemstvo", "zemstvos", "zen", "zena", "zenana", "zenanas", "zend", "zend avesta", "zenith", "zeniths", "zeno", "zenobia", "zeolite", "zeolites", "zephaniah", "zephyr", "zephyrs", "zephyrus", "zeppelin", "zeppelins", "zermatt", "zero", "zeroed", "zeroes", "zeroing", "zeros", "zest", "zestfulness", "zests", "zeta", "zetas", "zeugma", "zeugmas", "zeus", "zeuxis", "zho", "zhos", "zia", "zibeline", "zibelines", "zibet", "zibets", "zidovudine", "ziegfeld", "ziff", "ziffs", "zig", "zigs", "zigzag", "zigzags", "zila", "zilas", "zilch", "zilches", "zillion", "zillions", "zimbabwe", "zinc", "zincite", "zincograph", "zincographer", "zincographers", "zincographs", "zincography", "zincs", "zinfandel", "zing", "zingiber", "zingibers", "zings", "zinjanthropus", "zinkenite", "zinnia", "zinnias", "zion", "zionism", "zionist", "zionists", "zip", "zip fastener", "zip fasteners", "zipper", "zippers", "zips", "zircalloy", "zircon", "zirconia", "zirconium", "zircons", "zither", "zithern", "zitherns", "zithers", "ziti", "zloty", "zlotys", "zoa", "zoanthropy", "zodiac", "zodiacs", "zoe", "zoea", "zoeas", "zoetrope", "zoetropes", "zoffany", "zohar", "zoisite", "zola", "zollverein", "zombi", "zombie", "zombies", "zombis", "zonation", "zonda", "zondas", "zone", "zones", "zoning", "zonings", "zonule", "zonules", "zoo", "zoochemistry", "zoochore", "zoochores", "zoogeography", "zoogloea", "zoografting", "zoograftings", "zoographer", "zoographers", "zoography", "zooid", "zooids", "zoolater", "zoolaters", "zoolatry", "zoologist", "zoologists", "zoology", "zoom", "zoometry", "zoomorph", "zoomorphism", "zoomorphisms", "zoomorphs", "zooms", "zoon", "zoonosis", "zoons", "zoophile", "zoophiles", "zoophilia", "zoophilism", "zoophobia", "zoophorus", "zoophyte", "zoophytes", "zooplankton", "zooplasty", "zoos", "zoosperm", "zoosperms", "zoosporangium", "zoosporangiums", "zoospore", "zoospores", "zootechnics", "zootomy", "zootoxin", "zootoxins", "zoril", "zorils", "zoroaster", "zoroastrian", "zoroastrianism", "zoroastrians", "zoster", "zosters", "zouave", "zucchetto", "zucchettos", "zucchini", "zucchinis", "zug", "zugzwang", "zugzwangs", "zuleika", "zulu", "zulus", "zwinglian", "zwitterion", "zwitterions", "zygapophysis", "zygocactus", "zygodactyl", "zygoma", "zygomas", "zygomycetes", "zygophyte", "zygophytes", "zygosis", "zygospore", "zygospores", "zygote", "zygotes", "zymase", "zymases", "zymogen", "zymology", "zymolysis", "zymometer", "zymometers", "zymosis", "zymurgy", "zyrian", "zyrians"];
    }
  });

  // res/js/src/words/participles.json
  var require_participles = __commonJS({
    "res/js/src/words/participles.json"(exports, module) {
      module.exports = ["accoutreing", "accoutring", "admining", "adminning", "ageing", "aging", "aliquoting", "aliquotting", "appareling", "apparelling", "arcing", "arcking arking", "assoilzieing", "assoilzying", "attaling", "attalling", "autocanceling", "autocancelling", "autodialing", "autodialling", "autofocusing", "autofocussing", "aweing", "awing", "backchanneling", "backchannelling", "backpedaling", "backpedalling", "banqueting", "banquetting", "barreling", "barrelling", "bayoneting", "bayonetting", "becudgeling", "becudgelling", "bedeviling", "bedevilling", "bedyeing", "bedying", "bejeweling", "bejewelling", "bemoist ning", "bemoistening", "benefiting", "benefitting", "bepommeling", "bepommelling", "betasseling", "betasselling", "beveling", "bevelling", "biasing", "biassing", "billeting", "billetting", "bingeing", "binging", "birdieing", "birdying", "bishoping", "bishopping", "bivouacing", "bivouacking", "blue penciling", "blue pencilling", "blueing", "bluing", "boogieing", "boogieing down", "boogying", "boogying down", "boweling", "bowelling", "braaiing", "braaing", "breveting", "brevetting", "buffeting", "buffetting", "busheling", "bushelling", "busing", "bussing", "cadgin", "cadging", "canaling", "canalling", "canceling", "canceling out", "cancelling", "cancelling out", "caravaning", "caravanning", "carbureting", "carburetting", "caroling", "carolling", "carroling", "carrolling", "caucusing", "caucussing", "caviling", "cavilling", "channeling", "channelling", "charing", "charring", "cheruping", "cherupping", "chiseling", "chiselling", "chorusing", "chorussing", "circumfering", "circumferring", "circusing", "circussing", "clicketing", "clicketting", "clueing", "cluing", "cocounseling", "cocounselling", "coiffing", "coifing", "combating", "combatting", "controuling", "controulling", "corbeling", "corbelling", "corseting", "corsetting", "cosseting", "cossetting", "counseling", "counselling", "countersignaling", "countersignalling", "court martialing", "court martialling", "courtmartialing", "courtmartialling", "coyoteing", "coyoting", "credentialing", "credentialling", "cudgeling", "cudgelling", "cupeling", "cupelling", "curveting", "curvetting", "debiasing", "debiassing", "decontroling", "decontrolling", "defocusing", "defocussing", "deleveling", "delevelling", "demosaicing", "demosaicking", "depetaling", "depetalling", "deprograming", "deprogramming", "detasseling", "detasselling", "deviling", "devilling", "dezincing", "dezincking", "diagraming", "diagramming", "dialing", "dialing into", "dialling", "dialling into", "disboweling", "disbowelling", "discounseling", "discounselling", "disemboweling", "disembowelling", "disemvoweling", "disemvowelling", "disenvoweling", "disenvowelling", "disfellowshiping", "disfellowshipping", "disheveling", "dishevelling", "diy ing", "diying", "docqueting", "docquetting", "dognaping", "dognapping", "doweling", "dowelling", "driveling", "drivelling", "drunk dialing", "drunk dialling", "dudeing", "duding", "dueling", "duelling", "dunchin", "dunching", "dyeing", "dying", "emboweling", "embowelling", "embrotheling", "embrothelling", "empanneling", "empannelling", "emperiling", "emperilling", "enameling", "enamelling", "enkenneling", "enkennelling", "enqueueing", "enqueuing", "entrammeling", "entrammelling", "envassaling", "envassalling", "envoweling", "envowelling", "equaling", "equalling", "examing", "examming", "eyeing", "eying", "faceting", "facetting", "facsimileing", "facsimiling", "fashin", "fashing", "fellowshiping", "fellowshipping", "fidgeting", "fidgetting", "flanneling", "flannelling", "focusing", "focussing", "fondueing", "fonduing", "foresignaling", "foresignalling", "frivoling", "frivolling", "fueling", "fueling up", "fuelling", "fuelling up", "funneling", "funnelling", "gamboling", "gambolling", "gambreling", "gambrelling", "gaveling", "gavelling", "generaling", "generalling", "gerbiling", "gerbilling", "gibbeting", "gibbetting", "gimbaling", "gimballing", "glueing", "gluing", "gossiping", "gossipping", "graveling", "gravelling", "groveling", "grovelling", "grueling", "gruelling", "halaling", "halalling", "hallaling", "hallalling", "handseling", "handselling", "hanseling", "hanselling", "harloting", "harlotting", "hatcheling", "hatchelling", "hatcheting", "hatchetting", "hiccuping", "hiccupping", "hickuping", "hickupping", "hieing", "hingeing", "hinging", "hocusing", "hocussing", "hondeling", "hondelling", "houdini ing", "houdiniing", "houseling", "houselling", "hoveling", "hovelling", "hoyin", "hoying", "hubbubbing", "hubbubing", "hyeing", "hying", "hyperfocusing", "hyperfocussing", "id ing", "iding", "impaneling", "impanelling", "impanneling", "impannelling", "imperiling", "imperilling", "initialing", "initialling", "jeweling", "jewelling", "jiggeting", "jiggetting", "jodeling", "jodelling", "joling", "jolling", "journaling", "journalling", "jumaring", "jumarring", "jump roping", "jumping rope", "junketing", "junketting", "kenneling", "kennelling", "kidnaping", "kidnapping", "labeling", "labelling", "larruping", "larrupping", "lateraling", "lateralling", "leafleting", "leafletting", "leveling", "leveling up", "levelling", "levelling up", "libeling", "libelling", "loling", "lolling", "lugeing", "luging", "lungeing", "lunging", "macadaming", "macadamming", "marshaling", "marshalling", "marveling", "marvelling", "maximining", "maximinning", "medaling", "medalling", "medevacing", "medevacking", "medicaling out", "medicalling out", "mic ing", "micing", "midwifing", "midwiving", "mischanneling", "mischannelling", "miscounseling", "miscounselling", "miscueing", "miscuing", "misdialing", "misdialling", "misfocusing", "misfocussing", "misfueling", "misfuelling", "mislabeling", "mislabelling", "mismodeling", "mismodelling", "misprograming", "misprogramming", "misrouteing", "misrouting", "missignaling", "missignalling", "modeling", "modelling", "muraling", "muralling", "new modeling", "new modelling", "newmodeling", "newmodelling", "nickeling", "nickelling", "ochreing", "ochring", "ollieing", "ollying", "omnibusing", "omnibussing", "out chorusing", "out chorussing", "outdueling", "outduelling", "outgeneraling", "outgeneralling", "outrivaling", "outrivalling", "outtraveling", "outtravelling", "overdyeing", "overdying", "overeyeing", "overeying", "overfocusing", "overfocussing", "overpedaling", "overpedalling", "paneling", "panelling", "paralleling", "parallelling", "parceling", "parceling out", "parcelling", "parcelling out", "pargeting", "pargetting", "pedaling", "pedalling", "penciling", "penciling out", "pencilling", "pencilling out", "phialing", "phialling", "photostating", "photostatting", "plodgin", "plodging", "plummeting", "plummetting", "plusing", "plussing", "pommeling", "pommelling", "postiling", "postilling", "preageing", "preaging", "precanceling", "precancelling", "precounseling", "precounselling", "predialing", "predialling", "predyeing", "predying", "prefocusing", "prefocussing", "preprograming", "preprogramming", "pretzeling", "pretzelling", "protocoling", "protocolling", "pummeling", "pummelling", "quarreling", "quarrelling", "queueing", "queuing", "radiolabeling", "radiolabelling", "rappeling", "rappelling", "raveling", "ravelling", "reappareling", "reapparelling", "rechanneling", "rechannelling", "red penciling", "red pencilling", "redialing", "redialling", "refocusing", "refocussing", "refueling", "refuelling", "refunneling", "refunnelling", "regening", "regenning", "regraveling", "regravelling", "relabeling", "relabelling", "remodeling", "remodelling", "reoccuring", "reoccurring", "repaneling", "repanelling", "reprograming", "reprogramming", "rerouteing", "rerouting", "resignaling", "resignalling", "retargeting", "retargetting", "retraveling", "retravelling", "reveling", "revelling", "revictualing", "revictualling", "ribbiting", "ribbitting", "ricocheting", "ricochetting", "rivaling", "rivalling", "riveting", "rivetting", "rock and rolling", "rocking and rolling", "rogueing", "roguing", "routeing", "routing", "roweling", "rowelling", "rueing", "ruing", "runneling", "runnelling", "russeting", "russetting", "rv ing rv ing", "rving", "saccing", "sacking", "scandaling", "scandalling", "schnorkeling", "schnorkelling", "scraming", "scramming", "scungeing", "scunging", "secreting", "secretting", "self focusing", "self focussing", "sentineling", "sentinelling", "shocking and aweing", "shocking and awing", "shoveling", "shovelling", "shriveling", "shrivelling", "signaling", "signalling", "silageing", "silaging", "slueing", "sluing", "snippeting", "snippetting", "sniveling", "snivelling", "snorkeling", "snorkelling", "soft pedaling", "soft pedalling", "soliloquing", "soliloquying", "sortieing", "sortying", "spanceling", "spancelling", "spanieling", "spanielling", "specialing", "specialling", "speed dialing", "speed dialling", "spiraling", "spiralling", "springeing", "springing", "spueing", "spuing", "stenciling", "stencilling", "stottin", "stotting", "subtotaling", "subtotalling", "summiting", "summitting", "surplusing", "surplussing", "swiveling", "swivelling", "symboling", "symbolling", "synching", "syncing", "tableting", "tabletting", "targeting", "targetting", "tarmacing", "tarmacking", "taxiing", "taxying", "teaseling", "teaselling", "telecineing", "telecining", "telneting", "telnetting", "tharving", "thermaling", "thermalling", "thurving", "tie dyeing", "tie dying", "tingeing", "tinging", "tinseling", "tinselling", "tittuping", "tittupping", "to and froing", "toing and froing", "torqueing", "torquing", "totaling", "totalling", "touseling", "touselling", "toweling", "towelling", "trammeling", "trammelling", "traveling", "travelling", "trepaning", "trepanning", "trialing", "trialling", "troweling", "trowelling", "trueing", "truing", "tunneling", "tunnelling", "turniping", "turnipping", "twingeing", "twinging", "twoccing", "twocking", "unbiasing", "unbiassing", "unblueing", "unbluing", "unboweling", "unbowelling", "uncoiffing", "uncoifing", "undeviling", "undevilling", "unfocusing", "unfocussing", "unglueing", "ungluing", "unleveling", "unlevelling", "unmarshaling", "unmarshalling", "unraring", "unrarring", "unraveling", "unravelling", "untaring", "untarring", "untrammeling", "untrammelling", "vesseling", "vesselling", "vialing", "vialling", "victualing", "victualling", "vitrioling", "vitriolling", "voweling", "vowelling", "war dialing", "war dialling", "weaseling", "weaseling out", "weaselling", "weaselling out", "whammeling", "whammelling", "wheelieing", "wheelying", "whemmeling", "whemmelling", "whingeing", "whinging", "wingeing", "winging", "worshiping", "worshipping", "yodeling", "yodelling", "zincing", "zinking zincking", "zombieing out", "zombying out"];
    }
  });

  // res/js/src/words/prepositions.json
  var require_prepositions = __commonJS({
    "res/js/src/words/prepositions.json"(exports, module) {
      module.exports = ["about", "above", "according to", "across", "after", "against", "ago", "ahead of", "along", "amidst", "among", "amongst", "apart", "around", "as", "as far as", "as well as", "aside", "at", "away", "because of", "before", "behind", "below", "beneath", "beside", "besides", "between", "beyond", "by", "by means of", "by way of", "close to", "despite", "down", "due to", "during", "except", "for", "from", "hence", "in", "in accordance with", "in addition to", "in case of", "in front of", "in lieu of", "in place of", "in regard to", "in spite of", "in to", "inside", "instead of", "into", "like", "near", "next", "next to", "notwithstanding", "of", "off", "on", "on account of", "on behalf of", "on to", "on top of", "onto", "opposite", "out", "out from", "out of", "outside", "over", "owing to", "past", "per", "prior to", "round", "since", "than", "through", "throughout", "till", "to", "toward", "towards", "under", "underneath", "unlike", "until", "unto", "up", "upon", "via", "with", "with a view to", "within", "without", "worth"];
    }
  });

  // res/js/src/words/pronouns.json
  var require_pronouns = __commonJS({
    "res/js/src/words/pronouns.json"(exports, module) {
      module.exports = ["all", "another", "any", "anybody", "anyone", "anything", "as", "aught", "both", "each", "each other", "either", "enough", "everybody", "everyone", "everything", "few", "he", "her", "hers", "herself", "him", "himself", "his", "i", "idem", "it", "its", "itself", "many", "me", "mine", "most", "my", "myself", "naught", "neither", "no one", "nobody", "none", "nothing", "nought", "one", "one another", "other", "others", "ought", "our", "ours", "ourself", "ourselves", "several", "she", "some", "somebody", "someone", "something", "somewhat", "such", "suchlike", "that", "thee", "their", "theirs", "theirself", "theirselves", "them", "themself", "themselves", "there", "these", "they", "thine", "this", "those", "thou", "thy", "thyself", "us", "we", "what", "whatever", "whatnot", "whatsoever", "whence", "where", "whereby", "wherefrom", "wherein", "whereinto", "whereof", "whereon", "wheresoever", "whereto", "whereunto", "wherever", "wherewith", "wherewithal", "whether", "which", "whichever", "whichsoever", "who", "whoever", "whom", "whomever", "whomso", "whomsoever", "whose", "whosesoever", "whosever", "whoso", "whosoever", "ye", "yon", "yonder", "you", "your", "yours", "yourself", "yourselves"];
    }
  });

  // res/js/src/words/verbs.json
  var require_verbs = __commonJS({
    "res/js/src/words/verbs.json"(exports, module) {
      module.exports = ["accept", "accuse", "achieve", "acknowledge", "acquire", "adapt", "add", "adjust", "admire", "admit", "adopt", "adore", "advise", "afford", "agree", "aim", "allow", "announce", "anticipate", "apologize", "appear", "apply", "appreciate", "approach", "approve", "argue", "arise", "arrange", "arrive", "ask", "assume", "assure", "astonish", "ate", "attach", "attempt", "attend", "attract", "avoid", "awake", "awoke", "awoken", "bake", "bathe", "be", "bear", "beat", "became", "become", "beg", "began", "begin", "begun", "behave", "believe", "belong", "bend", "bent", "beset", "bet", "bid", "bind", "bit", "bite", "bitten", "bled", "bleed", "blew", "blow", "blown", "boil", "bore", "born", "borrow", "bought", "bounce", "bound", "bow", "break", "bred", "breed", "bring", "broadcast", "broke", "broken", "brought", "build", "built", "burn", "burnt", "burst", "buy", "calculate", "came", "can could", "care", "carry", "cast", "catch", "caught", "celebrate", "change", "choose", "chop", "chose", "chosen", "claim", "climb", "cling", "clung", "come", "commit", "communicate", "compare", "compete", "complain", "complete", "concern", "confirm", "consent", "consider", "consist", "consult", "contain", "continue", "convince", "cook", "cost", "count", "crawl", "create", "creep", "crept", "criticize", "cry", "cut", "dance", "dare", "deal", "dealt", "decide", "defer", "delay", "deliver", "demand", "deny", "depend", "describe", "deserve", "desire", "destroy", "determine", "develop", "did", "differ", "dig", "disagree", "discover", "discuss", "dislike", "distribute", "dive", "dived", "do", "done", "doubt", "dove", "drag", "drank", "draw", "drawn", "dream", "dreamt", "drew", "drill", "drink", "drive", "driven", "drop", "drove", "drunk", "dry", "dug", "earn", "eat", "eaten", "emphasize", "enable", "encourage", "engage", "enhance", "enjoy", "ensure", "entail", "enter", "establish", "examine", "exist", "expand", "expect", "experiment", "explain", "explore", "extend", "fail", "fall", "fallen", "fed", "feed", "feel", "fell", "felt", "fight", "find", "finish", "fit", "fled", "flee", "flew", "fling", "flown", "flung", "fly", "fold", "follow", "forbade", "forbid", "forbidden", "forego", "foregone", "forewent", "forgave", "forget", "forgive", "forgiven", "forgo", "forgot", "forgotten", "forsake", "forsaken", "forsook", "fought", "found", "freeze", "froze", "frozen", "fry", "gave", "generate", "get", "give", "given", "go", "gone", "got", "gotten", "grew", "grind", "ground", "grow", "grown", "hang", "happen", "hate", "have", "hear", "heard", "held", "hesitate", "hid", "hidden", "hide", "hit", "hold", "hop", "hope", "hug", "hung", "hurry", "hurt", "identify", "ignore", "illustrate", "imagine", "imply", "impress", "improve", "include", "incorporate", "indicate", "inform", "insist", "install", "intend", "introduce", "invest", "investigate", "involve", "iron", "is", "jog", "jump", "justify", "keep", "kept", "kick", "kiss", "kneel", "knelt", "knew", "knit", "know", "lack", "laid", "lain", "laugh", "lay", "lead", "lean", "leap", "learn", "learned", "leave", "led", "left", "lend", "lent", "lept", "let", "lie", "lie in bed", "lie not to tell the truth", "lift", "light", "lighted", "like", "listen", "lit", "look", "lose", "lost", "love", "made", "maintain", "make", "manage", "matter", "may", "mean", "meant", "measure", "meet", "melt", "mention", "met", "might", "mind", "miss", "misspell", "misspelt", "mistake", "mistaken", "mistook", "mix", "mow", "mowed", "must", "need", "neglect", "negotiate", "observe", "obtain", "occur", "offer", "open", "operate", "order", "organize", "ought to", "overcame", "overcome", "overdid", "overdo", "overdone", "overtake", "overtaken", "overthrew", "overthrow", "overthrown", "overtook", "owe", "own", "paid", "paint", "participate", "pay", "peel", "perform", "persuade", "pinch", "plan", "play", "plead", "pled", "point", "possess", "postpone", "pour", "practice", "prefer", "prepare", "pretend", "prevent", "proceed", "promise", "propose", "protect", "prove", "proved", "pull", "punch", "pursue", "push", "put", "qualify", "quit", "ran", "rang", "react", "read", "realize", "recall", "receive", "recollect", "recommend", "reduce", "refer", "reflect", "refuse", "regret", "relate", "relax", "relieve", "rely", "remain", "remember", "remind", "repair", "replace", "represent", "require", "resent", "resist", "retain", "retire", "rid", "ridden", "ride", "ring", "rise", "risen", "risk", "roast", "rode", "rose", "run", "rung", "said", "sanction", "sang", "sank", "sat", "satisfy", "saw", "sawed", "sawn", "say", "scrub", "see", "seek", "seem", "seen", "sell", "send", "sent", "serve", "set", "settle", "sew", "sewed", "sewn", "shake", "shaken", "shall", "shave", "shaved", "shaven", "shear", "shed", "shine", "shod", "shoe", "shoed", "shone", "shook", "shoot", "shore", "shorn", "shot", "should", "show", "showed", "shown", "shrank", "shrink", "shrunk", "shut", "sing", "sink", "sit", "ski", "slain", "slay", "sleep", "slept", "slew", "slice", "slid", "slide", "sling", "slip", "slit", "slung", "smell", "smite", "smitten", "smote", "snore", "sold", "solve", "sought", "sow", "sowed", "sown", "spat", "speak", "specify", "sped", "speed", "spell", "spend", "spent", "spill", "spilled", "spin", "spit", "split", "spoke", "spoken", "sprang", "spread", "spring", "sprung", "spun", "squat", "stack", "stand", "stank", "start", "steal", "stick", "sting", "stink", "stir", "stole", "stolen", "stood", "stop", "stretch", "stridden", "stride", "strike", "string", "strive", "striven", "strod", "strove", "struck", "struggle", "strung", "stuck", "study", "stung", "stunk", "submit", "succeed", "suffer", "suggest", "sung", "sunk", "supply", "suppose", "surprise", "survive", "swam", "swear", "sweep", "swell", "swelled", "swept", "swim", "swing", "swollen", "swore", "sworn", "swum", "swung", "take", "taken", "talk", "taste", "taught", "teach", "tear", "tell", "tend", "think", "thought", "threaten", "threw", "thrive", "thrived", "throw", "thrown", "thrust", "tiptoe", "told", "tolerate", "took", "tore", "torn", "translate", "tread", "trod", "trodden", "try", "understand", "understood", "upheld", "uphold", "upset", "vacuum", "value", "vary", "volunteer", "wait", "wake", "walk", "want", "warn", "was", "wash", "watch", "wave", "wear", "weave", "wed", "weep", "weigh", "went", "wept", "were", "whip", "will", "win", "wind", "wish", "withheld", "withhold", "withstand", "withstood", "woke", "woken", "won", "wore", "worn", "would", "wound", "wove", "woven", "wring", "write", "written", "wrote", "wrung"];
    }
  });

  // res/js/src/words/index.js
  var require_words = __commonJS({
    "res/js/src/words/index.js"(exports, module) {
      var words = {
        adjectives: require_adjectives(),
        adverbs: require_adverbs(),
        conjunctions: require_conjunctions(),
        interjections: require_interjections(),
        nouns: require_nouns(),
        participles: require_participles(),
        prepositions: require_prepositions(),
        pronouns: require_pronouns(),
        verbs: require_verbs()
      };
      module.exports = words;
    }
  });

  // res/js/src/generate-username.js
  var require_generate_username = __commonJS({
    "res/js/src/generate-username.js"(exports, module) {
      var { camelify } = require_src3();
      var { random } = require_src2();
      var words = require_words();
      function capitalize(x) {
        x = x.toString();
        return x[0].toUpperCase() + x.slice(1);
      }
      function pickRandomFrom(x) {
        return x[Math.floor(random() * x.length)];
      }
      function generateUsername2() {
        const { adjectives, nouns } = words;
        const adjective = camelify(pickRandomFrom(adjectives));
        const noun = camelify(pickRandomFrom(nouns));
        const number = random().toFixed(1 + Math.floor(random() * 4)).split(".")[1];
        return capitalize(adjective) + capitalize(noun) + number;
      }
      module.exports = generateUsername2;
    }
  });

  // res/js/src/main.js
  var { createApp } = require_vue();
  var createVueComponentWithCSS = require_src();
  var generateUsername = require_generate_username();
  var css = (
    /* css */
    ``
  );
  var template = (
    /* html */
    `
  <div class="main">
    <p class="output">{{ username }}</p>
    <button @click="generate">Generate</button>
  </div>
`
  );
  var app = createApp(
    createVueComponentWithCSS({
      template,
      data() {
        return {
          css,
          username: ""
        };
      },
      methods: {
        generate() {
          this.username = generateUsername();
        }
      },
      mounted() {
        this.generate();
      }
    })
  );
  app.mount("#app");
})();
